
LUMEN_STM_Micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08013890  08013890  00023890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013e70  08013e70  000302b0  2**0
                  CONTENTS
  4 .ARM          00000008  08013e70  08013e70  00023e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013e78  08013e78  000302b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013e78  08013e78  00023e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013e7c  08013e7c  00023e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  08013e80  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000896c  200002b0  08014130  000302b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20008c1c  08014130  00038c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002215f  00000000  00000000  00030323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048de  00000000  00000000  00052482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cd0  00000000  00000000  00056d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001676  00000000  00000000  00058a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d300  00000000  00000000  0005a0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024c1c  00000000  00000000  000873a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001149ab  00000000  00000000  000abfc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000095d4  00000000  00000000  001c0970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001c9f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b0 	.word	0x200002b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013874 	.word	0x08013874

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b4 	.word	0x200002b4
 80001cc:	08013874 	.word	0x08013874

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <checkCalibration>:
	values[0] = 0.0;
	values[1] = 0.0;
	values[2] = 0.0;
}

bool checkCalibration(){
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	if (Ro < 0.0) {
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <checkCalibration+0x24>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	d501      	bpl.n	8001008 <checkCalibration+0x18>
			//Serial.println("Device not calibrated, call MQ2::begin before reading any value.");
			return false;
 8001004:	2300      	movs	r3, #0
 8001006:	e000      	b.n	800100a <checkCalibration+0x1a>
		}

		return true;
 8001008:	2301      	movs	r3, #1
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	20000024 	.word	0x20000024

08001018 <readLPG>:

		//lastReadTime = millis();
	    return values;
}

float readLPG(ADC_HandleTypeDef *hadc){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	if (!checkCalibration()) return 0.0;
 8001020:	f7ff ffe6 	bl	8000ff0 <checkCalibration>
 8001024:	4603      	mov	r3, r0
 8001026:	f083 0301 	eor.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <readLPG+0x1e>
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e00a      	b.n	800104c <readLPG+0x34>

	/*if (millis() < (lastReadTime + READ_DELAY) && values[0] > 0)
	        return values[0];
	else*/
	return (values[0] = MQGetPercentage(LPGCurve, hadc));
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <readLPG+0x44>)
 800103a:	f000 f8dd 	bl	80011f8 <MQGetPercentage>
 800103e:	eef0 7a40 	vmov.f32	s15, s0
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <readLPG+0x48>)
 8001044:	edc3 7a00 	vstr	s15, [r3]
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <readLPG+0x48>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eeb0 0a67 	vmov.f32	s0, s15
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000000 	.word	0x20000000
 8001060:	200002cc 	.word	0x200002cc

08001064 <readCO>:

float readCO(ADC_HandleTypeDef *hadc){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	if (!checkCalibration()) return 0.0;
 800106c:	f7ff ffc0 	bl	8000ff0 <checkCalibration>
 8001070:	4603      	mov	r3, r0
 8001072:	f083 0301 	eor.w	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <readCO+0x1e>
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	e00a      	b.n	8001098 <readCO+0x34>

	/*if (millis() < (lastReadTime + READ_DELAY) && values[1] > 0)
	        return values[1];
	else*/
	return (values[1] = MQGetPercentage(COCurve, hadc));
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4808      	ldr	r0, [pc, #32]	; (80010a8 <readCO+0x44>)
 8001086:	f000 f8b7 	bl	80011f8 <MQGetPercentage>
 800108a:	eef0 7a40 	vmov.f32	s15, s0
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <readCO+0x48>)
 8001090:	edc3 7a01 	vstr	s15, [r3, #4]
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <readCO+0x48>)
 8001096:	685b      	ldr	r3, [r3, #4]
}
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eeb0 0a67 	vmov.f32	s0, s15
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000000c 	.word	0x2000000c
 80010ac:	200002cc 	.word	0x200002cc

080010b0 <readSmoke>:

float readSmoke(ADC_HandleTypeDef *hadc){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if (!checkCalibration()) return 0.0;
 80010b8:	f7ff ff9a 	bl	8000ff0 <checkCalibration>
 80010bc:	4603      	mov	r3, r0
 80010be:	f083 0301 	eor.w	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <readSmoke+0x1e>
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e00a      	b.n	80010e4 <readSmoke+0x34>

	/*if (millis() < (lastReadTime + READ_DELAY) && values[2] > 0)
	        return values[2];
	else*/
	return (values[2] = MQGetPercentage(SmokeCurve, hadc));
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <readSmoke+0x44>)
 80010d2:	f000 f891 	bl	80011f8 <MQGetPercentage>
 80010d6:	eef0 7a40 	vmov.f32	s15, s0
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <readSmoke+0x48>)
 80010dc:	edc3 7a02 	vstr	s15, [r3, #8]
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <readSmoke+0x48>)
 80010e2:	689b      	ldr	r3, [r3, #8]
}
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000018 	.word	0x20000018
 80010f8:	200002cc 	.word	0x200002cc
 80010fc:	00000000 	.word	0x00000000

08001100 <MQResistanceCalculation>:

float MQResistanceCalculation(int raw_adc){
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	float flt_adc = (float) raw_adc;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001112:	edc7 7a03 	vstr	s15, [r7, #12]
    return RL_VALUE * (1023.0 - flt_adc) / flt_adc;
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff fa16 	bl	8000548 <__aeabi_f2d>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	a116      	add	r1, pc, #88	; (adr r1, 800117c <MQResistanceCalculation+0x7c>)
 8001122:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001126:	f7ff f8af 	bl	8000288 <__aeabi_dsub>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MQResistanceCalculation+0x78>)
 8001138:	f7ff fa5e 	bl	80005f8 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4614      	mov	r4, r2
 8001142:	461d      	mov	r5, r3
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f7ff f9ff 	bl	8000548 <__aeabi_f2d>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff fb7b 	bl	800084c <__aeabi_ddiv>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fd43 	bl	8000be8 <__aeabi_d2f>
 8001162:	4603      	mov	r3, r0
 8001164:	ee07 3a90 	vmov	s15, r3
}
 8001168:	eeb0 0a67 	vmov.f32	s0, s15
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bdb0      	pop	{r4, r5, r7, pc}
 8001172:	bf00      	nop
 8001174:	f3af 8000 	nop.w
 8001178:	40140000 	.word	0x40140000
 800117c:	00000000 	.word	0x00000000
 8001180:	408ff800 	.word	0x408ff800

08001184 <MQRead>:
	val = val / RO_CLEAN_AIR_FACTOR;

	return val;
}

float MQRead(ADC_HandleTypeDef *hadc){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	float rs = 0.0;
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < READ_SAMPLE_TIMES; i++) {
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	e01e      	b.n	80011d6 <MQRead+0x52>
		HAL_ADC_Start(hadc);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f002 fed5 	bl	8003f48 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, 100);
 800119e:	2164      	movs	r1, #100	; 0x64
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f002 ffbf 	bl	8004124 <HAL_ADC_PollForConversion>
		rs += MQResistanceCalculation(HAL_ADC_GetValue(hadc));
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f003 f894 	bl	80042d4 <HAL_ADC_GetValue>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ffa6 	bl	8001100 <MQResistanceCalculation>
 80011b4:	eeb0 7a40 	vmov.f32	s14, s0
 80011b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011c0:	edc7 7a03 	vstr	s15, [r7, #12]
		HAL_ADC_Stop(hadc);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f002 ff79 	bl	80040bc <HAL_ADC_Stop>
		HAL_Delay(READ_SAMPLE_INTERVAL);
 80011ca:	2032      	movs	r0, #50	; 0x32
 80011cc:	f002 fb16 	bl	80037fc <HAL_Delay>
	for (int i = 0; i < READ_SAMPLE_TIMES; i++) {
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3301      	adds	r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b04      	cmp	r3, #4
 80011da:	dddd      	ble.n	8001198 <MQRead+0x14>

	}

	return rs / ((float) READ_SAMPLE_TIMES);  // return the average
 80011dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80011e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011e8:	eef0 7a66 	vmov.f32	s15, s13
}
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <MQGetPercentage>:

float MQGetPercentage(float *pcurve, ADC_HandleTypeDef *hadc){
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	float rs_ro_ratio = MQRead(hadc) / Ro;
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f7ff ffbe 	bl	8001184 <MQRead>
 8001208:	eef0 6a40 	vmov.f32	s13, s0
 800120c:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <MQGetPercentage+0xd0>)
 800120e:	ed93 7a00 	vldr	s14, [r3]
 8001212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001216:	edc7 7a03 	vstr	s15, [r7, #12]
    return pow(10.0, ((log(rs_ro_ratio) - pcurve[1]) / pcurve[2]) + pcurve[0]);
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f7ff f994 	bl	8000548 <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	ec43 2b10 	vmov	d0, r2, r3
 8001228:	f010 ff5a 	bl	80120e0 <log>
 800122c:	ec55 4b10 	vmov	r4, r5, d0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3304      	adds	r3, #4
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f986 	bl	8000548 <__aeabi_f2d>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	f7ff f820 	bl	8000288 <__aeabi_dsub>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4614      	mov	r4, r2
 800124e:	461d      	mov	r5, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3308      	adds	r3, #8
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f976 	bl	8000548 <__aeabi_f2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff faf2 	bl	800084c <__aeabi_ddiv>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4614      	mov	r4, r2
 800126e:	461d      	mov	r5, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f967 	bl	8000548 <__aeabi_f2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4620      	mov	r0, r4
 8001280:	4629      	mov	r1, r5
 8001282:	f7ff f803 	bl	800028c <__adddf3>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	ec43 2b17 	vmov	d7, r2, r3
 800128e:	eeb0 1a47 	vmov.f32	s2, s14
 8001292:	eef0 1a67 	vmov.f32	s3, s15
 8001296:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80012c0 <MQGetPercentage+0xc8>
 800129a:	f010 ff5f 	bl	801215c <pow>
 800129e:	ec53 2b10 	vmov	r2, r3, d0
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fc9f 	bl	8000be8 <__aeabi_d2f>
 80012aa:	4603      	mov	r3, r0
 80012ac:	ee07 3a90 	vmov	s15, r3
}
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	f3af 8000 	nop.w
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40240000 	.word	0x40240000
 80012c8:	20000024 	.word	0x20000024

080012cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80012dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4a06      	ldr	r2, [pc, #24]	; (80012fc <vApplicationGetIdleTaskMemory+0x30>)
 80012e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200002d8 	.word	0x200002d8
 80012fc:	20000378 	.word	0x20000378

08001300 <HAL_UART_RxCpltCallback>:
ErrorCode error = NO_ERROR_STATE; // UU

//============================= Callback section

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
    if (huart == &huart5)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <HAL_UART_RxCpltCallback+0x48>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d116      	bne.n	800133e <HAL_UART_RxCpltCallback+0x3e>
    {
        g_GnssRx_Flag = true;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_UART_RxCpltCallback+0x4c>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
        g_openFixedDataTransmition = true;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_UART_RxCpltCallback+0x50>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_DMA(&huart5, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 800131c:	f240 228a 	movw	r2, #650	; 0x28a
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <HAL_UART_RxCpltCallback+0x54>)
 8001322:	4809      	ldr	r0, [pc, #36]	; (8001348 <HAL_UART_RxCpltCallback+0x48>)
 8001324:	f008 f954 	bl	80095d0 <HAL_UART_Receive_DMA>
        if (__HAL_UART_GET_FLAG(&huart5, UART_FLAG_ORE))
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <HAL_UART_RxCpltCallback+0x48>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b08      	cmp	r3, #8
 8001334:	d103      	bne.n	800133e <HAL_UART_RxCpltCallback+0x3e>
                {
                    __HAL_UART_CLEAR_OREFLAG(&huart5); // Clear overrun
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <HAL_UART_RxCpltCallback+0x48>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2208      	movs	r2, #8
 800133c:	621a      	str	r2, [r3, #32]
    /*if (huart == &huart4)
    {
        HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
    }*/
    // HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20001048 	.word	0x20001048
 800134c:	20000578 	.word	0x20000578
 8001350:	20000579 	.word	0x20000579
 8001354:	20000a58 	.word	0x20000a58

08001358 <UsrGpsL86Init>:

//============================= Initial section

void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 8001360:	f240 228a 	movw	r2, #650	; 0x28a
 8001364:	4903      	ldr	r1, [pc, #12]	; (8001374 <UsrGpsL86Init+0x1c>)
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f008 f932 	bl	80095d0 <HAL_UART_Receive_DMA>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000a58 	.word	0x20000a58

08001378 <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    getRmc();
 8001380:	f000 f83a 	bl	80013f8 <getRmc>
    getGGA();
 8001384:	f000 f966 	bl	8001654 <getGGA>
    if (rmcValidFlag)
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <Usr_GpsL86GetValues+0x74>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <Usr_GpsL86GetValues+0x20>
    {
        rmcValidFlag = false;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <Usr_GpsL86GetValues+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 8001398:	f000 f8ee 	bl	8001578 <formatLatLong>

    gpsData_->lat = gpsData.lat;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <Usr_GpsL86GetValues+0x78>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <Usr_GpsL86GetValues+0x78>)
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <Usr_GpsL86GetValues+0x78>)
 80013ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24
    gpsData_->speedKN = gpsData.speedKN;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <Usr_GpsL86GetValues+0x78>)
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <Usr_GpsL86GetValues+0x78>)
 80013be:	6a1a      	ldr	r2, [r3, #32]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <Usr_GpsL86GetValues+0x78>)
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <Usr_GpsL86GetValues+0x78>)
 80013ce:	69da      	ldr	r2, [r3, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <Usr_GpsL86GetValues+0x78>)
 80013d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
    UsrGpsL86Init(&huart5);
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <Usr_GpsL86GetValues+0x7c>)
 80013de:	f7ff ffbb 	bl	8001358 <UsrGpsL86Init>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000057a 	.word	0x2000057a
 80013f0:	20000e5c 	.word	0x20000e5c
 80013f4:	20001048 	.word	0x20001048

080013f8 <getRmc>:

//============================= Statics

_io void getRmc(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af02      	add	r7, sp, #8
    if (g_GnssRx_Flag)
 80013fe:	4b4d      	ldr	r3, [pc, #308]	; (8001534 <getRmc+0x13c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 8091 	beq.w	800152c <getRmc+0x134>
    {
        MsgIndex = 0;
 800140a:	4b4b      	ldr	r3, [pc, #300]	; (8001538 <getRmc+0x140>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8001410:	494a      	ldr	r1, [pc, #296]	; (800153c <getRmc+0x144>)
 8001412:	484b      	ldr	r0, [pc, #300]	; (8001540 <getRmc+0x148>)
 8001414:	f00c fe97 	bl	800e146 <strcpy>
        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 8001418:	494a      	ldr	r1, [pc, #296]	; (8001544 <getRmc+0x14c>)
 800141a:	4849      	ldr	r0, [pc, #292]	; (8001540 <getRmc+0x148>)
 800141c:	f00c fdaf 	bl	800df7e <strstr>
 8001420:	4603      	mov	r3, r0
 8001422:	4a49      	ldr	r2, [pc, #292]	; (8001548 <getRmc+0x150>)
 8001424:	6013      	str	r3, [r2, #0]
        if (ptr == NULL) {
 8001426:	4b48      	ldr	r3, [pc, #288]	; (8001548 <getRmc+0x150>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d107      	bne.n	800143e <getRmc+0x46>
            ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 800142e:	4947      	ldr	r1, [pc, #284]	; (800154c <getRmc+0x154>)
 8001430:	4843      	ldr	r0, [pc, #268]	; (8001540 <getRmc+0x148>)
 8001432:	f00c fda4 	bl	800df7e <strstr>
 8001436:	4603      	mov	r3, r0
 8001438:	4a43      	ldr	r2, [pc, #268]	; (8001548 <getRmc+0x150>)
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	e002      	b.n	8001444 <getRmc+0x4c>
        } else {
        	naso = 1;
 800143e:	4b44      	ldr	r3, [pc, #272]	; (8001550 <getRmc+0x158>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
        }
        if (*ptr == 'G' && ptr != NULL)
 8001444:	4b40      	ldr	r3, [pc, #256]	; (8001548 <getRmc+0x150>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b47      	cmp	r3, #71	; 0x47
 800144c:	d16b      	bne.n	8001526 <getRmc+0x12e>
 800144e:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <getRmc+0x150>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d067      	beq.n	8001526 <getRmc+0x12e>
        {
            while (1)
            {
                gpsPayload[MsgIndex] = *ptr;
 8001456:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <getRmc+0x150>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b37      	ldr	r3, [pc, #220]	; (8001538 <getRmc+0x140>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	7811      	ldrb	r1, [r2, #0]
 8001460:	4a3c      	ldr	r2, [pc, #240]	; (8001554 <getRmc+0x15c>)
 8001462:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 8001464:	4b34      	ldr	r3, [pc, #208]	; (8001538 <getRmc+0x140>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	4a33      	ldr	r2, [pc, #204]	; (8001538 <getRmc+0x140>)
 800146c:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 800146e:	4b36      	ldr	r3, [pc, #216]	; (8001548 <getRmc+0x150>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a31      	ldr	r2, [pc, #196]	; (8001538 <getRmc+0x140>)
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	441a      	add	r2, r3
 8001478:	4b33      	ldr	r3, [pc, #204]	; (8001548 <getRmc+0x150>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	701a      	strb	r2, [r3, #0]

                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8001480:	4b31      	ldr	r3, [pc, #196]	; (8001548 <getRmc+0x150>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b0a      	cmp	r3, #10
 8001488:	d003      	beq.n	8001492 <getRmc+0x9a>
 800148a:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <getRmc+0x140>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b5a      	cmp	r3, #90	; 0x5a
 8001490:	dde1      	ble.n	8001456 <getRmc+0x5e>
                {
                    MsgIndex = 0;
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <getRmc+0x140>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
                    // memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
                    //  memset(m_rxData, 0, sizeof(m_rxData));

                    for (int i = 0; i < 100; i++)
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	e014      	b.n	80014c8 <getRmc+0xd0>
                    {
                        if (gpsPayload[i] == 'N')
 800149e:	4a2d      	ldr	r2, [pc, #180]	; (8001554 <getRmc+0x15c>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b4e      	cmp	r3, #78	; 0x4e
 80014a8:	d102      	bne.n	80014b0 <getRmc+0xb8>
                            f_northFlag = true;
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <getRmc+0x160>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
                        if (gpsPayload[i] == 'E')
 80014b0:	4a28      	ldr	r2, [pc, #160]	; (8001554 <getRmc+0x15c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b45      	cmp	r3, #69	; 0x45
 80014ba:	d102      	bne.n	80014c2 <getRmc+0xca>
                            f_eastFlag = true;
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <getRmc+0x164>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
                    for (int i = 0; i < 100; i++)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3301      	adds	r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b63      	cmp	r3, #99	; 0x63
 80014cc:	dde7      	ble.n	800149e <getRmc+0xa6>
                    }
                    if (strlen(gpsPayload) > 10)
 80014ce:	4821      	ldr	r0, [pc, #132]	; (8001554 <getRmc+0x15c>)
 80014d0:	f7fe fece 	bl	8000270 <strlen>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b0a      	cmp	r3, #10
 80014d8:	d91f      	bls.n	800151a <getRmc+0x122>
                    {
                        if (f_eastFlag && f_northFlag)
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <getRmc+0x164>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d01f      	beq.n	8001524 <getRmc+0x12c>
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <getRmc+0x160>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d01a      	beq.n	8001524 <getRmc+0x12c>
                        {
                            f_northFlag = false;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <getRmc+0x160>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
                            f_eastFlag = false;
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <getRmc+0x164>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <getRmc+0x168>)
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <getRmc+0x16c>)
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <getRmc+0x170>)
 8001504:	4a19      	ldr	r2, [pc, #100]	; (800156c <getRmc+0x174>)
 8001506:	491a      	ldr	r1, [pc, #104]	; (8001570 <getRmc+0x178>)
 8001508:	4812      	ldr	r0, [pc, #72]	; (8001554 <getRmc+0x15c>)
 800150a:	f00c fcbf 	bl	800de8c <siscanf>
                            rmcValidFlag = true;
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <getRmc+0x17c>)
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]
                            formatLatLong();
 8001514:	f000 f830 	bl	8001578 <formatLatLong>
                    else
                    {
                        // dataErr Log
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 8001518:	e004      	b.n	8001524 <getRmc+0x12c>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 800151a:	2264      	movs	r2, #100	; 0x64
 800151c:	2100      	movs	r1, #0
 800151e:	480d      	ldr	r0, [pc, #52]	; (8001554 <getRmc+0x15c>)
 8001520:	f00c fd25 	bl	800df6e <memset>
                    break;
 8001524:	bf00      	nop
                }
            }
        }
        g_GnssRx_Flag = false;
 8001526:	4b03      	ldr	r3, [pc, #12]	; (8001534 <getRmc+0x13c>)
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
    }
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000578 	.word	0x20000578
 8001538:	20000580 	.word	0x20000580
 800153c:	20000a58 	.word	0x20000a58
 8001540:	20000650 	.word	0x20000650
 8001544:	08013890 	.word	0x08013890
 8001548:	20000584 	.word	0x20000584
 800154c:	08013898 	.word	0x08013898
 8001550:	20000e58 	.word	0x20000e58
 8001554:	20000588 	.word	0x20000588
 8001558:	2000057b 	.word	0x2000057b
 800155c:	2000057c 	.word	0x2000057c
 8001560:	20000e64 	.word	0x20000e64
 8001564:	20000a54 	.word	0x20000a54
 8001568:	20000a50 	.word	0x20000a50
 800156c:	20000e68 	.word	0x20000e68
 8001570:	080138a0 	.word	0x080138a0
 8001574:	2000057a 	.word	0x2000057a

08001578 <formatLatLong>:

_io void formatLatLong(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 800157e:	4b30      	ldr	r3, [pc, #192]	; (8001640 <formatLatLong+0xc8>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001588:	ee17 1a90 	vmov	r1, s15
 800158c:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <formatLatLong+0xcc>)
 800158e:	fb83 2301 	smull	r2, r3, r3, r1
 8001592:	115a      	asrs	r2, r3, #5
 8001594:	17cb      	asrs	r3, r1, #31
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <formatLatLong+0xc8>)
 800159c:	ed93 7a00 	vldr	s14, [r3]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2264      	movs	r2, #100	; 0x64
 80015a4:	fb02 f303 	mul.w	r3, r2, r3
 80015a8:	ee07 3a90 	vmov	s15, r3
 80015ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b4:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c2:	edd7 6a00 	vldr	s13, [r7]
 80015c6:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8001648 <formatLatLong+0xd0>
 80015ca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80015ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <formatLatLong+0xd4>)
 80015d4:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <formatLatLong+0xd8>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015e2:	ee17 1a90 	vmov	r1, s15
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <formatLatLong+0xcc>)
 80015e8:	fb83 2301 	smull	r2, r3, r3, r1
 80015ec:	115a      	asrs	r2, r3, #5
 80015ee:	17cb      	asrs	r3, r1, #31
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <formatLatLong+0xd8>)
 80015f6:	ed93 7a00 	vldr	s14, [r3]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2264      	movs	r2, #100	; 0x64
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800160e:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	ee07 3a90 	vmov	s15, r3
 8001618:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800161c:	edd7 6a00 	vldr	s13, [r7]
 8001620:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8001648 <formatLatLong+0xd0>
 8001624:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <formatLatLong+0xd4>)
 800162e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000a50 	.word	0x20000a50
 8001644:	51eb851f 	.word	0x51eb851f
 8001648:	42700000 	.word	0x42700000
 800164c:	20000e5c 	.word	0x20000e5c
 8001650:	20000a54 	.word	0x20000a54

08001654 <getGGA>:

_io void getGGA(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af06      	add	r7, sp, #24
    if (g_openFixedDataTransmition)
 800165a:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <getGGA+0xf0>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d06c      	beq.n	800173e <getGGA+0xea>
    {
        MsgIndex = 0;
 8001664:	4b38      	ldr	r3, [pc, #224]	; (8001748 <getGGA+0xf4>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 800166a:	4938      	ldr	r1, [pc, #224]	; (800174c <getGGA+0xf8>)
 800166c:	4838      	ldr	r0, [pc, #224]	; (8001750 <getGGA+0xfc>)
 800166e:	f00c fd6a 	bl	800e146 <strcpy>
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 8001672:	4938      	ldr	r1, [pc, #224]	; (8001754 <getGGA+0x100>)
 8001674:	4836      	ldr	r0, [pc, #216]	; (8001750 <getGGA+0xfc>)
 8001676:	f00c fc82 	bl	800df7e <strstr>
 800167a:	4603      	mov	r3, r0
 800167c:	4a36      	ldr	r2, [pc, #216]	; (8001758 <getGGA+0x104>)
 800167e:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 8001680:	4b35      	ldr	r3, [pc, #212]	; (8001758 <getGGA+0x104>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b47      	cmp	r3, #71	; 0x47
 8001688:	d14a      	bne.n	8001720 <getGGA+0xcc>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 800168a:	4b33      	ldr	r3, [pc, #204]	; (8001758 <getGGA+0x104>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <getGGA+0xf4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	7811      	ldrb	r1, [r2, #0]
 8001694:	4a31      	ldr	r2, [pc, #196]	; (800175c <getGGA+0x108>)
 8001696:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <getGGA+0xf4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	4a2a      	ldr	r2, [pc, #168]	; (8001748 <getGGA+0xf4>)
 80016a0:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <getGGA+0x104>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a28      	ldr	r2, [pc, #160]	; (8001748 <getGGA+0xf4>)
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	441a      	add	r2, r3
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <getGGA+0x104>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <getGGA+0x104>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b0a      	cmp	r3, #10
 80016bc:	d003      	beq.n	80016c6 <getGGA+0x72>
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <getGGA+0xf4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b5a      	cmp	r3, #90	; 0x5a
 80016c4:	dde1      	ble.n	800168a <getGGA+0x36>
                {
                    MsgIndex = 0;
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <getGGA+0xf4>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 80016cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d0:	2100      	movs	r1, #0
 80016d2:	481f      	ldr	r0, [pc, #124]	; (8001750 <getGGA+0xfc>)
 80016d4:	f00c fc4b 	bl	800df6e <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 80016d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016dc:	2100      	movs	r1, #0
 80016de:	481b      	ldr	r0, [pc, #108]	; (800174c <getGGA+0xf8>)
 80016e0:	f00c fc45 	bl	800df6e <memset>

                    if (strlen(gpsGGAPayload) > 10)
 80016e4:	481d      	ldr	r0, [pc, #116]	; (800175c <getGGA+0x108>)
 80016e6:	f7fe fdc3 	bl	8000270 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b0a      	cmp	r3, #10
 80016ee:	d912      	bls.n	8001716 <getGGA+0xc2>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <getGGA+0x10c>)
 80016f2:	9305      	str	r3, [sp, #20]
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <getGGA+0x110>)
 80016f6:	9304      	str	r3, [sp, #16]
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <getGGA+0x114>)
 80016fa:	9303      	str	r3, [sp, #12]
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <getGGA+0x118>)
 80016fe:	9302      	str	r3, [sp, #8]
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <getGGA+0x11c>)
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <getGGA+0x120>)
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <getGGA+0x124>)
 800170a:	4a1c      	ldr	r2, [pc, #112]	; (800177c <getGGA+0x128>)
 800170c:	491c      	ldr	r1, [pc, #112]	; (8001780 <getGGA+0x12c>)
 800170e:	4813      	ldr	r0, [pc, #76]	; (800175c <getGGA+0x108>)
 8001710:	f00c fbbc 	bl	800de8c <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 8001714:	e004      	b.n	8001720 <getGGA+0xcc>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8001716:	2264      	movs	r2, #100	; 0x64
 8001718:	2100      	movs	r1, #0
 800171a:	481a      	ldr	r0, [pc, #104]	; (8001784 <getGGA+0x130>)
 800171c:	f00c fc27 	bl	800df6e <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <getGGA+0xf0>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
        memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 8001726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172a:	2100      	movs	r1, #0
 800172c:	4808      	ldr	r0, [pc, #32]	; (8001750 <getGGA+0xfc>)
 800172e:	f00c fc1e 	bl	800df6e <memset>
        memset(m_rxData, 0, sizeof(m_rxData));
 8001732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001736:	2100      	movs	r1, #0
 8001738:	4804      	ldr	r0, [pc, #16]	; (800174c <getGGA+0xf8>)
 800173a:	f00c fc18 	bl	800df6e <memset>
        // UsrGpsL86Init(&huart2);
    }
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000579 	.word	0x20000579
 8001748:	20000580 	.word	0x20000580
 800174c:	20000a58 	.word	0x20000a58
 8001750:	20000650 	.word	0x20000650
 8001754:	08013898 	.word	0x08013898
 8001758:	20000584 	.word	0x20000584
 800175c:	200005ec 	.word	0x200005ec
 8001760:	20000e88 	.word	0x20000e88
 8001764:	20000e84 	.word	0x20000e84
 8001768:	20000e80 	.word	0x20000e80
 800176c:	20000e7c 	.word	0x20000e7c
 8001770:	20000e78 	.word	0x20000e78
 8001774:	20000e74 	.word	0x20000e74
 8001778:	20000e70 	.word	0x20000e70
 800177c:	20000e6c 	.word	0x20000e6c
 8001780:	080138bc 	.word	0x080138bc
 8001784:	20000588 	.word	0x20000588

08001788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800178e:	f001 fff5 	bl	800377c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001792:	f000 f877 	bl	8001884 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001796:	f000 f8c6 	bl	8001926 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800179a:	f000 fbbb 	bl	8001f14 <MX_GPIO_Init>
  MX_DMA_Init();
 800179e:	f000 fb9b 	bl	8001ed8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017a2:	f000 fb39 	bl	8001e18 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80017a6:	f000 f9c3 	bl	8001b30 <MX_I2C2_Init>
  MX_ADC1_Init();
 80017aa:	f000 f8e7 	bl	800197c <MX_ADC1_Init>
  MX_I2C3_Init();
 80017ae:	f000 f9ff 	bl	8001bb0 <MX_I2C3_Init>
  MX_UART5_Init();
 80017b2:	f000 fad1 	bl	8001d58 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80017b6:	f000 fb5f 	bl	8001e78 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80017ba:	f000 fa39 	bl	8001c30 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80017be:	f000 fafb 	bl	8001db8 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 80017c2:	f000 f951 	bl	8001a68 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
  MPU6050_Init(&hi2c3);
 80017c6:	4822      	ldr	r0, [pc, #136]	; (8001850 <main+0xc8>)
 80017c8:	f000 fe71 	bl	80024ae <MPU6050_Init>
  UsrGpsL86Init(&huart5);
 80017cc:	4821      	ldr	r0, [pc, #132]	; (8001854 <main+0xcc>)
 80017ce:	f7ff fdc3 	bl	8001358 <UsrGpsL86Init>
  /* ------ QUEUE RELATED ------ */
  Queue_Handler = xQueueCreate(2,sizeof(data));
 80017d2:	2200      	movs	r2, #0
 80017d4:	2140      	movs	r1, #64	; 0x40
 80017d6:	2002      	movs	r0, #2
 80017d8:	f009 fa6a 	bl	800acb0 <xQueueGenericCreate>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <main+0xd0>)
 80017e0:	6013      	str	r3, [r2, #0]
  if (Queue_Handler == NULL) {
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <main+0xd0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <main+0x66>

      Error_Handler();
 80017ea:	f000 fe5b 	bl	80024a4 <Error_Handler>
  }

  /* ------ TASK RELATED ------ */
  xTaskCreate(measurements_task, "measure", 1024, NULL, 3, &Measurements_Handler);
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <main+0xd4>)
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	2303      	movs	r3, #3
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2300      	movs	r3, #0
 80017f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017fc:	4918      	ldr	r1, [pc, #96]	; (8001860 <main+0xd8>)
 80017fe:	4819      	ldr	r0, [pc, #100]	; (8001864 <main+0xdc>)
 8001800:	f009 ffad 	bl	800b75e <xTaskCreate>
  xTaskCreate(sender_task, "send data", 128, NULL, 2, &Sender_Handler);
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <main+0xe0>)
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	2302      	movs	r3, #2
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2300      	movs	r3, #0
 800180e:	2280      	movs	r2, #128	; 0x80
 8001810:	4916      	ldr	r1, [pc, #88]	; (800186c <main+0xe4>)
 8001812:	4817      	ldr	r0, [pc, #92]	; (8001870 <main+0xe8>)
 8001814:	f009 ffa3 	bl	800b75e <xTaskCreate>
  xTaskCreate(LED_task, "toggle LED", 128, NULL, 1, &LED_Handler);
 8001818:	4b16      	ldr	r3, [pc, #88]	; (8001874 <main+0xec>)
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2301      	movs	r3, #1
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2300      	movs	r3, #0
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	4914      	ldr	r1, [pc, #80]	; (8001878 <main+0xf0>)
 8001826:	4815      	ldr	r0, [pc, #84]	; (800187c <main+0xf4>)
 8001828:	f009 ff99 	bl	800b75e <xTaskCreate>


  /* ------ SEMAPHORE/MUTEX RELATED ------ */
  PWM_Sem_Handler = xSemaphoreCreateBinary();
 800182c:	2203      	movs	r2, #3
 800182e:	2100      	movs	r1, #0
 8001830:	2001      	movs	r0, #1
 8001832:	f009 fa3d 	bl	800acb0 <xQueueGenericCreate>
 8001836:	4603      	mov	r3, r0
 8001838:	4a11      	ldr	r2, [pc, #68]	; (8001880 <main+0xf8>)
 800183a:	6013      	str	r3, [r2, #0]
  if (PWM_Sem_Handler == NULL) {
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <main+0xf8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <main+0xc0>

        Error_Handler();
 8001844:	f000 fe2e 	bl	80024a4 <Error_Handler>
    }

  vTaskStartScheduler();
 8001848:	f00a f912 	bl	800ba70 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800184c:	e7fe      	b.n	800184c <main+0xc4>
 800184e:	bf00      	nop
 8001850:	20000fa8 	.word	0x20000fa8
 8001854:	20001048 	.word	0x20001048
 8001858:	200013e8 	.word	0x200013e8
 800185c:	200013dc 	.word	0x200013dc
 8001860:	080138e4 	.word	0x080138e4
 8001864:	08002079 	.word	0x08002079
 8001868:	200013e0 	.word	0x200013e0
 800186c:	080138ec 	.word	0x080138ec
 8001870:	080022fd 	.word	0x080022fd
 8001874:	200013e4 	.word	0x200013e4
 8001878:	080138f8 	.word	0x080138f8
 800187c:	08002361 	.word	0x08002361
 8001880:	200013ec 	.word	0x200013ec

08001884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b096      	sub	sp, #88	; 0x58
 8001888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	2244      	movs	r2, #68	; 0x44
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f00c fb6b 	bl	800df6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001898:	463b      	mov	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018aa:	f005 f989 	bl	8006bc0 <HAL_PWREx_ControlVoltageScaling>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018b4:	f000 fdf6 	bl	80024a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018b8:	2302      	movs	r3, #2
 80018ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018c2:	2310      	movs	r3, #16
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c6:	2302      	movs	r3, #2
 80018c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ca:	2302      	movs	r3, #2
 80018cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80018d2:	230a      	movs	r3, #10
 80018d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018d6:	2307      	movs	r3, #7
 80018d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018da:	2302      	movs	r3, #2
 80018dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018de:	2302      	movs	r3, #2
 80018e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4618      	mov	r0, r3
 80018e8:	f005 f9c0 	bl	8006c6c <HAL_RCC_OscConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80018f2:	f000 fdd7 	bl	80024a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f6:	230f      	movs	r3, #15
 80018f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fa:	2303      	movs	r3, #3
 80018fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800190a:	463b      	mov	r3, r7
 800190c:	2104      	movs	r1, #4
 800190e:	4618      	mov	r0, r3
 8001910:	f005 fd88 	bl	8007424 <HAL_RCC_ClockConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800191a:	f000 fdc3 	bl	80024a4 <Error_Handler>
  }
}
 800191e:	bf00      	nop
 8001920:	3758      	adds	r7, #88	; 0x58
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b0a2      	sub	sp, #136	; 0x88
 800192a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800192c:	463b      	mov	r3, r7
 800192e:	2288      	movs	r2, #136	; 0x88
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f00c fb1b 	bl	800df6e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001938:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800193c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800193e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001942:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001944:	2302      	movs	r3, #2
 8001946:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001948:	2301      	movs	r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800194c:	2308      	movs	r3, #8
 800194e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001950:	2307      	movs	r3, #7
 8001952:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001954:	2302      	movs	r3, #2
 8001956:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001958:	2302      	movs	r3, #2
 800195a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800195c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001960:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001962:	463b      	mov	r3, r7
 8001964:	4618      	mov	r0, r3
 8001966:	f005 ffb3 	bl	80078d0 <HAL_RCCEx_PeriphCLKConfig>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001970:	f000 fd98 	bl	80024a4 <Error_Handler>
  }
}
 8001974:	bf00      	nop
 8001976:	3788      	adds	r7, #136	; 0x88
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
 800199c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800199e:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <MX_ADC1_Init+0xe0>)
 80019a0:	4a2f      	ldr	r2, [pc, #188]	; (8001a60 <MX_ADC1_Init+0xe4>)
 80019a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <MX_ADC1_Init+0xe0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <MX_ADC1_Init+0xe0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <MX_ADC1_Init+0xe0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019b6:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <MX_ADC1_Init+0xe0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <MX_ADC1_Init+0xe0>)
 80019be:	2204      	movs	r2, #4
 80019c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019c2:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <MX_ADC1_Init+0xe0>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <MX_ADC1_Init+0xe0>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019ce:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <MX_ADC1_Init+0xe0>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <MX_ADC1_Init+0xe0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019dc:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <MX_ADC1_Init+0xe0>)
 80019de:	2200      	movs	r2, #0
 80019e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <MX_ADC1_Init+0xe0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019e8:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <MX_ADC1_Init+0xe0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_ADC1_Init+0xe0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <MX_ADC1_Init+0xe0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019fe:	4817      	ldr	r0, [pc, #92]	; (8001a5c <MX_ADC1_Init+0xe0>)
 8001a00:	f002 f952 	bl	8003ca8 <HAL_ADC_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001a0a:	f000 fd4b 	bl	80024a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	4810      	ldr	r0, [pc, #64]	; (8001a5c <MX_ADC1_Init+0xe0>)
 8001a1a:	f003 fa23 	bl	8004e64 <HAL_ADCEx_MultiModeConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001a24:	f000 fd3e 	bl	80024a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_ADC1_Init+0xe8>)
 8001a2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a2c:	2306      	movs	r3, #6
 8001a2e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a34:	237f      	movs	r3, #127	; 0x7f
 8001a36:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_ADC1_Init+0xe0>)
 8001a46:	f002 fc53 	bl	80042f0 <HAL_ADC_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001a50:	f000 fd28 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	; 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000e8c 	.word	0x20000e8c
 8001a60:	50040000 	.word	0x50040000
 8001a64:	43210000 	.word	0x43210000

08001a68 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a6e:	463b      	mov	r3, r7
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
 8001a7c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001a7e:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001a80:	4a29      	ldr	r2, [pc, #164]	; (8001b28 <MX_ADC2_Init+0xc0>)
 8001a82:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a84:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a90:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a96:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a9c:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ade:	4811      	ldr	r0, [pc, #68]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001ae0:	f002 f8e2 	bl	8003ca8 <HAL_ADC_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001aea:	f000 fcdb 	bl	80024a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <MX_ADC2_Init+0xc4>)
 8001af0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001af2:	2306      	movs	r3, #6
 8001af4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001afa:	237f      	movs	r3, #127	; 0x7f
 8001afc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001afe:	2304      	movs	r3, #4
 8001b00:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b06:	463b      	mov	r3, r7
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4806      	ldr	r0, [pc, #24]	; (8001b24 <MX_ADC2_Init+0xbc>)
 8001b0c:	f002 fbf0 	bl	80042f0 <HAL_ADC_ConfigChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8001b16:	f000 fcc5 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000ef0 	.word	0x20000ef0
 8001b28:	50040100 	.word	0x50040100
 8001b2c:	3ac04000 	.word	0x3ac04000

08001b30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <MX_I2C2_Init+0x74>)
 8001b36:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <MX_I2C2_Init+0x78>)
 8001b38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <MX_I2C2_Init+0x74>)
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	; (8001bac <MX_I2C2_Init+0x7c>)
 8001b3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <MX_I2C2_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <MX_I2C2_Init+0x74>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <MX_I2C2_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b52:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <MX_I2C2_Init+0x74>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <MX_I2C2_Init+0x74>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_I2C2_Init+0x74>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_I2C2_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b6a:	480e      	ldr	r0, [pc, #56]	; (8001ba4 <MX_I2C2_Init+0x74>)
 8001b6c:	f003 ff5c 	bl	8005a28 <HAL_I2C_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b76:	f000 fc95 	bl	80024a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <MX_I2C2_Init+0x74>)
 8001b7e:	f004 ff79 	bl	8006a74 <HAL_I2CEx_ConfigAnalogFilter>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b88:	f000 fc8c 	bl	80024a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_I2C2_Init+0x74>)
 8001b90:	f004 ffbb 	bl	8006b0a <HAL_I2CEx_ConfigDigitalFilter>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b9a:	f000 fc83 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000f54 	.word	0x20000f54
 8001ba8:	40005800 	.word	0x40005800
 8001bac:	10909cec 	.word	0x10909cec

08001bb0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <MX_I2C3_Init+0x74>)
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <MX_I2C3_Init+0x78>)
 8001bb8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00702991;
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <MX_I2C3_Init+0x74>)
 8001bbc:	4a1b      	ldr	r2, [pc, #108]	; (8001c2c <MX_I2C3_Init+0x7c>)
 8001bbe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <MX_I2C3_Init+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <MX_I2C3_Init+0x74>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <MX_I2C3_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <MX_I2C3_Init+0x74>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <MX_I2C3_Init+0x74>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <MX_I2C3_Init+0x74>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be4:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <MX_I2C3_Init+0x74>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001bea:	480e      	ldr	r0, [pc, #56]	; (8001c24 <MX_I2C3_Init+0x74>)
 8001bec:	f003 ff1c 	bl	8005a28 <HAL_I2C_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001bf6:	f000 fc55 	bl	80024a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4809      	ldr	r0, [pc, #36]	; (8001c24 <MX_I2C3_Init+0x74>)
 8001bfe:	f004 ff39 	bl	8006a74 <HAL_I2CEx_ConfigAnalogFilter>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001c08:	f000 fc4c 	bl	80024a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_I2C3_Init+0x74>)
 8001c10:	f004 ff7b 	bl	8006b0a <HAL_I2CEx_ConfigDigitalFilter>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001c1a:	f000 fc43 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000fa8 	.word	0x20000fa8
 8001c28:	40005c00 	.word	0x40005c00
 8001c2c:	00702991 	.word	0x00702991

08001c30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b096      	sub	sp, #88	; 0x58
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	611a      	str	r2, [r3, #16]
 8001c52:	615a      	str	r2, [r3, #20]
 8001c54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	222c      	movs	r2, #44	; 0x2c
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f00c f986 	bl	800df6e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c62:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <MX_TIM1_Init+0x120>)
 8001c64:	4a3b      	ldr	r2, [pc, #236]	; (8001d54 <MX_TIM1_Init+0x124>)
 8001c66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c68:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <MX_TIM1_Init+0x120>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6e:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <MX_TIM1_Init+0x120>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c74:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <MX_TIM1_Init+0x120>)
 8001c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7c:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <MX_TIM1_Init+0x120>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c82:	4b33      	ldr	r3, [pc, #204]	; (8001d50 <MX_TIM1_Init+0x120>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c88:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <MX_TIM1_Init+0x120>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c8e:	4830      	ldr	r0, [pc, #192]	; (8001d50 <MX_TIM1_Init+0x120>)
 8001c90:	f006 fbac 	bl	80083ec <HAL_TIM_PWM_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001c9a:	f000 fc03 	bl	80024a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001caa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4827      	ldr	r0, [pc, #156]	; (8001d50 <MX_TIM1_Init+0x120>)
 8001cb2:	f007 fa6b 	bl	800918c <HAL_TIMEx_MasterConfigSynchronization>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001cbc:	f000 fbf2 	bl	80024a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cc0:	2360      	movs	r3, #96	; 0x60
 8001cc2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	481a      	ldr	r0, [pc, #104]	; (8001d50 <MX_TIM1_Init+0x120>)
 8001ce6:	f006 fcdf 	bl	80086a8 <HAL_TIM_PWM_ConfigChannel>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001cf0:	f000 fbd8 	bl	80024a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	4619      	mov	r1, r3
 8001d28:	4809      	ldr	r0, [pc, #36]	; (8001d50 <MX_TIM1_Init+0x120>)
 8001d2a:	f007 fab7 	bl	800929c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001d34:	f000 fbb6 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_TIM1_Init+0x120>)
 8001d3c:	f007 f96c 	bl	8009018 <HAL_TIMEx_PWMN_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d40:	4803      	ldr	r0, [pc, #12]	; (8001d50 <MX_TIM1_Init+0x120>)
 8001d42:	f001 f9a7 	bl	8003094 <HAL_TIM_MspPostInit>

}
 8001d46:	bf00      	nop
 8001d48:	3758      	adds	r7, #88	; 0x58
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000ffc 	.word	0x20000ffc
 8001d54:	40012c00 	.word	0x40012c00

08001d58 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <MX_UART5_Init+0x58>)
 8001d5e:	4a15      	ldr	r2, [pc, #84]	; (8001db4 <MX_UART5_Init+0x5c>)
 8001d60:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <MX_UART5_Init+0x58>)
 8001d64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d68:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_UART5_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <MX_UART5_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_UART5_Init+0x58>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_UART5_Init+0x58>)
 8001d7e:	220c      	movs	r2, #12
 8001d80:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <MX_UART5_Init+0x58>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_UART5_Init+0x58>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <MX_UART5_Init+0x58>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <MX_UART5_Init+0x58>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_UART5_Init+0x58>)
 8001d9c:	f007 fb3f 	bl	800941e <HAL_UART_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001da6:	f000 fb7d 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20001048 	.word	0x20001048
 8001db4:	40005000 	.word	0x40005000

08001db8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dbe:	4a15      	ldr	r2, [pc, #84]	; (8001e14 <MX_USART1_UART_Init+0x5c>)
 8001dc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dde:	220c      	movs	r2, #12
 8001de0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <MX_USART1_UART_Init+0x58>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <MX_USART1_UART_Init+0x58>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <MX_USART1_UART_Init+0x58>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dfa:	4805      	ldr	r0, [pc, #20]	; (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dfc:	f007 fb0f 	bl	800941e <HAL_UART_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e06:	f000 fb4d 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200010d0 	.word	0x200010d0
 8001e14:	40013800 	.word	0x40013800

08001e18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e1e:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <MX_USART2_UART_Init+0x5c>)
 8001e20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e3e:	220c      	movs	r2, #12
 8001e40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e5a:	4805      	ldr	r0, [pc, #20]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e5c:	f007 fadf 	bl	800941e <HAL_UART_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e66:	f000 fb1d 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20001158 	.word	0x20001158
 8001e74:	40004400 	.word	0x40004400

08001e78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <MX_USART3_UART_Init+0x5c>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001ebc:	f007 faaf 	bl	800941e <HAL_UART_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ec6:	f000 faed 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200011e0 	.word	0x200011e0
 8001ed4:	40004800 	.word	0x40004800

08001ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <MX_DMA_Init+0x38>)
 8001ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <MX_DMA_Init+0x38>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6493      	str	r3, [r2, #72]	; 0x48
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <MX_DMA_Init+0x38>)
 8001eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2105      	movs	r1, #5
 8001efa:	2039      	movs	r0, #57	; 0x39
 8001efc:	f003 f91a 	bl	8005134 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001f00:	2039      	movs	r0, #57	; 0x39
 8001f02:	f003 f933 	bl	800516c <HAL_NVIC_EnableIRQ>

}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000

08001f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2a:	4b50      	ldr	r3, [pc, #320]	; (800206c <MX_GPIO_Init+0x158>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	4a4f      	ldr	r2, [pc, #316]	; (800206c <MX_GPIO_Init+0x158>)
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f36:	4b4d      	ldr	r3, [pc, #308]	; (800206c <MX_GPIO_Init+0x158>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f42:	4b4a      	ldr	r3, [pc, #296]	; (800206c <MX_GPIO_Init+0x158>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4a49      	ldr	r2, [pc, #292]	; (800206c <MX_GPIO_Init+0x158>)
 8001f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <MX_GPIO_Init+0x158>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	4b44      	ldr	r3, [pc, #272]	; (800206c <MX_GPIO_Init+0x158>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	4a43      	ldr	r2, [pc, #268]	; (800206c <MX_GPIO_Init+0x158>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f66:	4b41      	ldr	r3, [pc, #260]	; (800206c <MX_GPIO_Init+0x158>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f72:	4b3e      	ldr	r3, [pc, #248]	; (800206c <MX_GPIO_Init+0x158>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	4a3d      	ldr	r2, [pc, #244]	; (800206c <MX_GPIO_Init+0x158>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	; (800206c <MX_GPIO_Init+0x158>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f8a:	4b38      	ldr	r3, [pc, #224]	; (800206c <MX_GPIO_Init+0x158>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	4a37      	ldr	r2, [pc, #220]	; (800206c <MX_GPIO_Init+0x158>)
 8001f90:	f043 0308 	orr.w	r3, r3, #8
 8001f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f96:	4b35      	ldr	r3, [pc, #212]	; (800206c <MX_GPIO_Init+0x158>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAT_FULL_GPIO_Port, BAT_FULL_Pin, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2104      	movs	r1, #4
 8001fa6:	4832      	ldr	r0, [pc, #200]	; (8002070 <MX_GPIO_Init+0x15c>)
 8001fa8:	f003 fd0e 	bl	80059c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_12|BAT_LOW_Pin, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	f249 0120 	movw	r1, #36896	; 0x9020
 8001fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb6:	f003 fd07 	bl	80059c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOST_ENABLE_GPIO_Port, BOOST_ENABLE_Pin, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fc0:	482c      	ldr	r0, [pc, #176]	; (8002074 <MX_GPIO_Init+0x160>)
 8001fc2:	f003 fd01 	bl	80059c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fcc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fd6:	f107 0314 	add.w	r3, r7, #20
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4824      	ldr	r0, [pc, #144]	; (8002070 <MX_GPIO_Init+0x15c>)
 8001fde:	f003 fb49 	bl	8005674 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_FULL_Pin */
  GPIO_InitStruct.Pin = BAT_FULL_Pin;
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BAT_FULL_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	481d      	ldr	r0, [pc, #116]	; (8002070 <MX_GPIO_Init+0x15c>)
 8001ffa:	f003 fb3b 	bl	8005674 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA12 BAT_LOW_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_12|BAT_LOW_Pin;
 8001ffe:	f249 0320 	movw	r3, #36896	; 0x9020
 8002002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002004:	2301      	movs	r3, #1
 8002006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201a:	f003 fb2b 	bl	8005674 <HAL_GPIO_Init>

  /*Configure GPIO pin : GAS_D_Pin */
  GPIO_InitStruct.Pin = GAS_D_Pin;
 800201e:	2304      	movs	r3, #4
 8002020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GAS_D_GPIO_Port, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	4810      	ldr	r0, [pc, #64]	; (8002074 <MX_GPIO_Init+0x160>)
 8002032:	f003 fb1f 	bl	8005674 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOST_ENABLE_Pin */
  GPIO_InitStruct.Pin = BOOST_ENABLE_Pin;
 8002036:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800203a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203c:	2301      	movs	r3, #1
 800203e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BOOST_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	4809      	ldr	r0, [pc, #36]	; (8002074 <MX_GPIO_Init+0x160>)
 8002050:	f003 fb10 	bl	8005674 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2105      	movs	r1, #5
 8002058:	2028      	movs	r0, #40	; 0x28
 800205a:	f003 f86b 	bl	8005134 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800205e:	2028      	movs	r0, #40	; 0x28
 8002060:	f003 f884 	bl	800516c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000
 8002070:	48000800 	.word	0x48000800
 8002074:	48000400 	.word	0x48000400

08002078 <measurements_task>:

/* USER CODE BEGIN 4 */
	void measurements_task(void *pvParameters){
 8002078:	b580      	push	{r7, lr}
 800207a:	ed2d 8b02 	vpush	{d8}
 800207e:	b09c      	sub	sp, #112	; 0x70
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
		while(1)
		{
			shtc3_perform_measurements(&hi2c2, &temp, &hum);
 8002084:	4a88      	ldr	r2, [pc, #544]	; (80022a8 <measurements_task+0x230>)
 8002086:	4989      	ldr	r1, [pc, #548]	; (80022ac <measurements_task+0x234>)
 8002088:	4889      	ldr	r0, [pc, #548]	; (80022b0 <measurements_task+0x238>)
 800208a:	f000 fe83 	bl	8002d94 <shtc3_perform_measurements>

			MPU6050_Read_All(&hi2c3, &imuData);
 800208e:	4989      	ldr	r1, [pc, #548]	; (80022b4 <measurements_task+0x23c>)
 8002090:	4889      	ldr	r0, [pc, #548]	; (80022b8 <measurements_task+0x240>)
 8002092:	f000 fa65 	bl	8002560 <MPU6050_Read_All>

			Usr_GpsL86GetValues(&gpsData);
 8002096:	4889      	ldr	r0, [pc, #548]	; (80022bc <measurements_task+0x244>)
 8002098:	f7ff f96e 	bl	8001378 <Usr_GpsL86GetValues>
			//begin(&hadc1);

			measuredData.lpg = readLPG(&hadc1);
 800209c:	4888      	ldr	r0, [pc, #544]	; (80022c0 <measurements_task+0x248>)
 800209e:	f7fe ffbb 	bl	8001018 <readLPG>
 80020a2:	eef0 7a40 	vmov.f32	s15, s0
 80020a6:	4b87      	ldr	r3, [pc, #540]	; (80022c4 <measurements_task+0x24c>)
 80020a8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			measuredData.smoke = readSmoke(&hadc1);
 80020ac:	4884      	ldr	r0, [pc, #528]	; (80022c0 <measurements_task+0x248>)
 80020ae:	f7fe ffff 	bl	80010b0 <readSmoke>
 80020b2:	eef0 7a40 	vmov.f32	s15, s0
 80020b6:	4b83      	ldr	r3, [pc, #524]	; (80022c4 <measurements_task+0x24c>)
 80020b8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			measuredData.co = readCO(&hadc1);
 80020bc:	4880      	ldr	r0, [pc, #512]	; (80022c0 <measurements_task+0x248>)
 80020be:	f7fe ffd1 	bl	8001064 <readCO>
 80020c2:	eef0 7a40 	vmov.f32	s15, s0
 80020c6:	4b7f      	ldr	r3, [pc, #508]	; (80022c4 <measurements_task+0x24c>)
 80020c8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			measuredData.humidity = hum;
 80020cc:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <measurements_task+0x230>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a7c      	ldr	r2, [pc, #496]	; (80022c4 <measurements_task+0x24c>)
 80020d2:	6053      	str	r3, [r2, #4]
			measuredData.temperature = temp;
 80020d4:	4b75      	ldr	r3, [pc, #468]	; (80022ac <measurements_task+0x234>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a7a      	ldr	r2, [pc, #488]	; (80022c4 <measurements_task+0x24c>)
 80020da:	6013      	str	r3, [r2, #0]
			measuredData.accelX = imuData.Ax;
 80020dc:	4b75      	ldr	r3, [pc, #468]	; (80022b4 <measurements_task+0x23c>)
 80020de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020e2:	4978      	ldr	r1, [pc, #480]	; (80022c4 <measurements_task+0x24c>)
 80020e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			measuredData.accelY = imuData.Ay;
 80020e8:	4b72      	ldr	r3, [pc, #456]	; (80022b4 <measurements_task+0x23c>)
 80020ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020ee:	4975      	ldr	r1, [pc, #468]	; (80022c4 <measurements_task+0x24c>)
 80020f0:	e9c1 2308 	strd	r2, r3, [r1, #32]
			measuredData.accelZ = imuData.Az;
 80020f4:	4b6f      	ldr	r3, [pc, #444]	; (80022b4 <measurements_task+0x23c>)
 80020f6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80020fa:	4972      	ldr	r1, [pc, #456]	; (80022c4 <measurements_task+0x24c>)
 80020fc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			measuredData.latitude = gpsData.lat;
 8002100:	4b6e      	ldr	r3, [pc, #440]	; (80022bc <measurements_task+0x244>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a6f      	ldr	r2, [pc, #444]	; (80022c4 <measurements_task+0x24c>)
 8002106:	6093      	str	r3, [r2, #8]
			measuredData.longitude = gpsData.lon;
 8002108:	4b6c      	ldr	r3, [pc, #432]	; (80022bc <measurements_task+0x244>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a6d      	ldr	r2, [pc, #436]	; (80022c4 <measurements_task+0x24c>)
 800210e:	60d3      	str	r3, [r2, #12]
			measuredData.altitude = gpsData.altitudeInMeter;
 8002110:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <measurements_task+0x244>)
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	4a6b      	ldr	r2, [pc, #428]	; (80022c4 <measurements_task+0x24c>)
 8002116:	6113      	str	r3, [r2, #16]
			measuredData.time = gpsData.fixedTime;
 8002118:	4b68      	ldr	r3, [pc, #416]	; (80022bc <measurements_task+0x244>)
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	4a69      	ldr	r2, [pc, #420]	; (80022c4 <measurements_task+0x24c>)
 800211e:	6153      	str	r3, [r2, #20]
			accx = measuredData.accelZ;
 8002120:	4b68      	ldr	r3, [pc, #416]	; (80022c4 <measurements_task+0x24c>)
 8002122:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	f7fe fd5d 	bl	8000be8 <__aeabi_d2f>
 800212e:	4603      	mov	r3, r0
 8002130:	4a65      	ldr	r2, [pc, #404]	; (80022c8 <measurements_task+0x250>)
 8002132:	6013      	str	r3, [r2, #0]
			/*HAL_ADC_Start(&hadc2);
			HAL_ADC_PollForConversion(&hadc2, 100);
			measuredData.batStatus = (HAL_ADC_GetValue(&hadc2)*batMaxVoltage)/4095;
			HAL_ADC_Stop(&hadc2);*/

			accel = sqrt(square(imuData.Ax) + square(imuData.Ay) + square(imuData.Az));
 8002134:	4b5f      	ldr	r3, [pc, #380]	; (80022b4 <measurements_task+0x23c>)
 8002136:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f7fe fd53 	bl	8000be8 <__aeabi_d2f>
 8002142:	4603      	mov	r3, r0
 8002144:	ee00 3a10 	vmov	s0, r3
 8002148:	f000 f98a 	bl	8002460 <square>
 800214c:	eeb0 8a40 	vmov.f32	s16, s0
 8002150:	4b58      	ldr	r3, [pc, #352]	; (80022b4 <measurements_task+0x23c>)
 8002152:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	f7fe fd45 	bl	8000be8 <__aeabi_d2f>
 800215e:	4603      	mov	r3, r0
 8002160:	ee00 3a10 	vmov	s0, r3
 8002164:	f000 f97c 	bl	8002460 <square>
 8002168:	eef0 7a40 	vmov.f32	s15, s0
 800216c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8002170:	4b50      	ldr	r3, [pc, #320]	; (80022b4 <measurements_task+0x23c>)
 8002172:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	f7fe fd35 	bl	8000be8 <__aeabi_d2f>
 800217e:	4603      	mov	r3, r0
 8002180:	ee00 3a10 	vmov	s0, r3
 8002184:	f000 f96c 	bl	8002460 <square>
 8002188:	eef0 7a40 	vmov.f32	s15, s0
 800218c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002190:	ee17 0a90 	vmov	r0, s15
 8002194:	f7fe f9d8 	bl	8000548 <__aeabi_f2d>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	ec43 2b10 	vmov	d0, r2, r3
 80021a0:	f010 f84c 	bl	801223c <sqrt>
 80021a4:	ec53 2b10 	vmov	r2, r3, d0
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f7fe fd1c 	bl	8000be8 <__aeabi_d2f>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4a46      	ldr	r2, [pc, #280]	; (80022cc <measurements_task+0x254>)
 80021b4:	6013      	str	r3, [r2, #0]
			if (accel >= 2.0){
 80021b6:	4b45      	ldr	r3, [pc, #276]	; (80022cc <measurements_task+0x254>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80021c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c8:	db12      	blt.n	80021f0 <measurements_task+0x178>
				char buffer[100];
				sprintf(buffer, "HIT DETECTED \n");
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	4940      	ldr	r1, [pc, #256]	; (80022d0 <measurements_task+0x258>)
 80021d0:	4618      	mov	r0, r3
 80021d2:	f00b fe3b 	bl	800de4c <siprintf>
				HAL_UART_Transmit(&huart3,(uint8_t*)buffer, strlen(buffer), 50);
 80021d6:	f107 0308 	add.w	r3, r7, #8
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe f848 	bl	8000270 <strlen>
 80021e0:	4603      	mov	r3, r0
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	f107 0108 	add.w	r1, r7, #8
 80021e8:	2332      	movs	r3, #50	; 0x32
 80021ea:	483a      	ldr	r0, [pc, #232]	; (80022d4 <measurements_task+0x25c>)
 80021ec:	f007 f965 	bl	80094ba <HAL_UART_Transmit>
			}

			if (measuredData.batStatus <= voltageThreshold){
 80021f0:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <measurements_task+0x24c>)
 80021f2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80021f6:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <measurements_task+0x260>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002204:	d812      	bhi.n	800222c <measurements_task+0x1b4>
				char buffer[100];
				sprintf(buffer,"10 \n");
 8002206:	f107 0308 	add.w	r3, r7, #8
 800220a:	4934      	ldr	r1, [pc, #208]	; (80022dc <measurements_task+0x264>)
 800220c:	4618      	mov	r0, r3
 800220e:	f00b fe1d 	bl	800de4c <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer), 50);
 8002212:	f107 0308 	add.w	r3, r7, #8
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f82a 	bl	8000270 <strlen>
 800221c:	4603      	mov	r3, r0
 800221e:	b29a      	uxth	r2, r3
 8002220:	f107 0108 	add.w	r1, r7, #8
 8002224:	2332      	movs	r3, #50	; 0x32
 8002226:	482e      	ldr	r0, [pc, #184]	; (80022e0 <measurements_task+0x268>)
 8002228:	f007 f947 	bl	80094ba <HAL_UART_Transmit>
			}

			if (measuredData.batStatus >= batMaxVoltage){
 800222c:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <measurements_task+0x24c>)
 800222e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002232:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <measurements_task+0x26c>)
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800223c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002240:	db12      	blt.n	8002268 <measurements_task+0x1f0>
				char buffer[100];
				sprintf(buffer,"20 \n");
 8002242:	f107 0308 	add.w	r3, r7, #8
 8002246:	4928      	ldr	r1, [pc, #160]	; (80022e8 <measurements_task+0x270>)
 8002248:	4618      	mov	r0, r3
 800224a:	f00b fdff 	bl	800de4c <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer), 50);
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe f80c 	bl	8000270 <strlen>
 8002258:	4603      	mov	r3, r0
 800225a:	b29a      	uxth	r2, r3
 800225c:	f107 0108 	add.w	r1, r7, #8
 8002260:	2332      	movs	r3, #50	; 0x32
 8002262:	481f      	ldr	r0, [pc, #124]	; (80022e0 <measurements_task+0x268>)
 8002264:	f007 f929 	bl	80094ba <HAL_UART_Transmit>
			}

			unsigned long currentTime =  xTaskGetTickCount();
 8002268:	f009 fd16 	bl	800bc98 <xTaskGetTickCount>
 800226c:	66f8      	str	r0, [r7, #108]	; 0x6c

			if( currentTime - lastSendTime >= sendInterval){
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <measurements_task+0x274>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002274:	1ad2      	subs	r2, r2, r3
 8002276:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <measurements_task+0x278>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d30a      	bcc.n	8002294 <measurements_task+0x21c>
			xQueueSend(Queue_Handler,&measuredData,portMAX_DELAY);
 800227e:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <measurements_task+0x27c>)
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	2300      	movs	r3, #0
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	490e      	ldr	r1, [pc, #56]	; (80022c4 <measurements_task+0x24c>)
 800228a:	f008 fd6b 	bl	800ad64 <xQueueGenericSend>
			lastSendTime = currentTime;
 800228e:	4a17      	ldr	r2, [pc, #92]	; (80022ec <measurements_task+0x274>)
 8002290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002292:	6013      	str	r3, [r2, #0]
			}
			watermark = uxTaskGetStackHighWaterMark(NULL);
 8002294:	2000      	movs	r0, #0
 8002296:	f009 ffd5 	bl	800c244 <uxTaskGetStackHighWaterMark>
 800229a:	4603      	mov	r3, r0
 800229c:	4a16      	ldr	r2, [pc, #88]	; (80022f8 <measurements_task+0x280>)
 800229e:	6013      	str	r3, [r2, #0]
			vTaskDelay(pdMS_TO_TICKS(0.5));
 80022a0:	2000      	movs	r0, #0
 80022a2:	f009 fbb1 	bl	800ba08 <vTaskDelay>
		{
 80022a6:	e6ed      	b.n	8002084 <measurements_task+0xc>
 80022a8:	200012b4 	.word	0x200012b4
 80022ac:	200012b0 	.word	0x200012b0
 80022b0:	20000f54 	.word	0x20000f54
 80022b4:	20001348 	.word	0x20001348
 80022b8:	20000fa8 	.word	0x20000fa8
 80022bc:	200013a0 	.word	0x200013a0
 80022c0:	20000e8c 	.word	0x20000e8c
 80022c4:	200012f8 	.word	0x200012f8
 80022c8:	200013d0 	.word	0x200013d0
 80022cc:	200013d8 	.word	0x200013d8
 80022d0:	08013904 	.word	0x08013904
 80022d4:	200011e0 	.word	0x200011e0
 80022d8:	2000002c 	.word	0x2000002c
 80022dc:	08013914 	.word	0x08013914
 80022e0:	200010d0 	.word	0x200010d0
 80022e4:	20000028 	.word	0x20000028
 80022e8:	0801391c 	.word	0x0801391c
 80022ec:	200013d4 	.word	0x200013d4
 80022f0:	20000030 	.word	0x20000030
 80022f4:	200013e8 	.word	0x200013e8
 80022f8:	20001340 	.word	0x20001340

080022fc <sender_task>:
		}
	}

	void sender_task(void *pvParameters){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b09c      	sub	sp, #112	; 0x70
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

		while(1){
			if(xQueueReceive(Queue_Handler, &sendData, portMAX_DELAY) == pdPASS){
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <sender_task+0x54>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	4911      	ldr	r1, [pc, #68]	; (8002354 <sender_task+0x58>)
 800230e:	4618      	mov	r0, r3
 8002310:	f008 feb4 	bl	800b07c <xQueueReceive>
 8002314:	4603      	mov	r3, r0
 8002316:	2b01      	cmp	r3, #1
 8002318:	d115      	bne.n	8002346 <sender_task+0x4a>
				char buffer[100];
				sprintf(buffer,"%d %d \n", sendData.humidity, sendData.temperature);
 800231a:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <sender_task+0x58>)
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <sender_task+0x58>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f107 000c 	add.w	r0, r7, #12
 8002326:	490c      	ldr	r1, [pc, #48]	; (8002358 <sender_task+0x5c>)
 8002328:	f00b fd90 	bl	800de4c <siprintf>
				//xSemaphoreTake(AlarmMutex_Handler,portMAX_DELAY);
				HAL_UART_Transmit(&huart3,(uint8_t*)buffer, strlen(buffer), 50);
 800232c:	f107 030c 	add.w	r3, r7, #12
 8002330:	4618      	mov	r0, r3
 8002332:	f7fd ff9d 	bl	8000270 <strlen>
 8002336:	4603      	mov	r3, r0
 8002338:	b29a      	uxth	r2, r3
 800233a:	f107 010c 	add.w	r1, r7, #12
 800233e:	2332      	movs	r3, #50	; 0x32
 8002340:	4806      	ldr	r0, [pc, #24]	; (800235c <sender_task+0x60>)
 8002342:	f007 f8ba 	bl	80094ba <HAL_UART_Transmit>
				//xSemaphoreGive(AlarmMutex_Handler);
			}
			vTaskDelay(pdMS_TO_TICKS(0.5));
 8002346:	2000      	movs	r0, #0
 8002348:	f009 fb5e 	bl	800ba08 <vTaskDelay>
			if(xQueueReceive(Queue_Handler, &sendData, portMAX_DELAY) == pdPASS){
 800234c:	e7da      	b.n	8002304 <sender_task+0x8>
 800234e:	bf00      	nop
 8002350:	200013e8 	.word	0x200013e8
 8002354:	200012b8 	.word	0x200012b8
 8002358:	08013924 	.word	0x08013924
 800235c:	200011e0 	.word	0x200011e0

08002360 <LED_task>:
		}
	}


	void LED_task(void *pvParameters){
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

		while(1){
			if(xSemaphoreTake(PWM_Sem_Handler,portMAX_DELAY) == pdTRUE){
 8002368:	4b24      	ldr	r3, [pc, #144]	; (80023fc <LED_task+0x9c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	4618      	mov	r0, r3
 8002372:	f008 ff63 	bl	800b23c <xQueueSemaphoreTake>
 8002376:	4603      	mov	r3, r0
 8002378:	2b01      	cmp	r3, #1
 800237a:	d1f5      	bne.n	8002368 <LED_task+0x8>

			    	if(duty_cycle < 0.5){
 800237c:	4b20      	ldr	r3, [pc, #128]	; (8002400 <LED_task+0xa0>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238e:	d51a      	bpl.n	80023c6 <LED_task+0x66>
			    		duty_cycle = 0.5;
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <LED_task+0xa0>)
 8002392:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002396:	601a      	str	r2, [r3, #0]
			    		cmp_reg = duty_cycle * htim1.Init.Period;
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <LED_task+0xa4>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023a4:	4b16      	ldr	r3, [pc, #88]	; (8002400 <LED_task+0xa0>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023b2:	ee17 2a90 	vmov	r2, s15
 80023b6:	4b14      	ldr	r3, [pc, #80]	; (8002408 <LED_task+0xa8>)
 80023b8:	601a      	str	r2, [r3, #0]
			    		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,cmp_reg);
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <LED_task+0xa4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a12      	ldr	r2, [pc, #72]	; (8002408 <LED_task+0xa8>)
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	635a      	str	r2, [r3, #52]	; 0x34
 80023c4:	e7d0      	b.n	8002368 <LED_task+0x8>
			    	}else{
			    		duty_cycle = 0;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <LED_task+0xa0>)
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
			    		cmp_reg = duty_cycle * htim1.Init.Period;
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <LED_task+0xa4>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <LED_task+0xa0>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e8:	ee17 2a90 	vmov	r2, s15
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <LED_task+0xa8>)
 80023ee:	601a      	str	r2, [r3, #0]
			    		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,cmp_reg);
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <LED_task+0xa4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <LED_task+0xa8>)
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	635a      	str	r2, [r3, #52]	; 0x34
			if(xSemaphoreTake(PWM_Sem_Handler,portMAX_DELAY) == pdTRUE){
 80023fa:	e7b5      	b.n	8002368 <LED_task+0x8>
 80023fc:	200013ec 	.word	0x200013ec
 8002400:	20001338 	.word	0x20001338
 8002404:	20000ffc 	.word	0x20000ffc
 8002408:	2000133c 	.word	0x2000133c

0800240c <HAL_GPIO_EXTI_Callback>:
			    	}
		}
	}
	}

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == B1_Pin){
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241c:	d117      	bne.n	800244e <HAL_GPIO_EXTI_Callback+0x42>
		  BaseType_t task_woken = pdFALSE;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
		  xSemaphoreGiveFromISR(PWM_Sem_Handler,&task_woken);
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f107 020c 	add.w	r2, r7, #12
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f008 fd97 	bl	800af60 <xQueueGiveFromISR>

		  if(task_woken){
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_GPIO_EXTI_Callback+0x42>
			  portYIELD_FROM_ISR(task_woken);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <HAL_GPIO_EXTI_Callback+0x42>
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <HAL_GPIO_EXTI_Callback+0x50>)
 8002440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	f3bf 8f6f 	isb	sy

		  }
		}
	  }
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200013ec 	.word	0x200013ec
 800245c:	e000ed04 	.word	0xe000ed04

08002460 <square>:

	/* ------- HELPING FUNCTIONS ------- */
	float square(float number){
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	ed87 0a01 	vstr	s0, [r7, #4]
		return number*number;
 800246a:	edd7 7a01 	vldr	s15, [r7, #4]
 800246e:	ee67 7aa7 	vmul.f32	s15, s15, s15
	}
 8002472:	eeb0 0a67 	vmov.f32	s0, s15
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002492:	f001 f993 	bl	80037bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40001000 	.word	0x40001000

080024a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a8:	b672      	cpsid	i
}
 80024aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024ac:	e7fe      	b.n	80024ac <Error_Handler+0x8>

080024ae <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b088      	sub	sp, #32
 80024b2:	af04      	add	r7, sp, #16
 80024b4:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80024b6:	2364      	movs	r3, #100	; 0x64
 80024b8:	9302      	str	r3, [sp, #8]
 80024ba:	2301      	movs	r3, #1
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	f107 030f 	add.w	r3, r7, #15
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	2301      	movs	r3, #1
 80024c6:	2275      	movs	r2, #117	; 0x75
 80024c8:	21d0      	movs	r1, #208	; 0xd0
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f003 fe6a 	bl	80061a4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b68      	cmp	r3, #104	; 0x68
 80024d4:	d13d      	bne.n	8002552 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80024da:	2364      	movs	r3, #100	; 0x64
 80024dc:	9302      	str	r3, [sp, #8]
 80024de:	2301      	movs	r3, #1
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	f107 030e 	add.w	r3, r7, #14
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	2301      	movs	r3, #1
 80024ea:	226b      	movs	r2, #107	; 0x6b
 80024ec:	21d0      	movs	r1, #208	; 0xd0
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f003 fd44 	bl	8005f7c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80024f4:	2307      	movs	r3, #7
 80024f6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80024f8:	2364      	movs	r3, #100	; 0x64
 80024fa:	9302      	str	r3, [sp, #8]
 80024fc:	2301      	movs	r3, #1
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	f107 030e 	add.w	r3, r7, #14
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	2301      	movs	r3, #1
 8002508:	2219      	movs	r2, #25
 800250a:	21d0      	movs	r1, #208	; 0xd0
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f003 fd35 	bl	8005f7c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002512:	2300      	movs	r3, #0
 8002514:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002516:	2364      	movs	r3, #100	; 0x64
 8002518:	9302      	str	r3, [sp, #8]
 800251a:	2301      	movs	r3, #1
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	f107 030e 	add.w	r3, r7, #14
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2301      	movs	r3, #1
 8002526:	221c      	movs	r2, #28
 8002528:	21d0      	movs	r1, #208	; 0xd0
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f003 fd26 	bl	8005f7c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002530:	2300      	movs	r3, #0
 8002532:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002534:	2364      	movs	r3, #100	; 0x64
 8002536:	9302      	str	r3, [sp, #8]
 8002538:	2301      	movs	r3, #1
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	f107 030e 	add.w	r3, r7, #14
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	2301      	movs	r3, #1
 8002544:	221b      	movs	r2, #27
 8002546:	21d0      	movs	r1, #208	; 0xd0
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f003 fd17 	bl	8005f7c <HAL_I2C_Mem_Write>
        return 0;
 800254e:	2300      	movs	r3, #0
 8002550:	e000      	b.n	8002554 <MPU6050_Init+0xa6>
    }
    return 1;
 8002552:	2301      	movs	r3, #1
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	0000      	movs	r0, r0
	...

08002560 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002564:	b094      	sub	sp, #80	; 0x50
 8002566:	af04      	add	r7, sp, #16
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800256c:	2364      	movs	r3, #100	; 0x64
 800256e:	9302      	str	r3, [sp, #8]
 8002570:	230e      	movs	r3, #14
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	f107 0308 	add.w	r3, r7, #8
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2301      	movs	r3, #1
 800257c:	223b      	movs	r2, #59	; 0x3b
 800257e:	21d0      	movs	r1, #208	; 0xd0
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f003 fe0f 	bl	80061a4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002586:	7a3b      	ldrb	r3, [r7, #8]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	b21a      	sxth	r2, r3
 800258c:	7a7b      	ldrb	r3, [r7, #9]
 800258e:	b21b      	sxth	r3, r3
 8002590:	4313      	orrs	r3, r2
 8002592:	b21a      	sxth	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002598:	7abb      	ldrb	r3, [r7, #10]
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	b21a      	sxth	r2, r3
 800259e:	7afb      	ldrb	r3, [r7, #11]
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	4313      	orrs	r3, r2
 80025a4:	b21a      	sxth	r2, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80025aa:	7b3b      	ldrb	r3, [r7, #12]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	b21a      	sxth	r2, r3
 80025b0:	7b7b      	ldrb	r3, [r7, #13]
 80025b2:	b21b      	sxth	r3, r3
 80025b4:	4313      	orrs	r3, r2
 80025b6:	b21a      	sxth	r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80025bc:	7bbb      	ldrb	r3, [r7, #14]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	b21a      	sxth	r2, r3
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	b21b      	sxth	r3, r3
 80025c6:	4313      	orrs	r3, r2
 80025c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80025ca:	7c3b      	ldrb	r3, [r7, #16]
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	b21a      	sxth	r2, r3
 80025d0:	7c7b      	ldrb	r3, [r7, #17]
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b21a      	sxth	r2, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80025dc:	7cbb      	ldrb	r3, [r7, #18]
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	7cfb      	ldrb	r3, [r7, #19]
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	4313      	orrs	r3, r2
 80025e8:	b21a      	sxth	r2, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80025ee:	7d3b      	ldrb	r3, [r7, #20]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	b21a      	sxth	r2, r3
 80025f4:	7d7b      	ldrb	r3, [r7, #21]
 80025f6:	b21b      	sxth	r3, r3
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b21a      	sxth	r2, r3
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd ff8c 	bl	8000524 <__aeabi_i2d>
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	4bbd      	ldr	r3, [pc, #756]	; (8002908 <MPU6050_Read_All+0x3a8>)
 8002612:	f7fe f91b 	bl	800084c <__aeabi_ddiv>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	6839      	ldr	r1, [r7, #0]
 800261c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ff7c 	bl	8000524 <__aeabi_i2d>
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	4bb5      	ldr	r3, [pc, #724]	; (8002908 <MPU6050_Read_All+0x3a8>)
 8002632:	f7fe f90b 	bl	800084c <__aeabi_ddiv>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	6839      	ldr	r1, [r7, #0]
 800263c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd ff6c 	bl	8000524 <__aeabi_i2d>
 800264c:	a3a8      	add	r3, pc, #672	; (adr r3, 80028f0 <MPU6050_Read_All+0x390>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	f7fe f8fb 	bl	800084c <__aeabi_ddiv>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	6839      	ldr	r1, [r7, #0]
 800265c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002660:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002664:	ee07 3a90 	vmov	s15, r3
 8002668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800266c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 800290c <MPU6050_Read_All+0x3ac>
 8002670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002674:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002910 <MPU6050_Read_All+0x3b0>
 8002678:	ee77 7a87 	vadd.f32	s15, s15, s14
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd ff4b 	bl	8000524 <__aeabi_i2d>
 800268e:	a39a      	add	r3, pc, #616	; (adr r3, 80028f8 <MPU6050_Read_All+0x398>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fe f8da 	bl	800084c <__aeabi_ddiv>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	6839      	ldr	r1, [r7, #0]
 800269e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd ff3b 	bl	8000524 <__aeabi_i2d>
 80026ae:	a392      	add	r3, pc, #584	; (adr r3, 80028f8 <MPU6050_Read_All+0x398>)
 80026b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b4:	f7fe f8ca 	bl	800084c <__aeabi_ddiv>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	6839      	ldr	r1, [r7, #0]
 80026be:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fd ff2b 	bl	8000524 <__aeabi_i2d>
 80026ce:	a38a      	add	r3, pc, #552	; (adr r3, 80028f8 <MPU6050_Read_All+0x398>)
 80026d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d4:	f7fe f8ba 	bl	800084c <__aeabi_ddiv>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	6839      	ldr	r1, [r7, #0]
 80026de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80026e2:	f001 f87f 	bl	80037e4 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b8a      	ldr	r3, [pc, #552]	; (8002914 <MPU6050_Read_All+0x3b4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fd ff08 	bl	8000504 <__aeabi_ui2d>
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	4b87      	ldr	r3, [pc, #540]	; (8002918 <MPU6050_Read_All+0x3b8>)
 80026fa:	f7fe f8a7 	bl	800084c <__aeabi_ddiv>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002706:	f001 f86d 	bl	80037e4 <HAL_GetTick>
 800270a:	4603      	mov	r3, r0
 800270c:	4a81      	ldr	r2, [pc, #516]	; (8002914 <MPU6050_Read_All+0x3b4>)
 800270e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002716:	461a      	mov	r2, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800271e:	fb03 f202 	mul.w	r2, r3, r2
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002728:	4619      	mov	r1, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd fef4 	bl	8000524 <__aeabi_i2d>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	ec43 2b10 	vmov	d0, r2, r3
 8002744:	f00f fd7a 	bl	801223c <sqrt>
 8002748:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002758:	f7fe f9b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d11f      	bne.n	80027a2 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd fedb 	bl	8000524 <__aeabi_i2d>
 800276e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002772:	f7fe f86b 	bl	800084c <__aeabi_ddiv>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	ec43 2b17 	vmov	d7, r2, r3
 800277e:	eeb0 0a47 	vmov.f32	s0, s14
 8002782:	eef0 0a67 	vmov.f32	s1, s15
 8002786:	f00f fd87 	bl	8012298 <atan>
 800278a:	ec51 0b10 	vmov	r0, r1, d0
 800278e:	a35c      	add	r3, pc, #368	; (adr r3, 8002900 <MPU6050_Read_All+0x3a0>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f7fd ff30 	bl	80005f8 <__aeabi_dmul>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80027a0:	e005      	b.n	80027ae <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b4:	425b      	negs	r3, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd feb4 	bl	8000524 <__aeabi_i2d>
 80027bc:	4682      	mov	sl, r0
 80027be:	468b      	mov	fp, r1
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd feac 	bl	8000524 <__aeabi_i2d>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	ec43 2b11 	vmov	d1, r2, r3
 80027d4:	ec4b ab10 	vmov	d0, sl, fp
 80027d8:	f00f fc7e 	bl	80120d8 <atan2>
 80027dc:	ec51 0b10 	vmov	r0, r1, d0
 80027e0:	a347      	add	r3, pc, #284	; (adr r3, 8002900 <MPU6050_Read_All+0x3a0>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f7fd ff07 	bl	80005f8 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	4b49      	ldr	r3, [pc, #292]	; (800291c <MPU6050_Read_All+0x3bc>)
 80027f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027fc:	f7fe f96e 	bl	8000adc <__aeabi_dcmplt>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <MPU6050_Read_All+0x2bc>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	4b43      	ldr	r3, [pc, #268]	; (8002920 <MPU6050_Read_All+0x3c0>)
 8002812:	f7fe f981 	bl	8000b18 <__aeabi_dcmpgt>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d114      	bne.n	8002846 <MPU6050_Read_All+0x2e6>
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <MPU6050_Read_All+0x3c0>)
 8002822:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002826:	f7fe f977 	bl	8000b18 <__aeabi_dcmpgt>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d015      	beq.n	800285c <MPU6050_Read_All+0x2fc>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	4b38      	ldr	r3, [pc, #224]	; (800291c <MPU6050_Read_All+0x3bc>)
 800283c:	f7fe f94e 	bl	8000adc <__aeabi_dcmplt>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8002846:	4937      	ldr	r1, [pc, #220]	; (8002924 <MPU6050_Read_All+0x3c4>)
 8002848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800284c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002850:	6839      	ldr	r1, [r7, #0]
 8002852:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002856:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800285a:	e014      	b.n	8002886 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002862:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002866:	eeb0 1a47 	vmov.f32	s2, s14
 800286a:	eef0 1a67 	vmov.f32	s3, s15
 800286e:	ed97 0b06 	vldr	d0, [r7, #24]
 8002872:	482c      	ldr	r0, [pc, #176]	; (8002924 <MPU6050_Read_All+0x3c4>)
 8002874:	f000 f85a 	bl	800292c <Kalman_getAngle>
 8002878:	eeb0 7a40 	vmov.f32	s14, s0
 800287c:	eef0 7a60 	vmov.f32	s15, s1
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800288c:	4690      	mov	r8, r2
 800288e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	4b22      	ldr	r3, [pc, #136]	; (8002920 <MPU6050_Read_All+0x3c0>)
 8002898:	4640      	mov	r0, r8
 800289a:	4649      	mov	r1, r9
 800289c:	f7fe f93c 	bl	8000b18 <__aeabi_dcmpgt>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80028ac:	4614      	mov	r4, r2
 80028ae:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80028be:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80028c2:	eeb0 1a47 	vmov.f32	s2, s14
 80028c6:	eef0 1a67 	vmov.f32	s3, s15
 80028ca:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80028ce:	4816      	ldr	r0, [pc, #88]	; (8002928 <MPU6050_Read_All+0x3c8>)
 80028d0:	f000 f82c 	bl	800292c <Kalman_getAngle>
 80028d4:	eeb0 7a40 	vmov.f32	s14, s0
 80028d8:	eef0 7a60 	vmov.f32	s15, s1
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 80028e2:	bf00      	nop
 80028e4:	3740      	adds	r7, #64	; 0x40
 80028e6:	46bd      	mov	sp, r7
 80028e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ec:	f3af 8000 	nop.w
 80028f0:	00000000 	.word	0x00000000
 80028f4:	40cc2900 	.word	0x40cc2900
 80028f8:	00000000 	.word	0x00000000
 80028fc:	40606000 	.word	0x40606000
 8002900:	1a63c1f8 	.word	0x1a63c1f8
 8002904:	404ca5dc 	.word	0x404ca5dc
 8002908:	40d00000 	.word	0x40d00000
 800290c:	43aa0000 	.word	0x43aa0000
 8002910:	42121eb8 	.word	0x42121eb8
 8002914:	200013f0 	.word	0x200013f0
 8002918:	408f4000 	.word	0x408f4000
 800291c:	c0568000 	.word	0xc0568000
 8002920:	40568000 	.word	0x40568000
 8002924:	20000080 	.word	0x20000080
 8002928:	20000038 	.word	0x20000038

0800292c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800292c:	b5b0      	push	{r4, r5, r7, lr}
 800292e:	b096      	sub	sp, #88	; 0x58
 8002930:	af00      	add	r7, sp, #0
 8002932:	61f8      	str	r0, [r7, #28]
 8002934:	ed87 0b04 	vstr	d0, [r7, #16]
 8002938:	ed87 1b02 	vstr	d1, [r7, #8]
 800293c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002946:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800294a:	f7fd fc9d 	bl	8000288 <__aeabi_dsub>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800295c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002960:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002964:	f7fd fe48 	bl	80005f8 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4620      	mov	r0, r4
 800296e:	4629      	mov	r1, r5
 8002970:	f7fd fc8c 	bl	800028c <__adddf3>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	69f9      	ldr	r1, [r7, #28]
 800297a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800298a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800298e:	f7fd fe33 	bl	80005f8 <__aeabi_dmul>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80029a0:	f7fd fc72 	bl	8000288 <__aeabi_dsub>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80029b2:	f7fd fc69 	bl	8000288 <__aeabi_dsub>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f7fd fc62 	bl	800028c <__adddf3>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4610      	mov	r0, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029d4:	f7fd fe10 	bl	80005f8 <__aeabi_dmul>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4620      	mov	r0, r4
 80029de:	4629      	mov	r1, r5
 80029e0:	f7fd fc54 	bl	800028c <__adddf3>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	69f9      	ldr	r1, [r7, #28]
 80029ea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80029fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029fe:	f7fd fdfb 	bl	80005f8 <__aeabi_dmul>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4620      	mov	r0, r4
 8002a08:	4629      	mov	r1, r5
 8002a0a:	f7fd fc3d 	bl	8000288 <__aeabi_dsub>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	69f9      	ldr	r1, [r7, #28]
 8002a14:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a28:	f7fd fde6 	bl	80005f8 <__aeabi_dmul>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4620      	mov	r0, r4
 8002a32:	4629      	mov	r1, r5
 8002a34:	f7fd fc28 	bl	8000288 <__aeabi_dsub>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	69f9      	ldr	r1, [r7, #28]
 8002a3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a52:	f7fd fdd1 	bl	80005f8 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	f7fd fc15 	bl	800028c <__adddf3>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	69f9      	ldr	r1, [r7, #28]
 8002a68:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a78:	f7fd fc08 	bl	800028c <__adddf3>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002a8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a8e:	f7fd fedd 	bl	800084c <__aeabi_ddiv>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002aa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002aa4:	f7fd fed2 	bl	800084c <__aeabi_ddiv>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ab6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002aba:	f7fd fbe5 	bl	8000288 <__aeabi_dsub>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002acc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ad0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ad4:	f7fd fd90 	bl	80005f8 <__aeabi_dmul>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4620      	mov	r0, r4
 8002ade:	4629      	mov	r1, r5
 8002ae0:	f7fd fbd4 	bl	800028c <__adddf3>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	69f9      	ldr	r1, [r7, #28]
 8002aea:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002af4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002af8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002afc:	f7fd fd7c 	bl	80005f8 <__aeabi_dmul>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4620      	mov	r0, r4
 8002b06:	4629      	mov	r1, r5
 8002b08:	f7fd fbc0 	bl	800028c <__adddf3>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	69f9      	ldr	r1, [r7, #28]
 8002b12:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002b1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002b26:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002b30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b38:	f7fd fd5e 	bl	80005f8 <__aeabi_dmul>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4620      	mov	r0, r4
 8002b42:	4629      	mov	r1, r5
 8002b44:	f7fd fba0 	bl	8000288 <__aeabi_dsub>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	69f9      	ldr	r1, [r7, #28]
 8002b4e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002b58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b60:	f7fd fd4a 	bl	80005f8 <__aeabi_dmul>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4620      	mov	r0, r4
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	f7fd fb8c 	bl	8000288 <__aeabi_dsub>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	69f9      	ldr	r1, [r7, #28]
 8002b76:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002b80:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b88:	f7fd fd36 	bl	80005f8 <__aeabi_dmul>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4620      	mov	r0, r4
 8002b92:	4629      	mov	r1, r5
 8002b94:	f7fd fb78 	bl	8000288 <__aeabi_dsub>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	69f9      	ldr	r1, [r7, #28]
 8002b9e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002ba8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002bb0:	f7fd fd22 	bl	80005f8 <__aeabi_dmul>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4620      	mov	r0, r4
 8002bba:	4629      	mov	r1, r5
 8002bbc:	f7fd fb64 	bl	8000288 <__aeabi_dsub>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	69f9      	ldr	r1, [r7, #28]
 8002bc6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002bd0:	ec43 2b17 	vmov	d7, r2, r3
};
 8002bd4:	eeb0 0a47 	vmov.f32	s0, s14
 8002bd8:	eef0 0a67 	vmov.f32	s1, s15
 8002bdc:	3758      	adds	r7, #88	; 0x58
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bdb0      	pop	{r4, r5, r7, pc}

08002be2 <checkCRC>:
  return res == HAL_OK;
}


static uint32_t checkCRC(uint16_t value, uint8_t expected)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	460a      	mov	r2, r1
 8002bec:	80fb      	strh	r3, [r7, #6]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	717b      	strb	r3, [r7, #5]
	uint8_t data[2] = {value >> 8, value & 0xFF};
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	723b      	strb	r3, [r7, #8]
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	727b      	strb	r3, [r7, #9]
	uint8_t crc = 0xFF;
 8002c02:	23ff      	movs	r3, #255	; 0xff
 8002c04:	73fb      	strb	r3, [r7, #15]
	uint8_t poly = 0x31;
 8002c06:	2331      	movs	r3, #49	; 0x31
 8002c08:	733b      	strb	r3, [r7, #12]

	for (uint8_t indi = 0; indi < 2; indi++) {
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73bb      	strb	r3, [r7, #14]
 8002c0e:	e023      	b.n	8002c58 <checkCRC+0x76>
		crc ^= data[indi];
 8002c10:	7bbb      	ldrb	r3, [r7, #14]
 8002c12:	3310      	adds	r3, #16
 8002c14:	443b      	add	r3, r7
 8002c16:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	4053      	eors	r3, r2
 8002c1e:	73fb      	strb	r3, [r7, #15]
		for (uint8_t indj = 0; indj < 8; indj++) {
 8002c20:	2300      	movs	r3, #0
 8002c22:	737b      	strb	r3, [r7, #13]
 8002c24:	e012      	b.n	8002c4c <checkCRC+0x6a>
			if (crc & 0x80) {
 8002c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	da08      	bge.n	8002c40 <checkCRC+0x5e>
				crc = (uint8_t)((crc << 1) ^ poly);
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	b25a      	sxtb	r2, r3
 8002c34:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002c38:	4053      	eors	r3, r2
 8002c3a:	b25b      	sxtb	r3, r3
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	e002      	b.n	8002c46 <checkCRC+0x64>
			} else {
				crc <<= 1;
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
		for (uint8_t indj = 0; indj < 8; indj++) {
 8002c46:	7b7b      	ldrb	r3, [r7, #13]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	737b      	strb	r3, [r7, #13]
 8002c4c:	7b7b      	ldrb	r3, [r7, #13]
 8002c4e:	2b07      	cmp	r3, #7
 8002c50:	d9e9      	bls.n	8002c26 <checkCRC+0x44>
	for (uint8_t indi = 0; indi < 2; indi++) {
 8002c52:	7bbb      	ldrb	r3, [r7, #14]
 8002c54:	3301      	adds	r3, #1
 8002c56:	73bb      	strb	r3, [r7, #14]
 8002c58:	7bbb      	ldrb	r3, [r7, #14]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d9d8      	bls.n	8002c10 <checkCRC+0x2e>
			}
		}
	}

	if (expected ^ crc)	{
 8002c5e:	797a      	ldrb	r2, [r7, #5]
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d001      	beq.n	8002c6a <checkCRC+0x88>
    return 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e000      	b.n	8002c6c <checkCRC+0x8a>
	}
  return 1;
 8002c6a:	2301      	movs	r3, #1
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <_read_values>:

static uint32_t _read_values(uint8_t* data, int32_t* out_temp, int32_t* out_hum)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  // Check CRC
  uint32_t raw_hum = data[0] << 8 | data[1];
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	3201      	adds	r2, #1
 8002c8e:	7812      	ldrb	r2, [r2, #0]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]
  uint32_t raw_temp = data[3] << 8 | data[4];
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3303      	adds	r3, #3
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	3204      	adds	r2, #4
 8002ca0:	7812      	ldrb	r2, [r2, #0]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]

  if (!checkCRC(raw_hum, data[2])) {
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3302      	adds	r3, #2
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	f7ff ff95 	bl	8002be2 <checkCRC>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <_read_values+0x4a>
    return 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e02e      	b.n	8002d20 <_read_values+0xa8>
  }
  if (!checkCRC(raw_temp, data[5])) {
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3305      	adds	r3, #5
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	f7ff ff87 	bl	8002be2 <checkCRC>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <_read_values+0x66>
    return 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e020      	b.n	8002d20 <_read_values+0xa8>
  }

  // Convert values
  if (out_hum) {
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <_read_values+0x82>
    *out_hum = raw_hum * 100 / 65535;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2264      	movs	r2, #100	; 0x64
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <_read_values+0xb0>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0bdb      	lsrs	r3, r3, #15
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	601a      	str	r2, [r3, #0]
  }
  if (out_temp) {
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00e      	beq.n	8002d1e <_read_values+0xa6>
    *out_temp = raw_temp * 17500 / 65535 - 4500;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f244 425c 	movw	r2, #17500	; 0x445c
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	4a07      	ldr	r2, [pc, #28]	; (8002d28 <_read_values+0xb0>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	0bdb      	lsrs	r3, r3, #15
 8002d12:	f5a3 538c 	sub.w	r3, r3, #4480	; 0x1180
 8002d16:	3b14      	subs	r3, #20
 8002d18:	461a      	mov	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  return 1;
 8002d1e:	2301      	movs	r3, #1
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	80008001 	.word	0x80008001

08002d2c <_perform_measurements>:

static uint32_t _perform_measurements(I2C_HandleTypeDef *hi2c, uint16_t command, int32_t* out_temp, int32_t* out_hum)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	817b      	strh	r3, [r7, #10]
  uint8_t result[6];

  uint32_t res = HAL_I2C_Master_Transmit(hi2c, SHTC3_ADDRESS_WRITE, (uint8_t*)&command, 2, 100);
 8002d3c:	f107 020a 	add.w	r2, r7, #10
 8002d40:	2364      	movs	r3, #100	; 0x64
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2302      	movs	r3, #2
 8002d46:	21e0      	movs	r1, #224	; 0xe0
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f002 ff09 	bl	8005b60 <HAL_I2C_Master_Transmit>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	61fb      	str	r3, [r7, #28]
  if (res != HAL_OK) {
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <_perform_measurements+0x30>
    return 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e017      	b.n	8002d8c <_perform_measurements+0x60>
  }

  res = HAL_I2C_Master_Receive(hi2c, SHTC3_ADDRESS_READ, result, 6, 100);
 8002d5c:	f107 0214 	add.w	r2, r7, #20
 8002d60:	2364      	movs	r3, #100	; 0x64
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	2306      	movs	r3, #6
 8002d66:	21e1      	movs	r1, #225	; 0xe1
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f003 f811 	bl	8005d90 <HAL_I2C_Master_Receive>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	61fb      	str	r3, [r7, #28]
  if (res != HAL_OK) {
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <_perform_measurements+0x50>
    return 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e007      	b.n	8002d8c <_perform_measurements+0x60>
  }

  return _read_values(result, out_temp, out_hum);
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff77 	bl	8002c78 <_read_values>
 8002d8a:	4603      	mov	r3, r0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3720      	adds	r7, #32
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <shtc3_perform_measurements>:

uint32_t shtc3_perform_measurements(I2C_HandleTypeDef *hi2c, int32_t* out_temp, int32_t* out_hum)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  return _perform_measurements(hi2c, SHTC3_CMD_CLK_STRETCH_READ_HUM_FIRST, out_temp, out_hum);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	f242 415c 	movw	r1, #9308	; 0x245c
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff ffbf 	bl	8002d2c <_perform_measurements>
 8002dae:	4603      	mov	r3, r0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_MspInit+0x4c>)
 8002dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc2:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <HAL_MspInit+0x4c>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6613      	str	r3, [r2, #96]	; 0x60
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <HAL_MspInit+0x4c>)
 8002dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_MspInit+0x4c>)
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dda:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <HAL_MspInit+0x4c>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de0:	6593      	str	r3, [r2, #88]	; 0x58
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_MspInit+0x4c>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	210f      	movs	r1, #15
 8002df2:	f06f 0001 	mvn.w	r0, #1
 8002df6:	f002 f99d 	bl	8005134 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000

08002e08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08c      	sub	sp, #48	; 0x30
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 031c 	add.w	r3, r7, #28
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a33      	ldr	r2, [pc, #204]	; (8002ef4 <HAL_ADC_MspInit+0xec>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d12d      	bne.n	8002e86 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002e2a:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <HAL_ADC_MspInit+0xf0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	4a31      	ldr	r2, [pc, #196]	; (8002ef8 <HAL_ADC_MspInit+0xf0>)
 8002e32:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002e34:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <HAL_ADC_MspInit+0xf0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d10b      	bne.n	8002e54 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002e3c:	4b2f      	ldr	r3, [pc, #188]	; (8002efc <HAL_ADC_MspInit+0xf4>)
 8002e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e40:	4a2e      	ldr	r2, [pc, #184]	; (8002efc <HAL_ADC_MspInit+0xf4>)
 8002e42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e48:	4b2c      	ldr	r3, [pc, #176]	; (8002efc <HAL_ADC_MspInit+0xf4>)
 8002e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e54:	4b29      	ldr	r3, [pc, #164]	; (8002efc <HAL_ADC_MspInit+0xf4>)
 8002e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e58:	4a28      	ldr	r2, [pc, #160]	; (8002efc <HAL_ADC_MspInit+0xf4>)
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e60:	4b26      	ldr	r3, [pc, #152]	; (8002efc <HAL_ADC_MspInit+0xf4>)
 8002e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GAS_ADC_Pin;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002e70:	230b      	movs	r3, #11
 8002e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GAS_ADC_GPIO_Port, &GPIO_InitStruct);
 8002e78:	f107 031c 	add.w	r3, r7, #28
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4820      	ldr	r0, [pc, #128]	; (8002f00 <HAL_ADC_MspInit+0xf8>)
 8002e80:	f002 fbf8 	bl	8005674 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002e84:	e031      	b.n	8002eea <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1e      	ldr	r2, [pc, #120]	; (8002f04 <HAL_ADC_MspInit+0xfc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d12c      	bne.n	8002eea <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_ADC_MspInit+0xf0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3301      	adds	r3, #1
 8002e96:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <HAL_ADC_MspInit+0xf0>)
 8002e98:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002e9a:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <HAL_ADC_MspInit+0xf0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d10b      	bne.n	8002eba <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002ea2:	4b16      	ldr	r3, [pc, #88]	; (8002efc <HAL_ADC_MspInit+0xf4>)
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea6:	4a15      	ldr	r2, [pc, #84]	; (8002efc <HAL_ADC_MspInit+0xf4>)
 8002ea8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eae:	4b13      	ldr	r3, [pc, #76]	; (8002efc <HAL_ADC_MspInit+0xf4>)
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_ADC_MspInit+0xf4>)
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	4a0f      	ldr	r2, [pc, #60]	; (8002efc <HAL_ADC_MspInit+0xf4>)
 8002ec0:	f043 0304 	orr.w	r3, r3, #4
 8002ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <HAL_ADC_MspInit+0xf4>)
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BAT_SENSE_Pin;
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002ed6:	230b      	movs	r3, #11
 8002ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002ede:	f107 031c 	add.w	r3, r7, #28
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4808      	ldr	r0, [pc, #32]	; (8002f08 <HAL_ADC_MspInit+0x100>)
 8002ee6:	f002 fbc5 	bl	8005674 <HAL_GPIO_Init>
}
 8002eea:	bf00      	nop
 8002eec:	3730      	adds	r7, #48	; 0x30
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	50040000 	.word	0x50040000
 8002ef8:	200013f4 	.word	0x200013f4
 8002efc:	40021000 	.word	0x40021000
 8002f00:	48000400 	.word	0x48000400
 8002f04:	50040100 	.word	0x50040100
 8002f08:	48000800 	.word	0x48000800

08002f0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b0ae      	sub	sp, #184	; 0xb8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f24:	f107 031c 	add.w	r3, r7, #28
 8002f28:	2288      	movs	r2, #136	; 0x88
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f00b f81e 	bl	800df6e <memset>
  if(hi2c->Instance==I2C2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a42      	ldr	r2, [pc, #264]	; (8003040 <HAL_I2C_MspInit+0x134>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d13c      	bne.n	8002fb6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002f40:	2300      	movs	r3, #0
 8002f42:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f44:	f107 031c 	add.w	r3, r7, #28
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f004 fcc1 	bl	80078d0 <HAL_RCCEx_PeriphCLKConfig>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002f54:	f7ff faa6 	bl	80024a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f58:	4b3a      	ldr	r3, [pc, #232]	; (8003044 <HAL_I2C_MspInit+0x138>)
 8002f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5c:	4a39      	ldr	r2, [pc, #228]	; (8003044 <HAL_I2C_MspInit+0x138>)
 8002f5e:	f043 0302 	orr.w	r3, r3, #2
 8002f62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f64:	4b37      	ldr	r3, [pc, #220]	; (8003044 <HAL_I2C_MspInit+0x138>)
 8002f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = TEMP_SCL_Pin|TEMP_SDA_Pin;
 8002f70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f78:	2312      	movs	r3, #18
 8002f7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f84:	2303      	movs	r3, #3
 8002f86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f94:	4619      	mov	r1, r3
 8002f96:	482c      	ldr	r0, [pc, #176]	; (8003048 <HAL_I2C_MspInit+0x13c>)
 8002f98:	f002 fb6c 	bl	8005674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f9c:	4b29      	ldr	r3, [pc, #164]	; (8003044 <HAL_I2C_MspInit+0x138>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	4a28      	ldr	r2, [pc, #160]	; (8003044 <HAL_I2C_MspInit+0x138>)
 8002fa2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fa6:	6593      	str	r3, [r2, #88]	; 0x58
 8002fa8:	4b26      	ldr	r3, [pc, #152]	; (8003044 <HAL_I2C_MspInit+0x138>)
 8002faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002fb4:	e040      	b.n	8003038 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C3)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a24      	ldr	r2, [pc, #144]	; (800304c <HAL_I2C_MspInit+0x140>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d13b      	bne.n	8003038 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fca:	f107 031c 	add.w	r3, r7, #28
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f004 fc7e 	bl	80078d0 <HAL_RCCEx_PeriphCLKConfig>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8002fda:	f7ff fa63 	bl	80024a4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fde:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_I2C_MspInit+0x138>)
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe2:	4a18      	ldr	r2, [pc, #96]	; (8003044 <HAL_I2C_MspInit+0x138>)
 8002fe4:	f043 0304 	orr.w	r3, r3, #4
 8002fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <HAL_I2C_MspInit+0x138>)
 8002fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ffc:	2312      	movs	r3, #18
 8002ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003008:	2303      	movs	r3, #3
 800300a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800300e:	2304      	movs	r3, #4
 8003010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003014:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003018:	4619      	mov	r1, r3
 800301a:	480d      	ldr	r0, [pc, #52]	; (8003050 <HAL_I2C_MspInit+0x144>)
 800301c:	f002 fb2a 	bl	8005674 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_I2C_MspInit+0x138>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	4a07      	ldr	r2, [pc, #28]	; (8003044 <HAL_I2C_MspInit+0x138>)
 8003026:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800302a:	6593      	str	r3, [r2, #88]	; 0x58
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_I2C_MspInit+0x138>)
 800302e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
}
 8003038:	bf00      	nop
 800303a:	37b8      	adds	r7, #184	; 0xb8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40005800 	.word	0x40005800
 8003044:	40021000 	.word	0x40021000
 8003048:	48000400 	.word	0x48000400
 800304c:	40005c00 	.word	0x40005c00
 8003050:	48000800 	.word	0x48000800

08003054 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0a      	ldr	r2, [pc, #40]	; (800308c <HAL_TIM_PWM_MspInit+0x38>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d10b      	bne.n	800307e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <HAL_TIM_PWM_MspInit+0x3c>)
 8003068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306a:	4a09      	ldr	r2, [pc, #36]	; (8003090 <HAL_TIM_PWM_MspInit+0x3c>)
 800306c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003070:	6613      	str	r3, [r2, #96]	; 0x60
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_TIM_PWM_MspInit+0x3c>)
 8003074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40021000 	.word	0x40021000

08003094 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 030c 	add.w	r3, r7, #12
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <HAL_TIM_MspPostInit+0x64>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d11c      	bne.n	80030f0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_TIM_MspPostInit+0x68>)
 80030b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ba:	4a10      	ldr	r2, [pc, #64]	; (80030fc <HAL_TIM_MspPostInit+0x68>)
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030c2:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <HAL_TIM_MspPostInit+0x68>)
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 80030ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d4:	2302      	movs	r3, #2
 80030d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030dc:	2300      	movs	r3, #0
 80030de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030e0:	2301      	movs	r3, #1
 80030e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 80030e4:	f107 030c 	add.w	r3, r7, #12
 80030e8:	4619      	mov	r1, r3
 80030ea:	4805      	ldr	r0, [pc, #20]	; (8003100 <HAL_TIM_MspPostInit+0x6c>)
 80030ec:	f002 fac2 	bl	8005674 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80030f0:	bf00      	nop
 80030f2:	3720      	adds	r7, #32
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40021000 	.word	0x40021000
 8003100:	48000400 	.word	0x48000400

08003104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b0b2      	sub	sp, #200	; 0xc8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800311c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003120:	2288      	movs	r2, #136	; 0x88
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f00a ff22 	bl	800df6e <memset>
  if(huart->Instance==UART5)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4aae      	ldr	r2, [pc, #696]	; (80033e8 <HAL_UART_MspInit+0x2e4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	f040 808f 	bne.w	8003254 <HAL_UART_MspInit+0x150>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003136:	2310      	movs	r3, #16
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800313a:	2300      	movs	r3, #0
 800313c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800313e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003142:	4618      	mov	r0, r3
 8003144:	f004 fbc4 	bl	80078d0 <HAL_RCCEx_PeriphCLKConfig>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800314e:	f7ff f9a9 	bl	80024a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003152:	4ba6      	ldr	r3, [pc, #664]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	4aa5      	ldr	r2, [pc, #660]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800315c:	6593      	str	r3, [r2, #88]	; 0x58
 800315e:	4ba3      	ldr	r3, [pc, #652]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800316a:	4ba0      	ldr	r3, [pc, #640]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 800316c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316e:	4a9f      	ldr	r2, [pc, #636]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003170:	f043 0304 	orr.w	r3, r3, #4
 8003174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003176:	4b9d      	ldr	r3, [pc, #628]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003182:	4b9a      	ldr	r3, [pc, #616]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	4a99      	ldr	r2, [pc, #612]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003188:	f043 0308 	orr.w	r3, r3, #8
 800318c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800318e:	4b97      	ldr	r3, [pc, #604]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 800319a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800319e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	2302      	movs	r3, #2
 80031a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ae:	2303      	movs	r3, #3
 80031b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80031b4:	2308      	movs	r3, #8
 80031b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 80031ba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80031be:	4619      	mov	r1, r3
 80031c0:	488b      	ldr	r0, [pc, #556]	; (80033f0 <HAL_UART_MspInit+0x2ec>)
 80031c2:	f002 fa57 	bl	8005674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 80031c6:	2304      	movs	r3, #4
 80031c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031cc:	2302      	movs	r3, #2
 80031ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d8:	2303      	movs	r3, #3
 80031da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80031de:	2308      	movs	r3, #8
 80031e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 80031e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80031e8:	4619      	mov	r1, r3
 80031ea:	4882      	ldr	r0, [pc, #520]	; (80033f4 <HAL_UART_MspInit+0x2f0>)
 80031ec:	f002 fa42 	bl	8005674 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA2_Channel2;
 80031f0:	4b81      	ldr	r3, [pc, #516]	; (80033f8 <HAL_UART_MspInit+0x2f4>)
 80031f2:	4a82      	ldr	r2, [pc, #520]	; (80033fc <HAL_UART_MspInit+0x2f8>)
 80031f4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 80031f6:	4b80      	ldr	r3, [pc, #512]	; (80033f8 <HAL_UART_MspInit+0x2f4>)
 80031f8:	2202      	movs	r2, #2
 80031fa:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031fc:	4b7e      	ldr	r3, [pc, #504]	; (80033f8 <HAL_UART_MspInit+0x2f4>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003202:	4b7d      	ldr	r3, [pc, #500]	; (80033f8 <HAL_UART_MspInit+0x2f4>)
 8003204:	2200      	movs	r2, #0
 8003206:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003208:	4b7b      	ldr	r3, [pc, #492]	; (80033f8 <HAL_UART_MspInit+0x2f4>)
 800320a:	2280      	movs	r2, #128	; 0x80
 800320c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800320e:	4b7a      	ldr	r3, [pc, #488]	; (80033f8 <HAL_UART_MspInit+0x2f4>)
 8003210:	2200      	movs	r2, #0
 8003212:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003214:	4b78      	ldr	r3, [pc, #480]	; (80033f8 <HAL_UART_MspInit+0x2f4>)
 8003216:	2200      	movs	r2, #0
 8003218:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800321a:	4b77      	ldr	r3, [pc, #476]	; (80033f8 <HAL_UART_MspInit+0x2f4>)
 800321c:	2200      	movs	r2, #0
 800321e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003220:	4b75      	ldr	r3, [pc, #468]	; (80033f8 <HAL_UART_MspInit+0x2f4>)
 8003222:	2200      	movs	r2, #0
 8003224:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003226:	4874      	ldr	r0, [pc, #464]	; (80033f8 <HAL_UART_MspInit+0x2f4>)
 8003228:	f001 ffae 	bl	8005188 <HAL_DMA_Init>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8003232:	f7ff f937 	bl	80024a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a6f      	ldr	r2, [pc, #444]	; (80033f8 <HAL_UART_MspInit+0x2f4>)
 800323a:	675a      	str	r2, [r3, #116]	; 0x74
 800323c:	4a6e      	ldr	r2, [pc, #440]	; (80033f8 <HAL_UART_MspInit+0x2f4>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8003242:	2200      	movs	r2, #0
 8003244:	2105      	movs	r1, #5
 8003246:	2035      	movs	r0, #53	; 0x35
 8003248:	f001 ff74 	bl	8005134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800324c:	2035      	movs	r0, #53	; 0x35
 800324e:	f001 ff8d 	bl	800516c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003252:	e0c5      	b.n	80033e0 <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a69      	ldr	r2, [pc, #420]	; (8003400 <HAL_UART_MspInit+0x2fc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d13d      	bne.n	80032da <HAL_UART_MspInit+0x1d6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800325e:	2301      	movs	r3, #1
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003262:	2300      	movs	r3, #0
 8003264:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003266:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800326a:	4618      	mov	r0, r3
 800326c:	f004 fb30 	bl	80078d0 <HAL_RCCEx_PeriphCLKConfig>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_UART_MspInit+0x176>
      Error_Handler();
 8003276:	f7ff f915 	bl	80024a4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800327a:	4b5c      	ldr	r3, [pc, #368]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 800327c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327e:	4a5b      	ldr	r2, [pc, #364]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003284:	6613      	str	r3, [r2, #96]	; 0x60
 8003286:	4b59      	ldr	r3, [pc, #356]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003292:	4b56      	ldr	r3, [pc, #344]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003296:	4a55      	ldr	r2, [pc, #340]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800329e:	4b53      	ldr	r3, [pc, #332]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = WK_RX_Pin|WK_TX_Pin;
 80032aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032be:	2303      	movs	r3, #3
 80032c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032c4:	2307      	movs	r3, #7
 80032c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ca:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032ce:	4619      	mov	r1, r3
 80032d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d4:	f002 f9ce 	bl	8005674 <HAL_GPIO_Init>
}
 80032d8:	e082      	b.n	80033e0 <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART2)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a49      	ldr	r2, [pc, #292]	; (8003404 <HAL_UART_MspInit+0x300>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d13c      	bne.n	800335e <HAL_UART_MspInit+0x25a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032e4:	2302      	movs	r3, #2
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032e8:	2300      	movs	r3, #0
 80032ea:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032f0:	4618      	mov	r0, r3
 80032f2:	f004 faed 	bl	80078d0 <HAL_RCCEx_PeriphCLKConfig>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80032fc:	f7ff f8d2 	bl	80024a4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003300:	4b3a      	ldr	r3, [pc, #232]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	4a39      	ldr	r2, [pc, #228]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800330a:	6593      	str	r3, [r2, #88]	; 0x58
 800330c:	4b37      	ldr	r3, [pc, #220]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003318:	4b34      	ldr	r3, [pc, #208]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 800331a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331c:	4a33      	ldr	r2, [pc, #204]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003324:	4b31      	ldr	r3, [pc, #196]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003330:	230c      	movs	r3, #12
 8003332:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003336:	2302      	movs	r3, #2
 8003338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	2300      	movs	r3, #0
 800333e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003342:	2303      	movs	r3, #3
 8003344:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003348:	2307      	movs	r3, #7
 800334a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003352:	4619      	mov	r1, r3
 8003354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003358:	f002 f98c 	bl	8005674 <HAL_GPIO_Init>
}
 800335c:	e040      	b.n	80033e0 <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART3)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a29      	ldr	r2, [pc, #164]	; (8003408 <HAL_UART_MspInit+0x304>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d13b      	bne.n	80033e0 <HAL_UART_MspInit+0x2dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003368:	2304      	movs	r3, #4
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800336c:	2300      	movs	r3, #0
 800336e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003374:	4618      	mov	r0, r3
 8003376:	f004 faab 	bl	80078d0 <HAL_RCCEx_PeriphCLKConfig>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_UART_MspInit+0x280>
      Error_Handler();
 8003380:	f7ff f890 	bl	80024a4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 800338a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800338e:	6593      	str	r3, [r2, #88]	; 0x58
 8003390:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800339c:	4b13      	ldr	r3, [pc, #76]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 800339e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a0:	4a12      	ldr	r2, [pc, #72]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 80033a2:	f043 0304 	orr.w	r3, r3, #4
 80033a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033a8:	4b10      	ldr	r3, [pc, #64]	; (80033ec <HAL_UART_MspInit+0x2e8>)
 80033aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NET_ESP_RX_Pin|NET_ESP_TX_Pin;
 80033b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80033b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	2302      	movs	r3, #2
 80033be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c8:	2303      	movs	r3, #3
 80033ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033ce:	2307      	movs	r3, #7
 80033d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80033d8:	4619      	mov	r1, r3
 80033da:	4805      	ldr	r0, [pc, #20]	; (80033f0 <HAL_UART_MspInit+0x2ec>)
 80033dc:	f002 f94a 	bl	8005674 <HAL_GPIO_Init>
}
 80033e0:	bf00      	nop
 80033e2:	37c8      	adds	r7, #200	; 0xc8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40005000 	.word	0x40005000
 80033ec:	40021000 	.word	0x40021000
 80033f0:	48000800 	.word	0x48000800
 80033f4:	48000c00 	.word	0x48000c00
 80033f8:	20001268 	.word	0x20001268
 80033fc:	4002041c 	.word	0x4002041c
 8003400:	40013800 	.word	0x40013800
 8003404:	40004400 	.word	0x40004400
 8003408:	40004800 	.word	0x40004800

0800340c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08e      	sub	sp, #56	; 0x38
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800341a:	4b34      	ldr	r3, [pc, #208]	; (80034ec <HAL_InitTick+0xe0>)
 800341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341e:	4a33      	ldr	r2, [pc, #204]	; (80034ec <HAL_InitTick+0xe0>)
 8003420:	f043 0310 	orr.w	r3, r3, #16
 8003424:	6593      	str	r3, [r2, #88]	; 0x58
 8003426:	4b31      	ldr	r3, [pc, #196]	; (80034ec <HAL_InitTick+0xe0>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003432:	f107 0210 	add.w	r2, r7, #16
 8003436:	f107 0314 	add.w	r3, r7, #20
 800343a:	4611      	mov	r1, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f004 f9b5 	bl	80077ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d103      	bne.n	8003454 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800344c:	f004 f982 	bl	8007754 <HAL_RCC_GetPCLK1Freq>
 8003450:	6378      	str	r0, [r7, #52]	; 0x34
 8003452:	e004      	b.n	800345e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003454:	f004 f97e 	bl	8007754 <HAL_RCC_GetPCLK1Freq>
 8003458:	4603      	mov	r3, r0
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800345e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003460:	4a23      	ldr	r2, [pc, #140]	; (80034f0 <HAL_InitTick+0xe4>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	0c9b      	lsrs	r3, r3, #18
 8003468:	3b01      	subs	r3, #1
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800346c:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <HAL_InitTick+0xe8>)
 800346e:	4a22      	ldr	r2, [pc, #136]	; (80034f8 <HAL_InitTick+0xec>)
 8003470:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_InitTick+0xe8>)
 8003474:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003478:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800347a:	4a1e      	ldr	r2, [pc, #120]	; (80034f4 <HAL_InitTick+0xe8>)
 800347c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003480:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <HAL_InitTick+0xe8>)
 8003482:	2200      	movs	r2, #0
 8003484:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_InitTick+0xe8>)
 8003488:	2200      	movs	r2, #0
 800348a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800348c:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_InitTick+0xe8>)
 800348e:	2200      	movs	r2, #0
 8003490:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003492:	4818      	ldr	r0, [pc, #96]	; (80034f4 <HAL_InitTick+0xe8>)
 8003494:	f004 fed8 	bl	8008248 <HAL_TIM_Base_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800349e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11b      	bne.n	80034de <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80034a6:	4813      	ldr	r0, [pc, #76]	; (80034f4 <HAL_InitTick+0xe8>)
 80034a8:	f004 ff30 	bl	800830c <HAL_TIM_Base_Start_IT>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80034b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d111      	bne.n	80034de <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034ba:	2036      	movs	r0, #54	; 0x36
 80034bc:	f001 fe56 	bl	800516c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b0f      	cmp	r3, #15
 80034c4:	d808      	bhi.n	80034d8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80034c6:	2200      	movs	r2, #0
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	2036      	movs	r0, #54	; 0x36
 80034cc:	f001 fe32 	bl	8005134 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034d0:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <HAL_InitTick+0xf0>)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e002      	b.n	80034de <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80034de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3738      	adds	r7, #56	; 0x38
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	431bde83 	.word	0x431bde83
 80034f4:	200013f8 	.word	0x200013f8
 80034f8:	40001000 	.word	0x40001000
 80034fc:	200000cc 	.word	0x200000cc

08003500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003504:	e7fe      	b.n	8003504 <NMI_Handler+0x4>

08003506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800350a:	e7fe      	b.n	800350a <HardFault_Handler+0x4>

0800350c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003510:	e7fe      	b.n	8003510 <MemManage_Handler+0x4>

08003512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003512:	b480      	push	{r7}
 8003514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003516:	e7fe      	b.n	8003516 <BusFault_Handler+0x4>

08003518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800351c:	e7fe      	b.n	800351c <UsageFault_Handler+0x4>

0800351e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800351e:	b480      	push	{r7}
 8003520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003530:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003534:	f002 fa60 	bl	80059f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003538:	bf00      	nop
 800353a:	bd80      	pop	{r7, pc}

0800353c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003540:	4802      	ldr	r0, [pc, #8]	; (800354c <UART5_IRQHandler+0x10>)
 8003542:	f006 f891 	bl	8009668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20001048 	.word	0x20001048

08003550 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003554:	4802      	ldr	r0, [pc, #8]	; (8003560 <TIM6_DAC_IRQHandler+0x10>)
 8003556:	f004 ffa0 	bl	800849a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	200013f8 	.word	0x200013f8

08003564 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003568:	4802      	ldr	r0, [pc, #8]	; (8003574 <DMA2_Channel2_IRQHandler+0x10>)
 800356a:	f001 ffa4 	bl	80054b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20001268 	.word	0x20001268

08003578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return 1;
 800357c:	2301      	movs	r3, #1
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <_kill>:

int _kill(int pid, int sig)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003592:	f00a fdab 	bl	800e0ec <__errno>
 8003596:	4603      	mov	r3, r0
 8003598:	2216      	movs	r2, #22
 800359a:	601a      	str	r2, [r3, #0]
  return -1;
 800359c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_exit>:

void _exit (int status)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035b0:	f04f 31ff 	mov.w	r1, #4294967295
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff ffe7 	bl	8003588 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035ba:	e7fe      	b.n	80035ba <_exit+0x12>

080035bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	e00a      	b.n	80035e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035ce:	f3af 8000 	nop.w
 80035d2:	4601      	mov	r1, r0
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	60ba      	str	r2, [r7, #8]
 80035da:	b2ca      	uxtb	r2, r1
 80035dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	3301      	adds	r3, #1
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	dbf0      	blt.n	80035ce <_read+0x12>
  }

  return len;
 80035ec:	687b      	ldr	r3, [r7, #4]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e009      	b.n	800361c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	60ba      	str	r2, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3301      	adds	r3, #1
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	429a      	cmp	r2, r3
 8003622:	dbf1      	blt.n	8003608 <_write+0x12>
  }
  return len;
 8003624:	687b      	ldr	r3, [r7, #4]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <_close>:

int _close(int file)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003656:	605a      	str	r2, [r3, #4]
  return 0;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <_isatty>:

int _isatty(int file)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800366e:	2301      	movs	r3, #1
}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036a0:	4a14      	ldr	r2, [pc, #80]	; (80036f4 <_sbrk+0x5c>)
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <_sbrk+0x60>)
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036ac:	4b13      	ldr	r3, [pc, #76]	; (80036fc <_sbrk+0x64>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <_sbrk+0x64>)
 80036b6:	4a12      	ldr	r2, [pc, #72]	; (8003700 <_sbrk+0x68>)
 80036b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036ba:	4b10      	ldr	r3, [pc, #64]	; (80036fc <_sbrk+0x64>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d207      	bcs.n	80036d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036c8:	f00a fd10 	bl	800e0ec <__errno>
 80036cc:	4603      	mov	r3, r0
 80036ce:	220c      	movs	r2, #12
 80036d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
 80036d6:	e009      	b.n	80036ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <_sbrk+0x64>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <_sbrk+0x64>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	4a05      	ldr	r2, [pc, #20]	; (80036fc <_sbrk+0x64>)
 80036e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ea:	68fb      	ldr	r3, [r7, #12]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20018000 	.word	0x20018000
 80036f8:	00000400 	.word	0x00000400
 80036fc:	20001444 	.word	0x20001444
 8003700:	20008c20 	.word	0x20008c20

08003704 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003708:	4b06      	ldr	r3, [pc, #24]	; (8003724 <SystemInit+0x20>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	4a05      	ldr	r2, [pc, #20]	; (8003724 <SystemInit+0x20>)
 8003710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003760 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800372c:	f7ff ffea 	bl	8003704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003730:	480c      	ldr	r0, [pc, #48]	; (8003764 <LoopForever+0x6>)
  ldr r1, =_edata
 8003732:	490d      	ldr	r1, [pc, #52]	; (8003768 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003734:	4a0d      	ldr	r2, [pc, #52]	; (800376c <LoopForever+0xe>)
  movs r3, #0
 8003736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003738:	e002      	b.n	8003740 <LoopCopyDataInit>

0800373a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800373a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800373c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800373e:	3304      	adds	r3, #4

08003740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003744:	d3f9      	bcc.n	800373a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003748:	4c0a      	ldr	r4, [pc, #40]	; (8003774 <LoopForever+0x16>)
  movs r3, #0
 800374a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800374c:	e001      	b.n	8003752 <LoopFillZerobss>

0800374e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800374e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003750:	3204      	adds	r2, #4

08003752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003754:	d3fb      	bcc.n	800374e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003756:	f00a fccf 	bl	800e0f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800375a:	f7fe f815 	bl	8001788 <main>

0800375e <LoopForever>:

LoopForever:
    b LoopForever
 800375e:	e7fe      	b.n	800375e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003760:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003768:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 800376c:	08013e80 	.word	0x08013e80
  ldr r2, =_sbss
 8003770:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8003774:	20008c1c 	.word	0x20008c1c

08003778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003778:	e7fe      	b.n	8003778 <ADC1_2_IRQHandler>
	...

0800377c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <HAL_Init+0x3c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a0b      	ldr	r2, [pc, #44]	; (80037b8 <HAL_Init+0x3c>)
 800378c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003790:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003792:	2003      	movs	r0, #3
 8003794:	f001 fcc3 	bl	800511e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003798:	200f      	movs	r0, #15
 800379a:	f7ff fe37 	bl	800340c <HAL_InitTick>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	71fb      	strb	r3, [r7, #7]
 80037a8:	e001      	b.n	80037ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037aa:	f7ff fb05 	bl	8002db8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037ae:	79fb      	ldrb	r3, [r7, #7]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40022000 	.word	0x40022000

080037bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_IncTick+0x20>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_IncTick+0x24>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4413      	add	r3, r2
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <HAL_IncTick+0x24>)
 80037ce:	6013      	str	r3, [r2, #0]
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	200000d0 	.word	0x200000d0
 80037e0:	20001448 	.word	0x20001448

080037e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return uwTick;
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <HAL_GetTick+0x14>)
 80037ea:	681b      	ldr	r3, [r3, #0]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20001448 	.word	0x20001448

080037fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003804:	f7ff ffee 	bl	80037e4 <HAL_GetTick>
 8003808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d005      	beq.n	8003822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003816:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <HAL_Delay+0x44>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4413      	add	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003822:	bf00      	nop
 8003824:	f7ff ffde 	bl	80037e4 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	429a      	cmp	r2, r3
 8003832:	d8f7      	bhi.n	8003824 <HAL_Delay+0x28>
  {
  }
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	200000d0 	.word	0x200000d0

08003844 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	609a      	str	r2, [r3, #8]
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	609a      	str	r2, [r3, #8]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3360      	adds	r3, #96	; 0x60
 80038be:	461a      	mov	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <LL_ADC_SetOffset+0x44>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	4313      	orrs	r3, r2
 80038dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	03fff000 	.word	0x03fff000

080038f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3360      	adds	r3, #96	; 0x60
 8003902:	461a      	mov	r2, r3
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3360      	adds	r3, #96	; 0x60
 8003930:	461a      	mov	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	431a      	orrs	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3330      	adds	r3, #48	; 0x30
 800398c:	461a      	mov	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	4413      	add	r3, r2
 800399a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	211f      	movs	r1, #31
 80039a8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	401a      	ands	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	0e9b      	lsrs	r3, r3, #26
 80039b4:	f003 011f 	and.w	r1, r3, #31
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	431a      	orrs	r2, r3
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3314      	adds	r3, #20
 80039e4:	461a      	mov	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	0e5b      	lsrs	r3, r3, #25
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	4413      	add	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	0d1b      	lsrs	r3, r3, #20
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	2107      	movs	r1, #7
 8003a02:	fa01 f303 	lsl.w	r3, r1, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	401a      	ands	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	0d1b      	lsrs	r3, r3, #20
 8003a0e:	f003 031f 	and.w	r3, r3, #31
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	fa01 f303 	lsl.w	r3, r1, r3
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a44:	43db      	mvns	r3, r3
 8003a46:	401a      	ands	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f003 0318 	and.w	r3, r3, #24
 8003a4e:	4908      	ldr	r1, [pc, #32]	; (8003a70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a50:	40d9      	lsrs	r1, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	400b      	ands	r3, r1
 8003a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003a62:	bf00      	nop
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	0007ffff 	.word	0x0007ffff

08003a74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 031f 	and.w	r3, r3, #31
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6093      	str	r3, [r2, #8]
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae4:	d101      	bne.n	8003aea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003b08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b34:	d101      	bne.n	8003b3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b5c:	f043 0201 	orr.w	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b84:	f043 0202 	orr.w	r2, r3, #2
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <LL_ADC_IsEnabled+0x18>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <LL_ADC_IsEnabled+0x1a>
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d101      	bne.n	8003bd6 <LL_ADC_IsDisableOngoing+0x18>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <LL_ADC_IsDisableOngoing+0x1a>
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bf8:	f043 0204 	orr.w	r2, r3, #4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c20:	f043 0210 	orr.w	r2, r3, #16
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d101      	bne.n	8003c4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c6e:	f043 0220 	orr.w	r2, r3, #32
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d101      	bne.n	8003c9a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ca8:	b590      	push	{r4, r7, lr}
 8003caa:	b089      	sub	sp, #36	; 0x24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e130      	b.n	8003f24 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff f899 	bl	8002e08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fef1 	bl	8003ad0 <LL_ADC_IsDeepPowerDownEnabled>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d004      	beq.n	8003cfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fed7 	bl	8003aac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff ff0c 	bl	8003b20 <LL_ADC_IsInternalRegulatorEnabled>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d115      	bne.n	8003d3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fef0 	bl	8003af8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d18:	4b84      	ldr	r3, [pc, #528]	; (8003f2c <HAL_ADC_Init+0x284>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	099b      	lsrs	r3, r3, #6
 8003d1e:	4a84      	ldr	r2, [pc, #528]	; (8003f30 <HAL_ADC_Init+0x288>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	099b      	lsrs	r3, r3, #6
 8003d26:	3301      	adds	r3, #1
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d2c:	e002      	b.n	8003d34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f9      	bne.n	8003d2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff feee 	bl	8003b20 <LL_ADC_IsInternalRegulatorEnabled>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10d      	bne.n	8003d66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	f043 0210 	orr.w	r2, r3, #16
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5a:	f043 0201 	orr.w	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ff62 	bl	8003c34 <LL_ADC_REG_IsConversionOngoing>
 8003d70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 80c9 	bne.w	8003f12 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f040 80c5 	bne.w	8003f12 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d90:	f043 0202 	orr.w	r2, r3, #2
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fefb 	bl	8003b98 <LL_ADC_IsEnabled>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d115      	bne.n	8003dd4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003da8:	4862      	ldr	r0, [pc, #392]	; (8003f34 <HAL_ADC_Init+0x28c>)
 8003daa:	f7ff fef5 	bl	8003b98 <LL_ADC_IsEnabled>
 8003dae:	4604      	mov	r4, r0
 8003db0:	4861      	ldr	r0, [pc, #388]	; (8003f38 <HAL_ADC_Init+0x290>)
 8003db2:	f7ff fef1 	bl	8003b98 <LL_ADC_IsEnabled>
 8003db6:	4603      	mov	r3, r0
 8003db8:	431c      	orrs	r4, r3
 8003dba:	4860      	ldr	r0, [pc, #384]	; (8003f3c <HAL_ADC_Init+0x294>)
 8003dbc:	f7ff feec 	bl	8003b98 <LL_ADC_IsEnabled>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4323      	orrs	r3, r4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	485c      	ldr	r0, [pc, #368]	; (8003f40 <HAL_ADC_Init+0x298>)
 8003dd0:	f7ff fd38 	bl	8003844 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	7e5b      	ldrb	r3, [r3, #25]
 8003dd8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dde:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003de4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003dea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003df2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d106      	bne.n	8003e10 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	3b01      	subs	r3, #1
 8003e08:	045b      	lsls	r3, r3, #17
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	4b44      	ldr	r3, [pc, #272]	; (8003f44 <HAL_ADC_Init+0x29c>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	69b9      	ldr	r1, [r7, #24]
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff1c 	bl	8003c82 <LL_ADC_INJ_IsConversionOngoing>
 8003e4a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d13d      	bne.n	8003ece <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d13a      	bne.n	8003ece <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e5c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e64:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e74:	f023 0302 	bic.w	r3, r3, #2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	69b9      	ldr	r1, [r7, #24]
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d118      	bne.n	8003ebe <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e96:	f023 0304 	bic.w	r3, r3, #4
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ea2:	4311      	orrs	r1, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ea8:	4311      	orrs	r1, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	611a      	str	r2, [r3, #16]
 8003ebc:	e007      	b.n	8003ece <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0201 	bic.w	r2, r2, #1
 8003ecc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	f023 010f 	bic.w	r1, r3, #15
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	1e5a      	subs	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
 8003eee:	e007      	b.n	8003f00 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 020f 	bic.w	r2, r2, #15
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f04:	f023 0303 	bic.w	r3, r3, #3
 8003f08:	f043 0201 	orr.w	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	655a      	str	r2, [r3, #84]	; 0x54
 8003f10:	e007      	b.n	8003f22 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	f043 0210 	orr.w	r2, r3, #16
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f22:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3724      	adds	r7, #36	; 0x24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd90      	pop	{r4, r7, pc}
 8003f2c:	200000c8 	.word	0x200000c8
 8003f30:	053e2d63 	.word	0x053e2d63
 8003f34:	50040000 	.word	0x50040000
 8003f38:	50040100 	.word	0x50040100
 8003f3c:	50040200 	.word	0x50040200
 8003f40:	50040300 	.word	0x50040300
 8003f44:	fff0c007 	.word	0xfff0c007

08003f48 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f50:	4857      	ldr	r0, [pc, #348]	; (80040b0 <HAL_ADC_Start+0x168>)
 8003f52:	f7ff fd8f 	bl	8003a74 <LL_ADC_GetMultimode>
 8003f56:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fe69 	bl	8003c34 <LL_ADC_REG_IsConversionOngoing>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f040 809c 	bne.w	80040a2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_ADC_Start+0x30>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e097      	b.n	80040a8 <HAL_ADC_Start+0x160>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fe63 	bl	8004c4c <ADC_Enable>
 8003f86:	4603      	mov	r3, r0
 8003f88:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003f8a:	7dfb      	ldrb	r3, [r7, #23]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f040 8083 	bne.w	8004098 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f9a:	f023 0301 	bic.w	r3, r3, #1
 8003f9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a42      	ldr	r2, [pc, #264]	; (80040b4 <HAL_ADC_Start+0x16c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d002      	beq.n	8003fb6 <HAL_ADC_Start+0x6e>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	e000      	b.n	8003fb8 <HAL_ADC_Start+0x70>
 8003fb6:	4b40      	ldr	r3, [pc, #256]	; (80040b8 <HAL_ADC_Start+0x170>)
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d002      	beq.n	8003fc6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d105      	bne.n	8003fd2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fde:	d106      	bne.n	8003fee <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe4:	f023 0206 	bic.w	r2, r3, #6
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	659a      	str	r2, [r3, #88]	; 0x58
 8003fec:	e002      	b.n	8003ff4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	221c      	movs	r2, #28
 8003ffa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a2a      	ldr	r2, [pc, #168]	; (80040b4 <HAL_ADC_Start+0x16c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d002      	beq.n	8004014 <HAL_ADC_Start+0xcc>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	e000      	b.n	8004016 <HAL_ADC_Start+0xce>
 8004014:	4b28      	ldr	r3, [pc, #160]	; (80040b8 <HAL_ADC_Start+0x170>)
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	4293      	cmp	r3, r2
 800401c:	d008      	beq.n	8004030 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b05      	cmp	r3, #5
 8004028:	d002      	beq.n	8004030 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	2b09      	cmp	r3, #9
 800402e:	d114      	bne.n	800405a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004042:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004046:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fdc6 	bl	8003be4 <LL_ADC_REG_StartConversion>
 8004058:	e025      	b.n	80040a6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a12      	ldr	r2, [pc, #72]	; (80040b4 <HAL_ADC_Start+0x16c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d002      	beq.n	8004076 <HAL_ADC_Start+0x12e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	e000      	b.n	8004078 <HAL_ADC_Start+0x130>
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <HAL_ADC_Start+0x170>)
 8004078:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00f      	beq.n	80040a6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800408e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	655a      	str	r2, [r3, #84]	; 0x54
 8004096:	e006      	b.n	80040a6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80040a0:	e001      	b.n	80040a6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80040a2:	2302      	movs	r3, #2
 80040a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80040a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	50040300 	.word	0x50040300
 80040b4:	50040100 	.word	0x50040100
 80040b8:	50040000 	.word	0x50040000

080040bc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_ADC_Stop+0x16>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e023      	b.n	800411a <HAL_ADC_Stop+0x5e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80040da:	2103      	movs	r1, #3
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fcf9 	bl	8004ad4 <ADC_ConversionStop>
 80040e2:	4603      	mov	r3, r0
 80040e4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d111      	bne.n	8004110 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fe33 	bl	8004d58 <ADC_Disable>
 80040f2:	4603      	mov	r3, r0
 80040f4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d109      	bne.n	8004110 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004100:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004104:	f023 0301 	bic.w	r3, r3, #1
 8004108:	f043 0201 	orr.w	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004118:	7bfb      	ldrb	r3, [r7, #15]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800412e:	4866      	ldr	r0, [pc, #408]	; (80042c8 <HAL_ADC_PollForConversion+0x1a4>)
 8004130:	f7ff fca0 	bl	8003a74 <LL_ADC_GetMultimode>
 8004134:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	2b08      	cmp	r3, #8
 800413c:	d102      	bne.n	8004144 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800413e:	2308      	movs	r3, #8
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	e02a      	b.n	800419a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b05      	cmp	r3, #5
 800414e:	d002      	beq.n	8004156 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b09      	cmp	r3, #9
 8004154:	d111      	bne.n	800417a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004168:	f043 0220 	orr.w	r2, r3, #32
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0a4      	b.n	80042be <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004174:	2304      	movs	r3, #4
 8004176:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004178:	e00f      	b.n	800419a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800417a:	4853      	ldr	r0, [pc, #332]	; (80042c8 <HAL_ADC_PollForConversion+0x1a4>)
 800417c:	f7ff fc88 	bl	8003a90 <LL_ADC_GetMultiDMATransfer>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d007      	beq.n	8004196 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	f043 0220 	orr.w	r2, r3, #32
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e093      	b.n	80042be <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004196:	2304      	movs	r3, #4
 8004198:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800419a:	f7ff fb23 	bl	80037e4 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80041a0:	e021      	b.n	80041e6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d01d      	beq.n	80041e6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80041aa:	f7ff fb1b 	bl	80037e4 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <HAL_ADC_PollForConversion+0x9c>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d112      	bne.n	80041e6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10b      	bne.n	80041e6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	f043 0204 	orr.w	r2, r3, #4
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e06b      	b.n	80042be <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0d6      	beq.n	80041a2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fba6 	bl	8003956 <LL_ADC_REG_IsTriggerSourceSWStart>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d01c      	beq.n	800424a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	7e5b      	ldrb	r3, [r3, #25]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d118      	bne.n	800424a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b08      	cmp	r3, #8
 8004224:	d111      	bne.n	800424a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d105      	bne.n	800424a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	f043 0201 	orr.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1f      	ldr	r2, [pc, #124]	; (80042cc <HAL_ADC_PollForConversion+0x1a8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d002      	beq.n	800425a <HAL_ADC_PollForConversion+0x136>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	e000      	b.n	800425c <HAL_ADC_PollForConversion+0x138>
 800425a:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <HAL_ADC_PollForConversion+0x1ac>)
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	4293      	cmp	r3, r2
 8004262:	d008      	beq.n	8004276 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b05      	cmp	r3, #5
 800426e:	d002      	beq.n	8004276 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b09      	cmp	r3, #9
 8004274:	d104      	bne.n	8004280 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	e00c      	b.n	800429a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a11      	ldr	r2, [pc, #68]	; (80042cc <HAL_ADC_PollForConversion+0x1a8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d002      	beq.n	8004290 <HAL_ADC_PollForConversion+0x16c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	e000      	b.n	8004292 <HAL_ADC_PollForConversion+0x16e>
 8004290:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <HAL_ADC_PollForConversion+0x1ac>)
 8004292:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d104      	bne.n	80042aa <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2208      	movs	r2, #8
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e008      	b.n	80042bc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d103      	bne.n	80042bc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	220c      	movs	r2, #12
 80042ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	50040300 	.word	0x50040300
 80042cc:	50040100 	.word	0x50040100
 80042d0:	50040000 	.word	0x50040000

080042d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b0b6      	sub	sp, #216	; 0xd8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004300:	2300      	movs	r3, #0
 8004302:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x22>
 800430e:	2302      	movs	r3, #2
 8004310:	e3c9      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0x7b6>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fc88 	bl	8003c34 <LL_ADC_REG_IsConversionOngoing>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 83aa 	bne.w	8004a80 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b05      	cmp	r3, #5
 800433a:	d824      	bhi.n	8004386 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	3b02      	subs	r3, #2
 8004342:	2b03      	cmp	r3, #3
 8004344:	d81b      	bhi.n	800437e <HAL_ADC_ConfigChannel+0x8e>
 8004346:	a201      	add	r2, pc, #4	; (adr r2, 800434c <HAL_ADC_ConfigChannel+0x5c>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	0800435d 	.word	0x0800435d
 8004350:	08004365 	.word	0x08004365
 8004354:	0800436d 	.word	0x0800436d
 8004358:	08004375 	.word	0x08004375
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800435c:	230c      	movs	r3, #12
 800435e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004362:	e010      	b.n	8004386 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004364:	2312      	movs	r3, #18
 8004366:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800436a:	e00c      	b.n	8004386 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800436c:	2318      	movs	r3, #24
 800436e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004372:	e008      	b.n	8004386 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800437c:	e003      	b.n	8004386 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800437e:	2306      	movs	r3, #6
 8004380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004384:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004394:	f7ff faf2 	bl	800397c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fc49 	bl	8003c34 <LL_ADC_REG_IsConversionOngoing>
 80043a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff fc69 	bl	8003c82 <LL_ADC_INJ_IsConversionOngoing>
 80043b0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f040 81a4 	bne.w	8004706 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f040 819f 	bne.w	8004706 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	6819      	ldr	r1, [r3, #0]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	461a      	mov	r2, r3
 80043d6:	f7ff fafd 	bl	80039d4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	08db      	lsrs	r3, r3, #3
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d00a      	beq.n	8004412 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	6919      	ldr	r1, [r3, #16]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800440c:	f7ff fa4e 	bl	80038ac <LL_ADC_SetOffset>
 8004410:	e179      	b.n	8004706 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fa6b 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 800441e:	4603      	mov	r3, r0
 8004420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <HAL_ADC_ConfigChannel+0x14e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2100      	movs	r1, #0
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fa60 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 8004434:	4603      	mov	r3, r0
 8004436:	0e9b      	lsrs	r3, r3, #26
 8004438:	f003 021f 	and.w	r2, r3, #31
 800443c:	e01e      	b.n	800447c <HAL_ADC_ConfigChannel+0x18c>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2100      	movs	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fa55 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 800444a:	4603      	mov	r3, r0
 800444c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004450:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800445c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004460:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004464:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800446c:	2320      	movs	r3, #32
 800446e:	e004      	b.n	800447a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004470:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004474:	fab3 f383 	clz	r3, r3
 8004478:	b2db      	uxtb	r3, r3
 800447a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x1a4>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	0e9b      	lsrs	r3, r3, #26
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	e018      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x1d6>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044a0:	fa93 f3a3 	rbit	r3, r3
 80044a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80044a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80044b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80044b8:	2320      	movs	r3, #32
 80044ba:	e004      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80044bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044c0:	fab3 f383 	clz	r3, r3
 80044c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d106      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2200      	movs	r2, #0
 80044d0:	2100      	movs	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fa24 	bl	8003920 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2101      	movs	r1, #1
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fa08 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x214>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2101      	movs	r1, #1
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff f9fd 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 80044fa:	4603      	mov	r3, r0
 80044fc:	0e9b      	lsrs	r3, r3, #26
 80044fe:	f003 021f 	and.w	r2, r3, #31
 8004502:	e01e      	b.n	8004542 <HAL_ADC_ConfigChannel+0x252>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2101      	movs	r1, #1
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff f9f2 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 8004510:	4603      	mov	r3, r0
 8004512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800451a:	fa93 f3a3 	rbit	r3, r3
 800451e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004522:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800452a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004532:	2320      	movs	r3, #32
 8004534:	e004      	b.n	8004540 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004536:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800453a:	fab3 f383 	clz	r3, r3
 800453e:	b2db      	uxtb	r3, r3
 8004540:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800454a:	2b00      	cmp	r3, #0
 800454c:	d105      	bne.n	800455a <HAL_ADC_ConfigChannel+0x26a>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	0e9b      	lsrs	r3, r3, #26
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	e018      	b.n	800458c <HAL_ADC_ConfigChannel+0x29c>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004566:	fa93 f3a3 	rbit	r3, r3
 800456a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800456e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004572:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004576:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800457e:	2320      	movs	r3, #32
 8004580:	e004      	b.n	800458c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004582:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004586:	fab3 f383 	clz	r3, r3
 800458a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800458c:	429a      	cmp	r2, r3
 800458e:	d106      	bne.n	800459e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2200      	movs	r2, #0
 8004596:	2101      	movs	r1, #1
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff f9c1 	bl	8003920 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2102      	movs	r1, #2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff f9a5 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <HAL_ADC_ConfigChannel+0x2da>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2102      	movs	r1, #2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff f99a 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 80045c0:	4603      	mov	r3, r0
 80045c2:	0e9b      	lsrs	r3, r3, #26
 80045c4:	f003 021f 	and.w	r2, r3, #31
 80045c8:	e01e      	b.n	8004608 <HAL_ADC_ConfigChannel+0x318>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2102      	movs	r1, #2
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff f98f 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045e0:	fa93 f3a3 	rbit	r3, r3
 80045e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80045e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80045f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80045f8:	2320      	movs	r3, #32
 80045fa:	e004      	b.n	8004606 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80045fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004600:	fab3 f383 	clz	r3, r3
 8004604:	b2db      	uxtb	r3, r3
 8004606:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004610:	2b00      	cmp	r3, #0
 8004612:	d105      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x330>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	0e9b      	lsrs	r3, r3, #26
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	e014      	b.n	800464a <HAL_ADC_ConfigChannel+0x35a>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004626:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004628:	fa93 f3a3 	rbit	r3, r3
 800462c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800462e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004630:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004634:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800463c:	2320      	movs	r3, #32
 800463e:	e004      	b.n	800464a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004640:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004644:	fab3 f383 	clz	r3, r3
 8004648:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800464a:	429a      	cmp	r2, r3
 800464c:	d106      	bne.n	800465c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2200      	movs	r2, #0
 8004654:	2102      	movs	r1, #2
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff f962 	bl	8003920 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2103      	movs	r1, #3
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff f946 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 8004668:	4603      	mov	r3, r0
 800466a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x398>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2103      	movs	r1, #3
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff f93b 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 800467e:	4603      	mov	r3, r0
 8004680:	0e9b      	lsrs	r3, r3, #26
 8004682:	f003 021f 	and.w	r2, r3, #31
 8004686:	e017      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x3c8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2103      	movs	r1, #3
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff f930 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 8004694:	4603      	mov	r3, r0
 8004696:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80046a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80046a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80046aa:	2320      	movs	r3, #32
 80046ac:	e003      	b.n	80046b6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80046ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b0:	fab3 f383 	clz	r3, r3
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x3e0>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	0e9b      	lsrs	r3, r3, #26
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	e011      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x404>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046d8:	fa93 f3a3 	rbit	r3, r3
 80046dc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80046de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046e0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80046e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80046e8:	2320      	movs	r3, #32
 80046ea:	e003      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80046ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046ee:	fab3 f383 	clz	r3, r3
 80046f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d106      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2200      	movs	r2, #0
 80046fe:	2103      	movs	r1, #3
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff f90d 	bl	8003920 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fa44 	bl	8003b98 <LL_ADC_IsEnabled>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	f040 8140 	bne.w	8004998 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	6819      	ldr	r1, [r3, #0]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	461a      	mov	r2, r3
 8004726:	f7ff f981 	bl	8003a2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	4a8f      	ldr	r2, [pc, #572]	; (800496c <HAL_ADC_ConfigChannel+0x67c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	f040 8131 	bne.w	8004998 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10b      	bne.n	800475e <HAL_ADC_ConfigChannel+0x46e>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	0e9b      	lsrs	r3, r3, #26
 800474c:	3301      	adds	r3, #1
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2b09      	cmp	r3, #9
 8004754:	bf94      	ite	ls
 8004756:	2301      	movls	r3, #1
 8004758:	2300      	movhi	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	e019      	b.n	8004792 <HAL_ADC_ConfigChannel+0x4a2>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004764:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004766:	fa93 f3a3 	rbit	r3, r3
 800476a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800476c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800476e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004776:	2320      	movs	r3, #32
 8004778:	e003      	b.n	8004782 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800477a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800477c:	fab3 f383 	clz	r3, r3
 8004780:	b2db      	uxtb	r3, r3
 8004782:	3301      	adds	r3, #1
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	2b09      	cmp	r3, #9
 800478a:	bf94      	ite	ls
 800478c:	2301      	movls	r3, #1
 800478e:	2300      	movhi	r3, #0
 8004790:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004792:	2b00      	cmp	r3, #0
 8004794:	d079      	beq.n	800488a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d107      	bne.n	80047b2 <HAL_ADC_ConfigChannel+0x4c2>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	0e9b      	lsrs	r3, r3, #26
 80047a8:	3301      	adds	r3, #1
 80047aa:	069b      	lsls	r3, r3, #26
 80047ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047b0:	e015      	b.n	80047de <HAL_ADC_ConfigChannel+0x4ee>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ba:	fa93 f3a3 	rbit	r3, r3
 80047be:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80047c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80047c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80047ca:	2320      	movs	r3, #32
 80047cc:	e003      	b.n	80047d6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80047ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d0:	fab3 f383 	clz	r3, r3
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	3301      	adds	r3, #1
 80047d8:	069b      	lsls	r3, r3, #26
 80047da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x50e>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	0e9b      	lsrs	r3, r3, #26
 80047f0:	3301      	adds	r3, #1
 80047f2:	f003 031f 	and.w	r3, r3, #31
 80047f6:	2101      	movs	r1, #1
 80047f8:	fa01 f303 	lsl.w	r3, r1, r3
 80047fc:	e017      	b.n	800482e <HAL_ADC_ConfigChannel+0x53e>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004806:	fa93 f3a3 	rbit	r3, r3
 800480a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800480c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004816:	2320      	movs	r3, #32
 8004818:	e003      	b.n	8004822 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800481a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800481c:	fab3 f383 	clz	r3, r3
 8004820:	b2db      	uxtb	r3, r3
 8004822:	3301      	adds	r3, #1
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	2101      	movs	r1, #1
 800482a:	fa01 f303 	lsl.w	r3, r1, r3
 800482e:	ea42 0103 	orr.w	r1, r2, r3
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10a      	bne.n	8004854 <HAL_ADC_ConfigChannel+0x564>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	0e9b      	lsrs	r3, r3, #26
 8004844:	3301      	adds	r3, #1
 8004846:	f003 021f 	and.w	r2, r3, #31
 800484a:	4613      	mov	r3, r2
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	4413      	add	r3, r2
 8004850:	051b      	lsls	r3, r3, #20
 8004852:	e018      	b.n	8004886 <HAL_ADC_ConfigChannel+0x596>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800486c:	2320      	movs	r3, #32
 800486e:	e003      	b.n	8004878 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004872:	fab3 f383 	clz	r3, r3
 8004876:	b2db      	uxtb	r3, r3
 8004878:	3301      	adds	r3, #1
 800487a:	f003 021f 	and.w	r2, r3, #31
 800487e:	4613      	mov	r3, r2
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	4413      	add	r3, r2
 8004884:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004886:	430b      	orrs	r3, r1
 8004888:	e081      	b.n	800498e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004892:	2b00      	cmp	r3, #0
 8004894:	d107      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x5b6>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	0e9b      	lsrs	r3, r3, #26
 800489c:	3301      	adds	r3, #1
 800489e:	069b      	lsls	r3, r3, #26
 80048a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048a4:	e015      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x5e2>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	fa93 f3a3 	rbit	r3, r3
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80048b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80048be:	2320      	movs	r3, #32
 80048c0:	e003      	b.n	80048ca <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	fab3 f383 	clz	r3, r3
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	3301      	adds	r3, #1
 80048cc:	069b      	lsls	r3, r3, #26
 80048ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d109      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x602>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	0e9b      	lsrs	r3, r3, #26
 80048e4:	3301      	adds	r3, #1
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	2101      	movs	r1, #1
 80048ec:	fa01 f303 	lsl.w	r3, r1, r3
 80048f0:	e017      	b.n	8004922 <HAL_ADC_ConfigChannel+0x632>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	61bb      	str	r3, [r7, #24]
  return result;
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800490a:	2320      	movs	r3, #32
 800490c:	e003      	b.n	8004916 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	fab3 f383 	clz	r3, r3
 8004914:	b2db      	uxtb	r3, r3
 8004916:	3301      	adds	r3, #1
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	2101      	movs	r1, #1
 800491e:	fa01 f303 	lsl.w	r3, r1, r3
 8004922:	ea42 0103 	orr.w	r1, r2, r3
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10d      	bne.n	800494e <HAL_ADC_ConfigChannel+0x65e>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	0e9b      	lsrs	r3, r3, #26
 8004938:	3301      	adds	r3, #1
 800493a:	f003 021f 	and.w	r2, r3, #31
 800493e:	4613      	mov	r3, r2
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	4413      	add	r3, r2
 8004944:	3b1e      	subs	r3, #30
 8004946:	051b      	lsls	r3, r3, #20
 8004948:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800494c:	e01e      	b.n	800498c <HAL_ADC_ConfigChannel+0x69c>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	fa93 f3a3 	rbit	r3, r3
 800495a:	60fb      	str	r3, [r7, #12]
  return result;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004966:	2320      	movs	r3, #32
 8004968:	e006      	b.n	8004978 <HAL_ADC_ConfigChannel+0x688>
 800496a:	bf00      	nop
 800496c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	3301      	adds	r3, #1
 800497a:	f003 021f 	and.w	r2, r3, #31
 800497e:	4613      	mov	r3, r2
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	4413      	add	r3, r2
 8004984:	3b1e      	subs	r3, #30
 8004986:	051b      	lsls	r3, r3, #20
 8004988:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800498c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004992:	4619      	mov	r1, r3
 8004994:	f7ff f81e 	bl	80039d4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4b44      	ldr	r3, [pc, #272]	; (8004ab0 <HAL_ADC_ConfigChannel+0x7c0>)
 800499e:	4013      	ands	r3, r2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d07a      	beq.n	8004a9a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049a4:	4843      	ldr	r0, [pc, #268]	; (8004ab4 <HAL_ADC_ConfigChannel+0x7c4>)
 80049a6:	f7fe ff73 	bl	8003890 <LL_ADC_GetCommonPathInternalCh>
 80049aa:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a41      	ldr	r2, [pc, #260]	; (8004ab8 <HAL_ADC_ConfigChannel+0x7c8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d12c      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d126      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a3c      	ldr	r2, [pc, #240]	; (8004abc <HAL_ADC_ConfigChannel+0x7cc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d004      	beq.n	80049d8 <HAL_ADC_ConfigChannel+0x6e8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a3b      	ldr	r2, [pc, #236]	; (8004ac0 <HAL_ADC_ConfigChannel+0x7d0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d15d      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049e0:	4619      	mov	r1, r3
 80049e2:	4834      	ldr	r0, [pc, #208]	; (8004ab4 <HAL_ADC_ConfigChannel+0x7c4>)
 80049e4:	f7fe ff41 	bl	800386a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049e8:	4b36      	ldr	r3, [pc, #216]	; (8004ac4 <HAL_ADC_ConfigChannel+0x7d4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	099b      	lsrs	r3, r3, #6
 80049ee:	4a36      	ldr	r2, [pc, #216]	; (8004ac8 <HAL_ADC_ConfigChannel+0x7d8>)
 80049f0:	fba2 2303 	umull	r2, r3, r2, r3
 80049f4:	099b      	lsrs	r3, r3, #6
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	4613      	mov	r3, r2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004a02:	e002      	b.n	8004a0a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f9      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a10:	e040      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a2d      	ldr	r2, [pc, #180]	; (8004acc <HAL_ADC_ConfigChannel+0x7dc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d118      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d112      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a23      	ldr	r2, [pc, #140]	; (8004abc <HAL_ADC_ConfigChannel+0x7cc>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d004      	beq.n	8004a3c <HAL_ADC_ConfigChannel+0x74c>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a22      	ldr	r2, [pc, #136]	; (8004ac0 <HAL_ADC_ConfigChannel+0x7d0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d12d      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a44:	4619      	mov	r1, r3
 8004a46:	481b      	ldr	r0, [pc, #108]	; (8004ab4 <HAL_ADC_ConfigChannel+0x7c4>)
 8004a48:	f7fe ff0f 	bl	800386a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a4c:	e024      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <HAL_ADC_ConfigChannel+0x7e0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d120      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d11a      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a14      	ldr	r2, [pc, #80]	; (8004abc <HAL_ADC_ConfigChannel+0x7cc>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d115      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a76:	4619      	mov	r1, r3
 8004a78:	480e      	ldr	r0, [pc, #56]	; (8004ab4 <HAL_ADC_ConfigChannel+0x7c4>)
 8004a7a:	f7fe fef6 	bl	800386a <LL_ADC_SetCommonPathInternalCh>
 8004a7e:	e00c      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a84:	f043 0220 	orr.w	r2, r3, #32
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004a92:	e002      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a94:	bf00      	nop
 8004a96:	e000      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004aa2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	37d8      	adds	r7, #216	; 0xd8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	80080000 	.word	0x80080000
 8004ab4:	50040300 	.word	0x50040300
 8004ab8:	c7520000 	.word	0xc7520000
 8004abc:	50040000 	.word	0x50040000
 8004ac0:	50040200 	.word	0x50040200
 8004ac4:	200000c8 	.word	0x200000c8
 8004ac8:	053e2d63 	.word	0x053e2d63
 8004acc:	cb840000 	.word	0xcb840000
 8004ad0:	80000001 	.word	0x80000001

08004ad4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff f8a2 	bl	8003c34 <LL_ADC_REG_IsConversionOngoing>
 8004af0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff f8c3 	bl	8003c82 <LL_ADC_INJ_IsConversionOngoing>
 8004afc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d103      	bne.n	8004b0c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8098 	beq.w	8004c3c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d02a      	beq.n	8004b70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	7e5b      	ldrb	r3, [r3, #25]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d126      	bne.n	8004b70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	7e1b      	ldrb	r3, [r3, #24]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d122      	bne.n	8004b70 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004b2e:	e014      	b.n	8004b5a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4a45      	ldr	r2, [pc, #276]	; (8004c48 <ADC_ConversionStop+0x174>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d90d      	bls.n	8004b54 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3c:	f043 0210 	orr.w	r2, r3, #16
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b48:	f043 0201 	orr.w	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e074      	b.n	8004c3e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	3301      	adds	r3, #1
 8004b58:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b40      	cmp	r3, #64	; 0x40
 8004b66:	d1e3      	bne.n	8004b30 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2240      	movs	r2, #64	; 0x40
 8004b6e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d014      	beq.n	8004ba0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff f85a 	bl	8003c34 <LL_ADC_REG_IsConversionOngoing>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00c      	beq.n	8004ba0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff f817 	bl	8003bbe <LL_ADC_IsDisableOngoing>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d104      	bne.n	8004ba0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff f836 	bl	8003c0c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d014      	beq.n	8004bd0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff f869 	bl	8003c82 <LL_ADC_INJ_IsConversionOngoing>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe ffff 	bl	8003bbe <LL_ADC_IsDisableOngoing>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d104      	bne.n	8004bd0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff f845 	bl	8003c5a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d005      	beq.n	8004be2 <ADC_ConversionStop+0x10e>
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d105      	bne.n	8004be8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004bdc:	230c      	movs	r3, #12
 8004bde:	617b      	str	r3, [r7, #20]
        break;
 8004be0:	e005      	b.n	8004bee <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004be2:	2308      	movs	r3, #8
 8004be4:	617b      	str	r3, [r7, #20]
        break;
 8004be6:	e002      	b.n	8004bee <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004be8:	2304      	movs	r3, #4
 8004bea:	617b      	str	r3, [r7, #20]
        break;
 8004bec:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004bee:	f7fe fdf9 	bl	80037e4 <HAL_GetTick>
 8004bf2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004bf4:	e01b      	b.n	8004c2e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004bf6:	f7fe fdf5 	bl	80037e4 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b05      	cmp	r3, #5
 8004c02:	d914      	bls.n	8004c2e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00d      	beq.n	8004c2e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	f043 0210 	orr.w	r2, r3, #16
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c22:	f043 0201 	orr.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e007      	b.n	8004c3e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1dc      	bne.n	8004bf6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3720      	adds	r7, #32
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	a33fffff 	.word	0xa33fffff

08004c4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fe ff9b 	bl	8003b98 <LL_ADC_IsEnabled>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d169      	bne.n	8004d3c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	4b36      	ldr	r3, [pc, #216]	; (8004d48 <ADC_Enable+0xfc>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00d      	beq.n	8004c92 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	f043 0210 	orr.w	r2, r3, #16
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c86:	f043 0201 	orr.w	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e055      	b.n	8004d3e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe ff56 	bl	8003b48 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004c9c:	482b      	ldr	r0, [pc, #172]	; (8004d4c <ADC_Enable+0x100>)
 8004c9e:	f7fe fdf7 	bl	8003890 <LL_ADC_GetCommonPathInternalCh>
 8004ca2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d013      	beq.n	8004cd4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cac:	4b28      	ldr	r3, [pc, #160]	; (8004d50 <ADC_Enable+0x104>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	099b      	lsrs	r3, r3, #6
 8004cb2:	4a28      	ldr	r2, [pc, #160]	; (8004d54 <ADC_Enable+0x108>)
 8004cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb8:	099b      	lsrs	r3, r3, #6
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004cc6:	e002      	b.n	8004cce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1f9      	bne.n	8004cc8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004cd4:	f7fe fd86 	bl	80037e4 <HAL_GetTick>
 8004cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cda:	e028      	b.n	8004d2e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe ff59 	bl	8003b98 <LL_ADC_IsEnabled>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d104      	bne.n	8004cf6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fe ff29 	bl	8003b48 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004cf6:	f7fe fd75 	bl	80037e4 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d914      	bls.n	8004d2e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d00d      	beq.n	8004d2e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d16:	f043 0210 	orr.w	r2, r3, #16
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d22:	f043 0201 	orr.w	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e007      	b.n	8004d3e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d1cf      	bne.n	8004cdc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	8000003f 	.word	0x8000003f
 8004d4c:	50040300 	.word	0x50040300
 8004d50:	200000c8 	.word	0x200000c8
 8004d54:	053e2d63 	.word	0x053e2d63

08004d58 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fe ff2a 	bl	8003bbe <LL_ADC_IsDisableOngoing>
 8004d6a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fe ff11 	bl	8003b98 <LL_ADC_IsEnabled>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d047      	beq.n	8004e0c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d144      	bne.n	8004e0c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 030d 	and.w	r3, r3, #13
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d10c      	bne.n	8004daa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fe feeb 	bl	8003b70 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2203      	movs	r2, #3
 8004da0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004da2:	f7fe fd1f 	bl	80037e4 <HAL_GetTick>
 8004da6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004da8:	e029      	b.n	8004dfe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	f043 0210 	orr.w	r2, r3, #16
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dba:	f043 0201 	orr.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e023      	b.n	8004e0e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004dc6:	f7fe fd0d 	bl	80037e4 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d914      	bls.n	8004dfe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00d      	beq.n	8004dfe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	f043 0210 	orr.w	r2, r3, #16
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df2:	f043 0201 	orr.w	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e007      	b.n	8004e0e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1dc      	bne.n	8004dc6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <LL_ADC_IsEnabled>:
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <LL_ADC_IsEnabled+0x18>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <LL_ADC_IsEnabled+0x1a>
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <LL_ADC_REG_IsConversionOngoing>:
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d101      	bne.n	8004e54 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
	...

08004e64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004e64:	b590      	push	{r4, r7, lr}
 8004e66:	b09f      	sub	sp, #124	; 0x7c
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e093      	b.n	8004faa <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004e8e:	2300      	movs	r3, #0
 8004e90:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a47      	ldr	r2, [pc, #284]	; (8004fb4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d102      	bne.n	8004ea2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e9c:	4b46      	ldr	r3, [pc, #280]	; (8004fb8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004e9e:	60bb      	str	r3, [r7, #8]
 8004ea0:	e001      	b.n	8004ea6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10b      	bne.n	8004ec4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb0:	f043 0220 	orr.w	r2, r3, #32
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e072      	b.n	8004faa <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff ffb8 	bl	8004e3c <LL_ADC_REG_IsConversionOngoing>
 8004ecc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff ffb2 	bl	8004e3c <LL_ADC_REG_IsConversionOngoing>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d154      	bne.n	8004f88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d151      	bne.n	8004f88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ee4:	4b35      	ldr	r3, [pc, #212]	; (8004fbc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004ee6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d02c      	beq.n	8004f4a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	6859      	ldr	r1, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f02:	035b      	lsls	r3, r3, #13
 8004f04:	430b      	orrs	r3, r1
 8004f06:	431a      	orrs	r2, r3
 8004f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f0a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f0c:	4829      	ldr	r0, [pc, #164]	; (8004fb4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004f0e:	f7ff ff82 	bl	8004e16 <LL_ADC_IsEnabled>
 8004f12:	4604      	mov	r4, r0
 8004f14:	4828      	ldr	r0, [pc, #160]	; (8004fb8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004f16:	f7ff ff7e 	bl	8004e16 <LL_ADC_IsEnabled>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	431c      	orrs	r4, r3
 8004f1e:	4828      	ldr	r0, [pc, #160]	; (8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004f20:	f7ff ff79 	bl	8004e16 <LL_ADC_IsEnabled>
 8004f24:	4603      	mov	r3, r0
 8004f26:	4323      	orrs	r3, r4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d137      	bne.n	8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f34:	f023 030f 	bic.w	r3, r3, #15
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	6811      	ldr	r1, [r2, #0]
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	6892      	ldr	r2, [r2, #8]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	431a      	orrs	r2, r3
 8004f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f46:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f48:	e028      	b.n	8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f54:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f56:	4817      	ldr	r0, [pc, #92]	; (8004fb4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004f58:	f7ff ff5d 	bl	8004e16 <LL_ADC_IsEnabled>
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	4816      	ldr	r0, [pc, #88]	; (8004fb8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004f60:	f7ff ff59 	bl	8004e16 <LL_ADC_IsEnabled>
 8004f64:	4603      	mov	r3, r0
 8004f66:	431c      	orrs	r4, r3
 8004f68:	4815      	ldr	r0, [pc, #84]	; (8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004f6a:	f7ff ff54 	bl	8004e16 <LL_ADC_IsEnabled>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4323      	orrs	r3, r4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d112      	bne.n	8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f7e:	f023 030f 	bic.w	r3, r3, #15
 8004f82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f84:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f86:	e009      	b.n	8004f9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8c:	f043 0220 	orr.w	r2, r3, #32
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004f9a:	e000      	b.n	8004f9e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004fa6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	377c      	adds	r7, #124	; 0x7c
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd90      	pop	{r4, r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	50040000 	.word	0x50040000
 8004fb8:	50040100 	.word	0x50040100
 8004fbc:	50040300 	.word	0x50040300
 8004fc0:	50040200 	.word	0x50040200

08004fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fd4:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <__NVIC_SetPriorityGrouping+0x44>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ff6:	4a04      	ldr	r2, [pc, #16]	; (8005008 <__NVIC_SetPriorityGrouping+0x44>)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	60d3      	str	r3, [r2, #12]
}
 8004ffc:	bf00      	nop
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	e000ed00 	.word	0xe000ed00

0800500c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005010:	4b04      	ldr	r3, [pc, #16]	; (8005024 <__NVIC_GetPriorityGrouping+0x18>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	0a1b      	lsrs	r3, r3, #8
 8005016:	f003 0307 	and.w	r3, r3, #7
}
 800501a:	4618      	mov	r0, r3
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	e000ed00 	.word	0xe000ed00

08005028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005036:	2b00      	cmp	r3, #0
 8005038:	db0b      	blt.n	8005052 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	f003 021f 	and.w	r2, r3, #31
 8005040:	4907      	ldr	r1, [pc, #28]	; (8005060 <__NVIC_EnableIRQ+0x38>)
 8005042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	2001      	movs	r0, #1
 800504a:	fa00 f202 	lsl.w	r2, r0, r2
 800504e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	e000e100 	.word	0xe000e100

08005064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	6039      	str	r1, [r7, #0]
 800506e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005074:	2b00      	cmp	r3, #0
 8005076:	db0a      	blt.n	800508e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	b2da      	uxtb	r2, r3
 800507c:	490c      	ldr	r1, [pc, #48]	; (80050b0 <__NVIC_SetPriority+0x4c>)
 800507e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005082:	0112      	lsls	r2, r2, #4
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	440b      	add	r3, r1
 8005088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800508c:	e00a      	b.n	80050a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	b2da      	uxtb	r2, r3
 8005092:	4908      	ldr	r1, [pc, #32]	; (80050b4 <__NVIC_SetPriority+0x50>)
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	3b04      	subs	r3, #4
 800509c:	0112      	lsls	r2, r2, #4
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	440b      	add	r3, r1
 80050a2:	761a      	strb	r2, [r3, #24]
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	e000e100 	.word	0xe000e100
 80050b4:	e000ed00 	.word	0xe000ed00

080050b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b089      	sub	sp, #36	; 0x24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f1c3 0307 	rsb	r3, r3, #7
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	bf28      	it	cs
 80050d6:	2304      	movcs	r3, #4
 80050d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	3304      	adds	r3, #4
 80050de:	2b06      	cmp	r3, #6
 80050e0:	d902      	bls.n	80050e8 <NVIC_EncodePriority+0x30>
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	3b03      	subs	r3, #3
 80050e6:	e000      	b.n	80050ea <NVIC_EncodePriority+0x32>
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050ec:	f04f 32ff 	mov.w	r2, #4294967295
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	43da      	mvns	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	401a      	ands	r2, r3
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005100:	f04f 31ff 	mov.w	r1, #4294967295
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	fa01 f303 	lsl.w	r3, r1, r3
 800510a:	43d9      	mvns	r1, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005110:	4313      	orrs	r3, r2
         );
}
 8005112:	4618      	mov	r0, r3
 8005114:	3724      	adds	r7, #36	; 0x24
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff ff4c 	bl	8004fc4 <__NVIC_SetPriorityGrouping>
}
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005146:	f7ff ff61 	bl	800500c <__NVIC_GetPriorityGrouping>
 800514a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	6978      	ldr	r0, [r7, #20]
 8005152:	f7ff ffb1 	bl	80050b8 <NVIC_EncodePriority>
 8005156:	4602      	mov	r2, r0
 8005158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff ff80 	bl	8005064 <__NVIC_SetPriority>
}
 8005164:	bf00      	nop
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff ff54 	bl	8005028 <__NVIC_EnableIRQ>
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e098      	b.n	80052cc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	4b4d      	ldr	r3, [pc, #308]	; (80052d8 <HAL_DMA_Init+0x150>)
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d80f      	bhi.n	80051c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	4b4b      	ldr	r3, [pc, #300]	; (80052dc <HAL_DMA_Init+0x154>)
 80051ae:	4413      	add	r3, r2
 80051b0:	4a4b      	ldr	r2, [pc, #300]	; (80052e0 <HAL_DMA_Init+0x158>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	091b      	lsrs	r3, r3, #4
 80051b8:	009a      	lsls	r2, r3, #2
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a48      	ldr	r2, [pc, #288]	; (80052e4 <HAL_DMA_Init+0x15c>)
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40
 80051c4:	e00e      	b.n	80051e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	4b46      	ldr	r3, [pc, #280]	; (80052e8 <HAL_DMA_Init+0x160>)
 80051ce:	4413      	add	r3, r2
 80051d0:	4a43      	ldr	r2, [pc, #268]	; (80052e0 <HAL_DMA_Init+0x158>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	091b      	lsrs	r3, r3, #4
 80051d8:	009a      	lsls	r2, r3, #2
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a42      	ldr	r2, [pc, #264]	; (80052ec <HAL_DMA_Init+0x164>)
 80051e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800523e:	d039      	beq.n	80052b4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	4a27      	ldr	r2, [pc, #156]	; (80052e4 <HAL_DMA_Init+0x15c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d11a      	bne.n	8005280 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800524a:	4b29      	ldr	r3, [pc, #164]	; (80052f0 <HAL_DMA_Init+0x168>)
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	f003 031c 	and.w	r3, r3, #28
 8005256:	210f      	movs	r1, #15
 8005258:	fa01 f303 	lsl.w	r3, r1, r3
 800525c:	43db      	mvns	r3, r3
 800525e:	4924      	ldr	r1, [pc, #144]	; (80052f0 <HAL_DMA_Init+0x168>)
 8005260:	4013      	ands	r3, r2
 8005262:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005264:	4b22      	ldr	r3, [pc, #136]	; (80052f0 <HAL_DMA_Init+0x168>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6859      	ldr	r1, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005270:	f003 031c 	and.w	r3, r3, #28
 8005274:	fa01 f303 	lsl.w	r3, r1, r3
 8005278:	491d      	ldr	r1, [pc, #116]	; (80052f0 <HAL_DMA_Init+0x168>)
 800527a:	4313      	orrs	r3, r2
 800527c:	600b      	str	r3, [r1, #0]
 800527e:	e019      	b.n	80052b4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005280:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <HAL_DMA_Init+0x16c>)
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005288:	f003 031c 	and.w	r3, r3, #28
 800528c:	210f      	movs	r1, #15
 800528e:	fa01 f303 	lsl.w	r3, r1, r3
 8005292:	43db      	mvns	r3, r3
 8005294:	4917      	ldr	r1, [pc, #92]	; (80052f4 <HAL_DMA_Init+0x16c>)
 8005296:	4013      	ands	r3, r2
 8005298:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800529a:	4b16      	ldr	r3, [pc, #88]	; (80052f4 <HAL_DMA_Init+0x16c>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6859      	ldr	r1, [r3, #4]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a6:	f003 031c 	and.w	r3, r3, #28
 80052aa:	fa01 f303 	lsl.w	r3, r1, r3
 80052ae:	4911      	ldr	r1, [pc, #68]	; (80052f4 <HAL_DMA_Init+0x16c>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	40020407 	.word	0x40020407
 80052dc:	bffdfff8 	.word	0xbffdfff8
 80052e0:	cccccccd 	.word	0xcccccccd
 80052e4:	40020000 	.word	0x40020000
 80052e8:	bffdfbf8 	.word	0xbffdfbf8
 80052ec:	40020400 	.word	0x40020400
 80052f0:	400200a8 	.word	0x400200a8
 80052f4:	400204a8 	.word	0x400204a8

080052f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_DMA_Start_IT+0x20>
 8005314:	2302      	movs	r3, #2
 8005316:	e04b      	b.n	80053b0 <HAL_DMA_Start_IT+0xb8>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	d13a      	bne.n	80053a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0201 	bic.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f95f 	bl	8005614 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	2b00      	cmp	r3, #0
 800535c:	d008      	beq.n	8005370 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 020e 	orr.w	r2, r2, #14
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	e00f      	b.n	8005390 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0204 	bic.w	r2, r2, #4
 800537e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 020a 	orr.w	r2, r2, #10
 800538e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	e005      	b.n	80053ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80053aa:	2302      	movs	r3, #2
 80053ac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80053ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d008      	beq.n	80053e2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2204      	movs	r2, #4
 80053d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e022      	b.n	8005428 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 020e 	bic.w	r2, r2, #14
 80053f0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0201 	bic.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005406:	f003 021c 	and.w	r2, r3, #28
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	2101      	movs	r1, #1
 8005410:	fa01 f202 	lsl.w	r2, r1, r2
 8005414:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005426:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d005      	beq.n	8005458 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2204      	movs	r2, #4
 8005450:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	73fb      	strb	r3, [r7, #15]
 8005456:	e029      	b.n	80054ac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 020e 	bic.w	r2, r2, #14
 8005466:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0201 	bic.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547c:	f003 021c 	and.w	r2, r3, #28
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	2101      	movs	r1, #1
 8005486:	fa01 f202 	lsl.w	r2, r1, r2
 800548a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	4798      	blx	r3
    }
  }
  return status;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	f003 031c 	and.w	r3, r3, #28
 80054d6:	2204      	movs	r2, #4
 80054d8:	409a      	lsls	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4013      	ands	r3, r2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d026      	beq.n	8005530 <HAL_DMA_IRQHandler+0x7a>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d021      	beq.n	8005530 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d107      	bne.n	800550a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0204 	bic.w	r2, r2, #4
 8005508:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550e:	f003 021c 	and.w	r2, r3, #28
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	2104      	movs	r1, #4
 8005518:	fa01 f202 	lsl.w	r2, r1, r2
 800551c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	2b00      	cmp	r3, #0
 8005524:	d071      	beq.n	800560a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800552e:	e06c      	b.n	800560a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005534:	f003 031c 	and.w	r3, r3, #28
 8005538:	2202      	movs	r2, #2
 800553a:	409a      	lsls	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d02e      	beq.n	80055a2 <HAL_DMA_IRQHandler+0xec>
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d029      	beq.n	80055a2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10b      	bne.n	8005574 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 020a 	bic.w	r2, r2, #10
 800556a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005578:	f003 021c 	and.w	r2, r3, #28
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	2102      	movs	r1, #2
 8005582:	fa01 f202 	lsl.w	r2, r1, r2
 8005586:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d038      	beq.n	800560a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80055a0:	e033      	b.n	800560a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	f003 031c 	and.w	r3, r3, #28
 80055aa:	2208      	movs	r2, #8
 80055ac:	409a      	lsls	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d02a      	beq.n	800560c <HAL_DMA_IRQHandler+0x156>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d025      	beq.n	800560c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 020e 	bic.w	r2, r2, #14
 80055ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d4:	f003 021c 	and.w	r2, r3, #28
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	2101      	movs	r1, #1
 80055de:	fa01 f202 	lsl.w	r2, r1, r2
 80055e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d004      	beq.n	800560c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800560a:	bf00      	nop
 800560c:	bf00      	nop
}
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005626:	f003 021c 	and.w	r2, r3, #28
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	2101      	movs	r1, #1
 8005630:	fa01 f202 	lsl.w	r2, r1, r2
 8005634:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b10      	cmp	r3, #16
 8005644:	d108      	bne.n	8005658 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005656:	e007      	b.n	8005668 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	60da      	str	r2, [r3, #12]
}
 8005668:	bf00      	nop
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005682:	e17f      	b.n	8005984 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	2101      	movs	r1, #1
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	fa01 f303 	lsl.w	r3, r1, r3
 8005690:	4013      	ands	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 8171 	beq.w	800597e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f003 0303 	and.w	r3, r3, #3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d005      	beq.n	80056b4 <HAL_GPIO_Init+0x40>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f003 0303 	and.w	r3, r3, #3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d130      	bne.n	8005716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	2203      	movs	r2, #3
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	43db      	mvns	r3, r3
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4013      	ands	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056ea:	2201      	movs	r2, #1
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	43db      	mvns	r3, r3
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4013      	ands	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	091b      	lsrs	r3, r3, #4
 8005700:	f003 0201 	and.w	r2, r3, #1
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	fa02 f303 	lsl.w	r3, r2, r3
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	2b03      	cmp	r3, #3
 8005720:	d118      	bne.n	8005754 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005728:	2201      	movs	r2, #1
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	43db      	mvns	r3, r3
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4013      	ands	r3, r2
 8005736:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	08db      	lsrs	r3, r3, #3
 800573e:	f003 0201 	and.w	r2, r3, #1
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	2b03      	cmp	r3, #3
 800575e:	d017      	beq.n	8005790 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	2203      	movs	r2, #3
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	43db      	mvns	r3, r3
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4013      	ands	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d123      	bne.n	80057e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	08da      	lsrs	r2, r3, #3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3208      	adds	r2, #8
 80057a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	220f      	movs	r2, #15
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4013      	ands	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	08da      	lsrs	r2, r3, #3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3208      	adds	r2, #8
 80057de:	6939      	ldr	r1, [r7, #16]
 80057e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	2203      	movs	r2, #3
 80057f0:	fa02 f303 	lsl.w	r3, r2, r3
 80057f4:	43db      	mvns	r3, r3
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4013      	ands	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 0203 	and.w	r2, r3, #3
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 80ac 	beq.w	800597e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005826:	4b5f      	ldr	r3, [pc, #380]	; (80059a4 <HAL_GPIO_Init+0x330>)
 8005828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800582a:	4a5e      	ldr	r2, [pc, #376]	; (80059a4 <HAL_GPIO_Init+0x330>)
 800582c:	f043 0301 	orr.w	r3, r3, #1
 8005830:	6613      	str	r3, [r2, #96]	; 0x60
 8005832:	4b5c      	ldr	r3, [pc, #368]	; (80059a4 <HAL_GPIO_Init+0x330>)
 8005834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	60bb      	str	r3, [r7, #8]
 800583c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800583e:	4a5a      	ldr	r2, [pc, #360]	; (80059a8 <HAL_GPIO_Init+0x334>)
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	089b      	lsrs	r3, r3, #2
 8005844:	3302      	adds	r3, #2
 8005846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800584a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	220f      	movs	r2, #15
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43db      	mvns	r3, r3
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4013      	ands	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005868:	d025      	beq.n	80058b6 <HAL_GPIO_Init+0x242>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a4f      	ldr	r2, [pc, #316]	; (80059ac <HAL_GPIO_Init+0x338>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01f      	beq.n	80058b2 <HAL_GPIO_Init+0x23e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a4e      	ldr	r2, [pc, #312]	; (80059b0 <HAL_GPIO_Init+0x33c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d019      	beq.n	80058ae <HAL_GPIO_Init+0x23a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a4d      	ldr	r2, [pc, #308]	; (80059b4 <HAL_GPIO_Init+0x340>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d013      	beq.n	80058aa <HAL_GPIO_Init+0x236>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a4c      	ldr	r2, [pc, #304]	; (80059b8 <HAL_GPIO_Init+0x344>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00d      	beq.n	80058a6 <HAL_GPIO_Init+0x232>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a4b      	ldr	r2, [pc, #300]	; (80059bc <HAL_GPIO_Init+0x348>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d007      	beq.n	80058a2 <HAL_GPIO_Init+0x22e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a4a      	ldr	r2, [pc, #296]	; (80059c0 <HAL_GPIO_Init+0x34c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d101      	bne.n	800589e <HAL_GPIO_Init+0x22a>
 800589a:	2306      	movs	r3, #6
 800589c:	e00c      	b.n	80058b8 <HAL_GPIO_Init+0x244>
 800589e:	2307      	movs	r3, #7
 80058a0:	e00a      	b.n	80058b8 <HAL_GPIO_Init+0x244>
 80058a2:	2305      	movs	r3, #5
 80058a4:	e008      	b.n	80058b8 <HAL_GPIO_Init+0x244>
 80058a6:	2304      	movs	r3, #4
 80058a8:	e006      	b.n	80058b8 <HAL_GPIO_Init+0x244>
 80058aa:	2303      	movs	r3, #3
 80058ac:	e004      	b.n	80058b8 <HAL_GPIO_Init+0x244>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e002      	b.n	80058b8 <HAL_GPIO_Init+0x244>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <HAL_GPIO_Init+0x244>
 80058b6:	2300      	movs	r3, #0
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	f002 0203 	and.w	r2, r2, #3
 80058be:	0092      	lsls	r2, r2, #2
 80058c0:	4093      	lsls	r3, r2
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80058c8:	4937      	ldr	r1, [pc, #220]	; (80059a8 <HAL_GPIO_Init+0x334>)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	089b      	lsrs	r3, r3, #2
 80058ce:	3302      	adds	r3, #2
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058d6:	4b3b      	ldr	r3, [pc, #236]	; (80059c4 <HAL_GPIO_Init+0x350>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	43db      	mvns	r3, r3
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4013      	ands	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058fa:	4a32      	ldr	r2, [pc, #200]	; (80059c4 <HAL_GPIO_Init+0x350>)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005900:	4b30      	ldr	r3, [pc, #192]	; (80059c4 <HAL_GPIO_Init+0x350>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	43db      	mvns	r3, r3
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4013      	ands	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005924:	4a27      	ldr	r2, [pc, #156]	; (80059c4 <HAL_GPIO_Init+0x350>)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800592a:	4b26      	ldr	r3, [pc, #152]	; (80059c4 <HAL_GPIO_Init+0x350>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	43db      	mvns	r3, r3
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4013      	ands	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800594e:	4a1d      	ldr	r2, [pc, #116]	; (80059c4 <HAL_GPIO_Init+0x350>)
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005954:	4b1b      	ldr	r3, [pc, #108]	; (80059c4 <HAL_GPIO_Init+0x350>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	43db      	mvns	r3, r3
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4013      	ands	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005978:	4a12      	ldr	r2, [pc, #72]	; (80059c4 <HAL_GPIO_Init+0x350>)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	3301      	adds	r3, #1
 8005982:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	fa22 f303 	lsr.w	r3, r2, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	f47f ae78 	bne.w	8005684 <HAL_GPIO_Init+0x10>
  }
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40021000 	.word	0x40021000
 80059a8:	40010000 	.word	0x40010000
 80059ac:	48000400 	.word	0x48000400
 80059b0:	48000800 	.word	0x48000800
 80059b4:	48000c00 	.word	0x48000c00
 80059b8:	48001000 	.word	0x48001000
 80059bc:	48001400 	.word	0x48001400
 80059c0:	48001800 	.word	0x48001800
 80059c4:	40010400 	.word	0x40010400

080059c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	807b      	strh	r3, [r7, #2]
 80059d4:	4613      	mov	r3, r2
 80059d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059d8:	787b      	ldrb	r3, [r7, #1]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059de:	887a      	ldrh	r2, [r7, #2]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059e4:	e002      	b.n	80059ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059e6:	887a      	ldrh	r2, [r7, #2]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a02:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d006      	beq.n	8005a1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a0e:	4a05      	ldr	r2, [pc, #20]	; (8005a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fc fcf8 	bl	800240c <HAL_GPIO_EXTI_Callback>
  }
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	40010400 	.word	0x40010400

08005a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e08d      	b.n	8005b56 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fd fa5c 	bl	8002f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2224      	movs	r2, #36	; 0x24
 8005a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0201 	bic.w	r2, r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d107      	bne.n	8005aa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a9e:	609a      	str	r2, [r3, #8]
 8005aa0:	e006      	b.n	8005ab0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005aae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d108      	bne.n	8005aca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ac6:	605a      	str	r2, [r3, #4]
 8005ac8:	e007      	b.n	8005ada <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ad8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6812      	ldr	r2, [r2, #0]
 8005ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005afc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69d9      	ldr	r1, [r3, #28]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1a      	ldr	r2, [r3, #32]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0201 	orr.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	607a      	str	r2, [r7, #4]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	817b      	strh	r3, [r7, #10]
 8005b70:	4613      	mov	r3, r2
 8005b72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	f040 80fd 	bne.w	8005d7c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_I2C_Master_Transmit+0x30>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e0f6      	b.n	8005d7e <HAL_I2C_Master_Transmit+0x21e>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b98:	f7fd fe24 	bl	80037e4 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	2319      	movs	r3, #25
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 fce0 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e0e1      	b.n	8005d7e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2221      	movs	r2, #33	; 0x21
 8005bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2210      	movs	r2, #16
 8005bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	893a      	ldrh	r2, [r7, #8]
 8005bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2bff      	cmp	r3, #255	; 0xff
 8005bea:	d906      	bls.n	8005bfa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	22ff      	movs	r2, #255	; 0xff
 8005bf0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005bf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	e007      	b.n	8005c0a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c08:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d024      	beq.n	8005c5c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	781a      	ldrb	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	3301      	adds	r3, #1
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	8979      	ldrh	r1, [r7, #10]
 8005c4e:	4b4e      	ldr	r3, [pc, #312]	; (8005d88 <HAL_I2C_Master_Transmit+0x228>)
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 fedb 	bl	8006a10 <I2C_TransferConfig>
 8005c5a:	e066      	b.n	8005d2a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	8979      	ldrh	r1, [r7, #10]
 8005c64:	4b48      	ldr	r3, [pc, #288]	; (8005d88 <HAL_I2C_Master_Transmit+0x228>)
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fed0 	bl	8006a10 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005c70:	e05b      	b.n	8005d2a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	6a39      	ldr	r1, [r7, #32]
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 fcd3 	bl	8006622 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e07b      	b.n	8005d7e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	781a      	ldrb	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d034      	beq.n	8005d2a <HAL_I2C_Master_Transmit+0x1ca>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d130      	bne.n	8005d2a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2180      	movs	r1, #128	; 0x80
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 fc4c 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e04d      	b.n	8005d7e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2bff      	cmp	r3, #255	; 0xff
 8005cea:	d90e      	bls.n	8005d0a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	22ff      	movs	r2, #255	; 0xff
 8005cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	8979      	ldrh	r1, [r7, #10]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 fe84 	bl	8006a10 <I2C_TransferConfig>
 8005d08:	e00f      	b.n	8005d2a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	8979      	ldrh	r1, [r7, #10]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 fe73 	bl	8006a10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d19e      	bne.n	8005c72 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	6a39      	ldr	r1, [r7, #32]
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 fcb9 	bl	80066b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e01a      	b.n	8005d7e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6859      	ldr	r1, [r3, #4]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <HAL_I2C_Master_Transmit+0x22c>)
 8005d5c:	400b      	ands	r3, r1
 8005d5e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	e000      	b.n	8005d7e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005d7c:	2302      	movs	r3, #2
  }
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	80002000 	.word	0x80002000
 8005d8c:	fe00e800 	.word	0xfe00e800

08005d90 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	607a      	str	r2, [r7, #4]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	817b      	strh	r3, [r7, #10]
 8005da0:	4613      	mov	r3, r2
 8005da2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	f040 80db 	bne.w	8005f68 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_I2C_Master_Receive+0x30>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e0d4      	b.n	8005f6a <HAL_I2C_Master_Receive+0x1da>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dc8:	f7fd fd0c 	bl	80037e4 <HAL_GetTick>
 8005dcc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	2319      	movs	r3, #25
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 fbc8 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e0bf      	b.n	8005f6a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2222      	movs	r2, #34	; 0x22
 8005dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2210      	movs	r2, #16
 8005df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	893a      	ldrh	r2, [r7, #8]
 8005e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2bff      	cmp	r3, #255	; 0xff
 8005e1a:	d90e      	bls.n	8005e3a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	8979      	ldrh	r1, [r7, #10]
 8005e2a:	4b52      	ldr	r3, [pc, #328]	; (8005f74 <HAL_I2C_Master_Receive+0x1e4>)
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 fdec 	bl	8006a10 <I2C_TransferConfig>
 8005e38:	e06d      	b.n	8005f16 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	8979      	ldrh	r1, [r7, #10]
 8005e4c:	4b49      	ldr	r3, [pc, #292]	; (8005f74 <HAL_I2C_Master_Receive+0x1e4>)
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fddb 	bl	8006a10 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005e5a:	e05c      	b.n	8005f16 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	6a39      	ldr	r1, [r7, #32]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 fc69 	bl	8006738 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e07c      	b.n	8005f6a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d034      	beq.n	8005f16 <HAL_I2C_Master_Receive+0x186>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d130      	bne.n	8005f16 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2180      	movs	r1, #128	; 0x80
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 fb56 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e04d      	b.n	8005f6a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2bff      	cmp	r3, #255	; 0xff
 8005ed6:	d90e      	bls.n	8005ef6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	22ff      	movs	r2, #255	; 0xff
 8005edc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	8979      	ldrh	r1, [r7, #10]
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 fd8e 	bl	8006a10 <I2C_TransferConfig>
 8005ef4:	e00f      	b.n	8005f16 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	8979      	ldrh	r1, [r7, #10]
 8005f08:	2300      	movs	r3, #0
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 fd7d 	bl	8006a10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d19d      	bne.n	8005e5c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	6a39      	ldr	r1, [r7, #32]
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 fbc3 	bl	80066b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e01a      	b.n	8005f6a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6859      	ldr	r1, [r3, #4]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <HAL_I2C_Master_Receive+0x1e8>)
 8005f48:	400b      	ands	r3, r1
 8005f4a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	e000      	b.n	8005f6a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005f68:	2302      	movs	r3, #2
  }
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	80002400 	.word	0x80002400
 8005f78:	fe00e800 	.word	0xfe00e800

08005f7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	4608      	mov	r0, r1
 8005f86:	4611      	mov	r1, r2
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	817b      	strh	r3, [r7, #10]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	813b      	strh	r3, [r7, #8]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	f040 80f9 	bne.w	8006196 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <HAL_I2C_Mem_Write+0x34>
 8005faa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d105      	bne.n	8005fbc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e0ed      	b.n	8006198 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <HAL_I2C_Mem_Write+0x4e>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e0e6      	b.n	8006198 <HAL_I2C_Mem_Write+0x21c>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fd2:	f7fd fc07 	bl	80037e4 <HAL_GetTick>
 8005fd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	2319      	movs	r3, #25
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fac3 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e0d1      	b.n	8006198 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2221      	movs	r2, #33	; 0x21
 8005ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2240      	movs	r2, #64	; 0x40
 8006000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6a3a      	ldr	r2, [r7, #32]
 800600e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006014:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800601c:	88f8      	ldrh	r0, [r7, #6]
 800601e:	893a      	ldrh	r2, [r7, #8]
 8006020:	8979      	ldrh	r1, [r7, #10]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	9301      	str	r3, [sp, #4]
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	4603      	mov	r3, r0
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f9d3 	bl	80063d8 <I2C_RequestMemoryWrite>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d005      	beq.n	8006044 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e0a9      	b.n	8006198 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006048:	b29b      	uxth	r3, r3
 800604a:	2bff      	cmp	r3, #255	; 0xff
 800604c:	d90e      	bls.n	800606c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	22ff      	movs	r2, #255	; 0xff
 8006052:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006058:	b2da      	uxtb	r2, r3
 800605a:	8979      	ldrh	r1, [r7, #10]
 800605c:	2300      	movs	r3, #0
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fcd3 	bl	8006a10 <I2C_TransferConfig>
 800606a:	e00f      	b.n	800608c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607a:	b2da      	uxtb	r2, r3
 800607c:	8979      	ldrh	r1, [r7, #10]
 800607e:	2300      	movs	r3, #0
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fcc2 	bl	8006a10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 fac6 	bl	8006622 <I2C_WaitOnTXISFlagUntilTimeout>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e07b      	b.n	8006198 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	781a      	ldrb	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d034      	beq.n	8006144 <HAL_I2C_Mem_Write+0x1c8>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d130      	bne.n	8006144 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	2200      	movs	r2, #0
 80060ea:	2180      	movs	r1, #128	; 0x80
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 fa3f 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e04d      	b.n	8006198 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006100:	b29b      	uxth	r3, r3
 8006102:	2bff      	cmp	r3, #255	; 0xff
 8006104:	d90e      	bls.n	8006124 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	22ff      	movs	r2, #255	; 0xff
 800610a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006110:	b2da      	uxtb	r2, r3
 8006112:	8979      	ldrh	r1, [r7, #10]
 8006114:	2300      	movs	r3, #0
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 fc77 	bl	8006a10 <I2C_TransferConfig>
 8006122:	e00f      	b.n	8006144 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006132:	b2da      	uxtb	r2, r3
 8006134:	8979      	ldrh	r1, [r7, #10]
 8006136:	2300      	movs	r3, #0
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 fc66 	bl	8006a10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d19e      	bne.n	800608c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 faac 	bl	80066b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e01a      	b.n	8006198 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2220      	movs	r2, #32
 8006168:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6859      	ldr	r1, [r3, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <HAL_I2C_Mem_Write+0x224>)
 8006176:	400b      	ands	r3, r1
 8006178:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	e000      	b.n	8006198 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006196:	2302      	movs	r3, #2
  }
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	fe00e800 	.word	0xfe00e800

080061a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	4608      	mov	r0, r1
 80061ae:	4611      	mov	r1, r2
 80061b0:	461a      	mov	r2, r3
 80061b2:	4603      	mov	r3, r0
 80061b4:	817b      	strh	r3, [r7, #10]
 80061b6:	460b      	mov	r3, r1
 80061b8:	813b      	strh	r3, [r7, #8]
 80061ba:	4613      	mov	r3, r2
 80061bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b20      	cmp	r3, #32
 80061c8:	f040 80fd 	bne.w	80063c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d002      	beq.n	80061d8 <HAL_I2C_Mem_Read+0x34>
 80061d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0f1      	b.n	80063c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_I2C_Mem_Read+0x4e>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e0ea      	b.n	80063c8 <HAL_I2C_Mem_Read+0x224>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061fa:	f7fd faf3 	bl	80037e4 <HAL_GetTick>
 80061fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	2319      	movs	r3, #25
 8006206:	2201      	movs	r2, #1
 8006208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 f9af 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e0d5      	b.n	80063c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2222      	movs	r2, #34	; 0x22
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2240      	movs	r2, #64	; 0x40
 8006228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a3a      	ldr	r2, [r7, #32]
 8006236:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800623c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006244:	88f8      	ldrh	r0, [r7, #6]
 8006246:	893a      	ldrh	r2, [r7, #8]
 8006248:	8979      	ldrh	r1, [r7, #10]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	4603      	mov	r3, r0
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f913 	bl	8006480 <I2C_RequestMemoryRead>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e0ad      	b.n	80063c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	2bff      	cmp	r3, #255	; 0xff
 8006274:	d90e      	bls.n	8006294 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006280:	b2da      	uxtb	r2, r3
 8006282:	8979      	ldrh	r1, [r7, #10]
 8006284:	4b52      	ldr	r3, [pc, #328]	; (80063d0 <HAL_I2C_Mem_Read+0x22c>)
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 fbbf 	bl	8006a10 <I2C_TransferConfig>
 8006292:	e00f      	b.n	80062b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	8979      	ldrh	r1, [r7, #10]
 80062a6:	4b4a      	ldr	r3, [pc, #296]	; (80063d0 <HAL_I2C_Mem_Read+0x22c>)
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 fbae 	bl	8006a10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	2200      	movs	r2, #0
 80062bc:	2104      	movs	r1, #4
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 f956 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e07c      	b.n	80063c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d034      	beq.n	8006374 <HAL_I2C_Mem_Read+0x1d0>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630e:	2b00      	cmp	r3, #0
 8006310:	d130      	bne.n	8006374 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	2200      	movs	r2, #0
 800631a:	2180      	movs	r1, #128	; 0x80
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f927 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e04d      	b.n	80063c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006330:	b29b      	uxth	r3, r3
 8006332:	2bff      	cmp	r3, #255	; 0xff
 8006334:	d90e      	bls.n	8006354 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006340:	b2da      	uxtb	r2, r3
 8006342:	8979      	ldrh	r1, [r7, #10]
 8006344:	2300      	movs	r3, #0
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 fb5f 	bl	8006a10 <I2C_TransferConfig>
 8006352:	e00f      	b.n	8006374 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006362:	b2da      	uxtb	r2, r3
 8006364:	8979      	ldrh	r1, [r7, #10]
 8006366:	2300      	movs	r3, #0
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fb4e 	bl	8006a10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d19a      	bne.n	80062b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f994 	bl	80066b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e01a      	b.n	80063c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2220      	movs	r2, #32
 8006398:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6859      	ldr	r1, [r3, #4]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <HAL_I2C_Mem_Read+0x230>)
 80063a6:	400b      	ands	r3, r1
 80063a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	e000      	b.n	80063c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80063c6:	2302      	movs	r3, #2
  }
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	80002400 	.word	0x80002400
 80063d4:	fe00e800 	.word	0xfe00e800

080063d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af02      	add	r7, sp, #8
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	4608      	mov	r0, r1
 80063e2:	4611      	mov	r1, r2
 80063e4:	461a      	mov	r2, r3
 80063e6:	4603      	mov	r3, r0
 80063e8:	817b      	strh	r3, [r7, #10]
 80063ea:	460b      	mov	r3, r1
 80063ec:	813b      	strh	r3, [r7, #8]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	8979      	ldrh	r1, [r7, #10]
 80063f8:	4b20      	ldr	r3, [pc, #128]	; (800647c <I2C_RequestMemoryWrite+0xa4>)
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 fb05 	bl	8006a10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	69b9      	ldr	r1, [r7, #24]
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 f909 	bl	8006622 <I2C_WaitOnTXISFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e02c      	b.n	8006474 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800641a:	88fb      	ldrh	r3, [r7, #6]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d105      	bne.n	800642c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006420:	893b      	ldrh	r3, [r7, #8]
 8006422:	b2da      	uxtb	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	629a      	str	r2, [r3, #40]	; 0x28
 800642a:	e015      	b.n	8006458 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800642c:	893b      	ldrh	r3, [r7, #8]
 800642e:	0a1b      	lsrs	r3, r3, #8
 8006430:	b29b      	uxth	r3, r3
 8006432:	b2da      	uxtb	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800643a:	69fa      	ldr	r2, [r7, #28]
 800643c:	69b9      	ldr	r1, [r7, #24]
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 f8ef 	bl	8006622 <I2C_WaitOnTXISFlagUntilTimeout>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e012      	b.n	8006474 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800644e:	893b      	ldrh	r3, [r7, #8]
 8006450:	b2da      	uxtb	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	2200      	movs	r2, #0
 8006460:	2180      	movs	r1, #128	; 0x80
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 f884 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	80002000 	.word	0x80002000

08006480 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af02      	add	r7, sp, #8
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	4608      	mov	r0, r1
 800648a:	4611      	mov	r1, r2
 800648c:	461a      	mov	r2, r3
 800648e:	4603      	mov	r3, r0
 8006490:	817b      	strh	r3, [r7, #10]
 8006492:	460b      	mov	r3, r1
 8006494:	813b      	strh	r3, [r7, #8]
 8006496:	4613      	mov	r3, r2
 8006498:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800649a:	88fb      	ldrh	r3, [r7, #6]
 800649c:	b2da      	uxtb	r2, r3
 800649e:	8979      	ldrh	r1, [r7, #10]
 80064a0:	4b20      	ldr	r3, [pc, #128]	; (8006524 <I2C_RequestMemoryRead+0xa4>)
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	2300      	movs	r3, #0
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 fab2 	bl	8006a10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ac:	69fa      	ldr	r2, [r7, #28]
 80064ae:	69b9      	ldr	r1, [r7, #24]
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 f8b6 	bl	8006622 <I2C_WaitOnTXISFlagUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e02c      	b.n	800651a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064c0:	88fb      	ldrh	r3, [r7, #6]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d105      	bne.n	80064d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064c6:	893b      	ldrh	r3, [r7, #8]
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	629a      	str	r2, [r3, #40]	; 0x28
 80064d0:	e015      	b.n	80064fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064d2:	893b      	ldrh	r3, [r7, #8]
 80064d4:	0a1b      	lsrs	r3, r3, #8
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	69b9      	ldr	r1, [r7, #24]
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f89c 	bl	8006622 <I2C_WaitOnTXISFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e012      	b.n	800651a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064f4:	893b      	ldrh	r3, [r7, #8]
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2200      	movs	r2, #0
 8006506:	2140      	movs	r1, #64	; 0x40
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 f831 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e000      	b.n	800651a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	80002000 	.word	0x80002000

08006528 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b02      	cmp	r3, #2
 800653c:	d103      	bne.n	8006546 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2200      	movs	r2, #0
 8006544:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b01      	cmp	r3, #1
 8006552:	d007      	beq.n	8006564 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699a      	ldr	r2, [r3, #24]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	619a      	str	r2, [r3, #24]
  }
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	603b      	str	r3, [r7, #0]
 800657c:	4613      	mov	r3, r2
 800657e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006580:	e03b      	b.n	80065fa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 f962 	bl	8006850 <I2C_IsErrorOccurred>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e041      	b.n	800661a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659c:	d02d      	beq.n	80065fa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800659e:	f7fd f921 	bl	80037e4 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d302      	bcc.n	80065b4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d122      	bne.n	80065fa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	4013      	ands	r3, r2
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	bf0c      	ite	eq
 80065c4:	2301      	moveq	r3, #1
 80065c6:	2300      	movne	r3, #0
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	461a      	mov	r2, r3
 80065cc:	79fb      	ldrb	r3, [r7, #7]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d113      	bne.n	80065fa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d6:	f043 0220 	orr.w	r2, r3, #32
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e00f      	b.n	800661a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	699a      	ldr	r2, [r3, #24]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	4013      	ands	r3, r2
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	429a      	cmp	r2, r3
 8006608:	bf0c      	ite	eq
 800660a:	2301      	moveq	r3, #1
 800660c:	2300      	movne	r3, #0
 800660e:	b2db      	uxtb	r3, r3
 8006610:	461a      	mov	r2, r3
 8006612:	79fb      	ldrb	r3, [r7, #7]
 8006614:	429a      	cmp	r2, r3
 8006616:	d0b4      	beq.n	8006582 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800662e:	e033      	b.n	8006698 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 f90b 	bl	8006850 <I2C_IsErrorOccurred>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e031      	b.n	80066a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d025      	beq.n	8006698 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800664c:	f7fd f8ca 	bl	80037e4 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	429a      	cmp	r2, r3
 800665a:	d302      	bcc.n	8006662 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d11a      	bne.n	8006698 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b02      	cmp	r3, #2
 800666e:	d013      	beq.n	8006698 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006674:	f043 0220 	orr.w	r2, r3, #32
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e007      	b.n	80066a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d1c4      	bne.n	8006630 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066bc:	e02f      	b.n	800671e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	68b9      	ldr	r1, [r7, #8]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 f8c4 	bl	8006850 <I2C_IsErrorOccurred>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e02d      	b.n	800672e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d2:	f7fd f887 	bl	80037e4 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d302      	bcc.n	80066e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d11a      	bne.n	800671e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d013      	beq.n	800671e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fa:	f043 0220 	orr.w	r2, r3, #32
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2220      	movs	r2, #32
 8006706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e007      	b.n	800672e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	f003 0320 	and.w	r3, r3, #32
 8006728:	2b20      	cmp	r3, #32
 800672a:	d1c8      	bne.n	80066be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006748:	e071      	b.n	800682e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 f87e 	bl	8006850 <I2C_IsErrorOccurred>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b20      	cmp	r3, #32
 800676a:	d13b      	bne.n	80067e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800676c:	7dfb      	ldrb	r3, [r7, #23]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d138      	bne.n	80067e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b04      	cmp	r3, #4
 800677e:	d105      	bne.n	800678c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	f003 0310 	and.w	r3, r3, #16
 8006796:	2b10      	cmp	r3, #16
 8006798:	d121      	bne.n	80067de <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2210      	movs	r2, #16
 80067a0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2204      	movs	r2, #4
 80067a6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2220      	movs	r2, #32
 80067ae:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6859      	ldr	r1, [r3, #4]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4b24      	ldr	r3, [pc, #144]	; (800684c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80067bc:	400b      	ands	r3, r1
 80067be:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	75fb      	strb	r3, [r7, #23]
 80067dc:	e002      	b.n	80067e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80067e4:	f7fc fffe 	bl	80037e4 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d302      	bcc.n	80067fa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d119      	bne.n	800682e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d116      	bne.n	800682e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	f003 0304 	and.w	r3, r3, #4
 800680a:	2b04      	cmp	r3, #4
 800680c:	d00f      	beq.n	800682e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006812:	f043 0220 	orr.w	r2, r3, #32
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b04      	cmp	r3, #4
 800683a:	d002      	beq.n	8006842 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800683c:	7dfb      	ldrb	r3, [r7, #23]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d083      	beq.n	800674a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006842:	7dfb      	ldrb	r3, [r7, #23]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	fe00e800 	.word	0xfe00e800

08006850 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08a      	sub	sp, #40	; 0x28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	2b00      	cmp	r3, #0
 800687a:	d068      	beq.n	800694e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2210      	movs	r2, #16
 8006882:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006884:	e049      	b.n	800691a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688c:	d045      	beq.n	800691a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800688e:	f7fc ffa9 	bl	80037e4 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	429a      	cmp	r2, r3
 800689c:	d302      	bcc.n	80068a4 <I2C_IsErrorOccurred+0x54>
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d13a      	bne.n	800691a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c6:	d121      	bne.n	800690c <I2C_IsErrorOccurred+0xbc>
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068ce:	d01d      	beq.n	800690c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80068d0:	7cfb      	ldrb	r3, [r7, #19]
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	d01a      	beq.n	800690c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068e6:	f7fc ff7d 	bl	80037e4 <HAL_GetTick>
 80068ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068ec:	e00e      	b.n	800690c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068ee:	f7fc ff79 	bl	80037e4 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	2b19      	cmp	r3, #25
 80068fa:	d907      	bls.n	800690c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	f043 0320 	orr.w	r3, r3, #32
 8006902:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800690a:	e006      	b.n	800691a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	f003 0320 	and.w	r3, r3, #32
 8006916:	2b20      	cmp	r3, #32
 8006918:	d1e9      	bne.n	80068ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b20      	cmp	r3, #32
 8006926:	d003      	beq.n	8006930 <I2C_IsErrorOccurred+0xe0>
 8006928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0aa      	beq.n	8006886 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006934:	2b00      	cmp	r3, #0
 8006936:	d103      	bne.n	8006940 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2220      	movs	r2, #32
 800693e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	f043 0304 	orr.w	r3, r3, #4
 8006946:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	f043 0301 	orr.w	r3, r3, #1
 8006966:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006970:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00b      	beq.n	800699a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	f043 0308 	orr.w	r3, r3, #8
 8006988:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006992:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	f043 0302 	orr.w	r3, r3, #2
 80069aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80069bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d01c      	beq.n	80069fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f7ff fdaf 	bl	8006528 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6859      	ldr	r1, [r3, #4]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <I2C_IsErrorOccurred+0x1bc>)
 80069d6:	400b      	ands	r3, r1
 80069d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	431a      	orrs	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80069fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3728      	adds	r7, #40	; 0x28
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	fe00e800 	.word	0xfe00e800

08006a10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	607b      	str	r3, [r7, #4]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	817b      	strh	r3, [r7, #10]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a22:	897b      	ldrh	r3, [r7, #10]
 8006a24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a28:	7a7b      	ldrb	r3, [r7, #9]
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	0d5b      	lsrs	r3, r3, #21
 8006a4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006a4e:	4b08      	ldr	r3, [pc, #32]	; (8006a70 <I2C_TransferConfig+0x60>)
 8006a50:	430b      	orrs	r3, r1
 8006a52:	43db      	mvns	r3, r3
 8006a54:	ea02 0103 	and.w	r1, r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a62:	bf00      	nop
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	03ff63ff 	.word	0x03ff63ff

08006a74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b20      	cmp	r3, #32
 8006a88:	d138      	bne.n	8006afc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e032      	b.n	8006afe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2224      	movs	r2, #36	; 0x24
 8006aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0201 	bic.w	r2, r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ac6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6819      	ldr	r1, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e000      	b.n	8006afe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006afc:	2302      	movs	r3, #2
  }
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b085      	sub	sp, #20
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d139      	bne.n	8006b94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d101      	bne.n	8006b2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e033      	b.n	8006b96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2224      	movs	r2, #36	; 0x24
 8006b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 0201 	bic.w	r2, r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	021b      	lsls	r3, r3, #8
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0201 	orr.w	r2, r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e000      	b.n	8006b96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b94:	2302      	movs	r3, #2
  }
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
	...

08006ba4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006ba8:	4b04      	ldr	r3, [pc, #16]	; (8006bbc <HAL_PWREx_GetVoltageRange+0x18>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40007000 	.word	0x40007000

08006bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bce:	d130      	bne.n	8006c32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006bd0:	4b23      	ldr	r3, [pc, #140]	; (8006c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bdc:	d038      	beq.n	8006c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bde:	4b20      	ldr	r3, [pc, #128]	; (8006c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006be6:	4a1e      	ldr	r2, [pc, #120]	; (8006c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006be8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006bee:	4b1d      	ldr	r3, [pc, #116]	; (8006c64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2232      	movs	r2, #50	; 0x32
 8006bf4:	fb02 f303 	mul.w	r3, r2, r3
 8006bf8:	4a1b      	ldr	r2, [pc, #108]	; (8006c68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfe:	0c9b      	lsrs	r3, r3, #18
 8006c00:	3301      	adds	r3, #1
 8006c02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c04:	e002      	b.n	8006c0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c0c:	4b14      	ldr	r3, [pc, #80]	; (8006c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c18:	d102      	bne.n	8006c20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1f2      	bne.n	8006c06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c20:	4b0f      	ldr	r3, [pc, #60]	; (8006c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c2c:	d110      	bne.n	8006c50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e00f      	b.n	8006c52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c32:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c3e:	d007      	beq.n	8006c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c48:	4a05      	ldr	r2, [pc, #20]	; (8006c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40007000 	.word	0x40007000
 8006c64:	200000c8 	.word	0x200000c8
 8006c68:	431bde83 	.word	0x431bde83

08006c6c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e3ca      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c7e:	4b97      	ldr	r3, [pc, #604]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f003 030c 	and.w	r3, r3, #12
 8006c86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c88:	4b94      	ldr	r3, [pc, #592]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0303 	and.w	r3, r3, #3
 8006c90:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0310 	and.w	r3, r3, #16
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 80e4 	beq.w	8006e68 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x4a>
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2b0c      	cmp	r3, #12
 8006caa:	f040 808b 	bne.w	8006dc4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	f040 8087 	bne.w	8006dc4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006cb6:	4b89      	ldr	r3, [pc, #548]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d005      	beq.n	8006cce <HAL_RCC_OscConfig+0x62>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e3a2      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1a      	ldr	r2, [r3, #32]
 8006cd2:	4b82      	ldr	r3, [pc, #520]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0308 	and.w	r3, r3, #8
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d004      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x7c>
 8006cde:	4b7f      	ldr	r3, [pc, #508]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ce6:	e005      	b.n	8006cf4 <HAL_RCC_OscConfig+0x88>
 8006ce8:	4b7c      	ldr	r3, [pc, #496]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cee:	091b      	lsrs	r3, r3, #4
 8006cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d223      	bcs.n	8006d40 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fd87 	bl	8007810 <RCC_SetFlashLatencyFromMSIRange>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e383      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d0c:	4b73      	ldr	r3, [pc, #460]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a72      	ldr	r2, [pc, #456]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006d12:	f043 0308 	orr.w	r3, r3, #8
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	4b70      	ldr	r3, [pc, #448]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	496d      	ldr	r1, [pc, #436]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d2a:	4b6c      	ldr	r3, [pc, #432]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	4968      	ldr	r1, [pc, #416]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	604b      	str	r3, [r1, #4]
 8006d3e:	e025      	b.n	8006d8c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d40:	4b66      	ldr	r3, [pc, #408]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a65      	ldr	r2, [pc, #404]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006d46:	f043 0308 	orr.w	r3, r3, #8
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	4b63      	ldr	r3, [pc, #396]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	4960      	ldr	r1, [pc, #384]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d5e:	4b5f      	ldr	r3, [pc, #380]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	021b      	lsls	r3, r3, #8
 8006d6c:	495b      	ldr	r1, [pc, #364]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d109      	bne.n	8006d8c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fd47 	bl	8007810 <RCC_SetFlashLatencyFromMSIRange>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e343      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d8c:	f000 fc4a 	bl	8007624 <HAL_RCC_GetSysClockFreq>
 8006d90:	4602      	mov	r2, r0
 8006d92:	4b52      	ldr	r3, [pc, #328]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	091b      	lsrs	r3, r3, #4
 8006d98:	f003 030f 	and.w	r3, r3, #15
 8006d9c:	4950      	ldr	r1, [pc, #320]	; (8006ee0 <HAL_RCC_OscConfig+0x274>)
 8006d9e:	5ccb      	ldrb	r3, [r1, r3]
 8006da0:	f003 031f 	and.w	r3, r3, #31
 8006da4:	fa22 f303 	lsr.w	r3, r2, r3
 8006da8:	4a4e      	ldr	r2, [pc, #312]	; (8006ee4 <HAL_RCC_OscConfig+0x278>)
 8006daa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006dac:	4b4e      	ldr	r3, [pc, #312]	; (8006ee8 <HAL_RCC_OscConfig+0x27c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7fc fb2b 	bl	800340c <HAL_InitTick>
 8006db6:	4603      	mov	r3, r0
 8006db8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d052      	beq.n	8006e66 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	e327      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d032      	beq.n	8006e32 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006dcc:	4b43      	ldr	r3, [pc, #268]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a42      	ldr	r2, [pc, #264]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006dd2:	f043 0301 	orr.w	r3, r3, #1
 8006dd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006dd8:	f7fc fd04 	bl	80037e4 <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006de0:	f7fc fd00 	bl	80037e4 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e310      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006df2:	4b3a      	ldr	r3, [pc, #232]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0f0      	beq.n	8006de0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006dfe:	4b37      	ldr	r3, [pc, #220]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a36      	ldr	r2, [pc, #216]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006e04:	f043 0308 	orr.w	r3, r3, #8
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	4b34      	ldr	r3, [pc, #208]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	4931      	ldr	r1, [pc, #196]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e1c:	4b2f      	ldr	r3, [pc, #188]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	021b      	lsls	r3, r3, #8
 8006e2a:	492c      	ldr	r1, [pc, #176]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	604b      	str	r3, [r1, #4]
 8006e30:	e01a      	b.n	8006e68 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006e32:	4b2a      	ldr	r3, [pc, #168]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a29      	ldr	r2, [pc, #164]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006e38:	f023 0301 	bic.w	r3, r3, #1
 8006e3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e3e:	f7fc fcd1 	bl	80037e4 <HAL_GetTick>
 8006e42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e44:	e008      	b.n	8006e58 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e46:	f7fc fccd 	bl	80037e4 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e2dd      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e58:	4b20      	ldr	r3, [pc, #128]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1f0      	bne.n	8006e46 <HAL_RCC_OscConfig+0x1da>
 8006e64:	e000      	b.n	8006e68 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d074      	beq.n	8006f5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d005      	beq.n	8006e86 <HAL_RCC_OscConfig+0x21a>
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	2b0c      	cmp	r3, #12
 8006e7e:	d10e      	bne.n	8006e9e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d10b      	bne.n	8006e9e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e86:	4b15      	ldr	r3, [pc, #84]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d064      	beq.n	8006f5c <HAL_RCC_OscConfig+0x2f0>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d160      	bne.n	8006f5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e2ba      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea6:	d106      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x24a>
 8006ea8:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a0b      	ldr	r2, [pc, #44]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	e026      	b.n	8006f04 <HAL_RCC_OscConfig+0x298>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ebe:	d115      	bne.n	8006eec <HAL_RCC_OscConfig+0x280>
 8006ec0:	4b06      	ldr	r3, [pc, #24]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a05      	ldr	r2, [pc, #20]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	4b03      	ldr	r3, [pc, #12]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a02      	ldr	r2, [pc, #8]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	e014      	b.n	8006f04 <HAL_RCC_OscConfig+0x298>
 8006eda:	bf00      	nop
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	08013940 	.word	0x08013940
 8006ee4:	200000c8 	.word	0x200000c8
 8006ee8:	200000cc 	.word	0x200000cc
 8006eec:	4ba0      	ldr	r3, [pc, #640]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a9f      	ldr	r2, [pc, #636]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8006ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	4b9d      	ldr	r3, [pc, #628]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a9c      	ldr	r2, [pc, #624]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8006efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d013      	beq.n	8006f34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0c:	f7fc fc6a 	bl	80037e4 <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f14:	f7fc fc66 	bl	80037e4 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b64      	cmp	r3, #100	; 0x64
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e276      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f26:	4b92      	ldr	r3, [pc, #584]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0f0      	beq.n	8006f14 <HAL_RCC_OscConfig+0x2a8>
 8006f32:	e014      	b.n	8006f5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f34:	f7fc fc56 	bl	80037e4 <HAL_GetTick>
 8006f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f3a:	e008      	b.n	8006f4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f3c:	f7fc fc52 	bl	80037e4 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b64      	cmp	r3, #100	; 0x64
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e262      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f4e:	4b88      	ldr	r3, [pc, #544]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f0      	bne.n	8006f3c <HAL_RCC_OscConfig+0x2d0>
 8006f5a:	e000      	b.n	8006f5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d060      	beq.n	800702c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d005      	beq.n	8006f7c <HAL_RCC_OscConfig+0x310>
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b0c      	cmp	r3, #12
 8006f74:	d119      	bne.n	8006faa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d116      	bne.n	8006faa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f7c:	4b7c      	ldr	r3, [pc, #496]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <HAL_RCC_OscConfig+0x328>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e23f      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f94:	4b76      	ldr	r3, [pc, #472]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	061b      	lsls	r3, r3, #24
 8006fa2:	4973      	ldr	r1, [pc, #460]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fa8:	e040      	b.n	800702c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d023      	beq.n	8006ffa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fb2:	4b6f      	ldr	r3, [pc, #444]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a6e      	ldr	r2, [pc, #440]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8006fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbe:	f7fc fc11 	bl	80037e4 <HAL_GetTick>
 8006fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fc4:	e008      	b.n	8006fd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fc6:	f7fc fc0d 	bl	80037e4 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d901      	bls.n	8006fd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e21d      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fd8:	4b65      	ldr	r3, [pc, #404]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d0f0      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fe4:	4b62      	ldr	r3, [pc, #392]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	061b      	lsls	r3, r3, #24
 8006ff2:	495f      	ldr	r1, [pc, #380]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	604b      	str	r3, [r1, #4]
 8006ff8:	e018      	b.n	800702c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ffa:	4b5d      	ldr	r3, [pc, #372]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a5c      	ldr	r2, [pc, #368]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8007000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007006:	f7fc fbed 	bl	80037e4 <HAL_GetTick>
 800700a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800700c:	e008      	b.n	8007020 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800700e:	f7fc fbe9 	bl	80037e4 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b02      	cmp	r3, #2
 800701a:	d901      	bls.n	8007020 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e1f9      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007020:	4b53      	ldr	r3, [pc, #332]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1f0      	bne.n	800700e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b00      	cmp	r3, #0
 8007036:	d03c      	beq.n	80070b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01c      	beq.n	800707a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007040:	4b4b      	ldr	r3, [pc, #300]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8007042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007046:	4a4a      	ldr	r2, [pc, #296]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8007048:	f043 0301 	orr.w	r3, r3, #1
 800704c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007050:	f7fc fbc8 	bl	80037e4 <HAL_GetTick>
 8007054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007056:	e008      	b.n	800706a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007058:	f7fc fbc4 	bl	80037e4 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b02      	cmp	r3, #2
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e1d4      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800706a:	4b41      	ldr	r3, [pc, #260]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 800706c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0ef      	beq.n	8007058 <HAL_RCC_OscConfig+0x3ec>
 8007078:	e01b      	b.n	80070b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800707a:	4b3d      	ldr	r3, [pc, #244]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 800707c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007080:	4a3b      	ldr	r2, [pc, #236]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8007082:	f023 0301 	bic.w	r3, r3, #1
 8007086:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800708a:	f7fc fbab 	bl	80037e4 <HAL_GetTick>
 800708e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007090:	e008      	b.n	80070a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007092:	f7fc fba7 	bl	80037e4 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d901      	bls.n	80070a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e1b7      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070a4:	4b32      	ldr	r3, [pc, #200]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 80070a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1ef      	bne.n	8007092 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 80a6 	beq.w	800720c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070c0:	2300      	movs	r3, #0
 80070c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80070c4:	4b2a      	ldr	r3, [pc, #168]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 80070c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10d      	bne.n	80070ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070d0:	4b27      	ldr	r3, [pc, #156]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 80070d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d4:	4a26      	ldr	r2, [pc, #152]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 80070d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070da:	6593      	str	r3, [r2, #88]	; 0x58
 80070dc:	4b24      	ldr	r3, [pc, #144]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 80070de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070e4:	60bb      	str	r3, [r7, #8]
 80070e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070e8:	2301      	movs	r3, #1
 80070ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070ec:	4b21      	ldr	r3, [pc, #132]	; (8007174 <HAL_RCC_OscConfig+0x508>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d118      	bne.n	800712a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070f8:	4b1e      	ldr	r3, [pc, #120]	; (8007174 <HAL_RCC_OscConfig+0x508>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a1d      	ldr	r2, [pc, #116]	; (8007174 <HAL_RCC_OscConfig+0x508>)
 80070fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007102:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007104:	f7fc fb6e 	bl	80037e4 <HAL_GetTick>
 8007108:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800710a:	e008      	b.n	800711e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800710c:	f7fc fb6a 	bl	80037e4 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d901      	bls.n	800711e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e17a      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800711e:	4b15      	ldr	r3, [pc, #84]	; (8007174 <HAL_RCC_OscConfig+0x508>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0f0      	beq.n	800710c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d108      	bne.n	8007144 <HAL_RCC_OscConfig+0x4d8>
 8007132:	4b0f      	ldr	r3, [pc, #60]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8007134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007138:	4a0d      	ldr	r2, [pc, #52]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 800713a:	f043 0301 	orr.w	r3, r3, #1
 800713e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007142:	e029      	b.n	8007198 <HAL_RCC_OscConfig+0x52c>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	2b05      	cmp	r3, #5
 800714a:	d115      	bne.n	8007178 <HAL_RCC_OscConfig+0x50c>
 800714c:	4b08      	ldr	r3, [pc, #32]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 800714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007152:	4a07      	ldr	r2, [pc, #28]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8007154:	f043 0304 	orr.w	r3, r3, #4
 8007158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800715c:	4b04      	ldr	r3, [pc, #16]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 800715e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007162:	4a03      	ldr	r2, [pc, #12]	; (8007170 <HAL_RCC_OscConfig+0x504>)
 8007164:	f043 0301 	orr.w	r3, r3, #1
 8007168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800716c:	e014      	b.n	8007198 <HAL_RCC_OscConfig+0x52c>
 800716e:	bf00      	nop
 8007170:	40021000 	.word	0x40021000
 8007174:	40007000 	.word	0x40007000
 8007178:	4b9c      	ldr	r3, [pc, #624]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 800717a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717e:	4a9b      	ldr	r2, [pc, #620]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007188:	4b98      	ldr	r3, [pc, #608]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 800718a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800718e:	4a97      	ldr	r2, [pc, #604]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 8007190:	f023 0304 	bic.w	r3, r3, #4
 8007194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d016      	beq.n	80071ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a0:	f7fc fb20 	bl	80037e4 <HAL_GetTick>
 80071a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071a6:	e00a      	b.n	80071be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071a8:	f7fc fb1c 	bl	80037e4 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d901      	bls.n	80071be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e12a      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071be:	4b8b      	ldr	r3, [pc, #556]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 80071c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0ed      	beq.n	80071a8 <HAL_RCC_OscConfig+0x53c>
 80071cc:	e015      	b.n	80071fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ce:	f7fc fb09 	bl	80037e4 <HAL_GetTick>
 80071d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071d4:	e00a      	b.n	80071ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071d6:	f7fc fb05 	bl	80037e4 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d901      	bls.n	80071ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e113      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071ec:	4b7f      	ldr	r3, [pc, #508]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 80071ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1ed      	bne.n	80071d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071fa:	7ffb      	ldrb	r3, [r7, #31]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d105      	bne.n	800720c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007200:	4b7a      	ldr	r3, [pc, #488]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 8007202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007204:	4a79      	ldr	r2, [pc, #484]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 8007206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800720a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 80fe 	beq.w	8007412 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721a:	2b02      	cmp	r3, #2
 800721c:	f040 80d0 	bne.w	80073c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007220:	4b72      	ldr	r3, [pc, #456]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f003 0203 	and.w	r2, r3, #3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007230:	429a      	cmp	r2, r3
 8007232:	d130      	bne.n	8007296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	3b01      	subs	r3, #1
 8007240:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007242:	429a      	cmp	r2, r3
 8007244:	d127      	bne.n	8007296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007250:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007252:	429a      	cmp	r2, r3
 8007254:	d11f      	bne.n	8007296 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007260:	2a07      	cmp	r2, #7
 8007262:	bf14      	ite	ne
 8007264:	2201      	movne	r2, #1
 8007266:	2200      	moveq	r2, #0
 8007268:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800726a:	4293      	cmp	r3, r2
 800726c:	d113      	bne.n	8007296 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007278:	085b      	lsrs	r3, r3, #1
 800727a:	3b01      	subs	r3, #1
 800727c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800727e:	429a      	cmp	r2, r3
 8007280:	d109      	bne.n	8007296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	3b01      	subs	r3, #1
 8007290:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007292:	429a      	cmp	r2, r3
 8007294:	d06e      	beq.n	8007374 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2b0c      	cmp	r3, #12
 800729a:	d069      	beq.n	8007370 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800729c:	4b53      	ldr	r3, [pc, #332]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d105      	bne.n	80072b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80072a8:	4b50      	ldr	r3, [pc, #320]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e0ad      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80072b8:	4b4c      	ldr	r3, [pc, #304]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a4b      	ldr	r2, [pc, #300]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 80072be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80072c4:	f7fc fa8e 	bl	80037e4 <HAL_GetTick>
 80072c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072ca:	e008      	b.n	80072de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072cc:	f7fc fa8a 	bl	80037e4 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d901      	bls.n	80072de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e09a      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072de:	4b43      	ldr	r3, [pc, #268]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1f0      	bne.n	80072cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072ea:	4b40      	ldr	r3, [pc, #256]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	4b40      	ldr	r3, [pc, #256]	; (80073f0 <HAL_RCC_OscConfig+0x784>)
 80072f0:	4013      	ands	r3, r2
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80072fa:	3a01      	subs	r2, #1
 80072fc:	0112      	lsls	r2, r2, #4
 80072fe:	4311      	orrs	r1, r2
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007304:	0212      	lsls	r2, r2, #8
 8007306:	4311      	orrs	r1, r2
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800730c:	0852      	lsrs	r2, r2, #1
 800730e:	3a01      	subs	r2, #1
 8007310:	0552      	lsls	r2, r2, #21
 8007312:	4311      	orrs	r1, r2
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007318:	0852      	lsrs	r2, r2, #1
 800731a:	3a01      	subs	r2, #1
 800731c:	0652      	lsls	r2, r2, #25
 800731e:	4311      	orrs	r1, r2
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007324:	0912      	lsrs	r2, r2, #4
 8007326:	0452      	lsls	r2, r2, #17
 8007328:	430a      	orrs	r2, r1
 800732a:	4930      	ldr	r1, [pc, #192]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 800732c:	4313      	orrs	r3, r2
 800732e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007330:	4b2e      	ldr	r3, [pc, #184]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a2d      	ldr	r2, [pc, #180]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 8007336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800733a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800733c:	4b2b      	ldr	r3, [pc, #172]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	4a2a      	ldr	r2, [pc, #168]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 8007342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007346:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007348:	f7fc fa4c 	bl	80037e4 <HAL_GetTick>
 800734c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800734e:	e008      	b.n	8007362 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007350:	f7fc fa48 	bl	80037e4 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	2b02      	cmp	r3, #2
 800735c:	d901      	bls.n	8007362 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e058      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007362:	4b22      	ldr	r3, [pc, #136]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0f0      	beq.n	8007350 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800736e:	e050      	b.n	8007412 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e04f      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007374:	4b1d      	ldr	r3, [pc, #116]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d148      	bne.n	8007412 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007380:	4b1a      	ldr	r3, [pc, #104]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a19      	ldr	r2, [pc, #100]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 8007386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800738a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800738c:	4b17      	ldr	r3, [pc, #92]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	4a16      	ldr	r2, [pc, #88]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 8007392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007396:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007398:	f7fc fa24 	bl	80037e4 <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073a0:	f7fc fa20 	bl	80037e4 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e030      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073b2:	4b0e      	ldr	r3, [pc, #56]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0f0      	beq.n	80073a0 <HAL_RCC_OscConfig+0x734>
 80073be:	e028      	b.n	8007412 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2b0c      	cmp	r3, #12
 80073c4:	d023      	beq.n	800740e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073c6:	4b09      	ldr	r3, [pc, #36]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a08      	ldr	r2, [pc, #32]	; (80073ec <HAL_RCC_OscConfig+0x780>)
 80073cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d2:	f7fc fa07 	bl	80037e4 <HAL_GetTick>
 80073d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073d8:	e00c      	b.n	80073f4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073da:	f7fc fa03 	bl	80037e4 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d905      	bls.n	80073f4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e013      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
 80073ec:	40021000 	.word	0x40021000
 80073f0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073f4:	4b09      	ldr	r3, [pc, #36]	; (800741c <HAL_RCC_OscConfig+0x7b0>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1ec      	bne.n	80073da <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007400:	4b06      	ldr	r3, [pc, #24]	; (800741c <HAL_RCC_OscConfig+0x7b0>)
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	4905      	ldr	r1, [pc, #20]	; (800741c <HAL_RCC_OscConfig+0x7b0>)
 8007406:	4b06      	ldr	r3, [pc, #24]	; (8007420 <HAL_RCC_OscConfig+0x7b4>)
 8007408:	4013      	ands	r3, r2
 800740a:	60cb      	str	r3, [r1, #12]
 800740c:	e001      	b.n	8007412 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e000      	b.n	8007414 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3720      	adds	r7, #32
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	40021000 	.word	0x40021000
 8007420:	feeefffc 	.word	0xfeeefffc

08007424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e0e7      	b.n	8007608 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007438:	4b75      	ldr	r3, [pc, #468]	; (8007610 <HAL_RCC_ClockConfig+0x1ec>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0307 	and.w	r3, r3, #7
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d910      	bls.n	8007468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007446:	4b72      	ldr	r3, [pc, #456]	; (8007610 <HAL_RCC_ClockConfig+0x1ec>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f023 0207 	bic.w	r2, r3, #7
 800744e:	4970      	ldr	r1, [pc, #448]	; (8007610 <HAL_RCC_ClockConfig+0x1ec>)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	4313      	orrs	r3, r2
 8007454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007456:	4b6e      	ldr	r3, [pc, #440]	; (8007610 <HAL_RCC_ClockConfig+0x1ec>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d001      	beq.n	8007468 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e0cf      	b.n	8007608 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d010      	beq.n	8007496 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	4b66      	ldr	r3, [pc, #408]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007480:	429a      	cmp	r2, r3
 8007482:	d908      	bls.n	8007496 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007484:	4b63      	ldr	r3, [pc, #396]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	4960      	ldr	r1, [pc, #384]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 8007492:	4313      	orrs	r3, r2
 8007494:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d04c      	beq.n	800753c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d107      	bne.n	80074ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074aa:	4b5a      	ldr	r3, [pc, #360]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d121      	bne.n	80074fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e0a6      	b.n	8007608 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d107      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074c2:	4b54      	ldr	r3, [pc, #336]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d115      	bne.n	80074fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e09a      	b.n	8007608 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d107      	bne.n	80074ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80074da:	4b4e      	ldr	r3, [pc, #312]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d109      	bne.n	80074fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e08e      	b.n	8007608 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074ea:	4b4a      	ldr	r3, [pc, #296]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e086      	b.n	8007608 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074fa:	4b46      	ldr	r3, [pc, #280]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f023 0203 	bic.w	r2, r3, #3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	4943      	ldr	r1, [pc, #268]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 8007508:	4313      	orrs	r3, r2
 800750a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800750c:	f7fc f96a 	bl	80037e4 <HAL_GetTick>
 8007510:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007512:	e00a      	b.n	800752a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007514:	f7fc f966 	bl	80037e4 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007522:	4293      	cmp	r3, r2
 8007524:	d901      	bls.n	800752a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e06e      	b.n	8007608 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800752a:	4b3a      	ldr	r3, [pc, #232]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f003 020c 	and.w	r2, r3, #12
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	429a      	cmp	r2, r3
 800753a:	d1eb      	bne.n	8007514 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d010      	beq.n	800756a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	4b31      	ldr	r3, [pc, #196]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007554:	429a      	cmp	r2, r3
 8007556:	d208      	bcs.n	800756a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007558:	4b2e      	ldr	r3, [pc, #184]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	492b      	ldr	r1, [pc, #172]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 8007566:	4313      	orrs	r3, r2
 8007568:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800756a:	4b29      	ldr	r3, [pc, #164]	; (8007610 <HAL_RCC_ClockConfig+0x1ec>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0307 	and.w	r3, r3, #7
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	429a      	cmp	r2, r3
 8007576:	d210      	bcs.n	800759a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007578:	4b25      	ldr	r3, [pc, #148]	; (8007610 <HAL_RCC_ClockConfig+0x1ec>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f023 0207 	bic.w	r2, r3, #7
 8007580:	4923      	ldr	r1, [pc, #140]	; (8007610 <HAL_RCC_ClockConfig+0x1ec>)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	4313      	orrs	r3, r2
 8007586:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007588:	4b21      	ldr	r3, [pc, #132]	; (8007610 <HAL_RCC_ClockConfig+0x1ec>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	429a      	cmp	r2, r3
 8007594:	d001      	beq.n	800759a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e036      	b.n	8007608 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0304 	and.w	r3, r3, #4
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d008      	beq.n	80075b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075a6:	4b1b      	ldr	r3, [pc, #108]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	4918      	ldr	r1, [pc, #96]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0308 	and.w	r3, r3, #8
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d009      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075c4:	4b13      	ldr	r3, [pc, #76]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	4910      	ldr	r1, [pc, #64]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80075d8:	f000 f824 	bl	8007624 <HAL_RCC_GetSysClockFreq>
 80075dc:	4602      	mov	r2, r0
 80075de:	4b0d      	ldr	r3, [pc, #52]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	091b      	lsrs	r3, r3, #4
 80075e4:	f003 030f 	and.w	r3, r3, #15
 80075e8:	490b      	ldr	r1, [pc, #44]	; (8007618 <HAL_RCC_ClockConfig+0x1f4>)
 80075ea:	5ccb      	ldrb	r3, [r1, r3]
 80075ec:	f003 031f 	and.w	r3, r3, #31
 80075f0:	fa22 f303 	lsr.w	r3, r2, r3
 80075f4:	4a09      	ldr	r2, [pc, #36]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 80075f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80075f8:	4b09      	ldr	r3, [pc, #36]	; (8007620 <HAL_RCC_ClockConfig+0x1fc>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fb ff05 	bl	800340c <HAL_InitTick>
 8007602:	4603      	mov	r3, r0
 8007604:	72fb      	strb	r3, [r7, #11]

  return status;
 8007606:	7afb      	ldrb	r3, [r7, #11]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40022000 	.word	0x40022000
 8007614:	40021000 	.word	0x40021000
 8007618:	08013940 	.word	0x08013940
 800761c:	200000c8 	.word	0x200000c8
 8007620:	200000cc 	.word	0x200000cc

08007624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007624:	b480      	push	{r7}
 8007626:	b089      	sub	sp, #36	; 0x24
 8007628:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	61fb      	str	r3, [r7, #28]
 800762e:	2300      	movs	r3, #0
 8007630:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007632:	4b3e      	ldr	r3, [pc, #248]	; (800772c <HAL_RCC_GetSysClockFreq+0x108>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 030c 	and.w	r3, r3, #12
 800763a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800763c:	4b3b      	ldr	r3, [pc, #236]	; (800772c <HAL_RCC_GetSysClockFreq+0x108>)
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f003 0303 	and.w	r3, r3, #3
 8007644:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <HAL_RCC_GetSysClockFreq+0x34>
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	2b0c      	cmp	r3, #12
 8007650:	d121      	bne.n	8007696 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d11e      	bne.n	8007696 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007658:	4b34      	ldr	r3, [pc, #208]	; (800772c <HAL_RCC_GetSysClockFreq+0x108>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d107      	bne.n	8007674 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007664:	4b31      	ldr	r3, [pc, #196]	; (800772c <HAL_RCC_GetSysClockFreq+0x108>)
 8007666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800766a:	0a1b      	lsrs	r3, r3, #8
 800766c:	f003 030f 	and.w	r3, r3, #15
 8007670:	61fb      	str	r3, [r7, #28]
 8007672:	e005      	b.n	8007680 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007674:	4b2d      	ldr	r3, [pc, #180]	; (800772c <HAL_RCC_GetSysClockFreq+0x108>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	091b      	lsrs	r3, r3, #4
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007680:	4a2b      	ldr	r2, [pc, #172]	; (8007730 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007688:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10d      	bne.n	80076ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007694:	e00a      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	2b04      	cmp	r3, #4
 800769a:	d102      	bne.n	80076a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800769c:	4b25      	ldr	r3, [pc, #148]	; (8007734 <HAL_RCC_GetSysClockFreq+0x110>)
 800769e:	61bb      	str	r3, [r7, #24]
 80076a0:	e004      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d101      	bne.n	80076ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80076a8:	4b23      	ldr	r3, [pc, #140]	; (8007738 <HAL_RCC_GetSysClockFreq+0x114>)
 80076aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	2b0c      	cmp	r3, #12
 80076b0:	d134      	bne.n	800771c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076b2:	4b1e      	ldr	r3, [pc, #120]	; (800772c <HAL_RCC_GetSysClockFreq+0x108>)
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f003 0303 	and.w	r3, r3, #3
 80076ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d003      	beq.n	80076ca <HAL_RCC_GetSysClockFreq+0xa6>
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d003      	beq.n	80076d0 <HAL_RCC_GetSysClockFreq+0xac>
 80076c8:	e005      	b.n	80076d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80076ca:	4b1a      	ldr	r3, [pc, #104]	; (8007734 <HAL_RCC_GetSysClockFreq+0x110>)
 80076cc:	617b      	str	r3, [r7, #20]
      break;
 80076ce:	e005      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80076d0:	4b19      	ldr	r3, [pc, #100]	; (8007738 <HAL_RCC_GetSysClockFreq+0x114>)
 80076d2:	617b      	str	r3, [r7, #20]
      break;
 80076d4:	e002      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	617b      	str	r3, [r7, #20]
      break;
 80076da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076dc:	4b13      	ldr	r3, [pc, #76]	; (800772c <HAL_RCC_GetSysClockFreq+0x108>)
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	091b      	lsrs	r3, r3, #4
 80076e2:	f003 0307 	and.w	r3, r3, #7
 80076e6:	3301      	adds	r3, #1
 80076e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80076ea:	4b10      	ldr	r3, [pc, #64]	; (800772c <HAL_RCC_GetSysClockFreq+0x108>)
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	0a1b      	lsrs	r3, r3, #8
 80076f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	fb03 f202 	mul.w	r2, r3, r2
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007700:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007702:	4b0a      	ldr	r3, [pc, #40]	; (800772c <HAL_RCC_GetSysClockFreq+0x108>)
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	0e5b      	lsrs	r3, r3, #25
 8007708:	f003 0303 	and.w	r3, r3, #3
 800770c:	3301      	adds	r3, #1
 800770e:	005b      	lsls	r3, r3, #1
 8007710:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	fbb2 f3f3 	udiv	r3, r2, r3
 800771a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800771c:	69bb      	ldr	r3, [r7, #24]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3724      	adds	r7, #36	; 0x24
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40021000 	.word	0x40021000
 8007730:	08013958 	.word	0x08013958
 8007734:	00f42400 	.word	0x00f42400
 8007738:	007a1200 	.word	0x007a1200

0800773c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007740:	4b03      	ldr	r3, [pc, #12]	; (8007750 <HAL_RCC_GetHCLKFreq+0x14>)
 8007742:	681b      	ldr	r3, [r3, #0]
}
 8007744:	4618      	mov	r0, r3
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	200000c8 	.word	0x200000c8

08007754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007758:	f7ff fff0 	bl	800773c <HAL_RCC_GetHCLKFreq>
 800775c:	4602      	mov	r2, r0
 800775e:	4b06      	ldr	r3, [pc, #24]	; (8007778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	0a1b      	lsrs	r3, r3, #8
 8007764:	f003 0307 	and.w	r3, r3, #7
 8007768:	4904      	ldr	r1, [pc, #16]	; (800777c <HAL_RCC_GetPCLK1Freq+0x28>)
 800776a:	5ccb      	ldrb	r3, [r1, r3]
 800776c:	f003 031f 	and.w	r3, r3, #31
 8007770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007774:	4618      	mov	r0, r3
 8007776:	bd80      	pop	{r7, pc}
 8007778:	40021000 	.word	0x40021000
 800777c:	08013950 	.word	0x08013950

08007780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007784:	f7ff ffda 	bl	800773c <HAL_RCC_GetHCLKFreq>
 8007788:	4602      	mov	r2, r0
 800778a:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	0adb      	lsrs	r3, r3, #11
 8007790:	f003 0307 	and.w	r3, r3, #7
 8007794:	4904      	ldr	r1, [pc, #16]	; (80077a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007796:	5ccb      	ldrb	r3, [r1, r3]
 8007798:	f003 031f 	and.w	r3, r3, #31
 800779c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	40021000 	.word	0x40021000
 80077a8:	08013950 	.word	0x08013950

080077ac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	220f      	movs	r2, #15
 80077ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80077bc:	4b12      	ldr	r3, [pc, #72]	; (8007808 <HAL_RCC_GetClockConfig+0x5c>)
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f003 0203 	and.w	r2, r3, #3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80077c8:	4b0f      	ldr	r3, [pc, #60]	; (8007808 <HAL_RCC_GetClockConfig+0x5c>)
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80077d4:	4b0c      	ldr	r3, [pc, #48]	; (8007808 <HAL_RCC_GetClockConfig+0x5c>)
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80077e0:	4b09      	ldr	r3, [pc, #36]	; (8007808 <HAL_RCC_GetClockConfig+0x5c>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	08db      	lsrs	r3, r3, #3
 80077e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80077ee:	4b07      	ldr	r3, [pc, #28]	; (800780c <HAL_RCC_GetClockConfig+0x60>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0207 	and.w	r2, r3, #7
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	601a      	str	r2, [r3, #0]
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	40021000 	.word	0x40021000
 800780c:	40022000 	.word	0x40022000

08007810 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007818:	2300      	movs	r3, #0
 800781a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800781c:	4b2a      	ldr	r3, [pc, #168]	; (80078c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800781e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007828:	f7ff f9bc 	bl	8006ba4 <HAL_PWREx_GetVoltageRange>
 800782c:	6178      	str	r0, [r7, #20]
 800782e:	e014      	b.n	800785a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007830:	4b25      	ldr	r3, [pc, #148]	; (80078c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007834:	4a24      	ldr	r2, [pc, #144]	; (80078c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800783a:	6593      	str	r3, [r2, #88]	; 0x58
 800783c:	4b22      	ldr	r3, [pc, #136]	; (80078c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800783e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007844:	60fb      	str	r3, [r7, #12]
 8007846:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007848:	f7ff f9ac 	bl	8006ba4 <HAL_PWREx_GetVoltageRange>
 800784c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800784e:	4b1e      	ldr	r3, [pc, #120]	; (80078c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007852:	4a1d      	ldr	r2, [pc, #116]	; (80078c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007858:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007860:	d10b      	bne.n	800787a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2b80      	cmp	r3, #128	; 0x80
 8007866:	d919      	bls.n	800789c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2ba0      	cmp	r3, #160	; 0xa0
 800786c:	d902      	bls.n	8007874 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800786e:	2302      	movs	r3, #2
 8007870:	613b      	str	r3, [r7, #16]
 8007872:	e013      	b.n	800789c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007874:	2301      	movs	r3, #1
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	e010      	b.n	800789c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b80      	cmp	r3, #128	; 0x80
 800787e:	d902      	bls.n	8007886 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007880:	2303      	movs	r3, #3
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	e00a      	b.n	800789c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b80      	cmp	r3, #128	; 0x80
 800788a:	d102      	bne.n	8007892 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800788c:	2302      	movs	r3, #2
 800788e:	613b      	str	r3, [r7, #16]
 8007890:	e004      	b.n	800789c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b70      	cmp	r3, #112	; 0x70
 8007896:	d101      	bne.n	800789c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007898:	2301      	movs	r3, #1
 800789a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800789c:	4b0b      	ldr	r3, [pc, #44]	; (80078cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f023 0207 	bic.w	r2, r3, #7
 80078a4:	4909      	ldr	r1, [pc, #36]	; (80078cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80078ac:	4b07      	ldr	r3, [pc, #28]	; (80078cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d001      	beq.n	80078be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e000      	b.n	80078c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3718      	adds	r7, #24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	40021000 	.word	0x40021000
 80078cc:	40022000 	.word	0x40022000

080078d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078d8:	2300      	movs	r3, #0
 80078da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078dc:	2300      	movs	r3, #0
 80078de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d041      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80078f4:	d02a      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80078f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80078fa:	d824      	bhi.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80078fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007900:	d008      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007902:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007906:	d81e      	bhi.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00a      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800790c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007910:	d010      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007912:	e018      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007914:	4b86      	ldr	r3, [pc, #536]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	4a85      	ldr	r2, [pc, #532]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800791a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800791e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007920:	e015      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3304      	adds	r3, #4
 8007926:	2100      	movs	r1, #0
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fabb 	bl	8007ea4 <RCCEx_PLLSAI1_Config>
 800792e:	4603      	mov	r3, r0
 8007930:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007932:	e00c      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3320      	adds	r3, #32
 8007938:	2100      	movs	r1, #0
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fba6 	bl	800808c <RCCEx_PLLSAI2_Config>
 8007940:	4603      	mov	r3, r0
 8007942:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007944:	e003      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	74fb      	strb	r3, [r7, #19]
      break;
 800794a:	e000      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800794c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800794e:	7cfb      	ldrb	r3, [r7, #19]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10b      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007954:	4b76      	ldr	r3, [pc, #472]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007962:	4973      	ldr	r1, [pc, #460]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007964:	4313      	orrs	r3, r2
 8007966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800796a:	e001      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796c:	7cfb      	ldrb	r3, [r7, #19]
 800796e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d041      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007980:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007984:	d02a      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007986:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800798a:	d824      	bhi.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800798c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007990:	d008      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007996:	d81e      	bhi.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00a      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800799c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079a0:	d010      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80079a2:	e018      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80079a4:	4b62      	ldr	r3, [pc, #392]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	4a61      	ldr	r2, [pc, #388]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80079b0:	e015      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	3304      	adds	r3, #4
 80079b6:	2100      	movs	r1, #0
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fa73 	bl	8007ea4 <RCCEx_PLLSAI1_Config>
 80079be:	4603      	mov	r3, r0
 80079c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80079c2:	e00c      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3320      	adds	r3, #32
 80079c8:	2100      	movs	r1, #0
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fb5e 	bl	800808c <RCCEx_PLLSAI2_Config>
 80079d0:	4603      	mov	r3, r0
 80079d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80079d4:	e003      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	74fb      	strb	r3, [r7, #19]
      break;
 80079da:	e000      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80079dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079de:	7cfb      	ldrb	r3, [r7, #19]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10b      	bne.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80079e4:	4b52      	ldr	r3, [pc, #328]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079f2:	494f      	ldr	r1, [pc, #316]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80079fa:	e001      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079fc:	7cfb      	ldrb	r3, [r7, #19]
 80079fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 80a0 	beq.w	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007a12:	4b47      	ldr	r3, [pc, #284]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e000      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007a22:	2300      	movs	r3, #0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00d      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a28:	4b41      	ldr	r3, [pc, #260]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2c:	4a40      	ldr	r2, [pc, #256]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a32:	6593      	str	r3, [r2, #88]	; 0x58
 8007a34:	4b3e      	ldr	r3, [pc, #248]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a3c:	60bb      	str	r3, [r7, #8]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a40:	2301      	movs	r3, #1
 8007a42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a44:	4b3b      	ldr	r3, [pc, #236]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a3a      	ldr	r2, [pc, #232]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a50:	f7fb fec8 	bl	80037e4 <HAL_GetTick>
 8007a54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a56:	e009      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a58:	f7fb fec4 	bl	80037e4 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d902      	bls.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	74fb      	strb	r3, [r7, #19]
        break;
 8007a6a:	e005      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a6c:	4b31      	ldr	r3, [pc, #196]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d0ef      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007a78:	7cfb      	ldrb	r3, [r7, #19]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d15c      	bne.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a7e:	4b2c      	ldr	r3, [pc, #176]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d01f      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d019      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a9c:	4b24      	ldr	r3, [pc, #144]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007aa8:	4b21      	ldr	r3, [pc, #132]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aae:	4a20      	ldr	r2, [pc, #128]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ab8:	4b1d      	ldr	r3, [pc, #116]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007abe:	4a1c      	ldr	r2, [pc, #112]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ac8:	4a19      	ldr	r2, [pc, #100]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d016      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ada:	f7fb fe83 	bl	80037e4 <HAL_GetTick>
 8007ade:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ae0:	e00b      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ae2:	f7fb fe7f 	bl	80037e4 <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d902      	bls.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	74fb      	strb	r3, [r7, #19]
            break;
 8007af8:	e006      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007afa:	4b0d      	ldr	r3, [pc, #52]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0ec      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007b08:	7cfb      	ldrb	r3, [r7, #19]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10c      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b0e:	4b08      	ldr	r3, [pc, #32]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b1e:	4904      	ldr	r1, [pc, #16]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007b26:	e009      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b28:	7cfb      	ldrb	r3, [r7, #19]
 8007b2a:	74bb      	strb	r3, [r7, #18]
 8007b2c:	e006      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007b2e:	bf00      	nop
 8007b30:	40021000 	.word	0x40021000
 8007b34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b38:	7cfb      	ldrb	r3, [r7, #19]
 8007b3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b3c:	7c7b      	ldrb	r3, [r7, #17]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d105      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b42:	4b9e      	ldr	r3, [pc, #632]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b46:	4a9d      	ldr	r2, [pc, #628]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b5a:	4b98      	ldr	r3, [pc, #608]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b60:	f023 0203 	bic.w	r2, r3, #3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b68:	4994      	ldr	r1, [pc, #592]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00a      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b7c:	4b8f      	ldr	r3, [pc, #572]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b82:	f023 020c 	bic.w	r2, r3, #12
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8a:	498c      	ldr	r1, [pc, #560]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0304 	and.w	r3, r3, #4
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b9e:	4b87      	ldr	r3, [pc, #540]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	4983      	ldr	r1, [pc, #524]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0308 	and.w	r3, r3, #8
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00a      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bc0:	4b7e      	ldr	r3, [pc, #504]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bce:	497b      	ldr	r1, [pc, #492]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0310 	and.w	r3, r3, #16
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007be2:	4b76      	ldr	r3, [pc, #472]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf0:	4972      	ldr	r1, [pc, #456]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0320 	and.w	r3, r3, #32
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00a      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c04:	4b6d      	ldr	r3, [pc, #436]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c12:	496a      	ldr	r1, [pc, #424]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c26:	4b65      	ldr	r3, [pc, #404]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c34:	4961      	ldr	r1, [pc, #388]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c48:	4b5c      	ldr	r3, [pc, #368]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c56:	4959      	ldr	r1, [pc, #356]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c6a:	4b54      	ldr	r3, [pc, #336]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c78:	4950      	ldr	r1, [pc, #320]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00a      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c8c:	4b4b      	ldr	r3, [pc, #300]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c9a:	4948      	ldr	r1, [pc, #288]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007cae:	4b43      	ldr	r3, [pc, #268]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cbc:	493f      	ldr	r1, [pc, #252]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d028      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cd0:	4b3a      	ldr	r3, [pc, #232]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cde:	4937      	ldr	r1, [pc, #220]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cee:	d106      	bne.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cf0:	4b32      	ldr	r3, [pc, #200]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	4a31      	ldr	r2, [pc, #196]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cfa:	60d3      	str	r3, [r2, #12]
 8007cfc:	e011      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d06:	d10c      	bne.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 f8c8 	bl	8007ea4 <RCCEx_PLLSAI1_Config>
 8007d14:	4603      	mov	r3, r0
 8007d16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007d18:	7cfb      	ldrb	r3, [r7, #19]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007d1e:	7cfb      	ldrb	r3, [r7, #19]
 8007d20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d028      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d2e:	4b23      	ldr	r3, [pc, #140]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3c:	491f      	ldr	r1, [pc, #124]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d4c:	d106      	bne.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d4e:	4b1b      	ldr	r3, [pc, #108]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	4a1a      	ldr	r2, [pc, #104]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d58:	60d3      	str	r3, [r2, #12]
 8007d5a:	e011      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d64:	d10c      	bne.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 f899 	bl	8007ea4 <RCCEx_PLLSAI1_Config>
 8007d72:	4603      	mov	r3, r0
 8007d74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d76:	7cfb      	ldrb	r3, [r7, #19]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007d7c:	7cfb      	ldrb	r3, [r7, #19]
 8007d7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d02b      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d8c:	4b0b      	ldr	r3, [pc, #44]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d9a:	4908      	ldr	r1, [pc, #32]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007daa:	d109      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dac:	4b03      	ldr	r3, [pc, #12]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	4a02      	ldr	r2, [pc, #8]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007db6:	60d3      	str	r3, [r2, #12]
 8007db8:	e014      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007dba:	bf00      	nop
 8007dbc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007dc8:	d10c      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	2101      	movs	r1, #1
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 f867 	bl	8007ea4 <RCCEx_PLLSAI1_Config>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007dda:	7cfb      	ldrb	r3, [r7, #19]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007de0:	7cfb      	ldrb	r3, [r7, #19]
 8007de2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d02f      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007df0:	4b2b      	ldr	r3, [pc, #172]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dfe:	4928      	ldr	r1, [pc, #160]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e0e:	d10d      	bne.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3304      	adds	r3, #4
 8007e14:	2102      	movs	r1, #2
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 f844 	bl	8007ea4 <RCCEx_PLLSAI1_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e20:	7cfb      	ldrb	r3, [r7, #19]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d014      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007e26:	7cfb      	ldrb	r3, [r7, #19]
 8007e28:	74bb      	strb	r3, [r7, #18]
 8007e2a:	e011      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e34:	d10c      	bne.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3320      	adds	r3, #32
 8007e3a:	2102      	movs	r1, #2
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 f925 	bl	800808c <RCCEx_PLLSAI2_Config>
 8007e42:	4603      	mov	r3, r0
 8007e44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e46:	7cfb      	ldrb	r3, [r7, #19]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007e4c:	7cfb      	ldrb	r3, [r7, #19]
 8007e4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e5c:	4b10      	ldr	r3, [pc, #64]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e6a:	490d      	ldr	r1, [pc, #52]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00b      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e7e:	4b08      	ldr	r3, [pc, #32]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e8e:	4904      	ldr	r1, [pc, #16]	; (8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007e96:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	40021000 	.word	0x40021000

08007ea4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007eb2:	4b75      	ldr	r3, [pc, #468]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d018      	beq.n	8007ef0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007ebe:	4b72      	ldr	r3, [pc, #456]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	f003 0203 	and.w	r2, r3, #3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d10d      	bne.n	8007eea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
       ||
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d009      	beq.n	8007eea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007ed6:	4b6c      	ldr	r3, [pc, #432]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	091b      	lsrs	r3, r3, #4
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
       ||
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d047      	beq.n	8007f7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	73fb      	strb	r3, [r7, #15]
 8007eee:	e044      	b.n	8007f7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d018      	beq.n	8007f2a <RCCEx_PLLSAI1_Config+0x86>
 8007ef8:	2b03      	cmp	r3, #3
 8007efa:	d825      	bhi.n	8007f48 <RCCEx_PLLSAI1_Config+0xa4>
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d002      	beq.n	8007f06 <RCCEx_PLLSAI1_Config+0x62>
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d009      	beq.n	8007f18 <RCCEx_PLLSAI1_Config+0x74>
 8007f04:	e020      	b.n	8007f48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007f06:	4b60      	ldr	r3, [pc, #384]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d11d      	bne.n	8007f4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f16:	e01a      	b.n	8007f4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007f18:	4b5b      	ldr	r3, [pc, #364]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d116      	bne.n	8007f52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f28:	e013      	b.n	8007f52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007f2a:	4b57      	ldr	r3, [pc, #348]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10f      	bne.n	8007f56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007f36:	4b54      	ldr	r3, [pc, #336]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d109      	bne.n	8007f56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f46:	e006      	b.n	8007f56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f4c:	e004      	b.n	8007f58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f4e:	bf00      	nop
 8007f50:	e002      	b.n	8007f58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f52:	bf00      	nop
 8007f54:	e000      	b.n	8007f58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f56:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10d      	bne.n	8007f7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007f5e:	4b4a      	ldr	r3, [pc, #296]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6819      	ldr	r1, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	430b      	orrs	r3, r1
 8007f74:	4944      	ldr	r1, [pc, #272]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d17d      	bne.n	800807c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007f80:	4b41      	ldr	r3, [pc, #260]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a40      	ldr	r2, [pc, #256]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f8c:	f7fb fc2a 	bl	80037e4 <HAL_GetTick>
 8007f90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f92:	e009      	b.n	8007fa8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f94:	f7fb fc26 	bl	80037e4 <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d902      	bls.n	8007fa8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	73fb      	strb	r3, [r7, #15]
        break;
 8007fa6:	e005      	b.n	8007fb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007fa8:	4b37      	ldr	r3, [pc, #220]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1ef      	bne.n	8007f94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d160      	bne.n	800807c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d111      	bne.n	8007fe4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007fc0:	4b31      	ldr	r3, [pc, #196]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	6892      	ldr	r2, [r2, #8]
 8007fd0:	0211      	lsls	r1, r2, #8
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	68d2      	ldr	r2, [r2, #12]
 8007fd6:	0912      	lsrs	r2, r2, #4
 8007fd8:	0452      	lsls	r2, r2, #17
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	492a      	ldr	r1, [pc, #168]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	610b      	str	r3, [r1, #16]
 8007fe2:	e027      	b.n	8008034 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d112      	bne.n	8008010 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007fea:	4b27      	ldr	r3, [pc, #156]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007ff2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	6892      	ldr	r2, [r2, #8]
 8007ffa:	0211      	lsls	r1, r2, #8
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6912      	ldr	r2, [r2, #16]
 8008000:	0852      	lsrs	r2, r2, #1
 8008002:	3a01      	subs	r2, #1
 8008004:	0552      	lsls	r2, r2, #21
 8008006:	430a      	orrs	r2, r1
 8008008:	491f      	ldr	r1, [pc, #124]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800800a:	4313      	orrs	r3, r2
 800800c:	610b      	str	r3, [r1, #16]
 800800e:	e011      	b.n	8008034 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008010:	4b1d      	ldr	r3, [pc, #116]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008018:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	6892      	ldr	r2, [r2, #8]
 8008020:	0211      	lsls	r1, r2, #8
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	6952      	ldr	r2, [r2, #20]
 8008026:	0852      	lsrs	r2, r2, #1
 8008028:	3a01      	subs	r2, #1
 800802a:	0652      	lsls	r2, r2, #25
 800802c:	430a      	orrs	r2, r1
 800802e:	4916      	ldr	r1, [pc, #88]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008030:	4313      	orrs	r3, r2
 8008032:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008034:	4b14      	ldr	r3, [pc, #80]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a13      	ldr	r2, [pc, #76]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800803a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800803e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008040:	f7fb fbd0 	bl	80037e4 <HAL_GetTick>
 8008044:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008046:	e009      	b.n	800805c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008048:	f7fb fbcc 	bl	80037e4 <HAL_GetTick>
 800804c:	4602      	mov	r2, r0
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	2b02      	cmp	r3, #2
 8008054:	d902      	bls.n	800805c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	73fb      	strb	r3, [r7, #15]
          break;
 800805a:	e005      	b.n	8008068 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800805c:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d0ef      	beq.n	8008048 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008068:	7bfb      	ldrb	r3, [r7, #15]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d106      	bne.n	800807c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800806e:	4b06      	ldr	r3, [pc, #24]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008070:	691a      	ldr	r2, [r3, #16]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	4904      	ldr	r1, [pc, #16]	; (8008088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008078:	4313      	orrs	r3, r2
 800807a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800807c:	7bfb      	ldrb	r3, [r7, #15]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	40021000 	.word	0x40021000

0800808c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800809a:	4b6a      	ldr	r3, [pc, #424]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d018      	beq.n	80080d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80080a6:	4b67      	ldr	r3, [pc, #412]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f003 0203 	and.w	r2, r3, #3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d10d      	bne.n	80080d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
       ||
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d009      	beq.n	80080d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80080be:	4b61      	ldr	r3, [pc, #388]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	091b      	lsrs	r3, r3, #4
 80080c4:	f003 0307 	and.w	r3, r3, #7
 80080c8:	1c5a      	adds	r2, r3, #1
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
       ||
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d047      	beq.n	8008162 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	73fb      	strb	r3, [r7, #15]
 80080d6:	e044      	b.n	8008162 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d018      	beq.n	8008112 <RCCEx_PLLSAI2_Config+0x86>
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	d825      	bhi.n	8008130 <RCCEx_PLLSAI2_Config+0xa4>
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d002      	beq.n	80080ee <RCCEx_PLLSAI2_Config+0x62>
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d009      	beq.n	8008100 <RCCEx_PLLSAI2_Config+0x74>
 80080ec:	e020      	b.n	8008130 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80080ee:	4b55      	ldr	r3, [pc, #340]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d11d      	bne.n	8008136 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080fe:	e01a      	b.n	8008136 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008100:	4b50      	ldr	r3, [pc, #320]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008108:	2b00      	cmp	r3, #0
 800810a:	d116      	bne.n	800813a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008110:	e013      	b.n	800813a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008112:	4b4c      	ldr	r3, [pc, #304]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10f      	bne.n	800813e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800811e:	4b49      	ldr	r3, [pc, #292]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d109      	bne.n	800813e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800812e:	e006      	b.n	800813e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	73fb      	strb	r3, [r7, #15]
      break;
 8008134:	e004      	b.n	8008140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008136:	bf00      	nop
 8008138:	e002      	b.n	8008140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800813a:	bf00      	nop
 800813c:	e000      	b.n	8008140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800813e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10d      	bne.n	8008162 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008146:	4b3f      	ldr	r3, [pc, #252]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6819      	ldr	r1, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	3b01      	subs	r3, #1
 8008158:	011b      	lsls	r3, r3, #4
 800815a:	430b      	orrs	r3, r1
 800815c:	4939      	ldr	r1, [pc, #228]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800815e:	4313      	orrs	r3, r2
 8008160:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d167      	bne.n	8008238 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008168:	4b36      	ldr	r3, [pc, #216]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a35      	ldr	r2, [pc, #212]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800816e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008174:	f7fb fb36 	bl	80037e4 <HAL_GetTick>
 8008178:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800817a:	e009      	b.n	8008190 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800817c:	f7fb fb32 	bl	80037e4 <HAL_GetTick>
 8008180:	4602      	mov	r2, r0
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	2b02      	cmp	r3, #2
 8008188:	d902      	bls.n	8008190 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	73fb      	strb	r3, [r7, #15]
        break;
 800818e:	e005      	b.n	800819c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008190:	4b2c      	ldr	r3, [pc, #176]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1ef      	bne.n	800817c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d14a      	bne.n	8008238 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d111      	bne.n	80081cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80081a8:	4b26      	ldr	r3, [pc, #152]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081aa:	695b      	ldr	r3, [r3, #20]
 80081ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80081b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	6892      	ldr	r2, [r2, #8]
 80081b8:	0211      	lsls	r1, r2, #8
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	68d2      	ldr	r2, [r2, #12]
 80081be:	0912      	lsrs	r2, r2, #4
 80081c0:	0452      	lsls	r2, r2, #17
 80081c2:	430a      	orrs	r2, r1
 80081c4:	491f      	ldr	r1, [pc, #124]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	614b      	str	r3, [r1, #20]
 80081ca:	e011      	b.n	80081f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80081cc:	4b1d      	ldr	r3, [pc, #116]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80081d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	6892      	ldr	r2, [r2, #8]
 80081dc:	0211      	lsls	r1, r2, #8
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	6912      	ldr	r2, [r2, #16]
 80081e2:	0852      	lsrs	r2, r2, #1
 80081e4:	3a01      	subs	r2, #1
 80081e6:	0652      	lsls	r2, r2, #25
 80081e8:	430a      	orrs	r2, r1
 80081ea:	4916      	ldr	r1, [pc, #88]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80081f0:	4b14      	ldr	r3, [pc, #80]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a13      	ldr	r2, [pc, #76]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80081f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081fc:	f7fb faf2 	bl	80037e4 <HAL_GetTick>
 8008200:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008202:	e009      	b.n	8008218 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008204:	f7fb faee 	bl	80037e4 <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	2b02      	cmp	r3, #2
 8008210:	d902      	bls.n	8008218 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	73fb      	strb	r3, [r7, #15]
          break;
 8008216:	e005      	b.n	8008224 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008218:	4b0a      	ldr	r3, [pc, #40]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d0ef      	beq.n	8008204 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d106      	bne.n	8008238 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800822a:	4b06      	ldr	r3, [pc, #24]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800822c:	695a      	ldr	r2, [r3, #20]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	4904      	ldr	r1, [pc, #16]	; (8008244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008234:	4313      	orrs	r3, r2
 8008236:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008238:	7bfb      	ldrb	r3, [r7, #15]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	40021000 	.word	0x40021000

08008248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e049      	b.n	80082ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d106      	bne.n	8008274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f841 	bl	80082f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2202      	movs	r2, #2
 8008278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3304      	adds	r3, #4
 8008284:	4619      	mov	r1, r3
 8008286:	4610      	mov	r0, r2
 8008288:	f000 fb4a 	bl	8008920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
	...

0800830c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b01      	cmp	r3, #1
 800831e:	d001      	beq.n	8008324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e04f      	b.n	80083c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0201 	orr.w	r2, r2, #1
 800833a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a23      	ldr	r2, [pc, #140]	; (80083d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d01d      	beq.n	8008382 <HAL_TIM_Base_Start_IT+0x76>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800834e:	d018      	beq.n	8008382 <HAL_TIM_Base_Start_IT+0x76>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a1f      	ldr	r2, [pc, #124]	; (80083d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d013      	beq.n	8008382 <HAL_TIM_Base_Start_IT+0x76>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a1e      	ldr	r2, [pc, #120]	; (80083d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00e      	beq.n	8008382 <HAL_TIM_Base_Start_IT+0x76>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a1c      	ldr	r2, [pc, #112]	; (80083dc <HAL_TIM_Base_Start_IT+0xd0>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d009      	beq.n	8008382 <HAL_TIM_Base_Start_IT+0x76>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a1b      	ldr	r2, [pc, #108]	; (80083e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d004      	beq.n	8008382 <HAL_TIM_Base_Start_IT+0x76>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a19      	ldr	r2, [pc, #100]	; (80083e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d115      	bne.n	80083ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	4b17      	ldr	r3, [pc, #92]	; (80083e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800838a:	4013      	ands	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b06      	cmp	r3, #6
 8008392:	d015      	beq.n	80083c0 <HAL_TIM_Base_Start_IT+0xb4>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800839a:	d011      	beq.n	80083c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0201 	orr.w	r2, r2, #1
 80083aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ac:	e008      	b.n	80083c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f042 0201 	orr.w	r2, r2, #1
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	e000      	b.n	80083c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	40012c00 	.word	0x40012c00
 80083d4:	40000400 	.word	0x40000400
 80083d8:	40000800 	.word	0x40000800
 80083dc:	40000c00 	.word	0x40000c00
 80083e0:	40013400 	.word	0x40013400
 80083e4:	40014000 	.word	0x40014000
 80083e8:	00010007 	.word	0x00010007

080083ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e049      	b.n	8008492 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d106      	bne.n	8008418 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7fa fe1e 	bl	8003054 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3304      	adds	r3, #4
 8008428:	4619      	mov	r1, r3
 800842a:	4610      	mov	r0, r2
 800842c:	f000 fa78 	bl	8008920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f003 0302 	and.w	r3, r3, #2
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d020      	beq.n	80084fe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d01b      	beq.n	80084fe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f06f 0202 	mvn.w	r2, #2
 80084ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	f003 0303 	and.w	r3, r3, #3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f9fd 	bl	80088e4 <HAL_TIM_IC_CaptureCallback>
 80084ea:	e005      	b.n	80084f8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f9ef 	bl	80088d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa00 	bl	80088f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b00      	cmp	r3, #0
 8008506:	d020      	beq.n	800854a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f003 0304 	and.w	r3, r3, #4
 800850e:	2b00      	cmp	r3, #0
 8008510:	d01b      	beq.n	800854a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f06f 0204 	mvn.w	r2, #4
 800851a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2202      	movs	r2, #2
 8008520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f9d7 	bl	80088e4 <HAL_TIM_IC_CaptureCallback>
 8008536:	e005      	b.n	8008544 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f9c9 	bl	80088d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f9da 	bl	80088f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	f003 0308 	and.w	r3, r3, #8
 8008550:	2b00      	cmp	r3, #0
 8008552:	d020      	beq.n	8008596 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f003 0308 	and.w	r3, r3, #8
 800855a:	2b00      	cmp	r3, #0
 800855c:	d01b      	beq.n	8008596 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f06f 0208 	mvn.w	r2, #8
 8008566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2204      	movs	r2, #4
 800856c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	f003 0303 	and.w	r3, r3, #3
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f9b1 	bl	80088e4 <HAL_TIM_IC_CaptureCallback>
 8008582:	e005      	b.n	8008590 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f9a3 	bl	80088d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f9b4 	bl	80088f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f003 0310 	and.w	r3, r3, #16
 800859c:	2b00      	cmp	r3, #0
 800859e:	d020      	beq.n	80085e2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f003 0310 	and.w	r3, r3, #16
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d01b      	beq.n	80085e2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f06f 0210 	mvn.w	r2, #16
 80085b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2208      	movs	r2, #8
 80085b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d003      	beq.n	80085d0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f98b 	bl	80088e4 <HAL_TIM_IC_CaptureCallback>
 80085ce:	e005      	b.n	80085dc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f97d 	bl	80088d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f98e 	bl	80088f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00c      	beq.n	8008606 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d007      	beq.n	8008606 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f06f 0201 	mvn.w	r2, #1
 80085fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7f9 ff3d 	bl	8002480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860c:	2b00      	cmp	r3, #0
 800860e:	d104      	bne.n	800861a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00c      	beq.n	8008634 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008620:	2b00      	cmp	r3, #0
 8008622:	d007      	beq.n	8008634 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800862c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 febc 	bl	80093ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00c      	beq.n	8008658 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008644:	2b00      	cmp	r3, #0
 8008646:	d007      	beq.n	8008658 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 feb4 	bl	80093c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00c      	beq.n	800867c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008668:	2b00      	cmp	r3, #0
 800866a:	d007      	beq.n	800867c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f948 	bl	800890c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f003 0320 	and.w	r3, r3, #32
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00c      	beq.n	80086a0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f003 0320 	and.w	r3, r3, #32
 800868c:	2b00      	cmp	r3, #0
 800868e:	d007      	beq.n	80086a0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f06f 0220 	mvn.w	r2, #32
 8008698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fe7c 	bl	8009398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086a0:	bf00      	nop
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d101      	bne.n	80086c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086c2:	2302      	movs	r3, #2
 80086c4:	e0ff      	b.n	80088c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b14      	cmp	r3, #20
 80086d2:	f200 80f0 	bhi.w	80088b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80086d6:	a201      	add	r2, pc, #4	; (adr r2, 80086dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80086d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086dc:	08008731 	.word	0x08008731
 80086e0:	080088b7 	.word	0x080088b7
 80086e4:	080088b7 	.word	0x080088b7
 80086e8:	080088b7 	.word	0x080088b7
 80086ec:	08008771 	.word	0x08008771
 80086f0:	080088b7 	.word	0x080088b7
 80086f4:	080088b7 	.word	0x080088b7
 80086f8:	080088b7 	.word	0x080088b7
 80086fc:	080087b3 	.word	0x080087b3
 8008700:	080088b7 	.word	0x080088b7
 8008704:	080088b7 	.word	0x080088b7
 8008708:	080088b7 	.word	0x080088b7
 800870c:	080087f3 	.word	0x080087f3
 8008710:	080088b7 	.word	0x080088b7
 8008714:	080088b7 	.word	0x080088b7
 8008718:	080088b7 	.word	0x080088b7
 800871c:	08008835 	.word	0x08008835
 8008720:	080088b7 	.word	0x080088b7
 8008724:	080088b7 	.word	0x080088b7
 8008728:	080088b7 	.word	0x080088b7
 800872c:	08008875 	.word	0x08008875
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	4618      	mov	r0, r3
 8008738:	f000 f998 	bl	8008a6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	699a      	ldr	r2, [r3, #24]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f042 0208 	orr.w	r2, r2, #8
 800874a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	699a      	ldr	r2, [r3, #24]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f022 0204 	bic.w	r2, r2, #4
 800875a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6999      	ldr	r1, [r3, #24]
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	691a      	ldr	r2, [r3, #16]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	619a      	str	r2, [r3, #24]
      break;
 800876e:	e0a5      	b.n	80088bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68b9      	ldr	r1, [r7, #8]
 8008776:	4618      	mov	r0, r3
 8008778:	f000 fa08 	bl	8008b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	699a      	ldr	r2, [r3, #24]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800878a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	699a      	ldr	r2, [r3, #24]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800879a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6999      	ldr	r1, [r3, #24]
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	021a      	lsls	r2, r3, #8
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	619a      	str	r2, [r3, #24]
      break;
 80087b0:	e084      	b.n	80088bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68b9      	ldr	r1, [r7, #8]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 fa71 	bl	8008ca0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	69da      	ldr	r2, [r3, #28]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f042 0208 	orr.w	r2, r2, #8
 80087cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	69da      	ldr	r2, [r3, #28]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0204 	bic.w	r2, r2, #4
 80087dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69d9      	ldr	r1, [r3, #28]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	691a      	ldr	r2, [r3, #16]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	61da      	str	r2, [r3, #28]
      break;
 80087f0:	e064      	b.n	80088bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68b9      	ldr	r1, [r7, #8]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 fad9 	bl	8008db0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	69da      	ldr	r2, [r3, #28]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800880c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	69da      	ldr	r2, [r3, #28]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800881c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	69d9      	ldr	r1, [r3, #28]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	021a      	lsls	r2, r3, #8
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	61da      	str	r2, [r3, #28]
      break;
 8008832:	e043      	b.n	80088bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68b9      	ldr	r1, [r7, #8]
 800883a:	4618      	mov	r0, r3
 800883c:	f000 fb22 	bl	8008e84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f042 0208 	orr.w	r2, r2, #8
 800884e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 0204 	bic.w	r2, r2, #4
 800885e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	691a      	ldr	r2, [r3, #16]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008872:	e023      	b.n	80088bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68b9      	ldr	r1, [r7, #8]
 800887a:	4618      	mov	r0, r3
 800887c:	f000 fb66 	bl	8008f4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800888e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800889e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	021a      	lsls	r2, r3, #8
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	430a      	orrs	r2, r1
 80088b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088b4:	e002      	b.n	80088bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	75fb      	strb	r3, [r7, #23]
      break;
 80088ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop

080088d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a46      	ldr	r2, [pc, #280]	; (8008a4c <TIM_Base_SetConfig+0x12c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d013      	beq.n	8008960 <TIM_Base_SetConfig+0x40>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800893e:	d00f      	beq.n	8008960 <TIM_Base_SetConfig+0x40>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a43      	ldr	r2, [pc, #268]	; (8008a50 <TIM_Base_SetConfig+0x130>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d00b      	beq.n	8008960 <TIM_Base_SetConfig+0x40>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a42      	ldr	r2, [pc, #264]	; (8008a54 <TIM_Base_SetConfig+0x134>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d007      	beq.n	8008960 <TIM_Base_SetConfig+0x40>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a41      	ldr	r2, [pc, #260]	; (8008a58 <TIM_Base_SetConfig+0x138>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d003      	beq.n	8008960 <TIM_Base_SetConfig+0x40>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a40      	ldr	r2, [pc, #256]	; (8008a5c <TIM_Base_SetConfig+0x13c>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d108      	bne.n	8008972 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	4313      	orrs	r3, r2
 8008970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a35      	ldr	r2, [pc, #212]	; (8008a4c <TIM_Base_SetConfig+0x12c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d01f      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008980:	d01b      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a32      	ldr	r2, [pc, #200]	; (8008a50 <TIM_Base_SetConfig+0x130>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d017      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a31      	ldr	r2, [pc, #196]	; (8008a54 <TIM_Base_SetConfig+0x134>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d013      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a30      	ldr	r2, [pc, #192]	; (8008a58 <TIM_Base_SetConfig+0x138>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d00f      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a2f      	ldr	r2, [pc, #188]	; (8008a5c <TIM_Base_SetConfig+0x13c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d00b      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a2e      	ldr	r2, [pc, #184]	; (8008a60 <TIM_Base_SetConfig+0x140>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d007      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a2d      	ldr	r2, [pc, #180]	; (8008a64 <TIM_Base_SetConfig+0x144>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d003      	beq.n	80089ba <TIM_Base_SetConfig+0x9a>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a2c      	ldr	r2, [pc, #176]	; (8008a68 <TIM_Base_SetConfig+0x148>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d108      	bne.n	80089cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	689a      	ldr	r2, [r3, #8]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a16      	ldr	r2, [pc, #88]	; (8008a4c <TIM_Base_SetConfig+0x12c>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d00f      	beq.n	8008a18 <TIM_Base_SetConfig+0xf8>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a18      	ldr	r2, [pc, #96]	; (8008a5c <TIM_Base_SetConfig+0x13c>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d00b      	beq.n	8008a18 <TIM_Base_SetConfig+0xf8>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a17      	ldr	r2, [pc, #92]	; (8008a60 <TIM_Base_SetConfig+0x140>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d007      	beq.n	8008a18 <TIM_Base_SetConfig+0xf8>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a16      	ldr	r2, [pc, #88]	; (8008a64 <TIM_Base_SetConfig+0x144>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d003      	beq.n	8008a18 <TIM_Base_SetConfig+0xf8>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a15      	ldr	r2, [pc, #84]	; (8008a68 <TIM_Base_SetConfig+0x148>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d103      	bne.n	8008a20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	691a      	ldr	r2, [r3, #16]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d105      	bne.n	8008a3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	f023 0201 	bic.w	r2, r3, #1
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	611a      	str	r2, [r3, #16]
  }
}
 8008a3e:	bf00      	nop
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	40012c00 	.word	0x40012c00
 8008a50:	40000400 	.word	0x40000400
 8008a54:	40000800 	.word	0x40000800
 8008a58:	40000c00 	.word	0x40000c00
 8008a5c:	40013400 	.word	0x40013400
 8008a60:	40014000 	.word	0x40014000
 8008a64:	40014400 	.word	0x40014400
 8008a68:	40014800 	.word	0x40014800

08008a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	f023 0201 	bic.w	r2, r3, #1
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f023 0303 	bic.w	r3, r3, #3
 8008aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f023 0302 	bic.w	r3, r3, #2
 8008ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a2c      	ldr	r2, [pc, #176]	; (8008b78 <TIM_OC1_SetConfig+0x10c>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d00f      	beq.n	8008aec <TIM_OC1_SetConfig+0x80>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a2b      	ldr	r2, [pc, #172]	; (8008b7c <TIM_OC1_SetConfig+0x110>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d00b      	beq.n	8008aec <TIM_OC1_SetConfig+0x80>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a2a      	ldr	r2, [pc, #168]	; (8008b80 <TIM_OC1_SetConfig+0x114>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d007      	beq.n	8008aec <TIM_OC1_SetConfig+0x80>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a29      	ldr	r2, [pc, #164]	; (8008b84 <TIM_OC1_SetConfig+0x118>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d003      	beq.n	8008aec <TIM_OC1_SetConfig+0x80>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a28      	ldr	r2, [pc, #160]	; (8008b88 <TIM_OC1_SetConfig+0x11c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d10c      	bne.n	8008b06 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f023 0308 	bic.w	r3, r3, #8
 8008af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f023 0304 	bic.w	r3, r3, #4
 8008b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a1b      	ldr	r2, [pc, #108]	; (8008b78 <TIM_OC1_SetConfig+0x10c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d00f      	beq.n	8008b2e <TIM_OC1_SetConfig+0xc2>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a1a      	ldr	r2, [pc, #104]	; (8008b7c <TIM_OC1_SetConfig+0x110>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d00b      	beq.n	8008b2e <TIM_OC1_SetConfig+0xc2>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a19      	ldr	r2, [pc, #100]	; (8008b80 <TIM_OC1_SetConfig+0x114>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d007      	beq.n	8008b2e <TIM_OC1_SetConfig+0xc2>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a18      	ldr	r2, [pc, #96]	; (8008b84 <TIM_OC1_SetConfig+0x118>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d003      	beq.n	8008b2e <TIM_OC1_SetConfig+0xc2>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a17      	ldr	r2, [pc, #92]	; (8008b88 <TIM_OC1_SetConfig+0x11c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d111      	bne.n	8008b52 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	621a      	str	r2, [r3, #32]
}
 8008b6c:	bf00      	nop
 8008b6e:	371c      	adds	r7, #28
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	40012c00 	.word	0x40012c00
 8008b7c:	40013400 	.word	0x40013400
 8008b80:	40014000 	.word	0x40014000
 8008b84:	40014400 	.word	0x40014400
 8008b88:	40014800 	.word	0x40014800

08008b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b087      	sub	sp, #28
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	f023 0210 	bic.w	r2, r3, #16
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	021b      	lsls	r3, r3, #8
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	f023 0320 	bic.w	r3, r3, #32
 8008bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	011b      	lsls	r3, r3, #4
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a28      	ldr	r2, [pc, #160]	; (8008c8c <TIM_OC2_SetConfig+0x100>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d003      	beq.n	8008bf8 <TIM_OC2_SetConfig+0x6c>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a27      	ldr	r2, [pc, #156]	; (8008c90 <TIM_OC2_SetConfig+0x104>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d10d      	bne.n	8008c14 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	011b      	lsls	r3, r3, #4
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a1d      	ldr	r2, [pc, #116]	; (8008c8c <TIM_OC2_SetConfig+0x100>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d00f      	beq.n	8008c3c <TIM_OC2_SetConfig+0xb0>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a1c      	ldr	r2, [pc, #112]	; (8008c90 <TIM_OC2_SetConfig+0x104>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d00b      	beq.n	8008c3c <TIM_OC2_SetConfig+0xb0>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a1b      	ldr	r2, [pc, #108]	; (8008c94 <TIM_OC2_SetConfig+0x108>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d007      	beq.n	8008c3c <TIM_OC2_SetConfig+0xb0>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a1a      	ldr	r2, [pc, #104]	; (8008c98 <TIM_OC2_SetConfig+0x10c>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d003      	beq.n	8008c3c <TIM_OC2_SetConfig+0xb0>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a19      	ldr	r2, [pc, #100]	; (8008c9c <TIM_OC2_SetConfig+0x110>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d113      	bne.n	8008c64 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	621a      	str	r2, [r3, #32]
}
 8008c7e:	bf00      	nop
 8008c80:	371c      	adds	r7, #28
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	40012c00 	.word	0x40012c00
 8008c90:	40013400 	.word	0x40013400
 8008c94:	40014000 	.word	0x40014000
 8008c98:	40014400 	.word	0x40014400
 8008c9c:	40014800 	.word	0x40014800

08008ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f023 0303 	bic.w	r3, r3, #3
 8008cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	021b      	lsls	r3, r3, #8
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a27      	ldr	r2, [pc, #156]	; (8008d9c <TIM_OC3_SetConfig+0xfc>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d003      	beq.n	8008d0a <TIM_OC3_SetConfig+0x6a>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a26      	ldr	r2, [pc, #152]	; (8008da0 <TIM_OC3_SetConfig+0x100>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d10d      	bne.n	8008d26 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a1c      	ldr	r2, [pc, #112]	; (8008d9c <TIM_OC3_SetConfig+0xfc>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d00f      	beq.n	8008d4e <TIM_OC3_SetConfig+0xae>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a1b      	ldr	r2, [pc, #108]	; (8008da0 <TIM_OC3_SetConfig+0x100>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d00b      	beq.n	8008d4e <TIM_OC3_SetConfig+0xae>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a1a      	ldr	r2, [pc, #104]	; (8008da4 <TIM_OC3_SetConfig+0x104>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d007      	beq.n	8008d4e <TIM_OC3_SetConfig+0xae>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a19      	ldr	r2, [pc, #100]	; (8008da8 <TIM_OC3_SetConfig+0x108>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d003      	beq.n	8008d4e <TIM_OC3_SetConfig+0xae>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a18      	ldr	r2, [pc, #96]	; (8008dac <TIM_OC3_SetConfig+0x10c>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d113      	bne.n	8008d76 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	011b      	lsls	r3, r3, #4
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	011b      	lsls	r3, r3, #4
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	621a      	str	r2, [r3, #32]
}
 8008d90:	bf00      	nop
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	40012c00 	.word	0x40012c00
 8008da0:	40013400 	.word	0x40013400
 8008da4:	40014000 	.word	0x40014000
 8008da8:	40014400 	.word	0x40014400
 8008dac:	40014800 	.word	0x40014800

08008db0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	021b      	lsls	r3, r3, #8
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	031b      	lsls	r3, r3, #12
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a18      	ldr	r2, [pc, #96]	; (8008e70 <TIM_OC4_SetConfig+0xc0>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d00f      	beq.n	8008e34 <TIM_OC4_SetConfig+0x84>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a17      	ldr	r2, [pc, #92]	; (8008e74 <TIM_OC4_SetConfig+0xc4>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d00b      	beq.n	8008e34 <TIM_OC4_SetConfig+0x84>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a16      	ldr	r2, [pc, #88]	; (8008e78 <TIM_OC4_SetConfig+0xc8>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d007      	beq.n	8008e34 <TIM_OC4_SetConfig+0x84>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a15      	ldr	r2, [pc, #84]	; (8008e7c <TIM_OC4_SetConfig+0xcc>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d003      	beq.n	8008e34 <TIM_OC4_SetConfig+0x84>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a14      	ldr	r2, [pc, #80]	; (8008e80 <TIM_OC4_SetConfig+0xd0>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d109      	bne.n	8008e48 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	019b      	lsls	r3, r3, #6
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685a      	ldr	r2, [r3, #4]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	621a      	str	r2, [r3, #32]
}
 8008e62:	bf00      	nop
 8008e64:	371c      	adds	r7, #28
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	40012c00 	.word	0x40012c00
 8008e74:	40013400 	.word	0x40013400
 8008e78:	40014000 	.word	0x40014000
 8008e7c:	40014400 	.word	0x40014400
 8008e80:	40014800 	.word	0x40014800

08008e84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ec8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	041b      	lsls	r3, r3, #16
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a17      	ldr	r2, [pc, #92]	; (8008f38 <TIM_OC5_SetConfig+0xb4>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d00f      	beq.n	8008efe <TIM_OC5_SetConfig+0x7a>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a16      	ldr	r2, [pc, #88]	; (8008f3c <TIM_OC5_SetConfig+0xb8>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d00b      	beq.n	8008efe <TIM_OC5_SetConfig+0x7a>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a15      	ldr	r2, [pc, #84]	; (8008f40 <TIM_OC5_SetConfig+0xbc>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d007      	beq.n	8008efe <TIM_OC5_SetConfig+0x7a>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a14      	ldr	r2, [pc, #80]	; (8008f44 <TIM_OC5_SetConfig+0xc0>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d003      	beq.n	8008efe <TIM_OC5_SetConfig+0x7a>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a13      	ldr	r2, [pc, #76]	; (8008f48 <TIM_OC5_SetConfig+0xc4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d109      	bne.n	8008f12 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	021b      	lsls	r3, r3, #8
 8008f0c:	697a      	ldr	r2, [r7, #20]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	621a      	str	r2, [r3, #32]
}
 8008f2c:	bf00      	nop
 8008f2e:	371c      	adds	r7, #28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	40012c00 	.word	0x40012c00
 8008f3c:	40013400 	.word	0x40013400
 8008f40:	40014000 	.word	0x40014000
 8008f44:	40014400 	.word	0x40014400
 8008f48:	40014800 	.word	0x40014800

08008f4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b087      	sub	sp, #28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a1b      	ldr	r3, [r3, #32]
 8008f60:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	021b      	lsls	r3, r3, #8
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	051b      	lsls	r3, r3, #20
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a18      	ldr	r2, [pc, #96]	; (8009004 <TIM_OC6_SetConfig+0xb8>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d00f      	beq.n	8008fc8 <TIM_OC6_SetConfig+0x7c>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a17      	ldr	r2, [pc, #92]	; (8009008 <TIM_OC6_SetConfig+0xbc>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d00b      	beq.n	8008fc8 <TIM_OC6_SetConfig+0x7c>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a16      	ldr	r2, [pc, #88]	; (800900c <TIM_OC6_SetConfig+0xc0>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d007      	beq.n	8008fc8 <TIM_OC6_SetConfig+0x7c>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a15      	ldr	r2, [pc, #84]	; (8009010 <TIM_OC6_SetConfig+0xc4>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d003      	beq.n	8008fc8 <TIM_OC6_SetConfig+0x7c>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a14      	ldr	r2, [pc, #80]	; (8009014 <TIM_OC6_SetConfig+0xc8>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d109      	bne.n	8008fdc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	029b      	lsls	r3, r3, #10
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	621a      	str	r2, [r3, #32]
}
 8008ff6:	bf00      	nop
 8008ff8:	371c      	adds	r7, #28
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	40012c00 	.word	0x40012c00
 8009008:	40013400 	.word	0x40013400
 800900c:	40014000 	.word	0x40014000
 8009010:	40014400 	.word	0x40014400
 8009014:	40014800 	.word	0x40014800

08009018 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d109      	bne.n	800903c <HAL_TIMEx_PWMN_Start+0x24>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b01      	cmp	r3, #1
 8009032:	bf14      	ite	ne
 8009034:	2301      	movne	r3, #1
 8009036:	2300      	moveq	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	e022      	b.n	8009082 <HAL_TIMEx_PWMN_Start+0x6a>
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b04      	cmp	r3, #4
 8009040:	d109      	bne.n	8009056 <HAL_TIMEx_PWMN_Start+0x3e>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b01      	cmp	r3, #1
 800904c:	bf14      	ite	ne
 800904e:	2301      	movne	r3, #1
 8009050:	2300      	moveq	r3, #0
 8009052:	b2db      	uxtb	r3, r3
 8009054:	e015      	b.n	8009082 <HAL_TIMEx_PWMN_Start+0x6a>
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b08      	cmp	r3, #8
 800905a:	d109      	bne.n	8009070 <HAL_TIMEx_PWMN_Start+0x58>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b01      	cmp	r3, #1
 8009066:	bf14      	ite	ne
 8009068:	2301      	movne	r3, #1
 800906a:	2300      	moveq	r3, #0
 800906c:	b2db      	uxtb	r3, r3
 800906e:	e008      	b.n	8009082 <HAL_TIMEx_PWMN_Start+0x6a>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009076:	b2db      	uxtb	r3, r3
 8009078:	2b01      	cmp	r3, #1
 800907a:	bf14      	ite	ne
 800907c:	2301      	movne	r3, #1
 800907e:	2300      	moveq	r3, #0
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e06e      	b.n	8009168 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d104      	bne.n	800909a <HAL_TIMEx_PWMN_Start+0x82>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2202      	movs	r2, #2
 8009094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009098:	e013      	b.n	80090c2 <HAL_TIMEx_PWMN_Start+0xaa>
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	2b04      	cmp	r3, #4
 800909e:	d104      	bne.n	80090aa <HAL_TIMEx_PWMN_Start+0x92>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090a8:	e00b      	b.n	80090c2 <HAL_TIMEx_PWMN_Start+0xaa>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b08      	cmp	r3, #8
 80090ae:	d104      	bne.n	80090ba <HAL_TIMEx_PWMN_Start+0xa2>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2202      	movs	r2, #2
 80090b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090b8:	e003      	b.n	80090c2 <HAL_TIMEx_PWMN_Start+0xaa>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2202      	movs	r2, #2
 80090be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2204      	movs	r2, #4
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 f982 	bl	80093d4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a22      	ldr	r2, [pc, #136]	; (8009170 <HAL_TIMEx_PWMN_Start+0x158>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d01d      	beq.n	8009126 <HAL_TIMEx_PWMN_Start+0x10e>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090f2:	d018      	beq.n	8009126 <HAL_TIMEx_PWMN_Start+0x10e>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a1e      	ldr	r2, [pc, #120]	; (8009174 <HAL_TIMEx_PWMN_Start+0x15c>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d013      	beq.n	8009126 <HAL_TIMEx_PWMN_Start+0x10e>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a1d      	ldr	r2, [pc, #116]	; (8009178 <HAL_TIMEx_PWMN_Start+0x160>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d00e      	beq.n	8009126 <HAL_TIMEx_PWMN_Start+0x10e>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a1b      	ldr	r2, [pc, #108]	; (800917c <HAL_TIMEx_PWMN_Start+0x164>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d009      	beq.n	8009126 <HAL_TIMEx_PWMN_Start+0x10e>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a1a      	ldr	r2, [pc, #104]	; (8009180 <HAL_TIMEx_PWMN_Start+0x168>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d004      	beq.n	8009126 <HAL_TIMEx_PWMN_Start+0x10e>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a18      	ldr	r2, [pc, #96]	; (8009184 <HAL_TIMEx_PWMN_Start+0x16c>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d115      	bne.n	8009152 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	689a      	ldr	r2, [r3, #8]
 800912c:	4b16      	ldr	r3, [pc, #88]	; (8009188 <HAL_TIMEx_PWMN_Start+0x170>)
 800912e:	4013      	ands	r3, r2
 8009130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2b06      	cmp	r3, #6
 8009136:	d015      	beq.n	8009164 <HAL_TIMEx_PWMN_Start+0x14c>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800913e:	d011      	beq.n	8009164 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f042 0201 	orr.w	r2, r2, #1
 800914e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009150:	e008      	b.n	8009164 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f042 0201 	orr.w	r2, r2, #1
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	e000      	b.n	8009166 <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009164:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	40012c00 	.word	0x40012c00
 8009174:	40000400 	.word	0x40000400
 8009178:	40000800 	.word	0x40000800
 800917c:	40000c00 	.word	0x40000c00
 8009180:	40013400 	.word	0x40013400
 8009184:	40014000 	.word	0x40014000
 8009188:	00010007 	.word	0x00010007

0800918c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800919c:	2b01      	cmp	r3, #1
 800919e:	d101      	bne.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091a0:	2302      	movs	r3, #2
 80091a2:	e068      	b.n	8009276 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2202      	movs	r2, #2
 80091b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a2e      	ldr	r2, [pc, #184]	; (8009284 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d004      	beq.n	80091d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a2d      	ldr	r2, [pc, #180]	; (8009288 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d108      	bne.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80091de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a1e      	ldr	r2, [pc, #120]	; (8009284 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d01d      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009216:	d018      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a1b      	ldr	r2, [pc, #108]	; (800928c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d013      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a1a      	ldr	r2, [pc, #104]	; (8009290 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d00e      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a18      	ldr	r2, [pc, #96]	; (8009294 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d009      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a13      	ldr	r2, [pc, #76]	; (8009288 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d004      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a14      	ldr	r2, [pc, #80]	; (8009298 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d10c      	bne.n	8009264 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	4313      	orrs	r3, r2
 800925a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	40012c00 	.word	0x40012c00
 8009288:	40013400 	.word	0x40013400
 800928c:	40000400 	.word	0x40000400
 8009290:	40000800 	.word	0x40000800
 8009294:	40000c00 	.word	0x40000c00
 8009298:	40014000 	.word	0x40014000

0800929c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80092a6:	2300      	movs	r3, #0
 80092a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d101      	bne.n	80092b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80092b4:	2302      	movs	r3, #2
 80092b6:	e065      	b.n	8009384 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	4313      	orrs	r3, r2
 80092da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	4313      	orrs	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	4313      	orrs	r3, r2
 8009312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931e:	4313      	orrs	r3, r2
 8009320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	041b      	lsls	r3, r3, #16
 800932e:	4313      	orrs	r3, r2
 8009330:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a16      	ldr	r2, [pc, #88]	; (8009390 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d004      	beq.n	8009346 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a14      	ldr	r2, [pc, #80]	; (8009394 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d115      	bne.n	8009372 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	051b      	lsls	r3, r3, #20
 8009352:	4313      	orrs	r3, r2
 8009354:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	69db      	ldr	r3, [r3, #28]
 8009360:	4313      	orrs	r3, r2
 8009362:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	4313      	orrs	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3714      	adds	r7, #20
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	40012c00 	.word	0x40012c00
 8009394:	40013400 	.word	0x40013400

08009398 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b087      	sub	sp, #28
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	f003 030f 	and.w	r3, r3, #15
 80093e6:	2204      	movs	r2, #4
 80093e8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6a1a      	ldr	r2, [r3, #32]
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	43db      	mvns	r3, r3
 80093f6:	401a      	ands	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6a1a      	ldr	r2, [r3, #32]
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	f003 030f 	and.w	r3, r3, #15
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	fa01 f303 	lsl.w	r3, r1, r3
 800940c:	431a      	orrs	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	621a      	str	r2, [r3, #32]
}
 8009412:	bf00      	nop
 8009414:	371c      	adds	r7, #28
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b082      	sub	sp, #8
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e040      	b.n	80094b2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009434:	2b00      	cmp	r3, #0
 8009436:	d106      	bne.n	8009446 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7f9 fe5f 	bl	8003104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2224      	movs	r2, #36	; 0x24
 800944a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f022 0201 	bic.w	r2, r2, #1
 800945a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fee7 	bl	800a238 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fc2c 	bl	8009cc8 <UART_SetConfig>
 8009470:	4603      	mov	r3, r0
 8009472:	2b01      	cmp	r3, #1
 8009474:	d101      	bne.n	800947a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e01b      	b.n	80094b2 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009488:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	689a      	ldr	r2, [r3, #8]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009498:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f042 0201 	orr.w	r2, r2, #1
 80094a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 ff66 	bl	800a37c <UART_CheckIdleState>
 80094b0:	4603      	mov	r3, r0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b08a      	sub	sp, #40	; 0x28
 80094be:	af02      	add	r7, sp, #8
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	603b      	str	r3, [r7, #0]
 80094c6:	4613      	mov	r3, r2
 80094c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094ce:	2b20      	cmp	r3, #32
 80094d0:	d178      	bne.n	80095c4 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <HAL_UART_Transmit+0x24>
 80094d8:	88fb      	ldrh	r3, [r7, #6]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e071      	b.n	80095c6 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2221      	movs	r2, #33	; 0x21
 80094ee:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094f0:	f7fa f978 	bl	80037e4 <HAL_GetTick>
 80094f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	88fa      	ldrh	r2, [r7, #6]
 80094fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	88fa      	ldrh	r2, [r7, #6]
 8009502:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800950e:	d108      	bne.n	8009522 <HAL_UART_Transmit+0x68>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d104      	bne.n	8009522 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009518:	2300      	movs	r3, #0
 800951a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	61bb      	str	r3, [r7, #24]
 8009520:	e003      	b.n	800952a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009526:	2300      	movs	r3, #0
 8009528:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800952a:	e030      	b.n	800958e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2200      	movs	r2, #0
 8009534:	2180      	movs	r1, #128	; 0x80
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 ffc8 	bl	800a4cc <UART_WaitOnFlagUntilTimeout>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d004      	beq.n	800954c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2220      	movs	r2, #32
 8009546:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	e03c      	b.n	80095c6 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10b      	bne.n	800956a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	881a      	ldrh	r2, [r3, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800955e:	b292      	uxth	r2, r2
 8009560:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	3302      	adds	r3, #2
 8009566:	61bb      	str	r3, [r7, #24]
 8009568:	e008      	b.n	800957c <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	781a      	ldrb	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	b292      	uxth	r2, r2
 8009574:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	3301      	adds	r3, #1
 800957a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009582:	b29b      	uxth	r3, r3
 8009584:	3b01      	subs	r3, #1
 8009586:	b29a      	uxth	r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1c8      	bne.n	800952c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2200      	movs	r2, #0
 80095a2:	2140      	movs	r1, #64	; 0x40
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f000 ff91 	bl	800a4cc <UART_WaitOnFlagUntilTimeout>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d004      	beq.n	80095ba <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2220      	movs	r2, #32
 80095b4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80095b6:	2303      	movs	r3, #3
 80095b8:	e005      	b.n	80095c6 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2220      	movs	r2, #32
 80095be:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	e000      	b.n	80095c6 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80095c4:	2302      	movs	r3, #2
  }
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3720      	adds	r7, #32
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08a      	sub	sp, #40	; 0x28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	4613      	mov	r3, r2
 80095dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095e4:	2b20      	cmp	r3, #32
 80095e6:	d137      	bne.n	8009658 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d002      	beq.n	80095f4 <HAL_UART_Receive_DMA+0x24>
 80095ee:	88fb      	ldrh	r3, [r7, #6]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d101      	bne.n	80095f8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e030      	b.n	800965a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a18      	ldr	r2, [pc, #96]	; (8009664 <HAL_UART_Receive_DMA+0x94>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d01f      	beq.n	8009648 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d018      	beq.n	8009648 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	e853 3f00 	ldrex	r3, [r3]
 8009622:	613b      	str	r3, [r7, #16]
   return(result);
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800962a:	627b      	str	r3, [r7, #36]	; 0x24
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	461a      	mov	r2, r3
 8009632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009634:	623b      	str	r3, [r7, #32]
 8009636:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009638:	69f9      	ldr	r1, [r7, #28]
 800963a:	6a3a      	ldr	r2, [r7, #32]
 800963c:	e841 2300 	strex	r3, r2, [r1]
 8009640:	61bb      	str	r3, [r7, #24]
   return(result);
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e6      	bne.n	8009616 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009648:	88fb      	ldrh	r3, [r7, #6]
 800964a:	461a      	mov	r2, r3
 800964c:	68b9      	ldr	r1, [r7, #8]
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 ffaa 	bl	800a5a8 <UART_Start_Receive_DMA>
 8009654:	4603      	mov	r3, r0
 8009656:	e000      	b.n	800965a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009658:	2302      	movs	r3, #2
  }
}
 800965a:	4618      	mov	r0, r3
 800965c:	3728      	adds	r7, #40	; 0x28
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	40008000 	.word	0x40008000

08009668 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b0ba      	sub	sp, #232	; 0xe8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800968e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009692:	f640 030f 	movw	r3, #2063	; 0x80f
 8009696:	4013      	ands	r3, r2
 8009698:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800969c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d115      	bne.n	80096d0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80096a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096a8:	f003 0320 	and.w	r3, r3, #32
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00f      	beq.n	80096d0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80096b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096b4:	f003 0320 	and.w	r3, r3, #32
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d009      	beq.n	80096d0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f000 82ca 	beq.w	8009c5a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	4798      	blx	r3
      }
      return;
 80096ce:	e2c4      	b.n	8009c5a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80096d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 8117 	beq.w	8009908 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80096da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d106      	bne.n	80096f4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80096e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80096ea:	4b85      	ldr	r3, [pc, #532]	; (8009900 <HAL_UART_IRQHandler+0x298>)
 80096ec:	4013      	ands	r3, r2
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 810a 	beq.w	8009908 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d011      	beq.n	8009724 <HAL_UART_IRQHandler+0xbc>
 8009700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00b      	beq.n	8009724 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2201      	movs	r2, #1
 8009712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800971a:	f043 0201 	orr.w	r2, r3, #1
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009728:	f003 0302 	and.w	r3, r3, #2
 800972c:	2b00      	cmp	r3, #0
 800972e:	d011      	beq.n	8009754 <HAL_UART_IRQHandler+0xec>
 8009730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00b      	beq.n	8009754 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2202      	movs	r2, #2
 8009742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800974a:	f043 0204 	orr.w	r2, r3, #4
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	2b00      	cmp	r3, #0
 800975e:	d011      	beq.n	8009784 <HAL_UART_IRQHandler+0x11c>
 8009760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00b      	beq.n	8009784 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2204      	movs	r2, #4
 8009772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800977a:	f043 0202 	orr.w	r2, r3, #2
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009788:	f003 0308 	and.w	r3, r3, #8
 800978c:	2b00      	cmp	r3, #0
 800978e:	d017      	beq.n	80097c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009794:	f003 0320 	and.w	r3, r3, #32
 8009798:	2b00      	cmp	r3, #0
 800979a:	d105      	bne.n	80097a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800979c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00b      	beq.n	80097c0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2208      	movs	r2, #8
 80097ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097b6:	f043 0208 	orr.w	r2, r3, #8
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80097c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d012      	beq.n	80097f2 <HAL_UART_IRQHandler+0x18a>
 80097cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00c      	beq.n	80097f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097e8:	f043 0220 	orr.w	r2, r3, #32
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 8230 	beq.w	8009c5e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80097fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009802:	f003 0320 	and.w	r3, r3, #32
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00d      	beq.n	8009826 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800980a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800980e:	f003 0320 	and.w	r3, r3, #32
 8009812:	2b00      	cmp	r3, #0
 8009814:	d007      	beq.n	8009826 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800981a:	2b00      	cmp	r3, #0
 800981c:	d003      	beq.n	8009826 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800982c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983a:	2b40      	cmp	r3, #64	; 0x40
 800983c:	d005      	beq.n	800984a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800983e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009842:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009846:	2b00      	cmp	r3, #0
 8009848:	d04f      	beq.n	80098ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 ff72 	bl	800a734 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985a:	2b40      	cmp	r3, #64	; 0x40
 800985c:	d141      	bne.n	80098e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3308      	adds	r3, #8
 8009864:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009868:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800986c:	e853 3f00 	ldrex	r3, [r3]
 8009870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009874:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800987c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3308      	adds	r3, #8
 8009886:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800988a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800988e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009892:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009896:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800989a:	e841 2300 	strex	r3, r2, [r1]
 800989e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80098a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1d9      	bne.n	800985e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d013      	beq.n	80098da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098b6:	4a13      	ldr	r2, [pc, #76]	; (8009904 <HAL_UART_IRQHandler+0x29c>)
 80098b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fb fdb8 	bl	8005434 <HAL_DMA_Abort_IT>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d017      	beq.n	80098fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80098d4:	4610      	mov	r0, r2
 80098d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d8:	e00f      	b.n	80098fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 f9de 	bl	8009c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098e0:	e00b      	b.n	80098fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f9da 	bl	8009c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098e8:	e007      	b.n	80098fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f9d6 	bl	8009c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80098f8:	e1b1      	b.n	8009c5e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098fa:	bf00      	nop
    return;
 80098fc:	e1af      	b.n	8009c5e <HAL_UART_IRQHandler+0x5f6>
 80098fe:	bf00      	nop
 8009900:	04000120 	.word	0x04000120
 8009904:	0800a9e5 	.word	0x0800a9e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800990c:	2b01      	cmp	r3, #1
 800990e:	f040 816a 	bne.w	8009be6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009916:	f003 0310 	and.w	r3, r3, #16
 800991a:	2b00      	cmp	r3, #0
 800991c:	f000 8163 	beq.w	8009be6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009924:	f003 0310 	and.w	r3, r3, #16
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 815c 	beq.w	8009be6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2210      	movs	r2, #16
 8009934:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009940:	2b40      	cmp	r3, #64	; 0x40
 8009942:	f040 80d4 	bne.w	8009aee <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009952:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009956:	2b00      	cmp	r3, #0
 8009958:	f000 80ad 	beq.w	8009ab6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009966:	429a      	cmp	r2, r3
 8009968:	f080 80a5 	bcs.w	8009ab6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009972:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 0320 	and.w	r3, r3, #32
 8009982:	2b00      	cmp	r3, #0
 8009984:	f040 8086 	bne.w	8009a94 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009990:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800999c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	461a      	mov	r2, r3
 80099ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80099b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80099b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80099be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80099c2:	e841 2300 	strex	r3, r2, [r1]
 80099c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80099ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1da      	bne.n	8009988 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3308      	adds	r3, #8
 80099d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099dc:	e853 3f00 	ldrex	r3, [r3]
 80099e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80099e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099e4:	f023 0301 	bic.w	r3, r3, #1
 80099e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3308      	adds	r3, #8
 80099f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80099f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80099fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80099fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a02:	e841 2300 	strex	r3, r2, [r1]
 8009a06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1e1      	bne.n	80099d2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3308      	adds	r3, #8
 8009a14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3308      	adds	r3, #8
 8009a2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009a32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009a34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e3      	bne.n	8009a0e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a5c:	e853 3f00 	ldrex	r3, [r3]
 8009a60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a64:	f023 0310 	bic.w	r3, r3, #16
 8009a68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	461a      	mov	r2, r3
 8009a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a76:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a7e:	e841 2300 	strex	r3, r2, [r1]
 8009a82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1e4      	bne.n	8009a54 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fb fc92 	bl	80053b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2202      	movs	r2, #2
 8009a98:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f8fe 	bl	8009cb0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009ab4:	e0d5      	b.n	8009c62 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009abc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	f040 80ce 	bne.w	8009c62 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f003 0320 	and.w	r3, r3, #32
 8009ad2:	2b20      	cmp	r3, #32
 8009ad4:	f040 80c5 	bne.w	8009c62 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2202      	movs	r2, #2
 8009adc:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f8e2 	bl	8009cb0 <HAL_UARTEx_RxEventCallback>
      return;
 8009aec:	e0b9      	b.n	8009c62 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 80ab 	beq.w	8009c66 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8009b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 80a6 	beq.w	8009c66 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b22:	e853 3f00 	ldrex	r3, [r3]
 8009b26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	461a      	mov	r2, r3
 8009b38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8009b3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b44:	e841 2300 	strex	r3, r2, [r1]
 8009b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1e4      	bne.n	8009b1a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3308      	adds	r3, #8
 8009b56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	e853 3f00 	ldrex	r3, [r3]
 8009b5e:	623b      	str	r3, [r7, #32]
   return(result);
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	f023 0301 	bic.w	r3, r3, #1
 8009b66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	3308      	adds	r3, #8
 8009b70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009b74:	633a      	str	r2, [r7, #48]	; 0x30
 8009b76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b7c:	e841 2300 	strex	r3, r2, [r1]
 8009b80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1e3      	bne.n	8009b50 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	e853 3f00 	ldrex	r3, [r3]
 8009ba8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f023 0310 	bic.w	r3, r3, #16
 8009bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	461a      	mov	r2, r3
 8009bba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009bbe:	61fb      	str	r3, [r7, #28]
 8009bc0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc2:	69b9      	ldr	r1, [r7, #24]
 8009bc4:	69fa      	ldr	r2, [r7, #28]
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	617b      	str	r3, [r7, #20]
   return(result);
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1e4      	bne.n	8009b9c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f866 	bl	8009cb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009be4:	e03f      	b.n	8009c66 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00e      	beq.n	8009c10 <HAL_UART_IRQHandler+0x5a8>
 8009bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d008      	beq.n	8009c10 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009c06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 ff2b 	bl	800aa64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c0e:	e02d      	b.n	8009c6c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00e      	beq.n	8009c3a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d008      	beq.n	8009c3a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d01c      	beq.n	8009c6a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	4798      	blx	r3
    }
    return;
 8009c38:	e017      	b.n	8009c6a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d012      	beq.n	8009c6c <HAL_UART_IRQHandler+0x604>
 8009c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00c      	beq.n	8009c6c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fedc 	bl	800aa10 <UART_EndTransmit_IT>
    return;
 8009c58:	e008      	b.n	8009c6c <HAL_UART_IRQHandler+0x604>
      return;
 8009c5a:	bf00      	nop
 8009c5c:	e006      	b.n	8009c6c <HAL_UART_IRQHandler+0x604>
    return;
 8009c5e:	bf00      	nop
 8009c60:	e004      	b.n	8009c6c <HAL_UART_IRQHandler+0x604>
      return;
 8009c62:	bf00      	nop
 8009c64:	e002      	b.n	8009c6c <HAL_UART_IRQHandler+0x604>
      return;
 8009c66:	bf00      	nop
 8009c68:	e000      	b.n	8009c6c <HAL_UART_IRQHandler+0x604>
    return;
 8009c6a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009c6c:	37e8      	adds	r7, #232	; 0xe8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop

08009c74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ccc:	b08a      	sub	sp, #40	; 0x28
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	689a      	ldr	r2, [r3, #8]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	431a      	orrs	r2, r3
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	695b      	ldr	r3, [r3, #20]
 8009ce6:	431a      	orrs	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	69db      	ldr	r3, [r3, #28]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	4ba4      	ldr	r3, [pc, #656]	; (8009f88 <UART_SetConfig+0x2c0>)
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	6812      	ldr	r2, [r2, #0]
 8009cfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d00:	430b      	orrs	r3, r1
 8009d02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	68da      	ldr	r2, [r3, #12]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a99      	ldr	r2, [pc, #612]	; (8009f8c <UART_SetConfig+0x2c4>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d004      	beq.n	8009d34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d30:	4313      	orrs	r3, r2
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d44:	430a      	orrs	r2, r1
 8009d46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a90      	ldr	r2, [pc, #576]	; (8009f90 <UART_SetConfig+0x2c8>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d126      	bne.n	8009da0 <UART_SetConfig+0xd8>
 8009d52:	4b90      	ldr	r3, [pc, #576]	; (8009f94 <UART_SetConfig+0x2cc>)
 8009d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d58:	f003 0303 	and.w	r3, r3, #3
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	d81b      	bhi.n	8009d98 <UART_SetConfig+0xd0>
 8009d60:	a201      	add	r2, pc, #4	; (adr r2, 8009d68 <UART_SetConfig+0xa0>)
 8009d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d66:	bf00      	nop
 8009d68:	08009d79 	.word	0x08009d79
 8009d6c:	08009d89 	.word	0x08009d89
 8009d70:	08009d81 	.word	0x08009d81
 8009d74:	08009d91 	.word	0x08009d91
 8009d78:	2301      	movs	r3, #1
 8009d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d7e:	e116      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009d80:	2302      	movs	r3, #2
 8009d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d86:	e112      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009d88:	2304      	movs	r3, #4
 8009d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d8e:	e10e      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009d90:	2308      	movs	r3, #8
 8009d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d96:	e10a      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009d98:	2310      	movs	r3, #16
 8009d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d9e:	e106      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a7c      	ldr	r2, [pc, #496]	; (8009f98 <UART_SetConfig+0x2d0>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d138      	bne.n	8009e1c <UART_SetConfig+0x154>
 8009daa:	4b7a      	ldr	r3, [pc, #488]	; (8009f94 <UART_SetConfig+0x2cc>)
 8009dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db0:	f003 030c 	and.w	r3, r3, #12
 8009db4:	2b0c      	cmp	r3, #12
 8009db6:	d82d      	bhi.n	8009e14 <UART_SetConfig+0x14c>
 8009db8:	a201      	add	r2, pc, #4	; (adr r2, 8009dc0 <UART_SetConfig+0xf8>)
 8009dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbe:	bf00      	nop
 8009dc0:	08009df5 	.word	0x08009df5
 8009dc4:	08009e15 	.word	0x08009e15
 8009dc8:	08009e15 	.word	0x08009e15
 8009dcc:	08009e15 	.word	0x08009e15
 8009dd0:	08009e05 	.word	0x08009e05
 8009dd4:	08009e15 	.word	0x08009e15
 8009dd8:	08009e15 	.word	0x08009e15
 8009ddc:	08009e15 	.word	0x08009e15
 8009de0:	08009dfd 	.word	0x08009dfd
 8009de4:	08009e15 	.word	0x08009e15
 8009de8:	08009e15 	.word	0x08009e15
 8009dec:	08009e15 	.word	0x08009e15
 8009df0:	08009e0d 	.word	0x08009e0d
 8009df4:	2300      	movs	r3, #0
 8009df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dfa:	e0d8      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e02:	e0d4      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009e04:	2304      	movs	r3, #4
 8009e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e0a:	e0d0      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009e0c:	2308      	movs	r3, #8
 8009e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e12:	e0cc      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009e14:	2310      	movs	r3, #16
 8009e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e1a:	e0c8      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a5e      	ldr	r2, [pc, #376]	; (8009f9c <UART_SetConfig+0x2d4>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d125      	bne.n	8009e72 <UART_SetConfig+0x1aa>
 8009e26:	4b5b      	ldr	r3, [pc, #364]	; (8009f94 <UART_SetConfig+0x2cc>)
 8009e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e30:	2b30      	cmp	r3, #48	; 0x30
 8009e32:	d016      	beq.n	8009e62 <UART_SetConfig+0x19a>
 8009e34:	2b30      	cmp	r3, #48	; 0x30
 8009e36:	d818      	bhi.n	8009e6a <UART_SetConfig+0x1a2>
 8009e38:	2b20      	cmp	r3, #32
 8009e3a:	d00a      	beq.n	8009e52 <UART_SetConfig+0x18a>
 8009e3c:	2b20      	cmp	r3, #32
 8009e3e:	d814      	bhi.n	8009e6a <UART_SetConfig+0x1a2>
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <UART_SetConfig+0x182>
 8009e44:	2b10      	cmp	r3, #16
 8009e46:	d008      	beq.n	8009e5a <UART_SetConfig+0x192>
 8009e48:	e00f      	b.n	8009e6a <UART_SetConfig+0x1a2>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e50:	e0ad      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009e52:	2302      	movs	r3, #2
 8009e54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e58:	e0a9      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009e5a:	2304      	movs	r3, #4
 8009e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e60:	e0a5      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009e62:	2308      	movs	r3, #8
 8009e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e68:	e0a1      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009e6a:	2310      	movs	r3, #16
 8009e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e70:	e09d      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a4a      	ldr	r2, [pc, #296]	; (8009fa0 <UART_SetConfig+0x2d8>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d125      	bne.n	8009ec8 <UART_SetConfig+0x200>
 8009e7c:	4b45      	ldr	r3, [pc, #276]	; (8009f94 <UART_SetConfig+0x2cc>)
 8009e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009e86:	2bc0      	cmp	r3, #192	; 0xc0
 8009e88:	d016      	beq.n	8009eb8 <UART_SetConfig+0x1f0>
 8009e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8009e8c:	d818      	bhi.n	8009ec0 <UART_SetConfig+0x1f8>
 8009e8e:	2b80      	cmp	r3, #128	; 0x80
 8009e90:	d00a      	beq.n	8009ea8 <UART_SetConfig+0x1e0>
 8009e92:	2b80      	cmp	r3, #128	; 0x80
 8009e94:	d814      	bhi.n	8009ec0 <UART_SetConfig+0x1f8>
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d002      	beq.n	8009ea0 <UART_SetConfig+0x1d8>
 8009e9a:	2b40      	cmp	r3, #64	; 0x40
 8009e9c:	d008      	beq.n	8009eb0 <UART_SetConfig+0x1e8>
 8009e9e:	e00f      	b.n	8009ec0 <UART_SetConfig+0x1f8>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ea6:	e082      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009eae:	e07e      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009eb0:	2304      	movs	r3, #4
 8009eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009eb6:	e07a      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009eb8:	2308      	movs	r3, #8
 8009eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ebe:	e076      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009ec0:	2310      	movs	r3, #16
 8009ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ec6:	e072      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a35      	ldr	r2, [pc, #212]	; (8009fa4 <UART_SetConfig+0x2dc>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d12a      	bne.n	8009f28 <UART_SetConfig+0x260>
 8009ed2:	4b30      	ldr	r3, [pc, #192]	; (8009f94 <UART_SetConfig+0x2cc>)
 8009ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009edc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ee0:	d01a      	beq.n	8009f18 <UART_SetConfig+0x250>
 8009ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ee6:	d81b      	bhi.n	8009f20 <UART_SetConfig+0x258>
 8009ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eec:	d00c      	beq.n	8009f08 <UART_SetConfig+0x240>
 8009eee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ef2:	d815      	bhi.n	8009f20 <UART_SetConfig+0x258>
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d003      	beq.n	8009f00 <UART_SetConfig+0x238>
 8009ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009efc:	d008      	beq.n	8009f10 <UART_SetConfig+0x248>
 8009efe:	e00f      	b.n	8009f20 <UART_SetConfig+0x258>
 8009f00:	2300      	movs	r3, #0
 8009f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f06:	e052      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009f08:	2302      	movs	r3, #2
 8009f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f0e:	e04e      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009f10:	2304      	movs	r3, #4
 8009f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f16:	e04a      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009f18:	2308      	movs	r3, #8
 8009f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f1e:	e046      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009f20:	2310      	movs	r3, #16
 8009f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f26:	e042      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a17      	ldr	r2, [pc, #92]	; (8009f8c <UART_SetConfig+0x2c4>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d13a      	bne.n	8009fa8 <UART_SetConfig+0x2e0>
 8009f32:	4b18      	ldr	r3, [pc, #96]	; (8009f94 <UART_SetConfig+0x2cc>)
 8009f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009f3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f40:	d01a      	beq.n	8009f78 <UART_SetConfig+0x2b0>
 8009f42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f46:	d81b      	bhi.n	8009f80 <UART_SetConfig+0x2b8>
 8009f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f4c:	d00c      	beq.n	8009f68 <UART_SetConfig+0x2a0>
 8009f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f52:	d815      	bhi.n	8009f80 <UART_SetConfig+0x2b8>
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d003      	beq.n	8009f60 <UART_SetConfig+0x298>
 8009f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f5c:	d008      	beq.n	8009f70 <UART_SetConfig+0x2a8>
 8009f5e:	e00f      	b.n	8009f80 <UART_SetConfig+0x2b8>
 8009f60:	2300      	movs	r3, #0
 8009f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f66:	e022      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009f68:	2302      	movs	r3, #2
 8009f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f6e:	e01e      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009f70:	2304      	movs	r3, #4
 8009f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f76:	e01a      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009f78:	2308      	movs	r3, #8
 8009f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f7e:	e016      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009f80:	2310      	movs	r3, #16
 8009f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f86:	e012      	b.n	8009fae <UART_SetConfig+0x2e6>
 8009f88:	efff69f3 	.word	0xefff69f3
 8009f8c:	40008000 	.word	0x40008000
 8009f90:	40013800 	.word	0x40013800
 8009f94:	40021000 	.word	0x40021000
 8009f98:	40004400 	.word	0x40004400
 8009f9c:	40004800 	.word	0x40004800
 8009fa0:	40004c00 	.word	0x40004c00
 8009fa4:	40005000 	.word	0x40005000
 8009fa8:	2310      	movs	r3, #16
 8009faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a9f      	ldr	r2, [pc, #636]	; (800a230 <UART_SetConfig+0x568>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d17a      	bne.n	800a0ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009fbc:	2b08      	cmp	r3, #8
 8009fbe:	d824      	bhi.n	800a00a <UART_SetConfig+0x342>
 8009fc0:	a201      	add	r2, pc, #4	; (adr r2, 8009fc8 <UART_SetConfig+0x300>)
 8009fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc6:	bf00      	nop
 8009fc8:	08009fed 	.word	0x08009fed
 8009fcc:	0800a00b 	.word	0x0800a00b
 8009fd0:	08009ff5 	.word	0x08009ff5
 8009fd4:	0800a00b 	.word	0x0800a00b
 8009fd8:	08009ffb 	.word	0x08009ffb
 8009fdc:	0800a00b 	.word	0x0800a00b
 8009fe0:	0800a00b 	.word	0x0800a00b
 8009fe4:	0800a00b 	.word	0x0800a00b
 8009fe8:	0800a003 	.word	0x0800a003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fec:	f7fd fbb2 	bl	8007754 <HAL_RCC_GetPCLK1Freq>
 8009ff0:	61f8      	str	r0, [r7, #28]
        break;
 8009ff2:	e010      	b.n	800a016 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ff4:	4b8f      	ldr	r3, [pc, #572]	; (800a234 <UART_SetConfig+0x56c>)
 8009ff6:	61fb      	str	r3, [r7, #28]
        break;
 8009ff8:	e00d      	b.n	800a016 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ffa:	f7fd fb13 	bl	8007624 <HAL_RCC_GetSysClockFreq>
 8009ffe:	61f8      	str	r0, [r7, #28]
        break;
 800a000:	e009      	b.n	800a016 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a006:	61fb      	str	r3, [r7, #28]
        break;
 800a008:	e005      	b.n	800a016 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a00a:	2300      	movs	r3, #0
 800a00c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a014:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 80fb 	beq.w	800a214 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	4613      	mov	r3, r2
 800a024:	005b      	lsls	r3, r3, #1
 800a026:	4413      	add	r3, r2
 800a028:	69fa      	ldr	r2, [r7, #28]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d305      	bcc.n	800a03a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a034:	69fa      	ldr	r2, [r7, #28]
 800a036:	429a      	cmp	r2, r3
 800a038:	d903      	bls.n	800a042 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a040:	e0e8      	b.n	800a214 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	2200      	movs	r2, #0
 800a046:	461c      	mov	r4, r3
 800a048:	4615      	mov	r5, r2
 800a04a:	f04f 0200 	mov.w	r2, #0
 800a04e:	f04f 0300 	mov.w	r3, #0
 800a052:	022b      	lsls	r3, r5, #8
 800a054:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a058:	0222      	lsls	r2, r4, #8
 800a05a:	68f9      	ldr	r1, [r7, #12]
 800a05c:	6849      	ldr	r1, [r1, #4]
 800a05e:	0849      	lsrs	r1, r1, #1
 800a060:	2000      	movs	r0, #0
 800a062:	4688      	mov	r8, r1
 800a064:	4681      	mov	r9, r0
 800a066:	eb12 0a08 	adds.w	sl, r2, r8
 800a06a:	eb43 0b09 	adc.w	fp, r3, r9
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	603b      	str	r3, [r7, #0]
 800a076:	607a      	str	r2, [r7, #4]
 800a078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a07c:	4650      	mov	r0, sl
 800a07e:	4659      	mov	r1, fp
 800a080:	f7f6 fe02 	bl	8000c88 <__aeabi_uldivmod>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	4613      	mov	r3, r2
 800a08a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a092:	d308      	bcc.n	800a0a6 <UART_SetConfig+0x3de>
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a09a:	d204      	bcs.n	800a0a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	69ba      	ldr	r2, [r7, #24]
 800a0a2:	60da      	str	r2, [r3, #12]
 800a0a4:	e0b6      	b.n	800a214 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a0ac:	e0b2      	b.n	800a214 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	69db      	ldr	r3, [r3, #28]
 800a0b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0b6:	d15e      	bne.n	800a176 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a0b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0bc:	2b08      	cmp	r3, #8
 800a0be:	d828      	bhi.n	800a112 <UART_SetConfig+0x44a>
 800a0c0:	a201      	add	r2, pc, #4	; (adr r2, 800a0c8 <UART_SetConfig+0x400>)
 800a0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c6:	bf00      	nop
 800a0c8:	0800a0ed 	.word	0x0800a0ed
 800a0cc:	0800a0f5 	.word	0x0800a0f5
 800a0d0:	0800a0fd 	.word	0x0800a0fd
 800a0d4:	0800a113 	.word	0x0800a113
 800a0d8:	0800a103 	.word	0x0800a103
 800a0dc:	0800a113 	.word	0x0800a113
 800a0e0:	0800a113 	.word	0x0800a113
 800a0e4:	0800a113 	.word	0x0800a113
 800a0e8:	0800a10b 	.word	0x0800a10b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0ec:	f7fd fb32 	bl	8007754 <HAL_RCC_GetPCLK1Freq>
 800a0f0:	61f8      	str	r0, [r7, #28]
        break;
 800a0f2:	e014      	b.n	800a11e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0f4:	f7fd fb44 	bl	8007780 <HAL_RCC_GetPCLK2Freq>
 800a0f8:	61f8      	str	r0, [r7, #28]
        break;
 800a0fa:	e010      	b.n	800a11e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0fc:	4b4d      	ldr	r3, [pc, #308]	; (800a234 <UART_SetConfig+0x56c>)
 800a0fe:	61fb      	str	r3, [r7, #28]
        break;
 800a100:	e00d      	b.n	800a11e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a102:	f7fd fa8f 	bl	8007624 <HAL_RCC_GetSysClockFreq>
 800a106:	61f8      	str	r0, [r7, #28]
        break;
 800a108:	e009      	b.n	800a11e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a10a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a10e:	61fb      	str	r3, [r7, #28]
        break;
 800a110:	e005      	b.n	800a11e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a11c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d077      	beq.n	800a214 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	005a      	lsls	r2, r3, #1
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	085b      	lsrs	r3, r3, #1
 800a12e:	441a      	add	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	fbb2 f3f3 	udiv	r3, r2, r3
 800a138:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	2b0f      	cmp	r3, #15
 800a13e:	d916      	bls.n	800a16e <UART_SetConfig+0x4a6>
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a146:	d212      	bcs.n	800a16e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	f023 030f 	bic.w	r3, r3, #15
 800a150:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	085b      	lsrs	r3, r3, #1
 800a156:	b29b      	uxth	r3, r3
 800a158:	f003 0307 	and.w	r3, r3, #7
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	8afb      	ldrh	r3, [r7, #22]
 800a160:	4313      	orrs	r3, r2
 800a162:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	8afa      	ldrh	r2, [r7, #22]
 800a16a:	60da      	str	r2, [r3, #12]
 800a16c:	e052      	b.n	800a214 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a174:	e04e      	b.n	800a214 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a176:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a17a:	2b08      	cmp	r3, #8
 800a17c:	d827      	bhi.n	800a1ce <UART_SetConfig+0x506>
 800a17e:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <UART_SetConfig+0x4bc>)
 800a180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a184:	0800a1a9 	.word	0x0800a1a9
 800a188:	0800a1b1 	.word	0x0800a1b1
 800a18c:	0800a1b9 	.word	0x0800a1b9
 800a190:	0800a1cf 	.word	0x0800a1cf
 800a194:	0800a1bf 	.word	0x0800a1bf
 800a198:	0800a1cf 	.word	0x0800a1cf
 800a19c:	0800a1cf 	.word	0x0800a1cf
 800a1a0:	0800a1cf 	.word	0x0800a1cf
 800a1a4:	0800a1c7 	.word	0x0800a1c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1a8:	f7fd fad4 	bl	8007754 <HAL_RCC_GetPCLK1Freq>
 800a1ac:	61f8      	str	r0, [r7, #28]
        break;
 800a1ae:	e014      	b.n	800a1da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1b0:	f7fd fae6 	bl	8007780 <HAL_RCC_GetPCLK2Freq>
 800a1b4:	61f8      	str	r0, [r7, #28]
        break;
 800a1b6:	e010      	b.n	800a1da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1b8:	4b1e      	ldr	r3, [pc, #120]	; (800a234 <UART_SetConfig+0x56c>)
 800a1ba:	61fb      	str	r3, [r7, #28]
        break;
 800a1bc:	e00d      	b.n	800a1da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1be:	f7fd fa31 	bl	8007624 <HAL_RCC_GetSysClockFreq>
 800a1c2:	61f8      	str	r0, [r7, #28]
        break;
 800a1c4:	e009      	b.n	800a1da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1ca:	61fb      	str	r3, [r7, #28]
        break;
 800a1cc:	e005      	b.n	800a1da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a1d8:	bf00      	nop
    }

    if (pclk != 0U)
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d019      	beq.n	800a214 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	085a      	lsrs	r2, r3, #1
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	441a      	add	r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	2b0f      	cmp	r3, #15
 800a1f8:	d909      	bls.n	800a20e <UART_SetConfig+0x546>
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a200:	d205      	bcs.n	800a20e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	b29a      	uxth	r2, r3
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	60da      	str	r2, [r3, #12]
 800a20c:	e002      	b.n	800a214 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a220:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a224:	4618      	mov	r0, r3
 800a226:	3728      	adds	r7, #40	; 0x28
 800a228:	46bd      	mov	sp, r7
 800a22a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a22e:	bf00      	nop
 800a230:	40008000 	.word	0x40008000
 800a234:	00f42400 	.word	0x00f42400

0800a238 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a244:	f003 0308 	and.w	r3, r3, #8
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00a      	beq.n	800a262 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	430a      	orrs	r2, r1
 800a260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00a      	beq.n	800a284 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	430a      	orrs	r2, r1
 800a282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a288:	f003 0302 	and.w	r3, r3, #2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00a      	beq.n	800a2a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2aa:	f003 0304 	and.w	r3, r3, #4
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00a      	beq.n	800a2c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	430a      	orrs	r2, r1
 800a2c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2cc:	f003 0310 	and.w	r3, r3, #16
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00a      	beq.n	800a2ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	430a      	orrs	r2, r1
 800a2e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ee:	f003 0320 	and.w	r3, r3, #32
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00a      	beq.n	800a30c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	430a      	orrs	r2, r1
 800a30a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a314:	2b00      	cmp	r3, #0
 800a316:	d01a      	beq.n	800a34e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	430a      	orrs	r2, r1
 800a32c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a336:	d10a      	bne.n	800a34e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	430a      	orrs	r2, r1
 800a34c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00a      	beq.n	800a370 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	430a      	orrs	r2, r1
 800a36e:	605a      	str	r2, [r3, #4]
  }
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b098      	sub	sp, #96	; 0x60
 800a380:	af02      	add	r7, sp, #8
 800a382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a38c:	f7f9 fa2a 	bl	80037e4 <HAL_GetTick>
 800a390:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0308 	and.w	r3, r3, #8
 800a39c:	2b08      	cmp	r3, #8
 800a39e:	d12e      	bne.n	800a3fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f88c 	bl	800a4cc <UART_WaitOnFlagUntilTimeout>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d021      	beq.n	800a3fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c2:	e853 3f00 	ldrex	r3, [r3]
 800a3c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3ce:	653b      	str	r3, [r7, #80]	; 0x50
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3d8:	647b      	str	r3, [r7, #68]	; 0x44
 800a3da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3e0:	e841 2300 	strex	r3, r2, [r1]
 800a3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1e6      	bne.n	800a3ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2220      	movs	r2, #32
 800a3f0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e062      	b.n	800a4c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 0304 	and.w	r3, r3, #4
 800a408:	2b04      	cmp	r3, #4
 800a40a:	d149      	bne.n	800a4a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a40c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a414:	2200      	movs	r2, #0
 800a416:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f856 	bl	800a4cc <UART_WaitOnFlagUntilTimeout>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d03c      	beq.n	800a4a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42e:	e853 3f00 	ldrex	r3, [r3]
 800a432:	623b      	str	r3, [r7, #32]
   return(result);
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a43a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	461a      	mov	r2, r3
 800a442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a444:	633b      	str	r3, [r7, #48]	; 0x30
 800a446:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a448:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a44a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a44c:	e841 2300 	strex	r3, r2, [r1]
 800a450:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1e6      	bne.n	800a426 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	3308      	adds	r3, #8
 800a45e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	e853 3f00 	ldrex	r3, [r3]
 800a466:	60fb      	str	r3, [r7, #12]
   return(result);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f023 0301 	bic.w	r3, r3, #1
 800a46e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3308      	adds	r3, #8
 800a476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a478:	61fa      	str	r2, [r7, #28]
 800a47a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47c:	69b9      	ldr	r1, [r7, #24]
 800a47e:	69fa      	ldr	r2, [r7, #28]
 800a480:	e841 2300 	strex	r3, r2, [r1]
 800a484:	617b      	str	r3, [r7, #20]
   return(result);
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1e5      	bne.n	800a458 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2220      	movs	r2, #32
 800a490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e011      	b.n	800a4c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2220      	movs	r2, #32
 800a4a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2220      	movs	r2, #32
 800a4aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3758      	adds	r7, #88	; 0x58
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4dc:	e04f      	b.n	800a57e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e4:	d04b      	beq.n	800a57e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4e6:	f7f9 f97d 	bl	80037e4 <HAL_GetTick>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	69ba      	ldr	r2, [r7, #24]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d302      	bcc.n	800a4fc <UART_WaitOnFlagUntilTimeout+0x30>
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d101      	bne.n	800a500 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	e04e      	b.n	800a59e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0304 	and.w	r3, r3, #4
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d037      	beq.n	800a57e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	2b80      	cmp	r3, #128	; 0x80
 800a512:	d034      	beq.n	800a57e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2b40      	cmp	r3, #64	; 0x40
 800a518:	d031      	beq.n	800a57e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	69db      	ldr	r3, [r3, #28]
 800a520:	f003 0308 	and.w	r3, r3, #8
 800a524:	2b08      	cmp	r3, #8
 800a526:	d110      	bne.n	800a54a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2208      	movs	r2, #8
 800a52e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f000 f8ff 	bl	800a734 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2208      	movs	r2, #8
 800a53a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e029      	b.n	800a59e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	69db      	ldr	r3, [r3, #28]
 800a550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a558:	d111      	bne.n	800a57e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a562:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 f8e5 	bl	800a734 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2220      	movs	r2, #32
 800a56e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a57a:	2303      	movs	r3, #3
 800a57c:	e00f      	b.n	800a59e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	69da      	ldr	r2, [r3, #28]
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	4013      	ands	r3, r2
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	bf0c      	ite	eq
 800a58e:	2301      	moveq	r3, #1
 800a590:	2300      	movne	r3, #0
 800a592:	b2db      	uxtb	r3, r3
 800a594:	461a      	mov	r2, r3
 800a596:	79fb      	ldrb	r3, [r7, #7]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d0a0      	beq.n	800a4de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
	...

0800a5a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b096      	sub	sp, #88	; 0x58
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	88fa      	ldrh	r2, [r7, #6]
 800a5c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2222      	movs	r2, #34	; 0x22
 800a5d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d028      	beq.n	800a62e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5e0:	4a3e      	ldr	r2, [pc, #248]	; (800a6dc <UART_Start_Receive_DMA+0x134>)
 800a5e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5e8:	4a3d      	ldr	r2, [pc, #244]	; (800a6e0 <UART_Start_Receive_DMA+0x138>)
 800a5ea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5f0:	4a3c      	ldr	r2, [pc, #240]	; (800a6e4 <UART_Start_Receive_DMA+0x13c>)
 800a5f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3324      	adds	r3, #36	; 0x24
 800a606:	4619      	mov	r1, r3
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a60c:	461a      	mov	r2, r3
 800a60e:	88fb      	ldrh	r3, [r7, #6]
 800a610:	f7fa fe72 	bl	80052f8 <HAL_DMA_Start_IT>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d009      	beq.n	800a62e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2210      	movs	r2, #16
 800a61e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2220      	movs	r2, #32
 800a626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e051      	b.n	800a6d2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d018      	beq.n	800a668 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a63e:	e853 3f00 	ldrex	r3, [r3]
 800a642:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a64a:	657b      	str	r3, [r7, #84]	; 0x54
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	461a      	mov	r2, r3
 800a652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a654:	64bb      	str	r3, [r7, #72]	; 0x48
 800a656:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a658:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a65a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a65c:	e841 2300 	strex	r3, r2, [r1]
 800a660:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1e6      	bne.n	800a636 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3308      	adds	r3, #8
 800a66e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a672:	e853 3f00 	ldrex	r3, [r3]
 800a676:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67a:	f043 0301 	orr.w	r3, r3, #1
 800a67e:	653b      	str	r3, [r7, #80]	; 0x50
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	3308      	adds	r3, #8
 800a686:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a688:	637a      	str	r2, [r7, #52]	; 0x34
 800a68a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a68e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a690:	e841 2300 	strex	r3, r2, [r1]
 800a694:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1e5      	bne.n	800a668 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	3308      	adds	r3, #8
 800a6a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	e853 3f00 	ldrex	r3, [r3]
 800a6aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	3308      	adds	r3, #8
 800a6ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6bc:	623a      	str	r2, [r7, #32]
 800a6be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c0:	69f9      	ldr	r1, [r7, #28]
 800a6c2:	6a3a      	ldr	r2, [r7, #32]
 800a6c4:	e841 2300 	strex	r3, r2, [r1]
 800a6c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d1e5      	bne.n	800a69c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3758      	adds	r7, #88	; 0x58
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	0800a7fd 	.word	0x0800a7fd
 800a6e0:	0800a929 	.word	0x0800a929
 800a6e4:	0800a967 	.word	0x0800a967

0800a6e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b089      	sub	sp, #36	; 0x24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	e853 3f00 	ldrex	r3, [r3]
 800a6fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a704:	61fb      	str	r3, [r7, #28]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	461a      	mov	r2, r3
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	61bb      	str	r3, [r7, #24]
 800a710:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a712:	6979      	ldr	r1, [r7, #20]
 800a714:	69ba      	ldr	r2, [r7, #24]
 800a716:	e841 2300 	strex	r3, r2, [r1]
 800a71a:	613b      	str	r3, [r7, #16]
   return(result);
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1e6      	bne.n	800a6f0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2220      	movs	r2, #32
 800a726:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800a728:	bf00      	nop
 800a72a:	3724      	adds	r7, #36	; 0x24
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a734:	b480      	push	{r7}
 800a736:	b095      	sub	sp, #84	; 0x54
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a744:	e853 3f00 	ldrex	r3, [r3]
 800a748:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a750:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	461a      	mov	r2, r3
 800a758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a75a:	643b      	str	r3, [r7, #64]	; 0x40
 800a75c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a762:	e841 2300 	strex	r3, r2, [r1]
 800a766:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1e6      	bne.n	800a73c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3308      	adds	r3, #8
 800a774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a776:	6a3b      	ldr	r3, [r7, #32]
 800a778:	e853 3f00 	ldrex	r3, [r3]
 800a77c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	f023 0301 	bic.w	r3, r3, #1
 800a784:	64bb      	str	r3, [r7, #72]	; 0x48
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	3308      	adds	r3, #8
 800a78c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a78e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a790:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a796:	e841 2300 	strex	r3, r2, [r1]
 800a79a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1e5      	bne.n	800a76e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d118      	bne.n	800a7dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	e853 3f00 	ldrex	r3, [r3]
 800a7b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	f023 0310 	bic.w	r3, r3, #16
 800a7be:	647b      	str	r3, [r7, #68]	; 0x44
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c8:	61bb      	str	r3, [r7, #24]
 800a7ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7cc:	6979      	ldr	r1, [r7, #20]
 800a7ce:	69ba      	ldr	r2, [r7, #24]
 800a7d0:	e841 2300 	strex	r3, r2, [r1]
 800a7d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1e6      	bne.n	800a7aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2220      	movs	r2, #32
 800a7e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a7f0:	bf00      	nop
 800a7f2:	3754      	adds	r7, #84	; 0x54
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b09c      	sub	sp, #112	; 0x70
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a808:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 0320 	and.w	r3, r3, #32
 800a814:	2b00      	cmp	r3, #0
 800a816:	d171      	bne.n	800a8fc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a81a:	2200      	movs	r2, #0
 800a81c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a828:	e853 3f00 	ldrex	r3, [r3]
 800a82c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a82e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a834:	66bb      	str	r3, [r7, #104]	; 0x68
 800a836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	461a      	mov	r2, r3
 800a83c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a83e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a840:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a842:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a846:	e841 2300 	strex	r3, r2, [r1]
 800a84a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a84c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1e6      	bne.n	800a820 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	3308      	adds	r3, #8
 800a858:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85c:	e853 3f00 	ldrex	r3, [r3]
 800a860:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a864:	f023 0301 	bic.w	r3, r3, #1
 800a868:	667b      	str	r3, [r7, #100]	; 0x64
 800a86a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3308      	adds	r3, #8
 800a870:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a872:	647a      	str	r2, [r7, #68]	; 0x44
 800a874:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e5      	bne.n	800a852 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3308      	adds	r3, #8
 800a88c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a890:	e853 3f00 	ldrex	r3, [r3]
 800a894:	623b      	str	r3, [r7, #32]
   return(result);
 800a896:	6a3b      	ldr	r3, [r7, #32]
 800a898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a89c:	663b      	str	r3, [r7, #96]	; 0x60
 800a89e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a8a6:	633a      	str	r2, [r7, #48]	; 0x30
 800a8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e5      	bne.n	800a886 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a8ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d118      	bne.n	800a8fc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	e853 3f00 	ldrex	r3, [r3]
 800a8d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f023 0310 	bic.w	r3, r3, #16
 800a8de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8e8:	61fb      	str	r3, [r7, #28]
 800a8ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ec:	69b9      	ldr	r1, [r7, #24]
 800a8ee:	69fa      	ldr	r2, [r7, #28]
 800a8f0:	e841 2300 	strex	r3, r2, [r1]
 800a8f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1e6      	bne.n	800a8ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8fe:	2200      	movs	r2, #0
 800a900:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a906:	2b01      	cmp	r3, #1
 800a908:	d107      	bne.n	800a91a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a90a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a90c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a910:	4619      	mov	r1, r3
 800a912:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a914:	f7ff f9cc 	bl	8009cb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a918:	e002      	b.n	800a920 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a91a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a91c:	f7f6 fcf0 	bl	8001300 <HAL_UART_RxCpltCallback>
}
 800a920:	bf00      	nop
 800a922:	3770      	adds	r7, #112	; 0x70
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a934:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2201      	movs	r2, #1
 800a93a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a940:	2b01      	cmp	r3, #1
 800a942:	d109      	bne.n	800a958 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a94a:	085b      	lsrs	r3, r3, #1
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	4619      	mov	r1, r3
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f7ff f9ad 	bl	8009cb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a956:	e002      	b.n	800a95e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f7ff f995 	bl	8009c88 <HAL_UART_RxHalfCpltCallback>
}
 800a95e:	bf00      	nop
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b086      	sub	sp, #24
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a972:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a978:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a980:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a98c:	2b80      	cmp	r3, #128	; 0x80
 800a98e:	d109      	bne.n	800a9a4 <UART_DMAError+0x3e>
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	2b21      	cmp	r3, #33	; 0x21
 800a994:	d106      	bne.n	800a9a4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2200      	movs	r2, #0
 800a99a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a99e:	6978      	ldr	r0, [r7, #20]
 800a9a0:	f7ff fea2 	bl	800a6e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ae:	2b40      	cmp	r3, #64	; 0x40
 800a9b0:	d109      	bne.n	800a9c6 <UART_DMAError+0x60>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2b22      	cmp	r3, #34	; 0x22
 800a9b6:	d106      	bne.n	800a9c6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a9c0:	6978      	ldr	r0, [r7, #20]
 800a9c2:	f7ff feb7 	bl	800a734 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9cc:	f043 0210 	orr.w	r2, r3, #16
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9d6:	6978      	ldr	r0, [r7, #20]
 800a9d8:	f7ff f960 	bl	8009c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9dc:	bf00      	nop
 800a9de:	3718      	adds	r7, #24
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f7ff f94a 	bl	8009c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa08:	bf00      	nop
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b088      	sub	sp, #32
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	e853 3f00 	ldrex	r3, [r3]
 800aa24:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa2c:	61fb      	str	r3, [r7, #28]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	461a      	mov	r2, r3
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	61bb      	str	r3, [r7, #24]
 800aa38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3a:	6979      	ldr	r1, [r7, #20]
 800aa3c:	69ba      	ldr	r2, [r7, #24]
 800aa3e:	e841 2300 	strex	r3, r2, [r1]
 800aa42:	613b      	str	r3, [r7, #16]
   return(result);
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1e6      	bne.n	800aa18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2220      	movs	r2, #32
 800aa4e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7ff f90c 	bl	8009c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa5c:	bf00      	nop
 800aa5e:	3720      	adds	r7, #32
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f103 0208 	add.w	r2, r3, #8
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f103 0208 	add.w	r2, r3, #8
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f103 0208 	add.w	r2, r3, #8
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aac6:	bf00      	nop
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aad2:	b480      	push	{r7}
 800aad4:	b085      	sub	sp, #20
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	689a      	ldr	r2, [r3, #8]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	1c5a      	adds	r2, r3, #1
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	601a      	str	r2, [r3, #0]
}
 800ab0e:	bf00      	nop
 800ab10:	3714      	adds	r7, #20
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr

0800ab1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b085      	sub	sp, #20
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab30:	d103      	bne.n	800ab3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	60fb      	str	r3, [r7, #12]
 800ab38:	e00c      	b.n	800ab54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	60fb      	str	r3, [r7, #12]
 800ab40:	e002      	b.n	800ab48 <vListInsert+0x2e>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	60fb      	str	r3, [r7, #12]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68ba      	ldr	r2, [r7, #8]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d2f6      	bcs.n	800ab42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	685a      	ldr	r2, [r3, #4]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	683a      	ldr	r2, [r7, #0]
 800ab62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	601a      	str	r2, [r3, #0]
}
 800ab80:	bf00      	nop
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	6892      	ldr	r2, [r2, #8]
 800aba2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	6852      	ldr	r2, [r2, #4]
 800abac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d103      	bne.n	800abc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	689a      	ldr	r2, [r3, #8]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	1e5a      	subs	r2, r3, #1
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3714      	adds	r7, #20
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10a      	bne.n	800ac0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800abf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ac06:	bf00      	nop
 800ac08:	e7fe      	b.n	800ac08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ac0a:	f001 fedb 	bl	800c9c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac16:	68f9      	ldr	r1, [r7, #12]
 800ac18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac1a:	fb01 f303 	mul.w	r3, r1, r3
 800ac1e:	441a      	add	r2, r3
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	68f9      	ldr	r1, [r7, #12]
 800ac3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac40:	fb01 f303 	mul.w	r3, r1, r3
 800ac44:	441a      	add	r2, r3
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	22ff      	movs	r2, #255	; 0xff
 800ac4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	22ff      	movs	r2, #255	; 0xff
 800ac56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d114      	bne.n	800ac8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d01a      	beq.n	800ac9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	3310      	adds	r3, #16
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f001 f961 	bl	800bf34 <xTaskRemoveFromEventList>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d012      	beq.n	800ac9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac78:	4b0c      	ldr	r3, [pc, #48]	; (800acac <xQueueGenericReset+0xcc>)
 800ac7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac7e:	601a      	str	r2, [r3, #0]
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	e009      	b.n	800ac9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	3310      	adds	r3, #16
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7ff fef2 	bl	800aa78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	3324      	adds	r3, #36	; 0x24
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7ff feed 	bl	800aa78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac9e:	f001 fec1 	bl	800ca24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aca2:	2301      	movs	r3, #1
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	e000ed04 	.word	0xe000ed04

0800acb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b08a      	sub	sp, #40	; 0x28
 800acb4:	af02      	add	r7, sp, #8
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	4613      	mov	r3, r2
 800acbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10a      	bne.n	800acda <xQueueGenericCreate+0x2a>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	613b      	str	r3, [r7, #16]
}
 800acd6:	bf00      	nop
 800acd8:	e7fe      	b.n	800acd8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	fb02 f303 	mul.w	r3, r2, r3
 800ace2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	3348      	adds	r3, #72	; 0x48
 800ace8:	4618      	mov	r0, r3
 800acea:	f001 ff8d 	bl	800cc08 <pvPortMalloc>
 800acee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d011      	beq.n	800ad1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	3348      	adds	r3, #72	; 0x48
 800acfe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad08:	79fa      	ldrb	r2, [r7, #7]
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	68b9      	ldr	r1, [r7, #8]
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f805 	bl	800ad24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad1a:	69bb      	ldr	r3, [r7, #24]
	}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3720      	adds	r7, #32
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
 800ad30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d103      	bne.n	800ad40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	601a      	str	r2, [r3, #0]
 800ad3e:	e002      	b.n	800ad46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad52:	2101      	movs	r1, #1
 800ad54:	69b8      	ldr	r0, [r7, #24]
 800ad56:	f7ff ff43 	bl	800abe0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad5a:	bf00      	nop
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
	...

0800ad64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b08e      	sub	sp, #56	; 0x38
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
 800ad70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad72:	2300      	movs	r3, #0
 800ad74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10a      	bne.n	800ad96 <xQueueGenericSend+0x32>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d103      	bne.n	800ada4 <xQueueGenericSend+0x40>
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <xQueueGenericSend+0x44>
 800ada4:	2301      	movs	r3, #1
 800ada6:	e000      	b.n	800adaa <xQueueGenericSend+0x46>
 800ada8:	2300      	movs	r3, #0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d10a      	bne.n	800adc4 <xQueueGenericSend+0x60>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb2:	f383 8811 	msr	BASEPRI, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adc0:	bf00      	nop
 800adc2:	e7fe      	b.n	800adc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d103      	bne.n	800add2 <xQueueGenericSend+0x6e>
 800adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adce:	2b01      	cmp	r3, #1
 800add0:	d101      	bne.n	800add6 <xQueueGenericSend+0x72>
 800add2:	2301      	movs	r3, #1
 800add4:	e000      	b.n	800add8 <xQueueGenericSend+0x74>
 800add6:	2300      	movs	r3, #0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10a      	bne.n	800adf2 <xQueueGenericSend+0x8e>
	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	623b      	str	r3, [r7, #32]
}
 800adee:	bf00      	nop
 800adf0:	e7fe      	b.n	800adf0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adf2:	f001 fa97 	bl	800c324 <xTaskGetSchedulerState>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d102      	bne.n	800ae02 <xQueueGenericSend+0x9e>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d101      	bne.n	800ae06 <xQueueGenericSend+0xa2>
 800ae02:	2301      	movs	r3, #1
 800ae04:	e000      	b.n	800ae08 <xQueueGenericSend+0xa4>
 800ae06:	2300      	movs	r3, #0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10a      	bne.n	800ae22 <xQueueGenericSend+0xbe>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	61fb      	str	r3, [r7, #28]
}
 800ae1e:	bf00      	nop
 800ae20:	e7fe      	b.n	800ae20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae22:	f001 fdcf 	bl	800c9c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d302      	bcc.n	800ae38 <xQueueGenericSend+0xd4>
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d129      	bne.n	800ae8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	68b9      	ldr	r1, [r7, #8]
 800ae3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae3e:	f000 fb21 	bl	800b484 <prvCopyDataToQueue>
 800ae42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d010      	beq.n	800ae6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	3324      	adds	r3, #36	; 0x24
 800ae50:	4618      	mov	r0, r3
 800ae52:	f001 f86f 	bl	800bf34 <xTaskRemoveFromEventList>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d013      	beq.n	800ae84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae5c:	4b3f      	ldr	r3, [pc, #252]	; (800af5c <xQueueGenericSend+0x1f8>)
 800ae5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	e00a      	b.n	800ae84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d007      	beq.n	800ae84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae74:	4b39      	ldr	r3, [pc, #228]	; (800af5c <xQueueGenericSend+0x1f8>)
 800ae76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae7a:	601a      	str	r2, [r3, #0]
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae84:	f001 fdce 	bl	800ca24 <vPortExitCritical>
				return pdPASS;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	e063      	b.n	800af54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d103      	bne.n	800ae9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae92:	f001 fdc7 	bl	800ca24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae96:	2300      	movs	r3, #0
 800ae98:	e05c      	b.n	800af54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d106      	bne.n	800aeae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aea0:	f107 0314 	add.w	r3, r7, #20
 800aea4:	4618      	mov	r0, r3
 800aea6:	f001 f8a7 	bl	800bff8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aeae:	f001 fdb9 	bl	800ca24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aeb2:	f000 fe47 	bl	800bb44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aeb6:	f001 fd85 	bl	800c9c4 <vPortEnterCritical>
 800aeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aec0:	b25b      	sxtb	r3, r3
 800aec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec6:	d103      	bne.n	800aed0 <xQueueGenericSend+0x16c>
 800aec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aed6:	b25b      	sxtb	r3, r3
 800aed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aedc:	d103      	bne.n	800aee6 <xQueueGenericSend+0x182>
 800aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aee6:	f001 fd9d 	bl	800ca24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeea:	1d3a      	adds	r2, r7, #4
 800aeec:	f107 0314 	add.w	r3, r7, #20
 800aef0:	4611      	mov	r1, r2
 800aef2:	4618      	mov	r0, r3
 800aef4:	f001 f896 	bl	800c024 <xTaskCheckForTimeOut>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d124      	bne.n	800af48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aefe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af00:	f000 fbb8 	bl	800b674 <prvIsQueueFull>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d018      	beq.n	800af3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	3310      	adds	r3, #16
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	4611      	mov	r1, r2
 800af12:	4618      	mov	r0, r3
 800af14:	f000 ffea 	bl	800beec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af1a:	f000 fb43 	bl	800b5a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af1e:	f000 fe1f 	bl	800bb60 <xTaskResumeAll>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	f47f af7c 	bne.w	800ae22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af2a:	4b0c      	ldr	r3, [pc, #48]	; (800af5c <xQueueGenericSend+0x1f8>)
 800af2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	f3bf 8f4f 	dsb	sy
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	e772      	b.n	800ae22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af3e:	f000 fb31 	bl	800b5a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af42:	f000 fe0d 	bl	800bb60 <xTaskResumeAll>
 800af46:	e76c      	b.n	800ae22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af4a:	f000 fb2b 	bl	800b5a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af4e:	f000 fe07 	bl	800bb60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af54:	4618      	mov	r0, r3
 800af56:	3738      	adds	r7, #56	; 0x38
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	e000ed04 	.word	0xe000ed04

0800af60 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b08e      	sub	sp, #56	; 0x38
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10a      	bne.n	800af8a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	623b      	str	r3, [r7, #32]
}
 800af86:	bf00      	nop
 800af88:	e7fe      	b.n	800af88 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00a      	beq.n	800afa8 <xQueueGiveFromISR+0x48>
	__asm volatile
 800af92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	61fb      	str	r3, [r7, #28]
}
 800afa4:	bf00      	nop
 800afa6:	e7fe      	b.n	800afa6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800afa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d103      	bne.n	800afb8 <xQueueGiveFromISR+0x58>
 800afb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d101      	bne.n	800afbc <xQueueGiveFromISR+0x5c>
 800afb8:	2301      	movs	r3, #1
 800afba:	e000      	b.n	800afbe <xQueueGiveFromISR+0x5e>
 800afbc:	2300      	movs	r3, #0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10a      	bne.n	800afd8 <xQueueGiveFromISR+0x78>
	__asm volatile
 800afc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	61bb      	str	r3, [r7, #24]
}
 800afd4:	bf00      	nop
 800afd6:	e7fe      	b.n	800afd6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afd8:	f001 fdd6 	bl	800cb88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800afdc:	f3ef 8211 	mrs	r2, BASEPRI
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	617a      	str	r2, [r7, #20]
 800aff2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aff4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aff6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b004:	429a      	cmp	r2, r3
 800b006:	d22b      	bcs.n	800b060 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b00e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b014:	1c5a      	adds	r2, r3, #1
 800b016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b018:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b01a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b022:	d112      	bne.n	800b04a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d016      	beq.n	800b05a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02e:	3324      	adds	r3, #36	; 0x24
 800b030:	4618      	mov	r0, r3
 800b032:	f000 ff7f 	bl	800bf34 <xTaskRemoveFromEventList>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00e      	beq.n	800b05a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00b      	beq.n	800b05a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2201      	movs	r2, #1
 800b046:	601a      	str	r2, [r3, #0]
 800b048:	e007      	b.n	800b05a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b04a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b04e:	3301      	adds	r3, #1
 800b050:	b2db      	uxtb	r3, r3
 800b052:	b25a      	sxtb	r2, r3
 800b054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b05a:	2301      	movs	r3, #1
 800b05c:	637b      	str	r3, [r7, #52]	; 0x34
 800b05e:	e001      	b.n	800b064 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b060:	2300      	movs	r3, #0
 800b062:	637b      	str	r3, [r7, #52]	; 0x34
 800b064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b066:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b06e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b072:	4618      	mov	r0, r3
 800b074:	3738      	adds	r7, #56	; 0x38
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
	...

0800b07c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b08c      	sub	sp, #48	; 0x30
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b088:	2300      	movs	r3, #0
 800b08a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10a      	bne.n	800b0ac <xQueueReceive+0x30>
	__asm volatile
 800b096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09a:	f383 8811 	msr	BASEPRI, r3
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f3bf 8f4f 	dsb	sy
 800b0a6:	623b      	str	r3, [r7, #32]
}
 800b0a8:	bf00      	nop
 800b0aa:	e7fe      	b.n	800b0aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d103      	bne.n	800b0ba <xQueueReceive+0x3e>
 800b0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <xQueueReceive+0x42>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e000      	b.n	800b0c0 <xQueueReceive+0x44>
 800b0be:	2300      	movs	r3, #0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d10a      	bne.n	800b0da <xQueueReceive+0x5e>
	__asm volatile
 800b0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c8:	f383 8811 	msr	BASEPRI, r3
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	61fb      	str	r3, [r7, #28]
}
 800b0d6:	bf00      	nop
 800b0d8:	e7fe      	b.n	800b0d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0da:	f001 f923 	bl	800c324 <xTaskGetSchedulerState>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d102      	bne.n	800b0ea <xQueueReceive+0x6e>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d101      	bne.n	800b0ee <xQueueReceive+0x72>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e000      	b.n	800b0f0 <xQueueReceive+0x74>
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10a      	bne.n	800b10a <xQueueReceive+0x8e>
	__asm volatile
 800b0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	61bb      	str	r3, [r7, #24]
}
 800b106:	bf00      	nop
 800b108:	e7fe      	b.n	800b108 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b10a:	f001 fc5b 	bl	800c9c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b112:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	2b00      	cmp	r3, #0
 800b118:	d01f      	beq.n	800b15a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b11a:	68b9      	ldr	r1, [r7, #8]
 800b11c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b11e:	f000 fa1b 	bl	800b558 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	1e5a      	subs	r2, r3, #1
 800b126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b128:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00f      	beq.n	800b152 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b134:	3310      	adds	r3, #16
 800b136:	4618      	mov	r0, r3
 800b138:	f000 fefc 	bl	800bf34 <xTaskRemoveFromEventList>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d007      	beq.n	800b152 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b142:	4b3d      	ldr	r3, [pc, #244]	; (800b238 <xQueueReceive+0x1bc>)
 800b144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b148:	601a      	str	r2, [r3, #0]
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b152:	f001 fc67 	bl	800ca24 <vPortExitCritical>
				return pdPASS;
 800b156:	2301      	movs	r3, #1
 800b158:	e069      	b.n	800b22e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d103      	bne.n	800b168 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b160:	f001 fc60 	bl	800ca24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b164:	2300      	movs	r3, #0
 800b166:	e062      	b.n	800b22e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d106      	bne.n	800b17c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b16e:	f107 0310 	add.w	r3, r7, #16
 800b172:	4618      	mov	r0, r3
 800b174:	f000 ff40 	bl	800bff8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b178:	2301      	movs	r3, #1
 800b17a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b17c:	f001 fc52 	bl	800ca24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b180:	f000 fce0 	bl	800bb44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b184:	f001 fc1e 	bl	800c9c4 <vPortEnterCritical>
 800b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b18e:	b25b      	sxtb	r3, r3
 800b190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b194:	d103      	bne.n	800b19e <xQueueReceive+0x122>
 800b196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b198:	2200      	movs	r2, #0
 800b19a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1a4:	b25b      	sxtb	r3, r3
 800b1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1aa:	d103      	bne.n	800b1b4 <xQueueReceive+0x138>
 800b1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1b4:	f001 fc36 	bl	800ca24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1b8:	1d3a      	adds	r2, r7, #4
 800b1ba:	f107 0310 	add.w	r3, r7, #16
 800b1be:	4611      	mov	r1, r2
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f000 ff2f 	bl	800c024 <xTaskCheckForTimeOut>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d123      	bne.n	800b214 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ce:	f000 fa3b 	bl	800b648 <prvIsQueueEmpty>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d017      	beq.n	800b208 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1da:	3324      	adds	r3, #36	; 0x24
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	4611      	mov	r1, r2
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f000 fe83 	bl	800beec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1e8:	f000 f9dc 	bl	800b5a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1ec:	f000 fcb8 	bl	800bb60 <xTaskResumeAll>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d189      	bne.n	800b10a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b1f6:	4b10      	ldr	r3, [pc, #64]	; (800b238 <xQueueReceive+0x1bc>)
 800b1f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1fc:	601a      	str	r2, [r3, #0]
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	e780      	b.n	800b10a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b20a:	f000 f9cb 	bl	800b5a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b20e:	f000 fca7 	bl	800bb60 <xTaskResumeAll>
 800b212:	e77a      	b.n	800b10a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b216:	f000 f9c5 	bl	800b5a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b21a:	f000 fca1 	bl	800bb60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b21e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b220:	f000 fa12 	bl	800b648 <prvIsQueueEmpty>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	f43f af6f 	beq.w	800b10a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b22c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3730      	adds	r7, #48	; 0x30
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	e000ed04 	.word	0xe000ed04

0800b23c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b08e      	sub	sp, #56	; 0x38
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b246:	2300      	movs	r3, #0
 800b248:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b24e:	2300      	movs	r3, #0
 800b250:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10a      	bne.n	800b26e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	623b      	str	r3, [r7, #32]
}
 800b26a:	bf00      	nop
 800b26c:	e7fe      	b.n	800b26c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00a      	beq.n	800b28c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	61fb      	str	r3, [r7, #28]
}
 800b288:	bf00      	nop
 800b28a:	e7fe      	b.n	800b28a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b28c:	f001 f84a 	bl	800c324 <xTaskGetSchedulerState>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d102      	bne.n	800b29c <xQueueSemaphoreTake+0x60>
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d101      	bne.n	800b2a0 <xQueueSemaphoreTake+0x64>
 800b29c:	2301      	movs	r3, #1
 800b29e:	e000      	b.n	800b2a2 <xQueueSemaphoreTake+0x66>
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10a      	bne.n	800b2bc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2aa:	f383 8811 	msr	BASEPRI, r3
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	61bb      	str	r3, [r7, #24]
}
 800b2b8:	bf00      	nop
 800b2ba:	e7fe      	b.n	800b2ba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2bc:	f001 fb82 	bl	800c9c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d024      	beq.n	800b316 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ce:	1e5a      	subs	r2, r3, #1
 800b2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d104      	bne.n	800b2e6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b2dc:	f001 f9ca 	bl	800c674 <pvTaskIncrementMutexHeldCount>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00f      	beq.n	800b30e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f0:	3310      	adds	r3, #16
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f000 fe1e 	bl	800bf34 <xTaskRemoveFromEventList>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d007      	beq.n	800b30e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b2fe:	4b54      	ldr	r3, [pc, #336]	; (800b450 <xQueueSemaphoreTake+0x214>)
 800b300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b304:	601a      	str	r2, [r3, #0]
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b30e:	f001 fb89 	bl	800ca24 <vPortExitCritical>
				return pdPASS;
 800b312:	2301      	movs	r3, #1
 800b314:	e097      	b.n	800b446 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d111      	bne.n	800b340 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00a      	beq.n	800b338 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b326:	f383 8811 	msr	BASEPRI, r3
 800b32a:	f3bf 8f6f 	isb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	617b      	str	r3, [r7, #20]
}
 800b334:	bf00      	nop
 800b336:	e7fe      	b.n	800b336 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b338:	f001 fb74 	bl	800ca24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b33c:	2300      	movs	r3, #0
 800b33e:	e082      	b.n	800b446 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b342:	2b00      	cmp	r3, #0
 800b344:	d106      	bne.n	800b354 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b346:	f107 030c 	add.w	r3, r7, #12
 800b34a:	4618      	mov	r0, r3
 800b34c:	f000 fe54 	bl	800bff8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b350:	2301      	movs	r3, #1
 800b352:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b354:	f001 fb66 	bl	800ca24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b358:	f000 fbf4 	bl	800bb44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b35c:	f001 fb32 	bl	800c9c4 <vPortEnterCritical>
 800b360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b362:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b366:	b25b      	sxtb	r3, r3
 800b368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36c:	d103      	bne.n	800b376 <xQueueSemaphoreTake+0x13a>
 800b36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b370:	2200      	movs	r2, #0
 800b372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b378:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b37c:	b25b      	sxtb	r3, r3
 800b37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b382:	d103      	bne.n	800b38c <xQueueSemaphoreTake+0x150>
 800b384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b386:	2200      	movs	r2, #0
 800b388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b38c:	f001 fb4a 	bl	800ca24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b390:	463a      	mov	r2, r7
 800b392:	f107 030c 	add.w	r3, r7, #12
 800b396:	4611      	mov	r1, r2
 800b398:	4618      	mov	r0, r3
 800b39a:	f000 fe43 	bl	800c024 <xTaskCheckForTimeOut>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d132      	bne.n	800b40a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3a6:	f000 f94f 	bl	800b648 <prvIsQueueEmpty>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d026      	beq.n	800b3fe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d109      	bne.n	800b3cc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b3b8:	f001 fb04 	bl	800c9c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 ffcd 	bl	800c360 <xTaskPriorityInherit>
 800b3c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b3c8:	f001 fb2c 	bl	800ca24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ce:	3324      	adds	r3, #36	; 0x24
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	4611      	mov	r1, r2
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 fd89 	bl	800beec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3dc:	f000 f8e2 	bl	800b5a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3e0:	f000 fbbe 	bl	800bb60 <xTaskResumeAll>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f47f af68 	bne.w	800b2bc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b3ec:	4b18      	ldr	r3, [pc, #96]	; (800b450 <xQueueSemaphoreTake+0x214>)
 800b3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	e75e      	b.n	800b2bc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b3fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b400:	f000 f8d0 	bl	800b5a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b404:	f000 fbac 	bl	800bb60 <xTaskResumeAll>
 800b408:	e758      	b.n	800b2bc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b40a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b40c:	f000 f8ca 	bl	800b5a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b410:	f000 fba6 	bl	800bb60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b416:	f000 f917 	bl	800b648 <prvIsQueueEmpty>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f43f af4d 	beq.w	800b2bc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00d      	beq.n	800b444 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b428:	f001 facc 	bl	800c9c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b42c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b42e:	f000 f811 	bl	800b454 <prvGetDisinheritPriorityAfterTimeout>
 800b432:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b43a:	4618      	mov	r0, r3
 800b43c:	f001 f88c 	bl	800c558 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b440:	f001 faf0 	bl	800ca24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b444:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b446:	4618      	mov	r0, r3
 800b448:	3738      	adds	r7, #56	; 0x38
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	e000ed04 	.word	0xe000ed04

0800b454 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b460:	2b00      	cmp	r3, #0
 800b462:	d006      	beq.n	800b472 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f1c3 0307 	rsb	r3, r3, #7
 800b46e:	60fb      	str	r3, [r7, #12]
 800b470:	e001      	b.n	800b476 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b476:	68fb      	ldr	r3, [r7, #12]
	}
 800b478:	4618      	mov	r0, r3
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b490:	2300      	movs	r3, #0
 800b492:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b498:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10d      	bne.n	800b4be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d14d      	bne.n	800b546 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f000 ffcc 	bl	800c44c <xTaskPriorityDisinherit>
 800b4b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	609a      	str	r2, [r3, #8]
 800b4bc:	e043      	b.n	800b546 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d119      	bne.n	800b4f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6858      	ldr	r0, [r3, #4]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	68b9      	ldr	r1, [r7, #8]
 800b4d0:	f002 fe41 	bl	800e156 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	685a      	ldr	r2, [r3, #4]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4dc:	441a      	add	r2, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	685a      	ldr	r2, [r3, #4]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d32b      	bcc.n	800b546 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	605a      	str	r2, [r3, #4]
 800b4f6:	e026      	b.n	800b546 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	68d8      	ldr	r0, [r3, #12]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b500:	461a      	mov	r2, r3
 800b502:	68b9      	ldr	r1, [r7, #8]
 800b504:	f002 fe27 	bl	800e156 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	68da      	ldr	r2, [r3, #12]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b510:	425b      	negs	r3, r3
 800b512:	441a      	add	r2, r3
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	68da      	ldr	r2, [r3, #12]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	429a      	cmp	r2, r3
 800b522:	d207      	bcs.n	800b534 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	689a      	ldr	r2, [r3, #8]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b52c:	425b      	negs	r3, r3
 800b52e:	441a      	add	r2, r3
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b02      	cmp	r3, #2
 800b538:	d105      	bne.n	800b546 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	3b01      	subs	r3, #1
 800b544:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	1c5a      	adds	r2, r3, #1
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b54e:	697b      	ldr	r3, [r7, #20]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3718      	adds	r7, #24
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b566:	2b00      	cmp	r3, #0
 800b568:	d018      	beq.n	800b59c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	68da      	ldr	r2, [r3, #12]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b572:	441a      	add	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68da      	ldr	r2, [r3, #12]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	429a      	cmp	r2, r3
 800b582:	d303      	bcc.n	800b58c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	68d9      	ldr	r1, [r3, #12]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b594:	461a      	mov	r2, r3
 800b596:	6838      	ldr	r0, [r7, #0]
 800b598:	f002 fddd 	bl	800e156 <memcpy>
	}
}
 800b59c:	bf00      	nop
 800b59e:	3708      	adds	r7, #8
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b5ac:	f001 fa0a 	bl	800c9c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5b8:	e011      	b.n	800b5de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d012      	beq.n	800b5e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	3324      	adds	r3, #36	; 0x24
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f000 fcb4 	bl	800bf34 <xTaskRemoveFromEventList>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b5d2:	f000 fd89 	bl	800c0e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	dce9      	bgt.n	800b5ba <prvUnlockQueue+0x16>
 800b5e6:	e000      	b.n	800b5ea <prvUnlockQueue+0x46>
					break;
 800b5e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	22ff      	movs	r2, #255	; 0xff
 800b5ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b5f2:	f001 fa17 	bl	800ca24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b5f6:	f001 f9e5 	bl	800c9c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b600:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b602:	e011      	b.n	800b628 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d012      	beq.n	800b632 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3310      	adds	r3, #16
 800b610:	4618      	mov	r0, r3
 800b612:	f000 fc8f 	bl	800bf34 <xTaskRemoveFromEventList>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d001      	beq.n	800b620 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b61c:	f000 fd64 	bl	800c0e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b620:	7bbb      	ldrb	r3, [r7, #14]
 800b622:	3b01      	subs	r3, #1
 800b624:	b2db      	uxtb	r3, r3
 800b626:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	dce9      	bgt.n	800b604 <prvUnlockQueue+0x60>
 800b630:	e000      	b.n	800b634 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b632:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	22ff      	movs	r2, #255	; 0xff
 800b638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b63c:	f001 f9f2 	bl	800ca24 <vPortExitCritical>
}
 800b640:	bf00      	nop
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b650:	f001 f9b8 	bl	800c9c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d102      	bne.n	800b662 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b65c:	2301      	movs	r3, #1
 800b65e:	60fb      	str	r3, [r7, #12]
 800b660:	e001      	b.n	800b666 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b662:	2300      	movs	r3, #0
 800b664:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b666:	f001 f9dd 	bl	800ca24 <vPortExitCritical>

	return xReturn;
 800b66a:	68fb      	ldr	r3, [r7, #12]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b67c:	f001 f9a2 	bl	800c9c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b688:	429a      	cmp	r2, r3
 800b68a:	d102      	bne.n	800b692 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b68c:	2301      	movs	r3, #1
 800b68e:	60fb      	str	r3, [r7, #12]
 800b690:	e001      	b.n	800b696 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b692:	2300      	movs	r3, #0
 800b694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b696:	f001 f9c5 	bl	800ca24 <vPortExitCritical>

	return xReturn;
 800b69a:	68fb      	ldr	r3, [r7, #12]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b08e      	sub	sp, #56	; 0x38
 800b6a8:	af04      	add	r7, sp, #16
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10a      	bne.n	800b6ce <xTaskCreateStatic+0x2a>
	__asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	623b      	str	r3, [r7, #32]
}
 800b6ca:	bf00      	nop
 800b6cc:	e7fe      	b.n	800b6cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10a      	bne.n	800b6ea <xTaskCreateStatic+0x46>
	__asm volatile
 800b6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d8:	f383 8811 	msr	BASEPRI, r3
 800b6dc:	f3bf 8f6f 	isb	sy
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	61fb      	str	r3, [r7, #28]
}
 800b6e6:	bf00      	nop
 800b6e8:	e7fe      	b.n	800b6e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b6ea:	23a0      	movs	r3, #160	; 0xa0
 800b6ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	2ba0      	cmp	r3, #160	; 0xa0
 800b6f2:	d00a      	beq.n	800b70a <xTaskCreateStatic+0x66>
	__asm volatile
 800b6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	61bb      	str	r3, [r7, #24]
}
 800b706:	bf00      	nop
 800b708:	e7fe      	b.n	800b708 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b70a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d01e      	beq.n	800b750 <xTaskCreateStatic+0xac>
 800b712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b714:	2b00      	cmp	r3, #0
 800b716:	d01b      	beq.n	800b750 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b720:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b724:	2202      	movs	r2, #2
 800b726:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b72a:	2300      	movs	r3, #0
 800b72c:	9303      	str	r3, [sp, #12]
 800b72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b730:	9302      	str	r3, [sp, #8]
 800b732:	f107 0314 	add.w	r3, r7, #20
 800b736:	9301      	str	r3, [sp, #4]
 800b738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	68b9      	ldr	r1, [r7, #8]
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f000 f850 	bl	800b7e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b74a:	f000 f8f3 	bl	800b934 <prvAddNewTaskToReadyList>
 800b74e:	e001      	b.n	800b754 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b750:	2300      	movs	r3, #0
 800b752:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b754:	697b      	ldr	r3, [r7, #20]
	}
 800b756:	4618      	mov	r0, r3
 800b758:	3728      	adds	r7, #40	; 0x28
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b08c      	sub	sp, #48	; 0x30
 800b762:	af04      	add	r7, sp, #16
 800b764:	60f8      	str	r0, [r7, #12]
 800b766:	60b9      	str	r1, [r7, #8]
 800b768:	603b      	str	r3, [r7, #0]
 800b76a:	4613      	mov	r3, r2
 800b76c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b76e:	88fb      	ldrh	r3, [r7, #6]
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4618      	mov	r0, r3
 800b774:	f001 fa48 	bl	800cc08 <pvPortMalloc>
 800b778:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00e      	beq.n	800b79e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b780:	20a0      	movs	r0, #160	; 0xa0
 800b782:	f001 fa41 	bl	800cc08 <pvPortMalloc>
 800b786:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d003      	beq.n	800b796 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	697a      	ldr	r2, [r7, #20]
 800b792:	631a      	str	r2, [r3, #48]	; 0x30
 800b794:	e005      	b.n	800b7a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b796:	6978      	ldr	r0, [r7, #20]
 800b798:	f001 fb02 	bl	800cda0 <vPortFree>
 800b79c:	e001      	b.n	800b7a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d017      	beq.n	800b7d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b7a8:	69fb      	ldr	r3, [r7, #28]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b7b0:	88fa      	ldrh	r2, [r7, #6]
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	9303      	str	r3, [sp, #12]
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	9302      	str	r3, [sp, #8]
 800b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7bc:	9301      	str	r3, [sp, #4]
 800b7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	68b9      	ldr	r1, [r7, #8]
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f000 f80e 	bl	800b7e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7cc:	69f8      	ldr	r0, [r7, #28]
 800b7ce:	f000 f8b1 	bl	800b934 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	61bb      	str	r3, [r7, #24]
 800b7d6:	e002      	b.n	800b7de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b7d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b7de:	69bb      	ldr	r3, [r7, #24]
	}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3720      	adds	r7, #32
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b088      	sub	sp, #32
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
 800b7f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	461a      	mov	r2, r3
 800b800:	21a5      	movs	r1, #165	; 0xa5
 800b802:	f002 fbb4 	bl	800df6e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b810:	3b01      	subs	r3, #1
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	4413      	add	r3, r2
 800b816:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	f023 0307 	bic.w	r3, r3, #7
 800b81e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	f003 0307 	and.w	r3, r3, #7
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00a      	beq.n	800b840 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	617b      	str	r3, [r7, #20]
}
 800b83c:	bf00      	nop
 800b83e:	e7fe      	b.n	800b83e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d01f      	beq.n	800b886 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b846:	2300      	movs	r3, #0
 800b848:	61fb      	str	r3, [r7, #28]
 800b84a:	e012      	b.n	800b872 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	69fb      	ldr	r3, [r7, #28]
 800b850:	4413      	add	r3, r2
 800b852:	7819      	ldrb	r1, [r3, #0]
 800b854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	4413      	add	r3, r2
 800b85a:	3334      	adds	r3, #52	; 0x34
 800b85c:	460a      	mov	r2, r1
 800b85e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	4413      	add	r3, r2
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d006      	beq.n	800b87a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	3301      	adds	r3, #1
 800b870:	61fb      	str	r3, [r7, #28]
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	2b0f      	cmp	r3, #15
 800b876:	d9e9      	bls.n	800b84c <prvInitialiseNewTask+0x64>
 800b878:	e000      	b.n	800b87c <prvInitialiseNewTask+0x94>
			{
				break;
 800b87a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87e:	2200      	movs	r2, #0
 800b880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b884:	e003      	b.n	800b88e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b890:	2b06      	cmp	r3, #6
 800b892:	d901      	bls.n	800b898 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b894:	2306      	movs	r3, #6
 800b896:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b89c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7ff f902 	bl	800aab8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b6:	3318      	adds	r3, #24
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7ff f8fd 	bl	800aab8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c6:	f1c3 0207 	rsb	r2, r3, #7
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e6:	334c      	adds	r3, #76	; 0x4c
 800b8e8:	224c      	movs	r2, #76	; 0x4c
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f002 fb3e 	bl	800df6e <memset>
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f4:	4a0c      	ldr	r2, [pc, #48]	; (800b928 <prvInitialiseNewTask+0x140>)
 800b8f6:	651a      	str	r2, [r3, #80]	; 0x50
 800b8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fa:	4a0c      	ldr	r2, [pc, #48]	; (800b92c <prvInitialiseNewTask+0x144>)
 800b8fc:	655a      	str	r2, [r3, #84]	; 0x54
 800b8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b900:	4a0b      	ldr	r2, [pc, #44]	; (800b930 <prvInitialiseNewTask+0x148>)
 800b902:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b904:	683a      	ldr	r2, [r7, #0]
 800b906:	68f9      	ldr	r1, [r7, #12]
 800b908:	69b8      	ldr	r0, [r7, #24]
 800b90a:	f000 ff2d 	bl	800c768 <pxPortInitialiseStack>
 800b90e:	4602      	mov	r2, r0
 800b910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b912:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b916:	2b00      	cmp	r3, #0
 800b918:	d002      	beq.n	800b920 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b91e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b920:	bf00      	nop
 800b922:	3720      	adds	r7, #32
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	20008ad0 	.word	0x20008ad0
 800b92c:	20008b38 	.word	0x20008b38
 800b930:	20008ba0 	.word	0x20008ba0

0800b934 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b93c:	f001 f842 	bl	800c9c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b940:	4b2a      	ldr	r3, [pc, #168]	; (800b9ec <prvAddNewTaskToReadyList+0xb8>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	3301      	adds	r3, #1
 800b946:	4a29      	ldr	r2, [pc, #164]	; (800b9ec <prvAddNewTaskToReadyList+0xb8>)
 800b948:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b94a:	4b29      	ldr	r3, [pc, #164]	; (800b9f0 <prvAddNewTaskToReadyList+0xbc>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d109      	bne.n	800b966 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b952:	4a27      	ldr	r2, [pc, #156]	; (800b9f0 <prvAddNewTaskToReadyList+0xbc>)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b958:	4b24      	ldr	r3, [pc, #144]	; (800b9ec <prvAddNewTaskToReadyList+0xb8>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d110      	bne.n	800b982 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b960:	f000 fbe6 	bl	800c130 <prvInitialiseTaskLists>
 800b964:	e00d      	b.n	800b982 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b966:	4b23      	ldr	r3, [pc, #140]	; (800b9f4 <prvAddNewTaskToReadyList+0xc0>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d109      	bne.n	800b982 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b96e:	4b20      	ldr	r3, [pc, #128]	; (800b9f0 <prvAddNewTaskToReadyList+0xbc>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b978:	429a      	cmp	r2, r3
 800b97a:	d802      	bhi.n	800b982 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b97c:	4a1c      	ldr	r2, [pc, #112]	; (800b9f0 <prvAddNewTaskToReadyList+0xbc>)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b982:	4b1d      	ldr	r3, [pc, #116]	; (800b9f8 <prvAddNewTaskToReadyList+0xc4>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3301      	adds	r3, #1
 800b988:	4a1b      	ldr	r2, [pc, #108]	; (800b9f8 <prvAddNewTaskToReadyList+0xc4>)
 800b98a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b990:	2201      	movs	r2, #1
 800b992:	409a      	lsls	r2, r3
 800b994:	4b19      	ldr	r3, [pc, #100]	; (800b9fc <prvAddNewTaskToReadyList+0xc8>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4313      	orrs	r3, r2
 800b99a:	4a18      	ldr	r2, [pc, #96]	; (800b9fc <prvAddNewTaskToReadyList+0xc8>)
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4413      	add	r3, r2
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4a15      	ldr	r2, [pc, #84]	; (800ba00 <prvAddNewTaskToReadyList+0xcc>)
 800b9ac:	441a      	add	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	3304      	adds	r3, #4
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	4610      	mov	r0, r2
 800b9b6:	f7ff f88c 	bl	800aad2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b9ba:	f001 f833 	bl	800ca24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b9be:	4b0d      	ldr	r3, [pc, #52]	; (800b9f4 <prvAddNewTaskToReadyList+0xc0>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00e      	beq.n	800b9e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b9c6:	4b0a      	ldr	r3, [pc, #40]	; (800b9f0 <prvAddNewTaskToReadyList+0xbc>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d207      	bcs.n	800b9e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b9d4:	4b0b      	ldr	r3, [pc, #44]	; (800ba04 <prvAddNewTaskToReadyList+0xd0>)
 800b9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9da:	601a      	str	r2, [r3, #0]
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9e4:	bf00      	nop
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	2000154c 	.word	0x2000154c
 800b9f0:	2000144c 	.word	0x2000144c
 800b9f4:	20001558 	.word	0x20001558
 800b9f8:	20001568 	.word	0x20001568
 800b9fc:	20001554 	.word	0x20001554
 800ba00:	20001450 	.word	0x20001450
 800ba04:	e000ed04 	.word	0xe000ed04

0800ba08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba10:	2300      	movs	r3, #0
 800ba12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d017      	beq.n	800ba4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba1a:	4b13      	ldr	r3, [pc, #76]	; (800ba68 <vTaskDelay+0x60>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00a      	beq.n	800ba38 <vTaskDelay+0x30>
	__asm volatile
 800ba22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba26:	f383 8811 	msr	BASEPRI, r3
 800ba2a:	f3bf 8f6f 	isb	sy
 800ba2e:	f3bf 8f4f 	dsb	sy
 800ba32:	60bb      	str	r3, [r7, #8]
}
 800ba34:	bf00      	nop
 800ba36:	e7fe      	b.n	800ba36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba38:	f000 f884 	bl	800bb44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 fe2c 	bl	800c69c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba44:	f000 f88c 	bl	800bb60 <xTaskResumeAll>
 800ba48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d107      	bne.n	800ba60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ba50:	4b06      	ldr	r3, [pc, #24]	; (800ba6c <vTaskDelay+0x64>)
 800ba52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba56:	601a      	str	r2, [r3, #0]
 800ba58:	f3bf 8f4f 	dsb	sy
 800ba5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba60:	bf00      	nop
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	20001574 	.word	0x20001574
 800ba6c:	e000ed04 	.word	0xe000ed04

0800ba70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b08a      	sub	sp, #40	; 0x28
 800ba74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ba76:	2300      	movs	r3, #0
 800ba78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ba7e:	463a      	mov	r2, r7
 800ba80:	1d39      	adds	r1, r7, #4
 800ba82:	f107 0308 	add.w	r3, r7, #8
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7f5 fc20 	bl	80012cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ba8c:	6839      	ldr	r1, [r7, #0]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	9202      	str	r2, [sp, #8]
 800ba94:	9301      	str	r3, [sp, #4]
 800ba96:	2300      	movs	r3, #0
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	460a      	mov	r2, r1
 800ba9e:	4921      	ldr	r1, [pc, #132]	; (800bb24 <vTaskStartScheduler+0xb4>)
 800baa0:	4821      	ldr	r0, [pc, #132]	; (800bb28 <vTaskStartScheduler+0xb8>)
 800baa2:	f7ff fdff 	bl	800b6a4 <xTaskCreateStatic>
 800baa6:	4603      	mov	r3, r0
 800baa8:	4a20      	ldr	r2, [pc, #128]	; (800bb2c <vTaskStartScheduler+0xbc>)
 800baaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800baac:	4b1f      	ldr	r3, [pc, #124]	; (800bb2c <vTaskStartScheduler+0xbc>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bab4:	2301      	movs	r3, #1
 800bab6:	617b      	str	r3, [r7, #20]
 800bab8:	e001      	b.n	800babe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800baba:	2300      	movs	r3, #0
 800babc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d11b      	bne.n	800bafc <vTaskStartScheduler+0x8c>
	__asm volatile
 800bac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	613b      	str	r3, [r7, #16]
}
 800bad6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bad8:	4b15      	ldr	r3, [pc, #84]	; (800bb30 <vTaskStartScheduler+0xc0>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	334c      	adds	r3, #76	; 0x4c
 800bade:	4a15      	ldr	r2, [pc, #84]	; (800bb34 <vTaskStartScheduler+0xc4>)
 800bae0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bae2:	4b15      	ldr	r3, [pc, #84]	; (800bb38 <vTaskStartScheduler+0xc8>)
 800bae4:	f04f 32ff 	mov.w	r2, #4294967295
 800bae8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800baea:	4b14      	ldr	r3, [pc, #80]	; (800bb3c <vTaskStartScheduler+0xcc>)
 800baec:	2201      	movs	r2, #1
 800baee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800baf0:	4b13      	ldr	r3, [pc, #76]	; (800bb40 <vTaskStartScheduler+0xd0>)
 800baf2:	2200      	movs	r2, #0
 800baf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800baf6:	f000 fec3 	bl	800c880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bafa:	e00e      	b.n	800bb1a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb02:	d10a      	bne.n	800bb1a <vTaskStartScheduler+0xaa>
	__asm volatile
 800bb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb08:	f383 8811 	msr	BASEPRI, r3
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	60fb      	str	r3, [r7, #12]
}
 800bb16:	bf00      	nop
 800bb18:	e7fe      	b.n	800bb18 <vTaskStartScheduler+0xa8>
}
 800bb1a:	bf00      	nop
 800bb1c:	3718      	adds	r7, #24
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	0801392c 	.word	0x0801392c
 800bb28:	0800c101 	.word	0x0800c101
 800bb2c:	20001570 	.word	0x20001570
 800bb30:	2000144c 	.word	0x2000144c
 800bb34:	20000130 	.word	0x20000130
 800bb38:	2000156c 	.word	0x2000156c
 800bb3c:	20001558 	.word	0x20001558
 800bb40:	20001550 	.word	0x20001550

0800bb44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bb44:	b480      	push	{r7}
 800bb46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bb48:	4b04      	ldr	r3, [pc, #16]	; (800bb5c <vTaskSuspendAll+0x18>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	4a03      	ldr	r2, [pc, #12]	; (800bb5c <vTaskSuspendAll+0x18>)
 800bb50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bb52:	bf00      	nop
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr
 800bb5c:	20001574 	.word	0x20001574

0800bb60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bb66:	2300      	movs	r3, #0
 800bb68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bb6e:	4b41      	ldr	r3, [pc, #260]	; (800bc74 <xTaskResumeAll+0x114>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10a      	bne.n	800bb8c <xTaskResumeAll+0x2c>
	__asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	603b      	str	r3, [r7, #0]
}
 800bb88:	bf00      	nop
 800bb8a:	e7fe      	b.n	800bb8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bb8c:	f000 ff1a 	bl	800c9c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bb90:	4b38      	ldr	r3, [pc, #224]	; (800bc74 <xTaskResumeAll+0x114>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	3b01      	subs	r3, #1
 800bb96:	4a37      	ldr	r2, [pc, #220]	; (800bc74 <xTaskResumeAll+0x114>)
 800bb98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb9a:	4b36      	ldr	r3, [pc, #216]	; (800bc74 <xTaskResumeAll+0x114>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d161      	bne.n	800bc66 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bba2:	4b35      	ldr	r3, [pc, #212]	; (800bc78 <xTaskResumeAll+0x118>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d05d      	beq.n	800bc66 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbaa:	e02e      	b.n	800bc0a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbac:	4b33      	ldr	r3, [pc, #204]	; (800bc7c <xTaskResumeAll+0x11c>)
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	3318      	adds	r3, #24
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7fe ffe7 	bl	800ab8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fe ffe2 	bl	800ab8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbcc:	2201      	movs	r2, #1
 800bbce:	409a      	lsls	r2, r3
 800bbd0:	4b2b      	ldr	r3, [pc, #172]	; (800bc80 <xTaskResumeAll+0x120>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	4a2a      	ldr	r2, [pc, #168]	; (800bc80 <xTaskResumeAll+0x120>)
 800bbd8:	6013      	str	r3, [r2, #0]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbde:	4613      	mov	r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	4a27      	ldr	r2, [pc, #156]	; (800bc84 <xTaskResumeAll+0x124>)
 800bbe8:	441a      	add	r2, r3
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	3304      	adds	r3, #4
 800bbee:	4619      	mov	r1, r3
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	f7fe ff6e 	bl	800aad2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbfa:	4b23      	ldr	r3, [pc, #140]	; (800bc88 <xTaskResumeAll+0x128>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d302      	bcc.n	800bc0a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bc04:	4b21      	ldr	r3, [pc, #132]	; (800bc8c <xTaskResumeAll+0x12c>)
 800bc06:	2201      	movs	r2, #1
 800bc08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc0a:	4b1c      	ldr	r3, [pc, #112]	; (800bc7c <xTaskResumeAll+0x11c>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d1cc      	bne.n	800bbac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d001      	beq.n	800bc1c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bc18:	f000 fb64 	bl	800c2e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bc1c:	4b1c      	ldr	r3, [pc, #112]	; (800bc90 <xTaskResumeAll+0x130>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d010      	beq.n	800bc4a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bc28:	f000 f846 	bl	800bcb8 <xTaskIncrementTick>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d002      	beq.n	800bc38 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bc32:	4b16      	ldr	r3, [pc, #88]	; (800bc8c <xTaskResumeAll+0x12c>)
 800bc34:	2201      	movs	r2, #1
 800bc36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1f1      	bne.n	800bc28 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bc44:	4b12      	ldr	r3, [pc, #72]	; (800bc90 <xTaskResumeAll+0x130>)
 800bc46:	2200      	movs	r2, #0
 800bc48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bc4a:	4b10      	ldr	r3, [pc, #64]	; (800bc8c <xTaskResumeAll+0x12c>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d009      	beq.n	800bc66 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bc52:	2301      	movs	r3, #1
 800bc54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bc56:	4b0f      	ldr	r3, [pc, #60]	; (800bc94 <xTaskResumeAll+0x134>)
 800bc58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc5c:	601a      	str	r2, [r3, #0]
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc66:	f000 fedd 	bl	800ca24 <vPortExitCritical>

	return xAlreadyYielded;
 800bc6a:	68bb      	ldr	r3, [r7, #8]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	20001574 	.word	0x20001574
 800bc78:	2000154c 	.word	0x2000154c
 800bc7c:	2000150c 	.word	0x2000150c
 800bc80:	20001554 	.word	0x20001554
 800bc84:	20001450 	.word	0x20001450
 800bc88:	2000144c 	.word	0x2000144c
 800bc8c:	20001560 	.word	0x20001560
 800bc90:	2000155c 	.word	0x2000155c
 800bc94:	e000ed04 	.word	0xe000ed04

0800bc98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bc9e:	4b05      	ldr	r3, [pc, #20]	; (800bcb4 <xTaskGetTickCount+0x1c>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bca4:	687b      	ldr	r3, [r7, #4]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	370c      	adds	r7, #12
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	20001550 	.word	0x20001550

0800bcb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b086      	sub	sp, #24
 800bcbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcc2:	4b4e      	ldr	r3, [pc, #312]	; (800bdfc <xTaskIncrementTick+0x144>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f040 808e 	bne.w	800bde8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bccc:	4b4c      	ldr	r3, [pc, #304]	; (800be00 <xTaskIncrementTick+0x148>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bcd4:	4a4a      	ldr	r2, [pc, #296]	; (800be00 <xTaskIncrementTick+0x148>)
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d120      	bne.n	800bd22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bce0:	4b48      	ldr	r3, [pc, #288]	; (800be04 <xTaskIncrementTick+0x14c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00a      	beq.n	800bd00 <xTaskIncrementTick+0x48>
	__asm volatile
 800bcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcee:	f383 8811 	msr	BASEPRI, r3
 800bcf2:	f3bf 8f6f 	isb	sy
 800bcf6:	f3bf 8f4f 	dsb	sy
 800bcfa:	603b      	str	r3, [r7, #0]
}
 800bcfc:	bf00      	nop
 800bcfe:	e7fe      	b.n	800bcfe <xTaskIncrementTick+0x46>
 800bd00:	4b40      	ldr	r3, [pc, #256]	; (800be04 <xTaskIncrementTick+0x14c>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	60fb      	str	r3, [r7, #12]
 800bd06:	4b40      	ldr	r3, [pc, #256]	; (800be08 <xTaskIncrementTick+0x150>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a3e      	ldr	r2, [pc, #248]	; (800be04 <xTaskIncrementTick+0x14c>)
 800bd0c:	6013      	str	r3, [r2, #0]
 800bd0e:	4a3e      	ldr	r2, [pc, #248]	; (800be08 <xTaskIncrementTick+0x150>)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6013      	str	r3, [r2, #0]
 800bd14:	4b3d      	ldr	r3, [pc, #244]	; (800be0c <xTaskIncrementTick+0x154>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	4a3c      	ldr	r2, [pc, #240]	; (800be0c <xTaskIncrementTick+0x154>)
 800bd1c:	6013      	str	r3, [r2, #0]
 800bd1e:	f000 fae1 	bl	800c2e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd22:	4b3b      	ldr	r3, [pc, #236]	; (800be10 <xTaskIncrementTick+0x158>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	693a      	ldr	r2, [r7, #16]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d348      	bcc.n	800bdbe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd2c:	4b35      	ldr	r3, [pc, #212]	; (800be04 <xTaskIncrementTick+0x14c>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d104      	bne.n	800bd40 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd36:	4b36      	ldr	r3, [pc, #216]	; (800be10 <xTaskIncrementTick+0x158>)
 800bd38:	f04f 32ff 	mov.w	r2, #4294967295
 800bd3c:	601a      	str	r2, [r3, #0]
					break;
 800bd3e:	e03e      	b.n	800bdbe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd40:	4b30      	ldr	r3, [pc, #192]	; (800be04 <xTaskIncrementTick+0x14c>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bd50:	693a      	ldr	r2, [r7, #16]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d203      	bcs.n	800bd60 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bd58:	4a2d      	ldr	r2, [pc, #180]	; (800be10 <xTaskIncrementTick+0x158>)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bd5e:	e02e      	b.n	800bdbe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	3304      	adds	r3, #4
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7fe ff11 	bl	800ab8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d004      	beq.n	800bd7c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	3318      	adds	r3, #24
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fe ff08 	bl	800ab8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd80:	2201      	movs	r2, #1
 800bd82:	409a      	lsls	r2, r3
 800bd84:	4b23      	ldr	r3, [pc, #140]	; (800be14 <xTaskIncrementTick+0x15c>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	4a22      	ldr	r2, [pc, #136]	; (800be14 <xTaskIncrementTick+0x15c>)
 800bd8c:	6013      	str	r3, [r2, #0]
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd92:	4613      	mov	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4a1f      	ldr	r2, [pc, #124]	; (800be18 <xTaskIncrementTick+0x160>)
 800bd9c:	441a      	add	r2, r3
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	3304      	adds	r3, #4
 800bda2:	4619      	mov	r1, r3
 800bda4:	4610      	mov	r0, r2
 800bda6:	f7fe fe94 	bl	800aad2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdae:	4b1b      	ldr	r3, [pc, #108]	; (800be1c <xTaskIncrementTick+0x164>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d3b9      	bcc.n	800bd2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdbc:	e7b6      	b.n	800bd2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bdbe:	4b17      	ldr	r3, [pc, #92]	; (800be1c <xTaskIncrementTick+0x164>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc4:	4914      	ldr	r1, [pc, #80]	; (800be18 <xTaskIncrementTick+0x160>)
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	4413      	add	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	440b      	add	r3, r1
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d901      	bls.n	800bdda <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bdda:	4b11      	ldr	r3, [pc, #68]	; (800be20 <xTaskIncrementTick+0x168>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d007      	beq.n	800bdf2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bde2:	2301      	movs	r3, #1
 800bde4:	617b      	str	r3, [r7, #20]
 800bde6:	e004      	b.n	800bdf2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bde8:	4b0e      	ldr	r3, [pc, #56]	; (800be24 <xTaskIncrementTick+0x16c>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	3301      	adds	r3, #1
 800bdee:	4a0d      	ldr	r2, [pc, #52]	; (800be24 <xTaskIncrementTick+0x16c>)
 800bdf0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bdf2:	697b      	ldr	r3, [r7, #20]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3718      	adds	r7, #24
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	20001574 	.word	0x20001574
 800be00:	20001550 	.word	0x20001550
 800be04:	20001504 	.word	0x20001504
 800be08:	20001508 	.word	0x20001508
 800be0c:	20001564 	.word	0x20001564
 800be10:	2000156c 	.word	0x2000156c
 800be14:	20001554 	.word	0x20001554
 800be18:	20001450 	.word	0x20001450
 800be1c:	2000144c 	.word	0x2000144c
 800be20:	20001560 	.word	0x20001560
 800be24:	2000155c 	.word	0x2000155c

0800be28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be28:	b480      	push	{r7}
 800be2a:	b087      	sub	sp, #28
 800be2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be2e:	4b29      	ldr	r3, [pc, #164]	; (800bed4 <vTaskSwitchContext+0xac>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d003      	beq.n	800be3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be36:	4b28      	ldr	r3, [pc, #160]	; (800bed8 <vTaskSwitchContext+0xb0>)
 800be38:	2201      	movs	r2, #1
 800be3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800be3c:	e044      	b.n	800bec8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800be3e:	4b26      	ldr	r3, [pc, #152]	; (800bed8 <vTaskSwitchContext+0xb0>)
 800be40:	2200      	movs	r2, #0
 800be42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be44:	4b25      	ldr	r3, [pc, #148]	; (800bedc <vTaskSwitchContext+0xb4>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	fab3 f383 	clz	r3, r3
 800be50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800be52:	7afb      	ldrb	r3, [r7, #11]
 800be54:	f1c3 031f 	rsb	r3, r3, #31
 800be58:	617b      	str	r3, [r7, #20]
 800be5a:	4921      	ldr	r1, [pc, #132]	; (800bee0 <vTaskSwitchContext+0xb8>)
 800be5c:	697a      	ldr	r2, [r7, #20]
 800be5e:	4613      	mov	r3, r2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	4413      	add	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	440b      	add	r3, r1
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10a      	bne.n	800be84 <vTaskSwitchContext+0x5c>
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	607b      	str	r3, [r7, #4]
}
 800be80:	bf00      	nop
 800be82:	e7fe      	b.n	800be82 <vTaskSwitchContext+0x5a>
 800be84:	697a      	ldr	r2, [r7, #20]
 800be86:	4613      	mov	r3, r2
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	4413      	add	r3, r2
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	4a14      	ldr	r2, [pc, #80]	; (800bee0 <vTaskSwitchContext+0xb8>)
 800be90:	4413      	add	r3, r2
 800be92:	613b      	str	r3, [r7, #16]
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	685a      	ldr	r2, [r3, #4]
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	605a      	str	r2, [r3, #4]
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	685a      	ldr	r2, [r3, #4]
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	3308      	adds	r3, #8
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d104      	bne.n	800beb4 <vTaskSwitchContext+0x8c>
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	685a      	ldr	r2, [r3, #4]
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	605a      	str	r2, [r3, #4]
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	4a0a      	ldr	r2, [pc, #40]	; (800bee4 <vTaskSwitchContext+0xbc>)
 800bebc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bebe:	4b09      	ldr	r3, [pc, #36]	; (800bee4 <vTaskSwitchContext+0xbc>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	334c      	adds	r3, #76	; 0x4c
 800bec4:	4a08      	ldr	r2, [pc, #32]	; (800bee8 <vTaskSwitchContext+0xc0>)
 800bec6:	6013      	str	r3, [r2, #0]
}
 800bec8:	bf00      	nop
 800beca:	371c      	adds	r7, #28
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	20001574 	.word	0x20001574
 800bed8:	20001560 	.word	0x20001560
 800bedc:	20001554 	.word	0x20001554
 800bee0:	20001450 	.word	0x20001450
 800bee4:	2000144c 	.word	0x2000144c
 800bee8:	20000130 	.word	0x20000130

0800beec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10a      	bne.n	800bf12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800befc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf00:	f383 8811 	msr	BASEPRI, r3
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	60fb      	str	r3, [r7, #12]
}
 800bf0e:	bf00      	nop
 800bf10:	e7fe      	b.n	800bf10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf12:	4b07      	ldr	r3, [pc, #28]	; (800bf30 <vTaskPlaceOnEventList+0x44>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	3318      	adds	r3, #24
 800bf18:	4619      	mov	r1, r3
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f7fe fdfd 	bl	800ab1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf20:	2101      	movs	r1, #1
 800bf22:	6838      	ldr	r0, [r7, #0]
 800bf24:	f000 fbba 	bl	800c69c <prvAddCurrentTaskToDelayedList>
}
 800bf28:	bf00      	nop
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	2000144c 	.word	0x2000144c

0800bf34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10a      	bne.n	800bf60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4e:	f383 8811 	msr	BASEPRI, r3
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	60fb      	str	r3, [r7, #12]
}
 800bf5c:	bf00      	nop
 800bf5e:	e7fe      	b.n	800bf5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	3318      	adds	r3, #24
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fe fe11 	bl	800ab8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf6a:	4b1d      	ldr	r3, [pc, #116]	; (800bfe0 <xTaskRemoveFromEventList+0xac>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d11c      	bne.n	800bfac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	3304      	adds	r3, #4
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7fe fe08 	bl	800ab8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf80:	2201      	movs	r2, #1
 800bf82:	409a      	lsls	r2, r3
 800bf84:	4b17      	ldr	r3, [pc, #92]	; (800bfe4 <xTaskRemoveFromEventList+0xb0>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	4a16      	ldr	r2, [pc, #88]	; (800bfe4 <xTaskRemoveFromEventList+0xb0>)
 800bf8c:	6013      	str	r3, [r2, #0]
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf92:	4613      	mov	r3, r2
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	4413      	add	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4a13      	ldr	r2, [pc, #76]	; (800bfe8 <xTaskRemoveFromEventList+0xb4>)
 800bf9c:	441a      	add	r2, r3
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	4610      	mov	r0, r2
 800bfa6:	f7fe fd94 	bl	800aad2 <vListInsertEnd>
 800bfaa:	e005      	b.n	800bfb8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	3318      	adds	r3, #24
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	480e      	ldr	r0, [pc, #56]	; (800bfec <xTaskRemoveFromEventList+0xb8>)
 800bfb4:	f7fe fd8d 	bl	800aad2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfbc:	4b0c      	ldr	r3, [pc, #48]	; (800bff0 <xTaskRemoveFromEventList+0xbc>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d905      	bls.n	800bfd2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bfca:	4b0a      	ldr	r3, [pc, #40]	; (800bff4 <xTaskRemoveFromEventList+0xc0>)
 800bfcc:	2201      	movs	r2, #1
 800bfce:	601a      	str	r2, [r3, #0]
 800bfd0:	e001      	b.n	800bfd6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bfd6:	697b      	ldr	r3, [r7, #20]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3718      	adds	r7, #24
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	20001574 	.word	0x20001574
 800bfe4:	20001554 	.word	0x20001554
 800bfe8:	20001450 	.word	0x20001450
 800bfec:	2000150c 	.word	0x2000150c
 800bff0:	2000144c 	.word	0x2000144c
 800bff4:	20001560 	.word	0x20001560

0800bff8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c000:	4b06      	ldr	r3, [pc, #24]	; (800c01c <vTaskInternalSetTimeOutState+0x24>)
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c008:	4b05      	ldr	r3, [pc, #20]	; (800c020 <vTaskInternalSetTimeOutState+0x28>)
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	605a      	str	r2, [r3, #4]
}
 800c010:	bf00      	nop
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr
 800c01c:	20001564 	.word	0x20001564
 800c020:	20001550 	.word	0x20001550

0800c024 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10a      	bne.n	800c04a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	613b      	str	r3, [r7, #16]
}
 800c046:	bf00      	nop
 800c048:	e7fe      	b.n	800c048 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10a      	bne.n	800c066 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c054:	f383 8811 	msr	BASEPRI, r3
 800c058:	f3bf 8f6f 	isb	sy
 800c05c:	f3bf 8f4f 	dsb	sy
 800c060:	60fb      	str	r3, [r7, #12]
}
 800c062:	bf00      	nop
 800c064:	e7fe      	b.n	800c064 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c066:	f000 fcad 	bl	800c9c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c06a:	4b1d      	ldr	r3, [pc, #116]	; (800c0e0 <xTaskCheckForTimeOut+0xbc>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	69ba      	ldr	r2, [r7, #24]
 800c076:	1ad3      	subs	r3, r2, r3
 800c078:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c082:	d102      	bne.n	800c08a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c084:	2300      	movs	r3, #0
 800c086:	61fb      	str	r3, [r7, #28]
 800c088:	e023      	b.n	800c0d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	4b15      	ldr	r3, [pc, #84]	; (800c0e4 <xTaskCheckForTimeOut+0xc0>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	429a      	cmp	r2, r3
 800c094:	d007      	beq.n	800c0a6 <xTaskCheckForTimeOut+0x82>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	69ba      	ldr	r2, [r7, #24]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d302      	bcc.n	800c0a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	61fb      	str	r3, [r7, #28]
 800c0a4:	e015      	b.n	800c0d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	697a      	ldr	r2, [r7, #20]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d20b      	bcs.n	800c0c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	1ad2      	subs	r2, r2, r3
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f7ff ff9b 	bl	800bff8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	61fb      	str	r3, [r7, #28]
 800c0c6:	e004      	b.n	800c0d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c0d2:	f000 fca7 	bl	800ca24 <vPortExitCritical>

	return xReturn;
 800c0d6:	69fb      	ldr	r3, [r7, #28]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3720      	adds	r7, #32
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	20001550 	.word	0x20001550
 800c0e4:	20001564 	.word	0x20001564

0800c0e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c0ec:	4b03      	ldr	r3, [pc, #12]	; (800c0fc <vTaskMissedYield+0x14>)
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	601a      	str	r2, [r3, #0]
}
 800c0f2:	bf00      	nop
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr
 800c0fc:	20001560 	.word	0x20001560

0800c100 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c108:	f000 f852 	bl	800c1b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c10c:	4b06      	ldr	r3, [pc, #24]	; (800c128 <prvIdleTask+0x28>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d9f9      	bls.n	800c108 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c114:	4b05      	ldr	r3, [pc, #20]	; (800c12c <prvIdleTask+0x2c>)
 800c116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c11a:	601a      	str	r2, [r3, #0]
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c124:	e7f0      	b.n	800c108 <prvIdleTask+0x8>
 800c126:	bf00      	nop
 800c128:	20001450 	.word	0x20001450
 800c12c:	e000ed04 	.word	0xe000ed04

0800c130 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c136:	2300      	movs	r3, #0
 800c138:	607b      	str	r3, [r7, #4]
 800c13a:	e00c      	b.n	800c156 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	4613      	mov	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	4413      	add	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	4a12      	ldr	r2, [pc, #72]	; (800c190 <prvInitialiseTaskLists+0x60>)
 800c148:	4413      	add	r3, r2
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fe fc94 	bl	800aa78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	3301      	adds	r3, #1
 800c154:	607b      	str	r3, [r7, #4]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b06      	cmp	r3, #6
 800c15a:	d9ef      	bls.n	800c13c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c15c:	480d      	ldr	r0, [pc, #52]	; (800c194 <prvInitialiseTaskLists+0x64>)
 800c15e:	f7fe fc8b 	bl	800aa78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c162:	480d      	ldr	r0, [pc, #52]	; (800c198 <prvInitialiseTaskLists+0x68>)
 800c164:	f7fe fc88 	bl	800aa78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c168:	480c      	ldr	r0, [pc, #48]	; (800c19c <prvInitialiseTaskLists+0x6c>)
 800c16a:	f7fe fc85 	bl	800aa78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c16e:	480c      	ldr	r0, [pc, #48]	; (800c1a0 <prvInitialiseTaskLists+0x70>)
 800c170:	f7fe fc82 	bl	800aa78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c174:	480b      	ldr	r0, [pc, #44]	; (800c1a4 <prvInitialiseTaskLists+0x74>)
 800c176:	f7fe fc7f 	bl	800aa78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c17a:	4b0b      	ldr	r3, [pc, #44]	; (800c1a8 <prvInitialiseTaskLists+0x78>)
 800c17c:	4a05      	ldr	r2, [pc, #20]	; (800c194 <prvInitialiseTaskLists+0x64>)
 800c17e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c180:	4b0a      	ldr	r3, [pc, #40]	; (800c1ac <prvInitialiseTaskLists+0x7c>)
 800c182:	4a05      	ldr	r2, [pc, #20]	; (800c198 <prvInitialiseTaskLists+0x68>)
 800c184:	601a      	str	r2, [r3, #0]
}
 800c186:	bf00      	nop
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	20001450 	.word	0x20001450
 800c194:	200014dc 	.word	0x200014dc
 800c198:	200014f0 	.word	0x200014f0
 800c19c:	2000150c 	.word	0x2000150c
 800c1a0:	20001520 	.word	0x20001520
 800c1a4:	20001538 	.word	0x20001538
 800c1a8:	20001504 	.word	0x20001504
 800c1ac:	20001508 	.word	0x20001508

0800c1b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1b6:	e019      	b.n	800c1ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c1b8:	f000 fc04 	bl	800c9c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1bc:	4b10      	ldr	r3, [pc, #64]	; (800c200 <prvCheckTasksWaitingTermination+0x50>)
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fe fcdf 	bl	800ab8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c1ce:	4b0d      	ldr	r3, [pc, #52]	; (800c204 <prvCheckTasksWaitingTermination+0x54>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	4a0b      	ldr	r2, [pc, #44]	; (800c204 <prvCheckTasksWaitingTermination+0x54>)
 800c1d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c1d8:	4b0b      	ldr	r3, [pc, #44]	; (800c208 <prvCheckTasksWaitingTermination+0x58>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	4a0a      	ldr	r2, [pc, #40]	; (800c208 <prvCheckTasksWaitingTermination+0x58>)
 800c1e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c1e2:	f000 fc1f 	bl	800ca24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 f848 	bl	800c27c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1ec:	4b06      	ldr	r3, [pc, #24]	; (800c208 <prvCheckTasksWaitingTermination+0x58>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d1e1      	bne.n	800c1b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c1f4:	bf00      	nop
 800c1f6:	bf00      	nop
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	20001520 	.word	0x20001520
 800c204:	2000154c 	.word	0x2000154c
 800c208:	20001534 	.word	0x20001534

0800c20c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c20c:	b480      	push	{r7}
 800c20e:	b085      	sub	sp, #20
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c214:	2300      	movs	r3, #0
 800c216:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c218:	e005      	b.n	800c226 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	3301      	adds	r3, #1
 800c21e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	3301      	adds	r3, #1
 800c224:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	2ba5      	cmp	r3, #165	; 0xa5
 800c22c:	d0f5      	beq.n	800c21a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	089b      	lsrs	r3, r3, #2
 800c232:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	b29b      	uxth	r3, r3
	}
 800c238:	4618      	mov	r0, r3
 800c23a:	3714      	adds	r7, #20
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800c244:	b580      	push	{r7, lr}
 800c246:	b086      	sub	sp, #24
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d102      	bne.n	800c258 <uxTaskGetStackHighWaterMark+0x14>
 800c252:	4b09      	ldr	r3, [pc, #36]	; (800c278 <uxTaskGetStackHighWaterMark+0x34>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	e000      	b.n	800c25a <uxTaskGetStackHighWaterMark+0x16>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c260:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800c262:	6938      	ldr	r0, [r7, #16]
 800c264:	f7ff ffd2 	bl	800c20c <prvTaskCheckFreeStackSpace>
 800c268:	4603      	mov	r3, r0
 800c26a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800c26c:	68fb      	ldr	r3, [r7, #12]
	}
 800c26e:	4618      	mov	r0, r3
 800c270:	3718      	adds	r7, #24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	2000144c 	.word	0x2000144c

0800c27c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	334c      	adds	r3, #76	; 0x4c
 800c288:	4618      	mov	r0, r3
 800c28a:	f001 fea3 	bl	800dfd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c294:	2b00      	cmp	r3, #0
 800c296:	d108      	bne.n	800c2aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 fd7f 	bl	800cda0 <vPortFree>
				vPortFree( pxTCB );
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 fd7c 	bl	800cda0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c2a8:	e018      	b.n	800c2dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d103      	bne.n	800c2bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fd73 	bl	800cda0 <vPortFree>
	}
 800c2ba:	e00f      	b.n	800c2dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c2c2:	2b02      	cmp	r3, #2
 800c2c4:	d00a      	beq.n	800c2dc <prvDeleteTCB+0x60>
	__asm volatile
 800c2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	60fb      	str	r3, [r7, #12]
}
 800c2d8:	bf00      	nop
 800c2da:	e7fe      	b.n	800c2da <prvDeleteTCB+0x5e>
	}
 800c2dc:	bf00      	nop
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2ea:	4b0c      	ldr	r3, [pc, #48]	; (800c31c <prvResetNextTaskUnblockTime+0x38>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d104      	bne.n	800c2fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c2f4:	4b0a      	ldr	r3, [pc, #40]	; (800c320 <prvResetNextTaskUnblockTime+0x3c>)
 800c2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c2fc:	e008      	b.n	800c310 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2fe:	4b07      	ldr	r3, [pc, #28]	; (800c31c <prvResetNextTaskUnblockTime+0x38>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	4a04      	ldr	r2, [pc, #16]	; (800c320 <prvResetNextTaskUnblockTime+0x3c>)
 800c30e:	6013      	str	r3, [r2, #0]
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr
 800c31c:	20001504 	.word	0x20001504
 800c320:	2000156c 	.word	0x2000156c

0800c324 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c32a:	4b0b      	ldr	r3, [pc, #44]	; (800c358 <xTaskGetSchedulerState+0x34>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d102      	bne.n	800c338 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c332:	2301      	movs	r3, #1
 800c334:	607b      	str	r3, [r7, #4]
 800c336:	e008      	b.n	800c34a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c338:	4b08      	ldr	r3, [pc, #32]	; (800c35c <xTaskGetSchedulerState+0x38>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d102      	bne.n	800c346 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c340:	2302      	movs	r3, #2
 800c342:	607b      	str	r3, [r7, #4]
 800c344:	e001      	b.n	800c34a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c346:	2300      	movs	r3, #0
 800c348:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c34a:	687b      	ldr	r3, [r7, #4]
	}
 800c34c:	4618      	mov	r0, r3
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr
 800c358:	20001558 	.word	0x20001558
 800c35c:	20001574 	.word	0x20001574

0800c360 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c36c:	2300      	movs	r3, #0
 800c36e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d05e      	beq.n	800c434 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c37a:	4b31      	ldr	r3, [pc, #196]	; (800c440 <xTaskPriorityInherit+0xe0>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c380:	429a      	cmp	r2, r3
 800c382:	d24e      	bcs.n	800c422 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	699b      	ldr	r3, [r3, #24]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	db06      	blt.n	800c39a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c38c:	4b2c      	ldr	r3, [pc, #176]	; (800c440 <xTaskPriorityInherit+0xe0>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c392:	f1c3 0207 	rsb	r2, r3, #7
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	6959      	ldr	r1, [r3, #20]
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	4a26      	ldr	r2, [pc, #152]	; (800c444 <xTaskPriorityInherit+0xe4>)
 800c3ac:	4413      	add	r3, r2
 800c3ae:	4299      	cmp	r1, r3
 800c3b0:	d12f      	bne.n	800c412 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	3304      	adds	r3, #4
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fe fbe8 	bl	800ab8c <uxListRemove>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10a      	bne.n	800c3d8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c3cc:	43da      	mvns	r2, r3
 800c3ce:	4b1e      	ldr	r3, [pc, #120]	; (800c448 <xTaskPriorityInherit+0xe8>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4013      	ands	r3, r2
 800c3d4:	4a1c      	ldr	r2, [pc, #112]	; (800c448 <xTaskPriorityInherit+0xe8>)
 800c3d6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3d8:	4b19      	ldr	r3, [pc, #100]	; (800c440 <xTaskPriorityInherit+0xe0>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	409a      	lsls	r2, r3
 800c3ea:	4b17      	ldr	r3, [pc, #92]	; (800c448 <xTaskPriorityInherit+0xe8>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	4a15      	ldr	r2, [pc, #84]	; (800c448 <xTaskPriorityInherit+0xe8>)
 800c3f2:	6013      	str	r3, [r2, #0]
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	4a10      	ldr	r2, [pc, #64]	; (800c444 <xTaskPriorityInherit+0xe4>)
 800c402:	441a      	add	r2, r3
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	3304      	adds	r3, #4
 800c408:	4619      	mov	r1, r3
 800c40a:	4610      	mov	r0, r2
 800c40c:	f7fe fb61 	bl	800aad2 <vListInsertEnd>
 800c410:	e004      	b.n	800c41c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c412:	4b0b      	ldr	r3, [pc, #44]	; (800c440 <xTaskPriorityInherit+0xe0>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c41c:	2301      	movs	r3, #1
 800c41e:	60fb      	str	r3, [r7, #12]
 800c420:	e008      	b.n	800c434 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c426:	4b06      	ldr	r3, [pc, #24]	; (800c440 <xTaskPriorityInherit+0xe0>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d201      	bcs.n	800c434 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c430:	2301      	movs	r3, #1
 800c432:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c434:	68fb      	ldr	r3, [r7, #12]
	}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	2000144c 	.word	0x2000144c
 800c444:	20001450 	.word	0x20001450
 800c448:	20001554 	.word	0x20001554

0800c44c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b086      	sub	sp, #24
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c458:	2300      	movs	r3, #0
 800c45a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d06e      	beq.n	800c540 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c462:	4b3a      	ldr	r3, [pc, #232]	; (800c54c <xTaskPriorityDisinherit+0x100>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	693a      	ldr	r2, [r7, #16]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d00a      	beq.n	800c482 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	60fb      	str	r3, [r7, #12]
}
 800c47e:	bf00      	nop
 800c480:	e7fe      	b.n	800c480 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c486:	2b00      	cmp	r3, #0
 800c488:	d10a      	bne.n	800c4a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48e:	f383 8811 	msr	BASEPRI, r3
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	60bb      	str	r3, [r7, #8]
}
 800c49c:	bf00      	nop
 800c49e:	e7fe      	b.n	800c49e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4a4:	1e5a      	subs	r2, r3, #1
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d044      	beq.n	800c540 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d140      	bne.n	800c540 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	3304      	adds	r3, #4
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fe fb62 	bl	800ab8c <uxListRemove>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d115      	bne.n	800c4fa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d2:	491f      	ldr	r1, [pc, #124]	; (800c550 <xTaskPriorityDisinherit+0x104>)
 800c4d4:	4613      	mov	r3, r2
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	4413      	add	r3, r2
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	440b      	add	r3, r1
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10a      	bne.n	800c4fa <xTaskPriorityDisinherit+0xae>
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ee:	43da      	mvns	r2, r3
 800c4f0:	4b18      	ldr	r3, [pc, #96]	; (800c554 <xTaskPriorityDisinherit+0x108>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	4a17      	ldr	r2, [pc, #92]	; (800c554 <xTaskPriorityDisinherit+0x108>)
 800c4f8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c506:	f1c3 0207 	rsb	r2, r3, #7
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c512:	2201      	movs	r2, #1
 800c514:	409a      	lsls	r2, r3
 800c516:	4b0f      	ldr	r3, [pc, #60]	; (800c554 <xTaskPriorityDisinherit+0x108>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4313      	orrs	r3, r2
 800c51c:	4a0d      	ldr	r2, [pc, #52]	; (800c554 <xTaskPriorityDisinherit+0x108>)
 800c51e:	6013      	str	r3, [r2, #0]
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c524:	4613      	mov	r3, r2
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	4413      	add	r3, r2
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	4a08      	ldr	r2, [pc, #32]	; (800c550 <xTaskPriorityDisinherit+0x104>)
 800c52e:	441a      	add	r2, r3
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	3304      	adds	r3, #4
 800c534:	4619      	mov	r1, r3
 800c536:	4610      	mov	r0, r2
 800c538:	f7fe facb 	bl	800aad2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c53c:	2301      	movs	r3, #1
 800c53e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c540:	697b      	ldr	r3, [r7, #20]
	}
 800c542:	4618      	mov	r0, r3
 800c544:	3718      	adds	r7, #24
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	2000144c 	.word	0x2000144c
 800c550:	20001450 	.word	0x20001450
 800c554:	20001554 	.word	0x20001554

0800c558 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b088      	sub	sp, #32
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c566:	2301      	movs	r3, #1
 800c568:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d077      	beq.n	800c660 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c574:	2b00      	cmp	r3, #0
 800c576:	d10a      	bne.n	800c58e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57c:	f383 8811 	msr	BASEPRI, r3
 800c580:	f3bf 8f6f 	isb	sy
 800c584:	f3bf 8f4f 	dsb	sy
 800c588:	60fb      	str	r3, [r7, #12]
}
 800c58a:	bf00      	nop
 800c58c:	e7fe      	b.n	800c58c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c592:	683a      	ldr	r2, [r7, #0]
 800c594:	429a      	cmp	r2, r3
 800c596:	d902      	bls.n	800c59e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	61fb      	str	r3, [r7, #28]
 800c59c:	e002      	b.n	800c5a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a8:	69fa      	ldr	r2, [r7, #28]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d058      	beq.n	800c660 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5b2:	697a      	ldr	r2, [r7, #20]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d153      	bne.n	800c660 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c5b8:	4b2b      	ldr	r3, [pc, #172]	; (800c668 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	69ba      	ldr	r2, [r7, #24]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d10a      	bne.n	800c5d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c6:	f383 8811 	msr	BASEPRI, r3
 800c5ca:	f3bf 8f6f 	isb	sy
 800c5ce:	f3bf 8f4f 	dsb	sy
 800c5d2:	60bb      	str	r3, [r7, #8]
}
 800c5d4:	bf00      	nop
 800c5d6:	e7fe      	b.n	800c5d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	69fa      	ldr	r2, [r7, #28]
 800c5e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c5e4:	69bb      	ldr	r3, [r7, #24]
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	db04      	blt.n	800c5f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	f1c3 0207 	rsb	r2, r3, #7
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	6959      	ldr	r1, [r3, #20]
 800c5fa:	693a      	ldr	r2, [r7, #16]
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	4413      	add	r3, r2
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	4a19      	ldr	r2, [pc, #100]	; (800c66c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c606:	4413      	add	r3, r2
 800c608:	4299      	cmp	r1, r3
 800c60a:	d129      	bne.n	800c660 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	3304      	adds	r3, #4
 800c610:	4618      	mov	r0, r3
 800c612:	f7fe fabb 	bl	800ab8c <uxListRemove>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d10a      	bne.n	800c632 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c620:	2201      	movs	r2, #1
 800c622:	fa02 f303 	lsl.w	r3, r2, r3
 800c626:	43da      	mvns	r2, r3
 800c628:	4b11      	ldr	r3, [pc, #68]	; (800c670 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4013      	ands	r3, r2
 800c62e:	4a10      	ldr	r2, [pc, #64]	; (800c670 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c630:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c636:	2201      	movs	r2, #1
 800c638:	409a      	lsls	r2, r3
 800c63a:	4b0d      	ldr	r3, [pc, #52]	; (800c670 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4313      	orrs	r3, r2
 800c640:	4a0b      	ldr	r2, [pc, #44]	; (800c670 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c642:	6013      	str	r3, [r2, #0]
 800c644:	69bb      	ldr	r3, [r7, #24]
 800c646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c648:	4613      	mov	r3, r2
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	4413      	add	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4a06      	ldr	r2, [pc, #24]	; (800c66c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c652:	441a      	add	r2, r3
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	3304      	adds	r3, #4
 800c658:	4619      	mov	r1, r3
 800c65a:	4610      	mov	r0, r2
 800c65c:	f7fe fa39 	bl	800aad2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c660:	bf00      	nop
 800c662:	3720      	adds	r7, #32
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	2000144c 	.word	0x2000144c
 800c66c:	20001450 	.word	0x20001450
 800c670:	20001554 	.word	0x20001554

0800c674 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c674:	b480      	push	{r7}
 800c676:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c678:	4b07      	ldr	r3, [pc, #28]	; (800c698 <pvTaskIncrementMutexHeldCount+0x24>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d004      	beq.n	800c68a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c680:	4b05      	ldr	r3, [pc, #20]	; (800c698 <pvTaskIncrementMutexHeldCount+0x24>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c686:	3201      	adds	r2, #1
 800c688:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c68a:	4b03      	ldr	r3, [pc, #12]	; (800c698 <pvTaskIncrementMutexHeldCount+0x24>)
 800c68c:	681b      	ldr	r3, [r3, #0]
	}
 800c68e:	4618      	mov	r0, r3
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr
 800c698:	2000144c 	.word	0x2000144c

0800c69c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c6a6:	4b29      	ldr	r3, [pc, #164]	; (800c74c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6ac:	4b28      	ldr	r3, [pc, #160]	; (800c750 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fe fa6a 	bl	800ab8c <uxListRemove>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10b      	bne.n	800c6d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c6be:	4b24      	ldr	r3, [pc, #144]	; (800c750 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ca:	43da      	mvns	r2, r3
 800c6cc:	4b21      	ldr	r3, [pc, #132]	; (800c754 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	4a20      	ldr	r2, [pc, #128]	; (800c754 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c6d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6dc:	d10a      	bne.n	800c6f4 <prvAddCurrentTaskToDelayedList+0x58>
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d007      	beq.n	800c6f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6e4:	4b1a      	ldr	r3, [pc, #104]	; (800c750 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	481a      	ldr	r0, [pc, #104]	; (800c758 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c6ee:	f7fe f9f0 	bl	800aad2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c6f2:	e026      	b.n	800c742 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c6fc:	4b14      	ldr	r3, [pc, #80]	; (800c750 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	68ba      	ldr	r2, [r7, #8]
 800c702:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c704:	68ba      	ldr	r2, [r7, #8]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d209      	bcs.n	800c720 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c70c:	4b13      	ldr	r3, [pc, #76]	; (800c75c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	4b0f      	ldr	r3, [pc, #60]	; (800c750 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	3304      	adds	r3, #4
 800c716:	4619      	mov	r1, r3
 800c718:	4610      	mov	r0, r2
 800c71a:	f7fe f9fe 	bl	800ab1a <vListInsert>
}
 800c71e:	e010      	b.n	800c742 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c720:	4b0f      	ldr	r3, [pc, #60]	; (800c760 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	4b0a      	ldr	r3, [pc, #40]	; (800c750 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	3304      	adds	r3, #4
 800c72a:	4619      	mov	r1, r3
 800c72c:	4610      	mov	r0, r2
 800c72e:	f7fe f9f4 	bl	800ab1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c732:	4b0c      	ldr	r3, [pc, #48]	; (800c764 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d202      	bcs.n	800c742 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c73c:	4a09      	ldr	r2, [pc, #36]	; (800c764 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	6013      	str	r3, [r2, #0]
}
 800c742:	bf00      	nop
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	20001550 	.word	0x20001550
 800c750:	2000144c 	.word	0x2000144c
 800c754:	20001554 	.word	0x20001554
 800c758:	20001538 	.word	0x20001538
 800c75c:	20001508 	.word	0x20001508
 800c760:	20001504 	.word	0x20001504
 800c764:	2000156c 	.word	0x2000156c

0800c768 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	3b04      	subs	r3, #4
 800c778:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	3b04      	subs	r3, #4
 800c786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	f023 0201 	bic.w	r2, r3, #1
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	3b04      	subs	r3, #4
 800c796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c798:	4a0c      	ldr	r2, [pc, #48]	; (800c7cc <pxPortInitialiseStack+0x64>)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	3b14      	subs	r3, #20
 800c7a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	3b04      	subs	r3, #4
 800c7ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f06f 0202 	mvn.w	r2, #2
 800c7b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	3b20      	subs	r3, #32
 800c7bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c7be:	68fb      	ldr	r3, [r7, #12]
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3714      	adds	r7, #20
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr
 800c7cc:	0800c7d1 	.word	0x0800c7d1

0800c7d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7da:	4b12      	ldr	r3, [pc, #72]	; (800c824 <prvTaskExitError+0x54>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e2:	d00a      	beq.n	800c7fa <prvTaskExitError+0x2a>
	__asm volatile
 800c7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	60fb      	str	r3, [r7, #12]
}
 800c7f6:	bf00      	nop
 800c7f8:	e7fe      	b.n	800c7f8 <prvTaskExitError+0x28>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	60bb      	str	r3, [r7, #8]
}
 800c80c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c80e:	bf00      	nop
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d0fc      	beq.n	800c810 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c816:	bf00      	nop
 800c818:	bf00      	nop
 800c81a:	3714      	adds	r7, #20
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr
 800c824:	200000d4 	.word	0x200000d4
	...

0800c830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c830:	4b07      	ldr	r3, [pc, #28]	; (800c850 <pxCurrentTCBConst2>)
 800c832:	6819      	ldr	r1, [r3, #0]
 800c834:	6808      	ldr	r0, [r1, #0]
 800c836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c83a:	f380 8809 	msr	PSP, r0
 800c83e:	f3bf 8f6f 	isb	sy
 800c842:	f04f 0000 	mov.w	r0, #0
 800c846:	f380 8811 	msr	BASEPRI, r0
 800c84a:	4770      	bx	lr
 800c84c:	f3af 8000 	nop.w

0800c850 <pxCurrentTCBConst2>:
 800c850:	2000144c 	.word	0x2000144c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c854:	bf00      	nop
 800c856:	bf00      	nop

0800c858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c858:	4808      	ldr	r0, [pc, #32]	; (800c87c <prvPortStartFirstTask+0x24>)
 800c85a:	6800      	ldr	r0, [r0, #0]
 800c85c:	6800      	ldr	r0, [r0, #0]
 800c85e:	f380 8808 	msr	MSP, r0
 800c862:	f04f 0000 	mov.w	r0, #0
 800c866:	f380 8814 	msr	CONTROL, r0
 800c86a:	b662      	cpsie	i
 800c86c:	b661      	cpsie	f
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	df00      	svc	0
 800c878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c87a:	bf00      	nop
 800c87c:	e000ed08 	.word	0xe000ed08

0800c880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b086      	sub	sp, #24
 800c884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c886:	4b46      	ldr	r3, [pc, #280]	; (800c9a0 <xPortStartScheduler+0x120>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a46      	ldr	r2, [pc, #280]	; (800c9a4 <xPortStartScheduler+0x124>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d10a      	bne.n	800c8a6 <xPortStartScheduler+0x26>
	__asm volatile
 800c890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c894:	f383 8811 	msr	BASEPRI, r3
 800c898:	f3bf 8f6f 	isb	sy
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	613b      	str	r3, [r7, #16]
}
 800c8a2:	bf00      	nop
 800c8a4:	e7fe      	b.n	800c8a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c8a6:	4b3e      	ldr	r3, [pc, #248]	; (800c9a0 <xPortStartScheduler+0x120>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a3f      	ldr	r2, [pc, #252]	; (800c9a8 <xPortStartScheduler+0x128>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d10a      	bne.n	800c8c6 <xPortStartScheduler+0x46>
	__asm volatile
 800c8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	60fb      	str	r3, [r7, #12]
}
 800c8c2:	bf00      	nop
 800c8c4:	e7fe      	b.n	800c8c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c8c6:	4b39      	ldr	r3, [pc, #228]	; (800c9ac <xPortStartScheduler+0x12c>)
 800c8c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	22ff      	movs	r2, #255	; 0xff
 800c8d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8e0:	78fb      	ldrb	r3, [r7, #3]
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c8e8:	b2da      	uxtb	r2, r3
 800c8ea:	4b31      	ldr	r3, [pc, #196]	; (800c9b0 <xPortStartScheduler+0x130>)
 800c8ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8ee:	4b31      	ldr	r3, [pc, #196]	; (800c9b4 <xPortStartScheduler+0x134>)
 800c8f0:	2207      	movs	r2, #7
 800c8f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8f4:	e009      	b.n	800c90a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c8f6:	4b2f      	ldr	r3, [pc, #188]	; (800c9b4 <xPortStartScheduler+0x134>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	3b01      	subs	r3, #1
 800c8fc:	4a2d      	ldr	r2, [pc, #180]	; (800c9b4 <xPortStartScheduler+0x134>)
 800c8fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c900:	78fb      	ldrb	r3, [r7, #3]
 800c902:	b2db      	uxtb	r3, r3
 800c904:	005b      	lsls	r3, r3, #1
 800c906:	b2db      	uxtb	r3, r3
 800c908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c90a:	78fb      	ldrb	r3, [r7, #3]
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c912:	2b80      	cmp	r3, #128	; 0x80
 800c914:	d0ef      	beq.n	800c8f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c916:	4b27      	ldr	r3, [pc, #156]	; (800c9b4 <xPortStartScheduler+0x134>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f1c3 0307 	rsb	r3, r3, #7
 800c91e:	2b04      	cmp	r3, #4
 800c920:	d00a      	beq.n	800c938 <xPortStartScheduler+0xb8>
	__asm volatile
 800c922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c926:	f383 8811 	msr	BASEPRI, r3
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	60bb      	str	r3, [r7, #8]
}
 800c934:	bf00      	nop
 800c936:	e7fe      	b.n	800c936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c938:	4b1e      	ldr	r3, [pc, #120]	; (800c9b4 <xPortStartScheduler+0x134>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	021b      	lsls	r3, r3, #8
 800c93e:	4a1d      	ldr	r2, [pc, #116]	; (800c9b4 <xPortStartScheduler+0x134>)
 800c940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c942:	4b1c      	ldr	r3, [pc, #112]	; (800c9b4 <xPortStartScheduler+0x134>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c94a:	4a1a      	ldr	r2, [pc, #104]	; (800c9b4 <xPortStartScheduler+0x134>)
 800c94c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	b2da      	uxtb	r2, r3
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c956:	4b18      	ldr	r3, [pc, #96]	; (800c9b8 <xPortStartScheduler+0x138>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a17      	ldr	r2, [pc, #92]	; (800c9b8 <xPortStartScheduler+0x138>)
 800c95c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c962:	4b15      	ldr	r3, [pc, #84]	; (800c9b8 <xPortStartScheduler+0x138>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a14      	ldr	r2, [pc, #80]	; (800c9b8 <xPortStartScheduler+0x138>)
 800c968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c96c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c96e:	f000 f8dd 	bl	800cb2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c972:	4b12      	ldr	r3, [pc, #72]	; (800c9bc <xPortStartScheduler+0x13c>)
 800c974:	2200      	movs	r2, #0
 800c976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c978:	f000 f8fc 	bl	800cb74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c97c:	4b10      	ldr	r3, [pc, #64]	; (800c9c0 <xPortStartScheduler+0x140>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a0f      	ldr	r2, [pc, #60]	; (800c9c0 <xPortStartScheduler+0x140>)
 800c982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c988:	f7ff ff66 	bl	800c858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c98c:	f7ff fa4c 	bl	800be28 <vTaskSwitchContext>
	prvTaskExitError();
 800c990:	f7ff ff1e 	bl	800c7d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	3718      	adds	r7, #24
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	e000ed00 	.word	0xe000ed00
 800c9a4:	410fc271 	.word	0x410fc271
 800c9a8:	410fc270 	.word	0x410fc270
 800c9ac:	e000e400 	.word	0xe000e400
 800c9b0:	20001578 	.word	0x20001578
 800c9b4:	2000157c 	.word	0x2000157c
 800c9b8:	e000ed20 	.word	0xe000ed20
 800c9bc:	200000d4 	.word	0x200000d4
 800c9c0:	e000ef34 	.word	0xe000ef34

0800c9c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
	__asm volatile
 800c9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ce:	f383 8811 	msr	BASEPRI, r3
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	f3bf 8f4f 	dsb	sy
 800c9da:	607b      	str	r3, [r7, #4]
}
 800c9dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c9de:	4b0f      	ldr	r3, [pc, #60]	; (800ca1c <vPortEnterCritical+0x58>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	4a0d      	ldr	r2, [pc, #52]	; (800ca1c <vPortEnterCritical+0x58>)
 800c9e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c9e8:	4b0c      	ldr	r3, [pc, #48]	; (800ca1c <vPortEnterCritical+0x58>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d10f      	bne.n	800ca10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9f0:	4b0b      	ldr	r3, [pc, #44]	; (800ca20 <vPortEnterCritical+0x5c>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d00a      	beq.n	800ca10 <vPortEnterCritical+0x4c>
	__asm volatile
 800c9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fe:	f383 8811 	msr	BASEPRI, r3
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	603b      	str	r3, [r7, #0]
}
 800ca0c:	bf00      	nop
 800ca0e:	e7fe      	b.n	800ca0e <vPortEnterCritical+0x4a>
	}
}
 800ca10:	bf00      	nop
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr
 800ca1c:	200000d4 	.word	0x200000d4
 800ca20:	e000ed04 	.word	0xe000ed04

0800ca24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca2a:	4b12      	ldr	r3, [pc, #72]	; (800ca74 <vPortExitCritical+0x50>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d10a      	bne.n	800ca48 <vPortExitCritical+0x24>
	__asm volatile
 800ca32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca36:	f383 8811 	msr	BASEPRI, r3
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	607b      	str	r3, [r7, #4]
}
 800ca44:	bf00      	nop
 800ca46:	e7fe      	b.n	800ca46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca48:	4b0a      	ldr	r3, [pc, #40]	; (800ca74 <vPortExitCritical+0x50>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	4a09      	ldr	r2, [pc, #36]	; (800ca74 <vPortExitCritical+0x50>)
 800ca50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca52:	4b08      	ldr	r3, [pc, #32]	; (800ca74 <vPortExitCritical+0x50>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d105      	bne.n	800ca66 <vPortExitCritical+0x42>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	f383 8811 	msr	BASEPRI, r3
}
 800ca64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca66:	bf00      	nop
 800ca68:	370c      	adds	r7, #12
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	200000d4 	.word	0x200000d4
	...

0800ca80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca80:	f3ef 8009 	mrs	r0, PSP
 800ca84:	f3bf 8f6f 	isb	sy
 800ca88:	4b15      	ldr	r3, [pc, #84]	; (800cae0 <pxCurrentTCBConst>)
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	f01e 0f10 	tst.w	lr, #16
 800ca90:	bf08      	it	eq
 800ca92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9a:	6010      	str	r0, [r2, #0]
 800ca9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800caa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800caa4:	f380 8811 	msr	BASEPRI, r0
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f7ff f9ba 	bl	800be28 <vTaskSwitchContext>
 800cab4:	f04f 0000 	mov.w	r0, #0
 800cab8:	f380 8811 	msr	BASEPRI, r0
 800cabc:	bc09      	pop	{r0, r3}
 800cabe:	6819      	ldr	r1, [r3, #0]
 800cac0:	6808      	ldr	r0, [r1, #0]
 800cac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac6:	f01e 0f10 	tst.w	lr, #16
 800caca:	bf08      	it	eq
 800cacc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cad0:	f380 8809 	msr	PSP, r0
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	f3af 8000 	nop.w

0800cae0 <pxCurrentTCBConst>:
 800cae0:	2000144c 	.word	0x2000144c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cae4:	bf00      	nop
 800cae6:	bf00      	nop

0800cae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
	__asm volatile
 800caee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf2:	f383 8811 	msr	BASEPRI, r3
 800caf6:	f3bf 8f6f 	isb	sy
 800cafa:	f3bf 8f4f 	dsb	sy
 800cafe:	607b      	str	r3, [r7, #4]
}
 800cb00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb02:	f7ff f8d9 	bl	800bcb8 <xTaskIncrementTick>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d003      	beq.n	800cb14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb0c:	4b06      	ldr	r3, [pc, #24]	; (800cb28 <SysTick_Handler+0x40>)
 800cb0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb12:	601a      	str	r2, [r3, #0]
 800cb14:	2300      	movs	r3, #0
 800cb16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	f383 8811 	msr	BASEPRI, r3
}
 800cb1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb20:	bf00      	nop
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	e000ed04 	.word	0xe000ed04

0800cb2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb30:	4b0b      	ldr	r3, [pc, #44]	; (800cb60 <vPortSetupTimerInterrupt+0x34>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb36:	4b0b      	ldr	r3, [pc, #44]	; (800cb64 <vPortSetupTimerInterrupt+0x38>)
 800cb38:	2200      	movs	r2, #0
 800cb3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb3c:	4b0a      	ldr	r3, [pc, #40]	; (800cb68 <vPortSetupTimerInterrupt+0x3c>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a0a      	ldr	r2, [pc, #40]	; (800cb6c <vPortSetupTimerInterrupt+0x40>)
 800cb42:	fba2 2303 	umull	r2, r3, r2, r3
 800cb46:	099b      	lsrs	r3, r3, #6
 800cb48:	4a09      	ldr	r2, [pc, #36]	; (800cb70 <vPortSetupTimerInterrupt+0x44>)
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb4e:	4b04      	ldr	r3, [pc, #16]	; (800cb60 <vPortSetupTimerInterrupt+0x34>)
 800cb50:	2207      	movs	r2, #7
 800cb52:	601a      	str	r2, [r3, #0]
}
 800cb54:	bf00      	nop
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	e000e010 	.word	0xe000e010
 800cb64:	e000e018 	.word	0xe000e018
 800cb68:	200000c8 	.word	0x200000c8
 800cb6c:	10624dd3 	.word	0x10624dd3
 800cb70:	e000e014 	.word	0xe000e014

0800cb74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb84 <vPortEnableVFP+0x10>
 800cb78:	6801      	ldr	r1, [r0, #0]
 800cb7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb7e:	6001      	str	r1, [r0, #0]
 800cb80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb82:	bf00      	nop
 800cb84:	e000ed88 	.word	0xe000ed88

0800cb88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb8e:	f3ef 8305 	mrs	r3, IPSR
 800cb92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2b0f      	cmp	r3, #15
 800cb98:	d914      	bls.n	800cbc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb9a:	4a17      	ldr	r2, [pc, #92]	; (800cbf8 <vPortValidateInterruptPriority+0x70>)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	4413      	add	r3, r2
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cba4:	4b15      	ldr	r3, [pc, #84]	; (800cbfc <vPortValidateInterruptPriority+0x74>)
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	7afa      	ldrb	r2, [r7, #11]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d20a      	bcs.n	800cbc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	607b      	str	r3, [r7, #4]
}
 800cbc0:	bf00      	nop
 800cbc2:	e7fe      	b.n	800cbc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cbc4:	4b0e      	ldr	r3, [pc, #56]	; (800cc00 <vPortValidateInterruptPriority+0x78>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cbcc:	4b0d      	ldr	r3, [pc, #52]	; (800cc04 <vPortValidateInterruptPriority+0x7c>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d90a      	bls.n	800cbea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	603b      	str	r3, [r7, #0]
}
 800cbe6:	bf00      	nop
 800cbe8:	e7fe      	b.n	800cbe8 <vPortValidateInterruptPriority+0x60>
	}
 800cbea:	bf00      	nop
 800cbec:	3714      	adds	r7, #20
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	e000e3f0 	.word	0xe000e3f0
 800cbfc:	20001578 	.word	0x20001578
 800cc00:	e000ed0c 	.word	0xe000ed0c
 800cc04:	2000157c 	.word	0x2000157c

0800cc08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b08a      	sub	sp, #40	; 0x28
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cc10:	2300      	movs	r3, #0
 800cc12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cc14:	f7fe ff96 	bl	800bb44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cc18:	4b5b      	ldr	r3, [pc, #364]	; (800cd88 <pvPortMalloc+0x180>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d101      	bne.n	800cc24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc20:	f000 f920 	bl	800ce64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc24:	4b59      	ldr	r3, [pc, #356]	; (800cd8c <pvPortMalloc+0x184>)
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f040 8093 	bne.w	800cd58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d01d      	beq.n	800cc74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cc38:	2208      	movs	r2, #8
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f003 0307 	and.w	r3, r3, #7
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d014      	beq.n	800cc74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f023 0307 	bic.w	r3, r3, #7
 800cc50:	3308      	adds	r3, #8
 800cc52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f003 0307 	and.w	r3, r3, #7
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00a      	beq.n	800cc74 <pvPortMalloc+0x6c>
	__asm volatile
 800cc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	617b      	str	r3, [r7, #20]
}
 800cc70:	bf00      	nop
 800cc72:	e7fe      	b.n	800cc72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d06e      	beq.n	800cd58 <pvPortMalloc+0x150>
 800cc7a:	4b45      	ldr	r3, [pc, #276]	; (800cd90 <pvPortMalloc+0x188>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d869      	bhi.n	800cd58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc84:	4b43      	ldr	r3, [pc, #268]	; (800cd94 <pvPortMalloc+0x18c>)
 800cc86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc88:	4b42      	ldr	r3, [pc, #264]	; (800cd94 <pvPortMalloc+0x18c>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc8e:	e004      	b.n	800cc9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d903      	bls.n	800ccac <pvPortMalloc+0xa4>
 800cca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1f1      	bne.n	800cc90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ccac:	4b36      	ldr	r3, [pc, #216]	; (800cd88 <pvPortMalloc+0x180>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d050      	beq.n	800cd58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ccb6:	6a3b      	ldr	r3, [r7, #32]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	2208      	movs	r2, #8
 800ccbc:	4413      	add	r3, r2
 800ccbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	6a3b      	ldr	r3, [r7, #32]
 800ccc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ccc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	1ad2      	subs	r2, r2, r3
 800ccd0:	2308      	movs	r3, #8
 800ccd2:	005b      	lsls	r3, r3, #1
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d91f      	bls.n	800cd18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ccd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4413      	add	r3, r2
 800ccde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	f003 0307 	and.w	r3, r3, #7
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d00a      	beq.n	800cd00 <pvPortMalloc+0xf8>
	__asm volatile
 800ccea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccee:	f383 8811 	msr	BASEPRI, r3
 800ccf2:	f3bf 8f6f 	isb	sy
 800ccf6:	f3bf 8f4f 	dsb	sy
 800ccfa:	613b      	str	r3, [r7, #16]
}
 800ccfc:	bf00      	nop
 800ccfe:	e7fe      	b.n	800ccfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd02:	685a      	ldr	r2, [r3, #4]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	1ad2      	subs	r2, r2, r3
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd12:	69b8      	ldr	r0, [r7, #24]
 800cd14:	f000 f908 	bl	800cf28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd18:	4b1d      	ldr	r3, [pc, #116]	; (800cd90 <pvPortMalloc+0x188>)
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	1ad3      	subs	r3, r2, r3
 800cd22:	4a1b      	ldr	r2, [pc, #108]	; (800cd90 <pvPortMalloc+0x188>)
 800cd24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd26:	4b1a      	ldr	r3, [pc, #104]	; (800cd90 <pvPortMalloc+0x188>)
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	4b1b      	ldr	r3, [pc, #108]	; (800cd98 <pvPortMalloc+0x190>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d203      	bcs.n	800cd3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd32:	4b17      	ldr	r3, [pc, #92]	; (800cd90 <pvPortMalloc+0x188>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a18      	ldr	r2, [pc, #96]	; (800cd98 <pvPortMalloc+0x190>)
 800cd38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3c:	685a      	ldr	r2, [r3, #4]
 800cd3e:	4b13      	ldr	r3, [pc, #76]	; (800cd8c <pvPortMalloc+0x184>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	431a      	orrs	r2, r3
 800cd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd4e:	4b13      	ldr	r3, [pc, #76]	; (800cd9c <pvPortMalloc+0x194>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	3301      	adds	r3, #1
 800cd54:	4a11      	ldr	r2, [pc, #68]	; (800cd9c <pvPortMalloc+0x194>)
 800cd56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd58:	f7fe ff02 	bl	800bb60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	f003 0307 	and.w	r3, r3, #7
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00a      	beq.n	800cd7c <pvPortMalloc+0x174>
	__asm volatile
 800cd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	60fb      	str	r3, [r7, #12]
}
 800cd78:	bf00      	nop
 800cd7a:	e7fe      	b.n	800cd7a <pvPortMalloc+0x172>
	return pvReturn;
 800cd7c:	69fb      	ldr	r3, [r7, #28]
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3728      	adds	r7, #40	; 0x28
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	20008ab8 	.word	0x20008ab8
 800cd8c:	20008acc 	.word	0x20008acc
 800cd90:	20008abc 	.word	0x20008abc
 800cd94:	20008ab0 	.word	0x20008ab0
 800cd98:	20008ac0 	.word	0x20008ac0
 800cd9c:	20008ac4 	.word	0x20008ac4

0800cda0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d04d      	beq.n	800ce4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cdb2:	2308      	movs	r3, #8
 800cdb4:	425b      	negs	r3, r3
 800cdb6:	697a      	ldr	r2, [r7, #20]
 800cdb8:	4413      	add	r3, r2
 800cdba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	685a      	ldr	r2, [r3, #4]
 800cdc4:	4b24      	ldr	r3, [pc, #144]	; (800ce58 <vPortFree+0xb8>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4013      	ands	r3, r2
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d10a      	bne.n	800cde4 <vPortFree+0x44>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	60fb      	str	r3, [r7, #12]
}
 800cde0:	bf00      	nop
 800cde2:	e7fe      	b.n	800cde2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00a      	beq.n	800ce02 <vPortFree+0x62>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	60bb      	str	r3, [r7, #8]
}
 800cdfe:	bf00      	nop
 800ce00:	e7fe      	b.n	800ce00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	685a      	ldr	r2, [r3, #4]
 800ce06:	4b14      	ldr	r3, [pc, #80]	; (800ce58 <vPortFree+0xb8>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4013      	ands	r3, r2
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d01e      	beq.n	800ce4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d11a      	bne.n	800ce4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	685a      	ldr	r2, [r3, #4]
 800ce1c:	4b0e      	ldr	r3, [pc, #56]	; (800ce58 <vPortFree+0xb8>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	43db      	mvns	r3, r3
 800ce22:	401a      	ands	r2, r3
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ce28:	f7fe fe8c 	bl	800bb44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	685a      	ldr	r2, [r3, #4]
 800ce30:	4b0a      	ldr	r3, [pc, #40]	; (800ce5c <vPortFree+0xbc>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4413      	add	r3, r2
 800ce36:	4a09      	ldr	r2, [pc, #36]	; (800ce5c <vPortFree+0xbc>)
 800ce38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce3a:	6938      	ldr	r0, [r7, #16]
 800ce3c:	f000 f874 	bl	800cf28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce40:	4b07      	ldr	r3, [pc, #28]	; (800ce60 <vPortFree+0xc0>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3301      	adds	r3, #1
 800ce46:	4a06      	ldr	r2, [pc, #24]	; (800ce60 <vPortFree+0xc0>)
 800ce48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce4a:	f7fe fe89 	bl	800bb60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce4e:	bf00      	nop
 800ce50:	3718      	adds	r7, #24
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	bf00      	nop
 800ce58:	20008acc 	.word	0x20008acc
 800ce5c:	20008abc 	.word	0x20008abc
 800ce60:	20008ac8 	.word	0x20008ac8

0800ce64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce64:	b480      	push	{r7}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce6a:	f247 5330 	movw	r3, #30000	; 0x7530
 800ce6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce70:	4b27      	ldr	r3, [pc, #156]	; (800cf10 <prvHeapInit+0xac>)
 800ce72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f003 0307 	and.w	r3, r3, #7
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00c      	beq.n	800ce98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	3307      	adds	r3, #7
 800ce82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f023 0307 	bic.w	r3, r3, #7
 800ce8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce8c:	68ba      	ldr	r2, [r7, #8]
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	1ad3      	subs	r3, r2, r3
 800ce92:	4a1f      	ldr	r2, [pc, #124]	; (800cf10 <prvHeapInit+0xac>)
 800ce94:	4413      	add	r3, r2
 800ce96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce9c:	4a1d      	ldr	r2, [pc, #116]	; (800cf14 <prvHeapInit+0xb0>)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cea2:	4b1c      	ldr	r3, [pc, #112]	; (800cf14 <prvHeapInit+0xb0>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	68ba      	ldr	r2, [r7, #8]
 800ceac:	4413      	add	r3, r2
 800ceae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ceb0:	2208      	movs	r2, #8
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	1a9b      	subs	r3, r3, r2
 800ceb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f023 0307 	bic.w	r3, r3, #7
 800cebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	4a15      	ldr	r2, [pc, #84]	; (800cf18 <prvHeapInit+0xb4>)
 800cec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cec6:	4b14      	ldr	r3, [pc, #80]	; (800cf18 <prvHeapInit+0xb4>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2200      	movs	r2, #0
 800cecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cece:	4b12      	ldr	r3, [pc, #72]	; (800cf18 <prvHeapInit+0xb4>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2200      	movs	r2, #0
 800ced4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	1ad2      	subs	r2, r2, r3
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cee4:	4b0c      	ldr	r3, [pc, #48]	; (800cf18 <prvHeapInit+0xb4>)
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	4a0a      	ldr	r2, [pc, #40]	; (800cf1c <prvHeapInit+0xb8>)
 800cef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	4a09      	ldr	r2, [pc, #36]	; (800cf20 <prvHeapInit+0xbc>)
 800cefa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cefc:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <prvHeapInit+0xc0>)
 800cefe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cf02:	601a      	str	r2, [r3, #0]
}
 800cf04:	bf00      	nop
 800cf06:	3714      	adds	r7, #20
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr
 800cf10:	20001580 	.word	0x20001580
 800cf14:	20008ab0 	.word	0x20008ab0
 800cf18:	20008ab8 	.word	0x20008ab8
 800cf1c:	20008ac0 	.word	0x20008ac0
 800cf20:	20008abc 	.word	0x20008abc
 800cf24:	20008acc 	.word	0x20008acc

0800cf28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf30:	4b28      	ldr	r3, [pc, #160]	; (800cfd4 <prvInsertBlockIntoFreeList+0xac>)
 800cf32:	60fb      	str	r3, [r7, #12]
 800cf34:	e002      	b.n	800cf3c <prvInsertBlockIntoFreeList+0x14>
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	60fb      	str	r3, [r7, #12]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d8f7      	bhi.n	800cf36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	68ba      	ldr	r2, [r7, #8]
 800cf50:	4413      	add	r3, r2
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d108      	bne.n	800cf6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	685a      	ldr	r2, [r3, #4]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	441a      	add	r2, r3
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	68ba      	ldr	r2, [r7, #8]
 800cf74:	441a      	add	r2, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d118      	bne.n	800cfb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	4b15      	ldr	r3, [pc, #84]	; (800cfd8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d00d      	beq.n	800cfa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	685a      	ldr	r2, [r3, #4]
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	441a      	add	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	e008      	b.n	800cfb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cfa6:	4b0c      	ldr	r3, [pc, #48]	; (800cfd8 <prvInsertBlockIntoFreeList+0xb0>)
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	601a      	str	r2, [r3, #0]
 800cfae:	e003      	b.n	800cfb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cfb8:	68fa      	ldr	r2, [r7, #12]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d002      	beq.n	800cfc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfc6:	bf00      	nop
 800cfc8:	3714      	adds	r7, #20
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	20008ab0 	.word	0x20008ab0
 800cfd8:	20008ab8 	.word	0x20008ab8

0800cfdc <__cvt>:
 800cfdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfe0:	ec55 4b10 	vmov	r4, r5, d0
 800cfe4:	2d00      	cmp	r5, #0
 800cfe6:	460e      	mov	r6, r1
 800cfe8:	4619      	mov	r1, r3
 800cfea:	462b      	mov	r3, r5
 800cfec:	bfbb      	ittet	lt
 800cfee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cff2:	461d      	movlt	r5, r3
 800cff4:	2300      	movge	r3, #0
 800cff6:	232d      	movlt	r3, #45	; 0x2d
 800cff8:	700b      	strb	r3, [r1, #0]
 800cffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cffc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d000:	4691      	mov	r9, r2
 800d002:	f023 0820 	bic.w	r8, r3, #32
 800d006:	bfbc      	itt	lt
 800d008:	4622      	movlt	r2, r4
 800d00a:	4614      	movlt	r4, r2
 800d00c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d010:	d005      	beq.n	800d01e <__cvt+0x42>
 800d012:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d016:	d100      	bne.n	800d01a <__cvt+0x3e>
 800d018:	3601      	adds	r6, #1
 800d01a:	2102      	movs	r1, #2
 800d01c:	e000      	b.n	800d020 <__cvt+0x44>
 800d01e:	2103      	movs	r1, #3
 800d020:	ab03      	add	r3, sp, #12
 800d022:	9301      	str	r3, [sp, #4]
 800d024:	ab02      	add	r3, sp, #8
 800d026:	9300      	str	r3, [sp, #0]
 800d028:	ec45 4b10 	vmov	d0, r4, r5
 800d02c:	4653      	mov	r3, sl
 800d02e:	4632      	mov	r2, r6
 800d030:	f001 f92e 	bl	800e290 <_dtoa_r>
 800d034:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d038:	4607      	mov	r7, r0
 800d03a:	d102      	bne.n	800d042 <__cvt+0x66>
 800d03c:	f019 0f01 	tst.w	r9, #1
 800d040:	d022      	beq.n	800d088 <__cvt+0xac>
 800d042:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d046:	eb07 0906 	add.w	r9, r7, r6
 800d04a:	d110      	bne.n	800d06e <__cvt+0x92>
 800d04c:	783b      	ldrb	r3, [r7, #0]
 800d04e:	2b30      	cmp	r3, #48	; 0x30
 800d050:	d10a      	bne.n	800d068 <__cvt+0x8c>
 800d052:	2200      	movs	r2, #0
 800d054:	2300      	movs	r3, #0
 800d056:	4620      	mov	r0, r4
 800d058:	4629      	mov	r1, r5
 800d05a:	f7f3 fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 800d05e:	b918      	cbnz	r0, 800d068 <__cvt+0x8c>
 800d060:	f1c6 0601 	rsb	r6, r6, #1
 800d064:	f8ca 6000 	str.w	r6, [sl]
 800d068:	f8da 3000 	ldr.w	r3, [sl]
 800d06c:	4499      	add	r9, r3
 800d06e:	2200      	movs	r2, #0
 800d070:	2300      	movs	r3, #0
 800d072:	4620      	mov	r0, r4
 800d074:	4629      	mov	r1, r5
 800d076:	f7f3 fd27 	bl	8000ac8 <__aeabi_dcmpeq>
 800d07a:	b108      	cbz	r0, 800d080 <__cvt+0xa4>
 800d07c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d080:	2230      	movs	r2, #48	; 0x30
 800d082:	9b03      	ldr	r3, [sp, #12]
 800d084:	454b      	cmp	r3, r9
 800d086:	d307      	bcc.n	800d098 <__cvt+0xbc>
 800d088:	9b03      	ldr	r3, [sp, #12]
 800d08a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d08c:	1bdb      	subs	r3, r3, r7
 800d08e:	4638      	mov	r0, r7
 800d090:	6013      	str	r3, [r2, #0]
 800d092:	b004      	add	sp, #16
 800d094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d098:	1c59      	adds	r1, r3, #1
 800d09a:	9103      	str	r1, [sp, #12]
 800d09c:	701a      	strb	r2, [r3, #0]
 800d09e:	e7f0      	b.n	800d082 <__cvt+0xa6>

0800d0a0 <__exponent>:
 800d0a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2900      	cmp	r1, #0
 800d0a6:	bfb8      	it	lt
 800d0a8:	4249      	neglt	r1, r1
 800d0aa:	f803 2b02 	strb.w	r2, [r3], #2
 800d0ae:	bfb4      	ite	lt
 800d0b0:	222d      	movlt	r2, #45	; 0x2d
 800d0b2:	222b      	movge	r2, #43	; 0x2b
 800d0b4:	2909      	cmp	r1, #9
 800d0b6:	7042      	strb	r2, [r0, #1]
 800d0b8:	dd2a      	ble.n	800d110 <__exponent+0x70>
 800d0ba:	f10d 0207 	add.w	r2, sp, #7
 800d0be:	4617      	mov	r7, r2
 800d0c0:	260a      	movs	r6, #10
 800d0c2:	4694      	mov	ip, r2
 800d0c4:	fb91 f5f6 	sdiv	r5, r1, r6
 800d0c8:	fb06 1415 	mls	r4, r6, r5, r1
 800d0cc:	3430      	adds	r4, #48	; 0x30
 800d0ce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	2c63      	cmp	r4, #99	; 0x63
 800d0d6:	f102 32ff 	add.w	r2, r2, #4294967295
 800d0da:	4629      	mov	r1, r5
 800d0dc:	dcf1      	bgt.n	800d0c2 <__exponent+0x22>
 800d0de:	3130      	adds	r1, #48	; 0x30
 800d0e0:	f1ac 0402 	sub.w	r4, ip, #2
 800d0e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d0e8:	1c41      	adds	r1, r0, #1
 800d0ea:	4622      	mov	r2, r4
 800d0ec:	42ba      	cmp	r2, r7
 800d0ee:	d30a      	bcc.n	800d106 <__exponent+0x66>
 800d0f0:	f10d 0209 	add.w	r2, sp, #9
 800d0f4:	eba2 020c 	sub.w	r2, r2, ip
 800d0f8:	42bc      	cmp	r4, r7
 800d0fa:	bf88      	it	hi
 800d0fc:	2200      	movhi	r2, #0
 800d0fe:	4413      	add	r3, r2
 800d100:	1a18      	subs	r0, r3, r0
 800d102:	b003      	add	sp, #12
 800d104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d106:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d10a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d10e:	e7ed      	b.n	800d0ec <__exponent+0x4c>
 800d110:	2330      	movs	r3, #48	; 0x30
 800d112:	3130      	adds	r1, #48	; 0x30
 800d114:	7083      	strb	r3, [r0, #2]
 800d116:	70c1      	strb	r1, [r0, #3]
 800d118:	1d03      	adds	r3, r0, #4
 800d11a:	e7f1      	b.n	800d100 <__exponent+0x60>

0800d11c <_printf_float>:
 800d11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d120:	ed2d 8b02 	vpush	{d8}
 800d124:	b08d      	sub	sp, #52	; 0x34
 800d126:	460c      	mov	r4, r1
 800d128:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d12c:	4616      	mov	r6, r2
 800d12e:	461f      	mov	r7, r3
 800d130:	4605      	mov	r5, r0
 800d132:	f000 ff3b 	bl	800dfac <_localeconv_r>
 800d136:	f8d0 a000 	ldr.w	sl, [r0]
 800d13a:	4650      	mov	r0, sl
 800d13c:	f7f3 f898 	bl	8000270 <strlen>
 800d140:	2300      	movs	r3, #0
 800d142:	930a      	str	r3, [sp, #40]	; 0x28
 800d144:	6823      	ldr	r3, [r4, #0]
 800d146:	9305      	str	r3, [sp, #20]
 800d148:	f8d8 3000 	ldr.w	r3, [r8]
 800d14c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d150:	3307      	adds	r3, #7
 800d152:	f023 0307 	bic.w	r3, r3, #7
 800d156:	f103 0208 	add.w	r2, r3, #8
 800d15a:	f8c8 2000 	str.w	r2, [r8]
 800d15e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d162:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d166:	9307      	str	r3, [sp, #28]
 800d168:	f8cd 8018 	str.w	r8, [sp, #24]
 800d16c:	ee08 0a10 	vmov	s16, r0
 800d170:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d174:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d178:	4b9e      	ldr	r3, [pc, #632]	; (800d3f4 <_printf_float+0x2d8>)
 800d17a:	f04f 32ff 	mov.w	r2, #4294967295
 800d17e:	f7f3 fcd5 	bl	8000b2c <__aeabi_dcmpun>
 800d182:	bb88      	cbnz	r0, 800d1e8 <_printf_float+0xcc>
 800d184:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d188:	4b9a      	ldr	r3, [pc, #616]	; (800d3f4 <_printf_float+0x2d8>)
 800d18a:	f04f 32ff 	mov.w	r2, #4294967295
 800d18e:	f7f3 fcaf 	bl	8000af0 <__aeabi_dcmple>
 800d192:	bb48      	cbnz	r0, 800d1e8 <_printf_float+0xcc>
 800d194:	2200      	movs	r2, #0
 800d196:	2300      	movs	r3, #0
 800d198:	4640      	mov	r0, r8
 800d19a:	4649      	mov	r1, r9
 800d19c:	f7f3 fc9e 	bl	8000adc <__aeabi_dcmplt>
 800d1a0:	b110      	cbz	r0, 800d1a8 <_printf_float+0x8c>
 800d1a2:	232d      	movs	r3, #45	; 0x2d
 800d1a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1a8:	4a93      	ldr	r2, [pc, #588]	; (800d3f8 <_printf_float+0x2dc>)
 800d1aa:	4b94      	ldr	r3, [pc, #592]	; (800d3fc <_printf_float+0x2e0>)
 800d1ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d1b0:	bf94      	ite	ls
 800d1b2:	4690      	movls	r8, r2
 800d1b4:	4698      	movhi	r8, r3
 800d1b6:	2303      	movs	r3, #3
 800d1b8:	6123      	str	r3, [r4, #16]
 800d1ba:	9b05      	ldr	r3, [sp, #20]
 800d1bc:	f023 0304 	bic.w	r3, r3, #4
 800d1c0:	6023      	str	r3, [r4, #0]
 800d1c2:	f04f 0900 	mov.w	r9, #0
 800d1c6:	9700      	str	r7, [sp, #0]
 800d1c8:	4633      	mov	r3, r6
 800d1ca:	aa0b      	add	r2, sp, #44	; 0x2c
 800d1cc:	4621      	mov	r1, r4
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	f000 f9da 	bl	800d588 <_printf_common>
 800d1d4:	3001      	adds	r0, #1
 800d1d6:	f040 8090 	bne.w	800d2fa <_printf_float+0x1de>
 800d1da:	f04f 30ff 	mov.w	r0, #4294967295
 800d1de:	b00d      	add	sp, #52	; 0x34
 800d1e0:	ecbd 8b02 	vpop	{d8}
 800d1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e8:	4642      	mov	r2, r8
 800d1ea:	464b      	mov	r3, r9
 800d1ec:	4640      	mov	r0, r8
 800d1ee:	4649      	mov	r1, r9
 800d1f0:	f7f3 fc9c 	bl	8000b2c <__aeabi_dcmpun>
 800d1f4:	b140      	cbz	r0, 800d208 <_printf_float+0xec>
 800d1f6:	464b      	mov	r3, r9
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	bfbc      	itt	lt
 800d1fc:	232d      	movlt	r3, #45	; 0x2d
 800d1fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d202:	4a7f      	ldr	r2, [pc, #508]	; (800d400 <_printf_float+0x2e4>)
 800d204:	4b7f      	ldr	r3, [pc, #508]	; (800d404 <_printf_float+0x2e8>)
 800d206:	e7d1      	b.n	800d1ac <_printf_float+0x90>
 800d208:	6863      	ldr	r3, [r4, #4]
 800d20a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d20e:	9206      	str	r2, [sp, #24]
 800d210:	1c5a      	adds	r2, r3, #1
 800d212:	d13f      	bne.n	800d294 <_printf_float+0x178>
 800d214:	2306      	movs	r3, #6
 800d216:	6063      	str	r3, [r4, #4]
 800d218:	9b05      	ldr	r3, [sp, #20]
 800d21a:	6861      	ldr	r1, [r4, #4]
 800d21c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d220:	2300      	movs	r3, #0
 800d222:	9303      	str	r3, [sp, #12]
 800d224:	ab0a      	add	r3, sp, #40	; 0x28
 800d226:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d22a:	ab09      	add	r3, sp, #36	; 0x24
 800d22c:	ec49 8b10 	vmov	d0, r8, r9
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	6022      	str	r2, [r4, #0]
 800d234:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d238:	4628      	mov	r0, r5
 800d23a:	f7ff fecf 	bl	800cfdc <__cvt>
 800d23e:	9b06      	ldr	r3, [sp, #24]
 800d240:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d242:	2b47      	cmp	r3, #71	; 0x47
 800d244:	4680      	mov	r8, r0
 800d246:	d108      	bne.n	800d25a <_printf_float+0x13e>
 800d248:	1cc8      	adds	r0, r1, #3
 800d24a:	db02      	blt.n	800d252 <_printf_float+0x136>
 800d24c:	6863      	ldr	r3, [r4, #4]
 800d24e:	4299      	cmp	r1, r3
 800d250:	dd41      	ble.n	800d2d6 <_printf_float+0x1ba>
 800d252:	f1ab 0302 	sub.w	r3, fp, #2
 800d256:	fa5f fb83 	uxtb.w	fp, r3
 800d25a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d25e:	d820      	bhi.n	800d2a2 <_printf_float+0x186>
 800d260:	3901      	subs	r1, #1
 800d262:	465a      	mov	r2, fp
 800d264:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d268:	9109      	str	r1, [sp, #36]	; 0x24
 800d26a:	f7ff ff19 	bl	800d0a0 <__exponent>
 800d26e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d270:	1813      	adds	r3, r2, r0
 800d272:	2a01      	cmp	r2, #1
 800d274:	4681      	mov	r9, r0
 800d276:	6123      	str	r3, [r4, #16]
 800d278:	dc02      	bgt.n	800d280 <_printf_float+0x164>
 800d27a:	6822      	ldr	r2, [r4, #0]
 800d27c:	07d2      	lsls	r2, r2, #31
 800d27e:	d501      	bpl.n	800d284 <_printf_float+0x168>
 800d280:	3301      	adds	r3, #1
 800d282:	6123      	str	r3, [r4, #16]
 800d284:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d09c      	beq.n	800d1c6 <_printf_float+0xaa>
 800d28c:	232d      	movs	r3, #45	; 0x2d
 800d28e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d292:	e798      	b.n	800d1c6 <_printf_float+0xaa>
 800d294:	9a06      	ldr	r2, [sp, #24]
 800d296:	2a47      	cmp	r2, #71	; 0x47
 800d298:	d1be      	bne.n	800d218 <_printf_float+0xfc>
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d1bc      	bne.n	800d218 <_printf_float+0xfc>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e7b9      	b.n	800d216 <_printf_float+0xfa>
 800d2a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d2a6:	d118      	bne.n	800d2da <_printf_float+0x1be>
 800d2a8:	2900      	cmp	r1, #0
 800d2aa:	6863      	ldr	r3, [r4, #4]
 800d2ac:	dd0b      	ble.n	800d2c6 <_printf_float+0x1aa>
 800d2ae:	6121      	str	r1, [r4, #16]
 800d2b0:	b913      	cbnz	r3, 800d2b8 <_printf_float+0x19c>
 800d2b2:	6822      	ldr	r2, [r4, #0]
 800d2b4:	07d0      	lsls	r0, r2, #31
 800d2b6:	d502      	bpl.n	800d2be <_printf_float+0x1a2>
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	440b      	add	r3, r1
 800d2bc:	6123      	str	r3, [r4, #16]
 800d2be:	65a1      	str	r1, [r4, #88]	; 0x58
 800d2c0:	f04f 0900 	mov.w	r9, #0
 800d2c4:	e7de      	b.n	800d284 <_printf_float+0x168>
 800d2c6:	b913      	cbnz	r3, 800d2ce <_printf_float+0x1b2>
 800d2c8:	6822      	ldr	r2, [r4, #0]
 800d2ca:	07d2      	lsls	r2, r2, #31
 800d2cc:	d501      	bpl.n	800d2d2 <_printf_float+0x1b6>
 800d2ce:	3302      	adds	r3, #2
 800d2d0:	e7f4      	b.n	800d2bc <_printf_float+0x1a0>
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e7f2      	b.n	800d2bc <_printf_float+0x1a0>
 800d2d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2dc:	4299      	cmp	r1, r3
 800d2de:	db05      	blt.n	800d2ec <_printf_float+0x1d0>
 800d2e0:	6823      	ldr	r3, [r4, #0]
 800d2e2:	6121      	str	r1, [r4, #16]
 800d2e4:	07d8      	lsls	r0, r3, #31
 800d2e6:	d5ea      	bpl.n	800d2be <_printf_float+0x1a2>
 800d2e8:	1c4b      	adds	r3, r1, #1
 800d2ea:	e7e7      	b.n	800d2bc <_printf_float+0x1a0>
 800d2ec:	2900      	cmp	r1, #0
 800d2ee:	bfd4      	ite	le
 800d2f0:	f1c1 0202 	rsble	r2, r1, #2
 800d2f4:	2201      	movgt	r2, #1
 800d2f6:	4413      	add	r3, r2
 800d2f8:	e7e0      	b.n	800d2bc <_printf_float+0x1a0>
 800d2fa:	6823      	ldr	r3, [r4, #0]
 800d2fc:	055a      	lsls	r2, r3, #21
 800d2fe:	d407      	bmi.n	800d310 <_printf_float+0x1f4>
 800d300:	6923      	ldr	r3, [r4, #16]
 800d302:	4642      	mov	r2, r8
 800d304:	4631      	mov	r1, r6
 800d306:	4628      	mov	r0, r5
 800d308:	47b8      	blx	r7
 800d30a:	3001      	adds	r0, #1
 800d30c:	d12c      	bne.n	800d368 <_printf_float+0x24c>
 800d30e:	e764      	b.n	800d1da <_printf_float+0xbe>
 800d310:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d314:	f240 80e0 	bls.w	800d4d8 <_printf_float+0x3bc>
 800d318:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d31c:	2200      	movs	r2, #0
 800d31e:	2300      	movs	r3, #0
 800d320:	f7f3 fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d324:	2800      	cmp	r0, #0
 800d326:	d034      	beq.n	800d392 <_printf_float+0x276>
 800d328:	4a37      	ldr	r2, [pc, #220]	; (800d408 <_printf_float+0x2ec>)
 800d32a:	2301      	movs	r3, #1
 800d32c:	4631      	mov	r1, r6
 800d32e:	4628      	mov	r0, r5
 800d330:	47b8      	blx	r7
 800d332:	3001      	adds	r0, #1
 800d334:	f43f af51 	beq.w	800d1da <_printf_float+0xbe>
 800d338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d33c:	429a      	cmp	r2, r3
 800d33e:	db02      	blt.n	800d346 <_printf_float+0x22a>
 800d340:	6823      	ldr	r3, [r4, #0]
 800d342:	07d8      	lsls	r0, r3, #31
 800d344:	d510      	bpl.n	800d368 <_printf_float+0x24c>
 800d346:	ee18 3a10 	vmov	r3, s16
 800d34a:	4652      	mov	r2, sl
 800d34c:	4631      	mov	r1, r6
 800d34e:	4628      	mov	r0, r5
 800d350:	47b8      	blx	r7
 800d352:	3001      	adds	r0, #1
 800d354:	f43f af41 	beq.w	800d1da <_printf_float+0xbe>
 800d358:	f04f 0800 	mov.w	r8, #0
 800d35c:	f104 091a 	add.w	r9, r4, #26
 800d360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d362:	3b01      	subs	r3, #1
 800d364:	4543      	cmp	r3, r8
 800d366:	dc09      	bgt.n	800d37c <_printf_float+0x260>
 800d368:	6823      	ldr	r3, [r4, #0]
 800d36a:	079b      	lsls	r3, r3, #30
 800d36c:	f100 8107 	bmi.w	800d57e <_printf_float+0x462>
 800d370:	68e0      	ldr	r0, [r4, #12]
 800d372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d374:	4298      	cmp	r0, r3
 800d376:	bfb8      	it	lt
 800d378:	4618      	movlt	r0, r3
 800d37a:	e730      	b.n	800d1de <_printf_float+0xc2>
 800d37c:	2301      	movs	r3, #1
 800d37e:	464a      	mov	r2, r9
 800d380:	4631      	mov	r1, r6
 800d382:	4628      	mov	r0, r5
 800d384:	47b8      	blx	r7
 800d386:	3001      	adds	r0, #1
 800d388:	f43f af27 	beq.w	800d1da <_printf_float+0xbe>
 800d38c:	f108 0801 	add.w	r8, r8, #1
 800d390:	e7e6      	b.n	800d360 <_printf_float+0x244>
 800d392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d394:	2b00      	cmp	r3, #0
 800d396:	dc39      	bgt.n	800d40c <_printf_float+0x2f0>
 800d398:	4a1b      	ldr	r2, [pc, #108]	; (800d408 <_printf_float+0x2ec>)
 800d39a:	2301      	movs	r3, #1
 800d39c:	4631      	mov	r1, r6
 800d39e:	4628      	mov	r0, r5
 800d3a0:	47b8      	blx	r7
 800d3a2:	3001      	adds	r0, #1
 800d3a4:	f43f af19 	beq.w	800d1da <_printf_float+0xbe>
 800d3a8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	d102      	bne.n	800d3b6 <_printf_float+0x29a>
 800d3b0:	6823      	ldr	r3, [r4, #0]
 800d3b2:	07d9      	lsls	r1, r3, #31
 800d3b4:	d5d8      	bpl.n	800d368 <_printf_float+0x24c>
 800d3b6:	ee18 3a10 	vmov	r3, s16
 800d3ba:	4652      	mov	r2, sl
 800d3bc:	4631      	mov	r1, r6
 800d3be:	4628      	mov	r0, r5
 800d3c0:	47b8      	blx	r7
 800d3c2:	3001      	adds	r0, #1
 800d3c4:	f43f af09 	beq.w	800d1da <_printf_float+0xbe>
 800d3c8:	f04f 0900 	mov.w	r9, #0
 800d3cc:	f104 0a1a 	add.w	sl, r4, #26
 800d3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3d2:	425b      	negs	r3, r3
 800d3d4:	454b      	cmp	r3, r9
 800d3d6:	dc01      	bgt.n	800d3dc <_printf_float+0x2c0>
 800d3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3da:	e792      	b.n	800d302 <_printf_float+0x1e6>
 800d3dc:	2301      	movs	r3, #1
 800d3de:	4652      	mov	r2, sl
 800d3e0:	4631      	mov	r1, r6
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	47b8      	blx	r7
 800d3e6:	3001      	adds	r0, #1
 800d3e8:	f43f aef7 	beq.w	800d1da <_printf_float+0xbe>
 800d3ec:	f109 0901 	add.w	r9, r9, #1
 800d3f0:	e7ee      	b.n	800d3d0 <_printf_float+0x2b4>
 800d3f2:	bf00      	nop
 800d3f4:	7fefffff 	.word	0x7fefffff
 800d3f8:	08013988 	.word	0x08013988
 800d3fc:	0801398c 	.word	0x0801398c
 800d400:	08013990 	.word	0x08013990
 800d404:	08013994 	.word	0x08013994
 800d408:	08013d20 	.word	0x08013d20
 800d40c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d40e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d410:	429a      	cmp	r2, r3
 800d412:	bfa8      	it	ge
 800d414:	461a      	movge	r2, r3
 800d416:	2a00      	cmp	r2, #0
 800d418:	4691      	mov	r9, r2
 800d41a:	dc37      	bgt.n	800d48c <_printf_float+0x370>
 800d41c:	f04f 0b00 	mov.w	fp, #0
 800d420:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d424:	f104 021a 	add.w	r2, r4, #26
 800d428:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d42a:	9305      	str	r3, [sp, #20]
 800d42c:	eba3 0309 	sub.w	r3, r3, r9
 800d430:	455b      	cmp	r3, fp
 800d432:	dc33      	bgt.n	800d49c <_printf_float+0x380>
 800d434:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d438:	429a      	cmp	r2, r3
 800d43a:	db3b      	blt.n	800d4b4 <_printf_float+0x398>
 800d43c:	6823      	ldr	r3, [r4, #0]
 800d43e:	07da      	lsls	r2, r3, #31
 800d440:	d438      	bmi.n	800d4b4 <_printf_float+0x398>
 800d442:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d446:	eba2 0903 	sub.w	r9, r2, r3
 800d44a:	9b05      	ldr	r3, [sp, #20]
 800d44c:	1ad2      	subs	r2, r2, r3
 800d44e:	4591      	cmp	r9, r2
 800d450:	bfa8      	it	ge
 800d452:	4691      	movge	r9, r2
 800d454:	f1b9 0f00 	cmp.w	r9, #0
 800d458:	dc35      	bgt.n	800d4c6 <_printf_float+0x3aa>
 800d45a:	f04f 0800 	mov.w	r8, #0
 800d45e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d462:	f104 0a1a 	add.w	sl, r4, #26
 800d466:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d46a:	1a9b      	subs	r3, r3, r2
 800d46c:	eba3 0309 	sub.w	r3, r3, r9
 800d470:	4543      	cmp	r3, r8
 800d472:	f77f af79 	ble.w	800d368 <_printf_float+0x24c>
 800d476:	2301      	movs	r3, #1
 800d478:	4652      	mov	r2, sl
 800d47a:	4631      	mov	r1, r6
 800d47c:	4628      	mov	r0, r5
 800d47e:	47b8      	blx	r7
 800d480:	3001      	adds	r0, #1
 800d482:	f43f aeaa 	beq.w	800d1da <_printf_float+0xbe>
 800d486:	f108 0801 	add.w	r8, r8, #1
 800d48a:	e7ec      	b.n	800d466 <_printf_float+0x34a>
 800d48c:	4613      	mov	r3, r2
 800d48e:	4631      	mov	r1, r6
 800d490:	4642      	mov	r2, r8
 800d492:	4628      	mov	r0, r5
 800d494:	47b8      	blx	r7
 800d496:	3001      	adds	r0, #1
 800d498:	d1c0      	bne.n	800d41c <_printf_float+0x300>
 800d49a:	e69e      	b.n	800d1da <_printf_float+0xbe>
 800d49c:	2301      	movs	r3, #1
 800d49e:	4631      	mov	r1, r6
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	9205      	str	r2, [sp, #20]
 800d4a4:	47b8      	blx	r7
 800d4a6:	3001      	adds	r0, #1
 800d4a8:	f43f ae97 	beq.w	800d1da <_printf_float+0xbe>
 800d4ac:	9a05      	ldr	r2, [sp, #20]
 800d4ae:	f10b 0b01 	add.w	fp, fp, #1
 800d4b2:	e7b9      	b.n	800d428 <_printf_float+0x30c>
 800d4b4:	ee18 3a10 	vmov	r3, s16
 800d4b8:	4652      	mov	r2, sl
 800d4ba:	4631      	mov	r1, r6
 800d4bc:	4628      	mov	r0, r5
 800d4be:	47b8      	blx	r7
 800d4c0:	3001      	adds	r0, #1
 800d4c2:	d1be      	bne.n	800d442 <_printf_float+0x326>
 800d4c4:	e689      	b.n	800d1da <_printf_float+0xbe>
 800d4c6:	9a05      	ldr	r2, [sp, #20]
 800d4c8:	464b      	mov	r3, r9
 800d4ca:	4442      	add	r2, r8
 800d4cc:	4631      	mov	r1, r6
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	47b8      	blx	r7
 800d4d2:	3001      	adds	r0, #1
 800d4d4:	d1c1      	bne.n	800d45a <_printf_float+0x33e>
 800d4d6:	e680      	b.n	800d1da <_printf_float+0xbe>
 800d4d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4da:	2a01      	cmp	r2, #1
 800d4dc:	dc01      	bgt.n	800d4e2 <_printf_float+0x3c6>
 800d4de:	07db      	lsls	r3, r3, #31
 800d4e0:	d53a      	bpl.n	800d558 <_printf_float+0x43c>
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	4642      	mov	r2, r8
 800d4e6:	4631      	mov	r1, r6
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	47b8      	blx	r7
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	f43f ae74 	beq.w	800d1da <_printf_float+0xbe>
 800d4f2:	ee18 3a10 	vmov	r3, s16
 800d4f6:	4652      	mov	r2, sl
 800d4f8:	4631      	mov	r1, r6
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	47b8      	blx	r7
 800d4fe:	3001      	adds	r0, #1
 800d500:	f43f ae6b 	beq.w	800d1da <_printf_float+0xbe>
 800d504:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d508:	2200      	movs	r2, #0
 800d50a:	2300      	movs	r3, #0
 800d50c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d510:	f7f3 fada 	bl	8000ac8 <__aeabi_dcmpeq>
 800d514:	b9d8      	cbnz	r0, 800d54e <_printf_float+0x432>
 800d516:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d51a:	f108 0201 	add.w	r2, r8, #1
 800d51e:	4631      	mov	r1, r6
 800d520:	4628      	mov	r0, r5
 800d522:	47b8      	blx	r7
 800d524:	3001      	adds	r0, #1
 800d526:	d10e      	bne.n	800d546 <_printf_float+0x42a>
 800d528:	e657      	b.n	800d1da <_printf_float+0xbe>
 800d52a:	2301      	movs	r3, #1
 800d52c:	4652      	mov	r2, sl
 800d52e:	4631      	mov	r1, r6
 800d530:	4628      	mov	r0, r5
 800d532:	47b8      	blx	r7
 800d534:	3001      	adds	r0, #1
 800d536:	f43f ae50 	beq.w	800d1da <_printf_float+0xbe>
 800d53a:	f108 0801 	add.w	r8, r8, #1
 800d53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d540:	3b01      	subs	r3, #1
 800d542:	4543      	cmp	r3, r8
 800d544:	dcf1      	bgt.n	800d52a <_printf_float+0x40e>
 800d546:	464b      	mov	r3, r9
 800d548:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d54c:	e6da      	b.n	800d304 <_printf_float+0x1e8>
 800d54e:	f04f 0800 	mov.w	r8, #0
 800d552:	f104 0a1a 	add.w	sl, r4, #26
 800d556:	e7f2      	b.n	800d53e <_printf_float+0x422>
 800d558:	2301      	movs	r3, #1
 800d55a:	4642      	mov	r2, r8
 800d55c:	e7df      	b.n	800d51e <_printf_float+0x402>
 800d55e:	2301      	movs	r3, #1
 800d560:	464a      	mov	r2, r9
 800d562:	4631      	mov	r1, r6
 800d564:	4628      	mov	r0, r5
 800d566:	47b8      	blx	r7
 800d568:	3001      	adds	r0, #1
 800d56a:	f43f ae36 	beq.w	800d1da <_printf_float+0xbe>
 800d56e:	f108 0801 	add.w	r8, r8, #1
 800d572:	68e3      	ldr	r3, [r4, #12]
 800d574:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d576:	1a5b      	subs	r3, r3, r1
 800d578:	4543      	cmp	r3, r8
 800d57a:	dcf0      	bgt.n	800d55e <_printf_float+0x442>
 800d57c:	e6f8      	b.n	800d370 <_printf_float+0x254>
 800d57e:	f04f 0800 	mov.w	r8, #0
 800d582:	f104 0919 	add.w	r9, r4, #25
 800d586:	e7f4      	b.n	800d572 <_printf_float+0x456>

0800d588 <_printf_common>:
 800d588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d58c:	4616      	mov	r6, r2
 800d58e:	4699      	mov	r9, r3
 800d590:	688a      	ldr	r2, [r1, #8]
 800d592:	690b      	ldr	r3, [r1, #16]
 800d594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d598:	4293      	cmp	r3, r2
 800d59a:	bfb8      	it	lt
 800d59c:	4613      	movlt	r3, r2
 800d59e:	6033      	str	r3, [r6, #0]
 800d5a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d5a4:	4607      	mov	r7, r0
 800d5a6:	460c      	mov	r4, r1
 800d5a8:	b10a      	cbz	r2, 800d5ae <_printf_common+0x26>
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	6033      	str	r3, [r6, #0]
 800d5ae:	6823      	ldr	r3, [r4, #0]
 800d5b0:	0699      	lsls	r1, r3, #26
 800d5b2:	bf42      	ittt	mi
 800d5b4:	6833      	ldrmi	r3, [r6, #0]
 800d5b6:	3302      	addmi	r3, #2
 800d5b8:	6033      	strmi	r3, [r6, #0]
 800d5ba:	6825      	ldr	r5, [r4, #0]
 800d5bc:	f015 0506 	ands.w	r5, r5, #6
 800d5c0:	d106      	bne.n	800d5d0 <_printf_common+0x48>
 800d5c2:	f104 0a19 	add.w	sl, r4, #25
 800d5c6:	68e3      	ldr	r3, [r4, #12]
 800d5c8:	6832      	ldr	r2, [r6, #0]
 800d5ca:	1a9b      	subs	r3, r3, r2
 800d5cc:	42ab      	cmp	r3, r5
 800d5ce:	dc26      	bgt.n	800d61e <_printf_common+0x96>
 800d5d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5d4:	1e13      	subs	r3, r2, #0
 800d5d6:	6822      	ldr	r2, [r4, #0]
 800d5d8:	bf18      	it	ne
 800d5da:	2301      	movne	r3, #1
 800d5dc:	0692      	lsls	r2, r2, #26
 800d5de:	d42b      	bmi.n	800d638 <_printf_common+0xb0>
 800d5e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5e4:	4649      	mov	r1, r9
 800d5e6:	4638      	mov	r0, r7
 800d5e8:	47c0      	blx	r8
 800d5ea:	3001      	adds	r0, #1
 800d5ec:	d01e      	beq.n	800d62c <_printf_common+0xa4>
 800d5ee:	6823      	ldr	r3, [r4, #0]
 800d5f0:	6922      	ldr	r2, [r4, #16]
 800d5f2:	f003 0306 	and.w	r3, r3, #6
 800d5f6:	2b04      	cmp	r3, #4
 800d5f8:	bf02      	ittt	eq
 800d5fa:	68e5      	ldreq	r5, [r4, #12]
 800d5fc:	6833      	ldreq	r3, [r6, #0]
 800d5fe:	1aed      	subeq	r5, r5, r3
 800d600:	68a3      	ldr	r3, [r4, #8]
 800d602:	bf0c      	ite	eq
 800d604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d608:	2500      	movne	r5, #0
 800d60a:	4293      	cmp	r3, r2
 800d60c:	bfc4      	itt	gt
 800d60e:	1a9b      	subgt	r3, r3, r2
 800d610:	18ed      	addgt	r5, r5, r3
 800d612:	2600      	movs	r6, #0
 800d614:	341a      	adds	r4, #26
 800d616:	42b5      	cmp	r5, r6
 800d618:	d11a      	bne.n	800d650 <_printf_common+0xc8>
 800d61a:	2000      	movs	r0, #0
 800d61c:	e008      	b.n	800d630 <_printf_common+0xa8>
 800d61e:	2301      	movs	r3, #1
 800d620:	4652      	mov	r2, sl
 800d622:	4649      	mov	r1, r9
 800d624:	4638      	mov	r0, r7
 800d626:	47c0      	blx	r8
 800d628:	3001      	adds	r0, #1
 800d62a:	d103      	bne.n	800d634 <_printf_common+0xac>
 800d62c:	f04f 30ff 	mov.w	r0, #4294967295
 800d630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d634:	3501      	adds	r5, #1
 800d636:	e7c6      	b.n	800d5c6 <_printf_common+0x3e>
 800d638:	18e1      	adds	r1, r4, r3
 800d63a:	1c5a      	adds	r2, r3, #1
 800d63c:	2030      	movs	r0, #48	; 0x30
 800d63e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d642:	4422      	add	r2, r4
 800d644:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d648:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d64c:	3302      	adds	r3, #2
 800d64e:	e7c7      	b.n	800d5e0 <_printf_common+0x58>
 800d650:	2301      	movs	r3, #1
 800d652:	4622      	mov	r2, r4
 800d654:	4649      	mov	r1, r9
 800d656:	4638      	mov	r0, r7
 800d658:	47c0      	blx	r8
 800d65a:	3001      	adds	r0, #1
 800d65c:	d0e6      	beq.n	800d62c <_printf_common+0xa4>
 800d65e:	3601      	adds	r6, #1
 800d660:	e7d9      	b.n	800d616 <_printf_common+0x8e>
	...

0800d664 <_printf_i>:
 800d664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d668:	7e0f      	ldrb	r7, [r1, #24]
 800d66a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d66c:	2f78      	cmp	r7, #120	; 0x78
 800d66e:	4691      	mov	r9, r2
 800d670:	4680      	mov	r8, r0
 800d672:	460c      	mov	r4, r1
 800d674:	469a      	mov	sl, r3
 800d676:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d67a:	d807      	bhi.n	800d68c <_printf_i+0x28>
 800d67c:	2f62      	cmp	r7, #98	; 0x62
 800d67e:	d80a      	bhi.n	800d696 <_printf_i+0x32>
 800d680:	2f00      	cmp	r7, #0
 800d682:	f000 80d4 	beq.w	800d82e <_printf_i+0x1ca>
 800d686:	2f58      	cmp	r7, #88	; 0x58
 800d688:	f000 80c0 	beq.w	800d80c <_printf_i+0x1a8>
 800d68c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d690:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d694:	e03a      	b.n	800d70c <_printf_i+0xa8>
 800d696:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d69a:	2b15      	cmp	r3, #21
 800d69c:	d8f6      	bhi.n	800d68c <_printf_i+0x28>
 800d69e:	a101      	add	r1, pc, #4	; (adr r1, 800d6a4 <_printf_i+0x40>)
 800d6a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6a4:	0800d6fd 	.word	0x0800d6fd
 800d6a8:	0800d711 	.word	0x0800d711
 800d6ac:	0800d68d 	.word	0x0800d68d
 800d6b0:	0800d68d 	.word	0x0800d68d
 800d6b4:	0800d68d 	.word	0x0800d68d
 800d6b8:	0800d68d 	.word	0x0800d68d
 800d6bc:	0800d711 	.word	0x0800d711
 800d6c0:	0800d68d 	.word	0x0800d68d
 800d6c4:	0800d68d 	.word	0x0800d68d
 800d6c8:	0800d68d 	.word	0x0800d68d
 800d6cc:	0800d68d 	.word	0x0800d68d
 800d6d0:	0800d815 	.word	0x0800d815
 800d6d4:	0800d73d 	.word	0x0800d73d
 800d6d8:	0800d7cf 	.word	0x0800d7cf
 800d6dc:	0800d68d 	.word	0x0800d68d
 800d6e0:	0800d68d 	.word	0x0800d68d
 800d6e4:	0800d837 	.word	0x0800d837
 800d6e8:	0800d68d 	.word	0x0800d68d
 800d6ec:	0800d73d 	.word	0x0800d73d
 800d6f0:	0800d68d 	.word	0x0800d68d
 800d6f4:	0800d68d 	.word	0x0800d68d
 800d6f8:	0800d7d7 	.word	0x0800d7d7
 800d6fc:	682b      	ldr	r3, [r5, #0]
 800d6fe:	1d1a      	adds	r2, r3, #4
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	602a      	str	r2, [r5, #0]
 800d704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d70c:	2301      	movs	r3, #1
 800d70e:	e09f      	b.n	800d850 <_printf_i+0x1ec>
 800d710:	6820      	ldr	r0, [r4, #0]
 800d712:	682b      	ldr	r3, [r5, #0]
 800d714:	0607      	lsls	r7, r0, #24
 800d716:	f103 0104 	add.w	r1, r3, #4
 800d71a:	6029      	str	r1, [r5, #0]
 800d71c:	d501      	bpl.n	800d722 <_printf_i+0xbe>
 800d71e:	681e      	ldr	r6, [r3, #0]
 800d720:	e003      	b.n	800d72a <_printf_i+0xc6>
 800d722:	0646      	lsls	r6, r0, #25
 800d724:	d5fb      	bpl.n	800d71e <_printf_i+0xba>
 800d726:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d72a:	2e00      	cmp	r6, #0
 800d72c:	da03      	bge.n	800d736 <_printf_i+0xd2>
 800d72e:	232d      	movs	r3, #45	; 0x2d
 800d730:	4276      	negs	r6, r6
 800d732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d736:	485a      	ldr	r0, [pc, #360]	; (800d8a0 <_printf_i+0x23c>)
 800d738:	230a      	movs	r3, #10
 800d73a:	e012      	b.n	800d762 <_printf_i+0xfe>
 800d73c:	682b      	ldr	r3, [r5, #0]
 800d73e:	6820      	ldr	r0, [r4, #0]
 800d740:	1d19      	adds	r1, r3, #4
 800d742:	6029      	str	r1, [r5, #0]
 800d744:	0605      	lsls	r5, r0, #24
 800d746:	d501      	bpl.n	800d74c <_printf_i+0xe8>
 800d748:	681e      	ldr	r6, [r3, #0]
 800d74a:	e002      	b.n	800d752 <_printf_i+0xee>
 800d74c:	0641      	lsls	r1, r0, #25
 800d74e:	d5fb      	bpl.n	800d748 <_printf_i+0xe4>
 800d750:	881e      	ldrh	r6, [r3, #0]
 800d752:	4853      	ldr	r0, [pc, #332]	; (800d8a0 <_printf_i+0x23c>)
 800d754:	2f6f      	cmp	r7, #111	; 0x6f
 800d756:	bf0c      	ite	eq
 800d758:	2308      	moveq	r3, #8
 800d75a:	230a      	movne	r3, #10
 800d75c:	2100      	movs	r1, #0
 800d75e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d762:	6865      	ldr	r5, [r4, #4]
 800d764:	60a5      	str	r5, [r4, #8]
 800d766:	2d00      	cmp	r5, #0
 800d768:	bfa2      	ittt	ge
 800d76a:	6821      	ldrge	r1, [r4, #0]
 800d76c:	f021 0104 	bicge.w	r1, r1, #4
 800d770:	6021      	strge	r1, [r4, #0]
 800d772:	b90e      	cbnz	r6, 800d778 <_printf_i+0x114>
 800d774:	2d00      	cmp	r5, #0
 800d776:	d04b      	beq.n	800d810 <_printf_i+0x1ac>
 800d778:	4615      	mov	r5, r2
 800d77a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d77e:	fb03 6711 	mls	r7, r3, r1, r6
 800d782:	5dc7      	ldrb	r7, [r0, r7]
 800d784:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d788:	4637      	mov	r7, r6
 800d78a:	42bb      	cmp	r3, r7
 800d78c:	460e      	mov	r6, r1
 800d78e:	d9f4      	bls.n	800d77a <_printf_i+0x116>
 800d790:	2b08      	cmp	r3, #8
 800d792:	d10b      	bne.n	800d7ac <_printf_i+0x148>
 800d794:	6823      	ldr	r3, [r4, #0]
 800d796:	07de      	lsls	r6, r3, #31
 800d798:	d508      	bpl.n	800d7ac <_printf_i+0x148>
 800d79a:	6923      	ldr	r3, [r4, #16]
 800d79c:	6861      	ldr	r1, [r4, #4]
 800d79e:	4299      	cmp	r1, r3
 800d7a0:	bfde      	ittt	le
 800d7a2:	2330      	movle	r3, #48	; 0x30
 800d7a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d7a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d7ac:	1b52      	subs	r2, r2, r5
 800d7ae:	6122      	str	r2, [r4, #16]
 800d7b0:	f8cd a000 	str.w	sl, [sp]
 800d7b4:	464b      	mov	r3, r9
 800d7b6:	aa03      	add	r2, sp, #12
 800d7b8:	4621      	mov	r1, r4
 800d7ba:	4640      	mov	r0, r8
 800d7bc:	f7ff fee4 	bl	800d588 <_printf_common>
 800d7c0:	3001      	adds	r0, #1
 800d7c2:	d14a      	bne.n	800d85a <_printf_i+0x1f6>
 800d7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c8:	b004      	add	sp, #16
 800d7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	f043 0320 	orr.w	r3, r3, #32
 800d7d4:	6023      	str	r3, [r4, #0]
 800d7d6:	4833      	ldr	r0, [pc, #204]	; (800d8a4 <_printf_i+0x240>)
 800d7d8:	2778      	movs	r7, #120	; 0x78
 800d7da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d7de:	6823      	ldr	r3, [r4, #0]
 800d7e0:	6829      	ldr	r1, [r5, #0]
 800d7e2:	061f      	lsls	r7, r3, #24
 800d7e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800d7e8:	d402      	bmi.n	800d7f0 <_printf_i+0x18c>
 800d7ea:	065f      	lsls	r7, r3, #25
 800d7ec:	bf48      	it	mi
 800d7ee:	b2b6      	uxthmi	r6, r6
 800d7f0:	07df      	lsls	r7, r3, #31
 800d7f2:	bf48      	it	mi
 800d7f4:	f043 0320 	orrmi.w	r3, r3, #32
 800d7f8:	6029      	str	r1, [r5, #0]
 800d7fa:	bf48      	it	mi
 800d7fc:	6023      	strmi	r3, [r4, #0]
 800d7fe:	b91e      	cbnz	r6, 800d808 <_printf_i+0x1a4>
 800d800:	6823      	ldr	r3, [r4, #0]
 800d802:	f023 0320 	bic.w	r3, r3, #32
 800d806:	6023      	str	r3, [r4, #0]
 800d808:	2310      	movs	r3, #16
 800d80a:	e7a7      	b.n	800d75c <_printf_i+0xf8>
 800d80c:	4824      	ldr	r0, [pc, #144]	; (800d8a0 <_printf_i+0x23c>)
 800d80e:	e7e4      	b.n	800d7da <_printf_i+0x176>
 800d810:	4615      	mov	r5, r2
 800d812:	e7bd      	b.n	800d790 <_printf_i+0x12c>
 800d814:	682b      	ldr	r3, [r5, #0]
 800d816:	6826      	ldr	r6, [r4, #0]
 800d818:	6961      	ldr	r1, [r4, #20]
 800d81a:	1d18      	adds	r0, r3, #4
 800d81c:	6028      	str	r0, [r5, #0]
 800d81e:	0635      	lsls	r5, r6, #24
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	d501      	bpl.n	800d828 <_printf_i+0x1c4>
 800d824:	6019      	str	r1, [r3, #0]
 800d826:	e002      	b.n	800d82e <_printf_i+0x1ca>
 800d828:	0670      	lsls	r0, r6, #25
 800d82a:	d5fb      	bpl.n	800d824 <_printf_i+0x1c0>
 800d82c:	8019      	strh	r1, [r3, #0]
 800d82e:	2300      	movs	r3, #0
 800d830:	6123      	str	r3, [r4, #16]
 800d832:	4615      	mov	r5, r2
 800d834:	e7bc      	b.n	800d7b0 <_printf_i+0x14c>
 800d836:	682b      	ldr	r3, [r5, #0]
 800d838:	1d1a      	adds	r2, r3, #4
 800d83a:	602a      	str	r2, [r5, #0]
 800d83c:	681d      	ldr	r5, [r3, #0]
 800d83e:	6862      	ldr	r2, [r4, #4]
 800d840:	2100      	movs	r1, #0
 800d842:	4628      	mov	r0, r5
 800d844:	f7f2 fcc4 	bl	80001d0 <memchr>
 800d848:	b108      	cbz	r0, 800d84e <_printf_i+0x1ea>
 800d84a:	1b40      	subs	r0, r0, r5
 800d84c:	6060      	str	r0, [r4, #4]
 800d84e:	6863      	ldr	r3, [r4, #4]
 800d850:	6123      	str	r3, [r4, #16]
 800d852:	2300      	movs	r3, #0
 800d854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d858:	e7aa      	b.n	800d7b0 <_printf_i+0x14c>
 800d85a:	6923      	ldr	r3, [r4, #16]
 800d85c:	462a      	mov	r2, r5
 800d85e:	4649      	mov	r1, r9
 800d860:	4640      	mov	r0, r8
 800d862:	47d0      	blx	sl
 800d864:	3001      	adds	r0, #1
 800d866:	d0ad      	beq.n	800d7c4 <_printf_i+0x160>
 800d868:	6823      	ldr	r3, [r4, #0]
 800d86a:	079b      	lsls	r3, r3, #30
 800d86c:	d413      	bmi.n	800d896 <_printf_i+0x232>
 800d86e:	68e0      	ldr	r0, [r4, #12]
 800d870:	9b03      	ldr	r3, [sp, #12]
 800d872:	4298      	cmp	r0, r3
 800d874:	bfb8      	it	lt
 800d876:	4618      	movlt	r0, r3
 800d878:	e7a6      	b.n	800d7c8 <_printf_i+0x164>
 800d87a:	2301      	movs	r3, #1
 800d87c:	4632      	mov	r2, r6
 800d87e:	4649      	mov	r1, r9
 800d880:	4640      	mov	r0, r8
 800d882:	47d0      	blx	sl
 800d884:	3001      	adds	r0, #1
 800d886:	d09d      	beq.n	800d7c4 <_printf_i+0x160>
 800d888:	3501      	adds	r5, #1
 800d88a:	68e3      	ldr	r3, [r4, #12]
 800d88c:	9903      	ldr	r1, [sp, #12]
 800d88e:	1a5b      	subs	r3, r3, r1
 800d890:	42ab      	cmp	r3, r5
 800d892:	dcf2      	bgt.n	800d87a <_printf_i+0x216>
 800d894:	e7eb      	b.n	800d86e <_printf_i+0x20a>
 800d896:	2500      	movs	r5, #0
 800d898:	f104 0619 	add.w	r6, r4, #25
 800d89c:	e7f5      	b.n	800d88a <_printf_i+0x226>
 800d89e:	bf00      	nop
 800d8a0:	08013998 	.word	0x08013998
 800d8a4:	080139a9 	.word	0x080139a9

0800d8a8 <_scanf_float>:
 800d8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ac:	b087      	sub	sp, #28
 800d8ae:	4617      	mov	r7, r2
 800d8b0:	9303      	str	r3, [sp, #12]
 800d8b2:	688b      	ldr	r3, [r1, #8]
 800d8b4:	1e5a      	subs	r2, r3, #1
 800d8b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d8ba:	bf83      	ittte	hi
 800d8bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d8c0:	195b      	addhi	r3, r3, r5
 800d8c2:	9302      	strhi	r3, [sp, #8]
 800d8c4:	2300      	movls	r3, #0
 800d8c6:	bf86      	itte	hi
 800d8c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d8cc:	608b      	strhi	r3, [r1, #8]
 800d8ce:	9302      	strls	r3, [sp, #8]
 800d8d0:	680b      	ldr	r3, [r1, #0]
 800d8d2:	468b      	mov	fp, r1
 800d8d4:	2500      	movs	r5, #0
 800d8d6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d8da:	f84b 3b1c 	str.w	r3, [fp], #28
 800d8de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d8e2:	4680      	mov	r8, r0
 800d8e4:	460c      	mov	r4, r1
 800d8e6:	465e      	mov	r6, fp
 800d8e8:	46aa      	mov	sl, r5
 800d8ea:	46a9      	mov	r9, r5
 800d8ec:	9501      	str	r5, [sp, #4]
 800d8ee:	68a2      	ldr	r2, [r4, #8]
 800d8f0:	b152      	cbz	r2, 800d908 <_scanf_float+0x60>
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	2b4e      	cmp	r3, #78	; 0x4e
 800d8f8:	d864      	bhi.n	800d9c4 <_scanf_float+0x11c>
 800d8fa:	2b40      	cmp	r3, #64	; 0x40
 800d8fc:	d83c      	bhi.n	800d978 <_scanf_float+0xd0>
 800d8fe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d902:	b2c8      	uxtb	r0, r1
 800d904:	280e      	cmp	r0, #14
 800d906:	d93a      	bls.n	800d97e <_scanf_float+0xd6>
 800d908:	f1b9 0f00 	cmp.w	r9, #0
 800d90c:	d003      	beq.n	800d916 <_scanf_float+0x6e>
 800d90e:	6823      	ldr	r3, [r4, #0]
 800d910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d914:	6023      	str	r3, [r4, #0]
 800d916:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d91a:	f1ba 0f01 	cmp.w	sl, #1
 800d91e:	f200 8113 	bhi.w	800db48 <_scanf_float+0x2a0>
 800d922:	455e      	cmp	r6, fp
 800d924:	f200 8105 	bhi.w	800db32 <_scanf_float+0x28a>
 800d928:	2501      	movs	r5, #1
 800d92a:	4628      	mov	r0, r5
 800d92c:	b007      	add	sp, #28
 800d92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d932:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d936:	2a0d      	cmp	r2, #13
 800d938:	d8e6      	bhi.n	800d908 <_scanf_float+0x60>
 800d93a:	a101      	add	r1, pc, #4	; (adr r1, 800d940 <_scanf_float+0x98>)
 800d93c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d940:	0800da7f 	.word	0x0800da7f
 800d944:	0800d909 	.word	0x0800d909
 800d948:	0800d909 	.word	0x0800d909
 800d94c:	0800d909 	.word	0x0800d909
 800d950:	0800dadf 	.word	0x0800dadf
 800d954:	0800dab7 	.word	0x0800dab7
 800d958:	0800d909 	.word	0x0800d909
 800d95c:	0800d909 	.word	0x0800d909
 800d960:	0800da8d 	.word	0x0800da8d
 800d964:	0800d909 	.word	0x0800d909
 800d968:	0800d909 	.word	0x0800d909
 800d96c:	0800d909 	.word	0x0800d909
 800d970:	0800d909 	.word	0x0800d909
 800d974:	0800da45 	.word	0x0800da45
 800d978:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d97c:	e7db      	b.n	800d936 <_scanf_float+0x8e>
 800d97e:	290e      	cmp	r1, #14
 800d980:	d8c2      	bhi.n	800d908 <_scanf_float+0x60>
 800d982:	a001      	add	r0, pc, #4	; (adr r0, 800d988 <_scanf_float+0xe0>)
 800d984:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d988:	0800da37 	.word	0x0800da37
 800d98c:	0800d909 	.word	0x0800d909
 800d990:	0800da37 	.word	0x0800da37
 800d994:	0800dacb 	.word	0x0800dacb
 800d998:	0800d909 	.word	0x0800d909
 800d99c:	0800d9e5 	.word	0x0800d9e5
 800d9a0:	0800da21 	.word	0x0800da21
 800d9a4:	0800da21 	.word	0x0800da21
 800d9a8:	0800da21 	.word	0x0800da21
 800d9ac:	0800da21 	.word	0x0800da21
 800d9b0:	0800da21 	.word	0x0800da21
 800d9b4:	0800da21 	.word	0x0800da21
 800d9b8:	0800da21 	.word	0x0800da21
 800d9bc:	0800da21 	.word	0x0800da21
 800d9c0:	0800da21 	.word	0x0800da21
 800d9c4:	2b6e      	cmp	r3, #110	; 0x6e
 800d9c6:	d809      	bhi.n	800d9dc <_scanf_float+0x134>
 800d9c8:	2b60      	cmp	r3, #96	; 0x60
 800d9ca:	d8b2      	bhi.n	800d932 <_scanf_float+0x8a>
 800d9cc:	2b54      	cmp	r3, #84	; 0x54
 800d9ce:	d077      	beq.n	800dac0 <_scanf_float+0x218>
 800d9d0:	2b59      	cmp	r3, #89	; 0x59
 800d9d2:	d199      	bne.n	800d908 <_scanf_float+0x60>
 800d9d4:	2d07      	cmp	r5, #7
 800d9d6:	d197      	bne.n	800d908 <_scanf_float+0x60>
 800d9d8:	2508      	movs	r5, #8
 800d9da:	e029      	b.n	800da30 <_scanf_float+0x188>
 800d9dc:	2b74      	cmp	r3, #116	; 0x74
 800d9de:	d06f      	beq.n	800dac0 <_scanf_float+0x218>
 800d9e0:	2b79      	cmp	r3, #121	; 0x79
 800d9e2:	e7f6      	b.n	800d9d2 <_scanf_float+0x12a>
 800d9e4:	6821      	ldr	r1, [r4, #0]
 800d9e6:	05c8      	lsls	r0, r1, #23
 800d9e8:	d51a      	bpl.n	800da20 <_scanf_float+0x178>
 800d9ea:	9b02      	ldr	r3, [sp, #8]
 800d9ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d9f0:	6021      	str	r1, [r4, #0]
 800d9f2:	f109 0901 	add.w	r9, r9, #1
 800d9f6:	b11b      	cbz	r3, 800da00 <_scanf_float+0x158>
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	3201      	adds	r2, #1
 800d9fc:	9302      	str	r3, [sp, #8]
 800d9fe:	60a2      	str	r2, [r4, #8]
 800da00:	68a3      	ldr	r3, [r4, #8]
 800da02:	3b01      	subs	r3, #1
 800da04:	60a3      	str	r3, [r4, #8]
 800da06:	6923      	ldr	r3, [r4, #16]
 800da08:	3301      	adds	r3, #1
 800da0a:	6123      	str	r3, [r4, #16]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	3b01      	subs	r3, #1
 800da10:	2b00      	cmp	r3, #0
 800da12:	607b      	str	r3, [r7, #4]
 800da14:	f340 8084 	ble.w	800db20 <_scanf_float+0x278>
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	3301      	adds	r3, #1
 800da1c:	603b      	str	r3, [r7, #0]
 800da1e:	e766      	b.n	800d8ee <_scanf_float+0x46>
 800da20:	eb1a 0f05 	cmn.w	sl, r5
 800da24:	f47f af70 	bne.w	800d908 <_scanf_float+0x60>
 800da28:	6822      	ldr	r2, [r4, #0]
 800da2a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800da2e:	6022      	str	r2, [r4, #0]
 800da30:	f806 3b01 	strb.w	r3, [r6], #1
 800da34:	e7e4      	b.n	800da00 <_scanf_float+0x158>
 800da36:	6822      	ldr	r2, [r4, #0]
 800da38:	0610      	lsls	r0, r2, #24
 800da3a:	f57f af65 	bpl.w	800d908 <_scanf_float+0x60>
 800da3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800da42:	e7f4      	b.n	800da2e <_scanf_float+0x186>
 800da44:	f1ba 0f00 	cmp.w	sl, #0
 800da48:	d10e      	bne.n	800da68 <_scanf_float+0x1c0>
 800da4a:	f1b9 0f00 	cmp.w	r9, #0
 800da4e:	d10e      	bne.n	800da6e <_scanf_float+0x1c6>
 800da50:	6822      	ldr	r2, [r4, #0]
 800da52:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800da56:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800da5a:	d108      	bne.n	800da6e <_scanf_float+0x1c6>
 800da5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800da60:	6022      	str	r2, [r4, #0]
 800da62:	f04f 0a01 	mov.w	sl, #1
 800da66:	e7e3      	b.n	800da30 <_scanf_float+0x188>
 800da68:	f1ba 0f02 	cmp.w	sl, #2
 800da6c:	d055      	beq.n	800db1a <_scanf_float+0x272>
 800da6e:	2d01      	cmp	r5, #1
 800da70:	d002      	beq.n	800da78 <_scanf_float+0x1d0>
 800da72:	2d04      	cmp	r5, #4
 800da74:	f47f af48 	bne.w	800d908 <_scanf_float+0x60>
 800da78:	3501      	adds	r5, #1
 800da7a:	b2ed      	uxtb	r5, r5
 800da7c:	e7d8      	b.n	800da30 <_scanf_float+0x188>
 800da7e:	f1ba 0f01 	cmp.w	sl, #1
 800da82:	f47f af41 	bne.w	800d908 <_scanf_float+0x60>
 800da86:	f04f 0a02 	mov.w	sl, #2
 800da8a:	e7d1      	b.n	800da30 <_scanf_float+0x188>
 800da8c:	b97d      	cbnz	r5, 800daae <_scanf_float+0x206>
 800da8e:	f1b9 0f00 	cmp.w	r9, #0
 800da92:	f47f af3c 	bne.w	800d90e <_scanf_float+0x66>
 800da96:	6822      	ldr	r2, [r4, #0]
 800da98:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800da9c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800daa0:	f47f af39 	bne.w	800d916 <_scanf_float+0x6e>
 800daa4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800daa8:	6022      	str	r2, [r4, #0]
 800daaa:	2501      	movs	r5, #1
 800daac:	e7c0      	b.n	800da30 <_scanf_float+0x188>
 800daae:	2d03      	cmp	r5, #3
 800dab0:	d0e2      	beq.n	800da78 <_scanf_float+0x1d0>
 800dab2:	2d05      	cmp	r5, #5
 800dab4:	e7de      	b.n	800da74 <_scanf_float+0x1cc>
 800dab6:	2d02      	cmp	r5, #2
 800dab8:	f47f af26 	bne.w	800d908 <_scanf_float+0x60>
 800dabc:	2503      	movs	r5, #3
 800dabe:	e7b7      	b.n	800da30 <_scanf_float+0x188>
 800dac0:	2d06      	cmp	r5, #6
 800dac2:	f47f af21 	bne.w	800d908 <_scanf_float+0x60>
 800dac6:	2507      	movs	r5, #7
 800dac8:	e7b2      	b.n	800da30 <_scanf_float+0x188>
 800daca:	6822      	ldr	r2, [r4, #0]
 800dacc:	0591      	lsls	r1, r2, #22
 800dace:	f57f af1b 	bpl.w	800d908 <_scanf_float+0x60>
 800dad2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800dad6:	6022      	str	r2, [r4, #0]
 800dad8:	f8cd 9004 	str.w	r9, [sp, #4]
 800dadc:	e7a8      	b.n	800da30 <_scanf_float+0x188>
 800dade:	6822      	ldr	r2, [r4, #0]
 800dae0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800dae4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800dae8:	d006      	beq.n	800daf8 <_scanf_float+0x250>
 800daea:	0550      	lsls	r0, r2, #21
 800daec:	f57f af0c 	bpl.w	800d908 <_scanf_float+0x60>
 800daf0:	f1b9 0f00 	cmp.w	r9, #0
 800daf4:	f43f af0f 	beq.w	800d916 <_scanf_float+0x6e>
 800daf8:	0591      	lsls	r1, r2, #22
 800dafa:	bf58      	it	pl
 800dafc:	9901      	ldrpl	r1, [sp, #4]
 800dafe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800db02:	bf58      	it	pl
 800db04:	eba9 0101 	subpl.w	r1, r9, r1
 800db08:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800db0c:	bf58      	it	pl
 800db0e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800db12:	6022      	str	r2, [r4, #0]
 800db14:	f04f 0900 	mov.w	r9, #0
 800db18:	e78a      	b.n	800da30 <_scanf_float+0x188>
 800db1a:	f04f 0a03 	mov.w	sl, #3
 800db1e:	e787      	b.n	800da30 <_scanf_float+0x188>
 800db20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800db24:	4639      	mov	r1, r7
 800db26:	4640      	mov	r0, r8
 800db28:	4798      	blx	r3
 800db2a:	2800      	cmp	r0, #0
 800db2c:	f43f aedf 	beq.w	800d8ee <_scanf_float+0x46>
 800db30:	e6ea      	b.n	800d908 <_scanf_float+0x60>
 800db32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800db3a:	463a      	mov	r2, r7
 800db3c:	4640      	mov	r0, r8
 800db3e:	4798      	blx	r3
 800db40:	6923      	ldr	r3, [r4, #16]
 800db42:	3b01      	subs	r3, #1
 800db44:	6123      	str	r3, [r4, #16]
 800db46:	e6ec      	b.n	800d922 <_scanf_float+0x7a>
 800db48:	1e6b      	subs	r3, r5, #1
 800db4a:	2b06      	cmp	r3, #6
 800db4c:	d825      	bhi.n	800db9a <_scanf_float+0x2f2>
 800db4e:	2d02      	cmp	r5, #2
 800db50:	d836      	bhi.n	800dbc0 <_scanf_float+0x318>
 800db52:	455e      	cmp	r6, fp
 800db54:	f67f aee8 	bls.w	800d928 <_scanf_float+0x80>
 800db58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db5c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800db60:	463a      	mov	r2, r7
 800db62:	4640      	mov	r0, r8
 800db64:	4798      	blx	r3
 800db66:	6923      	ldr	r3, [r4, #16]
 800db68:	3b01      	subs	r3, #1
 800db6a:	6123      	str	r3, [r4, #16]
 800db6c:	e7f1      	b.n	800db52 <_scanf_float+0x2aa>
 800db6e:	9802      	ldr	r0, [sp, #8]
 800db70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db74:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800db78:	9002      	str	r0, [sp, #8]
 800db7a:	463a      	mov	r2, r7
 800db7c:	4640      	mov	r0, r8
 800db7e:	4798      	blx	r3
 800db80:	6923      	ldr	r3, [r4, #16]
 800db82:	3b01      	subs	r3, #1
 800db84:	6123      	str	r3, [r4, #16]
 800db86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db8a:	fa5f fa8a 	uxtb.w	sl, sl
 800db8e:	f1ba 0f02 	cmp.w	sl, #2
 800db92:	d1ec      	bne.n	800db6e <_scanf_float+0x2c6>
 800db94:	3d03      	subs	r5, #3
 800db96:	b2ed      	uxtb	r5, r5
 800db98:	1b76      	subs	r6, r6, r5
 800db9a:	6823      	ldr	r3, [r4, #0]
 800db9c:	05da      	lsls	r2, r3, #23
 800db9e:	d52f      	bpl.n	800dc00 <_scanf_float+0x358>
 800dba0:	055b      	lsls	r3, r3, #21
 800dba2:	d510      	bpl.n	800dbc6 <_scanf_float+0x31e>
 800dba4:	455e      	cmp	r6, fp
 800dba6:	f67f aebf 	bls.w	800d928 <_scanf_float+0x80>
 800dbaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dbae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dbb2:	463a      	mov	r2, r7
 800dbb4:	4640      	mov	r0, r8
 800dbb6:	4798      	blx	r3
 800dbb8:	6923      	ldr	r3, [r4, #16]
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	6123      	str	r3, [r4, #16]
 800dbbe:	e7f1      	b.n	800dba4 <_scanf_float+0x2fc>
 800dbc0:	46aa      	mov	sl, r5
 800dbc2:	9602      	str	r6, [sp, #8]
 800dbc4:	e7df      	b.n	800db86 <_scanf_float+0x2de>
 800dbc6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dbca:	6923      	ldr	r3, [r4, #16]
 800dbcc:	2965      	cmp	r1, #101	; 0x65
 800dbce:	f103 33ff 	add.w	r3, r3, #4294967295
 800dbd2:	f106 35ff 	add.w	r5, r6, #4294967295
 800dbd6:	6123      	str	r3, [r4, #16]
 800dbd8:	d00c      	beq.n	800dbf4 <_scanf_float+0x34c>
 800dbda:	2945      	cmp	r1, #69	; 0x45
 800dbdc:	d00a      	beq.n	800dbf4 <_scanf_float+0x34c>
 800dbde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dbe2:	463a      	mov	r2, r7
 800dbe4:	4640      	mov	r0, r8
 800dbe6:	4798      	blx	r3
 800dbe8:	6923      	ldr	r3, [r4, #16]
 800dbea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dbee:	3b01      	subs	r3, #1
 800dbf0:	1eb5      	subs	r5, r6, #2
 800dbf2:	6123      	str	r3, [r4, #16]
 800dbf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dbf8:	463a      	mov	r2, r7
 800dbfa:	4640      	mov	r0, r8
 800dbfc:	4798      	blx	r3
 800dbfe:	462e      	mov	r6, r5
 800dc00:	6825      	ldr	r5, [r4, #0]
 800dc02:	f015 0510 	ands.w	r5, r5, #16
 800dc06:	d158      	bne.n	800dcba <_scanf_float+0x412>
 800dc08:	7035      	strb	r5, [r6, #0]
 800dc0a:	6823      	ldr	r3, [r4, #0]
 800dc0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dc10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc14:	d11c      	bne.n	800dc50 <_scanf_float+0x3a8>
 800dc16:	9b01      	ldr	r3, [sp, #4]
 800dc18:	454b      	cmp	r3, r9
 800dc1a:	eba3 0209 	sub.w	r2, r3, r9
 800dc1e:	d124      	bne.n	800dc6a <_scanf_float+0x3c2>
 800dc20:	2200      	movs	r2, #0
 800dc22:	4659      	mov	r1, fp
 800dc24:	4640      	mov	r0, r8
 800dc26:	f002 fcdf 	bl	80105e8 <_strtod_r>
 800dc2a:	9b03      	ldr	r3, [sp, #12]
 800dc2c:	6821      	ldr	r1, [r4, #0]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f011 0f02 	tst.w	r1, #2
 800dc34:	ec57 6b10 	vmov	r6, r7, d0
 800dc38:	f103 0204 	add.w	r2, r3, #4
 800dc3c:	d020      	beq.n	800dc80 <_scanf_float+0x3d8>
 800dc3e:	9903      	ldr	r1, [sp, #12]
 800dc40:	600a      	str	r2, [r1, #0]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	e9c3 6700 	strd	r6, r7, [r3]
 800dc48:	68e3      	ldr	r3, [r4, #12]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	60e3      	str	r3, [r4, #12]
 800dc4e:	e66c      	b.n	800d92a <_scanf_float+0x82>
 800dc50:	9b04      	ldr	r3, [sp, #16]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d0e4      	beq.n	800dc20 <_scanf_float+0x378>
 800dc56:	9905      	ldr	r1, [sp, #20]
 800dc58:	230a      	movs	r3, #10
 800dc5a:	462a      	mov	r2, r5
 800dc5c:	3101      	adds	r1, #1
 800dc5e:	4640      	mov	r0, r8
 800dc60:	f002 fd4a 	bl	80106f8 <_strtol_r>
 800dc64:	9b04      	ldr	r3, [sp, #16]
 800dc66:	9e05      	ldr	r6, [sp, #20]
 800dc68:	1ac2      	subs	r2, r0, r3
 800dc6a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800dc6e:	429e      	cmp	r6, r3
 800dc70:	bf28      	it	cs
 800dc72:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800dc76:	4912      	ldr	r1, [pc, #72]	; (800dcc0 <_scanf_float+0x418>)
 800dc78:	4630      	mov	r0, r6
 800dc7a:	f000 f8e7 	bl	800de4c <siprintf>
 800dc7e:	e7cf      	b.n	800dc20 <_scanf_float+0x378>
 800dc80:	f011 0f04 	tst.w	r1, #4
 800dc84:	9903      	ldr	r1, [sp, #12]
 800dc86:	600a      	str	r2, [r1, #0]
 800dc88:	d1db      	bne.n	800dc42 <_scanf_float+0x39a>
 800dc8a:	f8d3 8000 	ldr.w	r8, [r3]
 800dc8e:	ee10 2a10 	vmov	r2, s0
 800dc92:	ee10 0a10 	vmov	r0, s0
 800dc96:	463b      	mov	r3, r7
 800dc98:	4639      	mov	r1, r7
 800dc9a:	f7f2 ff47 	bl	8000b2c <__aeabi_dcmpun>
 800dc9e:	b128      	cbz	r0, 800dcac <_scanf_float+0x404>
 800dca0:	4808      	ldr	r0, [pc, #32]	; (800dcc4 <_scanf_float+0x41c>)
 800dca2:	f000 fa67 	bl	800e174 <nanf>
 800dca6:	ed88 0a00 	vstr	s0, [r8]
 800dcaa:	e7cd      	b.n	800dc48 <_scanf_float+0x3a0>
 800dcac:	4630      	mov	r0, r6
 800dcae:	4639      	mov	r1, r7
 800dcb0:	f7f2 ff9a 	bl	8000be8 <__aeabi_d2f>
 800dcb4:	f8c8 0000 	str.w	r0, [r8]
 800dcb8:	e7c6      	b.n	800dc48 <_scanf_float+0x3a0>
 800dcba:	2500      	movs	r5, #0
 800dcbc:	e635      	b.n	800d92a <_scanf_float+0x82>
 800dcbe:	bf00      	nop
 800dcc0:	080139ba 	.word	0x080139ba
 800dcc4:	08013d68 	.word	0x08013d68

0800dcc8 <std>:
 800dcc8:	2300      	movs	r3, #0
 800dcca:	b510      	push	{r4, lr}
 800dccc:	4604      	mov	r4, r0
 800dcce:	e9c0 3300 	strd	r3, r3, [r0]
 800dcd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcd6:	6083      	str	r3, [r0, #8]
 800dcd8:	8181      	strh	r1, [r0, #12]
 800dcda:	6643      	str	r3, [r0, #100]	; 0x64
 800dcdc:	81c2      	strh	r2, [r0, #14]
 800dcde:	6183      	str	r3, [r0, #24]
 800dce0:	4619      	mov	r1, r3
 800dce2:	2208      	movs	r2, #8
 800dce4:	305c      	adds	r0, #92	; 0x5c
 800dce6:	f000 f942 	bl	800df6e <memset>
 800dcea:	4b0d      	ldr	r3, [pc, #52]	; (800dd20 <std+0x58>)
 800dcec:	6263      	str	r3, [r4, #36]	; 0x24
 800dcee:	4b0d      	ldr	r3, [pc, #52]	; (800dd24 <std+0x5c>)
 800dcf0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dcf2:	4b0d      	ldr	r3, [pc, #52]	; (800dd28 <std+0x60>)
 800dcf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dcf6:	4b0d      	ldr	r3, [pc, #52]	; (800dd2c <std+0x64>)
 800dcf8:	6323      	str	r3, [r4, #48]	; 0x30
 800dcfa:	4b0d      	ldr	r3, [pc, #52]	; (800dd30 <std+0x68>)
 800dcfc:	6224      	str	r4, [r4, #32]
 800dcfe:	429c      	cmp	r4, r3
 800dd00:	d006      	beq.n	800dd10 <std+0x48>
 800dd02:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800dd06:	4294      	cmp	r4, r2
 800dd08:	d002      	beq.n	800dd10 <std+0x48>
 800dd0a:	33d0      	adds	r3, #208	; 0xd0
 800dd0c:	429c      	cmp	r4, r3
 800dd0e:	d105      	bne.n	800dd1c <std+0x54>
 800dd10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dd14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd18:	f000 ba12 	b.w	800e140 <__retarget_lock_init_recursive>
 800dd1c:	bd10      	pop	{r4, pc}
 800dd1e:	bf00      	nop
 800dd20:	0800dee5 	.word	0x0800dee5
 800dd24:	0800df0b 	.word	0x0800df0b
 800dd28:	0800df43 	.word	0x0800df43
 800dd2c:	0800df67 	.word	0x0800df67
 800dd30:	20008ad0 	.word	0x20008ad0

0800dd34 <stdio_exit_handler>:
 800dd34:	4a02      	ldr	r2, [pc, #8]	; (800dd40 <stdio_exit_handler+0xc>)
 800dd36:	4903      	ldr	r1, [pc, #12]	; (800dd44 <stdio_exit_handler+0x10>)
 800dd38:	4803      	ldr	r0, [pc, #12]	; (800dd48 <stdio_exit_handler+0x14>)
 800dd3a:	f000 b869 	b.w	800de10 <_fwalk_sglue>
 800dd3e:	bf00      	nop
 800dd40:	200000d8 	.word	0x200000d8
 800dd44:	080110f9 	.word	0x080110f9
 800dd48:	200000e4 	.word	0x200000e4

0800dd4c <cleanup_stdio>:
 800dd4c:	6841      	ldr	r1, [r0, #4]
 800dd4e:	4b0c      	ldr	r3, [pc, #48]	; (800dd80 <cleanup_stdio+0x34>)
 800dd50:	4299      	cmp	r1, r3
 800dd52:	b510      	push	{r4, lr}
 800dd54:	4604      	mov	r4, r0
 800dd56:	d001      	beq.n	800dd5c <cleanup_stdio+0x10>
 800dd58:	f003 f9ce 	bl	80110f8 <_fflush_r>
 800dd5c:	68a1      	ldr	r1, [r4, #8]
 800dd5e:	4b09      	ldr	r3, [pc, #36]	; (800dd84 <cleanup_stdio+0x38>)
 800dd60:	4299      	cmp	r1, r3
 800dd62:	d002      	beq.n	800dd6a <cleanup_stdio+0x1e>
 800dd64:	4620      	mov	r0, r4
 800dd66:	f003 f9c7 	bl	80110f8 <_fflush_r>
 800dd6a:	68e1      	ldr	r1, [r4, #12]
 800dd6c:	4b06      	ldr	r3, [pc, #24]	; (800dd88 <cleanup_stdio+0x3c>)
 800dd6e:	4299      	cmp	r1, r3
 800dd70:	d004      	beq.n	800dd7c <cleanup_stdio+0x30>
 800dd72:	4620      	mov	r0, r4
 800dd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd78:	f003 b9be 	b.w	80110f8 <_fflush_r>
 800dd7c:	bd10      	pop	{r4, pc}
 800dd7e:	bf00      	nop
 800dd80:	20008ad0 	.word	0x20008ad0
 800dd84:	20008b38 	.word	0x20008b38
 800dd88:	20008ba0 	.word	0x20008ba0

0800dd8c <global_stdio_init.part.0>:
 800dd8c:	b510      	push	{r4, lr}
 800dd8e:	4b0b      	ldr	r3, [pc, #44]	; (800ddbc <global_stdio_init.part.0+0x30>)
 800dd90:	4c0b      	ldr	r4, [pc, #44]	; (800ddc0 <global_stdio_init.part.0+0x34>)
 800dd92:	4a0c      	ldr	r2, [pc, #48]	; (800ddc4 <global_stdio_init.part.0+0x38>)
 800dd94:	601a      	str	r2, [r3, #0]
 800dd96:	4620      	mov	r0, r4
 800dd98:	2200      	movs	r2, #0
 800dd9a:	2104      	movs	r1, #4
 800dd9c:	f7ff ff94 	bl	800dcc8 <std>
 800dda0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800dda4:	2201      	movs	r2, #1
 800dda6:	2109      	movs	r1, #9
 800dda8:	f7ff ff8e 	bl	800dcc8 <std>
 800ddac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ddb0:	2202      	movs	r2, #2
 800ddb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddb6:	2112      	movs	r1, #18
 800ddb8:	f7ff bf86 	b.w	800dcc8 <std>
 800ddbc:	20008c08 	.word	0x20008c08
 800ddc0:	20008ad0 	.word	0x20008ad0
 800ddc4:	0800dd35 	.word	0x0800dd35

0800ddc8 <__sfp_lock_acquire>:
 800ddc8:	4801      	ldr	r0, [pc, #4]	; (800ddd0 <__sfp_lock_acquire+0x8>)
 800ddca:	f000 b9ba 	b.w	800e142 <__retarget_lock_acquire_recursive>
 800ddce:	bf00      	nop
 800ddd0:	20008c11 	.word	0x20008c11

0800ddd4 <__sfp_lock_release>:
 800ddd4:	4801      	ldr	r0, [pc, #4]	; (800dddc <__sfp_lock_release+0x8>)
 800ddd6:	f000 b9b5 	b.w	800e144 <__retarget_lock_release_recursive>
 800ddda:	bf00      	nop
 800dddc:	20008c11 	.word	0x20008c11

0800dde0 <__sinit>:
 800dde0:	b510      	push	{r4, lr}
 800dde2:	4604      	mov	r4, r0
 800dde4:	f7ff fff0 	bl	800ddc8 <__sfp_lock_acquire>
 800dde8:	6a23      	ldr	r3, [r4, #32]
 800ddea:	b11b      	cbz	r3, 800ddf4 <__sinit+0x14>
 800ddec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddf0:	f7ff bff0 	b.w	800ddd4 <__sfp_lock_release>
 800ddf4:	4b04      	ldr	r3, [pc, #16]	; (800de08 <__sinit+0x28>)
 800ddf6:	6223      	str	r3, [r4, #32]
 800ddf8:	4b04      	ldr	r3, [pc, #16]	; (800de0c <__sinit+0x2c>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d1f5      	bne.n	800ddec <__sinit+0xc>
 800de00:	f7ff ffc4 	bl	800dd8c <global_stdio_init.part.0>
 800de04:	e7f2      	b.n	800ddec <__sinit+0xc>
 800de06:	bf00      	nop
 800de08:	0800dd4d 	.word	0x0800dd4d
 800de0c:	20008c08 	.word	0x20008c08

0800de10 <_fwalk_sglue>:
 800de10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de14:	4607      	mov	r7, r0
 800de16:	4688      	mov	r8, r1
 800de18:	4614      	mov	r4, r2
 800de1a:	2600      	movs	r6, #0
 800de1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de20:	f1b9 0901 	subs.w	r9, r9, #1
 800de24:	d505      	bpl.n	800de32 <_fwalk_sglue+0x22>
 800de26:	6824      	ldr	r4, [r4, #0]
 800de28:	2c00      	cmp	r4, #0
 800de2a:	d1f7      	bne.n	800de1c <_fwalk_sglue+0xc>
 800de2c:	4630      	mov	r0, r6
 800de2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de32:	89ab      	ldrh	r3, [r5, #12]
 800de34:	2b01      	cmp	r3, #1
 800de36:	d907      	bls.n	800de48 <_fwalk_sglue+0x38>
 800de38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de3c:	3301      	adds	r3, #1
 800de3e:	d003      	beq.n	800de48 <_fwalk_sglue+0x38>
 800de40:	4629      	mov	r1, r5
 800de42:	4638      	mov	r0, r7
 800de44:	47c0      	blx	r8
 800de46:	4306      	orrs	r6, r0
 800de48:	3568      	adds	r5, #104	; 0x68
 800de4a:	e7e9      	b.n	800de20 <_fwalk_sglue+0x10>

0800de4c <siprintf>:
 800de4c:	b40e      	push	{r1, r2, r3}
 800de4e:	b500      	push	{lr}
 800de50:	b09c      	sub	sp, #112	; 0x70
 800de52:	ab1d      	add	r3, sp, #116	; 0x74
 800de54:	9002      	str	r0, [sp, #8]
 800de56:	9006      	str	r0, [sp, #24]
 800de58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800de5c:	4809      	ldr	r0, [pc, #36]	; (800de84 <siprintf+0x38>)
 800de5e:	9107      	str	r1, [sp, #28]
 800de60:	9104      	str	r1, [sp, #16]
 800de62:	4909      	ldr	r1, [pc, #36]	; (800de88 <siprintf+0x3c>)
 800de64:	f853 2b04 	ldr.w	r2, [r3], #4
 800de68:	9105      	str	r1, [sp, #20]
 800de6a:	6800      	ldr	r0, [r0, #0]
 800de6c:	9301      	str	r3, [sp, #4]
 800de6e:	a902      	add	r1, sp, #8
 800de70:	f002 fc9e 	bl	80107b0 <_svfiprintf_r>
 800de74:	9b02      	ldr	r3, [sp, #8]
 800de76:	2200      	movs	r2, #0
 800de78:	701a      	strb	r2, [r3, #0]
 800de7a:	b01c      	add	sp, #112	; 0x70
 800de7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de80:	b003      	add	sp, #12
 800de82:	4770      	bx	lr
 800de84:	20000130 	.word	0x20000130
 800de88:	ffff0208 	.word	0xffff0208

0800de8c <siscanf>:
 800de8c:	b40e      	push	{r1, r2, r3}
 800de8e:	b510      	push	{r4, lr}
 800de90:	b09f      	sub	sp, #124	; 0x7c
 800de92:	ac21      	add	r4, sp, #132	; 0x84
 800de94:	f44f 7101 	mov.w	r1, #516	; 0x204
 800de98:	f854 2b04 	ldr.w	r2, [r4], #4
 800de9c:	9201      	str	r2, [sp, #4]
 800de9e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800dea2:	9004      	str	r0, [sp, #16]
 800dea4:	9008      	str	r0, [sp, #32]
 800dea6:	f7f2 f9e3 	bl	8000270 <strlen>
 800deaa:	4b0c      	ldr	r3, [pc, #48]	; (800dedc <siscanf+0x50>)
 800deac:	9005      	str	r0, [sp, #20]
 800deae:	9009      	str	r0, [sp, #36]	; 0x24
 800deb0:	930d      	str	r3, [sp, #52]	; 0x34
 800deb2:	480b      	ldr	r0, [pc, #44]	; (800dee0 <siscanf+0x54>)
 800deb4:	9a01      	ldr	r2, [sp, #4]
 800deb6:	6800      	ldr	r0, [r0, #0]
 800deb8:	9403      	str	r4, [sp, #12]
 800deba:	2300      	movs	r3, #0
 800debc:	9311      	str	r3, [sp, #68]	; 0x44
 800debe:	9316      	str	r3, [sp, #88]	; 0x58
 800dec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dec4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800dec8:	a904      	add	r1, sp, #16
 800deca:	4623      	mov	r3, r4
 800decc:	f002 fdc8 	bl	8010a60 <__ssvfiscanf_r>
 800ded0:	b01f      	add	sp, #124	; 0x7c
 800ded2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ded6:	b003      	add	sp, #12
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	0800df07 	.word	0x0800df07
 800dee0:	20000130 	.word	0x20000130

0800dee4 <__sread>:
 800dee4:	b510      	push	{r4, lr}
 800dee6:	460c      	mov	r4, r1
 800dee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deec:	f000 f8da 	bl	800e0a4 <_read_r>
 800def0:	2800      	cmp	r0, #0
 800def2:	bfab      	itete	ge
 800def4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800def6:	89a3      	ldrhlt	r3, [r4, #12]
 800def8:	181b      	addge	r3, r3, r0
 800defa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800defe:	bfac      	ite	ge
 800df00:	6563      	strge	r3, [r4, #84]	; 0x54
 800df02:	81a3      	strhlt	r3, [r4, #12]
 800df04:	bd10      	pop	{r4, pc}

0800df06 <__seofread>:
 800df06:	2000      	movs	r0, #0
 800df08:	4770      	bx	lr

0800df0a <__swrite>:
 800df0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df0e:	461f      	mov	r7, r3
 800df10:	898b      	ldrh	r3, [r1, #12]
 800df12:	05db      	lsls	r3, r3, #23
 800df14:	4605      	mov	r5, r0
 800df16:	460c      	mov	r4, r1
 800df18:	4616      	mov	r6, r2
 800df1a:	d505      	bpl.n	800df28 <__swrite+0x1e>
 800df1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df20:	2302      	movs	r3, #2
 800df22:	2200      	movs	r2, #0
 800df24:	f000 f8ac 	bl	800e080 <_lseek_r>
 800df28:	89a3      	ldrh	r3, [r4, #12]
 800df2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df32:	81a3      	strh	r3, [r4, #12]
 800df34:	4632      	mov	r2, r6
 800df36:	463b      	mov	r3, r7
 800df38:	4628      	mov	r0, r5
 800df3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df3e:	f000 b8c3 	b.w	800e0c8 <_write_r>

0800df42 <__sseek>:
 800df42:	b510      	push	{r4, lr}
 800df44:	460c      	mov	r4, r1
 800df46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df4a:	f000 f899 	bl	800e080 <_lseek_r>
 800df4e:	1c43      	adds	r3, r0, #1
 800df50:	89a3      	ldrh	r3, [r4, #12]
 800df52:	bf15      	itete	ne
 800df54:	6560      	strne	r0, [r4, #84]	; 0x54
 800df56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df5e:	81a3      	strheq	r3, [r4, #12]
 800df60:	bf18      	it	ne
 800df62:	81a3      	strhne	r3, [r4, #12]
 800df64:	bd10      	pop	{r4, pc}

0800df66 <__sclose>:
 800df66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df6a:	f000 b823 	b.w	800dfb4 <_close_r>

0800df6e <memset>:
 800df6e:	4402      	add	r2, r0
 800df70:	4603      	mov	r3, r0
 800df72:	4293      	cmp	r3, r2
 800df74:	d100      	bne.n	800df78 <memset+0xa>
 800df76:	4770      	bx	lr
 800df78:	f803 1b01 	strb.w	r1, [r3], #1
 800df7c:	e7f9      	b.n	800df72 <memset+0x4>

0800df7e <strstr>:
 800df7e:	780a      	ldrb	r2, [r1, #0]
 800df80:	b570      	push	{r4, r5, r6, lr}
 800df82:	b96a      	cbnz	r2, 800dfa0 <strstr+0x22>
 800df84:	bd70      	pop	{r4, r5, r6, pc}
 800df86:	429a      	cmp	r2, r3
 800df88:	d109      	bne.n	800df9e <strstr+0x20>
 800df8a:	460c      	mov	r4, r1
 800df8c:	4605      	mov	r5, r0
 800df8e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800df92:	2b00      	cmp	r3, #0
 800df94:	d0f6      	beq.n	800df84 <strstr+0x6>
 800df96:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800df9a:	429e      	cmp	r6, r3
 800df9c:	d0f7      	beq.n	800df8e <strstr+0x10>
 800df9e:	3001      	adds	r0, #1
 800dfa0:	7803      	ldrb	r3, [r0, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1ef      	bne.n	800df86 <strstr+0x8>
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	e7ec      	b.n	800df84 <strstr+0x6>
	...

0800dfac <_localeconv_r>:
 800dfac:	4800      	ldr	r0, [pc, #0]	; (800dfb0 <_localeconv_r+0x4>)
 800dfae:	4770      	bx	lr
 800dfb0:	20000224 	.word	0x20000224

0800dfb4 <_close_r>:
 800dfb4:	b538      	push	{r3, r4, r5, lr}
 800dfb6:	4d06      	ldr	r5, [pc, #24]	; (800dfd0 <_close_r+0x1c>)
 800dfb8:	2300      	movs	r3, #0
 800dfba:	4604      	mov	r4, r0
 800dfbc:	4608      	mov	r0, r1
 800dfbe:	602b      	str	r3, [r5, #0]
 800dfc0:	f7f5 fb35 	bl	800362e <_close>
 800dfc4:	1c43      	adds	r3, r0, #1
 800dfc6:	d102      	bne.n	800dfce <_close_r+0x1a>
 800dfc8:	682b      	ldr	r3, [r5, #0]
 800dfca:	b103      	cbz	r3, 800dfce <_close_r+0x1a>
 800dfcc:	6023      	str	r3, [r4, #0]
 800dfce:	bd38      	pop	{r3, r4, r5, pc}
 800dfd0:	20008c0c 	.word	0x20008c0c

0800dfd4 <_reclaim_reent>:
 800dfd4:	4b29      	ldr	r3, [pc, #164]	; (800e07c <_reclaim_reent+0xa8>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4283      	cmp	r3, r0
 800dfda:	b570      	push	{r4, r5, r6, lr}
 800dfdc:	4604      	mov	r4, r0
 800dfde:	d04b      	beq.n	800e078 <_reclaim_reent+0xa4>
 800dfe0:	69c3      	ldr	r3, [r0, #28]
 800dfe2:	b143      	cbz	r3, 800dff6 <_reclaim_reent+0x22>
 800dfe4:	68db      	ldr	r3, [r3, #12]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d144      	bne.n	800e074 <_reclaim_reent+0xa0>
 800dfea:	69e3      	ldr	r3, [r4, #28]
 800dfec:	6819      	ldr	r1, [r3, #0]
 800dfee:	b111      	cbz	r1, 800dff6 <_reclaim_reent+0x22>
 800dff0:	4620      	mov	r0, r4
 800dff2:	f000 ff3f 	bl	800ee74 <_free_r>
 800dff6:	6961      	ldr	r1, [r4, #20]
 800dff8:	b111      	cbz	r1, 800e000 <_reclaim_reent+0x2c>
 800dffa:	4620      	mov	r0, r4
 800dffc:	f000 ff3a 	bl	800ee74 <_free_r>
 800e000:	69e1      	ldr	r1, [r4, #28]
 800e002:	b111      	cbz	r1, 800e00a <_reclaim_reent+0x36>
 800e004:	4620      	mov	r0, r4
 800e006:	f000 ff35 	bl	800ee74 <_free_r>
 800e00a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e00c:	b111      	cbz	r1, 800e014 <_reclaim_reent+0x40>
 800e00e:	4620      	mov	r0, r4
 800e010:	f000 ff30 	bl	800ee74 <_free_r>
 800e014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e016:	b111      	cbz	r1, 800e01e <_reclaim_reent+0x4a>
 800e018:	4620      	mov	r0, r4
 800e01a:	f000 ff2b 	bl	800ee74 <_free_r>
 800e01e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e020:	b111      	cbz	r1, 800e028 <_reclaim_reent+0x54>
 800e022:	4620      	mov	r0, r4
 800e024:	f000 ff26 	bl	800ee74 <_free_r>
 800e028:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e02a:	b111      	cbz	r1, 800e032 <_reclaim_reent+0x5e>
 800e02c:	4620      	mov	r0, r4
 800e02e:	f000 ff21 	bl	800ee74 <_free_r>
 800e032:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e034:	b111      	cbz	r1, 800e03c <_reclaim_reent+0x68>
 800e036:	4620      	mov	r0, r4
 800e038:	f000 ff1c 	bl	800ee74 <_free_r>
 800e03c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e03e:	b111      	cbz	r1, 800e046 <_reclaim_reent+0x72>
 800e040:	4620      	mov	r0, r4
 800e042:	f000 ff17 	bl	800ee74 <_free_r>
 800e046:	6a23      	ldr	r3, [r4, #32]
 800e048:	b1b3      	cbz	r3, 800e078 <_reclaim_reent+0xa4>
 800e04a:	4620      	mov	r0, r4
 800e04c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e050:	4718      	bx	r3
 800e052:	5949      	ldr	r1, [r1, r5]
 800e054:	b941      	cbnz	r1, 800e068 <_reclaim_reent+0x94>
 800e056:	3504      	adds	r5, #4
 800e058:	69e3      	ldr	r3, [r4, #28]
 800e05a:	2d80      	cmp	r5, #128	; 0x80
 800e05c:	68d9      	ldr	r1, [r3, #12]
 800e05e:	d1f8      	bne.n	800e052 <_reclaim_reent+0x7e>
 800e060:	4620      	mov	r0, r4
 800e062:	f000 ff07 	bl	800ee74 <_free_r>
 800e066:	e7c0      	b.n	800dfea <_reclaim_reent+0x16>
 800e068:	680e      	ldr	r6, [r1, #0]
 800e06a:	4620      	mov	r0, r4
 800e06c:	f000 ff02 	bl	800ee74 <_free_r>
 800e070:	4631      	mov	r1, r6
 800e072:	e7ef      	b.n	800e054 <_reclaim_reent+0x80>
 800e074:	2500      	movs	r5, #0
 800e076:	e7ef      	b.n	800e058 <_reclaim_reent+0x84>
 800e078:	bd70      	pop	{r4, r5, r6, pc}
 800e07a:	bf00      	nop
 800e07c:	20000130 	.word	0x20000130

0800e080 <_lseek_r>:
 800e080:	b538      	push	{r3, r4, r5, lr}
 800e082:	4d07      	ldr	r5, [pc, #28]	; (800e0a0 <_lseek_r+0x20>)
 800e084:	4604      	mov	r4, r0
 800e086:	4608      	mov	r0, r1
 800e088:	4611      	mov	r1, r2
 800e08a:	2200      	movs	r2, #0
 800e08c:	602a      	str	r2, [r5, #0]
 800e08e:	461a      	mov	r2, r3
 800e090:	f7f5 faf4 	bl	800367c <_lseek>
 800e094:	1c43      	adds	r3, r0, #1
 800e096:	d102      	bne.n	800e09e <_lseek_r+0x1e>
 800e098:	682b      	ldr	r3, [r5, #0]
 800e09a:	b103      	cbz	r3, 800e09e <_lseek_r+0x1e>
 800e09c:	6023      	str	r3, [r4, #0]
 800e09e:	bd38      	pop	{r3, r4, r5, pc}
 800e0a0:	20008c0c 	.word	0x20008c0c

0800e0a4 <_read_r>:
 800e0a4:	b538      	push	{r3, r4, r5, lr}
 800e0a6:	4d07      	ldr	r5, [pc, #28]	; (800e0c4 <_read_r+0x20>)
 800e0a8:	4604      	mov	r4, r0
 800e0aa:	4608      	mov	r0, r1
 800e0ac:	4611      	mov	r1, r2
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	602a      	str	r2, [r5, #0]
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	f7f5 fa82 	bl	80035bc <_read>
 800e0b8:	1c43      	adds	r3, r0, #1
 800e0ba:	d102      	bne.n	800e0c2 <_read_r+0x1e>
 800e0bc:	682b      	ldr	r3, [r5, #0]
 800e0be:	b103      	cbz	r3, 800e0c2 <_read_r+0x1e>
 800e0c0:	6023      	str	r3, [r4, #0]
 800e0c2:	bd38      	pop	{r3, r4, r5, pc}
 800e0c4:	20008c0c 	.word	0x20008c0c

0800e0c8 <_write_r>:
 800e0c8:	b538      	push	{r3, r4, r5, lr}
 800e0ca:	4d07      	ldr	r5, [pc, #28]	; (800e0e8 <_write_r+0x20>)
 800e0cc:	4604      	mov	r4, r0
 800e0ce:	4608      	mov	r0, r1
 800e0d0:	4611      	mov	r1, r2
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	602a      	str	r2, [r5, #0]
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	f7f5 fa8d 	bl	80035f6 <_write>
 800e0dc:	1c43      	adds	r3, r0, #1
 800e0de:	d102      	bne.n	800e0e6 <_write_r+0x1e>
 800e0e0:	682b      	ldr	r3, [r5, #0]
 800e0e2:	b103      	cbz	r3, 800e0e6 <_write_r+0x1e>
 800e0e4:	6023      	str	r3, [r4, #0]
 800e0e6:	bd38      	pop	{r3, r4, r5, pc}
 800e0e8:	20008c0c 	.word	0x20008c0c

0800e0ec <__errno>:
 800e0ec:	4b01      	ldr	r3, [pc, #4]	; (800e0f4 <__errno+0x8>)
 800e0ee:	6818      	ldr	r0, [r3, #0]
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop
 800e0f4:	20000130 	.word	0x20000130

0800e0f8 <__libc_init_array>:
 800e0f8:	b570      	push	{r4, r5, r6, lr}
 800e0fa:	4d0d      	ldr	r5, [pc, #52]	; (800e130 <__libc_init_array+0x38>)
 800e0fc:	4c0d      	ldr	r4, [pc, #52]	; (800e134 <__libc_init_array+0x3c>)
 800e0fe:	1b64      	subs	r4, r4, r5
 800e100:	10a4      	asrs	r4, r4, #2
 800e102:	2600      	movs	r6, #0
 800e104:	42a6      	cmp	r6, r4
 800e106:	d109      	bne.n	800e11c <__libc_init_array+0x24>
 800e108:	4d0b      	ldr	r5, [pc, #44]	; (800e138 <__libc_init_array+0x40>)
 800e10a:	4c0c      	ldr	r4, [pc, #48]	; (800e13c <__libc_init_array+0x44>)
 800e10c:	f005 fbb2 	bl	8013874 <_init>
 800e110:	1b64      	subs	r4, r4, r5
 800e112:	10a4      	asrs	r4, r4, #2
 800e114:	2600      	movs	r6, #0
 800e116:	42a6      	cmp	r6, r4
 800e118:	d105      	bne.n	800e126 <__libc_init_array+0x2e>
 800e11a:	bd70      	pop	{r4, r5, r6, pc}
 800e11c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e120:	4798      	blx	r3
 800e122:	3601      	adds	r6, #1
 800e124:	e7ee      	b.n	800e104 <__libc_init_array+0xc>
 800e126:	f855 3b04 	ldr.w	r3, [r5], #4
 800e12a:	4798      	blx	r3
 800e12c:	3601      	adds	r6, #1
 800e12e:	e7f2      	b.n	800e116 <__libc_init_array+0x1e>
 800e130:	08013e78 	.word	0x08013e78
 800e134:	08013e78 	.word	0x08013e78
 800e138:	08013e78 	.word	0x08013e78
 800e13c:	08013e7c 	.word	0x08013e7c

0800e140 <__retarget_lock_init_recursive>:
 800e140:	4770      	bx	lr

0800e142 <__retarget_lock_acquire_recursive>:
 800e142:	4770      	bx	lr

0800e144 <__retarget_lock_release_recursive>:
 800e144:	4770      	bx	lr

0800e146 <strcpy>:
 800e146:	4603      	mov	r3, r0
 800e148:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e14c:	f803 2b01 	strb.w	r2, [r3], #1
 800e150:	2a00      	cmp	r2, #0
 800e152:	d1f9      	bne.n	800e148 <strcpy+0x2>
 800e154:	4770      	bx	lr

0800e156 <memcpy>:
 800e156:	440a      	add	r2, r1
 800e158:	4291      	cmp	r1, r2
 800e15a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e15e:	d100      	bne.n	800e162 <memcpy+0xc>
 800e160:	4770      	bx	lr
 800e162:	b510      	push	{r4, lr}
 800e164:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e168:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e16c:	4291      	cmp	r1, r2
 800e16e:	d1f9      	bne.n	800e164 <memcpy+0xe>
 800e170:	bd10      	pop	{r4, pc}
	...

0800e174 <nanf>:
 800e174:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e17c <nanf+0x8>
 800e178:	4770      	bx	lr
 800e17a:	bf00      	nop
 800e17c:	7fc00000 	.word	0x7fc00000

0800e180 <quorem>:
 800e180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e184:	6903      	ldr	r3, [r0, #16]
 800e186:	690c      	ldr	r4, [r1, #16]
 800e188:	42a3      	cmp	r3, r4
 800e18a:	4607      	mov	r7, r0
 800e18c:	db7e      	blt.n	800e28c <quorem+0x10c>
 800e18e:	3c01      	subs	r4, #1
 800e190:	f101 0814 	add.w	r8, r1, #20
 800e194:	f100 0514 	add.w	r5, r0, #20
 800e198:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e19c:	9301      	str	r3, [sp, #4]
 800e19e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e1a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e1ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e1b2:	fbb2 f6f3 	udiv	r6, r2, r3
 800e1b6:	d331      	bcc.n	800e21c <quorem+0x9c>
 800e1b8:	f04f 0e00 	mov.w	lr, #0
 800e1bc:	4640      	mov	r0, r8
 800e1be:	46ac      	mov	ip, r5
 800e1c0:	46f2      	mov	sl, lr
 800e1c2:	f850 2b04 	ldr.w	r2, [r0], #4
 800e1c6:	b293      	uxth	r3, r2
 800e1c8:	fb06 e303 	mla	r3, r6, r3, lr
 800e1cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e1d0:	0c1a      	lsrs	r2, r3, #16
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	ebaa 0303 	sub.w	r3, sl, r3
 800e1d8:	f8dc a000 	ldr.w	sl, [ip]
 800e1dc:	fa13 f38a 	uxtah	r3, r3, sl
 800e1e0:	fb06 220e 	mla	r2, r6, lr, r2
 800e1e4:	9300      	str	r3, [sp, #0]
 800e1e6:	9b00      	ldr	r3, [sp, #0]
 800e1e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e1ec:	b292      	uxth	r2, r2
 800e1ee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e1f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e1f6:	f8bd 3000 	ldrh.w	r3, [sp]
 800e1fa:	4581      	cmp	r9, r0
 800e1fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e200:	f84c 3b04 	str.w	r3, [ip], #4
 800e204:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e208:	d2db      	bcs.n	800e1c2 <quorem+0x42>
 800e20a:	f855 300b 	ldr.w	r3, [r5, fp]
 800e20e:	b92b      	cbnz	r3, 800e21c <quorem+0x9c>
 800e210:	9b01      	ldr	r3, [sp, #4]
 800e212:	3b04      	subs	r3, #4
 800e214:	429d      	cmp	r5, r3
 800e216:	461a      	mov	r2, r3
 800e218:	d32c      	bcc.n	800e274 <quorem+0xf4>
 800e21a:	613c      	str	r4, [r7, #16]
 800e21c:	4638      	mov	r0, r7
 800e21e:	f001 f9ef 	bl	800f600 <__mcmp>
 800e222:	2800      	cmp	r0, #0
 800e224:	db22      	blt.n	800e26c <quorem+0xec>
 800e226:	3601      	adds	r6, #1
 800e228:	4629      	mov	r1, r5
 800e22a:	2000      	movs	r0, #0
 800e22c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e230:	f8d1 c000 	ldr.w	ip, [r1]
 800e234:	b293      	uxth	r3, r2
 800e236:	1ac3      	subs	r3, r0, r3
 800e238:	0c12      	lsrs	r2, r2, #16
 800e23a:	fa13 f38c 	uxtah	r3, r3, ip
 800e23e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e242:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e246:	b29b      	uxth	r3, r3
 800e248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e24c:	45c1      	cmp	r9, r8
 800e24e:	f841 3b04 	str.w	r3, [r1], #4
 800e252:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e256:	d2e9      	bcs.n	800e22c <quorem+0xac>
 800e258:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e25c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e260:	b922      	cbnz	r2, 800e26c <quorem+0xec>
 800e262:	3b04      	subs	r3, #4
 800e264:	429d      	cmp	r5, r3
 800e266:	461a      	mov	r2, r3
 800e268:	d30a      	bcc.n	800e280 <quorem+0x100>
 800e26a:	613c      	str	r4, [r7, #16]
 800e26c:	4630      	mov	r0, r6
 800e26e:	b003      	add	sp, #12
 800e270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e274:	6812      	ldr	r2, [r2, #0]
 800e276:	3b04      	subs	r3, #4
 800e278:	2a00      	cmp	r2, #0
 800e27a:	d1ce      	bne.n	800e21a <quorem+0x9a>
 800e27c:	3c01      	subs	r4, #1
 800e27e:	e7c9      	b.n	800e214 <quorem+0x94>
 800e280:	6812      	ldr	r2, [r2, #0]
 800e282:	3b04      	subs	r3, #4
 800e284:	2a00      	cmp	r2, #0
 800e286:	d1f0      	bne.n	800e26a <quorem+0xea>
 800e288:	3c01      	subs	r4, #1
 800e28a:	e7eb      	b.n	800e264 <quorem+0xe4>
 800e28c:	2000      	movs	r0, #0
 800e28e:	e7ee      	b.n	800e26e <quorem+0xee>

0800e290 <_dtoa_r>:
 800e290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e294:	ed2d 8b04 	vpush	{d8-d9}
 800e298:	69c5      	ldr	r5, [r0, #28]
 800e29a:	b093      	sub	sp, #76	; 0x4c
 800e29c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e2a0:	ec57 6b10 	vmov	r6, r7, d0
 800e2a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e2a8:	9107      	str	r1, [sp, #28]
 800e2aa:	4604      	mov	r4, r0
 800e2ac:	920a      	str	r2, [sp, #40]	; 0x28
 800e2ae:	930d      	str	r3, [sp, #52]	; 0x34
 800e2b0:	b975      	cbnz	r5, 800e2d0 <_dtoa_r+0x40>
 800e2b2:	2010      	movs	r0, #16
 800e2b4:	f000 fe2a 	bl	800ef0c <malloc>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	61e0      	str	r0, [r4, #28]
 800e2bc:	b920      	cbnz	r0, 800e2c8 <_dtoa_r+0x38>
 800e2be:	4bae      	ldr	r3, [pc, #696]	; (800e578 <_dtoa_r+0x2e8>)
 800e2c0:	21ef      	movs	r1, #239	; 0xef
 800e2c2:	48ae      	ldr	r0, [pc, #696]	; (800e57c <_dtoa_r+0x2ec>)
 800e2c4:	f002 fff8 	bl	80112b8 <__assert_func>
 800e2c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e2cc:	6005      	str	r5, [r0, #0]
 800e2ce:	60c5      	str	r5, [r0, #12]
 800e2d0:	69e3      	ldr	r3, [r4, #28]
 800e2d2:	6819      	ldr	r1, [r3, #0]
 800e2d4:	b151      	cbz	r1, 800e2ec <_dtoa_r+0x5c>
 800e2d6:	685a      	ldr	r2, [r3, #4]
 800e2d8:	604a      	str	r2, [r1, #4]
 800e2da:	2301      	movs	r3, #1
 800e2dc:	4093      	lsls	r3, r2
 800e2de:	608b      	str	r3, [r1, #8]
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	f000 ff07 	bl	800f0f4 <_Bfree>
 800e2e6:	69e3      	ldr	r3, [r4, #28]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	601a      	str	r2, [r3, #0]
 800e2ec:	1e3b      	subs	r3, r7, #0
 800e2ee:	bfbb      	ittet	lt
 800e2f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e2f4:	9303      	strlt	r3, [sp, #12]
 800e2f6:	2300      	movge	r3, #0
 800e2f8:	2201      	movlt	r2, #1
 800e2fa:	bfac      	ite	ge
 800e2fc:	f8c8 3000 	strge.w	r3, [r8]
 800e300:	f8c8 2000 	strlt.w	r2, [r8]
 800e304:	4b9e      	ldr	r3, [pc, #632]	; (800e580 <_dtoa_r+0x2f0>)
 800e306:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e30a:	ea33 0308 	bics.w	r3, r3, r8
 800e30e:	d11b      	bne.n	800e348 <_dtoa_r+0xb8>
 800e310:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e312:	f242 730f 	movw	r3, #9999	; 0x270f
 800e316:	6013      	str	r3, [r2, #0]
 800e318:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e31c:	4333      	orrs	r3, r6
 800e31e:	f000 8593 	beq.w	800ee48 <_dtoa_r+0xbb8>
 800e322:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e324:	b963      	cbnz	r3, 800e340 <_dtoa_r+0xb0>
 800e326:	4b97      	ldr	r3, [pc, #604]	; (800e584 <_dtoa_r+0x2f4>)
 800e328:	e027      	b.n	800e37a <_dtoa_r+0xea>
 800e32a:	4b97      	ldr	r3, [pc, #604]	; (800e588 <_dtoa_r+0x2f8>)
 800e32c:	9300      	str	r3, [sp, #0]
 800e32e:	3308      	adds	r3, #8
 800e330:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e332:	6013      	str	r3, [r2, #0]
 800e334:	9800      	ldr	r0, [sp, #0]
 800e336:	b013      	add	sp, #76	; 0x4c
 800e338:	ecbd 8b04 	vpop	{d8-d9}
 800e33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e340:	4b90      	ldr	r3, [pc, #576]	; (800e584 <_dtoa_r+0x2f4>)
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	3303      	adds	r3, #3
 800e346:	e7f3      	b.n	800e330 <_dtoa_r+0xa0>
 800e348:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e34c:	2200      	movs	r2, #0
 800e34e:	ec51 0b17 	vmov	r0, r1, d7
 800e352:	eeb0 8a47 	vmov.f32	s16, s14
 800e356:	eef0 8a67 	vmov.f32	s17, s15
 800e35a:	2300      	movs	r3, #0
 800e35c:	f7f2 fbb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800e360:	4681      	mov	r9, r0
 800e362:	b160      	cbz	r0, 800e37e <_dtoa_r+0xee>
 800e364:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e366:	2301      	movs	r3, #1
 800e368:	6013      	str	r3, [r2, #0]
 800e36a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	f000 8568 	beq.w	800ee42 <_dtoa_r+0xbb2>
 800e372:	4b86      	ldr	r3, [pc, #536]	; (800e58c <_dtoa_r+0x2fc>)
 800e374:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e376:	6013      	str	r3, [r2, #0]
 800e378:	3b01      	subs	r3, #1
 800e37a:	9300      	str	r3, [sp, #0]
 800e37c:	e7da      	b.n	800e334 <_dtoa_r+0xa4>
 800e37e:	aa10      	add	r2, sp, #64	; 0x40
 800e380:	a911      	add	r1, sp, #68	; 0x44
 800e382:	4620      	mov	r0, r4
 800e384:	eeb0 0a48 	vmov.f32	s0, s16
 800e388:	eef0 0a68 	vmov.f32	s1, s17
 800e38c:	f001 fa4e 	bl	800f82c <__d2b>
 800e390:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e394:	4682      	mov	sl, r0
 800e396:	2d00      	cmp	r5, #0
 800e398:	d07f      	beq.n	800e49a <_dtoa_r+0x20a>
 800e39a:	ee18 3a90 	vmov	r3, s17
 800e39e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e3a6:	ec51 0b18 	vmov	r0, r1, d8
 800e3aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e3ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e3b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	4b75      	ldr	r3, [pc, #468]	; (800e590 <_dtoa_r+0x300>)
 800e3bc:	f7f1 ff64 	bl	8000288 <__aeabi_dsub>
 800e3c0:	a367      	add	r3, pc, #412	; (adr r3, 800e560 <_dtoa_r+0x2d0>)
 800e3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c6:	f7f2 f917 	bl	80005f8 <__aeabi_dmul>
 800e3ca:	a367      	add	r3, pc, #412	; (adr r3, 800e568 <_dtoa_r+0x2d8>)
 800e3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d0:	f7f1 ff5c 	bl	800028c <__adddf3>
 800e3d4:	4606      	mov	r6, r0
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	460f      	mov	r7, r1
 800e3da:	f7f2 f8a3 	bl	8000524 <__aeabi_i2d>
 800e3de:	a364      	add	r3, pc, #400	; (adr r3, 800e570 <_dtoa_r+0x2e0>)
 800e3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e4:	f7f2 f908 	bl	80005f8 <__aeabi_dmul>
 800e3e8:	4602      	mov	r2, r0
 800e3ea:	460b      	mov	r3, r1
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	4639      	mov	r1, r7
 800e3f0:	f7f1 ff4c 	bl	800028c <__adddf3>
 800e3f4:	4606      	mov	r6, r0
 800e3f6:	460f      	mov	r7, r1
 800e3f8:	f7f2 fbae 	bl	8000b58 <__aeabi_d2iz>
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	4683      	mov	fp, r0
 800e400:	2300      	movs	r3, #0
 800e402:	4630      	mov	r0, r6
 800e404:	4639      	mov	r1, r7
 800e406:	f7f2 fb69 	bl	8000adc <__aeabi_dcmplt>
 800e40a:	b148      	cbz	r0, 800e420 <_dtoa_r+0x190>
 800e40c:	4658      	mov	r0, fp
 800e40e:	f7f2 f889 	bl	8000524 <__aeabi_i2d>
 800e412:	4632      	mov	r2, r6
 800e414:	463b      	mov	r3, r7
 800e416:	f7f2 fb57 	bl	8000ac8 <__aeabi_dcmpeq>
 800e41a:	b908      	cbnz	r0, 800e420 <_dtoa_r+0x190>
 800e41c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e420:	f1bb 0f16 	cmp.w	fp, #22
 800e424:	d857      	bhi.n	800e4d6 <_dtoa_r+0x246>
 800e426:	4b5b      	ldr	r3, [pc, #364]	; (800e594 <_dtoa_r+0x304>)
 800e428:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e430:	ec51 0b18 	vmov	r0, r1, d8
 800e434:	f7f2 fb52 	bl	8000adc <__aeabi_dcmplt>
 800e438:	2800      	cmp	r0, #0
 800e43a:	d04e      	beq.n	800e4da <_dtoa_r+0x24a>
 800e43c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e440:	2300      	movs	r3, #0
 800e442:	930c      	str	r3, [sp, #48]	; 0x30
 800e444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e446:	1b5b      	subs	r3, r3, r5
 800e448:	1e5a      	subs	r2, r3, #1
 800e44a:	bf45      	ittet	mi
 800e44c:	f1c3 0301 	rsbmi	r3, r3, #1
 800e450:	9305      	strmi	r3, [sp, #20]
 800e452:	2300      	movpl	r3, #0
 800e454:	2300      	movmi	r3, #0
 800e456:	9206      	str	r2, [sp, #24]
 800e458:	bf54      	ite	pl
 800e45a:	9305      	strpl	r3, [sp, #20]
 800e45c:	9306      	strmi	r3, [sp, #24]
 800e45e:	f1bb 0f00 	cmp.w	fp, #0
 800e462:	db3c      	blt.n	800e4de <_dtoa_r+0x24e>
 800e464:	9b06      	ldr	r3, [sp, #24]
 800e466:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e46a:	445b      	add	r3, fp
 800e46c:	9306      	str	r3, [sp, #24]
 800e46e:	2300      	movs	r3, #0
 800e470:	9308      	str	r3, [sp, #32]
 800e472:	9b07      	ldr	r3, [sp, #28]
 800e474:	2b09      	cmp	r3, #9
 800e476:	d868      	bhi.n	800e54a <_dtoa_r+0x2ba>
 800e478:	2b05      	cmp	r3, #5
 800e47a:	bfc4      	itt	gt
 800e47c:	3b04      	subgt	r3, #4
 800e47e:	9307      	strgt	r3, [sp, #28]
 800e480:	9b07      	ldr	r3, [sp, #28]
 800e482:	f1a3 0302 	sub.w	r3, r3, #2
 800e486:	bfcc      	ite	gt
 800e488:	2500      	movgt	r5, #0
 800e48a:	2501      	movle	r5, #1
 800e48c:	2b03      	cmp	r3, #3
 800e48e:	f200 8085 	bhi.w	800e59c <_dtoa_r+0x30c>
 800e492:	e8df f003 	tbb	[pc, r3]
 800e496:	3b2e      	.short	0x3b2e
 800e498:	5839      	.short	0x5839
 800e49a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e49e:	441d      	add	r5, r3
 800e4a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e4a4:	2b20      	cmp	r3, #32
 800e4a6:	bfc1      	itttt	gt
 800e4a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e4ac:	fa08 f803 	lslgt.w	r8, r8, r3
 800e4b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e4b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e4b8:	bfd6      	itet	le
 800e4ba:	f1c3 0320 	rsble	r3, r3, #32
 800e4be:	ea48 0003 	orrgt.w	r0, r8, r3
 800e4c2:	fa06 f003 	lslle.w	r0, r6, r3
 800e4c6:	f7f2 f81d 	bl	8000504 <__aeabi_ui2d>
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e4d0:	3d01      	subs	r5, #1
 800e4d2:	920e      	str	r2, [sp, #56]	; 0x38
 800e4d4:	e76f      	b.n	800e3b6 <_dtoa_r+0x126>
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	e7b3      	b.n	800e442 <_dtoa_r+0x1b2>
 800e4da:	900c      	str	r0, [sp, #48]	; 0x30
 800e4dc:	e7b2      	b.n	800e444 <_dtoa_r+0x1b4>
 800e4de:	9b05      	ldr	r3, [sp, #20]
 800e4e0:	eba3 030b 	sub.w	r3, r3, fp
 800e4e4:	9305      	str	r3, [sp, #20]
 800e4e6:	f1cb 0300 	rsb	r3, fp, #0
 800e4ea:	9308      	str	r3, [sp, #32]
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4f0:	e7bf      	b.n	800e472 <_dtoa_r+0x1e2>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800e4f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	dc52      	bgt.n	800e5a2 <_dtoa_r+0x312>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	9301      	str	r3, [sp, #4]
 800e500:	9304      	str	r3, [sp, #16]
 800e502:	461a      	mov	r2, r3
 800e504:	920a      	str	r2, [sp, #40]	; 0x28
 800e506:	e00b      	b.n	800e520 <_dtoa_r+0x290>
 800e508:	2301      	movs	r3, #1
 800e50a:	e7f3      	b.n	800e4f4 <_dtoa_r+0x264>
 800e50c:	2300      	movs	r3, #0
 800e50e:	9309      	str	r3, [sp, #36]	; 0x24
 800e510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e512:	445b      	add	r3, fp
 800e514:	9301      	str	r3, [sp, #4]
 800e516:	3301      	adds	r3, #1
 800e518:	2b01      	cmp	r3, #1
 800e51a:	9304      	str	r3, [sp, #16]
 800e51c:	bfb8      	it	lt
 800e51e:	2301      	movlt	r3, #1
 800e520:	69e0      	ldr	r0, [r4, #28]
 800e522:	2100      	movs	r1, #0
 800e524:	2204      	movs	r2, #4
 800e526:	f102 0614 	add.w	r6, r2, #20
 800e52a:	429e      	cmp	r6, r3
 800e52c:	d93d      	bls.n	800e5aa <_dtoa_r+0x31a>
 800e52e:	6041      	str	r1, [r0, #4]
 800e530:	4620      	mov	r0, r4
 800e532:	f000 fd9f 	bl	800f074 <_Balloc>
 800e536:	9000      	str	r0, [sp, #0]
 800e538:	2800      	cmp	r0, #0
 800e53a:	d139      	bne.n	800e5b0 <_dtoa_r+0x320>
 800e53c:	4b16      	ldr	r3, [pc, #88]	; (800e598 <_dtoa_r+0x308>)
 800e53e:	4602      	mov	r2, r0
 800e540:	f240 11af 	movw	r1, #431	; 0x1af
 800e544:	e6bd      	b.n	800e2c2 <_dtoa_r+0x32>
 800e546:	2301      	movs	r3, #1
 800e548:	e7e1      	b.n	800e50e <_dtoa_r+0x27e>
 800e54a:	2501      	movs	r5, #1
 800e54c:	2300      	movs	r3, #0
 800e54e:	9307      	str	r3, [sp, #28]
 800e550:	9509      	str	r5, [sp, #36]	; 0x24
 800e552:	f04f 33ff 	mov.w	r3, #4294967295
 800e556:	9301      	str	r3, [sp, #4]
 800e558:	9304      	str	r3, [sp, #16]
 800e55a:	2200      	movs	r2, #0
 800e55c:	2312      	movs	r3, #18
 800e55e:	e7d1      	b.n	800e504 <_dtoa_r+0x274>
 800e560:	636f4361 	.word	0x636f4361
 800e564:	3fd287a7 	.word	0x3fd287a7
 800e568:	8b60c8b3 	.word	0x8b60c8b3
 800e56c:	3fc68a28 	.word	0x3fc68a28
 800e570:	509f79fb 	.word	0x509f79fb
 800e574:	3fd34413 	.word	0x3fd34413
 800e578:	080139cc 	.word	0x080139cc
 800e57c:	080139e3 	.word	0x080139e3
 800e580:	7ff00000 	.word	0x7ff00000
 800e584:	080139c8 	.word	0x080139c8
 800e588:	080139bf 	.word	0x080139bf
 800e58c:	08013d21 	.word	0x08013d21
 800e590:	3ff80000 	.word	0x3ff80000
 800e594:	08013ad0 	.word	0x08013ad0
 800e598:	08013a3b 	.word	0x08013a3b
 800e59c:	2301      	movs	r3, #1
 800e59e:	9309      	str	r3, [sp, #36]	; 0x24
 800e5a0:	e7d7      	b.n	800e552 <_dtoa_r+0x2c2>
 800e5a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5a4:	9301      	str	r3, [sp, #4]
 800e5a6:	9304      	str	r3, [sp, #16]
 800e5a8:	e7ba      	b.n	800e520 <_dtoa_r+0x290>
 800e5aa:	3101      	adds	r1, #1
 800e5ac:	0052      	lsls	r2, r2, #1
 800e5ae:	e7ba      	b.n	800e526 <_dtoa_r+0x296>
 800e5b0:	69e3      	ldr	r3, [r4, #28]
 800e5b2:	9a00      	ldr	r2, [sp, #0]
 800e5b4:	601a      	str	r2, [r3, #0]
 800e5b6:	9b04      	ldr	r3, [sp, #16]
 800e5b8:	2b0e      	cmp	r3, #14
 800e5ba:	f200 80a8 	bhi.w	800e70e <_dtoa_r+0x47e>
 800e5be:	2d00      	cmp	r5, #0
 800e5c0:	f000 80a5 	beq.w	800e70e <_dtoa_r+0x47e>
 800e5c4:	f1bb 0f00 	cmp.w	fp, #0
 800e5c8:	dd38      	ble.n	800e63c <_dtoa_r+0x3ac>
 800e5ca:	4bc0      	ldr	r3, [pc, #768]	; (800e8cc <_dtoa_r+0x63c>)
 800e5cc:	f00b 020f 	and.w	r2, fp, #15
 800e5d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e5d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e5dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e5e0:	d019      	beq.n	800e616 <_dtoa_r+0x386>
 800e5e2:	4bbb      	ldr	r3, [pc, #748]	; (800e8d0 <_dtoa_r+0x640>)
 800e5e4:	ec51 0b18 	vmov	r0, r1, d8
 800e5e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e5ec:	f7f2 f92e 	bl	800084c <__aeabi_ddiv>
 800e5f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5f4:	f008 080f 	and.w	r8, r8, #15
 800e5f8:	2503      	movs	r5, #3
 800e5fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e8d0 <_dtoa_r+0x640>
 800e5fe:	f1b8 0f00 	cmp.w	r8, #0
 800e602:	d10a      	bne.n	800e61a <_dtoa_r+0x38a>
 800e604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e608:	4632      	mov	r2, r6
 800e60a:	463b      	mov	r3, r7
 800e60c:	f7f2 f91e 	bl	800084c <__aeabi_ddiv>
 800e610:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e614:	e02b      	b.n	800e66e <_dtoa_r+0x3de>
 800e616:	2502      	movs	r5, #2
 800e618:	e7ef      	b.n	800e5fa <_dtoa_r+0x36a>
 800e61a:	f018 0f01 	tst.w	r8, #1
 800e61e:	d008      	beq.n	800e632 <_dtoa_r+0x3a2>
 800e620:	4630      	mov	r0, r6
 800e622:	4639      	mov	r1, r7
 800e624:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e628:	f7f1 ffe6 	bl	80005f8 <__aeabi_dmul>
 800e62c:	3501      	adds	r5, #1
 800e62e:	4606      	mov	r6, r0
 800e630:	460f      	mov	r7, r1
 800e632:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e636:	f109 0908 	add.w	r9, r9, #8
 800e63a:	e7e0      	b.n	800e5fe <_dtoa_r+0x36e>
 800e63c:	f000 809f 	beq.w	800e77e <_dtoa_r+0x4ee>
 800e640:	f1cb 0600 	rsb	r6, fp, #0
 800e644:	4ba1      	ldr	r3, [pc, #644]	; (800e8cc <_dtoa_r+0x63c>)
 800e646:	4fa2      	ldr	r7, [pc, #648]	; (800e8d0 <_dtoa_r+0x640>)
 800e648:	f006 020f 	and.w	r2, r6, #15
 800e64c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e654:	ec51 0b18 	vmov	r0, r1, d8
 800e658:	f7f1 ffce 	bl	80005f8 <__aeabi_dmul>
 800e65c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e660:	1136      	asrs	r6, r6, #4
 800e662:	2300      	movs	r3, #0
 800e664:	2502      	movs	r5, #2
 800e666:	2e00      	cmp	r6, #0
 800e668:	d17e      	bne.n	800e768 <_dtoa_r+0x4d8>
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d1d0      	bne.n	800e610 <_dtoa_r+0x380>
 800e66e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e670:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e674:	2b00      	cmp	r3, #0
 800e676:	f000 8084 	beq.w	800e782 <_dtoa_r+0x4f2>
 800e67a:	4b96      	ldr	r3, [pc, #600]	; (800e8d4 <_dtoa_r+0x644>)
 800e67c:	2200      	movs	r2, #0
 800e67e:	4640      	mov	r0, r8
 800e680:	4649      	mov	r1, r9
 800e682:	f7f2 fa2b 	bl	8000adc <__aeabi_dcmplt>
 800e686:	2800      	cmp	r0, #0
 800e688:	d07b      	beq.n	800e782 <_dtoa_r+0x4f2>
 800e68a:	9b04      	ldr	r3, [sp, #16]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d078      	beq.n	800e782 <_dtoa_r+0x4f2>
 800e690:	9b01      	ldr	r3, [sp, #4]
 800e692:	2b00      	cmp	r3, #0
 800e694:	dd39      	ble.n	800e70a <_dtoa_r+0x47a>
 800e696:	4b90      	ldr	r3, [pc, #576]	; (800e8d8 <_dtoa_r+0x648>)
 800e698:	2200      	movs	r2, #0
 800e69a:	4640      	mov	r0, r8
 800e69c:	4649      	mov	r1, r9
 800e69e:	f7f1 ffab 	bl	80005f8 <__aeabi_dmul>
 800e6a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6a6:	9e01      	ldr	r6, [sp, #4]
 800e6a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e6ac:	3501      	adds	r5, #1
 800e6ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	f7f1 ff36 	bl	8000524 <__aeabi_i2d>
 800e6b8:	4642      	mov	r2, r8
 800e6ba:	464b      	mov	r3, r9
 800e6bc:	f7f1 ff9c 	bl	80005f8 <__aeabi_dmul>
 800e6c0:	4b86      	ldr	r3, [pc, #536]	; (800e8dc <_dtoa_r+0x64c>)
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	f7f1 fde2 	bl	800028c <__adddf3>
 800e6c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e6cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6d0:	9303      	str	r3, [sp, #12]
 800e6d2:	2e00      	cmp	r6, #0
 800e6d4:	d158      	bne.n	800e788 <_dtoa_r+0x4f8>
 800e6d6:	4b82      	ldr	r3, [pc, #520]	; (800e8e0 <_dtoa_r+0x650>)
 800e6d8:	2200      	movs	r2, #0
 800e6da:	4640      	mov	r0, r8
 800e6dc:	4649      	mov	r1, r9
 800e6de:	f7f1 fdd3 	bl	8000288 <__aeabi_dsub>
 800e6e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e6e6:	4680      	mov	r8, r0
 800e6e8:	4689      	mov	r9, r1
 800e6ea:	f7f2 fa15 	bl	8000b18 <__aeabi_dcmpgt>
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	f040 8296 	bne.w	800ec20 <_dtoa_r+0x990>
 800e6f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e6f8:	4640      	mov	r0, r8
 800e6fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6fe:	4649      	mov	r1, r9
 800e700:	f7f2 f9ec 	bl	8000adc <__aeabi_dcmplt>
 800e704:	2800      	cmp	r0, #0
 800e706:	f040 8289 	bne.w	800ec1c <_dtoa_r+0x98c>
 800e70a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e70e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e710:	2b00      	cmp	r3, #0
 800e712:	f2c0 814e 	blt.w	800e9b2 <_dtoa_r+0x722>
 800e716:	f1bb 0f0e 	cmp.w	fp, #14
 800e71a:	f300 814a 	bgt.w	800e9b2 <_dtoa_r+0x722>
 800e71e:	4b6b      	ldr	r3, [pc, #428]	; (800e8cc <_dtoa_r+0x63c>)
 800e720:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e724:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	f280 80dc 	bge.w	800e8e8 <_dtoa_r+0x658>
 800e730:	9b04      	ldr	r3, [sp, #16]
 800e732:	2b00      	cmp	r3, #0
 800e734:	f300 80d8 	bgt.w	800e8e8 <_dtoa_r+0x658>
 800e738:	f040 826f 	bne.w	800ec1a <_dtoa_r+0x98a>
 800e73c:	4b68      	ldr	r3, [pc, #416]	; (800e8e0 <_dtoa_r+0x650>)
 800e73e:	2200      	movs	r2, #0
 800e740:	4640      	mov	r0, r8
 800e742:	4649      	mov	r1, r9
 800e744:	f7f1 ff58 	bl	80005f8 <__aeabi_dmul>
 800e748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e74c:	f7f2 f9da 	bl	8000b04 <__aeabi_dcmpge>
 800e750:	9e04      	ldr	r6, [sp, #16]
 800e752:	4637      	mov	r7, r6
 800e754:	2800      	cmp	r0, #0
 800e756:	f040 8245 	bne.w	800ebe4 <_dtoa_r+0x954>
 800e75a:	9d00      	ldr	r5, [sp, #0]
 800e75c:	2331      	movs	r3, #49	; 0x31
 800e75e:	f805 3b01 	strb.w	r3, [r5], #1
 800e762:	f10b 0b01 	add.w	fp, fp, #1
 800e766:	e241      	b.n	800ebec <_dtoa_r+0x95c>
 800e768:	07f2      	lsls	r2, r6, #31
 800e76a:	d505      	bpl.n	800e778 <_dtoa_r+0x4e8>
 800e76c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e770:	f7f1 ff42 	bl	80005f8 <__aeabi_dmul>
 800e774:	3501      	adds	r5, #1
 800e776:	2301      	movs	r3, #1
 800e778:	1076      	asrs	r6, r6, #1
 800e77a:	3708      	adds	r7, #8
 800e77c:	e773      	b.n	800e666 <_dtoa_r+0x3d6>
 800e77e:	2502      	movs	r5, #2
 800e780:	e775      	b.n	800e66e <_dtoa_r+0x3de>
 800e782:	9e04      	ldr	r6, [sp, #16]
 800e784:	465f      	mov	r7, fp
 800e786:	e792      	b.n	800e6ae <_dtoa_r+0x41e>
 800e788:	9900      	ldr	r1, [sp, #0]
 800e78a:	4b50      	ldr	r3, [pc, #320]	; (800e8cc <_dtoa_r+0x63c>)
 800e78c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e790:	4431      	add	r1, r6
 800e792:	9102      	str	r1, [sp, #8]
 800e794:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e796:	eeb0 9a47 	vmov.f32	s18, s14
 800e79a:	eef0 9a67 	vmov.f32	s19, s15
 800e79e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e7a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e7a6:	2900      	cmp	r1, #0
 800e7a8:	d044      	beq.n	800e834 <_dtoa_r+0x5a4>
 800e7aa:	494e      	ldr	r1, [pc, #312]	; (800e8e4 <_dtoa_r+0x654>)
 800e7ac:	2000      	movs	r0, #0
 800e7ae:	f7f2 f84d 	bl	800084c <__aeabi_ddiv>
 800e7b2:	ec53 2b19 	vmov	r2, r3, d9
 800e7b6:	f7f1 fd67 	bl	8000288 <__aeabi_dsub>
 800e7ba:	9d00      	ldr	r5, [sp, #0]
 800e7bc:	ec41 0b19 	vmov	d9, r0, r1
 800e7c0:	4649      	mov	r1, r9
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	f7f2 f9c8 	bl	8000b58 <__aeabi_d2iz>
 800e7c8:	4606      	mov	r6, r0
 800e7ca:	f7f1 feab 	bl	8000524 <__aeabi_i2d>
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	4649      	mov	r1, r9
 800e7d6:	f7f1 fd57 	bl	8000288 <__aeabi_dsub>
 800e7da:	3630      	adds	r6, #48	; 0x30
 800e7dc:	f805 6b01 	strb.w	r6, [r5], #1
 800e7e0:	ec53 2b19 	vmov	r2, r3, d9
 800e7e4:	4680      	mov	r8, r0
 800e7e6:	4689      	mov	r9, r1
 800e7e8:	f7f2 f978 	bl	8000adc <__aeabi_dcmplt>
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	d164      	bne.n	800e8ba <_dtoa_r+0x62a>
 800e7f0:	4642      	mov	r2, r8
 800e7f2:	464b      	mov	r3, r9
 800e7f4:	4937      	ldr	r1, [pc, #220]	; (800e8d4 <_dtoa_r+0x644>)
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	f7f1 fd46 	bl	8000288 <__aeabi_dsub>
 800e7fc:	ec53 2b19 	vmov	r2, r3, d9
 800e800:	f7f2 f96c 	bl	8000adc <__aeabi_dcmplt>
 800e804:	2800      	cmp	r0, #0
 800e806:	f040 80b6 	bne.w	800e976 <_dtoa_r+0x6e6>
 800e80a:	9b02      	ldr	r3, [sp, #8]
 800e80c:	429d      	cmp	r5, r3
 800e80e:	f43f af7c 	beq.w	800e70a <_dtoa_r+0x47a>
 800e812:	4b31      	ldr	r3, [pc, #196]	; (800e8d8 <_dtoa_r+0x648>)
 800e814:	ec51 0b19 	vmov	r0, r1, d9
 800e818:	2200      	movs	r2, #0
 800e81a:	f7f1 feed 	bl	80005f8 <__aeabi_dmul>
 800e81e:	4b2e      	ldr	r3, [pc, #184]	; (800e8d8 <_dtoa_r+0x648>)
 800e820:	ec41 0b19 	vmov	d9, r0, r1
 800e824:	2200      	movs	r2, #0
 800e826:	4640      	mov	r0, r8
 800e828:	4649      	mov	r1, r9
 800e82a:	f7f1 fee5 	bl	80005f8 <__aeabi_dmul>
 800e82e:	4680      	mov	r8, r0
 800e830:	4689      	mov	r9, r1
 800e832:	e7c5      	b.n	800e7c0 <_dtoa_r+0x530>
 800e834:	ec51 0b17 	vmov	r0, r1, d7
 800e838:	f7f1 fede 	bl	80005f8 <__aeabi_dmul>
 800e83c:	9b02      	ldr	r3, [sp, #8]
 800e83e:	9d00      	ldr	r5, [sp, #0]
 800e840:	930f      	str	r3, [sp, #60]	; 0x3c
 800e842:	ec41 0b19 	vmov	d9, r0, r1
 800e846:	4649      	mov	r1, r9
 800e848:	4640      	mov	r0, r8
 800e84a:	f7f2 f985 	bl	8000b58 <__aeabi_d2iz>
 800e84e:	4606      	mov	r6, r0
 800e850:	f7f1 fe68 	bl	8000524 <__aeabi_i2d>
 800e854:	3630      	adds	r6, #48	; 0x30
 800e856:	4602      	mov	r2, r0
 800e858:	460b      	mov	r3, r1
 800e85a:	4640      	mov	r0, r8
 800e85c:	4649      	mov	r1, r9
 800e85e:	f7f1 fd13 	bl	8000288 <__aeabi_dsub>
 800e862:	f805 6b01 	strb.w	r6, [r5], #1
 800e866:	9b02      	ldr	r3, [sp, #8]
 800e868:	429d      	cmp	r5, r3
 800e86a:	4680      	mov	r8, r0
 800e86c:	4689      	mov	r9, r1
 800e86e:	f04f 0200 	mov.w	r2, #0
 800e872:	d124      	bne.n	800e8be <_dtoa_r+0x62e>
 800e874:	4b1b      	ldr	r3, [pc, #108]	; (800e8e4 <_dtoa_r+0x654>)
 800e876:	ec51 0b19 	vmov	r0, r1, d9
 800e87a:	f7f1 fd07 	bl	800028c <__adddf3>
 800e87e:	4602      	mov	r2, r0
 800e880:	460b      	mov	r3, r1
 800e882:	4640      	mov	r0, r8
 800e884:	4649      	mov	r1, r9
 800e886:	f7f2 f947 	bl	8000b18 <__aeabi_dcmpgt>
 800e88a:	2800      	cmp	r0, #0
 800e88c:	d173      	bne.n	800e976 <_dtoa_r+0x6e6>
 800e88e:	ec53 2b19 	vmov	r2, r3, d9
 800e892:	4914      	ldr	r1, [pc, #80]	; (800e8e4 <_dtoa_r+0x654>)
 800e894:	2000      	movs	r0, #0
 800e896:	f7f1 fcf7 	bl	8000288 <__aeabi_dsub>
 800e89a:	4602      	mov	r2, r0
 800e89c:	460b      	mov	r3, r1
 800e89e:	4640      	mov	r0, r8
 800e8a0:	4649      	mov	r1, r9
 800e8a2:	f7f2 f91b 	bl	8000adc <__aeabi_dcmplt>
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	f43f af2f 	beq.w	800e70a <_dtoa_r+0x47a>
 800e8ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e8ae:	1e6b      	subs	r3, r5, #1
 800e8b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e8b6:	2b30      	cmp	r3, #48	; 0x30
 800e8b8:	d0f8      	beq.n	800e8ac <_dtoa_r+0x61c>
 800e8ba:	46bb      	mov	fp, r7
 800e8bc:	e04a      	b.n	800e954 <_dtoa_r+0x6c4>
 800e8be:	4b06      	ldr	r3, [pc, #24]	; (800e8d8 <_dtoa_r+0x648>)
 800e8c0:	f7f1 fe9a 	bl	80005f8 <__aeabi_dmul>
 800e8c4:	4680      	mov	r8, r0
 800e8c6:	4689      	mov	r9, r1
 800e8c8:	e7bd      	b.n	800e846 <_dtoa_r+0x5b6>
 800e8ca:	bf00      	nop
 800e8cc:	08013ad0 	.word	0x08013ad0
 800e8d0:	08013aa8 	.word	0x08013aa8
 800e8d4:	3ff00000 	.word	0x3ff00000
 800e8d8:	40240000 	.word	0x40240000
 800e8dc:	401c0000 	.word	0x401c0000
 800e8e0:	40140000 	.word	0x40140000
 800e8e4:	3fe00000 	.word	0x3fe00000
 800e8e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e8ec:	9d00      	ldr	r5, [sp, #0]
 800e8ee:	4642      	mov	r2, r8
 800e8f0:	464b      	mov	r3, r9
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	4639      	mov	r1, r7
 800e8f6:	f7f1 ffa9 	bl	800084c <__aeabi_ddiv>
 800e8fa:	f7f2 f92d 	bl	8000b58 <__aeabi_d2iz>
 800e8fe:	9001      	str	r0, [sp, #4]
 800e900:	f7f1 fe10 	bl	8000524 <__aeabi_i2d>
 800e904:	4642      	mov	r2, r8
 800e906:	464b      	mov	r3, r9
 800e908:	f7f1 fe76 	bl	80005f8 <__aeabi_dmul>
 800e90c:	4602      	mov	r2, r0
 800e90e:	460b      	mov	r3, r1
 800e910:	4630      	mov	r0, r6
 800e912:	4639      	mov	r1, r7
 800e914:	f7f1 fcb8 	bl	8000288 <__aeabi_dsub>
 800e918:	9e01      	ldr	r6, [sp, #4]
 800e91a:	9f04      	ldr	r7, [sp, #16]
 800e91c:	3630      	adds	r6, #48	; 0x30
 800e91e:	f805 6b01 	strb.w	r6, [r5], #1
 800e922:	9e00      	ldr	r6, [sp, #0]
 800e924:	1bae      	subs	r6, r5, r6
 800e926:	42b7      	cmp	r7, r6
 800e928:	4602      	mov	r2, r0
 800e92a:	460b      	mov	r3, r1
 800e92c:	d134      	bne.n	800e998 <_dtoa_r+0x708>
 800e92e:	f7f1 fcad 	bl	800028c <__adddf3>
 800e932:	4642      	mov	r2, r8
 800e934:	464b      	mov	r3, r9
 800e936:	4606      	mov	r6, r0
 800e938:	460f      	mov	r7, r1
 800e93a:	f7f2 f8ed 	bl	8000b18 <__aeabi_dcmpgt>
 800e93e:	b9c8      	cbnz	r0, 800e974 <_dtoa_r+0x6e4>
 800e940:	4642      	mov	r2, r8
 800e942:	464b      	mov	r3, r9
 800e944:	4630      	mov	r0, r6
 800e946:	4639      	mov	r1, r7
 800e948:	f7f2 f8be 	bl	8000ac8 <__aeabi_dcmpeq>
 800e94c:	b110      	cbz	r0, 800e954 <_dtoa_r+0x6c4>
 800e94e:	9b01      	ldr	r3, [sp, #4]
 800e950:	07db      	lsls	r3, r3, #31
 800e952:	d40f      	bmi.n	800e974 <_dtoa_r+0x6e4>
 800e954:	4651      	mov	r1, sl
 800e956:	4620      	mov	r0, r4
 800e958:	f000 fbcc 	bl	800f0f4 <_Bfree>
 800e95c:	2300      	movs	r3, #0
 800e95e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e960:	702b      	strb	r3, [r5, #0]
 800e962:	f10b 0301 	add.w	r3, fp, #1
 800e966:	6013      	str	r3, [r2, #0]
 800e968:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	f43f ace2 	beq.w	800e334 <_dtoa_r+0xa4>
 800e970:	601d      	str	r5, [r3, #0]
 800e972:	e4df      	b.n	800e334 <_dtoa_r+0xa4>
 800e974:	465f      	mov	r7, fp
 800e976:	462b      	mov	r3, r5
 800e978:	461d      	mov	r5, r3
 800e97a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e97e:	2a39      	cmp	r2, #57	; 0x39
 800e980:	d106      	bne.n	800e990 <_dtoa_r+0x700>
 800e982:	9a00      	ldr	r2, [sp, #0]
 800e984:	429a      	cmp	r2, r3
 800e986:	d1f7      	bne.n	800e978 <_dtoa_r+0x6e8>
 800e988:	9900      	ldr	r1, [sp, #0]
 800e98a:	2230      	movs	r2, #48	; 0x30
 800e98c:	3701      	adds	r7, #1
 800e98e:	700a      	strb	r2, [r1, #0]
 800e990:	781a      	ldrb	r2, [r3, #0]
 800e992:	3201      	adds	r2, #1
 800e994:	701a      	strb	r2, [r3, #0]
 800e996:	e790      	b.n	800e8ba <_dtoa_r+0x62a>
 800e998:	4ba3      	ldr	r3, [pc, #652]	; (800ec28 <_dtoa_r+0x998>)
 800e99a:	2200      	movs	r2, #0
 800e99c:	f7f1 fe2c 	bl	80005f8 <__aeabi_dmul>
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	4606      	mov	r6, r0
 800e9a6:	460f      	mov	r7, r1
 800e9a8:	f7f2 f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	d09e      	beq.n	800e8ee <_dtoa_r+0x65e>
 800e9b0:	e7d0      	b.n	800e954 <_dtoa_r+0x6c4>
 800e9b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9b4:	2a00      	cmp	r2, #0
 800e9b6:	f000 80ca 	beq.w	800eb4e <_dtoa_r+0x8be>
 800e9ba:	9a07      	ldr	r2, [sp, #28]
 800e9bc:	2a01      	cmp	r2, #1
 800e9be:	f300 80ad 	bgt.w	800eb1c <_dtoa_r+0x88c>
 800e9c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9c4:	2a00      	cmp	r2, #0
 800e9c6:	f000 80a5 	beq.w	800eb14 <_dtoa_r+0x884>
 800e9ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e9ce:	9e08      	ldr	r6, [sp, #32]
 800e9d0:	9d05      	ldr	r5, [sp, #20]
 800e9d2:	9a05      	ldr	r2, [sp, #20]
 800e9d4:	441a      	add	r2, r3
 800e9d6:	9205      	str	r2, [sp, #20]
 800e9d8:	9a06      	ldr	r2, [sp, #24]
 800e9da:	2101      	movs	r1, #1
 800e9dc:	441a      	add	r2, r3
 800e9de:	4620      	mov	r0, r4
 800e9e0:	9206      	str	r2, [sp, #24]
 800e9e2:	f000 fc87 	bl	800f2f4 <__i2b>
 800e9e6:	4607      	mov	r7, r0
 800e9e8:	b165      	cbz	r5, 800ea04 <_dtoa_r+0x774>
 800e9ea:	9b06      	ldr	r3, [sp, #24]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	dd09      	ble.n	800ea04 <_dtoa_r+0x774>
 800e9f0:	42ab      	cmp	r3, r5
 800e9f2:	9a05      	ldr	r2, [sp, #20]
 800e9f4:	bfa8      	it	ge
 800e9f6:	462b      	movge	r3, r5
 800e9f8:	1ad2      	subs	r2, r2, r3
 800e9fa:	9205      	str	r2, [sp, #20]
 800e9fc:	9a06      	ldr	r2, [sp, #24]
 800e9fe:	1aed      	subs	r5, r5, r3
 800ea00:	1ad3      	subs	r3, r2, r3
 800ea02:	9306      	str	r3, [sp, #24]
 800ea04:	9b08      	ldr	r3, [sp, #32]
 800ea06:	b1f3      	cbz	r3, 800ea46 <_dtoa_r+0x7b6>
 800ea08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	f000 80a3 	beq.w	800eb56 <_dtoa_r+0x8c6>
 800ea10:	2e00      	cmp	r6, #0
 800ea12:	dd10      	ble.n	800ea36 <_dtoa_r+0x7a6>
 800ea14:	4639      	mov	r1, r7
 800ea16:	4632      	mov	r2, r6
 800ea18:	4620      	mov	r0, r4
 800ea1a:	f000 fd2b 	bl	800f474 <__pow5mult>
 800ea1e:	4652      	mov	r2, sl
 800ea20:	4601      	mov	r1, r0
 800ea22:	4607      	mov	r7, r0
 800ea24:	4620      	mov	r0, r4
 800ea26:	f000 fc7b 	bl	800f320 <__multiply>
 800ea2a:	4651      	mov	r1, sl
 800ea2c:	4680      	mov	r8, r0
 800ea2e:	4620      	mov	r0, r4
 800ea30:	f000 fb60 	bl	800f0f4 <_Bfree>
 800ea34:	46c2      	mov	sl, r8
 800ea36:	9b08      	ldr	r3, [sp, #32]
 800ea38:	1b9a      	subs	r2, r3, r6
 800ea3a:	d004      	beq.n	800ea46 <_dtoa_r+0x7b6>
 800ea3c:	4651      	mov	r1, sl
 800ea3e:	4620      	mov	r0, r4
 800ea40:	f000 fd18 	bl	800f474 <__pow5mult>
 800ea44:	4682      	mov	sl, r0
 800ea46:	2101      	movs	r1, #1
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f000 fc53 	bl	800f2f4 <__i2b>
 800ea4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	4606      	mov	r6, r0
 800ea54:	f340 8081 	ble.w	800eb5a <_dtoa_r+0x8ca>
 800ea58:	461a      	mov	r2, r3
 800ea5a:	4601      	mov	r1, r0
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	f000 fd09 	bl	800f474 <__pow5mult>
 800ea62:	9b07      	ldr	r3, [sp, #28]
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	4606      	mov	r6, r0
 800ea68:	dd7a      	ble.n	800eb60 <_dtoa_r+0x8d0>
 800ea6a:	f04f 0800 	mov.w	r8, #0
 800ea6e:	6933      	ldr	r3, [r6, #16]
 800ea70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ea74:	6918      	ldr	r0, [r3, #16]
 800ea76:	f000 fbef 	bl	800f258 <__hi0bits>
 800ea7a:	f1c0 0020 	rsb	r0, r0, #32
 800ea7e:	9b06      	ldr	r3, [sp, #24]
 800ea80:	4418      	add	r0, r3
 800ea82:	f010 001f 	ands.w	r0, r0, #31
 800ea86:	f000 8094 	beq.w	800ebb2 <_dtoa_r+0x922>
 800ea8a:	f1c0 0320 	rsb	r3, r0, #32
 800ea8e:	2b04      	cmp	r3, #4
 800ea90:	f340 8085 	ble.w	800eb9e <_dtoa_r+0x90e>
 800ea94:	9b05      	ldr	r3, [sp, #20]
 800ea96:	f1c0 001c 	rsb	r0, r0, #28
 800ea9a:	4403      	add	r3, r0
 800ea9c:	9305      	str	r3, [sp, #20]
 800ea9e:	9b06      	ldr	r3, [sp, #24]
 800eaa0:	4403      	add	r3, r0
 800eaa2:	4405      	add	r5, r0
 800eaa4:	9306      	str	r3, [sp, #24]
 800eaa6:	9b05      	ldr	r3, [sp, #20]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	dd05      	ble.n	800eab8 <_dtoa_r+0x828>
 800eaac:	4651      	mov	r1, sl
 800eaae:	461a      	mov	r2, r3
 800eab0:	4620      	mov	r0, r4
 800eab2:	f000 fd39 	bl	800f528 <__lshift>
 800eab6:	4682      	mov	sl, r0
 800eab8:	9b06      	ldr	r3, [sp, #24]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	dd05      	ble.n	800eaca <_dtoa_r+0x83a>
 800eabe:	4631      	mov	r1, r6
 800eac0:	461a      	mov	r2, r3
 800eac2:	4620      	mov	r0, r4
 800eac4:	f000 fd30 	bl	800f528 <__lshift>
 800eac8:	4606      	mov	r6, r0
 800eaca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d072      	beq.n	800ebb6 <_dtoa_r+0x926>
 800ead0:	4631      	mov	r1, r6
 800ead2:	4650      	mov	r0, sl
 800ead4:	f000 fd94 	bl	800f600 <__mcmp>
 800ead8:	2800      	cmp	r0, #0
 800eada:	da6c      	bge.n	800ebb6 <_dtoa_r+0x926>
 800eadc:	2300      	movs	r3, #0
 800eade:	4651      	mov	r1, sl
 800eae0:	220a      	movs	r2, #10
 800eae2:	4620      	mov	r0, r4
 800eae4:	f000 fb28 	bl	800f138 <__multadd>
 800eae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eaee:	4682      	mov	sl, r0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	f000 81b0 	beq.w	800ee56 <_dtoa_r+0xbc6>
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	4639      	mov	r1, r7
 800eafa:	220a      	movs	r2, #10
 800eafc:	4620      	mov	r0, r4
 800eafe:	f000 fb1b 	bl	800f138 <__multadd>
 800eb02:	9b01      	ldr	r3, [sp, #4]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	4607      	mov	r7, r0
 800eb08:	f300 8096 	bgt.w	800ec38 <_dtoa_r+0x9a8>
 800eb0c:	9b07      	ldr	r3, [sp, #28]
 800eb0e:	2b02      	cmp	r3, #2
 800eb10:	dc59      	bgt.n	800ebc6 <_dtoa_r+0x936>
 800eb12:	e091      	b.n	800ec38 <_dtoa_r+0x9a8>
 800eb14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eb1a:	e758      	b.n	800e9ce <_dtoa_r+0x73e>
 800eb1c:	9b04      	ldr	r3, [sp, #16]
 800eb1e:	1e5e      	subs	r6, r3, #1
 800eb20:	9b08      	ldr	r3, [sp, #32]
 800eb22:	42b3      	cmp	r3, r6
 800eb24:	bfbf      	itttt	lt
 800eb26:	9b08      	ldrlt	r3, [sp, #32]
 800eb28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800eb2a:	9608      	strlt	r6, [sp, #32]
 800eb2c:	1af3      	sublt	r3, r6, r3
 800eb2e:	bfb4      	ite	lt
 800eb30:	18d2      	addlt	r2, r2, r3
 800eb32:	1b9e      	subge	r6, r3, r6
 800eb34:	9b04      	ldr	r3, [sp, #16]
 800eb36:	bfbc      	itt	lt
 800eb38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800eb3a:	2600      	movlt	r6, #0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	bfb7      	itett	lt
 800eb40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800eb44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800eb48:	1a9d      	sublt	r5, r3, r2
 800eb4a:	2300      	movlt	r3, #0
 800eb4c:	e741      	b.n	800e9d2 <_dtoa_r+0x742>
 800eb4e:	9e08      	ldr	r6, [sp, #32]
 800eb50:	9d05      	ldr	r5, [sp, #20]
 800eb52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800eb54:	e748      	b.n	800e9e8 <_dtoa_r+0x758>
 800eb56:	9a08      	ldr	r2, [sp, #32]
 800eb58:	e770      	b.n	800ea3c <_dtoa_r+0x7ac>
 800eb5a:	9b07      	ldr	r3, [sp, #28]
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	dc19      	bgt.n	800eb94 <_dtoa_r+0x904>
 800eb60:	9b02      	ldr	r3, [sp, #8]
 800eb62:	b9bb      	cbnz	r3, 800eb94 <_dtoa_r+0x904>
 800eb64:	9b03      	ldr	r3, [sp, #12]
 800eb66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb6a:	b99b      	cbnz	r3, 800eb94 <_dtoa_r+0x904>
 800eb6c:	9b03      	ldr	r3, [sp, #12]
 800eb6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eb72:	0d1b      	lsrs	r3, r3, #20
 800eb74:	051b      	lsls	r3, r3, #20
 800eb76:	b183      	cbz	r3, 800eb9a <_dtoa_r+0x90a>
 800eb78:	9b05      	ldr	r3, [sp, #20]
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	9305      	str	r3, [sp, #20]
 800eb7e:	9b06      	ldr	r3, [sp, #24]
 800eb80:	3301      	adds	r3, #1
 800eb82:	9306      	str	r3, [sp, #24]
 800eb84:	f04f 0801 	mov.w	r8, #1
 800eb88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f47f af6f 	bne.w	800ea6e <_dtoa_r+0x7de>
 800eb90:	2001      	movs	r0, #1
 800eb92:	e774      	b.n	800ea7e <_dtoa_r+0x7ee>
 800eb94:	f04f 0800 	mov.w	r8, #0
 800eb98:	e7f6      	b.n	800eb88 <_dtoa_r+0x8f8>
 800eb9a:	4698      	mov	r8, r3
 800eb9c:	e7f4      	b.n	800eb88 <_dtoa_r+0x8f8>
 800eb9e:	d082      	beq.n	800eaa6 <_dtoa_r+0x816>
 800eba0:	9a05      	ldr	r2, [sp, #20]
 800eba2:	331c      	adds	r3, #28
 800eba4:	441a      	add	r2, r3
 800eba6:	9205      	str	r2, [sp, #20]
 800eba8:	9a06      	ldr	r2, [sp, #24]
 800ebaa:	441a      	add	r2, r3
 800ebac:	441d      	add	r5, r3
 800ebae:	9206      	str	r2, [sp, #24]
 800ebb0:	e779      	b.n	800eaa6 <_dtoa_r+0x816>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	e7f4      	b.n	800eba0 <_dtoa_r+0x910>
 800ebb6:	9b04      	ldr	r3, [sp, #16]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	dc37      	bgt.n	800ec2c <_dtoa_r+0x99c>
 800ebbc:	9b07      	ldr	r3, [sp, #28]
 800ebbe:	2b02      	cmp	r3, #2
 800ebc0:	dd34      	ble.n	800ec2c <_dtoa_r+0x99c>
 800ebc2:	9b04      	ldr	r3, [sp, #16]
 800ebc4:	9301      	str	r3, [sp, #4]
 800ebc6:	9b01      	ldr	r3, [sp, #4]
 800ebc8:	b963      	cbnz	r3, 800ebe4 <_dtoa_r+0x954>
 800ebca:	4631      	mov	r1, r6
 800ebcc:	2205      	movs	r2, #5
 800ebce:	4620      	mov	r0, r4
 800ebd0:	f000 fab2 	bl	800f138 <__multadd>
 800ebd4:	4601      	mov	r1, r0
 800ebd6:	4606      	mov	r6, r0
 800ebd8:	4650      	mov	r0, sl
 800ebda:	f000 fd11 	bl	800f600 <__mcmp>
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	f73f adbb 	bgt.w	800e75a <_dtoa_r+0x4ca>
 800ebe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebe6:	9d00      	ldr	r5, [sp, #0]
 800ebe8:	ea6f 0b03 	mvn.w	fp, r3
 800ebec:	f04f 0800 	mov.w	r8, #0
 800ebf0:	4631      	mov	r1, r6
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f000 fa7e 	bl	800f0f4 <_Bfree>
 800ebf8:	2f00      	cmp	r7, #0
 800ebfa:	f43f aeab 	beq.w	800e954 <_dtoa_r+0x6c4>
 800ebfe:	f1b8 0f00 	cmp.w	r8, #0
 800ec02:	d005      	beq.n	800ec10 <_dtoa_r+0x980>
 800ec04:	45b8      	cmp	r8, r7
 800ec06:	d003      	beq.n	800ec10 <_dtoa_r+0x980>
 800ec08:	4641      	mov	r1, r8
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f000 fa72 	bl	800f0f4 <_Bfree>
 800ec10:	4639      	mov	r1, r7
 800ec12:	4620      	mov	r0, r4
 800ec14:	f000 fa6e 	bl	800f0f4 <_Bfree>
 800ec18:	e69c      	b.n	800e954 <_dtoa_r+0x6c4>
 800ec1a:	2600      	movs	r6, #0
 800ec1c:	4637      	mov	r7, r6
 800ec1e:	e7e1      	b.n	800ebe4 <_dtoa_r+0x954>
 800ec20:	46bb      	mov	fp, r7
 800ec22:	4637      	mov	r7, r6
 800ec24:	e599      	b.n	800e75a <_dtoa_r+0x4ca>
 800ec26:	bf00      	nop
 800ec28:	40240000 	.word	0x40240000
 800ec2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	f000 80c8 	beq.w	800edc4 <_dtoa_r+0xb34>
 800ec34:	9b04      	ldr	r3, [sp, #16]
 800ec36:	9301      	str	r3, [sp, #4]
 800ec38:	2d00      	cmp	r5, #0
 800ec3a:	dd05      	ble.n	800ec48 <_dtoa_r+0x9b8>
 800ec3c:	4639      	mov	r1, r7
 800ec3e:	462a      	mov	r2, r5
 800ec40:	4620      	mov	r0, r4
 800ec42:	f000 fc71 	bl	800f528 <__lshift>
 800ec46:	4607      	mov	r7, r0
 800ec48:	f1b8 0f00 	cmp.w	r8, #0
 800ec4c:	d05b      	beq.n	800ed06 <_dtoa_r+0xa76>
 800ec4e:	6879      	ldr	r1, [r7, #4]
 800ec50:	4620      	mov	r0, r4
 800ec52:	f000 fa0f 	bl	800f074 <_Balloc>
 800ec56:	4605      	mov	r5, r0
 800ec58:	b928      	cbnz	r0, 800ec66 <_dtoa_r+0x9d6>
 800ec5a:	4b83      	ldr	r3, [pc, #524]	; (800ee68 <_dtoa_r+0xbd8>)
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ec62:	f7ff bb2e 	b.w	800e2c2 <_dtoa_r+0x32>
 800ec66:	693a      	ldr	r2, [r7, #16]
 800ec68:	3202      	adds	r2, #2
 800ec6a:	0092      	lsls	r2, r2, #2
 800ec6c:	f107 010c 	add.w	r1, r7, #12
 800ec70:	300c      	adds	r0, #12
 800ec72:	f7ff fa70 	bl	800e156 <memcpy>
 800ec76:	2201      	movs	r2, #1
 800ec78:	4629      	mov	r1, r5
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	f000 fc54 	bl	800f528 <__lshift>
 800ec80:	9b00      	ldr	r3, [sp, #0]
 800ec82:	3301      	adds	r3, #1
 800ec84:	9304      	str	r3, [sp, #16]
 800ec86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec8a:	4413      	add	r3, r2
 800ec8c:	9308      	str	r3, [sp, #32]
 800ec8e:	9b02      	ldr	r3, [sp, #8]
 800ec90:	f003 0301 	and.w	r3, r3, #1
 800ec94:	46b8      	mov	r8, r7
 800ec96:	9306      	str	r3, [sp, #24]
 800ec98:	4607      	mov	r7, r0
 800ec9a:	9b04      	ldr	r3, [sp, #16]
 800ec9c:	4631      	mov	r1, r6
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	4650      	mov	r0, sl
 800eca2:	9301      	str	r3, [sp, #4]
 800eca4:	f7ff fa6c 	bl	800e180 <quorem>
 800eca8:	4641      	mov	r1, r8
 800ecaa:	9002      	str	r0, [sp, #8]
 800ecac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ecb0:	4650      	mov	r0, sl
 800ecb2:	f000 fca5 	bl	800f600 <__mcmp>
 800ecb6:	463a      	mov	r2, r7
 800ecb8:	9005      	str	r0, [sp, #20]
 800ecba:	4631      	mov	r1, r6
 800ecbc:	4620      	mov	r0, r4
 800ecbe:	f000 fcbb 	bl	800f638 <__mdiff>
 800ecc2:	68c2      	ldr	r2, [r0, #12]
 800ecc4:	4605      	mov	r5, r0
 800ecc6:	bb02      	cbnz	r2, 800ed0a <_dtoa_r+0xa7a>
 800ecc8:	4601      	mov	r1, r0
 800ecca:	4650      	mov	r0, sl
 800eccc:	f000 fc98 	bl	800f600 <__mcmp>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	4629      	mov	r1, r5
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	9209      	str	r2, [sp, #36]	; 0x24
 800ecd8:	f000 fa0c 	bl	800f0f4 <_Bfree>
 800ecdc:	9b07      	ldr	r3, [sp, #28]
 800ecde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ece0:	9d04      	ldr	r5, [sp, #16]
 800ece2:	ea43 0102 	orr.w	r1, r3, r2
 800ece6:	9b06      	ldr	r3, [sp, #24]
 800ece8:	4319      	orrs	r1, r3
 800ecea:	d110      	bne.n	800ed0e <_dtoa_r+0xa7e>
 800ecec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ecf0:	d029      	beq.n	800ed46 <_dtoa_r+0xab6>
 800ecf2:	9b05      	ldr	r3, [sp, #20]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	dd02      	ble.n	800ecfe <_dtoa_r+0xa6e>
 800ecf8:	9b02      	ldr	r3, [sp, #8]
 800ecfa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ecfe:	9b01      	ldr	r3, [sp, #4]
 800ed00:	f883 9000 	strb.w	r9, [r3]
 800ed04:	e774      	b.n	800ebf0 <_dtoa_r+0x960>
 800ed06:	4638      	mov	r0, r7
 800ed08:	e7ba      	b.n	800ec80 <_dtoa_r+0x9f0>
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	e7e1      	b.n	800ecd2 <_dtoa_r+0xa42>
 800ed0e:	9b05      	ldr	r3, [sp, #20]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	db04      	blt.n	800ed1e <_dtoa_r+0xa8e>
 800ed14:	9907      	ldr	r1, [sp, #28]
 800ed16:	430b      	orrs	r3, r1
 800ed18:	9906      	ldr	r1, [sp, #24]
 800ed1a:	430b      	orrs	r3, r1
 800ed1c:	d120      	bne.n	800ed60 <_dtoa_r+0xad0>
 800ed1e:	2a00      	cmp	r2, #0
 800ed20:	dded      	ble.n	800ecfe <_dtoa_r+0xa6e>
 800ed22:	4651      	mov	r1, sl
 800ed24:	2201      	movs	r2, #1
 800ed26:	4620      	mov	r0, r4
 800ed28:	f000 fbfe 	bl	800f528 <__lshift>
 800ed2c:	4631      	mov	r1, r6
 800ed2e:	4682      	mov	sl, r0
 800ed30:	f000 fc66 	bl	800f600 <__mcmp>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	dc03      	bgt.n	800ed40 <_dtoa_r+0xab0>
 800ed38:	d1e1      	bne.n	800ecfe <_dtoa_r+0xa6e>
 800ed3a:	f019 0f01 	tst.w	r9, #1
 800ed3e:	d0de      	beq.n	800ecfe <_dtoa_r+0xa6e>
 800ed40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ed44:	d1d8      	bne.n	800ecf8 <_dtoa_r+0xa68>
 800ed46:	9a01      	ldr	r2, [sp, #4]
 800ed48:	2339      	movs	r3, #57	; 0x39
 800ed4a:	7013      	strb	r3, [r2, #0]
 800ed4c:	462b      	mov	r3, r5
 800ed4e:	461d      	mov	r5, r3
 800ed50:	3b01      	subs	r3, #1
 800ed52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ed56:	2a39      	cmp	r2, #57	; 0x39
 800ed58:	d06c      	beq.n	800ee34 <_dtoa_r+0xba4>
 800ed5a:	3201      	adds	r2, #1
 800ed5c:	701a      	strb	r2, [r3, #0]
 800ed5e:	e747      	b.n	800ebf0 <_dtoa_r+0x960>
 800ed60:	2a00      	cmp	r2, #0
 800ed62:	dd07      	ble.n	800ed74 <_dtoa_r+0xae4>
 800ed64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ed68:	d0ed      	beq.n	800ed46 <_dtoa_r+0xab6>
 800ed6a:	9a01      	ldr	r2, [sp, #4]
 800ed6c:	f109 0301 	add.w	r3, r9, #1
 800ed70:	7013      	strb	r3, [r2, #0]
 800ed72:	e73d      	b.n	800ebf0 <_dtoa_r+0x960>
 800ed74:	9b04      	ldr	r3, [sp, #16]
 800ed76:	9a08      	ldr	r2, [sp, #32]
 800ed78:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d043      	beq.n	800ee08 <_dtoa_r+0xb78>
 800ed80:	4651      	mov	r1, sl
 800ed82:	2300      	movs	r3, #0
 800ed84:	220a      	movs	r2, #10
 800ed86:	4620      	mov	r0, r4
 800ed88:	f000 f9d6 	bl	800f138 <__multadd>
 800ed8c:	45b8      	cmp	r8, r7
 800ed8e:	4682      	mov	sl, r0
 800ed90:	f04f 0300 	mov.w	r3, #0
 800ed94:	f04f 020a 	mov.w	r2, #10
 800ed98:	4641      	mov	r1, r8
 800ed9a:	4620      	mov	r0, r4
 800ed9c:	d107      	bne.n	800edae <_dtoa_r+0xb1e>
 800ed9e:	f000 f9cb 	bl	800f138 <__multadd>
 800eda2:	4680      	mov	r8, r0
 800eda4:	4607      	mov	r7, r0
 800eda6:	9b04      	ldr	r3, [sp, #16]
 800eda8:	3301      	adds	r3, #1
 800edaa:	9304      	str	r3, [sp, #16]
 800edac:	e775      	b.n	800ec9a <_dtoa_r+0xa0a>
 800edae:	f000 f9c3 	bl	800f138 <__multadd>
 800edb2:	4639      	mov	r1, r7
 800edb4:	4680      	mov	r8, r0
 800edb6:	2300      	movs	r3, #0
 800edb8:	220a      	movs	r2, #10
 800edba:	4620      	mov	r0, r4
 800edbc:	f000 f9bc 	bl	800f138 <__multadd>
 800edc0:	4607      	mov	r7, r0
 800edc2:	e7f0      	b.n	800eda6 <_dtoa_r+0xb16>
 800edc4:	9b04      	ldr	r3, [sp, #16]
 800edc6:	9301      	str	r3, [sp, #4]
 800edc8:	9d00      	ldr	r5, [sp, #0]
 800edca:	4631      	mov	r1, r6
 800edcc:	4650      	mov	r0, sl
 800edce:	f7ff f9d7 	bl	800e180 <quorem>
 800edd2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800edd6:	9b00      	ldr	r3, [sp, #0]
 800edd8:	f805 9b01 	strb.w	r9, [r5], #1
 800eddc:	1aea      	subs	r2, r5, r3
 800edde:	9b01      	ldr	r3, [sp, #4]
 800ede0:	4293      	cmp	r3, r2
 800ede2:	dd07      	ble.n	800edf4 <_dtoa_r+0xb64>
 800ede4:	4651      	mov	r1, sl
 800ede6:	2300      	movs	r3, #0
 800ede8:	220a      	movs	r2, #10
 800edea:	4620      	mov	r0, r4
 800edec:	f000 f9a4 	bl	800f138 <__multadd>
 800edf0:	4682      	mov	sl, r0
 800edf2:	e7ea      	b.n	800edca <_dtoa_r+0xb3a>
 800edf4:	9b01      	ldr	r3, [sp, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	bfc8      	it	gt
 800edfa:	461d      	movgt	r5, r3
 800edfc:	9b00      	ldr	r3, [sp, #0]
 800edfe:	bfd8      	it	le
 800ee00:	2501      	movle	r5, #1
 800ee02:	441d      	add	r5, r3
 800ee04:	f04f 0800 	mov.w	r8, #0
 800ee08:	4651      	mov	r1, sl
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	f000 fb8b 	bl	800f528 <__lshift>
 800ee12:	4631      	mov	r1, r6
 800ee14:	4682      	mov	sl, r0
 800ee16:	f000 fbf3 	bl	800f600 <__mcmp>
 800ee1a:	2800      	cmp	r0, #0
 800ee1c:	dc96      	bgt.n	800ed4c <_dtoa_r+0xabc>
 800ee1e:	d102      	bne.n	800ee26 <_dtoa_r+0xb96>
 800ee20:	f019 0f01 	tst.w	r9, #1
 800ee24:	d192      	bne.n	800ed4c <_dtoa_r+0xabc>
 800ee26:	462b      	mov	r3, r5
 800ee28:	461d      	mov	r5, r3
 800ee2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee2e:	2a30      	cmp	r2, #48	; 0x30
 800ee30:	d0fa      	beq.n	800ee28 <_dtoa_r+0xb98>
 800ee32:	e6dd      	b.n	800ebf0 <_dtoa_r+0x960>
 800ee34:	9a00      	ldr	r2, [sp, #0]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d189      	bne.n	800ed4e <_dtoa_r+0xabe>
 800ee3a:	f10b 0b01 	add.w	fp, fp, #1
 800ee3e:	2331      	movs	r3, #49	; 0x31
 800ee40:	e796      	b.n	800ed70 <_dtoa_r+0xae0>
 800ee42:	4b0a      	ldr	r3, [pc, #40]	; (800ee6c <_dtoa_r+0xbdc>)
 800ee44:	f7ff ba99 	b.w	800e37a <_dtoa_r+0xea>
 800ee48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	f47f aa6d 	bne.w	800e32a <_dtoa_r+0x9a>
 800ee50:	4b07      	ldr	r3, [pc, #28]	; (800ee70 <_dtoa_r+0xbe0>)
 800ee52:	f7ff ba92 	b.w	800e37a <_dtoa_r+0xea>
 800ee56:	9b01      	ldr	r3, [sp, #4]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	dcb5      	bgt.n	800edc8 <_dtoa_r+0xb38>
 800ee5c:	9b07      	ldr	r3, [sp, #28]
 800ee5e:	2b02      	cmp	r3, #2
 800ee60:	f73f aeb1 	bgt.w	800ebc6 <_dtoa_r+0x936>
 800ee64:	e7b0      	b.n	800edc8 <_dtoa_r+0xb38>
 800ee66:	bf00      	nop
 800ee68:	08013a3b 	.word	0x08013a3b
 800ee6c:	08013d20 	.word	0x08013d20
 800ee70:	080139bf 	.word	0x080139bf

0800ee74 <_free_r>:
 800ee74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee76:	2900      	cmp	r1, #0
 800ee78:	d044      	beq.n	800ef04 <_free_r+0x90>
 800ee7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee7e:	9001      	str	r0, [sp, #4]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f1a1 0404 	sub.w	r4, r1, #4
 800ee86:	bfb8      	it	lt
 800ee88:	18e4      	addlt	r4, r4, r3
 800ee8a:	f000 f8e7 	bl	800f05c <__malloc_lock>
 800ee8e:	4a1e      	ldr	r2, [pc, #120]	; (800ef08 <_free_r+0x94>)
 800ee90:	9801      	ldr	r0, [sp, #4]
 800ee92:	6813      	ldr	r3, [r2, #0]
 800ee94:	b933      	cbnz	r3, 800eea4 <_free_r+0x30>
 800ee96:	6063      	str	r3, [r4, #4]
 800ee98:	6014      	str	r4, [r2, #0]
 800ee9a:	b003      	add	sp, #12
 800ee9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eea0:	f000 b8e2 	b.w	800f068 <__malloc_unlock>
 800eea4:	42a3      	cmp	r3, r4
 800eea6:	d908      	bls.n	800eeba <_free_r+0x46>
 800eea8:	6825      	ldr	r5, [r4, #0]
 800eeaa:	1961      	adds	r1, r4, r5
 800eeac:	428b      	cmp	r3, r1
 800eeae:	bf01      	itttt	eq
 800eeb0:	6819      	ldreq	r1, [r3, #0]
 800eeb2:	685b      	ldreq	r3, [r3, #4]
 800eeb4:	1949      	addeq	r1, r1, r5
 800eeb6:	6021      	streq	r1, [r4, #0]
 800eeb8:	e7ed      	b.n	800ee96 <_free_r+0x22>
 800eeba:	461a      	mov	r2, r3
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	b10b      	cbz	r3, 800eec4 <_free_r+0x50>
 800eec0:	42a3      	cmp	r3, r4
 800eec2:	d9fa      	bls.n	800eeba <_free_r+0x46>
 800eec4:	6811      	ldr	r1, [r2, #0]
 800eec6:	1855      	adds	r5, r2, r1
 800eec8:	42a5      	cmp	r5, r4
 800eeca:	d10b      	bne.n	800eee4 <_free_r+0x70>
 800eecc:	6824      	ldr	r4, [r4, #0]
 800eece:	4421      	add	r1, r4
 800eed0:	1854      	adds	r4, r2, r1
 800eed2:	42a3      	cmp	r3, r4
 800eed4:	6011      	str	r1, [r2, #0]
 800eed6:	d1e0      	bne.n	800ee9a <_free_r+0x26>
 800eed8:	681c      	ldr	r4, [r3, #0]
 800eeda:	685b      	ldr	r3, [r3, #4]
 800eedc:	6053      	str	r3, [r2, #4]
 800eede:	440c      	add	r4, r1
 800eee0:	6014      	str	r4, [r2, #0]
 800eee2:	e7da      	b.n	800ee9a <_free_r+0x26>
 800eee4:	d902      	bls.n	800eeec <_free_r+0x78>
 800eee6:	230c      	movs	r3, #12
 800eee8:	6003      	str	r3, [r0, #0]
 800eeea:	e7d6      	b.n	800ee9a <_free_r+0x26>
 800eeec:	6825      	ldr	r5, [r4, #0]
 800eeee:	1961      	adds	r1, r4, r5
 800eef0:	428b      	cmp	r3, r1
 800eef2:	bf04      	itt	eq
 800eef4:	6819      	ldreq	r1, [r3, #0]
 800eef6:	685b      	ldreq	r3, [r3, #4]
 800eef8:	6063      	str	r3, [r4, #4]
 800eefa:	bf04      	itt	eq
 800eefc:	1949      	addeq	r1, r1, r5
 800eefe:	6021      	streq	r1, [r4, #0]
 800ef00:	6054      	str	r4, [r2, #4]
 800ef02:	e7ca      	b.n	800ee9a <_free_r+0x26>
 800ef04:	b003      	add	sp, #12
 800ef06:	bd30      	pop	{r4, r5, pc}
 800ef08:	20008c14 	.word	0x20008c14

0800ef0c <malloc>:
 800ef0c:	4b02      	ldr	r3, [pc, #8]	; (800ef18 <malloc+0xc>)
 800ef0e:	4601      	mov	r1, r0
 800ef10:	6818      	ldr	r0, [r3, #0]
 800ef12:	f000 b823 	b.w	800ef5c <_malloc_r>
 800ef16:	bf00      	nop
 800ef18:	20000130 	.word	0x20000130

0800ef1c <sbrk_aligned>:
 800ef1c:	b570      	push	{r4, r5, r6, lr}
 800ef1e:	4e0e      	ldr	r6, [pc, #56]	; (800ef58 <sbrk_aligned+0x3c>)
 800ef20:	460c      	mov	r4, r1
 800ef22:	6831      	ldr	r1, [r6, #0]
 800ef24:	4605      	mov	r5, r0
 800ef26:	b911      	cbnz	r1, 800ef2e <sbrk_aligned+0x12>
 800ef28:	f002 f9ae 	bl	8011288 <_sbrk_r>
 800ef2c:	6030      	str	r0, [r6, #0]
 800ef2e:	4621      	mov	r1, r4
 800ef30:	4628      	mov	r0, r5
 800ef32:	f002 f9a9 	bl	8011288 <_sbrk_r>
 800ef36:	1c43      	adds	r3, r0, #1
 800ef38:	d00a      	beq.n	800ef50 <sbrk_aligned+0x34>
 800ef3a:	1cc4      	adds	r4, r0, #3
 800ef3c:	f024 0403 	bic.w	r4, r4, #3
 800ef40:	42a0      	cmp	r0, r4
 800ef42:	d007      	beq.n	800ef54 <sbrk_aligned+0x38>
 800ef44:	1a21      	subs	r1, r4, r0
 800ef46:	4628      	mov	r0, r5
 800ef48:	f002 f99e 	bl	8011288 <_sbrk_r>
 800ef4c:	3001      	adds	r0, #1
 800ef4e:	d101      	bne.n	800ef54 <sbrk_aligned+0x38>
 800ef50:	f04f 34ff 	mov.w	r4, #4294967295
 800ef54:	4620      	mov	r0, r4
 800ef56:	bd70      	pop	{r4, r5, r6, pc}
 800ef58:	20008c18 	.word	0x20008c18

0800ef5c <_malloc_r>:
 800ef5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef60:	1ccd      	adds	r5, r1, #3
 800ef62:	f025 0503 	bic.w	r5, r5, #3
 800ef66:	3508      	adds	r5, #8
 800ef68:	2d0c      	cmp	r5, #12
 800ef6a:	bf38      	it	cc
 800ef6c:	250c      	movcc	r5, #12
 800ef6e:	2d00      	cmp	r5, #0
 800ef70:	4607      	mov	r7, r0
 800ef72:	db01      	blt.n	800ef78 <_malloc_r+0x1c>
 800ef74:	42a9      	cmp	r1, r5
 800ef76:	d905      	bls.n	800ef84 <_malloc_r+0x28>
 800ef78:	230c      	movs	r3, #12
 800ef7a:	603b      	str	r3, [r7, #0]
 800ef7c:	2600      	movs	r6, #0
 800ef7e:	4630      	mov	r0, r6
 800ef80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f058 <_malloc_r+0xfc>
 800ef88:	f000 f868 	bl	800f05c <__malloc_lock>
 800ef8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ef90:	461c      	mov	r4, r3
 800ef92:	bb5c      	cbnz	r4, 800efec <_malloc_r+0x90>
 800ef94:	4629      	mov	r1, r5
 800ef96:	4638      	mov	r0, r7
 800ef98:	f7ff ffc0 	bl	800ef1c <sbrk_aligned>
 800ef9c:	1c43      	adds	r3, r0, #1
 800ef9e:	4604      	mov	r4, r0
 800efa0:	d155      	bne.n	800f04e <_malloc_r+0xf2>
 800efa2:	f8d8 4000 	ldr.w	r4, [r8]
 800efa6:	4626      	mov	r6, r4
 800efa8:	2e00      	cmp	r6, #0
 800efaa:	d145      	bne.n	800f038 <_malloc_r+0xdc>
 800efac:	2c00      	cmp	r4, #0
 800efae:	d048      	beq.n	800f042 <_malloc_r+0xe6>
 800efb0:	6823      	ldr	r3, [r4, #0]
 800efb2:	4631      	mov	r1, r6
 800efb4:	4638      	mov	r0, r7
 800efb6:	eb04 0903 	add.w	r9, r4, r3
 800efba:	f002 f965 	bl	8011288 <_sbrk_r>
 800efbe:	4581      	cmp	r9, r0
 800efc0:	d13f      	bne.n	800f042 <_malloc_r+0xe6>
 800efc2:	6821      	ldr	r1, [r4, #0]
 800efc4:	1a6d      	subs	r5, r5, r1
 800efc6:	4629      	mov	r1, r5
 800efc8:	4638      	mov	r0, r7
 800efca:	f7ff ffa7 	bl	800ef1c <sbrk_aligned>
 800efce:	3001      	adds	r0, #1
 800efd0:	d037      	beq.n	800f042 <_malloc_r+0xe6>
 800efd2:	6823      	ldr	r3, [r4, #0]
 800efd4:	442b      	add	r3, r5
 800efd6:	6023      	str	r3, [r4, #0]
 800efd8:	f8d8 3000 	ldr.w	r3, [r8]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d038      	beq.n	800f052 <_malloc_r+0xf6>
 800efe0:	685a      	ldr	r2, [r3, #4]
 800efe2:	42a2      	cmp	r2, r4
 800efe4:	d12b      	bne.n	800f03e <_malloc_r+0xe2>
 800efe6:	2200      	movs	r2, #0
 800efe8:	605a      	str	r2, [r3, #4]
 800efea:	e00f      	b.n	800f00c <_malloc_r+0xb0>
 800efec:	6822      	ldr	r2, [r4, #0]
 800efee:	1b52      	subs	r2, r2, r5
 800eff0:	d41f      	bmi.n	800f032 <_malloc_r+0xd6>
 800eff2:	2a0b      	cmp	r2, #11
 800eff4:	d917      	bls.n	800f026 <_malloc_r+0xca>
 800eff6:	1961      	adds	r1, r4, r5
 800eff8:	42a3      	cmp	r3, r4
 800effa:	6025      	str	r5, [r4, #0]
 800effc:	bf18      	it	ne
 800effe:	6059      	strne	r1, [r3, #4]
 800f000:	6863      	ldr	r3, [r4, #4]
 800f002:	bf08      	it	eq
 800f004:	f8c8 1000 	streq.w	r1, [r8]
 800f008:	5162      	str	r2, [r4, r5]
 800f00a:	604b      	str	r3, [r1, #4]
 800f00c:	4638      	mov	r0, r7
 800f00e:	f104 060b 	add.w	r6, r4, #11
 800f012:	f000 f829 	bl	800f068 <__malloc_unlock>
 800f016:	f026 0607 	bic.w	r6, r6, #7
 800f01a:	1d23      	adds	r3, r4, #4
 800f01c:	1af2      	subs	r2, r6, r3
 800f01e:	d0ae      	beq.n	800ef7e <_malloc_r+0x22>
 800f020:	1b9b      	subs	r3, r3, r6
 800f022:	50a3      	str	r3, [r4, r2]
 800f024:	e7ab      	b.n	800ef7e <_malloc_r+0x22>
 800f026:	42a3      	cmp	r3, r4
 800f028:	6862      	ldr	r2, [r4, #4]
 800f02a:	d1dd      	bne.n	800efe8 <_malloc_r+0x8c>
 800f02c:	f8c8 2000 	str.w	r2, [r8]
 800f030:	e7ec      	b.n	800f00c <_malloc_r+0xb0>
 800f032:	4623      	mov	r3, r4
 800f034:	6864      	ldr	r4, [r4, #4]
 800f036:	e7ac      	b.n	800ef92 <_malloc_r+0x36>
 800f038:	4634      	mov	r4, r6
 800f03a:	6876      	ldr	r6, [r6, #4]
 800f03c:	e7b4      	b.n	800efa8 <_malloc_r+0x4c>
 800f03e:	4613      	mov	r3, r2
 800f040:	e7cc      	b.n	800efdc <_malloc_r+0x80>
 800f042:	230c      	movs	r3, #12
 800f044:	603b      	str	r3, [r7, #0]
 800f046:	4638      	mov	r0, r7
 800f048:	f000 f80e 	bl	800f068 <__malloc_unlock>
 800f04c:	e797      	b.n	800ef7e <_malloc_r+0x22>
 800f04e:	6025      	str	r5, [r4, #0]
 800f050:	e7dc      	b.n	800f00c <_malloc_r+0xb0>
 800f052:	605b      	str	r3, [r3, #4]
 800f054:	deff      	udf	#255	; 0xff
 800f056:	bf00      	nop
 800f058:	20008c14 	.word	0x20008c14

0800f05c <__malloc_lock>:
 800f05c:	4801      	ldr	r0, [pc, #4]	; (800f064 <__malloc_lock+0x8>)
 800f05e:	f7ff b870 	b.w	800e142 <__retarget_lock_acquire_recursive>
 800f062:	bf00      	nop
 800f064:	20008c10 	.word	0x20008c10

0800f068 <__malloc_unlock>:
 800f068:	4801      	ldr	r0, [pc, #4]	; (800f070 <__malloc_unlock+0x8>)
 800f06a:	f7ff b86b 	b.w	800e144 <__retarget_lock_release_recursive>
 800f06e:	bf00      	nop
 800f070:	20008c10 	.word	0x20008c10

0800f074 <_Balloc>:
 800f074:	b570      	push	{r4, r5, r6, lr}
 800f076:	69c6      	ldr	r6, [r0, #28]
 800f078:	4604      	mov	r4, r0
 800f07a:	460d      	mov	r5, r1
 800f07c:	b976      	cbnz	r6, 800f09c <_Balloc+0x28>
 800f07e:	2010      	movs	r0, #16
 800f080:	f7ff ff44 	bl	800ef0c <malloc>
 800f084:	4602      	mov	r2, r0
 800f086:	61e0      	str	r0, [r4, #28]
 800f088:	b920      	cbnz	r0, 800f094 <_Balloc+0x20>
 800f08a:	4b18      	ldr	r3, [pc, #96]	; (800f0ec <_Balloc+0x78>)
 800f08c:	4818      	ldr	r0, [pc, #96]	; (800f0f0 <_Balloc+0x7c>)
 800f08e:	216b      	movs	r1, #107	; 0x6b
 800f090:	f002 f912 	bl	80112b8 <__assert_func>
 800f094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f098:	6006      	str	r6, [r0, #0]
 800f09a:	60c6      	str	r6, [r0, #12]
 800f09c:	69e6      	ldr	r6, [r4, #28]
 800f09e:	68f3      	ldr	r3, [r6, #12]
 800f0a0:	b183      	cbz	r3, 800f0c4 <_Balloc+0x50>
 800f0a2:	69e3      	ldr	r3, [r4, #28]
 800f0a4:	68db      	ldr	r3, [r3, #12]
 800f0a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f0aa:	b9b8      	cbnz	r0, 800f0dc <_Balloc+0x68>
 800f0ac:	2101      	movs	r1, #1
 800f0ae:	fa01 f605 	lsl.w	r6, r1, r5
 800f0b2:	1d72      	adds	r2, r6, #5
 800f0b4:	0092      	lsls	r2, r2, #2
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	f002 f91c 	bl	80112f4 <_calloc_r>
 800f0bc:	b160      	cbz	r0, 800f0d8 <_Balloc+0x64>
 800f0be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f0c2:	e00e      	b.n	800f0e2 <_Balloc+0x6e>
 800f0c4:	2221      	movs	r2, #33	; 0x21
 800f0c6:	2104      	movs	r1, #4
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f002 f913 	bl	80112f4 <_calloc_r>
 800f0ce:	69e3      	ldr	r3, [r4, #28]
 800f0d0:	60f0      	str	r0, [r6, #12]
 800f0d2:	68db      	ldr	r3, [r3, #12]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d1e4      	bne.n	800f0a2 <_Balloc+0x2e>
 800f0d8:	2000      	movs	r0, #0
 800f0da:	bd70      	pop	{r4, r5, r6, pc}
 800f0dc:	6802      	ldr	r2, [r0, #0]
 800f0de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f0e8:	e7f7      	b.n	800f0da <_Balloc+0x66>
 800f0ea:	bf00      	nop
 800f0ec:	080139cc 	.word	0x080139cc
 800f0f0:	08013a4c 	.word	0x08013a4c

0800f0f4 <_Bfree>:
 800f0f4:	b570      	push	{r4, r5, r6, lr}
 800f0f6:	69c6      	ldr	r6, [r0, #28]
 800f0f8:	4605      	mov	r5, r0
 800f0fa:	460c      	mov	r4, r1
 800f0fc:	b976      	cbnz	r6, 800f11c <_Bfree+0x28>
 800f0fe:	2010      	movs	r0, #16
 800f100:	f7ff ff04 	bl	800ef0c <malloc>
 800f104:	4602      	mov	r2, r0
 800f106:	61e8      	str	r0, [r5, #28]
 800f108:	b920      	cbnz	r0, 800f114 <_Bfree+0x20>
 800f10a:	4b09      	ldr	r3, [pc, #36]	; (800f130 <_Bfree+0x3c>)
 800f10c:	4809      	ldr	r0, [pc, #36]	; (800f134 <_Bfree+0x40>)
 800f10e:	218f      	movs	r1, #143	; 0x8f
 800f110:	f002 f8d2 	bl	80112b8 <__assert_func>
 800f114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f118:	6006      	str	r6, [r0, #0]
 800f11a:	60c6      	str	r6, [r0, #12]
 800f11c:	b13c      	cbz	r4, 800f12e <_Bfree+0x3a>
 800f11e:	69eb      	ldr	r3, [r5, #28]
 800f120:	6862      	ldr	r2, [r4, #4]
 800f122:	68db      	ldr	r3, [r3, #12]
 800f124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f128:	6021      	str	r1, [r4, #0]
 800f12a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f12e:	bd70      	pop	{r4, r5, r6, pc}
 800f130:	080139cc 	.word	0x080139cc
 800f134:	08013a4c 	.word	0x08013a4c

0800f138 <__multadd>:
 800f138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f13c:	690d      	ldr	r5, [r1, #16]
 800f13e:	4607      	mov	r7, r0
 800f140:	460c      	mov	r4, r1
 800f142:	461e      	mov	r6, r3
 800f144:	f101 0c14 	add.w	ip, r1, #20
 800f148:	2000      	movs	r0, #0
 800f14a:	f8dc 3000 	ldr.w	r3, [ip]
 800f14e:	b299      	uxth	r1, r3
 800f150:	fb02 6101 	mla	r1, r2, r1, r6
 800f154:	0c1e      	lsrs	r6, r3, #16
 800f156:	0c0b      	lsrs	r3, r1, #16
 800f158:	fb02 3306 	mla	r3, r2, r6, r3
 800f15c:	b289      	uxth	r1, r1
 800f15e:	3001      	adds	r0, #1
 800f160:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f164:	4285      	cmp	r5, r0
 800f166:	f84c 1b04 	str.w	r1, [ip], #4
 800f16a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f16e:	dcec      	bgt.n	800f14a <__multadd+0x12>
 800f170:	b30e      	cbz	r6, 800f1b6 <__multadd+0x7e>
 800f172:	68a3      	ldr	r3, [r4, #8]
 800f174:	42ab      	cmp	r3, r5
 800f176:	dc19      	bgt.n	800f1ac <__multadd+0x74>
 800f178:	6861      	ldr	r1, [r4, #4]
 800f17a:	4638      	mov	r0, r7
 800f17c:	3101      	adds	r1, #1
 800f17e:	f7ff ff79 	bl	800f074 <_Balloc>
 800f182:	4680      	mov	r8, r0
 800f184:	b928      	cbnz	r0, 800f192 <__multadd+0x5a>
 800f186:	4602      	mov	r2, r0
 800f188:	4b0c      	ldr	r3, [pc, #48]	; (800f1bc <__multadd+0x84>)
 800f18a:	480d      	ldr	r0, [pc, #52]	; (800f1c0 <__multadd+0x88>)
 800f18c:	21ba      	movs	r1, #186	; 0xba
 800f18e:	f002 f893 	bl	80112b8 <__assert_func>
 800f192:	6922      	ldr	r2, [r4, #16]
 800f194:	3202      	adds	r2, #2
 800f196:	f104 010c 	add.w	r1, r4, #12
 800f19a:	0092      	lsls	r2, r2, #2
 800f19c:	300c      	adds	r0, #12
 800f19e:	f7fe ffda 	bl	800e156 <memcpy>
 800f1a2:	4621      	mov	r1, r4
 800f1a4:	4638      	mov	r0, r7
 800f1a6:	f7ff ffa5 	bl	800f0f4 <_Bfree>
 800f1aa:	4644      	mov	r4, r8
 800f1ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f1b0:	3501      	adds	r5, #1
 800f1b2:	615e      	str	r6, [r3, #20]
 800f1b4:	6125      	str	r5, [r4, #16]
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1bc:	08013a3b 	.word	0x08013a3b
 800f1c0:	08013a4c 	.word	0x08013a4c

0800f1c4 <__s2b>:
 800f1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1c8:	460c      	mov	r4, r1
 800f1ca:	4615      	mov	r5, r2
 800f1cc:	461f      	mov	r7, r3
 800f1ce:	2209      	movs	r2, #9
 800f1d0:	3308      	adds	r3, #8
 800f1d2:	4606      	mov	r6, r0
 800f1d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1d8:	2100      	movs	r1, #0
 800f1da:	2201      	movs	r2, #1
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	db09      	blt.n	800f1f4 <__s2b+0x30>
 800f1e0:	4630      	mov	r0, r6
 800f1e2:	f7ff ff47 	bl	800f074 <_Balloc>
 800f1e6:	b940      	cbnz	r0, 800f1fa <__s2b+0x36>
 800f1e8:	4602      	mov	r2, r0
 800f1ea:	4b19      	ldr	r3, [pc, #100]	; (800f250 <__s2b+0x8c>)
 800f1ec:	4819      	ldr	r0, [pc, #100]	; (800f254 <__s2b+0x90>)
 800f1ee:	21d3      	movs	r1, #211	; 0xd3
 800f1f0:	f002 f862 	bl	80112b8 <__assert_func>
 800f1f4:	0052      	lsls	r2, r2, #1
 800f1f6:	3101      	adds	r1, #1
 800f1f8:	e7f0      	b.n	800f1dc <__s2b+0x18>
 800f1fa:	9b08      	ldr	r3, [sp, #32]
 800f1fc:	6143      	str	r3, [r0, #20]
 800f1fe:	2d09      	cmp	r5, #9
 800f200:	f04f 0301 	mov.w	r3, #1
 800f204:	6103      	str	r3, [r0, #16]
 800f206:	dd16      	ble.n	800f236 <__s2b+0x72>
 800f208:	f104 0909 	add.w	r9, r4, #9
 800f20c:	46c8      	mov	r8, r9
 800f20e:	442c      	add	r4, r5
 800f210:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f214:	4601      	mov	r1, r0
 800f216:	3b30      	subs	r3, #48	; 0x30
 800f218:	220a      	movs	r2, #10
 800f21a:	4630      	mov	r0, r6
 800f21c:	f7ff ff8c 	bl	800f138 <__multadd>
 800f220:	45a0      	cmp	r8, r4
 800f222:	d1f5      	bne.n	800f210 <__s2b+0x4c>
 800f224:	f1a5 0408 	sub.w	r4, r5, #8
 800f228:	444c      	add	r4, r9
 800f22a:	1b2d      	subs	r5, r5, r4
 800f22c:	1963      	adds	r3, r4, r5
 800f22e:	42bb      	cmp	r3, r7
 800f230:	db04      	blt.n	800f23c <__s2b+0x78>
 800f232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f236:	340a      	adds	r4, #10
 800f238:	2509      	movs	r5, #9
 800f23a:	e7f6      	b.n	800f22a <__s2b+0x66>
 800f23c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f240:	4601      	mov	r1, r0
 800f242:	3b30      	subs	r3, #48	; 0x30
 800f244:	220a      	movs	r2, #10
 800f246:	4630      	mov	r0, r6
 800f248:	f7ff ff76 	bl	800f138 <__multadd>
 800f24c:	e7ee      	b.n	800f22c <__s2b+0x68>
 800f24e:	bf00      	nop
 800f250:	08013a3b 	.word	0x08013a3b
 800f254:	08013a4c 	.word	0x08013a4c

0800f258 <__hi0bits>:
 800f258:	0c03      	lsrs	r3, r0, #16
 800f25a:	041b      	lsls	r3, r3, #16
 800f25c:	b9d3      	cbnz	r3, 800f294 <__hi0bits+0x3c>
 800f25e:	0400      	lsls	r0, r0, #16
 800f260:	2310      	movs	r3, #16
 800f262:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f266:	bf04      	itt	eq
 800f268:	0200      	lsleq	r0, r0, #8
 800f26a:	3308      	addeq	r3, #8
 800f26c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f270:	bf04      	itt	eq
 800f272:	0100      	lsleq	r0, r0, #4
 800f274:	3304      	addeq	r3, #4
 800f276:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f27a:	bf04      	itt	eq
 800f27c:	0080      	lsleq	r0, r0, #2
 800f27e:	3302      	addeq	r3, #2
 800f280:	2800      	cmp	r0, #0
 800f282:	db05      	blt.n	800f290 <__hi0bits+0x38>
 800f284:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f288:	f103 0301 	add.w	r3, r3, #1
 800f28c:	bf08      	it	eq
 800f28e:	2320      	moveq	r3, #32
 800f290:	4618      	mov	r0, r3
 800f292:	4770      	bx	lr
 800f294:	2300      	movs	r3, #0
 800f296:	e7e4      	b.n	800f262 <__hi0bits+0xa>

0800f298 <__lo0bits>:
 800f298:	6803      	ldr	r3, [r0, #0]
 800f29a:	f013 0207 	ands.w	r2, r3, #7
 800f29e:	d00c      	beq.n	800f2ba <__lo0bits+0x22>
 800f2a0:	07d9      	lsls	r1, r3, #31
 800f2a2:	d422      	bmi.n	800f2ea <__lo0bits+0x52>
 800f2a4:	079a      	lsls	r2, r3, #30
 800f2a6:	bf49      	itett	mi
 800f2a8:	085b      	lsrmi	r3, r3, #1
 800f2aa:	089b      	lsrpl	r3, r3, #2
 800f2ac:	6003      	strmi	r3, [r0, #0]
 800f2ae:	2201      	movmi	r2, #1
 800f2b0:	bf5c      	itt	pl
 800f2b2:	6003      	strpl	r3, [r0, #0]
 800f2b4:	2202      	movpl	r2, #2
 800f2b6:	4610      	mov	r0, r2
 800f2b8:	4770      	bx	lr
 800f2ba:	b299      	uxth	r1, r3
 800f2bc:	b909      	cbnz	r1, 800f2c2 <__lo0bits+0x2a>
 800f2be:	0c1b      	lsrs	r3, r3, #16
 800f2c0:	2210      	movs	r2, #16
 800f2c2:	b2d9      	uxtb	r1, r3
 800f2c4:	b909      	cbnz	r1, 800f2ca <__lo0bits+0x32>
 800f2c6:	3208      	adds	r2, #8
 800f2c8:	0a1b      	lsrs	r3, r3, #8
 800f2ca:	0719      	lsls	r1, r3, #28
 800f2cc:	bf04      	itt	eq
 800f2ce:	091b      	lsreq	r3, r3, #4
 800f2d0:	3204      	addeq	r2, #4
 800f2d2:	0799      	lsls	r1, r3, #30
 800f2d4:	bf04      	itt	eq
 800f2d6:	089b      	lsreq	r3, r3, #2
 800f2d8:	3202      	addeq	r2, #2
 800f2da:	07d9      	lsls	r1, r3, #31
 800f2dc:	d403      	bmi.n	800f2e6 <__lo0bits+0x4e>
 800f2de:	085b      	lsrs	r3, r3, #1
 800f2e0:	f102 0201 	add.w	r2, r2, #1
 800f2e4:	d003      	beq.n	800f2ee <__lo0bits+0x56>
 800f2e6:	6003      	str	r3, [r0, #0]
 800f2e8:	e7e5      	b.n	800f2b6 <__lo0bits+0x1e>
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	e7e3      	b.n	800f2b6 <__lo0bits+0x1e>
 800f2ee:	2220      	movs	r2, #32
 800f2f0:	e7e1      	b.n	800f2b6 <__lo0bits+0x1e>
	...

0800f2f4 <__i2b>:
 800f2f4:	b510      	push	{r4, lr}
 800f2f6:	460c      	mov	r4, r1
 800f2f8:	2101      	movs	r1, #1
 800f2fa:	f7ff febb 	bl	800f074 <_Balloc>
 800f2fe:	4602      	mov	r2, r0
 800f300:	b928      	cbnz	r0, 800f30e <__i2b+0x1a>
 800f302:	4b05      	ldr	r3, [pc, #20]	; (800f318 <__i2b+0x24>)
 800f304:	4805      	ldr	r0, [pc, #20]	; (800f31c <__i2b+0x28>)
 800f306:	f240 1145 	movw	r1, #325	; 0x145
 800f30a:	f001 ffd5 	bl	80112b8 <__assert_func>
 800f30e:	2301      	movs	r3, #1
 800f310:	6144      	str	r4, [r0, #20]
 800f312:	6103      	str	r3, [r0, #16]
 800f314:	bd10      	pop	{r4, pc}
 800f316:	bf00      	nop
 800f318:	08013a3b 	.word	0x08013a3b
 800f31c:	08013a4c 	.word	0x08013a4c

0800f320 <__multiply>:
 800f320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f324:	4691      	mov	r9, r2
 800f326:	690a      	ldr	r2, [r1, #16]
 800f328:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	bfb8      	it	lt
 800f330:	460b      	movlt	r3, r1
 800f332:	460c      	mov	r4, r1
 800f334:	bfbc      	itt	lt
 800f336:	464c      	movlt	r4, r9
 800f338:	4699      	movlt	r9, r3
 800f33a:	6927      	ldr	r7, [r4, #16]
 800f33c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f340:	68a3      	ldr	r3, [r4, #8]
 800f342:	6861      	ldr	r1, [r4, #4]
 800f344:	eb07 060a 	add.w	r6, r7, sl
 800f348:	42b3      	cmp	r3, r6
 800f34a:	b085      	sub	sp, #20
 800f34c:	bfb8      	it	lt
 800f34e:	3101      	addlt	r1, #1
 800f350:	f7ff fe90 	bl	800f074 <_Balloc>
 800f354:	b930      	cbnz	r0, 800f364 <__multiply+0x44>
 800f356:	4602      	mov	r2, r0
 800f358:	4b44      	ldr	r3, [pc, #272]	; (800f46c <__multiply+0x14c>)
 800f35a:	4845      	ldr	r0, [pc, #276]	; (800f470 <__multiply+0x150>)
 800f35c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f360:	f001 ffaa 	bl	80112b8 <__assert_func>
 800f364:	f100 0514 	add.w	r5, r0, #20
 800f368:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f36c:	462b      	mov	r3, r5
 800f36e:	2200      	movs	r2, #0
 800f370:	4543      	cmp	r3, r8
 800f372:	d321      	bcc.n	800f3b8 <__multiply+0x98>
 800f374:	f104 0314 	add.w	r3, r4, #20
 800f378:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f37c:	f109 0314 	add.w	r3, r9, #20
 800f380:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f384:	9202      	str	r2, [sp, #8]
 800f386:	1b3a      	subs	r2, r7, r4
 800f388:	3a15      	subs	r2, #21
 800f38a:	f022 0203 	bic.w	r2, r2, #3
 800f38e:	3204      	adds	r2, #4
 800f390:	f104 0115 	add.w	r1, r4, #21
 800f394:	428f      	cmp	r7, r1
 800f396:	bf38      	it	cc
 800f398:	2204      	movcc	r2, #4
 800f39a:	9201      	str	r2, [sp, #4]
 800f39c:	9a02      	ldr	r2, [sp, #8]
 800f39e:	9303      	str	r3, [sp, #12]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d80c      	bhi.n	800f3be <__multiply+0x9e>
 800f3a4:	2e00      	cmp	r6, #0
 800f3a6:	dd03      	ble.n	800f3b0 <__multiply+0x90>
 800f3a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d05b      	beq.n	800f468 <__multiply+0x148>
 800f3b0:	6106      	str	r6, [r0, #16]
 800f3b2:	b005      	add	sp, #20
 800f3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b8:	f843 2b04 	str.w	r2, [r3], #4
 800f3bc:	e7d8      	b.n	800f370 <__multiply+0x50>
 800f3be:	f8b3 a000 	ldrh.w	sl, [r3]
 800f3c2:	f1ba 0f00 	cmp.w	sl, #0
 800f3c6:	d024      	beq.n	800f412 <__multiply+0xf2>
 800f3c8:	f104 0e14 	add.w	lr, r4, #20
 800f3cc:	46a9      	mov	r9, r5
 800f3ce:	f04f 0c00 	mov.w	ip, #0
 800f3d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f3d6:	f8d9 1000 	ldr.w	r1, [r9]
 800f3da:	fa1f fb82 	uxth.w	fp, r2
 800f3de:	b289      	uxth	r1, r1
 800f3e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800f3e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f3e8:	f8d9 2000 	ldr.w	r2, [r9]
 800f3ec:	4461      	add	r1, ip
 800f3ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f3f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800f3f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f3fa:	b289      	uxth	r1, r1
 800f3fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f400:	4577      	cmp	r7, lr
 800f402:	f849 1b04 	str.w	r1, [r9], #4
 800f406:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f40a:	d8e2      	bhi.n	800f3d2 <__multiply+0xb2>
 800f40c:	9a01      	ldr	r2, [sp, #4]
 800f40e:	f845 c002 	str.w	ip, [r5, r2]
 800f412:	9a03      	ldr	r2, [sp, #12]
 800f414:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f418:	3304      	adds	r3, #4
 800f41a:	f1b9 0f00 	cmp.w	r9, #0
 800f41e:	d021      	beq.n	800f464 <__multiply+0x144>
 800f420:	6829      	ldr	r1, [r5, #0]
 800f422:	f104 0c14 	add.w	ip, r4, #20
 800f426:	46ae      	mov	lr, r5
 800f428:	f04f 0a00 	mov.w	sl, #0
 800f42c:	f8bc b000 	ldrh.w	fp, [ip]
 800f430:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f434:	fb09 220b 	mla	r2, r9, fp, r2
 800f438:	4452      	add	r2, sl
 800f43a:	b289      	uxth	r1, r1
 800f43c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f440:	f84e 1b04 	str.w	r1, [lr], #4
 800f444:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f448:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f44c:	f8be 1000 	ldrh.w	r1, [lr]
 800f450:	fb09 110a 	mla	r1, r9, sl, r1
 800f454:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f458:	4567      	cmp	r7, ip
 800f45a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f45e:	d8e5      	bhi.n	800f42c <__multiply+0x10c>
 800f460:	9a01      	ldr	r2, [sp, #4]
 800f462:	50a9      	str	r1, [r5, r2]
 800f464:	3504      	adds	r5, #4
 800f466:	e799      	b.n	800f39c <__multiply+0x7c>
 800f468:	3e01      	subs	r6, #1
 800f46a:	e79b      	b.n	800f3a4 <__multiply+0x84>
 800f46c:	08013a3b 	.word	0x08013a3b
 800f470:	08013a4c 	.word	0x08013a4c

0800f474 <__pow5mult>:
 800f474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f478:	4615      	mov	r5, r2
 800f47a:	f012 0203 	ands.w	r2, r2, #3
 800f47e:	4606      	mov	r6, r0
 800f480:	460f      	mov	r7, r1
 800f482:	d007      	beq.n	800f494 <__pow5mult+0x20>
 800f484:	4c25      	ldr	r4, [pc, #148]	; (800f51c <__pow5mult+0xa8>)
 800f486:	3a01      	subs	r2, #1
 800f488:	2300      	movs	r3, #0
 800f48a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f48e:	f7ff fe53 	bl	800f138 <__multadd>
 800f492:	4607      	mov	r7, r0
 800f494:	10ad      	asrs	r5, r5, #2
 800f496:	d03d      	beq.n	800f514 <__pow5mult+0xa0>
 800f498:	69f4      	ldr	r4, [r6, #28]
 800f49a:	b97c      	cbnz	r4, 800f4bc <__pow5mult+0x48>
 800f49c:	2010      	movs	r0, #16
 800f49e:	f7ff fd35 	bl	800ef0c <malloc>
 800f4a2:	4602      	mov	r2, r0
 800f4a4:	61f0      	str	r0, [r6, #28]
 800f4a6:	b928      	cbnz	r0, 800f4b4 <__pow5mult+0x40>
 800f4a8:	4b1d      	ldr	r3, [pc, #116]	; (800f520 <__pow5mult+0xac>)
 800f4aa:	481e      	ldr	r0, [pc, #120]	; (800f524 <__pow5mult+0xb0>)
 800f4ac:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f4b0:	f001 ff02 	bl	80112b8 <__assert_func>
 800f4b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f4b8:	6004      	str	r4, [r0, #0]
 800f4ba:	60c4      	str	r4, [r0, #12]
 800f4bc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f4c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f4c4:	b94c      	cbnz	r4, 800f4da <__pow5mult+0x66>
 800f4c6:	f240 2171 	movw	r1, #625	; 0x271
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	f7ff ff12 	bl	800f2f4 <__i2b>
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f4d6:	4604      	mov	r4, r0
 800f4d8:	6003      	str	r3, [r0, #0]
 800f4da:	f04f 0900 	mov.w	r9, #0
 800f4de:	07eb      	lsls	r3, r5, #31
 800f4e0:	d50a      	bpl.n	800f4f8 <__pow5mult+0x84>
 800f4e2:	4639      	mov	r1, r7
 800f4e4:	4622      	mov	r2, r4
 800f4e6:	4630      	mov	r0, r6
 800f4e8:	f7ff ff1a 	bl	800f320 <__multiply>
 800f4ec:	4639      	mov	r1, r7
 800f4ee:	4680      	mov	r8, r0
 800f4f0:	4630      	mov	r0, r6
 800f4f2:	f7ff fdff 	bl	800f0f4 <_Bfree>
 800f4f6:	4647      	mov	r7, r8
 800f4f8:	106d      	asrs	r5, r5, #1
 800f4fa:	d00b      	beq.n	800f514 <__pow5mult+0xa0>
 800f4fc:	6820      	ldr	r0, [r4, #0]
 800f4fe:	b938      	cbnz	r0, 800f510 <__pow5mult+0x9c>
 800f500:	4622      	mov	r2, r4
 800f502:	4621      	mov	r1, r4
 800f504:	4630      	mov	r0, r6
 800f506:	f7ff ff0b 	bl	800f320 <__multiply>
 800f50a:	6020      	str	r0, [r4, #0]
 800f50c:	f8c0 9000 	str.w	r9, [r0]
 800f510:	4604      	mov	r4, r0
 800f512:	e7e4      	b.n	800f4de <__pow5mult+0x6a>
 800f514:	4638      	mov	r0, r7
 800f516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f51a:	bf00      	nop
 800f51c:	08013b98 	.word	0x08013b98
 800f520:	080139cc 	.word	0x080139cc
 800f524:	08013a4c 	.word	0x08013a4c

0800f528 <__lshift>:
 800f528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f52c:	460c      	mov	r4, r1
 800f52e:	6849      	ldr	r1, [r1, #4]
 800f530:	6923      	ldr	r3, [r4, #16]
 800f532:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f536:	68a3      	ldr	r3, [r4, #8]
 800f538:	4607      	mov	r7, r0
 800f53a:	4691      	mov	r9, r2
 800f53c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f540:	f108 0601 	add.w	r6, r8, #1
 800f544:	42b3      	cmp	r3, r6
 800f546:	db0b      	blt.n	800f560 <__lshift+0x38>
 800f548:	4638      	mov	r0, r7
 800f54a:	f7ff fd93 	bl	800f074 <_Balloc>
 800f54e:	4605      	mov	r5, r0
 800f550:	b948      	cbnz	r0, 800f566 <__lshift+0x3e>
 800f552:	4602      	mov	r2, r0
 800f554:	4b28      	ldr	r3, [pc, #160]	; (800f5f8 <__lshift+0xd0>)
 800f556:	4829      	ldr	r0, [pc, #164]	; (800f5fc <__lshift+0xd4>)
 800f558:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f55c:	f001 feac 	bl	80112b8 <__assert_func>
 800f560:	3101      	adds	r1, #1
 800f562:	005b      	lsls	r3, r3, #1
 800f564:	e7ee      	b.n	800f544 <__lshift+0x1c>
 800f566:	2300      	movs	r3, #0
 800f568:	f100 0114 	add.w	r1, r0, #20
 800f56c:	f100 0210 	add.w	r2, r0, #16
 800f570:	4618      	mov	r0, r3
 800f572:	4553      	cmp	r3, sl
 800f574:	db33      	blt.n	800f5de <__lshift+0xb6>
 800f576:	6920      	ldr	r0, [r4, #16]
 800f578:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f57c:	f104 0314 	add.w	r3, r4, #20
 800f580:	f019 091f 	ands.w	r9, r9, #31
 800f584:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f588:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f58c:	d02b      	beq.n	800f5e6 <__lshift+0xbe>
 800f58e:	f1c9 0e20 	rsb	lr, r9, #32
 800f592:	468a      	mov	sl, r1
 800f594:	2200      	movs	r2, #0
 800f596:	6818      	ldr	r0, [r3, #0]
 800f598:	fa00 f009 	lsl.w	r0, r0, r9
 800f59c:	4310      	orrs	r0, r2
 800f59e:	f84a 0b04 	str.w	r0, [sl], #4
 800f5a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5a6:	459c      	cmp	ip, r3
 800f5a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800f5ac:	d8f3      	bhi.n	800f596 <__lshift+0x6e>
 800f5ae:	ebac 0304 	sub.w	r3, ip, r4
 800f5b2:	3b15      	subs	r3, #21
 800f5b4:	f023 0303 	bic.w	r3, r3, #3
 800f5b8:	3304      	adds	r3, #4
 800f5ba:	f104 0015 	add.w	r0, r4, #21
 800f5be:	4584      	cmp	ip, r0
 800f5c0:	bf38      	it	cc
 800f5c2:	2304      	movcc	r3, #4
 800f5c4:	50ca      	str	r2, [r1, r3]
 800f5c6:	b10a      	cbz	r2, 800f5cc <__lshift+0xa4>
 800f5c8:	f108 0602 	add.w	r6, r8, #2
 800f5cc:	3e01      	subs	r6, #1
 800f5ce:	4638      	mov	r0, r7
 800f5d0:	612e      	str	r6, [r5, #16]
 800f5d2:	4621      	mov	r1, r4
 800f5d4:	f7ff fd8e 	bl	800f0f4 <_Bfree>
 800f5d8:	4628      	mov	r0, r5
 800f5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5de:	f842 0f04 	str.w	r0, [r2, #4]!
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	e7c5      	b.n	800f572 <__lshift+0x4a>
 800f5e6:	3904      	subs	r1, #4
 800f5e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800f5f0:	459c      	cmp	ip, r3
 800f5f2:	d8f9      	bhi.n	800f5e8 <__lshift+0xc0>
 800f5f4:	e7ea      	b.n	800f5cc <__lshift+0xa4>
 800f5f6:	bf00      	nop
 800f5f8:	08013a3b 	.word	0x08013a3b
 800f5fc:	08013a4c 	.word	0x08013a4c

0800f600 <__mcmp>:
 800f600:	b530      	push	{r4, r5, lr}
 800f602:	6902      	ldr	r2, [r0, #16]
 800f604:	690c      	ldr	r4, [r1, #16]
 800f606:	1b12      	subs	r2, r2, r4
 800f608:	d10e      	bne.n	800f628 <__mcmp+0x28>
 800f60a:	f100 0314 	add.w	r3, r0, #20
 800f60e:	3114      	adds	r1, #20
 800f610:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f614:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f618:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f61c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f620:	42a5      	cmp	r5, r4
 800f622:	d003      	beq.n	800f62c <__mcmp+0x2c>
 800f624:	d305      	bcc.n	800f632 <__mcmp+0x32>
 800f626:	2201      	movs	r2, #1
 800f628:	4610      	mov	r0, r2
 800f62a:	bd30      	pop	{r4, r5, pc}
 800f62c:	4283      	cmp	r3, r0
 800f62e:	d3f3      	bcc.n	800f618 <__mcmp+0x18>
 800f630:	e7fa      	b.n	800f628 <__mcmp+0x28>
 800f632:	f04f 32ff 	mov.w	r2, #4294967295
 800f636:	e7f7      	b.n	800f628 <__mcmp+0x28>

0800f638 <__mdiff>:
 800f638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f63c:	460c      	mov	r4, r1
 800f63e:	4606      	mov	r6, r0
 800f640:	4611      	mov	r1, r2
 800f642:	4620      	mov	r0, r4
 800f644:	4690      	mov	r8, r2
 800f646:	f7ff ffdb 	bl	800f600 <__mcmp>
 800f64a:	1e05      	subs	r5, r0, #0
 800f64c:	d110      	bne.n	800f670 <__mdiff+0x38>
 800f64e:	4629      	mov	r1, r5
 800f650:	4630      	mov	r0, r6
 800f652:	f7ff fd0f 	bl	800f074 <_Balloc>
 800f656:	b930      	cbnz	r0, 800f666 <__mdiff+0x2e>
 800f658:	4b3a      	ldr	r3, [pc, #232]	; (800f744 <__mdiff+0x10c>)
 800f65a:	4602      	mov	r2, r0
 800f65c:	f240 2137 	movw	r1, #567	; 0x237
 800f660:	4839      	ldr	r0, [pc, #228]	; (800f748 <__mdiff+0x110>)
 800f662:	f001 fe29 	bl	80112b8 <__assert_func>
 800f666:	2301      	movs	r3, #1
 800f668:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f66c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f670:	bfa4      	itt	ge
 800f672:	4643      	movge	r3, r8
 800f674:	46a0      	movge	r8, r4
 800f676:	4630      	mov	r0, r6
 800f678:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f67c:	bfa6      	itte	ge
 800f67e:	461c      	movge	r4, r3
 800f680:	2500      	movge	r5, #0
 800f682:	2501      	movlt	r5, #1
 800f684:	f7ff fcf6 	bl	800f074 <_Balloc>
 800f688:	b920      	cbnz	r0, 800f694 <__mdiff+0x5c>
 800f68a:	4b2e      	ldr	r3, [pc, #184]	; (800f744 <__mdiff+0x10c>)
 800f68c:	4602      	mov	r2, r0
 800f68e:	f240 2145 	movw	r1, #581	; 0x245
 800f692:	e7e5      	b.n	800f660 <__mdiff+0x28>
 800f694:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f698:	6926      	ldr	r6, [r4, #16]
 800f69a:	60c5      	str	r5, [r0, #12]
 800f69c:	f104 0914 	add.w	r9, r4, #20
 800f6a0:	f108 0514 	add.w	r5, r8, #20
 800f6a4:	f100 0e14 	add.w	lr, r0, #20
 800f6a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f6ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f6b0:	f108 0210 	add.w	r2, r8, #16
 800f6b4:	46f2      	mov	sl, lr
 800f6b6:	2100      	movs	r1, #0
 800f6b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800f6bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f6c0:	fa11 f88b 	uxtah	r8, r1, fp
 800f6c4:	b299      	uxth	r1, r3
 800f6c6:	0c1b      	lsrs	r3, r3, #16
 800f6c8:	eba8 0801 	sub.w	r8, r8, r1
 800f6cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f6d0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f6d4:	fa1f f888 	uxth.w	r8, r8
 800f6d8:	1419      	asrs	r1, r3, #16
 800f6da:	454e      	cmp	r6, r9
 800f6dc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f6e0:	f84a 3b04 	str.w	r3, [sl], #4
 800f6e4:	d8e8      	bhi.n	800f6b8 <__mdiff+0x80>
 800f6e6:	1b33      	subs	r3, r6, r4
 800f6e8:	3b15      	subs	r3, #21
 800f6ea:	f023 0303 	bic.w	r3, r3, #3
 800f6ee:	3304      	adds	r3, #4
 800f6f0:	3415      	adds	r4, #21
 800f6f2:	42a6      	cmp	r6, r4
 800f6f4:	bf38      	it	cc
 800f6f6:	2304      	movcc	r3, #4
 800f6f8:	441d      	add	r5, r3
 800f6fa:	4473      	add	r3, lr
 800f6fc:	469e      	mov	lr, r3
 800f6fe:	462e      	mov	r6, r5
 800f700:	4566      	cmp	r6, ip
 800f702:	d30e      	bcc.n	800f722 <__mdiff+0xea>
 800f704:	f10c 0203 	add.w	r2, ip, #3
 800f708:	1b52      	subs	r2, r2, r5
 800f70a:	f022 0203 	bic.w	r2, r2, #3
 800f70e:	3d03      	subs	r5, #3
 800f710:	45ac      	cmp	ip, r5
 800f712:	bf38      	it	cc
 800f714:	2200      	movcc	r2, #0
 800f716:	4413      	add	r3, r2
 800f718:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f71c:	b17a      	cbz	r2, 800f73e <__mdiff+0x106>
 800f71e:	6107      	str	r7, [r0, #16]
 800f720:	e7a4      	b.n	800f66c <__mdiff+0x34>
 800f722:	f856 8b04 	ldr.w	r8, [r6], #4
 800f726:	fa11 f288 	uxtah	r2, r1, r8
 800f72a:	1414      	asrs	r4, r2, #16
 800f72c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f730:	b292      	uxth	r2, r2
 800f732:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f736:	f84e 2b04 	str.w	r2, [lr], #4
 800f73a:	1421      	asrs	r1, r4, #16
 800f73c:	e7e0      	b.n	800f700 <__mdiff+0xc8>
 800f73e:	3f01      	subs	r7, #1
 800f740:	e7ea      	b.n	800f718 <__mdiff+0xe0>
 800f742:	bf00      	nop
 800f744:	08013a3b 	.word	0x08013a3b
 800f748:	08013a4c 	.word	0x08013a4c

0800f74c <__ulp>:
 800f74c:	b082      	sub	sp, #8
 800f74e:	ed8d 0b00 	vstr	d0, [sp]
 800f752:	9a01      	ldr	r2, [sp, #4]
 800f754:	4b0f      	ldr	r3, [pc, #60]	; (800f794 <__ulp+0x48>)
 800f756:	4013      	ands	r3, r2
 800f758:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	dc08      	bgt.n	800f772 <__ulp+0x26>
 800f760:	425b      	negs	r3, r3
 800f762:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f766:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f76a:	da04      	bge.n	800f776 <__ulp+0x2a>
 800f76c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f770:	4113      	asrs	r3, r2
 800f772:	2200      	movs	r2, #0
 800f774:	e008      	b.n	800f788 <__ulp+0x3c>
 800f776:	f1a2 0314 	sub.w	r3, r2, #20
 800f77a:	2b1e      	cmp	r3, #30
 800f77c:	bfda      	itte	le
 800f77e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f782:	40da      	lsrle	r2, r3
 800f784:	2201      	movgt	r2, #1
 800f786:	2300      	movs	r3, #0
 800f788:	4619      	mov	r1, r3
 800f78a:	4610      	mov	r0, r2
 800f78c:	ec41 0b10 	vmov	d0, r0, r1
 800f790:	b002      	add	sp, #8
 800f792:	4770      	bx	lr
 800f794:	7ff00000 	.word	0x7ff00000

0800f798 <__b2d>:
 800f798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f79c:	6906      	ldr	r6, [r0, #16]
 800f79e:	f100 0814 	add.w	r8, r0, #20
 800f7a2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f7a6:	1f37      	subs	r7, r6, #4
 800f7a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f7ac:	4610      	mov	r0, r2
 800f7ae:	f7ff fd53 	bl	800f258 <__hi0bits>
 800f7b2:	f1c0 0320 	rsb	r3, r0, #32
 800f7b6:	280a      	cmp	r0, #10
 800f7b8:	600b      	str	r3, [r1, #0]
 800f7ba:	491b      	ldr	r1, [pc, #108]	; (800f828 <__b2d+0x90>)
 800f7bc:	dc15      	bgt.n	800f7ea <__b2d+0x52>
 800f7be:	f1c0 0c0b 	rsb	ip, r0, #11
 800f7c2:	fa22 f30c 	lsr.w	r3, r2, ip
 800f7c6:	45b8      	cmp	r8, r7
 800f7c8:	ea43 0501 	orr.w	r5, r3, r1
 800f7cc:	bf34      	ite	cc
 800f7ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f7d2:	2300      	movcs	r3, #0
 800f7d4:	3015      	adds	r0, #21
 800f7d6:	fa02 f000 	lsl.w	r0, r2, r0
 800f7da:	fa23 f30c 	lsr.w	r3, r3, ip
 800f7de:	4303      	orrs	r3, r0
 800f7e0:	461c      	mov	r4, r3
 800f7e2:	ec45 4b10 	vmov	d0, r4, r5
 800f7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7ea:	45b8      	cmp	r8, r7
 800f7ec:	bf3a      	itte	cc
 800f7ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f7f2:	f1a6 0708 	subcc.w	r7, r6, #8
 800f7f6:	2300      	movcs	r3, #0
 800f7f8:	380b      	subs	r0, #11
 800f7fa:	d012      	beq.n	800f822 <__b2d+0x8a>
 800f7fc:	f1c0 0120 	rsb	r1, r0, #32
 800f800:	fa23 f401 	lsr.w	r4, r3, r1
 800f804:	4082      	lsls	r2, r0
 800f806:	4322      	orrs	r2, r4
 800f808:	4547      	cmp	r7, r8
 800f80a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800f80e:	bf8c      	ite	hi
 800f810:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f814:	2200      	movls	r2, #0
 800f816:	4083      	lsls	r3, r0
 800f818:	40ca      	lsrs	r2, r1
 800f81a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f81e:	4313      	orrs	r3, r2
 800f820:	e7de      	b.n	800f7e0 <__b2d+0x48>
 800f822:	ea42 0501 	orr.w	r5, r2, r1
 800f826:	e7db      	b.n	800f7e0 <__b2d+0x48>
 800f828:	3ff00000 	.word	0x3ff00000

0800f82c <__d2b>:
 800f82c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f830:	460f      	mov	r7, r1
 800f832:	2101      	movs	r1, #1
 800f834:	ec59 8b10 	vmov	r8, r9, d0
 800f838:	4616      	mov	r6, r2
 800f83a:	f7ff fc1b 	bl	800f074 <_Balloc>
 800f83e:	4604      	mov	r4, r0
 800f840:	b930      	cbnz	r0, 800f850 <__d2b+0x24>
 800f842:	4602      	mov	r2, r0
 800f844:	4b24      	ldr	r3, [pc, #144]	; (800f8d8 <__d2b+0xac>)
 800f846:	4825      	ldr	r0, [pc, #148]	; (800f8dc <__d2b+0xb0>)
 800f848:	f240 310f 	movw	r1, #783	; 0x30f
 800f84c:	f001 fd34 	bl	80112b8 <__assert_func>
 800f850:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f854:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f858:	bb2d      	cbnz	r5, 800f8a6 <__d2b+0x7a>
 800f85a:	9301      	str	r3, [sp, #4]
 800f85c:	f1b8 0300 	subs.w	r3, r8, #0
 800f860:	d026      	beq.n	800f8b0 <__d2b+0x84>
 800f862:	4668      	mov	r0, sp
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	f7ff fd17 	bl	800f298 <__lo0bits>
 800f86a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f86e:	b1e8      	cbz	r0, 800f8ac <__d2b+0x80>
 800f870:	f1c0 0320 	rsb	r3, r0, #32
 800f874:	fa02 f303 	lsl.w	r3, r2, r3
 800f878:	430b      	orrs	r3, r1
 800f87a:	40c2      	lsrs	r2, r0
 800f87c:	6163      	str	r3, [r4, #20]
 800f87e:	9201      	str	r2, [sp, #4]
 800f880:	9b01      	ldr	r3, [sp, #4]
 800f882:	61a3      	str	r3, [r4, #24]
 800f884:	2b00      	cmp	r3, #0
 800f886:	bf14      	ite	ne
 800f888:	2202      	movne	r2, #2
 800f88a:	2201      	moveq	r2, #1
 800f88c:	6122      	str	r2, [r4, #16]
 800f88e:	b1bd      	cbz	r5, 800f8c0 <__d2b+0x94>
 800f890:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f894:	4405      	add	r5, r0
 800f896:	603d      	str	r5, [r7, #0]
 800f898:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f89c:	6030      	str	r0, [r6, #0]
 800f89e:	4620      	mov	r0, r4
 800f8a0:	b003      	add	sp, #12
 800f8a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f8aa:	e7d6      	b.n	800f85a <__d2b+0x2e>
 800f8ac:	6161      	str	r1, [r4, #20]
 800f8ae:	e7e7      	b.n	800f880 <__d2b+0x54>
 800f8b0:	a801      	add	r0, sp, #4
 800f8b2:	f7ff fcf1 	bl	800f298 <__lo0bits>
 800f8b6:	9b01      	ldr	r3, [sp, #4]
 800f8b8:	6163      	str	r3, [r4, #20]
 800f8ba:	3020      	adds	r0, #32
 800f8bc:	2201      	movs	r2, #1
 800f8be:	e7e5      	b.n	800f88c <__d2b+0x60>
 800f8c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f8c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f8c8:	6038      	str	r0, [r7, #0]
 800f8ca:	6918      	ldr	r0, [r3, #16]
 800f8cc:	f7ff fcc4 	bl	800f258 <__hi0bits>
 800f8d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f8d4:	e7e2      	b.n	800f89c <__d2b+0x70>
 800f8d6:	bf00      	nop
 800f8d8:	08013a3b 	.word	0x08013a3b
 800f8dc:	08013a4c 	.word	0x08013a4c

0800f8e0 <__ratio>:
 800f8e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e4:	4688      	mov	r8, r1
 800f8e6:	4669      	mov	r1, sp
 800f8e8:	4681      	mov	r9, r0
 800f8ea:	f7ff ff55 	bl	800f798 <__b2d>
 800f8ee:	a901      	add	r1, sp, #4
 800f8f0:	4640      	mov	r0, r8
 800f8f2:	ec55 4b10 	vmov	r4, r5, d0
 800f8f6:	f7ff ff4f 	bl	800f798 <__b2d>
 800f8fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f8fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f902:	eba3 0c02 	sub.w	ip, r3, r2
 800f906:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f90a:	1a9b      	subs	r3, r3, r2
 800f90c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f910:	ec51 0b10 	vmov	r0, r1, d0
 800f914:	2b00      	cmp	r3, #0
 800f916:	bfd6      	itet	le
 800f918:	460a      	movle	r2, r1
 800f91a:	462a      	movgt	r2, r5
 800f91c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f920:	468b      	mov	fp, r1
 800f922:	462f      	mov	r7, r5
 800f924:	bfd4      	ite	le
 800f926:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f92a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f92e:	4620      	mov	r0, r4
 800f930:	ee10 2a10 	vmov	r2, s0
 800f934:	465b      	mov	r3, fp
 800f936:	4639      	mov	r1, r7
 800f938:	f7f0 ff88 	bl	800084c <__aeabi_ddiv>
 800f93c:	ec41 0b10 	vmov	d0, r0, r1
 800f940:	b003      	add	sp, #12
 800f942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f946 <__copybits>:
 800f946:	3901      	subs	r1, #1
 800f948:	b570      	push	{r4, r5, r6, lr}
 800f94a:	1149      	asrs	r1, r1, #5
 800f94c:	6914      	ldr	r4, [r2, #16]
 800f94e:	3101      	adds	r1, #1
 800f950:	f102 0314 	add.w	r3, r2, #20
 800f954:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f958:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f95c:	1f05      	subs	r5, r0, #4
 800f95e:	42a3      	cmp	r3, r4
 800f960:	d30c      	bcc.n	800f97c <__copybits+0x36>
 800f962:	1aa3      	subs	r3, r4, r2
 800f964:	3b11      	subs	r3, #17
 800f966:	f023 0303 	bic.w	r3, r3, #3
 800f96a:	3211      	adds	r2, #17
 800f96c:	42a2      	cmp	r2, r4
 800f96e:	bf88      	it	hi
 800f970:	2300      	movhi	r3, #0
 800f972:	4418      	add	r0, r3
 800f974:	2300      	movs	r3, #0
 800f976:	4288      	cmp	r0, r1
 800f978:	d305      	bcc.n	800f986 <__copybits+0x40>
 800f97a:	bd70      	pop	{r4, r5, r6, pc}
 800f97c:	f853 6b04 	ldr.w	r6, [r3], #4
 800f980:	f845 6f04 	str.w	r6, [r5, #4]!
 800f984:	e7eb      	b.n	800f95e <__copybits+0x18>
 800f986:	f840 3b04 	str.w	r3, [r0], #4
 800f98a:	e7f4      	b.n	800f976 <__copybits+0x30>

0800f98c <__any_on>:
 800f98c:	f100 0214 	add.w	r2, r0, #20
 800f990:	6900      	ldr	r0, [r0, #16]
 800f992:	114b      	asrs	r3, r1, #5
 800f994:	4298      	cmp	r0, r3
 800f996:	b510      	push	{r4, lr}
 800f998:	db11      	blt.n	800f9be <__any_on+0x32>
 800f99a:	dd0a      	ble.n	800f9b2 <__any_on+0x26>
 800f99c:	f011 011f 	ands.w	r1, r1, #31
 800f9a0:	d007      	beq.n	800f9b2 <__any_on+0x26>
 800f9a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f9a6:	fa24 f001 	lsr.w	r0, r4, r1
 800f9aa:	fa00 f101 	lsl.w	r1, r0, r1
 800f9ae:	428c      	cmp	r4, r1
 800f9b0:	d10b      	bne.n	800f9ca <__any_on+0x3e>
 800f9b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f9b6:	4293      	cmp	r3, r2
 800f9b8:	d803      	bhi.n	800f9c2 <__any_on+0x36>
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	bd10      	pop	{r4, pc}
 800f9be:	4603      	mov	r3, r0
 800f9c0:	e7f7      	b.n	800f9b2 <__any_on+0x26>
 800f9c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f9c6:	2900      	cmp	r1, #0
 800f9c8:	d0f5      	beq.n	800f9b6 <__any_on+0x2a>
 800f9ca:	2001      	movs	r0, #1
 800f9cc:	e7f6      	b.n	800f9bc <__any_on+0x30>

0800f9ce <sulp>:
 800f9ce:	b570      	push	{r4, r5, r6, lr}
 800f9d0:	4604      	mov	r4, r0
 800f9d2:	460d      	mov	r5, r1
 800f9d4:	ec45 4b10 	vmov	d0, r4, r5
 800f9d8:	4616      	mov	r6, r2
 800f9da:	f7ff feb7 	bl	800f74c <__ulp>
 800f9de:	ec51 0b10 	vmov	r0, r1, d0
 800f9e2:	b17e      	cbz	r6, 800fa04 <sulp+0x36>
 800f9e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f9e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	dd09      	ble.n	800fa04 <sulp+0x36>
 800f9f0:	051b      	lsls	r3, r3, #20
 800f9f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f9f6:	2400      	movs	r4, #0
 800f9f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f9fc:	4622      	mov	r2, r4
 800f9fe:	462b      	mov	r3, r5
 800fa00:	f7f0 fdfa 	bl	80005f8 <__aeabi_dmul>
 800fa04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fa08 <_strtod_l>:
 800fa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa0c:	ed2d 8b02 	vpush	{d8}
 800fa10:	b09b      	sub	sp, #108	; 0x6c
 800fa12:	4604      	mov	r4, r0
 800fa14:	9213      	str	r2, [sp, #76]	; 0x4c
 800fa16:	2200      	movs	r2, #0
 800fa18:	9216      	str	r2, [sp, #88]	; 0x58
 800fa1a:	460d      	mov	r5, r1
 800fa1c:	f04f 0800 	mov.w	r8, #0
 800fa20:	f04f 0900 	mov.w	r9, #0
 800fa24:	460a      	mov	r2, r1
 800fa26:	9215      	str	r2, [sp, #84]	; 0x54
 800fa28:	7811      	ldrb	r1, [r2, #0]
 800fa2a:	292b      	cmp	r1, #43	; 0x2b
 800fa2c:	d04c      	beq.n	800fac8 <_strtod_l+0xc0>
 800fa2e:	d83a      	bhi.n	800faa6 <_strtod_l+0x9e>
 800fa30:	290d      	cmp	r1, #13
 800fa32:	d834      	bhi.n	800fa9e <_strtod_l+0x96>
 800fa34:	2908      	cmp	r1, #8
 800fa36:	d834      	bhi.n	800faa2 <_strtod_l+0x9a>
 800fa38:	2900      	cmp	r1, #0
 800fa3a:	d03d      	beq.n	800fab8 <_strtod_l+0xb0>
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	920a      	str	r2, [sp, #40]	; 0x28
 800fa40:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800fa42:	7832      	ldrb	r2, [r6, #0]
 800fa44:	2a30      	cmp	r2, #48	; 0x30
 800fa46:	f040 80b4 	bne.w	800fbb2 <_strtod_l+0x1aa>
 800fa4a:	7872      	ldrb	r2, [r6, #1]
 800fa4c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fa50:	2a58      	cmp	r2, #88	; 0x58
 800fa52:	d170      	bne.n	800fb36 <_strtod_l+0x12e>
 800fa54:	9302      	str	r3, [sp, #8]
 800fa56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa58:	9301      	str	r3, [sp, #4]
 800fa5a:	ab16      	add	r3, sp, #88	; 0x58
 800fa5c:	9300      	str	r3, [sp, #0]
 800fa5e:	4a8e      	ldr	r2, [pc, #568]	; (800fc98 <_strtod_l+0x290>)
 800fa60:	ab17      	add	r3, sp, #92	; 0x5c
 800fa62:	a915      	add	r1, sp, #84	; 0x54
 800fa64:	4620      	mov	r0, r4
 800fa66:	f001 fcc3 	bl	80113f0 <__gethex>
 800fa6a:	f010 070f 	ands.w	r7, r0, #15
 800fa6e:	4605      	mov	r5, r0
 800fa70:	d005      	beq.n	800fa7e <_strtod_l+0x76>
 800fa72:	2f06      	cmp	r7, #6
 800fa74:	d12a      	bne.n	800facc <_strtod_l+0xc4>
 800fa76:	3601      	adds	r6, #1
 800fa78:	2300      	movs	r3, #0
 800fa7a:	9615      	str	r6, [sp, #84]	; 0x54
 800fa7c:	930a      	str	r3, [sp, #40]	; 0x28
 800fa7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	f040 857f 	bne.w	8010584 <_strtod_l+0xb7c>
 800fa86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa88:	b1db      	cbz	r3, 800fac2 <_strtod_l+0xba>
 800fa8a:	4642      	mov	r2, r8
 800fa8c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fa90:	ec43 2b10 	vmov	d0, r2, r3
 800fa94:	b01b      	add	sp, #108	; 0x6c
 800fa96:	ecbd 8b02 	vpop	{d8}
 800fa9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa9e:	2920      	cmp	r1, #32
 800faa0:	d1cc      	bne.n	800fa3c <_strtod_l+0x34>
 800faa2:	3201      	adds	r2, #1
 800faa4:	e7bf      	b.n	800fa26 <_strtod_l+0x1e>
 800faa6:	292d      	cmp	r1, #45	; 0x2d
 800faa8:	d1c8      	bne.n	800fa3c <_strtod_l+0x34>
 800faaa:	2101      	movs	r1, #1
 800faac:	910a      	str	r1, [sp, #40]	; 0x28
 800faae:	1c51      	adds	r1, r2, #1
 800fab0:	9115      	str	r1, [sp, #84]	; 0x54
 800fab2:	7852      	ldrb	r2, [r2, #1]
 800fab4:	2a00      	cmp	r2, #0
 800fab6:	d1c3      	bne.n	800fa40 <_strtod_l+0x38>
 800fab8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800faba:	9515      	str	r5, [sp, #84]	; 0x54
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	f040 855f 	bne.w	8010580 <_strtod_l+0xb78>
 800fac2:	4642      	mov	r2, r8
 800fac4:	464b      	mov	r3, r9
 800fac6:	e7e3      	b.n	800fa90 <_strtod_l+0x88>
 800fac8:	2100      	movs	r1, #0
 800faca:	e7ef      	b.n	800faac <_strtod_l+0xa4>
 800facc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800face:	b13a      	cbz	r2, 800fae0 <_strtod_l+0xd8>
 800fad0:	2135      	movs	r1, #53	; 0x35
 800fad2:	a818      	add	r0, sp, #96	; 0x60
 800fad4:	f7ff ff37 	bl	800f946 <__copybits>
 800fad8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fada:	4620      	mov	r0, r4
 800fadc:	f7ff fb0a 	bl	800f0f4 <_Bfree>
 800fae0:	3f01      	subs	r7, #1
 800fae2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fae4:	2f04      	cmp	r7, #4
 800fae6:	d806      	bhi.n	800faf6 <_strtod_l+0xee>
 800fae8:	e8df f007 	tbb	[pc, r7]
 800faec:	201d0314 	.word	0x201d0314
 800faf0:	14          	.byte	0x14
 800faf1:	00          	.byte	0x00
 800faf2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800faf6:	05e9      	lsls	r1, r5, #23
 800faf8:	bf48      	it	mi
 800fafa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800fafe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fb02:	0d1b      	lsrs	r3, r3, #20
 800fb04:	051b      	lsls	r3, r3, #20
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d1b9      	bne.n	800fa7e <_strtod_l+0x76>
 800fb0a:	f7fe faef 	bl	800e0ec <__errno>
 800fb0e:	2322      	movs	r3, #34	; 0x22
 800fb10:	6003      	str	r3, [r0, #0]
 800fb12:	e7b4      	b.n	800fa7e <_strtod_l+0x76>
 800fb14:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800fb18:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fb1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fb20:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800fb24:	e7e7      	b.n	800faf6 <_strtod_l+0xee>
 800fb26:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800fca0 <_strtod_l+0x298>
 800fb2a:	e7e4      	b.n	800faf6 <_strtod_l+0xee>
 800fb2c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800fb30:	f04f 38ff 	mov.w	r8, #4294967295
 800fb34:	e7df      	b.n	800faf6 <_strtod_l+0xee>
 800fb36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb38:	1c5a      	adds	r2, r3, #1
 800fb3a:	9215      	str	r2, [sp, #84]	; 0x54
 800fb3c:	785b      	ldrb	r3, [r3, #1]
 800fb3e:	2b30      	cmp	r3, #48	; 0x30
 800fb40:	d0f9      	beq.n	800fb36 <_strtod_l+0x12e>
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d09b      	beq.n	800fa7e <_strtod_l+0x76>
 800fb46:	2301      	movs	r3, #1
 800fb48:	f04f 0a00 	mov.w	sl, #0
 800fb4c:	9304      	str	r3, [sp, #16]
 800fb4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb50:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb52:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800fb56:	46d3      	mov	fp, sl
 800fb58:	220a      	movs	r2, #10
 800fb5a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800fb5c:	7806      	ldrb	r6, [r0, #0]
 800fb5e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fb62:	b2d9      	uxtb	r1, r3
 800fb64:	2909      	cmp	r1, #9
 800fb66:	d926      	bls.n	800fbb6 <_strtod_l+0x1ae>
 800fb68:	494c      	ldr	r1, [pc, #304]	; (800fc9c <_strtod_l+0x294>)
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	f001 fb79 	bl	8011262 <strncmp>
 800fb70:	2800      	cmp	r0, #0
 800fb72:	d030      	beq.n	800fbd6 <_strtod_l+0x1ce>
 800fb74:	2000      	movs	r0, #0
 800fb76:	4632      	mov	r2, r6
 800fb78:	9005      	str	r0, [sp, #20]
 800fb7a:	465e      	mov	r6, fp
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2a65      	cmp	r2, #101	; 0x65
 800fb80:	d001      	beq.n	800fb86 <_strtod_l+0x17e>
 800fb82:	2a45      	cmp	r2, #69	; 0x45
 800fb84:	d113      	bne.n	800fbae <_strtod_l+0x1a6>
 800fb86:	b91e      	cbnz	r6, 800fb90 <_strtod_l+0x188>
 800fb88:	9a04      	ldr	r2, [sp, #16]
 800fb8a:	4302      	orrs	r2, r0
 800fb8c:	d094      	beq.n	800fab8 <_strtod_l+0xb0>
 800fb8e:	2600      	movs	r6, #0
 800fb90:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800fb92:	1c6a      	adds	r2, r5, #1
 800fb94:	9215      	str	r2, [sp, #84]	; 0x54
 800fb96:	786a      	ldrb	r2, [r5, #1]
 800fb98:	2a2b      	cmp	r2, #43	; 0x2b
 800fb9a:	d074      	beq.n	800fc86 <_strtod_l+0x27e>
 800fb9c:	2a2d      	cmp	r2, #45	; 0x2d
 800fb9e:	d078      	beq.n	800fc92 <_strtod_l+0x28a>
 800fba0:	f04f 0c00 	mov.w	ip, #0
 800fba4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fba8:	2909      	cmp	r1, #9
 800fbaa:	d97f      	bls.n	800fcac <_strtod_l+0x2a4>
 800fbac:	9515      	str	r5, [sp, #84]	; 0x54
 800fbae:	2700      	movs	r7, #0
 800fbb0:	e09e      	b.n	800fcf0 <_strtod_l+0x2e8>
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	e7c8      	b.n	800fb48 <_strtod_l+0x140>
 800fbb6:	f1bb 0f08 	cmp.w	fp, #8
 800fbba:	bfd8      	it	le
 800fbbc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800fbbe:	f100 0001 	add.w	r0, r0, #1
 800fbc2:	bfda      	itte	le
 800fbc4:	fb02 3301 	mlale	r3, r2, r1, r3
 800fbc8:	9309      	strle	r3, [sp, #36]	; 0x24
 800fbca:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800fbce:	f10b 0b01 	add.w	fp, fp, #1
 800fbd2:	9015      	str	r0, [sp, #84]	; 0x54
 800fbd4:	e7c1      	b.n	800fb5a <_strtod_l+0x152>
 800fbd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fbd8:	1c5a      	adds	r2, r3, #1
 800fbda:	9215      	str	r2, [sp, #84]	; 0x54
 800fbdc:	785a      	ldrb	r2, [r3, #1]
 800fbde:	f1bb 0f00 	cmp.w	fp, #0
 800fbe2:	d037      	beq.n	800fc54 <_strtod_l+0x24c>
 800fbe4:	9005      	str	r0, [sp, #20]
 800fbe6:	465e      	mov	r6, fp
 800fbe8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fbec:	2b09      	cmp	r3, #9
 800fbee:	d912      	bls.n	800fc16 <_strtod_l+0x20e>
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	e7c4      	b.n	800fb7e <_strtod_l+0x176>
 800fbf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fbf6:	1c5a      	adds	r2, r3, #1
 800fbf8:	9215      	str	r2, [sp, #84]	; 0x54
 800fbfa:	785a      	ldrb	r2, [r3, #1]
 800fbfc:	3001      	adds	r0, #1
 800fbfe:	2a30      	cmp	r2, #48	; 0x30
 800fc00:	d0f8      	beq.n	800fbf4 <_strtod_l+0x1ec>
 800fc02:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fc06:	2b08      	cmp	r3, #8
 800fc08:	f200 84c1 	bhi.w	801058e <_strtod_l+0xb86>
 800fc0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc0e:	9005      	str	r0, [sp, #20]
 800fc10:	2000      	movs	r0, #0
 800fc12:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc14:	4606      	mov	r6, r0
 800fc16:	3a30      	subs	r2, #48	; 0x30
 800fc18:	f100 0301 	add.w	r3, r0, #1
 800fc1c:	d014      	beq.n	800fc48 <_strtod_l+0x240>
 800fc1e:	9905      	ldr	r1, [sp, #20]
 800fc20:	4419      	add	r1, r3
 800fc22:	9105      	str	r1, [sp, #20]
 800fc24:	4633      	mov	r3, r6
 800fc26:	eb00 0c06 	add.w	ip, r0, r6
 800fc2a:	210a      	movs	r1, #10
 800fc2c:	4563      	cmp	r3, ip
 800fc2e:	d113      	bne.n	800fc58 <_strtod_l+0x250>
 800fc30:	1833      	adds	r3, r6, r0
 800fc32:	2b08      	cmp	r3, #8
 800fc34:	f106 0601 	add.w	r6, r6, #1
 800fc38:	4406      	add	r6, r0
 800fc3a:	dc1a      	bgt.n	800fc72 <_strtod_l+0x26a>
 800fc3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc3e:	230a      	movs	r3, #10
 800fc40:	fb03 2301 	mla	r3, r3, r1, r2
 800fc44:	9309      	str	r3, [sp, #36]	; 0x24
 800fc46:	2300      	movs	r3, #0
 800fc48:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fc4a:	1c51      	adds	r1, r2, #1
 800fc4c:	9115      	str	r1, [sp, #84]	; 0x54
 800fc4e:	7852      	ldrb	r2, [r2, #1]
 800fc50:	4618      	mov	r0, r3
 800fc52:	e7c9      	b.n	800fbe8 <_strtod_l+0x1e0>
 800fc54:	4658      	mov	r0, fp
 800fc56:	e7d2      	b.n	800fbfe <_strtod_l+0x1f6>
 800fc58:	2b08      	cmp	r3, #8
 800fc5a:	f103 0301 	add.w	r3, r3, #1
 800fc5e:	dc03      	bgt.n	800fc68 <_strtod_l+0x260>
 800fc60:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fc62:	434f      	muls	r7, r1
 800fc64:	9709      	str	r7, [sp, #36]	; 0x24
 800fc66:	e7e1      	b.n	800fc2c <_strtod_l+0x224>
 800fc68:	2b10      	cmp	r3, #16
 800fc6a:	bfd8      	it	le
 800fc6c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800fc70:	e7dc      	b.n	800fc2c <_strtod_l+0x224>
 800fc72:	2e10      	cmp	r6, #16
 800fc74:	bfdc      	itt	le
 800fc76:	230a      	movle	r3, #10
 800fc78:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800fc7c:	e7e3      	b.n	800fc46 <_strtod_l+0x23e>
 800fc7e:	2300      	movs	r3, #0
 800fc80:	9305      	str	r3, [sp, #20]
 800fc82:	2301      	movs	r3, #1
 800fc84:	e780      	b.n	800fb88 <_strtod_l+0x180>
 800fc86:	f04f 0c00 	mov.w	ip, #0
 800fc8a:	1caa      	adds	r2, r5, #2
 800fc8c:	9215      	str	r2, [sp, #84]	; 0x54
 800fc8e:	78aa      	ldrb	r2, [r5, #2]
 800fc90:	e788      	b.n	800fba4 <_strtod_l+0x19c>
 800fc92:	f04f 0c01 	mov.w	ip, #1
 800fc96:	e7f8      	b.n	800fc8a <_strtod_l+0x282>
 800fc98:	08013ba8 	.word	0x08013ba8
 800fc9c:	08013ba4 	.word	0x08013ba4
 800fca0:	7ff00000 	.word	0x7ff00000
 800fca4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fca6:	1c51      	adds	r1, r2, #1
 800fca8:	9115      	str	r1, [sp, #84]	; 0x54
 800fcaa:	7852      	ldrb	r2, [r2, #1]
 800fcac:	2a30      	cmp	r2, #48	; 0x30
 800fcae:	d0f9      	beq.n	800fca4 <_strtod_l+0x29c>
 800fcb0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fcb4:	2908      	cmp	r1, #8
 800fcb6:	f63f af7a 	bhi.w	800fbae <_strtod_l+0x1a6>
 800fcba:	3a30      	subs	r2, #48	; 0x30
 800fcbc:	9208      	str	r2, [sp, #32]
 800fcbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fcc0:	920c      	str	r2, [sp, #48]	; 0x30
 800fcc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fcc4:	1c57      	adds	r7, r2, #1
 800fcc6:	9715      	str	r7, [sp, #84]	; 0x54
 800fcc8:	7852      	ldrb	r2, [r2, #1]
 800fcca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fcce:	f1be 0f09 	cmp.w	lr, #9
 800fcd2:	d938      	bls.n	800fd46 <_strtod_l+0x33e>
 800fcd4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fcd6:	1a7f      	subs	r7, r7, r1
 800fcd8:	2f08      	cmp	r7, #8
 800fcda:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800fcde:	dc03      	bgt.n	800fce8 <_strtod_l+0x2e0>
 800fce0:	9908      	ldr	r1, [sp, #32]
 800fce2:	428f      	cmp	r7, r1
 800fce4:	bfa8      	it	ge
 800fce6:	460f      	movge	r7, r1
 800fce8:	f1bc 0f00 	cmp.w	ip, #0
 800fcec:	d000      	beq.n	800fcf0 <_strtod_l+0x2e8>
 800fcee:	427f      	negs	r7, r7
 800fcf0:	2e00      	cmp	r6, #0
 800fcf2:	d14f      	bne.n	800fd94 <_strtod_l+0x38c>
 800fcf4:	9904      	ldr	r1, [sp, #16]
 800fcf6:	4301      	orrs	r1, r0
 800fcf8:	f47f aec1 	bne.w	800fa7e <_strtod_l+0x76>
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	f47f aedb 	bne.w	800fab8 <_strtod_l+0xb0>
 800fd02:	2a69      	cmp	r2, #105	; 0x69
 800fd04:	d029      	beq.n	800fd5a <_strtod_l+0x352>
 800fd06:	dc26      	bgt.n	800fd56 <_strtod_l+0x34e>
 800fd08:	2a49      	cmp	r2, #73	; 0x49
 800fd0a:	d026      	beq.n	800fd5a <_strtod_l+0x352>
 800fd0c:	2a4e      	cmp	r2, #78	; 0x4e
 800fd0e:	f47f aed3 	bne.w	800fab8 <_strtod_l+0xb0>
 800fd12:	499b      	ldr	r1, [pc, #620]	; (800ff80 <_strtod_l+0x578>)
 800fd14:	a815      	add	r0, sp, #84	; 0x54
 800fd16:	f001 fdab 	bl	8011870 <__match>
 800fd1a:	2800      	cmp	r0, #0
 800fd1c:	f43f aecc 	beq.w	800fab8 <_strtod_l+0xb0>
 800fd20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	2b28      	cmp	r3, #40	; 0x28
 800fd26:	d12f      	bne.n	800fd88 <_strtod_l+0x380>
 800fd28:	4996      	ldr	r1, [pc, #600]	; (800ff84 <_strtod_l+0x57c>)
 800fd2a:	aa18      	add	r2, sp, #96	; 0x60
 800fd2c:	a815      	add	r0, sp, #84	; 0x54
 800fd2e:	f001 fdb3 	bl	8011898 <__hexnan>
 800fd32:	2805      	cmp	r0, #5
 800fd34:	d128      	bne.n	800fd88 <_strtod_l+0x380>
 800fd36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fd38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fd3c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800fd40:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800fd44:	e69b      	b.n	800fa7e <_strtod_l+0x76>
 800fd46:	9f08      	ldr	r7, [sp, #32]
 800fd48:	210a      	movs	r1, #10
 800fd4a:	fb01 2107 	mla	r1, r1, r7, r2
 800fd4e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800fd52:	9208      	str	r2, [sp, #32]
 800fd54:	e7b5      	b.n	800fcc2 <_strtod_l+0x2ba>
 800fd56:	2a6e      	cmp	r2, #110	; 0x6e
 800fd58:	e7d9      	b.n	800fd0e <_strtod_l+0x306>
 800fd5a:	498b      	ldr	r1, [pc, #556]	; (800ff88 <_strtod_l+0x580>)
 800fd5c:	a815      	add	r0, sp, #84	; 0x54
 800fd5e:	f001 fd87 	bl	8011870 <__match>
 800fd62:	2800      	cmp	r0, #0
 800fd64:	f43f aea8 	beq.w	800fab8 <_strtod_l+0xb0>
 800fd68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd6a:	4988      	ldr	r1, [pc, #544]	; (800ff8c <_strtod_l+0x584>)
 800fd6c:	3b01      	subs	r3, #1
 800fd6e:	a815      	add	r0, sp, #84	; 0x54
 800fd70:	9315      	str	r3, [sp, #84]	; 0x54
 800fd72:	f001 fd7d 	bl	8011870 <__match>
 800fd76:	b910      	cbnz	r0, 800fd7e <_strtod_l+0x376>
 800fd78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	9315      	str	r3, [sp, #84]	; 0x54
 800fd7e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800ff9c <_strtod_l+0x594>
 800fd82:	f04f 0800 	mov.w	r8, #0
 800fd86:	e67a      	b.n	800fa7e <_strtod_l+0x76>
 800fd88:	4881      	ldr	r0, [pc, #516]	; (800ff90 <_strtod_l+0x588>)
 800fd8a:	f001 fa8d 	bl	80112a8 <nan>
 800fd8e:	ec59 8b10 	vmov	r8, r9, d0
 800fd92:	e674      	b.n	800fa7e <_strtod_l+0x76>
 800fd94:	9b05      	ldr	r3, [sp, #20]
 800fd96:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd98:	1afb      	subs	r3, r7, r3
 800fd9a:	f1bb 0f00 	cmp.w	fp, #0
 800fd9e:	bf08      	it	eq
 800fda0:	46b3      	moveq	fp, r6
 800fda2:	2e10      	cmp	r6, #16
 800fda4:	9308      	str	r3, [sp, #32]
 800fda6:	4635      	mov	r5, r6
 800fda8:	bfa8      	it	ge
 800fdaa:	2510      	movge	r5, #16
 800fdac:	f7f0 fbaa 	bl	8000504 <__aeabi_ui2d>
 800fdb0:	2e09      	cmp	r6, #9
 800fdb2:	4680      	mov	r8, r0
 800fdb4:	4689      	mov	r9, r1
 800fdb6:	dd13      	ble.n	800fde0 <_strtod_l+0x3d8>
 800fdb8:	4b76      	ldr	r3, [pc, #472]	; (800ff94 <_strtod_l+0x58c>)
 800fdba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fdbe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fdc2:	f7f0 fc19 	bl	80005f8 <__aeabi_dmul>
 800fdc6:	4680      	mov	r8, r0
 800fdc8:	4650      	mov	r0, sl
 800fdca:	4689      	mov	r9, r1
 800fdcc:	f7f0 fb9a 	bl	8000504 <__aeabi_ui2d>
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	4640      	mov	r0, r8
 800fdd6:	4649      	mov	r1, r9
 800fdd8:	f7f0 fa58 	bl	800028c <__adddf3>
 800fddc:	4680      	mov	r8, r0
 800fdde:	4689      	mov	r9, r1
 800fde0:	2e0f      	cmp	r6, #15
 800fde2:	dc38      	bgt.n	800fe56 <_strtod_l+0x44e>
 800fde4:	9b08      	ldr	r3, [sp, #32]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	f43f ae49 	beq.w	800fa7e <_strtod_l+0x76>
 800fdec:	dd24      	ble.n	800fe38 <_strtod_l+0x430>
 800fdee:	2b16      	cmp	r3, #22
 800fdf0:	dc0b      	bgt.n	800fe0a <_strtod_l+0x402>
 800fdf2:	4968      	ldr	r1, [pc, #416]	; (800ff94 <_strtod_l+0x58c>)
 800fdf4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fdf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdfc:	4642      	mov	r2, r8
 800fdfe:	464b      	mov	r3, r9
 800fe00:	f7f0 fbfa 	bl	80005f8 <__aeabi_dmul>
 800fe04:	4680      	mov	r8, r0
 800fe06:	4689      	mov	r9, r1
 800fe08:	e639      	b.n	800fa7e <_strtod_l+0x76>
 800fe0a:	9a08      	ldr	r2, [sp, #32]
 800fe0c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800fe10:	4293      	cmp	r3, r2
 800fe12:	db20      	blt.n	800fe56 <_strtod_l+0x44e>
 800fe14:	4c5f      	ldr	r4, [pc, #380]	; (800ff94 <_strtod_l+0x58c>)
 800fe16:	f1c6 060f 	rsb	r6, r6, #15
 800fe1a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800fe1e:	4642      	mov	r2, r8
 800fe20:	464b      	mov	r3, r9
 800fe22:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe26:	f7f0 fbe7 	bl	80005f8 <__aeabi_dmul>
 800fe2a:	9b08      	ldr	r3, [sp, #32]
 800fe2c:	1b9e      	subs	r6, r3, r6
 800fe2e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800fe32:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fe36:	e7e3      	b.n	800fe00 <_strtod_l+0x3f8>
 800fe38:	9b08      	ldr	r3, [sp, #32]
 800fe3a:	3316      	adds	r3, #22
 800fe3c:	db0b      	blt.n	800fe56 <_strtod_l+0x44e>
 800fe3e:	9b05      	ldr	r3, [sp, #20]
 800fe40:	1bdf      	subs	r7, r3, r7
 800fe42:	4b54      	ldr	r3, [pc, #336]	; (800ff94 <_strtod_l+0x58c>)
 800fe44:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800fe48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe4c:	4640      	mov	r0, r8
 800fe4e:	4649      	mov	r1, r9
 800fe50:	f7f0 fcfc 	bl	800084c <__aeabi_ddiv>
 800fe54:	e7d6      	b.n	800fe04 <_strtod_l+0x3fc>
 800fe56:	9b08      	ldr	r3, [sp, #32]
 800fe58:	1b75      	subs	r5, r6, r5
 800fe5a:	441d      	add	r5, r3
 800fe5c:	2d00      	cmp	r5, #0
 800fe5e:	dd70      	ble.n	800ff42 <_strtod_l+0x53a>
 800fe60:	f015 030f 	ands.w	r3, r5, #15
 800fe64:	d00a      	beq.n	800fe7c <_strtod_l+0x474>
 800fe66:	494b      	ldr	r1, [pc, #300]	; (800ff94 <_strtod_l+0x58c>)
 800fe68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fe6c:	4642      	mov	r2, r8
 800fe6e:	464b      	mov	r3, r9
 800fe70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe74:	f7f0 fbc0 	bl	80005f8 <__aeabi_dmul>
 800fe78:	4680      	mov	r8, r0
 800fe7a:	4689      	mov	r9, r1
 800fe7c:	f035 050f 	bics.w	r5, r5, #15
 800fe80:	d04d      	beq.n	800ff1e <_strtod_l+0x516>
 800fe82:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800fe86:	dd22      	ble.n	800fece <_strtod_l+0x4c6>
 800fe88:	2500      	movs	r5, #0
 800fe8a:	46ab      	mov	fp, r5
 800fe8c:	9509      	str	r5, [sp, #36]	; 0x24
 800fe8e:	9505      	str	r5, [sp, #20]
 800fe90:	2322      	movs	r3, #34	; 0x22
 800fe92:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ff9c <_strtod_l+0x594>
 800fe96:	6023      	str	r3, [r4, #0]
 800fe98:	f04f 0800 	mov.w	r8, #0
 800fe9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	f43f aded 	beq.w	800fa7e <_strtod_l+0x76>
 800fea4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fea6:	4620      	mov	r0, r4
 800fea8:	f7ff f924 	bl	800f0f4 <_Bfree>
 800feac:	9905      	ldr	r1, [sp, #20]
 800feae:	4620      	mov	r0, r4
 800feb0:	f7ff f920 	bl	800f0f4 <_Bfree>
 800feb4:	4659      	mov	r1, fp
 800feb6:	4620      	mov	r0, r4
 800feb8:	f7ff f91c 	bl	800f0f4 <_Bfree>
 800febc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800febe:	4620      	mov	r0, r4
 800fec0:	f7ff f918 	bl	800f0f4 <_Bfree>
 800fec4:	4629      	mov	r1, r5
 800fec6:	4620      	mov	r0, r4
 800fec8:	f7ff f914 	bl	800f0f4 <_Bfree>
 800fecc:	e5d7      	b.n	800fa7e <_strtod_l+0x76>
 800fece:	4b32      	ldr	r3, [pc, #200]	; (800ff98 <_strtod_l+0x590>)
 800fed0:	9304      	str	r3, [sp, #16]
 800fed2:	2300      	movs	r3, #0
 800fed4:	112d      	asrs	r5, r5, #4
 800fed6:	4640      	mov	r0, r8
 800fed8:	4649      	mov	r1, r9
 800feda:	469a      	mov	sl, r3
 800fedc:	2d01      	cmp	r5, #1
 800fede:	dc21      	bgt.n	800ff24 <_strtod_l+0x51c>
 800fee0:	b10b      	cbz	r3, 800fee6 <_strtod_l+0x4de>
 800fee2:	4680      	mov	r8, r0
 800fee4:	4689      	mov	r9, r1
 800fee6:	492c      	ldr	r1, [pc, #176]	; (800ff98 <_strtod_l+0x590>)
 800fee8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800feec:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fef0:	4642      	mov	r2, r8
 800fef2:	464b      	mov	r3, r9
 800fef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fef8:	f7f0 fb7e 	bl	80005f8 <__aeabi_dmul>
 800fefc:	4b27      	ldr	r3, [pc, #156]	; (800ff9c <_strtod_l+0x594>)
 800fefe:	460a      	mov	r2, r1
 800ff00:	400b      	ands	r3, r1
 800ff02:	4927      	ldr	r1, [pc, #156]	; (800ffa0 <_strtod_l+0x598>)
 800ff04:	428b      	cmp	r3, r1
 800ff06:	4680      	mov	r8, r0
 800ff08:	d8be      	bhi.n	800fe88 <_strtod_l+0x480>
 800ff0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ff0e:	428b      	cmp	r3, r1
 800ff10:	bf86      	itte	hi
 800ff12:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800ffa4 <_strtod_l+0x59c>
 800ff16:	f04f 38ff 	movhi.w	r8, #4294967295
 800ff1a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ff1e:	2300      	movs	r3, #0
 800ff20:	9304      	str	r3, [sp, #16]
 800ff22:	e07b      	b.n	801001c <_strtod_l+0x614>
 800ff24:	07ea      	lsls	r2, r5, #31
 800ff26:	d505      	bpl.n	800ff34 <_strtod_l+0x52c>
 800ff28:	9b04      	ldr	r3, [sp, #16]
 800ff2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff2e:	f7f0 fb63 	bl	80005f8 <__aeabi_dmul>
 800ff32:	2301      	movs	r3, #1
 800ff34:	9a04      	ldr	r2, [sp, #16]
 800ff36:	3208      	adds	r2, #8
 800ff38:	f10a 0a01 	add.w	sl, sl, #1
 800ff3c:	106d      	asrs	r5, r5, #1
 800ff3e:	9204      	str	r2, [sp, #16]
 800ff40:	e7cc      	b.n	800fedc <_strtod_l+0x4d4>
 800ff42:	d0ec      	beq.n	800ff1e <_strtod_l+0x516>
 800ff44:	426d      	negs	r5, r5
 800ff46:	f015 020f 	ands.w	r2, r5, #15
 800ff4a:	d00a      	beq.n	800ff62 <_strtod_l+0x55a>
 800ff4c:	4b11      	ldr	r3, [pc, #68]	; (800ff94 <_strtod_l+0x58c>)
 800ff4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff52:	4640      	mov	r0, r8
 800ff54:	4649      	mov	r1, r9
 800ff56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5a:	f7f0 fc77 	bl	800084c <__aeabi_ddiv>
 800ff5e:	4680      	mov	r8, r0
 800ff60:	4689      	mov	r9, r1
 800ff62:	112d      	asrs	r5, r5, #4
 800ff64:	d0db      	beq.n	800ff1e <_strtod_l+0x516>
 800ff66:	2d1f      	cmp	r5, #31
 800ff68:	dd1e      	ble.n	800ffa8 <_strtod_l+0x5a0>
 800ff6a:	2500      	movs	r5, #0
 800ff6c:	46ab      	mov	fp, r5
 800ff6e:	9509      	str	r5, [sp, #36]	; 0x24
 800ff70:	9505      	str	r5, [sp, #20]
 800ff72:	2322      	movs	r3, #34	; 0x22
 800ff74:	f04f 0800 	mov.w	r8, #0
 800ff78:	f04f 0900 	mov.w	r9, #0
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	e78d      	b.n	800fe9c <_strtod_l+0x494>
 800ff80:	08013995 	.word	0x08013995
 800ff84:	08013bbc 	.word	0x08013bbc
 800ff88:	0801398d 	.word	0x0801398d
 800ff8c:	080139c2 	.word	0x080139c2
 800ff90:	08013d68 	.word	0x08013d68
 800ff94:	08013ad0 	.word	0x08013ad0
 800ff98:	08013aa8 	.word	0x08013aa8
 800ff9c:	7ff00000 	.word	0x7ff00000
 800ffa0:	7ca00000 	.word	0x7ca00000
 800ffa4:	7fefffff 	.word	0x7fefffff
 800ffa8:	f015 0310 	ands.w	r3, r5, #16
 800ffac:	bf18      	it	ne
 800ffae:	236a      	movne	r3, #106	; 0x6a
 800ffb0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8010354 <_strtod_l+0x94c>
 800ffb4:	9304      	str	r3, [sp, #16]
 800ffb6:	4640      	mov	r0, r8
 800ffb8:	4649      	mov	r1, r9
 800ffba:	2300      	movs	r3, #0
 800ffbc:	07ea      	lsls	r2, r5, #31
 800ffbe:	d504      	bpl.n	800ffca <_strtod_l+0x5c2>
 800ffc0:	e9da 2300 	ldrd	r2, r3, [sl]
 800ffc4:	f7f0 fb18 	bl	80005f8 <__aeabi_dmul>
 800ffc8:	2301      	movs	r3, #1
 800ffca:	106d      	asrs	r5, r5, #1
 800ffcc:	f10a 0a08 	add.w	sl, sl, #8
 800ffd0:	d1f4      	bne.n	800ffbc <_strtod_l+0x5b4>
 800ffd2:	b10b      	cbz	r3, 800ffd8 <_strtod_l+0x5d0>
 800ffd4:	4680      	mov	r8, r0
 800ffd6:	4689      	mov	r9, r1
 800ffd8:	9b04      	ldr	r3, [sp, #16]
 800ffda:	b1bb      	cbz	r3, 801000c <_strtod_l+0x604>
 800ffdc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ffe0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	4649      	mov	r1, r9
 800ffe8:	dd10      	ble.n	801000c <_strtod_l+0x604>
 800ffea:	2b1f      	cmp	r3, #31
 800ffec:	f340 811e 	ble.w	801022c <_strtod_l+0x824>
 800fff0:	2b34      	cmp	r3, #52	; 0x34
 800fff2:	bfde      	ittt	le
 800fff4:	f04f 33ff 	movle.w	r3, #4294967295
 800fff8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800fffc:	4093      	lslle	r3, r2
 800fffe:	f04f 0800 	mov.w	r8, #0
 8010002:	bfcc      	ite	gt
 8010004:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010008:	ea03 0901 	andle.w	r9, r3, r1
 801000c:	2200      	movs	r2, #0
 801000e:	2300      	movs	r3, #0
 8010010:	4640      	mov	r0, r8
 8010012:	4649      	mov	r1, r9
 8010014:	f7f0 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 8010018:	2800      	cmp	r0, #0
 801001a:	d1a6      	bne.n	800ff6a <_strtod_l+0x562>
 801001c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010022:	4633      	mov	r3, r6
 8010024:	465a      	mov	r2, fp
 8010026:	4620      	mov	r0, r4
 8010028:	f7ff f8cc 	bl	800f1c4 <__s2b>
 801002c:	9009      	str	r0, [sp, #36]	; 0x24
 801002e:	2800      	cmp	r0, #0
 8010030:	f43f af2a 	beq.w	800fe88 <_strtod_l+0x480>
 8010034:	9a08      	ldr	r2, [sp, #32]
 8010036:	9b05      	ldr	r3, [sp, #20]
 8010038:	2a00      	cmp	r2, #0
 801003a:	eba3 0307 	sub.w	r3, r3, r7
 801003e:	bfa8      	it	ge
 8010040:	2300      	movge	r3, #0
 8010042:	930c      	str	r3, [sp, #48]	; 0x30
 8010044:	2500      	movs	r5, #0
 8010046:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801004a:	9312      	str	r3, [sp, #72]	; 0x48
 801004c:	46ab      	mov	fp, r5
 801004e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010050:	4620      	mov	r0, r4
 8010052:	6859      	ldr	r1, [r3, #4]
 8010054:	f7ff f80e 	bl	800f074 <_Balloc>
 8010058:	9005      	str	r0, [sp, #20]
 801005a:	2800      	cmp	r0, #0
 801005c:	f43f af18 	beq.w	800fe90 <_strtod_l+0x488>
 8010060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010062:	691a      	ldr	r2, [r3, #16]
 8010064:	3202      	adds	r2, #2
 8010066:	f103 010c 	add.w	r1, r3, #12
 801006a:	0092      	lsls	r2, r2, #2
 801006c:	300c      	adds	r0, #12
 801006e:	f7fe f872 	bl	800e156 <memcpy>
 8010072:	ec49 8b10 	vmov	d0, r8, r9
 8010076:	aa18      	add	r2, sp, #96	; 0x60
 8010078:	a917      	add	r1, sp, #92	; 0x5c
 801007a:	4620      	mov	r0, r4
 801007c:	f7ff fbd6 	bl	800f82c <__d2b>
 8010080:	ec49 8b18 	vmov	d8, r8, r9
 8010084:	9016      	str	r0, [sp, #88]	; 0x58
 8010086:	2800      	cmp	r0, #0
 8010088:	f43f af02 	beq.w	800fe90 <_strtod_l+0x488>
 801008c:	2101      	movs	r1, #1
 801008e:	4620      	mov	r0, r4
 8010090:	f7ff f930 	bl	800f2f4 <__i2b>
 8010094:	4683      	mov	fp, r0
 8010096:	2800      	cmp	r0, #0
 8010098:	f43f aefa 	beq.w	800fe90 <_strtod_l+0x488>
 801009c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801009e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80100a0:	2e00      	cmp	r6, #0
 80100a2:	bfab      	itete	ge
 80100a4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80100a6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80100a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80100aa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80100ae:	bfac      	ite	ge
 80100b0:	eb06 0a03 	addge.w	sl, r6, r3
 80100b4:	1b9f      	sublt	r7, r3, r6
 80100b6:	9b04      	ldr	r3, [sp, #16]
 80100b8:	1af6      	subs	r6, r6, r3
 80100ba:	4416      	add	r6, r2
 80100bc:	4ba0      	ldr	r3, [pc, #640]	; (8010340 <_strtod_l+0x938>)
 80100be:	3e01      	subs	r6, #1
 80100c0:	429e      	cmp	r6, r3
 80100c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80100c6:	f280 80c4 	bge.w	8010252 <_strtod_l+0x84a>
 80100ca:	1b9b      	subs	r3, r3, r6
 80100cc:	2b1f      	cmp	r3, #31
 80100ce:	eba2 0203 	sub.w	r2, r2, r3
 80100d2:	f04f 0101 	mov.w	r1, #1
 80100d6:	f300 80b0 	bgt.w	801023a <_strtod_l+0x832>
 80100da:	fa01 f303 	lsl.w	r3, r1, r3
 80100de:	930e      	str	r3, [sp, #56]	; 0x38
 80100e0:	2300      	movs	r3, #0
 80100e2:	930d      	str	r3, [sp, #52]	; 0x34
 80100e4:	eb0a 0602 	add.w	r6, sl, r2
 80100e8:	9b04      	ldr	r3, [sp, #16]
 80100ea:	45b2      	cmp	sl, r6
 80100ec:	4417      	add	r7, r2
 80100ee:	441f      	add	r7, r3
 80100f0:	4653      	mov	r3, sl
 80100f2:	bfa8      	it	ge
 80100f4:	4633      	movge	r3, r6
 80100f6:	42bb      	cmp	r3, r7
 80100f8:	bfa8      	it	ge
 80100fa:	463b      	movge	r3, r7
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	bfc2      	ittt	gt
 8010100:	1af6      	subgt	r6, r6, r3
 8010102:	1aff      	subgt	r7, r7, r3
 8010104:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801010a:	2b00      	cmp	r3, #0
 801010c:	dd17      	ble.n	801013e <_strtod_l+0x736>
 801010e:	4659      	mov	r1, fp
 8010110:	461a      	mov	r2, r3
 8010112:	4620      	mov	r0, r4
 8010114:	f7ff f9ae 	bl	800f474 <__pow5mult>
 8010118:	4683      	mov	fp, r0
 801011a:	2800      	cmp	r0, #0
 801011c:	f43f aeb8 	beq.w	800fe90 <_strtod_l+0x488>
 8010120:	4601      	mov	r1, r0
 8010122:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010124:	4620      	mov	r0, r4
 8010126:	f7ff f8fb 	bl	800f320 <__multiply>
 801012a:	900b      	str	r0, [sp, #44]	; 0x2c
 801012c:	2800      	cmp	r0, #0
 801012e:	f43f aeaf 	beq.w	800fe90 <_strtod_l+0x488>
 8010132:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010134:	4620      	mov	r0, r4
 8010136:	f7fe ffdd 	bl	800f0f4 <_Bfree>
 801013a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801013c:	9316      	str	r3, [sp, #88]	; 0x58
 801013e:	2e00      	cmp	r6, #0
 8010140:	f300 808c 	bgt.w	801025c <_strtod_l+0x854>
 8010144:	9b08      	ldr	r3, [sp, #32]
 8010146:	2b00      	cmp	r3, #0
 8010148:	dd08      	ble.n	801015c <_strtod_l+0x754>
 801014a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801014c:	9905      	ldr	r1, [sp, #20]
 801014e:	4620      	mov	r0, r4
 8010150:	f7ff f990 	bl	800f474 <__pow5mult>
 8010154:	9005      	str	r0, [sp, #20]
 8010156:	2800      	cmp	r0, #0
 8010158:	f43f ae9a 	beq.w	800fe90 <_strtod_l+0x488>
 801015c:	2f00      	cmp	r7, #0
 801015e:	dd08      	ble.n	8010172 <_strtod_l+0x76a>
 8010160:	9905      	ldr	r1, [sp, #20]
 8010162:	463a      	mov	r2, r7
 8010164:	4620      	mov	r0, r4
 8010166:	f7ff f9df 	bl	800f528 <__lshift>
 801016a:	9005      	str	r0, [sp, #20]
 801016c:	2800      	cmp	r0, #0
 801016e:	f43f ae8f 	beq.w	800fe90 <_strtod_l+0x488>
 8010172:	f1ba 0f00 	cmp.w	sl, #0
 8010176:	dd08      	ble.n	801018a <_strtod_l+0x782>
 8010178:	4659      	mov	r1, fp
 801017a:	4652      	mov	r2, sl
 801017c:	4620      	mov	r0, r4
 801017e:	f7ff f9d3 	bl	800f528 <__lshift>
 8010182:	4683      	mov	fp, r0
 8010184:	2800      	cmp	r0, #0
 8010186:	f43f ae83 	beq.w	800fe90 <_strtod_l+0x488>
 801018a:	9a05      	ldr	r2, [sp, #20]
 801018c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801018e:	4620      	mov	r0, r4
 8010190:	f7ff fa52 	bl	800f638 <__mdiff>
 8010194:	4605      	mov	r5, r0
 8010196:	2800      	cmp	r0, #0
 8010198:	f43f ae7a 	beq.w	800fe90 <_strtod_l+0x488>
 801019c:	68c3      	ldr	r3, [r0, #12]
 801019e:	930b      	str	r3, [sp, #44]	; 0x2c
 80101a0:	2300      	movs	r3, #0
 80101a2:	60c3      	str	r3, [r0, #12]
 80101a4:	4659      	mov	r1, fp
 80101a6:	f7ff fa2b 	bl	800f600 <__mcmp>
 80101aa:	2800      	cmp	r0, #0
 80101ac:	da60      	bge.n	8010270 <_strtod_l+0x868>
 80101ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101b0:	ea53 0308 	orrs.w	r3, r3, r8
 80101b4:	f040 8084 	bne.w	80102c0 <_strtod_l+0x8b8>
 80101b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d17f      	bne.n	80102c0 <_strtod_l+0x8b8>
 80101c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80101c4:	0d1b      	lsrs	r3, r3, #20
 80101c6:	051b      	lsls	r3, r3, #20
 80101c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80101cc:	d978      	bls.n	80102c0 <_strtod_l+0x8b8>
 80101ce:	696b      	ldr	r3, [r5, #20]
 80101d0:	b913      	cbnz	r3, 80101d8 <_strtod_l+0x7d0>
 80101d2:	692b      	ldr	r3, [r5, #16]
 80101d4:	2b01      	cmp	r3, #1
 80101d6:	dd73      	ble.n	80102c0 <_strtod_l+0x8b8>
 80101d8:	4629      	mov	r1, r5
 80101da:	2201      	movs	r2, #1
 80101dc:	4620      	mov	r0, r4
 80101de:	f7ff f9a3 	bl	800f528 <__lshift>
 80101e2:	4659      	mov	r1, fp
 80101e4:	4605      	mov	r5, r0
 80101e6:	f7ff fa0b 	bl	800f600 <__mcmp>
 80101ea:	2800      	cmp	r0, #0
 80101ec:	dd68      	ble.n	80102c0 <_strtod_l+0x8b8>
 80101ee:	9904      	ldr	r1, [sp, #16]
 80101f0:	4a54      	ldr	r2, [pc, #336]	; (8010344 <_strtod_l+0x93c>)
 80101f2:	464b      	mov	r3, r9
 80101f4:	2900      	cmp	r1, #0
 80101f6:	f000 8084 	beq.w	8010302 <_strtod_l+0x8fa>
 80101fa:	ea02 0109 	and.w	r1, r2, r9
 80101fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010202:	dc7e      	bgt.n	8010302 <_strtod_l+0x8fa>
 8010204:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010208:	f77f aeb3 	ble.w	800ff72 <_strtod_l+0x56a>
 801020c:	4b4e      	ldr	r3, [pc, #312]	; (8010348 <_strtod_l+0x940>)
 801020e:	4640      	mov	r0, r8
 8010210:	4649      	mov	r1, r9
 8010212:	2200      	movs	r2, #0
 8010214:	f7f0 f9f0 	bl	80005f8 <__aeabi_dmul>
 8010218:	4b4a      	ldr	r3, [pc, #296]	; (8010344 <_strtod_l+0x93c>)
 801021a:	400b      	ands	r3, r1
 801021c:	4680      	mov	r8, r0
 801021e:	4689      	mov	r9, r1
 8010220:	2b00      	cmp	r3, #0
 8010222:	f47f ae3f 	bne.w	800fea4 <_strtod_l+0x49c>
 8010226:	2322      	movs	r3, #34	; 0x22
 8010228:	6023      	str	r3, [r4, #0]
 801022a:	e63b      	b.n	800fea4 <_strtod_l+0x49c>
 801022c:	f04f 32ff 	mov.w	r2, #4294967295
 8010230:	fa02 f303 	lsl.w	r3, r2, r3
 8010234:	ea03 0808 	and.w	r8, r3, r8
 8010238:	e6e8      	b.n	801000c <_strtod_l+0x604>
 801023a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801023e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010242:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010246:	36e2      	adds	r6, #226	; 0xe2
 8010248:	fa01 f306 	lsl.w	r3, r1, r6
 801024c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010250:	e748      	b.n	80100e4 <_strtod_l+0x6dc>
 8010252:	2100      	movs	r1, #0
 8010254:	2301      	movs	r3, #1
 8010256:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801025a:	e743      	b.n	80100e4 <_strtod_l+0x6dc>
 801025c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801025e:	4632      	mov	r2, r6
 8010260:	4620      	mov	r0, r4
 8010262:	f7ff f961 	bl	800f528 <__lshift>
 8010266:	9016      	str	r0, [sp, #88]	; 0x58
 8010268:	2800      	cmp	r0, #0
 801026a:	f47f af6b 	bne.w	8010144 <_strtod_l+0x73c>
 801026e:	e60f      	b.n	800fe90 <_strtod_l+0x488>
 8010270:	46ca      	mov	sl, r9
 8010272:	d171      	bne.n	8010358 <_strtod_l+0x950>
 8010274:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010276:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801027a:	b352      	cbz	r2, 80102d2 <_strtod_l+0x8ca>
 801027c:	4a33      	ldr	r2, [pc, #204]	; (801034c <_strtod_l+0x944>)
 801027e:	4293      	cmp	r3, r2
 8010280:	d12a      	bne.n	80102d8 <_strtod_l+0x8d0>
 8010282:	9b04      	ldr	r3, [sp, #16]
 8010284:	4641      	mov	r1, r8
 8010286:	b1fb      	cbz	r3, 80102c8 <_strtod_l+0x8c0>
 8010288:	4b2e      	ldr	r3, [pc, #184]	; (8010344 <_strtod_l+0x93c>)
 801028a:	ea09 0303 	and.w	r3, r9, r3
 801028e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010292:	f04f 32ff 	mov.w	r2, #4294967295
 8010296:	d81a      	bhi.n	80102ce <_strtod_l+0x8c6>
 8010298:	0d1b      	lsrs	r3, r3, #20
 801029a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801029e:	fa02 f303 	lsl.w	r3, r2, r3
 80102a2:	4299      	cmp	r1, r3
 80102a4:	d118      	bne.n	80102d8 <_strtod_l+0x8d0>
 80102a6:	4b2a      	ldr	r3, [pc, #168]	; (8010350 <_strtod_l+0x948>)
 80102a8:	459a      	cmp	sl, r3
 80102aa:	d102      	bne.n	80102b2 <_strtod_l+0x8aa>
 80102ac:	3101      	adds	r1, #1
 80102ae:	f43f adef 	beq.w	800fe90 <_strtod_l+0x488>
 80102b2:	4b24      	ldr	r3, [pc, #144]	; (8010344 <_strtod_l+0x93c>)
 80102b4:	ea0a 0303 	and.w	r3, sl, r3
 80102b8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80102bc:	f04f 0800 	mov.w	r8, #0
 80102c0:	9b04      	ldr	r3, [sp, #16]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d1a2      	bne.n	801020c <_strtod_l+0x804>
 80102c6:	e5ed      	b.n	800fea4 <_strtod_l+0x49c>
 80102c8:	f04f 33ff 	mov.w	r3, #4294967295
 80102cc:	e7e9      	b.n	80102a2 <_strtod_l+0x89a>
 80102ce:	4613      	mov	r3, r2
 80102d0:	e7e7      	b.n	80102a2 <_strtod_l+0x89a>
 80102d2:	ea53 0308 	orrs.w	r3, r3, r8
 80102d6:	d08a      	beq.n	80101ee <_strtod_l+0x7e6>
 80102d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102da:	b1e3      	cbz	r3, 8010316 <_strtod_l+0x90e>
 80102dc:	ea13 0f0a 	tst.w	r3, sl
 80102e0:	d0ee      	beq.n	80102c0 <_strtod_l+0x8b8>
 80102e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102e4:	9a04      	ldr	r2, [sp, #16]
 80102e6:	4640      	mov	r0, r8
 80102e8:	4649      	mov	r1, r9
 80102ea:	b1c3      	cbz	r3, 801031e <_strtod_l+0x916>
 80102ec:	f7ff fb6f 	bl	800f9ce <sulp>
 80102f0:	4602      	mov	r2, r0
 80102f2:	460b      	mov	r3, r1
 80102f4:	ec51 0b18 	vmov	r0, r1, d8
 80102f8:	f7ef ffc8 	bl	800028c <__adddf3>
 80102fc:	4680      	mov	r8, r0
 80102fe:	4689      	mov	r9, r1
 8010300:	e7de      	b.n	80102c0 <_strtod_l+0x8b8>
 8010302:	4013      	ands	r3, r2
 8010304:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010308:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801030c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010310:	f04f 38ff 	mov.w	r8, #4294967295
 8010314:	e7d4      	b.n	80102c0 <_strtod_l+0x8b8>
 8010316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010318:	ea13 0f08 	tst.w	r3, r8
 801031c:	e7e0      	b.n	80102e0 <_strtod_l+0x8d8>
 801031e:	f7ff fb56 	bl	800f9ce <sulp>
 8010322:	4602      	mov	r2, r0
 8010324:	460b      	mov	r3, r1
 8010326:	ec51 0b18 	vmov	r0, r1, d8
 801032a:	f7ef ffad 	bl	8000288 <__aeabi_dsub>
 801032e:	2200      	movs	r2, #0
 8010330:	2300      	movs	r3, #0
 8010332:	4680      	mov	r8, r0
 8010334:	4689      	mov	r9, r1
 8010336:	f7f0 fbc7 	bl	8000ac8 <__aeabi_dcmpeq>
 801033a:	2800      	cmp	r0, #0
 801033c:	d0c0      	beq.n	80102c0 <_strtod_l+0x8b8>
 801033e:	e618      	b.n	800ff72 <_strtod_l+0x56a>
 8010340:	fffffc02 	.word	0xfffffc02
 8010344:	7ff00000 	.word	0x7ff00000
 8010348:	39500000 	.word	0x39500000
 801034c:	000fffff 	.word	0x000fffff
 8010350:	7fefffff 	.word	0x7fefffff
 8010354:	08013bd0 	.word	0x08013bd0
 8010358:	4659      	mov	r1, fp
 801035a:	4628      	mov	r0, r5
 801035c:	f7ff fac0 	bl	800f8e0 <__ratio>
 8010360:	ec57 6b10 	vmov	r6, r7, d0
 8010364:	ee10 0a10 	vmov	r0, s0
 8010368:	2200      	movs	r2, #0
 801036a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801036e:	4639      	mov	r1, r7
 8010370:	f7f0 fbbe 	bl	8000af0 <__aeabi_dcmple>
 8010374:	2800      	cmp	r0, #0
 8010376:	d071      	beq.n	801045c <_strtod_l+0xa54>
 8010378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801037a:	2b00      	cmp	r3, #0
 801037c:	d17c      	bne.n	8010478 <_strtod_l+0xa70>
 801037e:	f1b8 0f00 	cmp.w	r8, #0
 8010382:	d15a      	bne.n	801043a <_strtod_l+0xa32>
 8010384:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010388:	2b00      	cmp	r3, #0
 801038a:	d15d      	bne.n	8010448 <_strtod_l+0xa40>
 801038c:	4b90      	ldr	r3, [pc, #576]	; (80105d0 <_strtod_l+0xbc8>)
 801038e:	2200      	movs	r2, #0
 8010390:	4630      	mov	r0, r6
 8010392:	4639      	mov	r1, r7
 8010394:	f7f0 fba2 	bl	8000adc <__aeabi_dcmplt>
 8010398:	2800      	cmp	r0, #0
 801039a:	d15c      	bne.n	8010456 <_strtod_l+0xa4e>
 801039c:	4630      	mov	r0, r6
 801039e:	4639      	mov	r1, r7
 80103a0:	4b8c      	ldr	r3, [pc, #560]	; (80105d4 <_strtod_l+0xbcc>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	f7f0 f928 	bl	80005f8 <__aeabi_dmul>
 80103a8:	4606      	mov	r6, r0
 80103aa:	460f      	mov	r7, r1
 80103ac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80103b0:	9606      	str	r6, [sp, #24]
 80103b2:	9307      	str	r3, [sp, #28]
 80103b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80103b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80103bc:	4b86      	ldr	r3, [pc, #536]	; (80105d8 <_strtod_l+0xbd0>)
 80103be:	ea0a 0303 	and.w	r3, sl, r3
 80103c2:	930d      	str	r3, [sp, #52]	; 0x34
 80103c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80103c6:	4b85      	ldr	r3, [pc, #532]	; (80105dc <_strtod_l+0xbd4>)
 80103c8:	429a      	cmp	r2, r3
 80103ca:	f040 8090 	bne.w	80104ee <_strtod_l+0xae6>
 80103ce:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80103d2:	ec49 8b10 	vmov	d0, r8, r9
 80103d6:	f7ff f9b9 	bl	800f74c <__ulp>
 80103da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80103de:	ec51 0b10 	vmov	r0, r1, d0
 80103e2:	f7f0 f909 	bl	80005f8 <__aeabi_dmul>
 80103e6:	4642      	mov	r2, r8
 80103e8:	464b      	mov	r3, r9
 80103ea:	f7ef ff4f 	bl	800028c <__adddf3>
 80103ee:	460b      	mov	r3, r1
 80103f0:	4979      	ldr	r1, [pc, #484]	; (80105d8 <_strtod_l+0xbd0>)
 80103f2:	4a7b      	ldr	r2, [pc, #492]	; (80105e0 <_strtod_l+0xbd8>)
 80103f4:	4019      	ands	r1, r3
 80103f6:	4291      	cmp	r1, r2
 80103f8:	4680      	mov	r8, r0
 80103fa:	d944      	bls.n	8010486 <_strtod_l+0xa7e>
 80103fc:	ee18 2a90 	vmov	r2, s17
 8010400:	4b78      	ldr	r3, [pc, #480]	; (80105e4 <_strtod_l+0xbdc>)
 8010402:	429a      	cmp	r2, r3
 8010404:	d104      	bne.n	8010410 <_strtod_l+0xa08>
 8010406:	ee18 3a10 	vmov	r3, s16
 801040a:	3301      	adds	r3, #1
 801040c:	f43f ad40 	beq.w	800fe90 <_strtod_l+0x488>
 8010410:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80105e4 <_strtod_l+0xbdc>
 8010414:	f04f 38ff 	mov.w	r8, #4294967295
 8010418:	9916      	ldr	r1, [sp, #88]	; 0x58
 801041a:	4620      	mov	r0, r4
 801041c:	f7fe fe6a 	bl	800f0f4 <_Bfree>
 8010420:	9905      	ldr	r1, [sp, #20]
 8010422:	4620      	mov	r0, r4
 8010424:	f7fe fe66 	bl	800f0f4 <_Bfree>
 8010428:	4659      	mov	r1, fp
 801042a:	4620      	mov	r0, r4
 801042c:	f7fe fe62 	bl	800f0f4 <_Bfree>
 8010430:	4629      	mov	r1, r5
 8010432:	4620      	mov	r0, r4
 8010434:	f7fe fe5e 	bl	800f0f4 <_Bfree>
 8010438:	e609      	b.n	801004e <_strtod_l+0x646>
 801043a:	f1b8 0f01 	cmp.w	r8, #1
 801043e:	d103      	bne.n	8010448 <_strtod_l+0xa40>
 8010440:	f1b9 0f00 	cmp.w	r9, #0
 8010444:	f43f ad95 	beq.w	800ff72 <_strtod_l+0x56a>
 8010448:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80105a0 <_strtod_l+0xb98>
 801044c:	4f60      	ldr	r7, [pc, #384]	; (80105d0 <_strtod_l+0xbc8>)
 801044e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010452:	2600      	movs	r6, #0
 8010454:	e7ae      	b.n	80103b4 <_strtod_l+0x9ac>
 8010456:	4f5f      	ldr	r7, [pc, #380]	; (80105d4 <_strtod_l+0xbcc>)
 8010458:	2600      	movs	r6, #0
 801045a:	e7a7      	b.n	80103ac <_strtod_l+0x9a4>
 801045c:	4b5d      	ldr	r3, [pc, #372]	; (80105d4 <_strtod_l+0xbcc>)
 801045e:	4630      	mov	r0, r6
 8010460:	4639      	mov	r1, r7
 8010462:	2200      	movs	r2, #0
 8010464:	f7f0 f8c8 	bl	80005f8 <__aeabi_dmul>
 8010468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801046a:	4606      	mov	r6, r0
 801046c:	460f      	mov	r7, r1
 801046e:	2b00      	cmp	r3, #0
 8010470:	d09c      	beq.n	80103ac <_strtod_l+0x9a4>
 8010472:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010476:	e79d      	b.n	80103b4 <_strtod_l+0x9ac>
 8010478:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80105a8 <_strtod_l+0xba0>
 801047c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010480:	ec57 6b17 	vmov	r6, r7, d7
 8010484:	e796      	b.n	80103b4 <_strtod_l+0x9ac>
 8010486:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801048a:	9b04      	ldr	r3, [sp, #16]
 801048c:	46ca      	mov	sl, r9
 801048e:	2b00      	cmp	r3, #0
 8010490:	d1c2      	bne.n	8010418 <_strtod_l+0xa10>
 8010492:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010498:	0d1b      	lsrs	r3, r3, #20
 801049a:	051b      	lsls	r3, r3, #20
 801049c:	429a      	cmp	r2, r3
 801049e:	d1bb      	bne.n	8010418 <_strtod_l+0xa10>
 80104a0:	4630      	mov	r0, r6
 80104a2:	4639      	mov	r1, r7
 80104a4:	f7f0 fc08 	bl	8000cb8 <__aeabi_d2lz>
 80104a8:	f7f0 f878 	bl	800059c <__aeabi_l2d>
 80104ac:	4602      	mov	r2, r0
 80104ae:	460b      	mov	r3, r1
 80104b0:	4630      	mov	r0, r6
 80104b2:	4639      	mov	r1, r7
 80104b4:	f7ef fee8 	bl	8000288 <__aeabi_dsub>
 80104b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80104ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80104be:	ea43 0308 	orr.w	r3, r3, r8
 80104c2:	4313      	orrs	r3, r2
 80104c4:	4606      	mov	r6, r0
 80104c6:	460f      	mov	r7, r1
 80104c8:	d054      	beq.n	8010574 <_strtod_l+0xb6c>
 80104ca:	a339      	add	r3, pc, #228	; (adr r3, 80105b0 <_strtod_l+0xba8>)
 80104cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d0:	f7f0 fb04 	bl	8000adc <__aeabi_dcmplt>
 80104d4:	2800      	cmp	r0, #0
 80104d6:	f47f ace5 	bne.w	800fea4 <_strtod_l+0x49c>
 80104da:	a337      	add	r3, pc, #220	; (adr r3, 80105b8 <_strtod_l+0xbb0>)
 80104dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e0:	4630      	mov	r0, r6
 80104e2:	4639      	mov	r1, r7
 80104e4:	f7f0 fb18 	bl	8000b18 <__aeabi_dcmpgt>
 80104e8:	2800      	cmp	r0, #0
 80104ea:	d095      	beq.n	8010418 <_strtod_l+0xa10>
 80104ec:	e4da      	b.n	800fea4 <_strtod_l+0x49c>
 80104ee:	9b04      	ldr	r3, [sp, #16]
 80104f0:	b333      	cbz	r3, 8010540 <_strtod_l+0xb38>
 80104f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80104f8:	d822      	bhi.n	8010540 <_strtod_l+0xb38>
 80104fa:	a331      	add	r3, pc, #196	; (adr r3, 80105c0 <_strtod_l+0xbb8>)
 80104fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010500:	4630      	mov	r0, r6
 8010502:	4639      	mov	r1, r7
 8010504:	f7f0 faf4 	bl	8000af0 <__aeabi_dcmple>
 8010508:	b1a0      	cbz	r0, 8010534 <_strtod_l+0xb2c>
 801050a:	4639      	mov	r1, r7
 801050c:	4630      	mov	r0, r6
 801050e:	f7f0 fb4b 	bl	8000ba8 <__aeabi_d2uiz>
 8010512:	2801      	cmp	r0, #1
 8010514:	bf38      	it	cc
 8010516:	2001      	movcc	r0, #1
 8010518:	f7ef fff4 	bl	8000504 <__aeabi_ui2d>
 801051c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801051e:	4606      	mov	r6, r0
 8010520:	460f      	mov	r7, r1
 8010522:	bb23      	cbnz	r3, 801056e <_strtod_l+0xb66>
 8010524:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010528:	9010      	str	r0, [sp, #64]	; 0x40
 801052a:	9311      	str	r3, [sp, #68]	; 0x44
 801052c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010530:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010534:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010536:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010538:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801053c:	1a9b      	subs	r3, r3, r2
 801053e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010540:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010544:	eeb0 0a48 	vmov.f32	s0, s16
 8010548:	eef0 0a68 	vmov.f32	s1, s17
 801054c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010550:	f7ff f8fc 	bl	800f74c <__ulp>
 8010554:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010558:	ec53 2b10 	vmov	r2, r3, d0
 801055c:	f7f0 f84c 	bl	80005f8 <__aeabi_dmul>
 8010560:	ec53 2b18 	vmov	r2, r3, d8
 8010564:	f7ef fe92 	bl	800028c <__adddf3>
 8010568:	4680      	mov	r8, r0
 801056a:	4689      	mov	r9, r1
 801056c:	e78d      	b.n	801048a <_strtod_l+0xa82>
 801056e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8010572:	e7db      	b.n	801052c <_strtod_l+0xb24>
 8010574:	a314      	add	r3, pc, #80	; (adr r3, 80105c8 <_strtod_l+0xbc0>)
 8010576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801057a:	f7f0 faaf 	bl	8000adc <__aeabi_dcmplt>
 801057e:	e7b3      	b.n	80104e8 <_strtod_l+0xae0>
 8010580:	2300      	movs	r3, #0
 8010582:	930a      	str	r3, [sp, #40]	; 0x28
 8010584:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010586:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010588:	6013      	str	r3, [r2, #0]
 801058a:	f7ff ba7c 	b.w	800fa86 <_strtod_l+0x7e>
 801058e:	2a65      	cmp	r2, #101	; 0x65
 8010590:	f43f ab75 	beq.w	800fc7e <_strtod_l+0x276>
 8010594:	2a45      	cmp	r2, #69	; 0x45
 8010596:	f43f ab72 	beq.w	800fc7e <_strtod_l+0x276>
 801059a:	2301      	movs	r3, #1
 801059c:	f7ff bbaa 	b.w	800fcf4 <_strtod_l+0x2ec>
 80105a0:	00000000 	.word	0x00000000
 80105a4:	bff00000 	.word	0xbff00000
 80105a8:	00000000 	.word	0x00000000
 80105ac:	3ff00000 	.word	0x3ff00000
 80105b0:	94a03595 	.word	0x94a03595
 80105b4:	3fdfffff 	.word	0x3fdfffff
 80105b8:	35afe535 	.word	0x35afe535
 80105bc:	3fe00000 	.word	0x3fe00000
 80105c0:	ffc00000 	.word	0xffc00000
 80105c4:	41dfffff 	.word	0x41dfffff
 80105c8:	94a03595 	.word	0x94a03595
 80105cc:	3fcfffff 	.word	0x3fcfffff
 80105d0:	3ff00000 	.word	0x3ff00000
 80105d4:	3fe00000 	.word	0x3fe00000
 80105d8:	7ff00000 	.word	0x7ff00000
 80105dc:	7fe00000 	.word	0x7fe00000
 80105e0:	7c9fffff 	.word	0x7c9fffff
 80105e4:	7fefffff 	.word	0x7fefffff

080105e8 <_strtod_r>:
 80105e8:	4b01      	ldr	r3, [pc, #4]	; (80105f0 <_strtod_r+0x8>)
 80105ea:	f7ff ba0d 	b.w	800fa08 <_strtod_l>
 80105ee:	bf00      	nop
 80105f0:	20000134 	.word	0x20000134

080105f4 <_strtol_l.constprop.0>:
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105fa:	d001      	beq.n	8010600 <_strtol_l.constprop.0+0xc>
 80105fc:	2b24      	cmp	r3, #36	; 0x24
 80105fe:	d906      	bls.n	801060e <_strtol_l.constprop.0+0x1a>
 8010600:	f7fd fd74 	bl	800e0ec <__errno>
 8010604:	2316      	movs	r3, #22
 8010606:	6003      	str	r3, [r0, #0]
 8010608:	2000      	movs	r0, #0
 801060a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801060e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80106f4 <_strtol_l.constprop.0+0x100>
 8010612:	460d      	mov	r5, r1
 8010614:	462e      	mov	r6, r5
 8010616:	f815 4b01 	ldrb.w	r4, [r5], #1
 801061a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801061e:	f017 0708 	ands.w	r7, r7, #8
 8010622:	d1f7      	bne.n	8010614 <_strtol_l.constprop.0+0x20>
 8010624:	2c2d      	cmp	r4, #45	; 0x2d
 8010626:	d132      	bne.n	801068e <_strtol_l.constprop.0+0x9a>
 8010628:	782c      	ldrb	r4, [r5, #0]
 801062a:	2701      	movs	r7, #1
 801062c:	1cb5      	adds	r5, r6, #2
 801062e:	2b00      	cmp	r3, #0
 8010630:	d05b      	beq.n	80106ea <_strtol_l.constprop.0+0xf6>
 8010632:	2b10      	cmp	r3, #16
 8010634:	d109      	bne.n	801064a <_strtol_l.constprop.0+0x56>
 8010636:	2c30      	cmp	r4, #48	; 0x30
 8010638:	d107      	bne.n	801064a <_strtol_l.constprop.0+0x56>
 801063a:	782c      	ldrb	r4, [r5, #0]
 801063c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010640:	2c58      	cmp	r4, #88	; 0x58
 8010642:	d14d      	bne.n	80106e0 <_strtol_l.constprop.0+0xec>
 8010644:	786c      	ldrb	r4, [r5, #1]
 8010646:	2310      	movs	r3, #16
 8010648:	3502      	adds	r5, #2
 801064a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801064e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010652:	f04f 0e00 	mov.w	lr, #0
 8010656:	fbb8 f9f3 	udiv	r9, r8, r3
 801065a:	4676      	mov	r6, lr
 801065c:	fb03 8a19 	mls	sl, r3, r9, r8
 8010660:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010664:	f1bc 0f09 	cmp.w	ip, #9
 8010668:	d816      	bhi.n	8010698 <_strtol_l.constprop.0+0xa4>
 801066a:	4664      	mov	r4, ip
 801066c:	42a3      	cmp	r3, r4
 801066e:	dd24      	ble.n	80106ba <_strtol_l.constprop.0+0xc6>
 8010670:	f1be 3fff 	cmp.w	lr, #4294967295
 8010674:	d008      	beq.n	8010688 <_strtol_l.constprop.0+0x94>
 8010676:	45b1      	cmp	r9, r6
 8010678:	d31c      	bcc.n	80106b4 <_strtol_l.constprop.0+0xc0>
 801067a:	d101      	bne.n	8010680 <_strtol_l.constprop.0+0x8c>
 801067c:	45a2      	cmp	sl, r4
 801067e:	db19      	blt.n	80106b4 <_strtol_l.constprop.0+0xc0>
 8010680:	fb06 4603 	mla	r6, r6, r3, r4
 8010684:	f04f 0e01 	mov.w	lr, #1
 8010688:	f815 4b01 	ldrb.w	r4, [r5], #1
 801068c:	e7e8      	b.n	8010660 <_strtol_l.constprop.0+0x6c>
 801068e:	2c2b      	cmp	r4, #43	; 0x2b
 8010690:	bf04      	itt	eq
 8010692:	782c      	ldrbeq	r4, [r5, #0]
 8010694:	1cb5      	addeq	r5, r6, #2
 8010696:	e7ca      	b.n	801062e <_strtol_l.constprop.0+0x3a>
 8010698:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801069c:	f1bc 0f19 	cmp.w	ip, #25
 80106a0:	d801      	bhi.n	80106a6 <_strtol_l.constprop.0+0xb2>
 80106a2:	3c37      	subs	r4, #55	; 0x37
 80106a4:	e7e2      	b.n	801066c <_strtol_l.constprop.0+0x78>
 80106a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80106aa:	f1bc 0f19 	cmp.w	ip, #25
 80106ae:	d804      	bhi.n	80106ba <_strtol_l.constprop.0+0xc6>
 80106b0:	3c57      	subs	r4, #87	; 0x57
 80106b2:	e7db      	b.n	801066c <_strtol_l.constprop.0+0x78>
 80106b4:	f04f 3eff 	mov.w	lr, #4294967295
 80106b8:	e7e6      	b.n	8010688 <_strtol_l.constprop.0+0x94>
 80106ba:	f1be 3fff 	cmp.w	lr, #4294967295
 80106be:	d105      	bne.n	80106cc <_strtol_l.constprop.0+0xd8>
 80106c0:	2322      	movs	r3, #34	; 0x22
 80106c2:	6003      	str	r3, [r0, #0]
 80106c4:	4646      	mov	r6, r8
 80106c6:	b942      	cbnz	r2, 80106da <_strtol_l.constprop.0+0xe6>
 80106c8:	4630      	mov	r0, r6
 80106ca:	e79e      	b.n	801060a <_strtol_l.constprop.0+0x16>
 80106cc:	b107      	cbz	r7, 80106d0 <_strtol_l.constprop.0+0xdc>
 80106ce:	4276      	negs	r6, r6
 80106d0:	2a00      	cmp	r2, #0
 80106d2:	d0f9      	beq.n	80106c8 <_strtol_l.constprop.0+0xd4>
 80106d4:	f1be 0f00 	cmp.w	lr, #0
 80106d8:	d000      	beq.n	80106dc <_strtol_l.constprop.0+0xe8>
 80106da:	1e69      	subs	r1, r5, #1
 80106dc:	6011      	str	r1, [r2, #0]
 80106de:	e7f3      	b.n	80106c8 <_strtol_l.constprop.0+0xd4>
 80106e0:	2430      	movs	r4, #48	; 0x30
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d1b1      	bne.n	801064a <_strtol_l.constprop.0+0x56>
 80106e6:	2308      	movs	r3, #8
 80106e8:	e7af      	b.n	801064a <_strtol_l.constprop.0+0x56>
 80106ea:	2c30      	cmp	r4, #48	; 0x30
 80106ec:	d0a5      	beq.n	801063a <_strtol_l.constprop.0+0x46>
 80106ee:	230a      	movs	r3, #10
 80106f0:	e7ab      	b.n	801064a <_strtol_l.constprop.0+0x56>
 80106f2:	bf00      	nop
 80106f4:	08013bf9 	.word	0x08013bf9

080106f8 <_strtol_r>:
 80106f8:	f7ff bf7c 	b.w	80105f4 <_strtol_l.constprop.0>

080106fc <__ssputs_r>:
 80106fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010700:	688e      	ldr	r6, [r1, #8]
 8010702:	461f      	mov	r7, r3
 8010704:	42be      	cmp	r6, r7
 8010706:	680b      	ldr	r3, [r1, #0]
 8010708:	4682      	mov	sl, r0
 801070a:	460c      	mov	r4, r1
 801070c:	4690      	mov	r8, r2
 801070e:	d82c      	bhi.n	801076a <__ssputs_r+0x6e>
 8010710:	898a      	ldrh	r2, [r1, #12]
 8010712:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010716:	d026      	beq.n	8010766 <__ssputs_r+0x6a>
 8010718:	6965      	ldr	r5, [r4, #20]
 801071a:	6909      	ldr	r1, [r1, #16]
 801071c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010720:	eba3 0901 	sub.w	r9, r3, r1
 8010724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010728:	1c7b      	adds	r3, r7, #1
 801072a:	444b      	add	r3, r9
 801072c:	106d      	asrs	r5, r5, #1
 801072e:	429d      	cmp	r5, r3
 8010730:	bf38      	it	cc
 8010732:	461d      	movcc	r5, r3
 8010734:	0553      	lsls	r3, r2, #21
 8010736:	d527      	bpl.n	8010788 <__ssputs_r+0x8c>
 8010738:	4629      	mov	r1, r5
 801073a:	f7fe fc0f 	bl	800ef5c <_malloc_r>
 801073e:	4606      	mov	r6, r0
 8010740:	b360      	cbz	r0, 801079c <__ssputs_r+0xa0>
 8010742:	6921      	ldr	r1, [r4, #16]
 8010744:	464a      	mov	r2, r9
 8010746:	f7fd fd06 	bl	800e156 <memcpy>
 801074a:	89a3      	ldrh	r3, [r4, #12]
 801074c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010754:	81a3      	strh	r3, [r4, #12]
 8010756:	6126      	str	r6, [r4, #16]
 8010758:	6165      	str	r5, [r4, #20]
 801075a:	444e      	add	r6, r9
 801075c:	eba5 0509 	sub.w	r5, r5, r9
 8010760:	6026      	str	r6, [r4, #0]
 8010762:	60a5      	str	r5, [r4, #8]
 8010764:	463e      	mov	r6, r7
 8010766:	42be      	cmp	r6, r7
 8010768:	d900      	bls.n	801076c <__ssputs_r+0x70>
 801076a:	463e      	mov	r6, r7
 801076c:	6820      	ldr	r0, [r4, #0]
 801076e:	4632      	mov	r2, r6
 8010770:	4641      	mov	r1, r8
 8010772:	f000 fd5c 	bl	801122e <memmove>
 8010776:	68a3      	ldr	r3, [r4, #8]
 8010778:	1b9b      	subs	r3, r3, r6
 801077a:	60a3      	str	r3, [r4, #8]
 801077c:	6823      	ldr	r3, [r4, #0]
 801077e:	4433      	add	r3, r6
 8010780:	6023      	str	r3, [r4, #0]
 8010782:	2000      	movs	r0, #0
 8010784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010788:	462a      	mov	r2, r5
 801078a:	f001 f932 	bl	80119f2 <_realloc_r>
 801078e:	4606      	mov	r6, r0
 8010790:	2800      	cmp	r0, #0
 8010792:	d1e0      	bne.n	8010756 <__ssputs_r+0x5a>
 8010794:	6921      	ldr	r1, [r4, #16]
 8010796:	4650      	mov	r0, sl
 8010798:	f7fe fb6c 	bl	800ee74 <_free_r>
 801079c:	230c      	movs	r3, #12
 801079e:	f8ca 3000 	str.w	r3, [sl]
 80107a2:	89a3      	ldrh	r3, [r4, #12]
 80107a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107a8:	81a3      	strh	r3, [r4, #12]
 80107aa:	f04f 30ff 	mov.w	r0, #4294967295
 80107ae:	e7e9      	b.n	8010784 <__ssputs_r+0x88>

080107b0 <_svfiprintf_r>:
 80107b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b4:	4698      	mov	r8, r3
 80107b6:	898b      	ldrh	r3, [r1, #12]
 80107b8:	061b      	lsls	r3, r3, #24
 80107ba:	b09d      	sub	sp, #116	; 0x74
 80107bc:	4607      	mov	r7, r0
 80107be:	460d      	mov	r5, r1
 80107c0:	4614      	mov	r4, r2
 80107c2:	d50e      	bpl.n	80107e2 <_svfiprintf_r+0x32>
 80107c4:	690b      	ldr	r3, [r1, #16]
 80107c6:	b963      	cbnz	r3, 80107e2 <_svfiprintf_r+0x32>
 80107c8:	2140      	movs	r1, #64	; 0x40
 80107ca:	f7fe fbc7 	bl	800ef5c <_malloc_r>
 80107ce:	6028      	str	r0, [r5, #0]
 80107d0:	6128      	str	r0, [r5, #16]
 80107d2:	b920      	cbnz	r0, 80107de <_svfiprintf_r+0x2e>
 80107d4:	230c      	movs	r3, #12
 80107d6:	603b      	str	r3, [r7, #0]
 80107d8:	f04f 30ff 	mov.w	r0, #4294967295
 80107dc:	e0d0      	b.n	8010980 <_svfiprintf_r+0x1d0>
 80107de:	2340      	movs	r3, #64	; 0x40
 80107e0:	616b      	str	r3, [r5, #20]
 80107e2:	2300      	movs	r3, #0
 80107e4:	9309      	str	r3, [sp, #36]	; 0x24
 80107e6:	2320      	movs	r3, #32
 80107e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80107ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80107f0:	2330      	movs	r3, #48	; 0x30
 80107f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010998 <_svfiprintf_r+0x1e8>
 80107f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80107fa:	f04f 0901 	mov.w	r9, #1
 80107fe:	4623      	mov	r3, r4
 8010800:	469a      	mov	sl, r3
 8010802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010806:	b10a      	cbz	r2, 801080c <_svfiprintf_r+0x5c>
 8010808:	2a25      	cmp	r2, #37	; 0x25
 801080a:	d1f9      	bne.n	8010800 <_svfiprintf_r+0x50>
 801080c:	ebba 0b04 	subs.w	fp, sl, r4
 8010810:	d00b      	beq.n	801082a <_svfiprintf_r+0x7a>
 8010812:	465b      	mov	r3, fp
 8010814:	4622      	mov	r2, r4
 8010816:	4629      	mov	r1, r5
 8010818:	4638      	mov	r0, r7
 801081a:	f7ff ff6f 	bl	80106fc <__ssputs_r>
 801081e:	3001      	adds	r0, #1
 8010820:	f000 80a9 	beq.w	8010976 <_svfiprintf_r+0x1c6>
 8010824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010826:	445a      	add	r2, fp
 8010828:	9209      	str	r2, [sp, #36]	; 0x24
 801082a:	f89a 3000 	ldrb.w	r3, [sl]
 801082e:	2b00      	cmp	r3, #0
 8010830:	f000 80a1 	beq.w	8010976 <_svfiprintf_r+0x1c6>
 8010834:	2300      	movs	r3, #0
 8010836:	f04f 32ff 	mov.w	r2, #4294967295
 801083a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801083e:	f10a 0a01 	add.w	sl, sl, #1
 8010842:	9304      	str	r3, [sp, #16]
 8010844:	9307      	str	r3, [sp, #28]
 8010846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801084a:	931a      	str	r3, [sp, #104]	; 0x68
 801084c:	4654      	mov	r4, sl
 801084e:	2205      	movs	r2, #5
 8010850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010854:	4850      	ldr	r0, [pc, #320]	; (8010998 <_svfiprintf_r+0x1e8>)
 8010856:	f7ef fcbb 	bl	80001d0 <memchr>
 801085a:	9a04      	ldr	r2, [sp, #16]
 801085c:	b9d8      	cbnz	r0, 8010896 <_svfiprintf_r+0xe6>
 801085e:	06d0      	lsls	r0, r2, #27
 8010860:	bf44      	itt	mi
 8010862:	2320      	movmi	r3, #32
 8010864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010868:	0711      	lsls	r1, r2, #28
 801086a:	bf44      	itt	mi
 801086c:	232b      	movmi	r3, #43	; 0x2b
 801086e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010872:	f89a 3000 	ldrb.w	r3, [sl]
 8010876:	2b2a      	cmp	r3, #42	; 0x2a
 8010878:	d015      	beq.n	80108a6 <_svfiprintf_r+0xf6>
 801087a:	9a07      	ldr	r2, [sp, #28]
 801087c:	4654      	mov	r4, sl
 801087e:	2000      	movs	r0, #0
 8010880:	f04f 0c0a 	mov.w	ip, #10
 8010884:	4621      	mov	r1, r4
 8010886:	f811 3b01 	ldrb.w	r3, [r1], #1
 801088a:	3b30      	subs	r3, #48	; 0x30
 801088c:	2b09      	cmp	r3, #9
 801088e:	d94d      	bls.n	801092c <_svfiprintf_r+0x17c>
 8010890:	b1b0      	cbz	r0, 80108c0 <_svfiprintf_r+0x110>
 8010892:	9207      	str	r2, [sp, #28]
 8010894:	e014      	b.n	80108c0 <_svfiprintf_r+0x110>
 8010896:	eba0 0308 	sub.w	r3, r0, r8
 801089a:	fa09 f303 	lsl.w	r3, r9, r3
 801089e:	4313      	orrs	r3, r2
 80108a0:	9304      	str	r3, [sp, #16]
 80108a2:	46a2      	mov	sl, r4
 80108a4:	e7d2      	b.n	801084c <_svfiprintf_r+0x9c>
 80108a6:	9b03      	ldr	r3, [sp, #12]
 80108a8:	1d19      	adds	r1, r3, #4
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	9103      	str	r1, [sp, #12]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	bfbb      	ittet	lt
 80108b2:	425b      	neglt	r3, r3
 80108b4:	f042 0202 	orrlt.w	r2, r2, #2
 80108b8:	9307      	strge	r3, [sp, #28]
 80108ba:	9307      	strlt	r3, [sp, #28]
 80108bc:	bfb8      	it	lt
 80108be:	9204      	strlt	r2, [sp, #16]
 80108c0:	7823      	ldrb	r3, [r4, #0]
 80108c2:	2b2e      	cmp	r3, #46	; 0x2e
 80108c4:	d10c      	bne.n	80108e0 <_svfiprintf_r+0x130>
 80108c6:	7863      	ldrb	r3, [r4, #1]
 80108c8:	2b2a      	cmp	r3, #42	; 0x2a
 80108ca:	d134      	bne.n	8010936 <_svfiprintf_r+0x186>
 80108cc:	9b03      	ldr	r3, [sp, #12]
 80108ce:	1d1a      	adds	r2, r3, #4
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	9203      	str	r2, [sp, #12]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	bfb8      	it	lt
 80108d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80108dc:	3402      	adds	r4, #2
 80108de:	9305      	str	r3, [sp, #20]
 80108e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80109a8 <_svfiprintf_r+0x1f8>
 80108e4:	7821      	ldrb	r1, [r4, #0]
 80108e6:	2203      	movs	r2, #3
 80108e8:	4650      	mov	r0, sl
 80108ea:	f7ef fc71 	bl	80001d0 <memchr>
 80108ee:	b138      	cbz	r0, 8010900 <_svfiprintf_r+0x150>
 80108f0:	9b04      	ldr	r3, [sp, #16]
 80108f2:	eba0 000a 	sub.w	r0, r0, sl
 80108f6:	2240      	movs	r2, #64	; 0x40
 80108f8:	4082      	lsls	r2, r0
 80108fa:	4313      	orrs	r3, r2
 80108fc:	3401      	adds	r4, #1
 80108fe:	9304      	str	r3, [sp, #16]
 8010900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010904:	4825      	ldr	r0, [pc, #148]	; (801099c <_svfiprintf_r+0x1ec>)
 8010906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801090a:	2206      	movs	r2, #6
 801090c:	f7ef fc60 	bl	80001d0 <memchr>
 8010910:	2800      	cmp	r0, #0
 8010912:	d038      	beq.n	8010986 <_svfiprintf_r+0x1d6>
 8010914:	4b22      	ldr	r3, [pc, #136]	; (80109a0 <_svfiprintf_r+0x1f0>)
 8010916:	bb1b      	cbnz	r3, 8010960 <_svfiprintf_r+0x1b0>
 8010918:	9b03      	ldr	r3, [sp, #12]
 801091a:	3307      	adds	r3, #7
 801091c:	f023 0307 	bic.w	r3, r3, #7
 8010920:	3308      	adds	r3, #8
 8010922:	9303      	str	r3, [sp, #12]
 8010924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010926:	4433      	add	r3, r6
 8010928:	9309      	str	r3, [sp, #36]	; 0x24
 801092a:	e768      	b.n	80107fe <_svfiprintf_r+0x4e>
 801092c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010930:	460c      	mov	r4, r1
 8010932:	2001      	movs	r0, #1
 8010934:	e7a6      	b.n	8010884 <_svfiprintf_r+0xd4>
 8010936:	2300      	movs	r3, #0
 8010938:	3401      	adds	r4, #1
 801093a:	9305      	str	r3, [sp, #20]
 801093c:	4619      	mov	r1, r3
 801093e:	f04f 0c0a 	mov.w	ip, #10
 8010942:	4620      	mov	r0, r4
 8010944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010948:	3a30      	subs	r2, #48	; 0x30
 801094a:	2a09      	cmp	r2, #9
 801094c:	d903      	bls.n	8010956 <_svfiprintf_r+0x1a6>
 801094e:	2b00      	cmp	r3, #0
 8010950:	d0c6      	beq.n	80108e0 <_svfiprintf_r+0x130>
 8010952:	9105      	str	r1, [sp, #20]
 8010954:	e7c4      	b.n	80108e0 <_svfiprintf_r+0x130>
 8010956:	fb0c 2101 	mla	r1, ip, r1, r2
 801095a:	4604      	mov	r4, r0
 801095c:	2301      	movs	r3, #1
 801095e:	e7f0      	b.n	8010942 <_svfiprintf_r+0x192>
 8010960:	ab03      	add	r3, sp, #12
 8010962:	9300      	str	r3, [sp, #0]
 8010964:	462a      	mov	r2, r5
 8010966:	4b0f      	ldr	r3, [pc, #60]	; (80109a4 <_svfiprintf_r+0x1f4>)
 8010968:	a904      	add	r1, sp, #16
 801096a:	4638      	mov	r0, r7
 801096c:	f7fc fbd6 	bl	800d11c <_printf_float>
 8010970:	1c42      	adds	r2, r0, #1
 8010972:	4606      	mov	r6, r0
 8010974:	d1d6      	bne.n	8010924 <_svfiprintf_r+0x174>
 8010976:	89ab      	ldrh	r3, [r5, #12]
 8010978:	065b      	lsls	r3, r3, #25
 801097a:	f53f af2d 	bmi.w	80107d8 <_svfiprintf_r+0x28>
 801097e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010980:	b01d      	add	sp, #116	; 0x74
 8010982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010986:	ab03      	add	r3, sp, #12
 8010988:	9300      	str	r3, [sp, #0]
 801098a:	462a      	mov	r2, r5
 801098c:	4b05      	ldr	r3, [pc, #20]	; (80109a4 <_svfiprintf_r+0x1f4>)
 801098e:	a904      	add	r1, sp, #16
 8010990:	4638      	mov	r0, r7
 8010992:	f7fc fe67 	bl	800d664 <_printf_i>
 8010996:	e7eb      	b.n	8010970 <_svfiprintf_r+0x1c0>
 8010998:	08013cf9 	.word	0x08013cf9
 801099c:	08013d03 	.word	0x08013d03
 80109a0:	0800d11d 	.word	0x0800d11d
 80109a4:	080106fd 	.word	0x080106fd
 80109a8:	08013cff 	.word	0x08013cff

080109ac <_sungetc_r>:
 80109ac:	b538      	push	{r3, r4, r5, lr}
 80109ae:	1c4b      	adds	r3, r1, #1
 80109b0:	4614      	mov	r4, r2
 80109b2:	d103      	bne.n	80109bc <_sungetc_r+0x10>
 80109b4:	f04f 35ff 	mov.w	r5, #4294967295
 80109b8:	4628      	mov	r0, r5
 80109ba:	bd38      	pop	{r3, r4, r5, pc}
 80109bc:	8993      	ldrh	r3, [r2, #12]
 80109be:	f023 0320 	bic.w	r3, r3, #32
 80109c2:	8193      	strh	r3, [r2, #12]
 80109c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109c6:	6852      	ldr	r2, [r2, #4]
 80109c8:	b2cd      	uxtb	r5, r1
 80109ca:	b18b      	cbz	r3, 80109f0 <_sungetc_r+0x44>
 80109cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80109ce:	4293      	cmp	r3, r2
 80109d0:	dd08      	ble.n	80109e4 <_sungetc_r+0x38>
 80109d2:	6823      	ldr	r3, [r4, #0]
 80109d4:	1e5a      	subs	r2, r3, #1
 80109d6:	6022      	str	r2, [r4, #0]
 80109d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80109dc:	6863      	ldr	r3, [r4, #4]
 80109de:	3301      	adds	r3, #1
 80109e0:	6063      	str	r3, [r4, #4]
 80109e2:	e7e9      	b.n	80109b8 <_sungetc_r+0xc>
 80109e4:	4621      	mov	r1, r4
 80109e6:	f000 fbe8 	bl	80111ba <__submore>
 80109ea:	2800      	cmp	r0, #0
 80109ec:	d0f1      	beq.n	80109d2 <_sungetc_r+0x26>
 80109ee:	e7e1      	b.n	80109b4 <_sungetc_r+0x8>
 80109f0:	6921      	ldr	r1, [r4, #16]
 80109f2:	6823      	ldr	r3, [r4, #0]
 80109f4:	b151      	cbz	r1, 8010a0c <_sungetc_r+0x60>
 80109f6:	4299      	cmp	r1, r3
 80109f8:	d208      	bcs.n	8010a0c <_sungetc_r+0x60>
 80109fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80109fe:	42a9      	cmp	r1, r5
 8010a00:	d104      	bne.n	8010a0c <_sungetc_r+0x60>
 8010a02:	3b01      	subs	r3, #1
 8010a04:	3201      	adds	r2, #1
 8010a06:	6023      	str	r3, [r4, #0]
 8010a08:	6062      	str	r2, [r4, #4]
 8010a0a:	e7d5      	b.n	80109b8 <_sungetc_r+0xc>
 8010a0c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a14:	6363      	str	r3, [r4, #52]	; 0x34
 8010a16:	2303      	movs	r3, #3
 8010a18:	63a3      	str	r3, [r4, #56]	; 0x38
 8010a1a:	4623      	mov	r3, r4
 8010a1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010a20:	6023      	str	r3, [r4, #0]
 8010a22:	2301      	movs	r3, #1
 8010a24:	e7dc      	b.n	80109e0 <_sungetc_r+0x34>

08010a26 <__ssrefill_r>:
 8010a26:	b510      	push	{r4, lr}
 8010a28:	460c      	mov	r4, r1
 8010a2a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010a2c:	b169      	cbz	r1, 8010a4a <__ssrefill_r+0x24>
 8010a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a32:	4299      	cmp	r1, r3
 8010a34:	d001      	beq.n	8010a3a <__ssrefill_r+0x14>
 8010a36:	f7fe fa1d 	bl	800ee74 <_free_r>
 8010a3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a3c:	6063      	str	r3, [r4, #4]
 8010a3e:	2000      	movs	r0, #0
 8010a40:	6360      	str	r0, [r4, #52]	; 0x34
 8010a42:	b113      	cbz	r3, 8010a4a <__ssrefill_r+0x24>
 8010a44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010a46:	6023      	str	r3, [r4, #0]
 8010a48:	bd10      	pop	{r4, pc}
 8010a4a:	6923      	ldr	r3, [r4, #16]
 8010a4c:	6023      	str	r3, [r4, #0]
 8010a4e:	2300      	movs	r3, #0
 8010a50:	6063      	str	r3, [r4, #4]
 8010a52:	89a3      	ldrh	r3, [r4, #12]
 8010a54:	f043 0320 	orr.w	r3, r3, #32
 8010a58:	81a3      	strh	r3, [r4, #12]
 8010a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8010a5e:	e7f3      	b.n	8010a48 <__ssrefill_r+0x22>

08010a60 <__ssvfiscanf_r>:
 8010a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a64:	460c      	mov	r4, r1
 8010a66:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010a6a:	2100      	movs	r1, #0
 8010a6c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010a70:	49a6      	ldr	r1, [pc, #664]	; (8010d0c <__ssvfiscanf_r+0x2ac>)
 8010a72:	91a0      	str	r1, [sp, #640]	; 0x280
 8010a74:	f10d 0804 	add.w	r8, sp, #4
 8010a78:	49a5      	ldr	r1, [pc, #660]	; (8010d10 <__ssvfiscanf_r+0x2b0>)
 8010a7a:	4fa6      	ldr	r7, [pc, #664]	; (8010d14 <__ssvfiscanf_r+0x2b4>)
 8010a7c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010d18 <__ssvfiscanf_r+0x2b8>
 8010a80:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010a84:	4606      	mov	r6, r0
 8010a86:	91a1      	str	r1, [sp, #644]	; 0x284
 8010a88:	9300      	str	r3, [sp, #0]
 8010a8a:	7813      	ldrb	r3, [r2, #0]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	f000 815a 	beq.w	8010d46 <__ssvfiscanf_r+0x2e6>
 8010a92:	5cf9      	ldrb	r1, [r7, r3]
 8010a94:	f011 0108 	ands.w	r1, r1, #8
 8010a98:	f102 0501 	add.w	r5, r2, #1
 8010a9c:	d019      	beq.n	8010ad2 <__ssvfiscanf_r+0x72>
 8010a9e:	6863      	ldr	r3, [r4, #4]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	dd0f      	ble.n	8010ac4 <__ssvfiscanf_r+0x64>
 8010aa4:	6823      	ldr	r3, [r4, #0]
 8010aa6:	781a      	ldrb	r2, [r3, #0]
 8010aa8:	5cba      	ldrb	r2, [r7, r2]
 8010aaa:	0712      	lsls	r2, r2, #28
 8010aac:	d401      	bmi.n	8010ab2 <__ssvfiscanf_r+0x52>
 8010aae:	462a      	mov	r2, r5
 8010ab0:	e7eb      	b.n	8010a8a <__ssvfiscanf_r+0x2a>
 8010ab2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010ab4:	3201      	adds	r2, #1
 8010ab6:	9245      	str	r2, [sp, #276]	; 0x114
 8010ab8:	6862      	ldr	r2, [r4, #4]
 8010aba:	3301      	adds	r3, #1
 8010abc:	3a01      	subs	r2, #1
 8010abe:	6062      	str	r2, [r4, #4]
 8010ac0:	6023      	str	r3, [r4, #0]
 8010ac2:	e7ec      	b.n	8010a9e <__ssvfiscanf_r+0x3e>
 8010ac4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010ac6:	4621      	mov	r1, r4
 8010ac8:	4630      	mov	r0, r6
 8010aca:	4798      	blx	r3
 8010acc:	2800      	cmp	r0, #0
 8010ace:	d0e9      	beq.n	8010aa4 <__ssvfiscanf_r+0x44>
 8010ad0:	e7ed      	b.n	8010aae <__ssvfiscanf_r+0x4e>
 8010ad2:	2b25      	cmp	r3, #37	; 0x25
 8010ad4:	d012      	beq.n	8010afc <__ssvfiscanf_r+0x9c>
 8010ad6:	469a      	mov	sl, r3
 8010ad8:	6863      	ldr	r3, [r4, #4]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	f340 8091 	ble.w	8010c02 <__ssvfiscanf_r+0x1a2>
 8010ae0:	6822      	ldr	r2, [r4, #0]
 8010ae2:	7813      	ldrb	r3, [r2, #0]
 8010ae4:	4553      	cmp	r3, sl
 8010ae6:	f040 812e 	bne.w	8010d46 <__ssvfiscanf_r+0x2e6>
 8010aea:	6863      	ldr	r3, [r4, #4]
 8010aec:	3b01      	subs	r3, #1
 8010aee:	6063      	str	r3, [r4, #4]
 8010af0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010af2:	3201      	adds	r2, #1
 8010af4:	3301      	adds	r3, #1
 8010af6:	6022      	str	r2, [r4, #0]
 8010af8:	9345      	str	r3, [sp, #276]	; 0x114
 8010afa:	e7d8      	b.n	8010aae <__ssvfiscanf_r+0x4e>
 8010afc:	9141      	str	r1, [sp, #260]	; 0x104
 8010afe:	9143      	str	r1, [sp, #268]	; 0x10c
 8010b00:	7853      	ldrb	r3, [r2, #1]
 8010b02:	2b2a      	cmp	r3, #42	; 0x2a
 8010b04:	bf02      	ittt	eq
 8010b06:	2310      	moveq	r3, #16
 8010b08:	1c95      	addeq	r5, r2, #2
 8010b0a:	9341      	streq	r3, [sp, #260]	; 0x104
 8010b0c:	220a      	movs	r2, #10
 8010b0e:	46aa      	mov	sl, r5
 8010b10:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010b14:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010b18:	2b09      	cmp	r3, #9
 8010b1a:	d91c      	bls.n	8010b56 <__ssvfiscanf_r+0xf6>
 8010b1c:	487e      	ldr	r0, [pc, #504]	; (8010d18 <__ssvfiscanf_r+0x2b8>)
 8010b1e:	2203      	movs	r2, #3
 8010b20:	f7ef fb56 	bl	80001d0 <memchr>
 8010b24:	b138      	cbz	r0, 8010b36 <__ssvfiscanf_r+0xd6>
 8010b26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010b28:	eba0 0009 	sub.w	r0, r0, r9
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	4083      	lsls	r3, r0
 8010b30:	4313      	orrs	r3, r2
 8010b32:	9341      	str	r3, [sp, #260]	; 0x104
 8010b34:	4655      	mov	r5, sl
 8010b36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010b3a:	2b78      	cmp	r3, #120	; 0x78
 8010b3c:	d806      	bhi.n	8010b4c <__ssvfiscanf_r+0xec>
 8010b3e:	2b57      	cmp	r3, #87	; 0x57
 8010b40:	d810      	bhi.n	8010b64 <__ssvfiscanf_r+0x104>
 8010b42:	2b25      	cmp	r3, #37	; 0x25
 8010b44:	d0c7      	beq.n	8010ad6 <__ssvfiscanf_r+0x76>
 8010b46:	d857      	bhi.n	8010bf8 <__ssvfiscanf_r+0x198>
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d065      	beq.n	8010c18 <__ssvfiscanf_r+0x1b8>
 8010b4c:	2303      	movs	r3, #3
 8010b4e:	9347      	str	r3, [sp, #284]	; 0x11c
 8010b50:	230a      	movs	r3, #10
 8010b52:	9342      	str	r3, [sp, #264]	; 0x108
 8010b54:	e076      	b.n	8010c44 <__ssvfiscanf_r+0x1e4>
 8010b56:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010b58:	fb02 1103 	mla	r1, r2, r3, r1
 8010b5c:	3930      	subs	r1, #48	; 0x30
 8010b5e:	9143      	str	r1, [sp, #268]	; 0x10c
 8010b60:	4655      	mov	r5, sl
 8010b62:	e7d4      	b.n	8010b0e <__ssvfiscanf_r+0xae>
 8010b64:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010b68:	2a20      	cmp	r2, #32
 8010b6a:	d8ef      	bhi.n	8010b4c <__ssvfiscanf_r+0xec>
 8010b6c:	a101      	add	r1, pc, #4	; (adr r1, 8010b74 <__ssvfiscanf_r+0x114>)
 8010b6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010b72:	bf00      	nop
 8010b74:	08010c27 	.word	0x08010c27
 8010b78:	08010b4d 	.word	0x08010b4d
 8010b7c:	08010b4d 	.word	0x08010b4d
 8010b80:	08010c85 	.word	0x08010c85
 8010b84:	08010b4d 	.word	0x08010b4d
 8010b88:	08010b4d 	.word	0x08010b4d
 8010b8c:	08010b4d 	.word	0x08010b4d
 8010b90:	08010b4d 	.word	0x08010b4d
 8010b94:	08010b4d 	.word	0x08010b4d
 8010b98:	08010b4d 	.word	0x08010b4d
 8010b9c:	08010b4d 	.word	0x08010b4d
 8010ba0:	08010c9b 	.word	0x08010c9b
 8010ba4:	08010c81 	.word	0x08010c81
 8010ba8:	08010bff 	.word	0x08010bff
 8010bac:	08010bff 	.word	0x08010bff
 8010bb0:	08010bff 	.word	0x08010bff
 8010bb4:	08010b4d 	.word	0x08010b4d
 8010bb8:	08010c3d 	.word	0x08010c3d
 8010bbc:	08010b4d 	.word	0x08010b4d
 8010bc0:	08010b4d 	.word	0x08010b4d
 8010bc4:	08010b4d 	.word	0x08010b4d
 8010bc8:	08010b4d 	.word	0x08010b4d
 8010bcc:	08010cab 	.word	0x08010cab
 8010bd0:	08010c79 	.word	0x08010c79
 8010bd4:	08010c1f 	.word	0x08010c1f
 8010bd8:	08010b4d 	.word	0x08010b4d
 8010bdc:	08010b4d 	.word	0x08010b4d
 8010be0:	08010ca7 	.word	0x08010ca7
 8010be4:	08010b4d 	.word	0x08010b4d
 8010be8:	08010c81 	.word	0x08010c81
 8010bec:	08010b4d 	.word	0x08010b4d
 8010bf0:	08010b4d 	.word	0x08010b4d
 8010bf4:	08010c27 	.word	0x08010c27
 8010bf8:	3b45      	subs	r3, #69	; 0x45
 8010bfa:	2b02      	cmp	r3, #2
 8010bfc:	d8a6      	bhi.n	8010b4c <__ssvfiscanf_r+0xec>
 8010bfe:	2305      	movs	r3, #5
 8010c00:	e01f      	b.n	8010c42 <__ssvfiscanf_r+0x1e2>
 8010c02:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010c04:	4621      	mov	r1, r4
 8010c06:	4630      	mov	r0, r6
 8010c08:	4798      	blx	r3
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	f43f af68 	beq.w	8010ae0 <__ssvfiscanf_r+0x80>
 8010c10:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010c12:	2800      	cmp	r0, #0
 8010c14:	f040 808d 	bne.w	8010d32 <__ssvfiscanf_r+0x2d2>
 8010c18:	f04f 30ff 	mov.w	r0, #4294967295
 8010c1c:	e08f      	b.n	8010d3e <__ssvfiscanf_r+0x2de>
 8010c1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010c20:	f042 0220 	orr.w	r2, r2, #32
 8010c24:	9241      	str	r2, [sp, #260]	; 0x104
 8010c26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010c2c:	9241      	str	r2, [sp, #260]	; 0x104
 8010c2e:	2210      	movs	r2, #16
 8010c30:	2b6f      	cmp	r3, #111	; 0x6f
 8010c32:	9242      	str	r2, [sp, #264]	; 0x108
 8010c34:	bf34      	ite	cc
 8010c36:	2303      	movcc	r3, #3
 8010c38:	2304      	movcs	r3, #4
 8010c3a:	e002      	b.n	8010c42 <__ssvfiscanf_r+0x1e2>
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	9342      	str	r3, [sp, #264]	; 0x108
 8010c40:	2303      	movs	r3, #3
 8010c42:	9347      	str	r3, [sp, #284]	; 0x11c
 8010c44:	6863      	ldr	r3, [r4, #4]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	dd3d      	ble.n	8010cc6 <__ssvfiscanf_r+0x266>
 8010c4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010c4c:	0659      	lsls	r1, r3, #25
 8010c4e:	d404      	bmi.n	8010c5a <__ssvfiscanf_r+0x1fa>
 8010c50:	6823      	ldr	r3, [r4, #0]
 8010c52:	781a      	ldrb	r2, [r3, #0]
 8010c54:	5cba      	ldrb	r2, [r7, r2]
 8010c56:	0712      	lsls	r2, r2, #28
 8010c58:	d43c      	bmi.n	8010cd4 <__ssvfiscanf_r+0x274>
 8010c5a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010c5c:	2b02      	cmp	r3, #2
 8010c5e:	dc4b      	bgt.n	8010cf8 <__ssvfiscanf_r+0x298>
 8010c60:	466b      	mov	r3, sp
 8010c62:	4622      	mov	r2, r4
 8010c64:	a941      	add	r1, sp, #260	; 0x104
 8010c66:	4630      	mov	r0, r6
 8010c68:	f000 f872 	bl	8010d50 <_scanf_chars>
 8010c6c:	2801      	cmp	r0, #1
 8010c6e:	d06a      	beq.n	8010d46 <__ssvfiscanf_r+0x2e6>
 8010c70:	2802      	cmp	r0, #2
 8010c72:	f47f af1c 	bne.w	8010aae <__ssvfiscanf_r+0x4e>
 8010c76:	e7cb      	b.n	8010c10 <__ssvfiscanf_r+0x1b0>
 8010c78:	2308      	movs	r3, #8
 8010c7a:	9342      	str	r3, [sp, #264]	; 0x108
 8010c7c:	2304      	movs	r3, #4
 8010c7e:	e7e0      	b.n	8010c42 <__ssvfiscanf_r+0x1e2>
 8010c80:	220a      	movs	r2, #10
 8010c82:	e7d5      	b.n	8010c30 <__ssvfiscanf_r+0x1d0>
 8010c84:	4629      	mov	r1, r5
 8010c86:	4640      	mov	r0, r8
 8010c88:	f000 fa5e 	bl	8011148 <__sccl>
 8010c8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c92:	9341      	str	r3, [sp, #260]	; 0x104
 8010c94:	4605      	mov	r5, r0
 8010c96:	2301      	movs	r3, #1
 8010c98:	e7d3      	b.n	8010c42 <__ssvfiscanf_r+0x1e2>
 8010c9a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ca0:	9341      	str	r3, [sp, #260]	; 0x104
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	e7cd      	b.n	8010c42 <__ssvfiscanf_r+0x1e2>
 8010ca6:	2302      	movs	r3, #2
 8010ca8:	e7cb      	b.n	8010c42 <__ssvfiscanf_r+0x1e2>
 8010caa:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010cac:	06c3      	lsls	r3, r0, #27
 8010cae:	f53f aefe 	bmi.w	8010aae <__ssvfiscanf_r+0x4e>
 8010cb2:	9b00      	ldr	r3, [sp, #0]
 8010cb4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010cb6:	1d19      	adds	r1, r3, #4
 8010cb8:	9100      	str	r1, [sp, #0]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	07c0      	lsls	r0, r0, #31
 8010cbe:	bf4c      	ite	mi
 8010cc0:	801a      	strhmi	r2, [r3, #0]
 8010cc2:	601a      	strpl	r2, [r3, #0]
 8010cc4:	e6f3      	b.n	8010aae <__ssvfiscanf_r+0x4e>
 8010cc6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010cc8:	4621      	mov	r1, r4
 8010cca:	4630      	mov	r0, r6
 8010ccc:	4798      	blx	r3
 8010cce:	2800      	cmp	r0, #0
 8010cd0:	d0bb      	beq.n	8010c4a <__ssvfiscanf_r+0x1ea>
 8010cd2:	e79d      	b.n	8010c10 <__ssvfiscanf_r+0x1b0>
 8010cd4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010cd6:	3201      	adds	r2, #1
 8010cd8:	9245      	str	r2, [sp, #276]	; 0x114
 8010cda:	6862      	ldr	r2, [r4, #4]
 8010cdc:	3a01      	subs	r2, #1
 8010cde:	2a00      	cmp	r2, #0
 8010ce0:	6062      	str	r2, [r4, #4]
 8010ce2:	dd02      	ble.n	8010cea <__ssvfiscanf_r+0x28a>
 8010ce4:	3301      	adds	r3, #1
 8010ce6:	6023      	str	r3, [r4, #0]
 8010ce8:	e7b2      	b.n	8010c50 <__ssvfiscanf_r+0x1f0>
 8010cea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010cec:	4621      	mov	r1, r4
 8010cee:	4630      	mov	r0, r6
 8010cf0:	4798      	blx	r3
 8010cf2:	2800      	cmp	r0, #0
 8010cf4:	d0ac      	beq.n	8010c50 <__ssvfiscanf_r+0x1f0>
 8010cf6:	e78b      	b.n	8010c10 <__ssvfiscanf_r+0x1b0>
 8010cf8:	2b04      	cmp	r3, #4
 8010cfa:	dc0f      	bgt.n	8010d1c <__ssvfiscanf_r+0x2bc>
 8010cfc:	466b      	mov	r3, sp
 8010cfe:	4622      	mov	r2, r4
 8010d00:	a941      	add	r1, sp, #260	; 0x104
 8010d02:	4630      	mov	r0, r6
 8010d04:	f000 f87e 	bl	8010e04 <_scanf_i>
 8010d08:	e7b0      	b.n	8010c6c <__ssvfiscanf_r+0x20c>
 8010d0a:	bf00      	nop
 8010d0c:	080109ad 	.word	0x080109ad
 8010d10:	08010a27 	.word	0x08010a27
 8010d14:	08013bf9 	.word	0x08013bf9
 8010d18:	08013cff 	.word	0x08013cff
 8010d1c:	4b0b      	ldr	r3, [pc, #44]	; (8010d4c <__ssvfiscanf_r+0x2ec>)
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	f43f aec5 	beq.w	8010aae <__ssvfiscanf_r+0x4e>
 8010d24:	466b      	mov	r3, sp
 8010d26:	4622      	mov	r2, r4
 8010d28:	a941      	add	r1, sp, #260	; 0x104
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	f7fc fdbc 	bl	800d8a8 <_scanf_float>
 8010d30:	e79c      	b.n	8010c6c <__ssvfiscanf_r+0x20c>
 8010d32:	89a3      	ldrh	r3, [r4, #12]
 8010d34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010d38:	bf18      	it	ne
 8010d3a:	f04f 30ff 	movne.w	r0, #4294967295
 8010d3e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d46:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010d48:	e7f9      	b.n	8010d3e <__ssvfiscanf_r+0x2de>
 8010d4a:	bf00      	nop
 8010d4c:	0800d8a9 	.word	0x0800d8a9

08010d50 <_scanf_chars>:
 8010d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d54:	4615      	mov	r5, r2
 8010d56:	688a      	ldr	r2, [r1, #8]
 8010d58:	4680      	mov	r8, r0
 8010d5a:	460c      	mov	r4, r1
 8010d5c:	b932      	cbnz	r2, 8010d6c <_scanf_chars+0x1c>
 8010d5e:	698a      	ldr	r2, [r1, #24]
 8010d60:	2a00      	cmp	r2, #0
 8010d62:	bf0c      	ite	eq
 8010d64:	2201      	moveq	r2, #1
 8010d66:	f04f 32ff 	movne.w	r2, #4294967295
 8010d6a:	608a      	str	r2, [r1, #8]
 8010d6c:	6822      	ldr	r2, [r4, #0]
 8010d6e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010e00 <_scanf_chars+0xb0>
 8010d72:	06d1      	lsls	r1, r2, #27
 8010d74:	bf5f      	itttt	pl
 8010d76:	681a      	ldrpl	r2, [r3, #0]
 8010d78:	1d11      	addpl	r1, r2, #4
 8010d7a:	6019      	strpl	r1, [r3, #0]
 8010d7c:	6816      	ldrpl	r6, [r2, #0]
 8010d7e:	2700      	movs	r7, #0
 8010d80:	69a0      	ldr	r0, [r4, #24]
 8010d82:	b188      	cbz	r0, 8010da8 <_scanf_chars+0x58>
 8010d84:	2801      	cmp	r0, #1
 8010d86:	d107      	bne.n	8010d98 <_scanf_chars+0x48>
 8010d88:	682a      	ldr	r2, [r5, #0]
 8010d8a:	7811      	ldrb	r1, [r2, #0]
 8010d8c:	6962      	ldr	r2, [r4, #20]
 8010d8e:	5c52      	ldrb	r2, [r2, r1]
 8010d90:	b952      	cbnz	r2, 8010da8 <_scanf_chars+0x58>
 8010d92:	2f00      	cmp	r7, #0
 8010d94:	d031      	beq.n	8010dfa <_scanf_chars+0xaa>
 8010d96:	e022      	b.n	8010dde <_scanf_chars+0x8e>
 8010d98:	2802      	cmp	r0, #2
 8010d9a:	d120      	bne.n	8010dde <_scanf_chars+0x8e>
 8010d9c:	682b      	ldr	r3, [r5, #0]
 8010d9e:	781b      	ldrb	r3, [r3, #0]
 8010da0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010da4:	071b      	lsls	r3, r3, #28
 8010da6:	d41a      	bmi.n	8010dde <_scanf_chars+0x8e>
 8010da8:	6823      	ldr	r3, [r4, #0]
 8010daa:	06da      	lsls	r2, r3, #27
 8010dac:	bf5e      	ittt	pl
 8010dae:	682b      	ldrpl	r3, [r5, #0]
 8010db0:	781b      	ldrbpl	r3, [r3, #0]
 8010db2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010db6:	682a      	ldr	r2, [r5, #0]
 8010db8:	686b      	ldr	r3, [r5, #4]
 8010dba:	3201      	adds	r2, #1
 8010dbc:	602a      	str	r2, [r5, #0]
 8010dbe:	68a2      	ldr	r2, [r4, #8]
 8010dc0:	3b01      	subs	r3, #1
 8010dc2:	3a01      	subs	r2, #1
 8010dc4:	606b      	str	r3, [r5, #4]
 8010dc6:	3701      	adds	r7, #1
 8010dc8:	60a2      	str	r2, [r4, #8]
 8010dca:	b142      	cbz	r2, 8010dde <_scanf_chars+0x8e>
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	dcd7      	bgt.n	8010d80 <_scanf_chars+0x30>
 8010dd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010dd4:	4629      	mov	r1, r5
 8010dd6:	4640      	mov	r0, r8
 8010dd8:	4798      	blx	r3
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	d0d0      	beq.n	8010d80 <_scanf_chars+0x30>
 8010dde:	6823      	ldr	r3, [r4, #0]
 8010de0:	f013 0310 	ands.w	r3, r3, #16
 8010de4:	d105      	bne.n	8010df2 <_scanf_chars+0xa2>
 8010de6:	68e2      	ldr	r2, [r4, #12]
 8010de8:	3201      	adds	r2, #1
 8010dea:	60e2      	str	r2, [r4, #12]
 8010dec:	69a2      	ldr	r2, [r4, #24]
 8010dee:	b102      	cbz	r2, 8010df2 <_scanf_chars+0xa2>
 8010df0:	7033      	strb	r3, [r6, #0]
 8010df2:	6923      	ldr	r3, [r4, #16]
 8010df4:	443b      	add	r3, r7
 8010df6:	6123      	str	r3, [r4, #16]
 8010df8:	2000      	movs	r0, #0
 8010dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010dfe:	bf00      	nop
 8010e00:	08013bf9 	.word	0x08013bf9

08010e04 <_scanf_i>:
 8010e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e08:	4698      	mov	r8, r3
 8010e0a:	4b74      	ldr	r3, [pc, #464]	; (8010fdc <_scanf_i+0x1d8>)
 8010e0c:	460c      	mov	r4, r1
 8010e0e:	4682      	mov	sl, r0
 8010e10:	4616      	mov	r6, r2
 8010e12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010e16:	b087      	sub	sp, #28
 8010e18:	ab03      	add	r3, sp, #12
 8010e1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010e1e:	4b70      	ldr	r3, [pc, #448]	; (8010fe0 <_scanf_i+0x1dc>)
 8010e20:	69a1      	ldr	r1, [r4, #24]
 8010e22:	4a70      	ldr	r2, [pc, #448]	; (8010fe4 <_scanf_i+0x1e0>)
 8010e24:	2903      	cmp	r1, #3
 8010e26:	bf18      	it	ne
 8010e28:	461a      	movne	r2, r3
 8010e2a:	68a3      	ldr	r3, [r4, #8]
 8010e2c:	9201      	str	r2, [sp, #4]
 8010e2e:	1e5a      	subs	r2, r3, #1
 8010e30:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010e34:	bf88      	it	hi
 8010e36:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010e3a:	4627      	mov	r7, r4
 8010e3c:	bf82      	ittt	hi
 8010e3e:	eb03 0905 	addhi.w	r9, r3, r5
 8010e42:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010e46:	60a3      	strhi	r3, [r4, #8]
 8010e48:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010e4c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010e50:	bf98      	it	ls
 8010e52:	f04f 0900 	movls.w	r9, #0
 8010e56:	6023      	str	r3, [r4, #0]
 8010e58:	463d      	mov	r5, r7
 8010e5a:	f04f 0b00 	mov.w	fp, #0
 8010e5e:	6831      	ldr	r1, [r6, #0]
 8010e60:	ab03      	add	r3, sp, #12
 8010e62:	7809      	ldrb	r1, [r1, #0]
 8010e64:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010e68:	2202      	movs	r2, #2
 8010e6a:	f7ef f9b1 	bl	80001d0 <memchr>
 8010e6e:	b328      	cbz	r0, 8010ebc <_scanf_i+0xb8>
 8010e70:	f1bb 0f01 	cmp.w	fp, #1
 8010e74:	d159      	bne.n	8010f2a <_scanf_i+0x126>
 8010e76:	6862      	ldr	r2, [r4, #4]
 8010e78:	b92a      	cbnz	r2, 8010e86 <_scanf_i+0x82>
 8010e7a:	6822      	ldr	r2, [r4, #0]
 8010e7c:	2308      	movs	r3, #8
 8010e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010e82:	6063      	str	r3, [r4, #4]
 8010e84:	6022      	str	r2, [r4, #0]
 8010e86:	6822      	ldr	r2, [r4, #0]
 8010e88:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010e8c:	6022      	str	r2, [r4, #0]
 8010e8e:	68a2      	ldr	r2, [r4, #8]
 8010e90:	1e51      	subs	r1, r2, #1
 8010e92:	60a1      	str	r1, [r4, #8]
 8010e94:	b192      	cbz	r2, 8010ebc <_scanf_i+0xb8>
 8010e96:	6832      	ldr	r2, [r6, #0]
 8010e98:	1c51      	adds	r1, r2, #1
 8010e9a:	6031      	str	r1, [r6, #0]
 8010e9c:	7812      	ldrb	r2, [r2, #0]
 8010e9e:	f805 2b01 	strb.w	r2, [r5], #1
 8010ea2:	6872      	ldr	r2, [r6, #4]
 8010ea4:	3a01      	subs	r2, #1
 8010ea6:	2a00      	cmp	r2, #0
 8010ea8:	6072      	str	r2, [r6, #4]
 8010eaa:	dc07      	bgt.n	8010ebc <_scanf_i+0xb8>
 8010eac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010eb0:	4631      	mov	r1, r6
 8010eb2:	4650      	mov	r0, sl
 8010eb4:	4790      	blx	r2
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	f040 8085 	bne.w	8010fc6 <_scanf_i+0x1c2>
 8010ebc:	f10b 0b01 	add.w	fp, fp, #1
 8010ec0:	f1bb 0f03 	cmp.w	fp, #3
 8010ec4:	d1cb      	bne.n	8010e5e <_scanf_i+0x5a>
 8010ec6:	6863      	ldr	r3, [r4, #4]
 8010ec8:	b90b      	cbnz	r3, 8010ece <_scanf_i+0xca>
 8010eca:	230a      	movs	r3, #10
 8010ecc:	6063      	str	r3, [r4, #4]
 8010ece:	6863      	ldr	r3, [r4, #4]
 8010ed0:	4945      	ldr	r1, [pc, #276]	; (8010fe8 <_scanf_i+0x1e4>)
 8010ed2:	6960      	ldr	r0, [r4, #20]
 8010ed4:	1ac9      	subs	r1, r1, r3
 8010ed6:	f000 f937 	bl	8011148 <__sccl>
 8010eda:	f04f 0b00 	mov.w	fp, #0
 8010ede:	68a3      	ldr	r3, [r4, #8]
 8010ee0:	6822      	ldr	r2, [r4, #0]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d03d      	beq.n	8010f62 <_scanf_i+0x15e>
 8010ee6:	6831      	ldr	r1, [r6, #0]
 8010ee8:	6960      	ldr	r0, [r4, #20]
 8010eea:	f891 c000 	ldrb.w	ip, [r1]
 8010eee:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010ef2:	2800      	cmp	r0, #0
 8010ef4:	d035      	beq.n	8010f62 <_scanf_i+0x15e>
 8010ef6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010efa:	d124      	bne.n	8010f46 <_scanf_i+0x142>
 8010efc:	0510      	lsls	r0, r2, #20
 8010efe:	d522      	bpl.n	8010f46 <_scanf_i+0x142>
 8010f00:	f10b 0b01 	add.w	fp, fp, #1
 8010f04:	f1b9 0f00 	cmp.w	r9, #0
 8010f08:	d003      	beq.n	8010f12 <_scanf_i+0x10e>
 8010f0a:	3301      	adds	r3, #1
 8010f0c:	f109 39ff 	add.w	r9, r9, #4294967295
 8010f10:	60a3      	str	r3, [r4, #8]
 8010f12:	6873      	ldr	r3, [r6, #4]
 8010f14:	3b01      	subs	r3, #1
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	6073      	str	r3, [r6, #4]
 8010f1a:	dd1b      	ble.n	8010f54 <_scanf_i+0x150>
 8010f1c:	6833      	ldr	r3, [r6, #0]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	6033      	str	r3, [r6, #0]
 8010f22:	68a3      	ldr	r3, [r4, #8]
 8010f24:	3b01      	subs	r3, #1
 8010f26:	60a3      	str	r3, [r4, #8]
 8010f28:	e7d9      	b.n	8010ede <_scanf_i+0xda>
 8010f2a:	f1bb 0f02 	cmp.w	fp, #2
 8010f2e:	d1ae      	bne.n	8010e8e <_scanf_i+0x8a>
 8010f30:	6822      	ldr	r2, [r4, #0]
 8010f32:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010f36:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010f3a:	d1bf      	bne.n	8010ebc <_scanf_i+0xb8>
 8010f3c:	2310      	movs	r3, #16
 8010f3e:	6063      	str	r3, [r4, #4]
 8010f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010f44:	e7a2      	b.n	8010e8c <_scanf_i+0x88>
 8010f46:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010f4a:	6022      	str	r2, [r4, #0]
 8010f4c:	780b      	ldrb	r3, [r1, #0]
 8010f4e:	f805 3b01 	strb.w	r3, [r5], #1
 8010f52:	e7de      	b.n	8010f12 <_scanf_i+0x10e>
 8010f54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010f58:	4631      	mov	r1, r6
 8010f5a:	4650      	mov	r0, sl
 8010f5c:	4798      	blx	r3
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	d0df      	beq.n	8010f22 <_scanf_i+0x11e>
 8010f62:	6823      	ldr	r3, [r4, #0]
 8010f64:	05d9      	lsls	r1, r3, #23
 8010f66:	d50d      	bpl.n	8010f84 <_scanf_i+0x180>
 8010f68:	42bd      	cmp	r5, r7
 8010f6a:	d909      	bls.n	8010f80 <_scanf_i+0x17c>
 8010f6c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010f70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f74:	4632      	mov	r2, r6
 8010f76:	4650      	mov	r0, sl
 8010f78:	4798      	blx	r3
 8010f7a:	f105 39ff 	add.w	r9, r5, #4294967295
 8010f7e:	464d      	mov	r5, r9
 8010f80:	42bd      	cmp	r5, r7
 8010f82:	d028      	beq.n	8010fd6 <_scanf_i+0x1d2>
 8010f84:	6822      	ldr	r2, [r4, #0]
 8010f86:	f012 0210 	ands.w	r2, r2, #16
 8010f8a:	d113      	bne.n	8010fb4 <_scanf_i+0x1b0>
 8010f8c:	702a      	strb	r2, [r5, #0]
 8010f8e:	6863      	ldr	r3, [r4, #4]
 8010f90:	9e01      	ldr	r6, [sp, #4]
 8010f92:	4639      	mov	r1, r7
 8010f94:	4650      	mov	r0, sl
 8010f96:	47b0      	blx	r6
 8010f98:	f8d8 3000 	ldr.w	r3, [r8]
 8010f9c:	6821      	ldr	r1, [r4, #0]
 8010f9e:	1d1a      	adds	r2, r3, #4
 8010fa0:	f8c8 2000 	str.w	r2, [r8]
 8010fa4:	f011 0f20 	tst.w	r1, #32
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	d00f      	beq.n	8010fcc <_scanf_i+0x1c8>
 8010fac:	6018      	str	r0, [r3, #0]
 8010fae:	68e3      	ldr	r3, [r4, #12]
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	60e3      	str	r3, [r4, #12]
 8010fb4:	6923      	ldr	r3, [r4, #16]
 8010fb6:	1bed      	subs	r5, r5, r7
 8010fb8:	445d      	add	r5, fp
 8010fba:	442b      	add	r3, r5
 8010fbc:	6123      	str	r3, [r4, #16]
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	b007      	add	sp, #28
 8010fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fc6:	f04f 0b00 	mov.w	fp, #0
 8010fca:	e7ca      	b.n	8010f62 <_scanf_i+0x15e>
 8010fcc:	07ca      	lsls	r2, r1, #31
 8010fce:	bf4c      	ite	mi
 8010fd0:	8018      	strhmi	r0, [r3, #0]
 8010fd2:	6018      	strpl	r0, [r3, #0]
 8010fd4:	e7eb      	b.n	8010fae <_scanf_i+0x1aa>
 8010fd6:	2001      	movs	r0, #1
 8010fd8:	e7f2      	b.n	8010fc0 <_scanf_i+0x1bc>
 8010fda:	bf00      	nop
 8010fdc:	08013934 	.word	0x08013934
 8010fe0:	08011b35 	.word	0x08011b35
 8010fe4:	080106f9 	.word	0x080106f9
 8010fe8:	08013d1a 	.word	0x08013d1a

08010fec <__sflush_r>:
 8010fec:	898a      	ldrh	r2, [r1, #12]
 8010fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ff2:	4605      	mov	r5, r0
 8010ff4:	0710      	lsls	r0, r2, #28
 8010ff6:	460c      	mov	r4, r1
 8010ff8:	d458      	bmi.n	80110ac <__sflush_r+0xc0>
 8010ffa:	684b      	ldr	r3, [r1, #4]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	dc05      	bgt.n	801100c <__sflush_r+0x20>
 8011000:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011002:	2b00      	cmp	r3, #0
 8011004:	dc02      	bgt.n	801100c <__sflush_r+0x20>
 8011006:	2000      	movs	r0, #0
 8011008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801100c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801100e:	2e00      	cmp	r6, #0
 8011010:	d0f9      	beq.n	8011006 <__sflush_r+0x1a>
 8011012:	2300      	movs	r3, #0
 8011014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011018:	682f      	ldr	r7, [r5, #0]
 801101a:	6a21      	ldr	r1, [r4, #32]
 801101c:	602b      	str	r3, [r5, #0]
 801101e:	d032      	beq.n	8011086 <__sflush_r+0x9a>
 8011020:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011022:	89a3      	ldrh	r3, [r4, #12]
 8011024:	075a      	lsls	r2, r3, #29
 8011026:	d505      	bpl.n	8011034 <__sflush_r+0x48>
 8011028:	6863      	ldr	r3, [r4, #4]
 801102a:	1ac0      	subs	r0, r0, r3
 801102c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801102e:	b10b      	cbz	r3, 8011034 <__sflush_r+0x48>
 8011030:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011032:	1ac0      	subs	r0, r0, r3
 8011034:	2300      	movs	r3, #0
 8011036:	4602      	mov	r2, r0
 8011038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801103a:	6a21      	ldr	r1, [r4, #32]
 801103c:	4628      	mov	r0, r5
 801103e:	47b0      	blx	r6
 8011040:	1c43      	adds	r3, r0, #1
 8011042:	89a3      	ldrh	r3, [r4, #12]
 8011044:	d106      	bne.n	8011054 <__sflush_r+0x68>
 8011046:	6829      	ldr	r1, [r5, #0]
 8011048:	291d      	cmp	r1, #29
 801104a:	d82b      	bhi.n	80110a4 <__sflush_r+0xb8>
 801104c:	4a29      	ldr	r2, [pc, #164]	; (80110f4 <__sflush_r+0x108>)
 801104e:	410a      	asrs	r2, r1
 8011050:	07d6      	lsls	r6, r2, #31
 8011052:	d427      	bmi.n	80110a4 <__sflush_r+0xb8>
 8011054:	2200      	movs	r2, #0
 8011056:	6062      	str	r2, [r4, #4]
 8011058:	04d9      	lsls	r1, r3, #19
 801105a:	6922      	ldr	r2, [r4, #16]
 801105c:	6022      	str	r2, [r4, #0]
 801105e:	d504      	bpl.n	801106a <__sflush_r+0x7e>
 8011060:	1c42      	adds	r2, r0, #1
 8011062:	d101      	bne.n	8011068 <__sflush_r+0x7c>
 8011064:	682b      	ldr	r3, [r5, #0]
 8011066:	b903      	cbnz	r3, 801106a <__sflush_r+0x7e>
 8011068:	6560      	str	r0, [r4, #84]	; 0x54
 801106a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801106c:	602f      	str	r7, [r5, #0]
 801106e:	2900      	cmp	r1, #0
 8011070:	d0c9      	beq.n	8011006 <__sflush_r+0x1a>
 8011072:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011076:	4299      	cmp	r1, r3
 8011078:	d002      	beq.n	8011080 <__sflush_r+0x94>
 801107a:	4628      	mov	r0, r5
 801107c:	f7fd fefa 	bl	800ee74 <_free_r>
 8011080:	2000      	movs	r0, #0
 8011082:	6360      	str	r0, [r4, #52]	; 0x34
 8011084:	e7c0      	b.n	8011008 <__sflush_r+0x1c>
 8011086:	2301      	movs	r3, #1
 8011088:	4628      	mov	r0, r5
 801108a:	47b0      	blx	r6
 801108c:	1c41      	adds	r1, r0, #1
 801108e:	d1c8      	bne.n	8011022 <__sflush_r+0x36>
 8011090:	682b      	ldr	r3, [r5, #0]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d0c5      	beq.n	8011022 <__sflush_r+0x36>
 8011096:	2b1d      	cmp	r3, #29
 8011098:	d001      	beq.n	801109e <__sflush_r+0xb2>
 801109a:	2b16      	cmp	r3, #22
 801109c:	d101      	bne.n	80110a2 <__sflush_r+0xb6>
 801109e:	602f      	str	r7, [r5, #0]
 80110a0:	e7b1      	b.n	8011006 <__sflush_r+0x1a>
 80110a2:	89a3      	ldrh	r3, [r4, #12]
 80110a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110a8:	81a3      	strh	r3, [r4, #12]
 80110aa:	e7ad      	b.n	8011008 <__sflush_r+0x1c>
 80110ac:	690f      	ldr	r7, [r1, #16]
 80110ae:	2f00      	cmp	r7, #0
 80110b0:	d0a9      	beq.n	8011006 <__sflush_r+0x1a>
 80110b2:	0793      	lsls	r3, r2, #30
 80110b4:	680e      	ldr	r6, [r1, #0]
 80110b6:	bf08      	it	eq
 80110b8:	694b      	ldreq	r3, [r1, #20]
 80110ba:	600f      	str	r7, [r1, #0]
 80110bc:	bf18      	it	ne
 80110be:	2300      	movne	r3, #0
 80110c0:	eba6 0807 	sub.w	r8, r6, r7
 80110c4:	608b      	str	r3, [r1, #8]
 80110c6:	f1b8 0f00 	cmp.w	r8, #0
 80110ca:	dd9c      	ble.n	8011006 <__sflush_r+0x1a>
 80110cc:	6a21      	ldr	r1, [r4, #32]
 80110ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80110d0:	4643      	mov	r3, r8
 80110d2:	463a      	mov	r2, r7
 80110d4:	4628      	mov	r0, r5
 80110d6:	47b0      	blx	r6
 80110d8:	2800      	cmp	r0, #0
 80110da:	dc06      	bgt.n	80110ea <__sflush_r+0xfe>
 80110dc:	89a3      	ldrh	r3, [r4, #12]
 80110de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110e2:	81a3      	strh	r3, [r4, #12]
 80110e4:	f04f 30ff 	mov.w	r0, #4294967295
 80110e8:	e78e      	b.n	8011008 <__sflush_r+0x1c>
 80110ea:	4407      	add	r7, r0
 80110ec:	eba8 0800 	sub.w	r8, r8, r0
 80110f0:	e7e9      	b.n	80110c6 <__sflush_r+0xda>
 80110f2:	bf00      	nop
 80110f4:	dfbffffe 	.word	0xdfbffffe

080110f8 <_fflush_r>:
 80110f8:	b538      	push	{r3, r4, r5, lr}
 80110fa:	690b      	ldr	r3, [r1, #16]
 80110fc:	4605      	mov	r5, r0
 80110fe:	460c      	mov	r4, r1
 8011100:	b913      	cbnz	r3, 8011108 <_fflush_r+0x10>
 8011102:	2500      	movs	r5, #0
 8011104:	4628      	mov	r0, r5
 8011106:	bd38      	pop	{r3, r4, r5, pc}
 8011108:	b118      	cbz	r0, 8011112 <_fflush_r+0x1a>
 801110a:	6a03      	ldr	r3, [r0, #32]
 801110c:	b90b      	cbnz	r3, 8011112 <_fflush_r+0x1a>
 801110e:	f7fc fe67 	bl	800dde0 <__sinit>
 8011112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d0f3      	beq.n	8011102 <_fflush_r+0xa>
 801111a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801111c:	07d0      	lsls	r0, r2, #31
 801111e:	d404      	bmi.n	801112a <_fflush_r+0x32>
 8011120:	0599      	lsls	r1, r3, #22
 8011122:	d402      	bmi.n	801112a <_fflush_r+0x32>
 8011124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011126:	f7fd f80c 	bl	800e142 <__retarget_lock_acquire_recursive>
 801112a:	4628      	mov	r0, r5
 801112c:	4621      	mov	r1, r4
 801112e:	f7ff ff5d 	bl	8010fec <__sflush_r>
 8011132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011134:	07da      	lsls	r2, r3, #31
 8011136:	4605      	mov	r5, r0
 8011138:	d4e4      	bmi.n	8011104 <_fflush_r+0xc>
 801113a:	89a3      	ldrh	r3, [r4, #12]
 801113c:	059b      	lsls	r3, r3, #22
 801113e:	d4e1      	bmi.n	8011104 <_fflush_r+0xc>
 8011140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011142:	f7fc ffff 	bl	800e144 <__retarget_lock_release_recursive>
 8011146:	e7dd      	b.n	8011104 <_fflush_r+0xc>

08011148 <__sccl>:
 8011148:	b570      	push	{r4, r5, r6, lr}
 801114a:	780b      	ldrb	r3, [r1, #0]
 801114c:	4604      	mov	r4, r0
 801114e:	2b5e      	cmp	r3, #94	; 0x5e
 8011150:	bf0b      	itete	eq
 8011152:	784b      	ldrbeq	r3, [r1, #1]
 8011154:	1c4a      	addne	r2, r1, #1
 8011156:	1c8a      	addeq	r2, r1, #2
 8011158:	2100      	movne	r1, #0
 801115a:	bf08      	it	eq
 801115c:	2101      	moveq	r1, #1
 801115e:	3801      	subs	r0, #1
 8011160:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011164:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011168:	42a8      	cmp	r0, r5
 801116a:	d1fb      	bne.n	8011164 <__sccl+0x1c>
 801116c:	b90b      	cbnz	r3, 8011172 <__sccl+0x2a>
 801116e:	1e50      	subs	r0, r2, #1
 8011170:	bd70      	pop	{r4, r5, r6, pc}
 8011172:	f081 0101 	eor.w	r1, r1, #1
 8011176:	54e1      	strb	r1, [r4, r3]
 8011178:	4610      	mov	r0, r2
 801117a:	4602      	mov	r2, r0
 801117c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011180:	2d2d      	cmp	r5, #45	; 0x2d
 8011182:	d005      	beq.n	8011190 <__sccl+0x48>
 8011184:	2d5d      	cmp	r5, #93	; 0x5d
 8011186:	d016      	beq.n	80111b6 <__sccl+0x6e>
 8011188:	2d00      	cmp	r5, #0
 801118a:	d0f1      	beq.n	8011170 <__sccl+0x28>
 801118c:	462b      	mov	r3, r5
 801118e:	e7f2      	b.n	8011176 <__sccl+0x2e>
 8011190:	7846      	ldrb	r6, [r0, #1]
 8011192:	2e5d      	cmp	r6, #93	; 0x5d
 8011194:	d0fa      	beq.n	801118c <__sccl+0x44>
 8011196:	42b3      	cmp	r3, r6
 8011198:	dcf8      	bgt.n	801118c <__sccl+0x44>
 801119a:	3002      	adds	r0, #2
 801119c:	461a      	mov	r2, r3
 801119e:	3201      	adds	r2, #1
 80111a0:	4296      	cmp	r6, r2
 80111a2:	54a1      	strb	r1, [r4, r2]
 80111a4:	dcfb      	bgt.n	801119e <__sccl+0x56>
 80111a6:	1af2      	subs	r2, r6, r3
 80111a8:	3a01      	subs	r2, #1
 80111aa:	1c5d      	adds	r5, r3, #1
 80111ac:	42b3      	cmp	r3, r6
 80111ae:	bfa8      	it	ge
 80111b0:	2200      	movge	r2, #0
 80111b2:	18ab      	adds	r3, r5, r2
 80111b4:	e7e1      	b.n	801117a <__sccl+0x32>
 80111b6:	4610      	mov	r0, r2
 80111b8:	e7da      	b.n	8011170 <__sccl+0x28>

080111ba <__submore>:
 80111ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111be:	460c      	mov	r4, r1
 80111c0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80111c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111c6:	4299      	cmp	r1, r3
 80111c8:	d11d      	bne.n	8011206 <__submore+0x4c>
 80111ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80111ce:	f7fd fec5 	bl	800ef5c <_malloc_r>
 80111d2:	b918      	cbnz	r0, 80111dc <__submore+0x22>
 80111d4:	f04f 30ff 	mov.w	r0, #4294967295
 80111d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80111e2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80111e6:	6360      	str	r0, [r4, #52]	; 0x34
 80111e8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80111ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80111f0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80111f4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80111f8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80111fc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011200:	6020      	str	r0, [r4, #0]
 8011202:	2000      	movs	r0, #0
 8011204:	e7e8      	b.n	80111d8 <__submore+0x1e>
 8011206:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011208:	0077      	lsls	r7, r6, #1
 801120a:	463a      	mov	r2, r7
 801120c:	f000 fbf1 	bl	80119f2 <_realloc_r>
 8011210:	4605      	mov	r5, r0
 8011212:	2800      	cmp	r0, #0
 8011214:	d0de      	beq.n	80111d4 <__submore+0x1a>
 8011216:	eb00 0806 	add.w	r8, r0, r6
 801121a:	4601      	mov	r1, r0
 801121c:	4632      	mov	r2, r6
 801121e:	4640      	mov	r0, r8
 8011220:	f7fc ff99 	bl	800e156 <memcpy>
 8011224:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011228:	f8c4 8000 	str.w	r8, [r4]
 801122c:	e7e9      	b.n	8011202 <__submore+0x48>

0801122e <memmove>:
 801122e:	4288      	cmp	r0, r1
 8011230:	b510      	push	{r4, lr}
 8011232:	eb01 0402 	add.w	r4, r1, r2
 8011236:	d902      	bls.n	801123e <memmove+0x10>
 8011238:	4284      	cmp	r4, r0
 801123a:	4623      	mov	r3, r4
 801123c:	d807      	bhi.n	801124e <memmove+0x20>
 801123e:	1e43      	subs	r3, r0, #1
 8011240:	42a1      	cmp	r1, r4
 8011242:	d008      	beq.n	8011256 <memmove+0x28>
 8011244:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011248:	f803 2f01 	strb.w	r2, [r3, #1]!
 801124c:	e7f8      	b.n	8011240 <memmove+0x12>
 801124e:	4402      	add	r2, r0
 8011250:	4601      	mov	r1, r0
 8011252:	428a      	cmp	r2, r1
 8011254:	d100      	bne.n	8011258 <memmove+0x2a>
 8011256:	bd10      	pop	{r4, pc}
 8011258:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801125c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011260:	e7f7      	b.n	8011252 <memmove+0x24>

08011262 <strncmp>:
 8011262:	b510      	push	{r4, lr}
 8011264:	b16a      	cbz	r2, 8011282 <strncmp+0x20>
 8011266:	3901      	subs	r1, #1
 8011268:	1884      	adds	r4, r0, r2
 801126a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801126e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011272:	429a      	cmp	r2, r3
 8011274:	d103      	bne.n	801127e <strncmp+0x1c>
 8011276:	42a0      	cmp	r0, r4
 8011278:	d001      	beq.n	801127e <strncmp+0x1c>
 801127a:	2a00      	cmp	r2, #0
 801127c:	d1f5      	bne.n	801126a <strncmp+0x8>
 801127e:	1ad0      	subs	r0, r2, r3
 8011280:	bd10      	pop	{r4, pc}
 8011282:	4610      	mov	r0, r2
 8011284:	e7fc      	b.n	8011280 <strncmp+0x1e>
	...

08011288 <_sbrk_r>:
 8011288:	b538      	push	{r3, r4, r5, lr}
 801128a:	4d06      	ldr	r5, [pc, #24]	; (80112a4 <_sbrk_r+0x1c>)
 801128c:	2300      	movs	r3, #0
 801128e:	4604      	mov	r4, r0
 8011290:	4608      	mov	r0, r1
 8011292:	602b      	str	r3, [r5, #0]
 8011294:	f7f2 fa00 	bl	8003698 <_sbrk>
 8011298:	1c43      	adds	r3, r0, #1
 801129a:	d102      	bne.n	80112a2 <_sbrk_r+0x1a>
 801129c:	682b      	ldr	r3, [r5, #0]
 801129e:	b103      	cbz	r3, 80112a2 <_sbrk_r+0x1a>
 80112a0:	6023      	str	r3, [r4, #0]
 80112a2:	bd38      	pop	{r3, r4, r5, pc}
 80112a4:	20008c0c 	.word	0x20008c0c

080112a8 <nan>:
 80112a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80112b0 <nan+0x8>
 80112ac:	4770      	bx	lr
 80112ae:	bf00      	nop
 80112b0:	00000000 	.word	0x00000000
 80112b4:	7ff80000 	.word	0x7ff80000

080112b8 <__assert_func>:
 80112b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112ba:	4614      	mov	r4, r2
 80112bc:	461a      	mov	r2, r3
 80112be:	4b09      	ldr	r3, [pc, #36]	; (80112e4 <__assert_func+0x2c>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	4605      	mov	r5, r0
 80112c4:	68d8      	ldr	r0, [r3, #12]
 80112c6:	b14c      	cbz	r4, 80112dc <__assert_func+0x24>
 80112c8:	4b07      	ldr	r3, [pc, #28]	; (80112e8 <__assert_func+0x30>)
 80112ca:	9100      	str	r1, [sp, #0]
 80112cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112d0:	4906      	ldr	r1, [pc, #24]	; (80112ec <__assert_func+0x34>)
 80112d2:	462b      	mov	r3, r5
 80112d4:	f000 fc3e 	bl	8011b54 <fiprintf>
 80112d8:	f000 fc4e 	bl	8011b78 <abort>
 80112dc:	4b04      	ldr	r3, [pc, #16]	; (80112f0 <__assert_func+0x38>)
 80112de:	461c      	mov	r4, r3
 80112e0:	e7f3      	b.n	80112ca <__assert_func+0x12>
 80112e2:	bf00      	nop
 80112e4:	20000130 	.word	0x20000130
 80112e8:	08013d2d 	.word	0x08013d2d
 80112ec:	08013d3a 	.word	0x08013d3a
 80112f0:	08013d68 	.word	0x08013d68

080112f4 <_calloc_r>:
 80112f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112f6:	fba1 2402 	umull	r2, r4, r1, r2
 80112fa:	b94c      	cbnz	r4, 8011310 <_calloc_r+0x1c>
 80112fc:	4611      	mov	r1, r2
 80112fe:	9201      	str	r2, [sp, #4]
 8011300:	f7fd fe2c 	bl	800ef5c <_malloc_r>
 8011304:	9a01      	ldr	r2, [sp, #4]
 8011306:	4605      	mov	r5, r0
 8011308:	b930      	cbnz	r0, 8011318 <_calloc_r+0x24>
 801130a:	4628      	mov	r0, r5
 801130c:	b003      	add	sp, #12
 801130e:	bd30      	pop	{r4, r5, pc}
 8011310:	220c      	movs	r2, #12
 8011312:	6002      	str	r2, [r0, #0]
 8011314:	2500      	movs	r5, #0
 8011316:	e7f8      	b.n	801130a <_calloc_r+0x16>
 8011318:	4621      	mov	r1, r4
 801131a:	f7fc fe28 	bl	800df6e <memset>
 801131e:	e7f4      	b.n	801130a <_calloc_r+0x16>

08011320 <rshift>:
 8011320:	6903      	ldr	r3, [r0, #16]
 8011322:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011326:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801132a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801132e:	f100 0414 	add.w	r4, r0, #20
 8011332:	dd45      	ble.n	80113c0 <rshift+0xa0>
 8011334:	f011 011f 	ands.w	r1, r1, #31
 8011338:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801133c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011340:	d10c      	bne.n	801135c <rshift+0x3c>
 8011342:	f100 0710 	add.w	r7, r0, #16
 8011346:	4629      	mov	r1, r5
 8011348:	42b1      	cmp	r1, r6
 801134a:	d334      	bcc.n	80113b6 <rshift+0x96>
 801134c:	1a9b      	subs	r3, r3, r2
 801134e:	009b      	lsls	r3, r3, #2
 8011350:	1eea      	subs	r2, r5, #3
 8011352:	4296      	cmp	r6, r2
 8011354:	bf38      	it	cc
 8011356:	2300      	movcc	r3, #0
 8011358:	4423      	add	r3, r4
 801135a:	e015      	b.n	8011388 <rshift+0x68>
 801135c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011360:	f1c1 0820 	rsb	r8, r1, #32
 8011364:	40cf      	lsrs	r7, r1
 8011366:	f105 0e04 	add.w	lr, r5, #4
 801136a:	46a1      	mov	r9, r4
 801136c:	4576      	cmp	r6, lr
 801136e:	46f4      	mov	ip, lr
 8011370:	d815      	bhi.n	801139e <rshift+0x7e>
 8011372:	1a9a      	subs	r2, r3, r2
 8011374:	0092      	lsls	r2, r2, #2
 8011376:	3a04      	subs	r2, #4
 8011378:	3501      	adds	r5, #1
 801137a:	42ae      	cmp	r6, r5
 801137c:	bf38      	it	cc
 801137e:	2200      	movcc	r2, #0
 8011380:	18a3      	adds	r3, r4, r2
 8011382:	50a7      	str	r7, [r4, r2]
 8011384:	b107      	cbz	r7, 8011388 <rshift+0x68>
 8011386:	3304      	adds	r3, #4
 8011388:	1b1a      	subs	r2, r3, r4
 801138a:	42a3      	cmp	r3, r4
 801138c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011390:	bf08      	it	eq
 8011392:	2300      	moveq	r3, #0
 8011394:	6102      	str	r2, [r0, #16]
 8011396:	bf08      	it	eq
 8011398:	6143      	streq	r3, [r0, #20]
 801139a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801139e:	f8dc c000 	ldr.w	ip, [ip]
 80113a2:	fa0c fc08 	lsl.w	ip, ip, r8
 80113a6:	ea4c 0707 	orr.w	r7, ip, r7
 80113aa:	f849 7b04 	str.w	r7, [r9], #4
 80113ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80113b2:	40cf      	lsrs	r7, r1
 80113b4:	e7da      	b.n	801136c <rshift+0x4c>
 80113b6:	f851 cb04 	ldr.w	ip, [r1], #4
 80113ba:	f847 cf04 	str.w	ip, [r7, #4]!
 80113be:	e7c3      	b.n	8011348 <rshift+0x28>
 80113c0:	4623      	mov	r3, r4
 80113c2:	e7e1      	b.n	8011388 <rshift+0x68>

080113c4 <__hexdig_fun>:
 80113c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80113c8:	2b09      	cmp	r3, #9
 80113ca:	d802      	bhi.n	80113d2 <__hexdig_fun+0xe>
 80113cc:	3820      	subs	r0, #32
 80113ce:	b2c0      	uxtb	r0, r0
 80113d0:	4770      	bx	lr
 80113d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80113d6:	2b05      	cmp	r3, #5
 80113d8:	d801      	bhi.n	80113de <__hexdig_fun+0x1a>
 80113da:	3847      	subs	r0, #71	; 0x47
 80113dc:	e7f7      	b.n	80113ce <__hexdig_fun+0xa>
 80113de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80113e2:	2b05      	cmp	r3, #5
 80113e4:	d801      	bhi.n	80113ea <__hexdig_fun+0x26>
 80113e6:	3827      	subs	r0, #39	; 0x27
 80113e8:	e7f1      	b.n	80113ce <__hexdig_fun+0xa>
 80113ea:	2000      	movs	r0, #0
 80113ec:	4770      	bx	lr
	...

080113f0 <__gethex>:
 80113f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113f4:	4617      	mov	r7, r2
 80113f6:	680a      	ldr	r2, [r1, #0]
 80113f8:	b085      	sub	sp, #20
 80113fa:	f102 0b02 	add.w	fp, r2, #2
 80113fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011402:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011406:	4681      	mov	r9, r0
 8011408:	468a      	mov	sl, r1
 801140a:	9302      	str	r3, [sp, #8]
 801140c:	32fe      	adds	r2, #254	; 0xfe
 801140e:	eb02 030b 	add.w	r3, r2, fp
 8011412:	46d8      	mov	r8, fp
 8011414:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8011418:	9301      	str	r3, [sp, #4]
 801141a:	2830      	cmp	r0, #48	; 0x30
 801141c:	d0f7      	beq.n	801140e <__gethex+0x1e>
 801141e:	f7ff ffd1 	bl	80113c4 <__hexdig_fun>
 8011422:	4604      	mov	r4, r0
 8011424:	2800      	cmp	r0, #0
 8011426:	d138      	bne.n	801149a <__gethex+0xaa>
 8011428:	49a7      	ldr	r1, [pc, #668]	; (80116c8 <__gethex+0x2d8>)
 801142a:	2201      	movs	r2, #1
 801142c:	4640      	mov	r0, r8
 801142e:	f7ff ff18 	bl	8011262 <strncmp>
 8011432:	4606      	mov	r6, r0
 8011434:	2800      	cmp	r0, #0
 8011436:	d169      	bne.n	801150c <__gethex+0x11c>
 8011438:	f898 0001 	ldrb.w	r0, [r8, #1]
 801143c:	465d      	mov	r5, fp
 801143e:	f7ff ffc1 	bl	80113c4 <__hexdig_fun>
 8011442:	2800      	cmp	r0, #0
 8011444:	d064      	beq.n	8011510 <__gethex+0x120>
 8011446:	465a      	mov	r2, fp
 8011448:	7810      	ldrb	r0, [r2, #0]
 801144a:	2830      	cmp	r0, #48	; 0x30
 801144c:	4690      	mov	r8, r2
 801144e:	f102 0201 	add.w	r2, r2, #1
 8011452:	d0f9      	beq.n	8011448 <__gethex+0x58>
 8011454:	f7ff ffb6 	bl	80113c4 <__hexdig_fun>
 8011458:	2301      	movs	r3, #1
 801145a:	fab0 f480 	clz	r4, r0
 801145e:	0964      	lsrs	r4, r4, #5
 8011460:	465e      	mov	r6, fp
 8011462:	9301      	str	r3, [sp, #4]
 8011464:	4642      	mov	r2, r8
 8011466:	4615      	mov	r5, r2
 8011468:	3201      	adds	r2, #1
 801146a:	7828      	ldrb	r0, [r5, #0]
 801146c:	f7ff ffaa 	bl	80113c4 <__hexdig_fun>
 8011470:	2800      	cmp	r0, #0
 8011472:	d1f8      	bne.n	8011466 <__gethex+0x76>
 8011474:	4994      	ldr	r1, [pc, #592]	; (80116c8 <__gethex+0x2d8>)
 8011476:	2201      	movs	r2, #1
 8011478:	4628      	mov	r0, r5
 801147a:	f7ff fef2 	bl	8011262 <strncmp>
 801147e:	b978      	cbnz	r0, 80114a0 <__gethex+0xb0>
 8011480:	b946      	cbnz	r6, 8011494 <__gethex+0xa4>
 8011482:	1c6e      	adds	r6, r5, #1
 8011484:	4632      	mov	r2, r6
 8011486:	4615      	mov	r5, r2
 8011488:	3201      	adds	r2, #1
 801148a:	7828      	ldrb	r0, [r5, #0]
 801148c:	f7ff ff9a 	bl	80113c4 <__hexdig_fun>
 8011490:	2800      	cmp	r0, #0
 8011492:	d1f8      	bne.n	8011486 <__gethex+0x96>
 8011494:	1b73      	subs	r3, r6, r5
 8011496:	009e      	lsls	r6, r3, #2
 8011498:	e004      	b.n	80114a4 <__gethex+0xb4>
 801149a:	2400      	movs	r4, #0
 801149c:	4626      	mov	r6, r4
 801149e:	e7e1      	b.n	8011464 <__gethex+0x74>
 80114a0:	2e00      	cmp	r6, #0
 80114a2:	d1f7      	bne.n	8011494 <__gethex+0xa4>
 80114a4:	782b      	ldrb	r3, [r5, #0]
 80114a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80114aa:	2b50      	cmp	r3, #80	; 0x50
 80114ac:	d13d      	bne.n	801152a <__gethex+0x13a>
 80114ae:	786b      	ldrb	r3, [r5, #1]
 80114b0:	2b2b      	cmp	r3, #43	; 0x2b
 80114b2:	d02f      	beq.n	8011514 <__gethex+0x124>
 80114b4:	2b2d      	cmp	r3, #45	; 0x2d
 80114b6:	d031      	beq.n	801151c <__gethex+0x12c>
 80114b8:	1c69      	adds	r1, r5, #1
 80114ba:	f04f 0b00 	mov.w	fp, #0
 80114be:	7808      	ldrb	r0, [r1, #0]
 80114c0:	f7ff ff80 	bl	80113c4 <__hexdig_fun>
 80114c4:	1e42      	subs	r2, r0, #1
 80114c6:	b2d2      	uxtb	r2, r2
 80114c8:	2a18      	cmp	r2, #24
 80114ca:	d82e      	bhi.n	801152a <__gethex+0x13a>
 80114cc:	f1a0 0210 	sub.w	r2, r0, #16
 80114d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80114d4:	f7ff ff76 	bl	80113c4 <__hexdig_fun>
 80114d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80114dc:	fa5f fc8c 	uxtb.w	ip, ip
 80114e0:	f1bc 0f18 	cmp.w	ip, #24
 80114e4:	d91d      	bls.n	8011522 <__gethex+0x132>
 80114e6:	f1bb 0f00 	cmp.w	fp, #0
 80114ea:	d000      	beq.n	80114ee <__gethex+0xfe>
 80114ec:	4252      	negs	r2, r2
 80114ee:	4416      	add	r6, r2
 80114f0:	f8ca 1000 	str.w	r1, [sl]
 80114f4:	b1dc      	cbz	r4, 801152e <__gethex+0x13e>
 80114f6:	9b01      	ldr	r3, [sp, #4]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	bf14      	ite	ne
 80114fc:	f04f 0800 	movne.w	r8, #0
 8011500:	f04f 0806 	moveq.w	r8, #6
 8011504:	4640      	mov	r0, r8
 8011506:	b005      	add	sp, #20
 8011508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801150c:	4645      	mov	r5, r8
 801150e:	4626      	mov	r6, r4
 8011510:	2401      	movs	r4, #1
 8011512:	e7c7      	b.n	80114a4 <__gethex+0xb4>
 8011514:	f04f 0b00 	mov.w	fp, #0
 8011518:	1ca9      	adds	r1, r5, #2
 801151a:	e7d0      	b.n	80114be <__gethex+0xce>
 801151c:	f04f 0b01 	mov.w	fp, #1
 8011520:	e7fa      	b.n	8011518 <__gethex+0x128>
 8011522:	230a      	movs	r3, #10
 8011524:	fb03 0002 	mla	r0, r3, r2, r0
 8011528:	e7d0      	b.n	80114cc <__gethex+0xdc>
 801152a:	4629      	mov	r1, r5
 801152c:	e7e0      	b.n	80114f0 <__gethex+0x100>
 801152e:	eba5 0308 	sub.w	r3, r5, r8
 8011532:	3b01      	subs	r3, #1
 8011534:	4621      	mov	r1, r4
 8011536:	2b07      	cmp	r3, #7
 8011538:	dc0a      	bgt.n	8011550 <__gethex+0x160>
 801153a:	4648      	mov	r0, r9
 801153c:	f7fd fd9a 	bl	800f074 <_Balloc>
 8011540:	4604      	mov	r4, r0
 8011542:	b940      	cbnz	r0, 8011556 <__gethex+0x166>
 8011544:	4b61      	ldr	r3, [pc, #388]	; (80116cc <__gethex+0x2dc>)
 8011546:	4602      	mov	r2, r0
 8011548:	21e4      	movs	r1, #228	; 0xe4
 801154a:	4861      	ldr	r0, [pc, #388]	; (80116d0 <__gethex+0x2e0>)
 801154c:	f7ff feb4 	bl	80112b8 <__assert_func>
 8011550:	3101      	adds	r1, #1
 8011552:	105b      	asrs	r3, r3, #1
 8011554:	e7ef      	b.n	8011536 <__gethex+0x146>
 8011556:	f100 0a14 	add.w	sl, r0, #20
 801155a:	2300      	movs	r3, #0
 801155c:	495a      	ldr	r1, [pc, #360]	; (80116c8 <__gethex+0x2d8>)
 801155e:	f8cd a004 	str.w	sl, [sp, #4]
 8011562:	469b      	mov	fp, r3
 8011564:	45a8      	cmp	r8, r5
 8011566:	d342      	bcc.n	80115ee <__gethex+0x1fe>
 8011568:	9801      	ldr	r0, [sp, #4]
 801156a:	f840 bb04 	str.w	fp, [r0], #4
 801156e:	eba0 000a 	sub.w	r0, r0, sl
 8011572:	1080      	asrs	r0, r0, #2
 8011574:	6120      	str	r0, [r4, #16]
 8011576:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801157a:	4658      	mov	r0, fp
 801157c:	f7fd fe6c 	bl	800f258 <__hi0bits>
 8011580:	683d      	ldr	r5, [r7, #0]
 8011582:	eba8 0000 	sub.w	r0, r8, r0
 8011586:	42a8      	cmp	r0, r5
 8011588:	dd59      	ble.n	801163e <__gethex+0x24e>
 801158a:	eba0 0805 	sub.w	r8, r0, r5
 801158e:	4641      	mov	r1, r8
 8011590:	4620      	mov	r0, r4
 8011592:	f7fe f9fb 	bl	800f98c <__any_on>
 8011596:	4683      	mov	fp, r0
 8011598:	b1b8      	cbz	r0, 80115ca <__gethex+0x1da>
 801159a:	f108 33ff 	add.w	r3, r8, #4294967295
 801159e:	1159      	asrs	r1, r3, #5
 80115a0:	f003 021f 	and.w	r2, r3, #31
 80115a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80115a8:	f04f 0b01 	mov.w	fp, #1
 80115ac:	fa0b f202 	lsl.w	r2, fp, r2
 80115b0:	420a      	tst	r2, r1
 80115b2:	d00a      	beq.n	80115ca <__gethex+0x1da>
 80115b4:	455b      	cmp	r3, fp
 80115b6:	dd06      	ble.n	80115c6 <__gethex+0x1d6>
 80115b8:	f1a8 0102 	sub.w	r1, r8, #2
 80115bc:	4620      	mov	r0, r4
 80115be:	f7fe f9e5 	bl	800f98c <__any_on>
 80115c2:	2800      	cmp	r0, #0
 80115c4:	d138      	bne.n	8011638 <__gethex+0x248>
 80115c6:	f04f 0b02 	mov.w	fp, #2
 80115ca:	4641      	mov	r1, r8
 80115cc:	4620      	mov	r0, r4
 80115ce:	f7ff fea7 	bl	8011320 <rshift>
 80115d2:	4446      	add	r6, r8
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	42b3      	cmp	r3, r6
 80115d8:	da41      	bge.n	801165e <__gethex+0x26e>
 80115da:	4621      	mov	r1, r4
 80115dc:	4648      	mov	r0, r9
 80115de:	f7fd fd89 	bl	800f0f4 <_Bfree>
 80115e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80115e4:	2300      	movs	r3, #0
 80115e6:	6013      	str	r3, [r2, #0]
 80115e8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80115ec:	e78a      	b.n	8011504 <__gethex+0x114>
 80115ee:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80115f2:	2a2e      	cmp	r2, #46	; 0x2e
 80115f4:	d014      	beq.n	8011620 <__gethex+0x230>
 80115f6:	2b20      	cmp	r3, #32
 80115f8:	d106      	bne.n	8011608 <__gethex+0x218>
 80115fa:	9b01      	ldr	r3, [sp, #4]
 80115fc:	f843 bb04 	str.w	fp, [r3], #4
 8011600:	f04f 0b00 	mov.w	fp, #0
 8011604:	9301      	str	r3, [sp, #4]
 8011606:	465b      	mov	r3, fp
 8011608:	7828      	ldrb	r0, [r5, #0]
 801160a:	9303      	str	r3, [sp, #12]
 801160c:	f7ff feda 	bl	80113c4 <__hexdig_fun>
 8011610:	9b03      	ldr	r3, [sp, #12]
 8011612:	f000 000f 	and.w	r0, r0, #15
 8011616:	4098      	lsls	r0, r3
 8011618:	ea4b 0b00 	orr.w	fp, fp, r0
 801161c:	3304      	adds	r3, #4
 801161e:	e7a1      	b.n	8011564 <__gethex+0x174>
 8011620:	45a8      	cmp	r8, r5
 8011622:	d8e8      	bhi.n	80115f6 <__gethex+0x206>
 8011624:	2201      	movs	r2, #1
 8011626:	4628      	mov	r0, r5
 8011628:	9303      	str	r3, [sp, #12]
 801162a:	f7ff fe1a 	bl	8011262 <strncmp>
 801162e:	4926      	ldr	r1, [pc, #152]	; (80116c8 <__gethex+0x2d8>)
 8011630:	9b03      	ldr	r3, [sp, #12]
 8011632:	2800      	cmp	r0, #0
 8011634:	d1df      	bne.n	80115f6 <__gethex+0x206>
 8011636:	e795      	b.n	8011564 <__gethex+0x174>
 8011638:	f04f 0b03 	mov.w	fp, #3
 801163c:	e7c5      	b.n	80115ca <__gethex+0x1da>
 801163e:	da0b      	bge.n	8011658 <__gethex+0x268>
 8011640:	eba5 0800 	sub.w	r8, r5, r0
 8011644:	4621      	mov	r1, r4
 8011646:	4642      	mov	r2, r8
 8011648:	4648      	mov	r0, r9
 801164a:	f7fd ff6d 	bl	800f528 <__lshift>
 801164e:	eba6 0608 	sub.w	r6, r6, r8
 8011652:	4604      	mov	r4, r0
 8011654:	f100 0a14 	add.w	sl, r0, #20
 8011658:	f04f 0b00 	mov.w	fp, #0
 801165c:	e7ba      	b.n	80115d4 <__gethex+0x1e4>
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	42b3      	cmp	r3, r6
 8011662:	dd73      	ble.n	801174c <__gethex+0x35c>
 8011664:	1b9e      	subs	r6, r3, r6
 8011666:	42b5      	cmp	r5, r6
 8011668:	dc34      	bgt.n	80116d4 <__gethex+0x2e4>
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	2b02      	cmp	r3, #2
 801166e:	d023      	beq.n	80116b8 <__gethex+0x2c8>
 8011670:	2b03      	cmp	r3, #3
 8011672:	d025      	beq.n	80116c0 <__gethex+0x2d0>
 8011674:	2b01      	cmp	r3, #1
 8011676:	d115      	bne.n	80116a4 <__gethex+0x2b4>
 8011678:	42b5      	cmp	r5, r6
 801167a:	d113      	bne.n	80116a4 <__gethex+0x2b4>
 801167c:	2d01      	cmp	r5, #1
 801167e:	d10b      	bne.n	8011698 <__gethex+0x2a8>
 8011680:	9a02      	ldr	r2, [sp, #8]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	6013      	str	r3, [r2, #0]
 8011686:	2301      	movs	r3, #1
 8011688:	6123      	str	r3, [r4, #16]
 801168a:	f8ca 3000 	str.w	r3, [sl]
 801168e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011690:	f04f 0862 	mov.w	r8, #98	; 0x62
 8011694:	601c      	str	r4, [r3, #0]
 8011696:	e735      	b.n	8011504 <__gethex+0x114>
 8011698:	1e69      	subs	r1, r5, #1
 801169a:	4620      	mov	r0, r4
 801169c:	f7fe f976 	bl	800f98c <__any_on>
 80116a0:	2800      	cmp	r0, #0
 80116a2:	d1ed      	bne.n	8011680 <__gethex+0x290>
 80116a4:	4621      	mov	r1, r4
 80116a6:	4648      	mov	r0, r9
 80116a8:	f7fd fd24 	bl	800f0f4 <_Bfree>
 80116ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80116ae:	2300      	movs	r3, #0
 80116b0:	6013      	str	r3, [r2, #0]
 80116b2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80116b6:	e725      	b.n	8011504 <__gethex+0x114>
 80116b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d1f2      	bne.n	80116a4 <__gethex+0x2b4>
 80116be:	e7df      	b.n	8011680 <__gethex+0x290>
 80116c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d1dc      	bne.n	8011680 <__gethex+0x290>
 80116c6:	e7ed      	b.n	80116a4 <__gethex+0x2b4>
 80116c8:	08013ba4 	.word	0x08013ba4
 80116cc:	08013a3b 	.word	0x08013a3b
 80116d0:	08013d69 	.word	0x08013d69
 80116d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80116d8:	f1bb 0f00 	cmp.w	fp, #0
 80116dc:	d133      	bne.n	8011746 <__gethex+0x356>
 80116de:	f1b8 0f00 	cmp.w	r8, #0
 80116e2:	d004      	beq.n	80116ee <__gethex+0x2fe>
 80116e4:	4641      	mov	r1, r8
 80116e6:	4620      	mov	r0, r4
 80116e8:	f7fe f950 	bl	800f98c <__any_on>
 80116ec:	4683      	mov	fp, r0
 80116ee:	ea4f 1268 	mov.w	r2, r8, asr #5
 80116f2:	2301      	movs	r3, #1
 80116f4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80116f8:	f008 081f 	and.w	r8, r8, #31
 80116fc:	fa03 f308 	lsl.w	r3, r3, r8
 8011700:	4213      	tst	r3, r2
 8011702:	4631      	mov	r1, r6
 8011704:	4620      	mov	r0, r4
 8011706:	bf18      	it	ne
 8011708:	f04b 0b02 	orrne.w	fp, fp, #2
 801170c:	1bad      	subs	r5, r5, r6
 801170e:	f7ff fe07 	bl	8011320 <rshift>
 8011712:	687e      	ldr	r6, [r7, #4]
 8011714:	f04f 0802 	mov.w	r8, #2
 8011718:	f1bb 0f00 	cmp.w	fp, #0
 801171c:	d04a      	beq.n	80117b4 <__gethex+0x3c4>
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	2b02      	cmp	r3, #2
 8011722:	d016      	beq.n	8011752 <__gethex+0x362>
 8011724:	2b03      	cmp	r3, #3
 8011726:	d018      	beq.n	801175a <__gethex+0x36a>
 8011728:	2b01      	cmp	r3, #1
 801172a:	d109      	bne.n	8011740 <__gethex+0x350>
 801172c:	f01b 0f02 	tst.w	fp, #2
 8011730:	d006      	beq.n	8011740 <__gethex+0x350>
 8011732:	f8da 3000 	ldr.w	r3, [sl]
 8011736:	ea4b 0b03 	orr.w	fp, fp, r3
 801173a:	f01b 0f01 	tst.w	fp, #1
 801173e:	d10f      	bne.n	8011760 <__gethex+0x370>
 8011740:	f048 0810 	orr.w	r8, r8, #16
 8011744:	e036      	b.n	80117b4 <__gethex+0x3c4>
 8011746:	f04f 0b01 	mov.w	fp, #1
 801174a:	e7d0      	b.n	80116ee <__gethex+0x2fe>
 801174c:	f04f 0801 	mov.w	r8, #1
 8011750:	e7e2      	b.n	8011718 <__gethex+0x328>
 8011752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011754:	f1c3 0301 	rsb	r3, r3, #1
 8011758:	930f      	str	r3, [sp, #60]	; 0x3c
 801175a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801175c:	2b00      	cmp	r3, #0
 801175e:	d0ef      	beq.n	8011740 <__gethex+0x350>
 8011760:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011764:	f104 0214 	add.w	r2, r4, #20
 8011768:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801176c:	9301      	str	r3, [sp, #4]
 801176e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8011772:	2300      	movs	r3, #0
 8011774:	4694      	mov	ip, r2
 8011776:	f852 1b04 	ldr.w	r1, [r2], #4
 801177a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801177e:	d01e      	beq.n	80117be <__gethex+0x3ce>
 8011780:	3101      	adds	r1, #1
 8011782:	f8cc 1000 	str.w	r1, [ip]
 8011786:	f1b8 0f02 	cmp.w	r8, #2
 801178a:	f104 0214 	add.w	r2, r4, #20
 801178e:	d13d      	bne.n	801180c <__gethex+0x41c>
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	3b01      	subs	r3, #1
 8011794:	42ab      	cmp	r3, r5
 8011796:	d10b      	bne.n	80117b0 <__gethex+0x3c0>
 8011798:	1169      	asrs	r1, r5, #5
 801179a:	2301      	movs	r3, #1
 801179c:	f005 051f 	and.w	r5, r5, #31
 80117a0:	fa03 f505 	lsl.w	r5, r3, r5
 80117a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80117a8:	421d      	tst	r5, r3
 80117aa:	bf18      	it	ne
 80117ac:	f04f 0801 	movne.w	r8, #1
 80117b0:	f048 0820 	orr.w	r8, r8, #32
 80117b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80117b6:	601c      	str	r4, [r3, #0]
 80117b8:	9b02      	ldr	r3, [sp, #8]
 80117ba:	601e      	str	r6, [r3, #0]
 80117bc:	e6a2      	b.n	8011504 <__gethex+0x114>
 80117be:	4290      	cmp	r0, r2
 80117c0:	f842 3c04 	str.w	r3, [r2, #-4]
 80117c4:	d8d6      	bhi.n	8011774 <__gethex+0x384>
 80117c6:	68a2      	ldr	r2, [r4, #8]
 80117c8:	4593      	cmp	fp, r2
 80117ca:	db17      	blt.n	80117fc <__gethex+0x40c>
 80117cc:	6861      	ldr	r1, [r4, #4]
 80117ce:	4648      	mov	r0, r9
 80117d0:	3101      	adds	r1, #1
 80117d2:	f7fd fc4f 	bl	800f074 <_Balloc>
 80117d6:	4682      	mov	sl, r0
 80117d8:	b918      	cbnz	r0, 80117e2 <__gethex+0x3f2>
 80117da:	4b1b      	ldr	r3, [pc, #108]	; (8011848 <__gethex+0x458>)
 80117dc:	4602      	mov	r2, r0
 80117de:	2184      	movs	r1, #132	; 0x84
 80117e0:	e6b3      	b.n	801154a <__gethex+0x15a>
 80117e2:	6922      	ldr	r2, [r4, #16]
 80117e4:	3202      	adds	r2, #2
 80117e6:	f104 010c 	add.w	r1, r4, #12
 80117ea:	0092      	lsls	r2, r2, #2
 80117ec:	300c      	adds	r0, #12
 80117ee:	f7fc fcb2 	bl	800e156 <memcpy>
 80117f2:	4621      	mov	r1, r4
 80117f4:	4648      	mov	r0, r9
 80117f6:	f7fd fc7d 	bl	800f0f4 <_Bfree>
 80117fa:	4654      	mov	r4, sl
 80117fc:	6922      	ldr	r2, [r4, #16]
 80117fe:	1c51      	adds	r1, r2, #1
 8011800:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011804:	6121      	str	r1, [r4, #16]
 8011806:	2101      	movs	r1, #1
 8011808:	6151      	str	r1, [r2, #20]
 801180a:	e7bc      	b.n	8011786 <__gethex+0x396>
 801180c:	6921      	ldr	r1, [r4, #16]
 801180e:	4559      	cmp	r1, fp
 8011810:	dd0b      	ble.n	801182a <__gethex+0x43a>
 8011812:	2101      	movs	r1, #1
 8011814:	4620      	mov	r0, r4
 8011816:	f7ff fd83 	bl	8011320 <rshift>
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	3601      	adds	r6, #1
 801181e:	42b3      	cmp	r3, r6
 8011820:	f6ff aedb 	blt.w	80115da <__gethex+0x1ea>
 8011824:	f04f 0801 	mov.w	r8, #1
 8011828:	e7c2      	b.n	80117b0 <__gethex+0x3c0>
 801182a:	f015 051f 	ands.w	r5, r5, #31
 801182e:	d0f9      	beq.n	8011824 <__gethex+0x434>
 8011830:	9b01      	ldr	r3, [sp, #4]
 8011832:	441a      	add	r2, r3
 8011834:	f1c5 0520 	rsb	r5, r5, #32
 8011838:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801183c:	f7fd fd0c 	bl	800f258 <__hi0bits>
 8011840:	42a8      	cmp	r0, r5
 8011842:	dbe6      	blt.n	8011812 <__gethex+0x422>
 8011844:	e7ee      	b.n	8011824 <__gethex+0x434>
 8011846:	bf00      	nop
 8011848:	08013a3b 	.word	0x08013a3b

0801184c <L_shift>:
 801184c:	f1c2 0208 	rsb	r2, r2, #8
 8011850:	0092      	lsls	r2, r2, #2
 8011852:	b570      	push	{r4, r5, r6, lr}
 8011854:	f1c2 0620 	rsb	r6, r2, #32
 8011858:	6843      	ldr	r3, [r0, #4]
 801185a:	6804      	ldr	r4, [r0, #0]
 801185c:	fa03 f506 	lsl.w	r5, r3, r6
 8011860:	432c      	orrs	r4, r5
 8011862:	40d3      	lsrs	r3, r2
 8011864:	6004      	str	r4, [r0, #0]
 8011866:	f840 3f04 	str.w	r3, [r0, #4]!
 801186a:	4288      	cmp	r0, r1
 801186c:	d3f4      	bcc.n	8011858 <L_shift+0xc>
 801186e:	bd70      	pop	{r4, r5, r6, pc}

08011870 <__match>:
 8011870:	b530      	push	{r4, r5, lr}
 8011872:	6803      	ldr	r3, [r0, #0]
 8011874:	3301      	adds	r3, #1
 8011876:	f811 4b01 	ldrb.w	r4, [r1], #1
 801187a:	b914      	cbnz	r4, 8011882 <__match+0x12>
 801187c:	6003      	str	r3, [r0, #0]
 801187e:	2001      	movs	r0, #1
 8011880:	bd30      	pop	{r4, r5, pc}
 8011882:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011886:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801188a:	2d19      	cmp	r5, #25
 801188c:	bf98      	it	ls
 801188e:	3220      	addls	r2, #32
 8011890:	42a2      	cmp	r2, r4
 8011892:	d0f0      	beq.n	8011876 <__match+0x6>
 8011894:	2000      	movs	r0, #0
 8011896:	e7f3      	b.n	8011880 <__match+0x10>

08011898 <__hexnan>:
 8011898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801189c:	680b      	ldr	r3, [r1, #0]
 801189e:	6801      	ldr	r1, [r0, #0]
 80118a0:	115e      	asrs	r6, r3, #5
 80118a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80118a6:	f013 031f 	ands.w	r3, r3, #31
 80118aa:	b087      	sub	sp, #28
 80118ac:	bf18      	it	ne
 80118ae:	3604      	addne	r6, #4
 80118b0:	2500      	movs	r5, #0
 80118b2:	1f37      	subs	r7, r6, #4
 80118b4:	4682      	mov	sl, r0
 80118b6:	4690      	mov	r8, r2
 80118b8:	9301      	str	r3, [sp, #4]
 80118ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80118be:	46b9      	mov	r9, r7
 80118c0:	463c      	mov	r4, r7
 80118c2:	9502      	str	r5, [sp, #8]
 80118c4:	46ab      	mov	fp, r5
 80118c6:	784a      	ldrb	r2, [r1, #1]
 80118c8:	1c4b      	adds	r3, r1, #1
 80118ca:	9303      	str	r3, [sp, #12]
 80118cc:	b342      	cbz	r2, 8011920 <__hexnan+0x88>
 80118ce:	4610      	mov	r0, r2
 80118d0:	9105      	str	r1, [sp, #20]
 80118d2:	9204      	str	r2, [sp, #16]
 80118d4:	f7ff fd76 	bl	80113c4 <__hexdig_fun>
 80118d8:	2800      	cmp	r0, #0
 80118da:	d14f      	bne.n	801197c <__hexnan+0xe4>
 80118dc:	9a04      	ldr	r2, [sp, #16]
 80118de:	9905      	ldr	r1, [sp, #20]
 80118e0:	2a20      	cmp	r2, #32
 80118e2:	d818      	bhi.n	8011916 <__hexnan+0x7e>
 80118e4:	9b02      	ldr	r3, [sp, #8]
 80118e6:	459b      	cmp	fp, r3
 80118e8:	dd13      	ble.n	8011912 <__hexnan+0x7a>
 80118ea:	454c      	cmp	r4, r9
 80118ec:	d206      	bcs.n	80118fc <__hexnan+0x64>
 80118ee:	2d07      	cmp	r5, #7
 80118f0:	dc04      	bgt.n	80118fc <__hexnan+0x64>
 80118f2:	462a      	mov	r2, r5
 80118f4:	4649      	mov	r1, r9
 80118f6:	4620      	mov	r0, r4
 80118f8:	f7ff ffa8 	bl	801184c <L_shift>
 80118fc:	4544      	cmp	r4, r8
 80118fe:	d950      	bls.n	80119a2 <__hexnan+0x10a>
 8011900:	2300      	movs	r3, #0
 8011902:	f1a4 0904 	sub.w	r9, r4, #4
 8011906:	f844 3c04 	str.w	r3, [r4, #-4]
 801190a:	f8cd b008 	str.w	fp, [sp, #8]
 801190e:	464c      	mov	r4, r9
 8011910:	461d      	mov	r5, r3
 8011912:	9903      	ldr	r1, [sp, #12]
 8011914:	e7d7      	b.n	80118c6 <__hexnan+0x2e>
 8011916:	2a29      	cmp	r2, #41	; 0x29
 8011918:	d155      	bne.n	80119c6 <__hexnan+0x12e>
 801191a:	3102      	adds	r1, #2
 801191c:	f8ca 1000 	str.w	r1, [sl]
 8011920:	f1bb 0f00 	cmp.w	fp, #0
 8011924:	d04f      	beq.n	80119c6 <__hexnan+0x12e>
 8011926:	454c      	cmp	r4, r9
 8011928:	d206      	bcs.n	8011938 <__hexnan+0xa0>
 801192a:	2d07      	cmp	r5, #7
 801192c:	dc04      	bgt.n	8011938 <__hexnan+0xa0>
 801192e:	462a      	mov	r2, r5
 8011930:	4649      	mov	r1, r9
 8011932:	4620      	mov	r0, r4
 8011934:	f7ff ff8a 	bl	801184c <L_shift>
 8011938:	4544      	cmp	r4, r8
 801193a:	d934      	bls.n	80119a6 <__hexnan+0x10e>
 801193c:	f1a8 0204 	sub.w	r2, r8, #4
 8011940:	4623      	mov	r3, r4
 8011942:	f853 1b04 	ldr.w	r1, [r3], #4
 8011946:	f842 1f04 	str.w	r1, [r2, #4]!
 801194a:	429f      	cmp	r7, r3
 801194c:	d2f9      	bcs.n	8011942 <__hexnan+0xaa>
 801194e:	1b3b      	subs	r3, r7, r4
 8011950:	f023 0303 	bic.w	r3, r3, #3
 8011954:	3304      	adds	r3, #4
 8011956:	3e03      	subs	r6, #3
 8011958:	3401      	adds	r4, #1
 801195a:	42a6      	cmp	r6, r4
 801195c:	bf38      	it	cc
 801195e:	2304      	movcc	r3, #4
 8011960:	4443      	add	r3, r8
 8011962:	2200      	movs	r2, #0
 8011964:	f843 2b04 	str.w	r2, [r3], #4
 8011968:	429f      	cmp	r7, r3
 801196a:	d2fb      	bcs.n	8011964 <__hexnan+0xcc>
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	b91b      	cbnz	r3, 8011978 <__hexnan+0xe0>
 8011970:	4547      	cmp	r7, r8
 8011972:	d126      	bne.n	80119c2 <__hexnan+0x12a>
 8011974:	2301      	movs	r3, #1
 8011976:	603b      	str	r3, [r7, #0]
 8011978:	2005      	movs	r0, #5
 801197a:	e025      	b.n	80119c8 <__hexnan+0x130>
 801197c:	3501      	adds	r5, #1
 801197e:	2d08      	cmp	r5, #8
 8011980:	f10b 0b01 	add.w	fp, fp, #1
 8011984:	dd06      	ble.n	8011994 <__hexnan+0xfc>
 8011986:	4544      	cmp	r4, r8
 8011988:	d9c3      	bls.n	8011912 <__hexnan+0x7a>
 801198a:	2300      	movs	r3, #0
 801198c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011990:	2501      	movs	r5, #1
 8011992:	3c04      	subs	r4, #4
 8011994:	6822      	ldr	r2, [r4, #0]
 8011996:	f000 000f 	and.w	r0, r0, #15
 801199a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801199e:	6020      	str	r0, [r4, #0]
 80119a0:	e7b7      	b.n	8011912 <__hexnan+0x7a>
 80119a2:	2508      	movs	r5, #8
 80119a4:	e7b5      	b.n	8011912 <__hexnan+0x7a>
 80119a6:	9b01      	ldr	r3, [sp, #4]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d0df      	beq.n	801196c <__hexnan+0xd4>
 80119ac:	f1c3 0320 	rsb	r3, r3, #32
 80119b0:	f04f 32ff 	mov.w	r2, #4294967295
 80119b4:	40da      	lsrs	r2, r3
 80119b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80119ba:	4013      	ands	r3, r2
 80119bc:	f846 3c04 	str.w	r3, [r6, #-4]
 80119c0:	e7d4      	b.n	801196c <__hexnan+0xd4>
 80119c2:	3f04      	subs	r7, #4
 80119c4:	e7d2      	b.n	801196c <__hexnan+0xd4>
 80119c6:	2004      	movs	r0, #4
 80119c8:	b007      	add	sp, #28
 80119ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080119ce <__ascii_mbtowc>:
 80119ce:	b082      	sub	sp, #8
 80119d0:	b901      	cbnz	r1, 80119d4 <__ascii_mbtowc+0x6>
 80119d2:	a901      	add	r1, sp, #4
 80119d4:	b142      	cbz	r2, 80119e8 <__ascii_mbtowc+0x1a>
 80119d6:	b14b      	cbz	r3, 80119ec <__ascii_mbtowc+0x1e>
 80119d8:	7813      	ldrb	r3, [r2, #0]
 80119da:	600b      	str	r3, [r1, #0]
 80119dc:	7812      	ldrb	r2, [r2, #0]
 80119de:	1e10      	subs	r0, r2, #0
 80119e0:	bf18      	it	ne
 80119e2:	2001      	movne	r0, #1
 80119e4:	b002      	add	sp, #8
 80119e6:	4770      	bx	lr
 80119e8:	4610      	mov	r0, r2
 80119ea:	e7fb      	b.n	80119e4 <__ascii_mbtowc+0x16>
 80119ec:	f06f 0001 	mvn.w	r0, #1
 80119f0:	e7f8      	b.n	80119e4 <__ascii_mbtowc+0x16>

080119f2 <_realloc_r>:
 80119f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119f6:	4680      	mov	r8, r0
 80119f8:	4614      	mov	r4, r2
 80119fa:	460e      	mov	r6, r1
 80119fc:	b921      	cbnz	r1, 8011a08 <_realloc_r+0x16>
 80119fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a02:	4611      	mov	r1, r2
 8011a04:	f7fd baaa 	b.w	800ef5c <_malloc_r>
 8011a08:	b92a      	cbnz	r2, 8011a16 <_realloc_r+0x24>
 8011a0a:	f7fd fa33 	bl	800ee74 <_free_r>
 8011a0e:	4625      	mov	r5, r4
 8011a10:	4628      	mov	r0, r5
 8011a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a16:	f000 f8b6 	bl	8011b86 <_malloc_usable_size_r>
 8011a1a:	4284      	cmp	r4, r0
 8011a1c:	4607      	mov	r7, r0
 8011a1e:	d802      	bhi.n	8011a26 <_realloc_r+0x34>
 8011a20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011a24:	d812      	bhi.n	8011a4c <_realloc_r+0x5a>
 8011a26:	4621      	mov	r1, r4
 8011a28:	4640      	mov	r0, r8
 8011a2a:	f7fd fa97 	bl	800ef5c <_malloc_r>
 8011a2e:	4605      	mov	r5, r0
 8011a30:	2800      	cmp	r0, #0
 8011a32:	d0ed      	beq.n	8011a10 <_realloc_r+0x1e>
 8011a34:	42bc      	cmp	r4, r7
 8011a36:	4622      	mov	r2, r4
 8011a38:	4631      	mov	r1, r6
 8011a3a:	bf28      	it	cs
 8011a3c:	463a      	movcs	r2, r7
 8011a3e:	f7fc fb8a 	bl	800e156 <memcpy>
 8011a42:	4631      	mov	r1, r6
 8011a44:	4640      	mov	r0, r8
 8011a46:	f7fd fa15 	bl	800ee74 <_free_r>
 8011a4a:	e7e1      	b.n	8011a10 <_realloc_r+0x1e>
 8011a4c:	4635      	mov	r5, r6
 8011a4e:	e7df      	b.n	8011a10 <_realloc_r+0x1e>

08011a50 <_strtoul_l.constprop.0>:
 8011a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a54:	4f36      	ldr	r7, [pc, #216]	; (8011b30 <_strtoul_l.constprop.0+0xe0>)
 8011a56:	4686      	mov	lr, r0
 8011a58:	460d      	mov	r5, r1
 8011a5a:	4628      	mov	r0, r5
 8011a5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011a60:	5d3e      	ldrb	r6, [r7, r4]
 8011a62:	f016 0608 	ands.w	r6, r6, #8
 8011a66:	d1f8      	bne.n	8011a5a <_strtoul_l.constprop.0+0xa>
 8011a68:	2c2d      	cmp	r4, #45	; 0x2d
 8011a6a:	d130      	bne.n	8011ace <_strtoul_l.constprop.0+0x7e>
 8011a6c:	782c      	ldrb	r4, [r5, #0]
 8011a6e:	2601      	movs	r6, #1
 8011a70:	1c85      	adds	r5, r0, #2
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d057      	beq.n	8011b26 <_strtoul_l.constprop.0+0xd6>
 8011a76:	2b10      	cmp	r3, #16
 8011a78:	d109      	bne.n	8011a8e <_strtoul_l.constprop.0+0x3e>
 8011a7a:	2c30      	cmp	r4, #48	; 0x30
 8011a7c:	d107      	bne.n	8011a8e <_strtoul_l.constprop.0+0x3e>
 8011a7e:	7828      	ldrb	r0, [r5, #0]
 8011a80:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011a84:	2858      	cmp	r0, #88	; 0x58
 8011a86:	d149      	bne.n	8011b1c <_strtoul_l.constprop.0+0xcc>
 8011a88:	786c      	ldrb	r4, [r5, #1]
 8011a8a:	2310      	movs	r3, #16
 8011a8c:	3502      	adds	r5, #2
 8011a8e:	f04f 38ff 	mov.w	r8, #4294967295
 8011a92:	2700      	movs	r7, #0
 8011a94:	fbb8 f8f3 	udiv	r8, r8, r3
 8011a98:	fb03 f908 	mul.w	r9, r3, r8
 8011a9c:	ea6f 0909 	mvn.w	r9, r9
 8011aa0:	4638      	mov	r0, r7
 8011aa2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011aa6:	f1bc 0f09 	cmp.w	ip, #9
 8011aaa:	d815      	bhi.n	8011ad8 <_strtoul_l.constprop.0+0x88>
 8011aac:	4664      	mov	r4, ip
 8011aae:	42a3      	cmp	r3, r4
 8011ab0:	dd23      	ble.n	8011afa <_strtoul_l.constprop.0+0xaa>
 8011ab2:	f1b7 3fff 	cmp.w	r7, #4294967295
 8011ab6:	d007      	beq.n	8011ac8 <_strtoul_l.constprop.0+0x78>
 8011ab8:	4580      	cmp	r8, r0
 8011aba:	d31b      	bcc.n	8011af4 <_strtoul_l.constprop.0+0xa4>
 8011abc:	d101      	bne.n	8011ac2 <_strtoul_l.constprop.0+0x72>
 8011abe:	45a1      	cmp	r9, r4
 8011ac0:	db18      	blt.n	8011af4 <_strtoul_l.constprop.0+0xa4>
 8011ac2:	fb00 4003 	mla	r0, r0, r3, r4
 8011ac6:	2701      	movs	r7, #1
 8011ac8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011acc:	e7e9      	b.n	8011aa2 <_strtoul_l.constprop.0+0x52>
 8011ace:	2c2b      	cmp	r4, #43	; 0x2b
 8011ad0:	bf04      	itt	eq
 8011ad2:	782c      	ldrbeq	r4, [r5, #0]
 8011ad4:	1c85      	addeq	r5, r0, #2
 8011ad6:	e7cc      	b.n	8011a72 <_strtoul_l.constprop.0+0x22>
 8011ad8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011adc:	f1bc 0f19 	cmp.w	ip, #25
 8011ae0:	d801      	bhi.n	8011ae6 <_strtoul_l.constprop.0+0x96>
 8011ae2:	3c37      	subs	r4, #55	; 0x37
 8011ae4:	e7e3      	b.n	8011aae <_strtoul_l.constprop.0+0x5e>
 8011ae6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011aea:	f1bc 0f19 	cmp.w	ip, #25
 8011aee:	d804      	bhi.n	8011afa <_strtoul_l.constprop.0+0xaa>
 8011af0:	3c57      	subs	r4, #87	; 0x57
 8011af2:	e7dc      	b.n	8011aae <_strtoul_l.constprop.0+0x5e>
 8011af4:	f04f 37ff 	mov.w	r7, #4294967295
 8011af8:	e7e6      	b.n	8011ac8 <_strtoul_l.constprop.0+0x78>
 8011afa:	1c7b      	adds	r3, r7, #1
 8011afc:	d106      	bne.n	8011b0c <_strtoul_l.constprop.0+0xbc>
 8011afe:	2322      	movs	r3, #34	; 0x22
 8011b00:	f8ce 3000 	str.w	r3, [lr]
 8011b04:	4638      	mov	r0, r7
 8011b06:	b932      	cbnz	r2, 8011b16 <_strtoul_l.constprop.0+0xc6>
 8011b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b0c:	b106      	cbz	r6, 8011b10 <_strtoul_l.constprop.0+0xc0>
 8011b0e:	4240      	negs	r0, r0
 8011b10:	2a00      	cmp	r2, #0
 8011b12:	d0f9      	beq.n	8011b08 <_strtoul_l.constprop.0+0xb8>
 8011b14:	b107      	cbz	r7, 8011b18 <_strtoul_l.constprop.0+0xc8>
 8011b16:	1e69      	subs	r1, r5, #1
 8011b18:	6011      	str	r1, [r2, #0]
 8011b1a:	e7f5      	b.n	8011b08 <_strtoul_l.constprop.0+0xb8>
 8011b1c:	2430      	movs	r4, #48	; 0x30
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d1b5      	bne.n	8011a8e <_strtoul_l.constprop.0+0x3e>
 8011b22:	2308      	movs	r3, #8
 8011b24:	e7b3      	b.n	8011a8e <_strtoul_l.constprop.0+0x3e>
 8011b26:	2c30      	cmp	r4, #48	; 0x30
 8011b28:	d0a9      	beq.n	8011a7e <_strtoul_l.constprop.0+0x2e>
 8011b2a:	230a      	movs	r3, #10
 8011b2c:	e7af      	b.n	8011a8e <_strtoul_l.constprop.0+0x3e>
 8011b2e:	bf00      	nop
 8011b30:	08013bf9 	.word	0x08013bf9

08011b34 <_strtoul_r>:
 8011b34:	f7ff bf8c 	b.w	8011a50 <_strtoul_l.constprop.0>

08011b38 <__ascii_wctomb>:
 8011b38:	b149      	cbz	r1, 8011b4e <__ascii_wctomb+0x16>
 8011b3a:	2aff      	cmp	r2, #255	; 0xff
 8011b3c:	bf85      	ittet	hi
 8011b3e:	238a      	movhi	r3, #138	; 0x8a
 8011b40:	6003      	strhi	r3, [r0, #0]
 8011b42:	700a      	strbls	r2, [r1, #0]
 8011b44:	f04f 30ff 	movhi.w	r0, #4294967295
 8011b48:	bf98      	it	ls
 8011b4a:	2001      	movls	r0, #1
 8011b4c:	4770      	bx	lr
 8011b4e:	4608      	mov	r0, r1
 8011b50:	4770      	bx	lr
	...

08011b54 <fiprintf>:
 8011b54:	b40e      	push	{r1, r2, r3}
 8011b56:	b503      	push	{r0, r1, lr}
 8011b58:	4601      	mov	r1, r0
 8011b5a:	ab03      	add	r3, sp, #12
 8011b5c:	4805      	ldr	r0, [pc, #20]	; (8011b74 <fiprintf+0x20>)
 8011b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b62:	6800      	ldr	r0, [r0, #0]
 8011b64:	9301      	str	r3, [sp, #4]
 8011b66:	f000 f83f 	bl	8011be8 <_vfiprintf_r>
 8011b6a:	b002      	add	sp, #8
 8011b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b70:	b003      	add	sp, #12
 8011b72:	4770      	bx	lr
 8011b74:	20000130 	.word	0x20000130

08011b78 <abort>:
 8011b78:	b508      	push	{r3, lr}
 8011b7a:	2006      	movs	r0, #6
 8011b7c:	f000 fa0c 	bl	8011f98 <raise>
 8011b80:	2001      	movs	r0, #1
 8011b82:	f7f1 fd11 	bl	80035a8 <_exit>

08011b86 <_malloc_usable_size_r>:
 8011b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b8a:	1f18      	subs	r0, r3, #4
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	bfbc      	itt	lt
 8011b90:	580b      	ldrlt	r3, [r1, r0]
 8011b92:	18c0      	addlt	r0, r0, r3
 8011b94:	4770      	bx	lr

08011b96 <__sfputc_r>:
 8011b96:	6893      	ldr	r3, [r2, #8]
 8011b98:	3b01      	subs	r3, #1
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	b410      	push	{r4}
 8011b9e:	6093      	str	r3, [r2, #8]
 8011ba0:	da08      	bge.n	8011bb4 <__sfputc_r+0x1e>
 8011ba2:	6994      	ldr	r4, [r2, #24]
 8011ba4:	42a3      	cmp	r3, r4
 8011ba6:	db01      	blt.n	8011bac <__sfputc_r+0x16>
 8011ba8:	290a      	cmp	r1, #10
 8011baa:	d103      	bne.n	8011bb4 <__sfputc_r+0x1e>
 8011bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bb0:	f000 b934 	b.w	8011e1c <__swbuf_r>
 8011bb4:	6813      	ldr	r3, [r2, #0]
 8011bb6:	1c58      	adds	r0, r3, #1
 8011bb8:	6010      	str	r0, [r2, #0]
 8011bba:	7019      	strb	r1, [r3, #0]
 8011bbc:	4608      	mov	r0, r1
 8011bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bc2:	4770      	bx	lr

08011bc4 <__sfputs_r>:
 8011bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bc6:	4606      	mov	r6, r0
 8011bc8:	460f      	mov	r7, r1
 8011bca:	4614      	mov	r4, r2
 8011bcc:	18d5      	adds	r5, r2, r3
 8011bce:	42ac      	cmp	r4, r5
 8011bd0:	d101      	bne.n	8011bd6 <__sfputs_r+0x12>
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	e007      	b.n	8011be6 <__sfputs_r+0x22>
 8011bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bda:	463a      	mov	r2, r7
 8011bdc:	4630      	mov	r0, r6
 8011bde:	f7ff ffda 	bl	8011b96 <__sfputc_r>
 8011be2:	1c43      	adds	r3, r0, #1
 8011be4:	d1f3      	bne.n	8011bce <__sfputs_r+0xa>
 8011be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011be8 <_vfiprintf_r>:
 8011be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bec:	460d      	mov	r5, r1
 8011bee:	b09d      	sub	sp, #116	; 0x74
 8011bf0:	4614      	mov	r4, r2
 8011bf2:	4698      	mov	r8, r3
 8011bf4:	4606      	mov	r6, r0
 8011bf6:	b118      	cbz	r0, 8011c00 <_vfiprintf_r+0x18>
 8011bf8:	6a03      	ldr	r3, [r0, #32]
 8011bfa:	b90b      	cbnz	r3, 8011c00 <_vfiprintf_r+0x18>
 8011bfc:	f7fc f8f0 	bl	800dde0 <__sinit>
 8011c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c02:	07d9      	lsls	r1, r3, #31
 8011c04:	d405      	bmi.n	8011c12 <_vfiprintf_r+0x2a>
 8011c06:	89ab      	ldrh	r3, [r5, #12]
 8011c08:	059a      	lsls	r2, r3, #22
 8011c0a:	d402      	bmi.n	8011c12 <_vfiprintf_r+0x2a>
 8011c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c0e:	f7fc fa98 	bl	800e142 <__retarget_lock_acquire_recursive>
 8011c12:	89ab      	ldrh	r3, [r5, #12]
 8011c14:	071b      	lsls	r3, r3, #28
 8011c16:	d501      	bpl.n	8011c1c <_vfiprintf_r+0x34>
 8011c18:	692b      	ldr	r3, [r5, #16]
 8011c1a:	b99b      	cbnz	r3, 8011c44 <_vfiprintf_r+0x5c>
 8011c1c:	4629      	mov	r1, r5
 8011c1e:	4630      	mov	r0, r6
 8011c20:	f000 f93a 	bl	8011e98 <__swsetup_r>
 8011c24:	b170      	cbz	r0, 8011c44 <_vfiprintf_r+0x5c>
 8011c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c28:	07dc      	lsls	r4, r3, #31
 8011c2a:	d504      	bpl.n	8011c36 <_vfiprintf_r+0x4e>
 8011c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c30:	b01d      	add	sp, #116	; 0x74
 8011c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c36:	89ab      	ldrh	r3, [r5, #12]
 8011c38:	0598      	lsls	r0, r3, #22
 8011c3a:	d4f7      	bmi.n	8011c2c <_vfiprintf_r+0x44>
 8011c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c3e:	f7fc fa81 	bl	800e144 <__retarget_lock_release_recursive>
 8011c42:	e7f3      	b.n	8011c2c <_vfiprintf_r+0x44>
 8011c44:	2300      	movs	r3, #0
 8011c46:	9309      	str	r3, [sp, #36]	; 0x24
 8011c48:	2320      	movs	r3, #32
 8011c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c52:	2330      	movs	r3, #48	; 0x30
 8011c54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011e08 <_vfiprintf_r+0x220>
 8011c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c5c:	f04f 0901 	mov.w	r9, #1
 8011c60:	4623      	mov	r3, r4
 8011c62:	469a      	mov	sl, r3
 8011c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c68:	b10a      	cbz	r2, 8011c6e <_vfiprintf_r+0x86>
 8011c6a:	2a25      	cmp	r2, #37	; 0x25
 8011c6c:	d1f9      	bne.n	8011c62 <_vfiprintf_r+0x7a>
 8011c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8011c72:	d00b      	beq.n	8011c8c <_vfiprintf_r+0xa4>
 8011c74:	465b      	mov	r3, fp
 8011c76:	4622      	mov	r2, r4
 8011c78:	4629      	mov	r1, r5
 8011c7a:	4630      	mov	r0, r6
 8011c7c:	f7ff ffa2 	bl	8011bc4 <__sfputs_r>
 8011c80:	3001      	adds	r0, #1
 8011c82:	f000 80a9 	beq.w	8011dd8 <_vfiprintf_r+0x1f0>
 8011c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c88:	445a      	add	r2, fp
 8011c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8011c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	f000 80a1 	beq.w	8011dd8 <_vfiprintf_r+0x1f0>
 8011c96:	2300      	movs	r3, #0
 8011c98:	f04f 32ff 	mov.w	r2, #4294967295
 8011c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ca0:	f10a 0a01 	add.w	sl, sl, #1
 8011ca4:	9304      	str	r3, [sp, #16]
 8011ca6:	9307      	str	r3, [sp, #28]
 8011ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011cac:	931a      	str	r3, [sp, #104]	; 0x68
 8011cae:	4654      	mov	r4, sl
 8011cb0:	2205      	movs	r2, #5
 8011cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cb6:	4854      	ldr	r0, [pc, #336]	; (8011e08 <_vfiprintf_r+0x220>)
 8011cb8:	f7ee fa8a 	bl	80001d0 <memchr>
 8011cbc:	9a04      	ldr	r2, [sp, #16]
 8011cbe:	b9d8      	cbnz	r0, 8011cf8 <_vfiprintf_r+0x110>
 8011cc0:	06d1      	lsls	r1, r2, #27
 8011cc2:	bf44      	itt	mi
 8011cc4:	2320      	movmi	r3, #32
 8011cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cca:	0713      	lsls	r3, r2, #28
 8011ccc:	bf44      	itt	mi
 8011cce:	232b      	movmi	r3, #43	; 0x2b
 8011cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8011cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8011cda:	d015      	beq.n	8011d08 <_vfiprintf_r+0x120>
 8011cdc:	9a07      	ldr	r2, [sp, #28]
 8011cde:	4654      	mov	r4, sl
 8011ce0:	2000      	movs	r0, #0
 8011ce2:	f04f 0c0a 	mov.w	ip, #10
 8011ce6:	4621      	mov	r1, r4
 8011ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cec:	3b30      	subs	r3, #48	; 0x30
 8011cee:	2b09      	cmp	r3, #9
 8011cf0:	d94d      	bls.n	8011d8e <_vfiprintf_r+0x1a6>
 8011cf2:	b1b0      	cbz	r0, 8011d22 <_vfiprintf_r+0x13a>
 8011cf4:	9207      	str	r2, [sp, #28]
 8011cf6:	e014      	b.n	8011d22 <_vfiprintf_r+0x13a>
 8011cf8:	eba0 0308 	sub.w	r3, r0, r8
 8011cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8011d00:	4313      	orrs	r3, r2
 8011d02:	9304      	str	r3, [sp, #16]
 8011d04:	46a2      	mov	sl, r4
 8011d06:	e7d2      	b.n	8011cae <_vfiprintf_r+0xc6>
 8011d08:	9b03      	ldr	r3, [sp, #12]
 8011d0a:	1d19      	adds	r1, r3, #4
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	9103      	str	r1, [sp, #12]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	bfbb      	ittet	lt
 8011d14:	425b      	neglt	r3, r3
 8011d16:	f042 0202 	orrlt.w	r2, r2, #2
 8011d1a:	9307      	strge	r3, [sp, #28]
 8011d1c:	9307      	strlt	r3, [sp, #28]
 8011d1e:	bfb8      	it	lt
 8011d20:	9204      	strlt	r2, [sp, #16]
 8011d22:	7823      	ldrb	r3, [r4, #0]
 8011d24:	2b2e      	cmp	r3, #46	; 0x2e
 8011d26:	d10c      	bne.n	8011d42 <_vfiprintf_r+0x15a>
 8011d28:	7863      	ldrb	r3, [r4, #1]
 8011d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8011d2c:	d134      	bne.n	8011d98 <_vfiprintf_r+0x1b0>
 8011d2e:	9b03      	ldr	r3, [sp, #12]
 8011d30:	1d1a      	adds	r2, r3, #4
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	9203      	str	r2, [sp, #12]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	bfb8      	it	lt
 8011d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d3e:	3402      	adds	r4, #2
 8011d40:	9305      	str	r3, [sp, #20]
 8011d42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011e18 <_vfiprintf_r+0x230>
 8011d46:	7821      	ldrb	r1, [r4, #0]
 8011d48:	2203      	movs	r2, #3
 8011d4a:	4650      	mov	r0, sl
 8011d4c:	f7ee fa40 	bl	80001d0 <memchr>
 8011d50:	b138      	cbz	r0, 8011d62 <_vfiprintf_r+0x17a>
 8011d52:	9b04      	ldr	r3, [sp, #16]
 8011d54:	eba0 000a 	sub.w	r0, r0, sl
 8011d58:	2240      	movs	r2, #64	; 0x40
 8011d5a:	4082      	lsls	r2, r0
 8011d5c:	4313      	orrs	r3, r2
 8011d5e:	3401      	adds	r4, #1
 8011d60:	9304      	str	r3, [sp, #16]
 8011d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d66:	4829      	ldr	r0, [pc, #164]	; (8011e0c <_vfiprintf_r+0x224>)
 8011d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d6c:	2206      	movs	r2, #6
 8011d6e:	f7ee fa2f 	bl	80001d0 <memchr>
 8011d72:	2800      	cmp	r0, #0
 8011d74:	d03f      	beq.n	8011df6 <_vfiprintf_r+0x20e>
 8011d76:	4b26      	ldr	r3, [pc, #152]	; (8011e10 <_vfiprintf_r+0x228>)
 8011d78:	bb1b      	cbnz	r3, 8011dc2 <_vfiprintf_r+0x1da>
 8011d7a:	9b03      	ldr	r3, [sp, #12]
 8011d7c:	3307      	adds	r3, #7
 8011d7e:	f023 0307 	bic.w	r3, r3, #7
 8011d82:	3308      	adds	r3, #8
 8011d84:	9303      	str	r3, [sp, #12]
 8011d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d88:	443b      	add	r3, r7
 8011d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8011d8c:	e768      	b.n	8011c60 <_vfiprintf_r+0x78>
 8011d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d92:	460c      	mov	r4, r1
 8011d94:	2001      	movs	r0, #1
 8011d96:	e7a6      	b.n	8011ce6 <_vfiprintf_r+0xfe>
 8011d98:	2300      	movs	r3, #0
 8011d9a:	3401      	adds	r4, #1
 8011d9c:	9305      	str	r3, [sp, #20]
 8011d9e:	4619      	mov	r1, r3
 8011da0:	f04f 0c0a 	mov.w	ip, #10
 8011da4:	4620      	mov	r0, r4
 8011da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011daa:	3a30      	subs	r2, #48	; 0x30
 8011dac:	2a09      	cmp	r2, #9
 8011dae:	d903      	bls.n	8011db8 <_vfiprintf_r+0x1d0>
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d0c6      	beq.n	8011d42 <_vfiprintf_r+0x15a>
 8011db4:	9105      	str	r1, [sp, #20]
 8011db6:	e7c4      	b.n	8011d42 <_vfiprintf_r+0x15a>
 8011db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	e7f0      	b.n	8011da4 <_vfiprintf_r+0x1bc>
 8011dc2:	ab03      	add	r3, sp, #12
 8011dc4:	9300      	str	r3, [sp, #0]
 8011dc6:	462a      	mov	r2, r5
 8011dc8:	4b12      	ldr	r3, [pc, #72]	; (8011e14 <_vfiprintf_r+0x22c>)
 8011dca:	a904      	add	r1, sp, #16
 8011dcc:	4630      	mov	r0, r6
 8011dce:	f7fb f9a5 	bl	800d11c <_printf_float>
 8011dd2:	4607      	mov	r7, r0
 8011dd4:	1c78      	adds	r0, r7, #1
 8011dd6:	d1d6      	bne.n	8011d86 <_vfiprintf_r+0x19e>
 8011dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011dda:	07d9      	lsls	r1, r3, #31
 8011ddc:	d405      	bmi.n	8011dea <_vfiprintf_r+0x202>
 8011dde:	89ab      	ldrh	r3, [r5, #12]
 8011de0:	059a      	lsls	r2, r3, #22
 8011de2:	d402      	bmi.n	8011dea <_vfiprintf_r+0x202>
 8011de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011de6:	f7fc f9ad 	bl	800e144 <__retarget_lock_release_recursive>
 8011dea:	89ab      	ldrh	r3, [r5, #12]
 8011dec:	065b      	lsls	r3, r3, #25
 8011dee:	f53f af1d 	bmi.w	8011c2c <_vfiprintf_r+0x44>
 8011df2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011df4:	e71c      	b.n	8011c30 <_vfiprintf_r+0x48>
 8011df6:	ab03      	add	r3, sp, #12
 8011df8:	9300      	str	r3, [sp, #0]
 8011dfa:	462a      	mov	r2, r5
 8011dfc:	4b05      	ldr	r3, [pc, #20]	; (8011e14 <_vfiprintf_r+0x22c>)
 8011dfe:	a904      	add	r1, sp, #16
 8011e00:	4630      	mov	r0, r6
 8011e02:	f7fb fc2f 	bl	800d664 <_printf_i>
 8011e06:	e7e4      	b.n	8011dd2 <_vfiprintf_r+0x1ea>
 8011e08:	08013cf9 	.word	0x08013cf9
 8011e0c:	08013d03 	.word	0x08013d03
 8011e10:	0800d11d 	.word	0x0800d11d
 8011e14:	08011bc5 	.word	0x08011bc5
 8011e18:	08013cff 	.word	0x08013cff

08011e1c <__swbuf_r>:
 8011e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e1e:	460e      	mov	r6, r1
 8011e20:	4614      	mov	r4, r2
 8011e22:	4605      	mov	r5, r0
 8011e24:	b118      	cbz	r0, 8011e2e <__swbuf_r+0x12>
 8011e26:	6a03      	ldr	r3, [r0, #32]
 8011e28:	b90b      	cbnz	r3, 8011e2e <__swbuf_r+0x12>
 8011e2a:	f7fb ffd9 	bl	800dde0 <__sinit>
 8011e2e:	69a3      	ldr	r3, [r4, #24]
 8011e30:	60a3      	str	r3, [r4, #8]
 8011e32:	89a3      	ldrh	r3, [r4, #12]
 8011e34:	071a      	lsls	r2, r3, #28
 8011e36:	d525      	bpl.n	8011e84 <__swbuf_r+0x68>
 8011e38:	6923      	ldr	r3, [r4, #16]
 8011e3a:	b31b      	cbz	r3, 8011e84 <__swbuf_r+0x68>
 8011e3c:	6823      	ldr	r3, [r4, #0]
 8011e3e:	6922      	ldr	r2, [r4, #16]
 8011e40:	1a98      	subs	r0, r3, r2
 8011e42:	6963      	ldr	r3, [r4, #20]
 8011e44:	b2f6      	uxtb	r6, r6
 8011e46:	4283      	cmp	r3, r0
 8011e48:	4637      	mov	r7, r6
 8011e4a:	dc04      	bgt.n	8011e56 <__swbuf_r+0x3a>
 8011e4c:	4621      	mov	r1, r4
 8011e4e:	4628      	mov	r0, r5
 8011e50:	f7ff f952 	bl	80110f8 <_fflush_r>
 8011e54:	b9e0      	cbnz	r0, 8011e90 <__swbuf_r+0x74>
 8011e56:	68a3      	ldr	r3, [r4, #8]
 8011e58:	3b01      	subs	r3, #1
 8011e5a:	60a3      	str	r3, [r4, #8]
 8011e5c:	6823      	ldr	r3, [r4, #0]
 8011e5e:	1c5a      	adds	r2, r3, #1
 8011e60:	6022      	str	r2, [r4, #0]
 8011e62:	701e      	strb	r6, [r3, #0]
 8011e64:	6962      	ldr	r2, [r4, #20]
 8011e66:	1c43      	adds	r3, r0, #1
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d004      	beq.n	8011e76 <__swbuf_r+0x5a>
 8011e6c:	89a3      	ldrh	r3, [r4, #12]
 8011e6e:	07db      	lsls	r3, r3, #31
 8011e70:	d506      	bpl.n	8011e80 <__swbuf_r+0x64>
 8011e72:	2e0a      	cmp	r6, #10
 8011e74:	d104      	bne.n	8011e80 <__swbuf_r+0x64>
 8011e76:	4621      	mov	r1, r4
 8011e78:	4628      	mov	r0, r5
 8011e7a:	f7ff f93d 	bl	80110f8 <_fflush_r>
 8011e7e:	b938      	cbnz	r0, 8011e90 <__swbuf_r+0x74>
 8011e80:	4638      	mov	r0, r7
 8011e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e84:	4621      	mov	r1, r4
 8011e86:	4628      	mov	r0, r5
 8011e88:	f000 f806 	bl	8011e98 <__swsetup_r>
 8011e8c:	2800      	cmp	r0, #0
 8011e8e:	d0d5      	beq.n	8011e3c <__swbuf_r+0x20>
 8011e90:	f04f 37ff 	mov.w	r7, #4294967295
 8011e94:	e7f4      	b.n	8011e80 <__swbuf_r+0x64>
	...

08011e98 <__swsetup_r>:
 8011e98:	b538      	push	{r3, r4, r5, lr}
 8011e9a:	4b2a      	ldr	r3, [pc, #168]	; (8011f44 <__swsetup_r+0xac>)
 8011e9c:	4605      	mov	r5, r0
 8011e9e:	6818      	ldr	r0, [r3, #0]
 8011ea0:	460c      	mov	r4, r1
 8011ea2:	b118      	cbz	r0, 8011eac <__swsetup_r+0x14>
 8011ea4:	6a03      	ldr	r3, [r0, #32]
 8011ea6:	b90b      	cbnz	r3, 8011eac <__swsetup_r+0x14>
 8011ea8:	f7fb ff9a 	bl	800dde0 <__sinit>
 8011eac:	89a3      	ldrh	r3, [r4, #12]
 8011eae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011eb2:	0718      	lsls	r0, r3, #28
 8011eb4:	d422      	bmi.n	8011efc <__swsetup_r+0x64>
 8011eb6:	06d9      	lsls	r1, r3, #27
 8011eb8:	d407      	bmi.n	8011eca <__swsetup_r+0x32>
 8011eba:	2309      	movs	r3, #9
 8011ebc:	602b      	str	r3, [r5, #0]
 8011ebe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011ec2:	81a3      	strh	r3, [r4, #12]
 8011ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ec8:	e034      	b.n	8011f34 <__swsetup_r+0x9c>
 8011eca:	0758      	lsls	r0, r3, #29
 8011ecc:	d512      	bpl.n	8011ef4 <__swsetup_r+0x5c>
 8011ece:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ed0:	b141      	cbz	r1, 8011ee4 <__swsetup_r+0x4c>
 8011ed2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ed6:	4299      	cmp	r1, r3
 8011ed8:	d002      	beq.n	8011ee0 <__swsetup_r+0x48>
 8011eda:	4628      	mov	r0, r5
 8011edc:	f7fc ffca 	bl	800ee74 <_free_r>
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	6363      	str	r3, [r4, #52]	; 0x34
 8011ee4:	89a3      	ldrh	r3, [r4, #12]
 8011ee6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011eea:	81a3      	strh	r3, [r4, #12]
 8011eec:	2300      	movs	r3, #0
 8011eee:	6063      	str	r3, [r4, #4]
 8011ef0:	6923      	ldr	r3, [r4, #16]
 8011ef2:	6023      	str	r3, [r4, #0]
 8011ef4:	89a3      	ldrh	r3, [r4, #12]
 8011ef6:	f043 0308 	orr.w	r3, r3, #8
 8011efa:	81a3      	strh	r3, [r4, #12]
 8011efc:	6923      	ldr	r3, [r4, #16]
 8011efe:	b94b      	cbnz	r3, 8011f14 <__swsetup_r+0x7c>
 8011f00:	89a3      	ldrh	r3, [r4, #12]
 8011f02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f0a:	d003      	beq.n	8011f14 <__swsetup_r+0x7c>
 8011f0c:	4621      	mov	r1, r4
 8011f0e:	4628      	mov	r0, r5
 8011f10:	f000 f884 	bl	801201c <__smakebuf_r>
 8011f14:	89a0      	ldrh	r0, [r4, #12]
 8011f16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011f1a:	f010 0301 	ands.w	r3, r0, #1
 8011f1e:	d00a      	beq.n	8011f36 <__swsetup_r+0x9e>
 8011f20:	2300      	movs	r3, #0
 8011f22:	60a3      	str	r3, [r4, #8]
 8011f24:	6963      	ldr	r3, [r4, #20]
 8011f26:	425b      	negs	r3, r3
 8011f28:	61a3      	str	r3, [r4, #24]
 8011f2a:	6923      	ldr	r3, [r4, #16]
 8011f2c:	b943      	cbnz	r3, 8011f40 <__swsetup_r+0xa8>
 8011f2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011f32:	d1c4      	bne.n	8011ebe <__swsetup_r+0x26>
 8011f34:	bd38      	pop	{r3, r4, r5, pc}
 8011f36:	0781      	lsls	r1, r0, #30
 8011f38:	bf58      	it	pl
 8011f3a:	6963      	ldrpl	r3, [r4, #20]
 8011f3c:	60a3      	str	r3, [r4, #8]
 8011f3e:	e7f4      	b.n	8011f2a <__swsetup_r+0x92>
 8011f40:	2000      	movs	r0, #0
 8011f42:	e7f7      	b.n	8011f34 <__swsetup_r+0x9c>
 8011f44:	20000130 	.word	0x20000130

08011f48 <_raise_r>:
 8011f48:	291f      	cmp	r1, #31
 8011f4a:	b538      	push	{r3, r4, r5, lr}
 8011f4c:	4604      	mov	r4, r0
 8011f4e:	460d      	mov	r5, r1
 8011f50:	d904      	bls.n	8011f5c <_raise_r+0x14>
 8011f52:	2316      	movs	r3, #22
 8011f54:	6003      	str	r3, [r0, #0]
 8011f56:	f04f 30ff 	mov.w	r0, #4294967295
 8011f5a:	bd38      	pop	{r3, r4, r5, pc}
 8011f5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011f5e:	b112      	cbz	r2, 8011f66 <_raise_r+0x1e>
 8011f60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f64:	b94b      	cbnz	r3, 8011f7a <_raise_r+0x32>
 8011f66:	4620      	mov	r0, r4
 8011f68:	f000 f830 	bl	8011fcc <_getpid_r>
 8011f6c:	462a      	mov	r2, r5
 8011f6e:	4601      	mov	r1, r0
 8011f70:	4620      	mov	r0, r4
 8011f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f76:	f000 b817 	b.w	8011fa8 <_kill_r>
 8011f7a:	2b01      	cmp	r3, #1
 8011f7c:	d00a      	beq.n	8011f94 <_raise_r+0x4c>
 8011f7e:	1c59      	adds	r1, r3, #1
 8011f80:	d103      	bne.n	8011f8a <_raise_r+0x42>
 8011f82:	2316      	movs	r3, #22
 8011f84:	6003      	str	r3, [r0, #0]
 8011f86:	2001      	movs	r0, #1
 8011f88:	e7e7      	b.n	8011f5a <_raise_r+0x12>
 8011f8a:	2400      	movs	r4, #0
 8011f8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f90:	4628      	mov	r0, r5
 8011f92:	4798      	blx	r3
 8011f94:	2000      	movs	r0, #0
 8011f96:	e7e0      	b.n	8011f5a <_raise_r+0x12>

08011f98 <raise>:
 8011f98:	4b02      	ldr	r3, [pc, #8]	; (8011fa4 <raise+0xc>)
 8011f9a:	4601      	mov	r1, r0
 8011f9c:	6818      	ldr	r0, [r3, #0]
 8011f9e:	f7ff bfd3 	b.w	8011f48 <_raise_r>
 8011fa2:	bf00      	nop
 8011fa4:	20000130 	.word	0x20000130

08011fa8 <_kill_r>:
 8011fa8:	b538      	push	{r3, r4, r5, lr}
 8011faa:	4d07      	ldr	r5, [pc, #28]	; (8011fc8 <_kill_r+0x20>)
 8011fac:	2300      	movs	r3, #0
 8011fae:	4604      	mov	r4, r0
 8011fb0:	4608      	mov	r0, r1
 8011fb2:	4611      	mov	r1, r2
 8011fb4:	602b      	str	r3, [r5, #0]
 8011fb6:	f7f1 fae7 	bl	8003588 <_kill>
 8011fba:	1c43      	adds	r3, r0, #1
 8011fbc:	d102      	bne.n	8011fc4 <_kill_r+0x1c>
 8011fbe:	682b      	ldr	r3, [r5, #0]
 8011fc0:	b103      	cbz	r3, 8011fc4 <_kill_r+0x1c>
 8011fc2:	6023      	str	r3, [r4, #0]
 8011fc4:	bd38      	pop	{r3, r4, r5, pc}
 8011fc6:	bf00      	nop
 8011fc8:	20008c0c 	.word	0x20008c0c

08011fcc <_getpid_r>:
 8011fcc:	f7f1 bad4 	b.w	8003578 <_getpid>

08011fd0 <__swhatbuf_r>:
 8011fd0:	b570      	push	{r4, r5, r6, lr}
 8011fd2:	460c      	mov	r4, r1
 8011fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fd8:	2900      	cmp	r1, #0
 8011fda:	b096      	sub	sp, #88	; 0x58
 8011fdc:	4615      	mov	r5, r2
 8011fde:	461e      	mov	r6, r3
 8011fe0:	da0d      	bge.n	8011ffe <__swhatbuf_r+0x2e>
 8011fe2:	89a3      	ldrh	r3, [r4, #12]
 8011fe4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011fe8:	f04f 0100 	mov.w	r1, #0
 8011fec:	bf0c      	ite	eq
 8011fee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011ff2:	2340      	movne	r3, #64	; 0x40
 8011ff4:	2000      	movs	r0, #0
 8011ff6:	6031      	str	r1, [r6, #0]
 8011ff8:	602b      	str	r3, [r5, #0]
 8011ffa:	b016      	add	sp, #88	; 0x58
 8011ffc:	bd70      	pop	{r4, r5, r6, pc}
 8011ffe:	466a      	mov	r2, sp
 8012000:	f000 f848 	bl	8012094 <_fstat_r>
 8012004:	2800      	cmp	r0, #0
 8012006:	dbec      	blt.n	8011fe2 <__swhatbuf_r+0x12>
 8012008:	9901      	ldr	r1, [sp, #4]
 801200a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801200e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012012:	4259      	negs	r1, r3
 8012014:	4159      	adcs	r1, r3
 8012016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801201a:	e7eb      	b.n	8011ff4 <__swhatbuf_r+0x24>

0801201c <__smakebuf_r>:
 801201c:	898b      	ldrh	r3, [r1, #12]
 801201e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012020:	079d      	lsls	r5, r3, #30
 8012022:	4606      	mov	r6, r0
 8012024:	460c      	mov	r4, r1
 8012026:	d507      	bpl.n	8012038 <__smakebuf_r+0x1c>
 8012028:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801202c:	6023      	str	r3, [r4, #0]
 801202e:	6123      	str	r3, [r4, #16]
 8012030:	2301      	movs	r3, #1
 8012032:	6163      	str	r3, [r4, #20]
 8012034:	b002      	add	sp, #8
 8012036:	bd70      	pop	{r4, r5, r6, pc}
 8012038:	ab01      	add	r3, sp, #4
 801203a:	466a      	mov	r2, sp
 801203c:	f7ff ffc8 	bl	8011fd0 <__swhatbuf_r>
 8012040:	9900      	ldr	r1, [sp, #0]
 8012042:	4605      	mov	r5, r0
 8012044:	4630      	mov	r0, r6
 8012046:	f7fc ff89 	bl	800ef5c <_malloc_r>
 801204a:	b948      	cbnz	r0, 8012060 <__smakebuf_r+0x44>
 801204c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012050:	059a      	lsls	r2, r3, #22
 8012052:	d4ef      	bmi.n	8012034 <__smakebuf_r+0x18>
 8012054:	f023 0303 	bic.w	r3, r3, #3
 8012058:	f043 0302 	orr.w	r3, r3, #2
 801205c:	81a3      	strh	r3, [r4, #12]
 801205e:	e7e3      	b.n	8012028 <__smakebuf_r+0xc>
 8012060:	89a3      	ldrh	r3, [r4, #12]
 8012062:	6020      	str	r0, [r4, #0]
 8012064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012068:	81a3      	strh	r3, [r4, #12]
 801206a:	9b00      	ldr	r3, [sp, #0]
 801206c:	6163      	str	r3, [r4, #20]
 801206e:	9b01      	ldr	r3, [sp, #4]
 8012070:	6120      	str	r0, [r4, #16]
 8012072:	b15b      	cbz	r3, 801208c <__smakebuf_r+0x70>
 8012074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012078:	4630      	mov	r0, r6
 801207a:	f000 f81d 	bl	80120b8 <_isatty_r>
 801207e:	b128      	cbz	r0, 801208c <__smakebuf_r+0x70>
 8012080:	89a3      	ldrh	r3, [r4, #12]
 8012082:	f023 0303 	bic.w	r3, r3, #3
 8012086:	f043 0301 	orr.w	r3, r3, #1
 801208a:	81a3      	strh	r3, [r4, #12]
 801208c:	89a3      	ldrh	r3, [r4, #12]
 801208e:	431d      	orrs	r5, r3
 8012090:	81a5      	strh	r5, [r4, #12]
 8012092:	e7cf      	b.n	8012034 <__smakebuf_r+0x18>

08012094 <_fstat_r>:
 8012094:	b538      	push	{r3, r4, r5, lr}
 8012096:	4d07      	ldr	r5, [pc, #28]	; (80120b4 <_fstat_r+0x20>)
 8012098:	2300      	movs	r3, #0
 801209a:	4604      	mov	r4, r0
 801209c:	4608      	mov	r0, r1
 801209e:	4611      	mov	r1, r2
 80120a0:	602b      	str	r3, [r5, #0]
 80120a2:	f7f1 fad0 	bl	8003646 <_fstat>
 80120a6:	1c43      	adds	r3, r0, #1
 80120a8:	d102      	bne.n	80120b0 <_fstat_r+0x1c>
 80120aa:	682b      	ldr	r3, [r5, #0]
 80120ac:	b103      	cbz	r3, 80120b0 <_fstat_r+0x1c>
 80120ae:	6023      	str	r3, [r4, #0]
 80120b0:	bd38      	pop	{r3, r4, r5, pc}
 80120b2:	bf00      	nop
 80120b4:	20008c0c 	.word	0x20008c0c

080120b8 <_isatty_r>:
 80120b8:	b538      	push	{r3, r4, r5, lr}
 80120ba:	4d06      	ldr	r5, [pc, #24]	; (80120d4 <_isatty_r+0x1c>)
 80120bc:	2300      	movs	r3, #0
 80120be:	4604      	mov	r4, r0
 80120c0:	4608      	mov	r0, r1
 80120c2:	602b      	str	r3, [r5, #0]
 80120c4:	f7f1 facf 	bl	8003666 <_isatty>
 80120c8:	1c43      	adds	r3, r0, #1
 80120ca:	d102      	bne.n	80120d2 <_isatty_r+0x1a>
 80120cc:	682b      	ldr	r3, [r5, #0]
 80120ce:	b103      	cbz	r3, 80120d2 <_isatty_r+0x1a>
 80120d0:	6023      	str	r3, [r4, #0]
 80120d2:	bd38      	pop	{r3, r4, r5, pc}
 80120d4:	20008c0c 	.word	0x20008c0c

080120d8 <atan2>:
 80120d8:	f000 bb6e 	b.w	80127b8 <__ieee754_atan2>
 80120dc:	0000      	movs	r0, r0
	...

080120e0 <log>:
 80120e0:	b538      	push	{r3, r4, r5, lr}
 80120e2:	ed2d 8b02 	vpush	{d8}
 80120e6:	ec55 4b10 	vmov	r4, r5, d0
 80120ea:	f000 fc2d 	bl	8012948 <__ieee754_log>
 80120ee:	4622      	mov	r2, r4
 80120f0:	462b      	mov	r3, r5
 80120f2:	4620      	mov	r0, r4
 80120f4:	4629      	mov	r1, r5
 80120f6:	eeb0 8a40 	vmov.f32	s16, s0
 80120fa:	eef0 8a60 	vmov.f32	s17, s1
 80120fe:	f7ee fd15 	bl	8000b2c <__aeabi_dcmpun>
 8012102:	b998      	cbnz	r0, 801212c <log+0x4c>
 8012104:	2200      	movs	r2, #0
 8012106:	2300      	movs	r3, #0
 8012108:	4620      	mov	r0, r4
 801210a:	4629      	mov	r1, r5
 801210c:	f7ee fd04 	bl	8000b18 <__aeabi_dcmpgt>
 8012110:	b960      	cbnz	r0, 801212c <log+0x4c>
 8012112:	2200      	movs	r2, #0
 8012114:	2300      	movs	r3, #0
 8012116:	4620      	mov	r0, r4
 8012118:	4629      	mov	r1, r5
 801211a:	f7ee fcd5 	bl	8000ac8 <__aeabi_dcmpeq>
 801211e:	b160      	cbz	r0, 801213a <log+0x5a>
 8012120:	f7fb ffe4 	bl	800e0ec <__errno>
 8012124:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8012150 <log+0x70>
 8012128:	2322      	movs	r3, #34	; 0x22
 801212a:	6003      	str	r3, [r0, #0]
 801212c:	eeb0 0a48 	vmov.f32	s0, s16
 8012130:	eef0 0a68 	vmov.f32	s1, s17
 8012134:	ecbd 8b02 	vpop	{d8}
 8012138:	bd38      	pop	{r3, r4, r5, pc}
 801213a:	f7fb ffd7 	bl	800e0ec <__errno>
 801213e:	ecbd 8b02 	vpop	{d8}
 8012142:	2321      	movs	r3, #33	; 0x21
 8012144:	6003      	str	r3, [r0, #0]
 8012146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801214a:	4803      	ldr	r0, [pc, #12]	; (8012158 <log+0x78>)
 801214c:	f7ff b8ac 	b.w	80112a8 <nan>
 8012150:	00000000 	.word	0x00000000
 8012154:	fff00000 	.word	0xfff00000
 8012158:	08013d68 	.word	0x08013d68

0801215c <pow>:
 801215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801215e:	ed2d 8b02 	vpush	{d8}
 8012162:	eeb0 8a40 	vmov.f32	s16, s0
 8012166:	eef0 8a60 	vmov.f32	s17, s1
 801216a:	ec55 4b11 	vmov	r4, r5, d1
 801216e:	f000 fda7 	bl	8012cc0 <__ieee754_pow>
 8012172:	4622      	mov	r2, r4
 8012174:	462b      	mov	r3, r5
 8012176:	4620      	mov	r0, r4
 8012178:	4629      	mov	r1, r5
 801217a:	ec57 6b10 	vmov	r6, r7, d0
 801217e:	f7ee fcd5 	bl	8000b2c <__aeabi_dcmpun>
 8012182:	2800      	cmp	r0, #0
 8012184:	d13b      	bne.n	80121fe <pow+0xa2>
 8012186:	ec51 0b18 	vmov	r0, r1, d8
 801218a:	2200      	movs	r2, #0
 801218c:	2300      	movs	r3, #0
 801218e:	f7ee fc9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8012192:	b1b8      	cbz	r0, 80121c4 <pow+0x68>
 8012194:	2200      	movs	r2, #0
 8012196:	2300      	movs	r3, #0
 8012198:	4620      	mov	r0, r4
 801219a:	4629      	mov	r1, r5
 801219c:	f7ee fc94 	bl	8000ac8 <__aeabi_dcmpeq>
 80121a0:	2800      	cmp	r0, #0
 80121a2:	d146      	bne.n	8012232 <pow+0xd6>
 80121a4:	ec45 4b10 	vmov	d0, r4, r5
 80121a8:	f000 fa1f 	bl	80125ea <finite>
 80121ac:	b338      	cbz	r0, 80121fe <pow+0xa2>
 80121ae:	2200      	movs	r2, #0
 80121b0:	2300      	movs	r3, #0
 80121b2:	4620      	mov	r0, r4
 80121b4:	4629      	mov	r1, r5
 80121b6:	f7ee fc91 	bl	8000adc <__aeabi_dcmplt>
 80121ba:	b300      	cbz	r0, 80121fe <pow+0xa2>
 80121bc:	f7fb ff96 	bl	800e0ec <__errno>
 80121c0:	2322      	movs	r3, #34	; 0x22
 80121c2:	e01b      	b.n	80121fc <pow+0xa0>
 80121c4:	ec47 6b10 	vmov	d0, r6, r7
 80121c8:	f000 fa0f 	bl	80125ea <finite>
 80121cc:	b9e0      	cbnz	r0, 8012208 <pow+0xac>
 80121ce:	eeb0 0a48 	vmov.f32	s0, s16
 80121d2:	eef0 0a68 	vmov.f32	s1, s17
 80121d6:	f000 fa08 	bl	80125ea <finite>
 80121da:	b1a8      	cbz	r0, 8012208 <pow+0xac>
 80121dc:	ec45 4b10 	vmov	d0, r4, r5
 80121e0:	f000 fa03 	bl	80125ea <finite>
 80121e4:	b180      	cbz	r0, 8012208 <pow+0xac>
 80121e6:	4632      	mov	r2, r6
 80121e8:	463b      	mov	r3, r7
 80121ea:	4630      	mov	r0, r6
 80121ec:	4639      	mov	r1, r7
 80121ee:	f7ee fc9d 	bl	8000b2c <__aeabi_dcmpun>
 80121f2:	2800      	cmp	r0, #0
 80121f4:	d0e2      	beq.n	80121bc <pow+0x60>
 80121f6:	f7fb ff79 	bl	800e0ec <__errno>
 80121fa:	2321      	movs	r3, #33	; 0x21
 80121fc:	6003      	str	r3, [r0, #0]
 80121fe:	ecbd 8b02 	vpop	{d8}
 8012202:	ec47 6b10 	vmov	d0, r6, r7
 8012206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012208:	2200      	movs	r2, #0
 801220a:	2300      	movs	r3, #0
 801220c:	4630      	mov	r0, r6
 801220e:	4639      	mov	r1, r7
 8012210:	f7ee fc5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8012214:	2800      	cmp	r0, #0
 8012216:	d0f2      	beq.n	80121fe <pow+0xa2>
 8012218:	eeb0 0a48 	vmov.f32	s0, s16
 801221c:	eef0 0a68 	vmov.f32	s1, s17
 8012220:	f000 f9e3 	bl	80125ea <finite>
 8012224:	2800      	cmp	r0, #0
 8012226:	d0ea      	beq.n	80121fe <pow+0xa2>
 8012228:	ec45 4b10 	vmov	d0, r4, r5
 801222c:	f000 f9dd 	bl	80125ea <finite>
 8012230:	e7c3      	b.n	80121ba <pow+0x5e>
 8012232:	4f01      	ldr	r7, [pc, #4]	; (8012238 <pow+0xdc>)
 8012234:	2600      	movs	r6, #0
 8012236:	e7e2      	b.n	80121fe <pow+0xa2>
 8012238:	3ff00000 	.word	0x3ff00000

0801223c <sqrt>:
 801223c:	b538      	push	{r3, r4, r5, lr}
 801223e:	ed2d 8b02 	vpush	{d8}
 8012242:	ec55 4b10 	vmov	r4, r5, d0
 8012246:	f000 f9db 	bl	8012600 <__ieee754_sqrt>
 801224a:	4622      	mov	r2, r4
 801224c:	462b      	mov	r3, r5
 801224e:	4620      	mov	r0, r4
 8012250:	4629      	mov	r1, r5
 8012252:	eeb0 8a40 	vmov.f32	s16, s0
 8012256:	eef0 8a60 	vmov.f32	s17, s1
 801225a:	f7ee fc67 	bl	8000b2c <__aeabi_dcmpun>
 801225e:	b990      	cbnz	r0, 8012286 <sqrt+0x4a>
 8012260:	2200      	movs	r2, #0
 8012262:	2300      	movs	r3, #0
 8012264:	4620      	mov	r0, r4
 8012266:	4629      	mov	r1, r5
 8012268:	f7ee fc38 	bl	8000adc <__aeabi_dcmplt>
 801226c:	b158      	cbz	r0, 8012286 <sqrt+0x4a>
 801226e:	f7fb ff3d 	bl	800e0ec <__errno>
 8012272:	2321      	movs	r3, #33	; 0x21
 8012274:	6003      	str	r3, [r0, #0]
 8012276:	2200      	movs	r2, #0
 8012278:	2300      	movs	r3, #0
 801227a:	4610      	mov	r0, r2
 801227c:	4619      	mov	r1, r3
 801227e:	f7ee fae5 	bl	800084c <__aeabi_ddiv>
 8012282:	ec41 0b18 	vmov	d8, r0, r1
 8012286:	eeb0 0a48 	vmov.f32	s0, s16
 801228a:	eef0 0a68 	vmov.f32	s1, s17
 801228e:	ecbd 8b02 	vpop	{d8}
 8012292:	bd38      	pop	{r3, r4, r5, pc}
 8012294:	0000      	movs	r0, r0
	...

08012298 <atan>:
 8012298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801229c:	ec55 4b10 	vmov	r4, r5, d0
 80122a0:	4bc3      	ldr	r3, [pc, #780]	; (80125b0 <atan+0x318>)
 80122a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80122a6:	429e      	cmp	r6, r3
 80122a8:	46ab      	mov	fp, r5
 80122aa:	dd18      	ble.n	80122de <atan+0x46>
 80122ac:	4bc1      	ldr	r3, [pc, #772]	; (80125b4 <atan+0x31c>)
 80122ae:	429e      	cmp	r6, r3
 80122b0:	dc01      	bgt.n	80122b6 <atan+0x1e>
 80122b2:	d109      	bne.n	80122c8 <atan+0x30>
 80122b4:	b144      	cbz	r4, 80122c8 <atan+0x30>
 80122b6:	4622      	mov	r2, r4
 80122b8:	462b      	mov	r3, r5
 80122ba:	4620      	mov	r0, r4
 80122bc:	4629      	mov	r1, r5
 80122be:	f7ed ffe5 	bl	800028c <__adddf3>
 80122c2:	4604      	mov	r4, r0
 80122c4:	460d      	mov	r5, r1
 80122c6:	e006      	b.n	80122d6 <atan+0x3e>
 80122c8:	f1bb 0f00 	cmp.w	fp, #0
 80122cc:	f300 8131 	bgt.w	8012532 <atan+0x29a>
 80122d0:	a59b      	add	r5, pc, #620	; (adr r5, 8012540 <atan+0x2a8>)
 80122d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80122d6:	ec45 4b10 	vmov	d0, r4, r5
 80122da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122de:	4bb6      	ldr	r3, [pc, #728]	; (80125b8 <atan+0x320>)
 80122e0:	429e      	cmp	r6, r3
 80122e2:	dc14      	bgt.n	801230e <atan+0x76>
 80122e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80122e8:	429e      	cmp	r6, r3
 80122ea:	dc0d      	bgt.n	8012308 <atan+0x70>
 80122ec:	a396      	add	r3, pc, #600	; (adr r3, 8012548 <atan+0x2b0>)
 80122ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f2:	ee10 0a10 	vmov	r0, s0
 80122f6:	4629      	mov	r1, r5
 80122f8:	f7ed ffc8 	bl	800028c <__adddf3>
 80122fc:	4baf      	ldr	r3, [pc, #700]	; (80125bc <atan+0x324>)
 80122fe:	2200      	movs	r2, #0
 8012300:	f7ee fc0a 	bl	8000b18 <__aeabi_dcmpgt>
 8012304:	2800      	cmp	r0, #0
 8012306:	d1e6      	bne.n	80122d6 <atan+0x3e>
 8012308:	f04f 3aff 	mov.w	sl, #4294967295
 801230c:	e02b      	b.n	8012366 <atan+0xce>
 801230e:	f000 f963 	bl	80125d8 <fabs>
 8012312:	4bab      	ldr	r3, [pc, #684]	; (80125c0 <atan+0x328>)
 8012314:	429e      	cmp	r6, r3
 8012316:	ec55 4b10 	vmov	r4, r5, d0
 801231a:	f300 80bf 	bgt.w	801249c <atan+0x204>
 801231e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012322:	429e      	cmp	r6, r3
 8012324:	f300 80a0 	bgt.w	8012468 <atan+0x1d0>
 8012328:	ee10 2a10 	vmov	r2, s0
 801232c:	ee10 0a10 	vmov	r0, s0
 8012330:	462b      	mov	r3, r5
 8012332:	4629      	mov	r1, r5
 8012334:	f7ed ffaa 	bl	800028c <__adddf3>
 8012338:	4ba0      	ldr	r3, [pc, #640]	; (80125bc <atan+0x324>)
 801233a:	2200      	movs	r2, #0
 801233c:	f7ed ffa4 	bl	8000288 <__aeabi_dsub>
 8012340:	2200      	movs	r2, #0
 8012342:	4606      	mov	r6, r0
 8012344:	460f      	mov	r7, r1
 8012346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801234a:	4620      	mov	r0, r4
 801234c:	4629      	mov	r1, r5
 801234e:	f7ed ff9d 	bl	800028c <__adddf3>
 8012352:	4602      	mov	r2, r0
 8012354:	460b      	mov	r3, r1
 8012356:	4630      	mov	r0, r6
 8012358:	4639      	mov	r1, r7
 801235a:	f7ee fa77 	bl	800084c <__aeabi_ddiv>
 801235e:	f04f 0a00 	mov.w	sl, #0
 8012362:	4604      	mov	r4, r0
 8012364:	460d      	mov	r5, r1
 8012366:	4622      	mov	r2, r4
 8012368:	462b      	mov	r3, r5
 801236a:	4620      	mov	r0, r4
 801236c:	4629      	mov	r1, r5
 801236e:	f7ee f943 	bl	80005f8 <__aeabi_dmul>
 8012372:	4602      	mov	r2, r0
 8012374:	460b      	mov	r3, r1
 8012376:	4680      	mov	r8, r0
 8012378:	4689      	mov	r9, r1
 801237a:	f7ee f93d 	bl	80005f8 <__aeabi_dmul>
 801237e:	a374      	add	r3, pc, #464	; (adr r3, 8012550 <atan+0x2b8>)
 8012380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012384:	4606      	mov	r6, r0
 8012386:	460f      	mov	r7, r1
 8012388:	f7ee f936 	bl	80005f8 <__aeabi_dmul>
 801238c:	a372      	add	r3, pc, #456	; (adr r3, 8012558 <atan+0x2c0>)
 801238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012392:	f7ed ff7b 	bl	800028c <__adddf3>
 8012396:	4632      	mov	r2, r6
 8012398:	463b      	mov	r3, r7
 801239a:	f7ee f92d 	bl	80005f8 <__aeabi_dmul>
 801239e:	a370      	add	r3, pc, #448	; (adr r3, 8012560 <atan+0x2c8>)
 80123a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a4:	f7ed ff72 	bl	800028c <__adddf3>
 80123a8:	4632      	mov	r2, r6
 80123aa:	463b      	mov	r3, r7
 80123ac:	f7ee f924 	bl	80005f8 <__aeabi_dmul>
 80123b0:	a36d      	add	r3, pc, #436	; (adr r3, 8012568 <atan+0x2d0>)
 80123b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b6:	f7ed ff69 	bl	800028c <__adddf3>
 80123ba:	4632      	mov	r2, r6
 80123bc:	463b      	mov	r3, r7
 80123be:	f7ee f91b 	bl	80005f8 <__aeabi_dmul>
 80123c2:	a36b      	add	r3, pc, #428	; (adr r3, 8012570 <atan+0x2d8>)
 80123c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c8:	f7ed ff60 	bl	800028c <__adddf3>
 80123cc:	4632      	mov	r2, r6
 80123ce:	463b      	mov	r3, r7
 80123d0:	f7ee f912 	bl	80005f8 <__aeabi_dmul>
 80123d4:	a368      	add	r3, pc, #416	; (adr r3, 8012578 <atan+0x2e0>)
 80123d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123da:	f7ed ff57 	bl	800028c <__adddf3>
 80123de:	4642      	mov	r2, r8
 80123e0:	464b      	mov	r3, r9
 80123e2:	f7ee f909 	bl	80005f8 <__aeabi_dmul>
 80123e6:	a366      	add	r3, pc, #408	; (adr r3, 8012580 <atan+0x2e8>)
 80123e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ec:	4680      	mov	r8, r0
 80123ee:	4689      	mov	r9, r1
 80123f0:	4630      	mov	r0, r6
 80123f2:	4639      	mov	r1, r7
 80123f4:	f7ee f900 	bl	80005f8 <__aeabi_dmul>
 80123f8:	a363      	add	r3, pc, #396	; (adr r3, 8012588 <atan+0x2f0>)
 80123fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fe:	f7ed ff43 	bl	8000288 <__aeabi_dsub>
 8012402:	4632      	mov	r2, r6
 8012404:	463b      	mov	r3, r7
 8012406:	f7ee f8f7 	bl	80005f8 <__aeabi_dmul>
 801240a:	a361      	add	r3, pc, #388	; (adr r3, 8012590 <atan+0x2f8>)
 801240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012410:	f7ed ff3a 	bl	8000288 <__aeabi_dsub>
 8012414:	4632      	mov	r2, r6
 8012416:	463b      	mov	r3, r7
 8012418:	f7ee f8ee 	bl	80005f8 <__aeabi_dmul>
 801241c:	a35e      	add	r3, pc, #376	; (adr r3, 8012598 <atan+0x300>)
 801241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012422:	f7ed ff31 	bl	8000288 <__aeabi_dsub>
 8012426:	4632      	mov	r2, r6
 8012428:	463b      	mov	r3, r7
 801242a:	f7ee f8e5 	bl	80005f8 <__aeabi_dmul>
 801242e:	a35c      	add	r3, pc, #368	; (adr r3, 80125a0 <atan+0x308>)
 8012430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012434:	f7ed ff28 	bl	8000288 <__aeabi_dsub>
 8012438:	4632      	mov	r2, r6
 801243a:	463b      	mov	r3, r7
 801243c:	f7ee f8dc 	bl	80005f8 <__aeabi_dmul>
 8012440:	4602      	mov	r2, r0
 8012442:	460b      	mov	r3, r1
 8012444:	4640      	mov	r0, r8
 8012446:	4649      	mov	r1, r9
 8012448:	f7ed ff20 	bl	800028c <__adddf3>
 801244c:	4622      	mov	r2, r4
 801244e:	462b      	mov	r3, r5
 8012450:	f7ee f8d2 	bl	80005f8 <__aeabi_dmul>
 8012454:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012458:	4602      	mov	r2, r0
 801245a:	460b      	mov	r3, r1
 801245c:	d14b      	bne.n	80124f6 <atan+0x25e>
 801245e:	4620      	mov	r0, r4
 8012460:	4629      	mov	r1, r5
 8012462:	f7ed ff11 	bl	8000288 <__aeabi_dsub>
 8012466:	e72c      	b.n	80122c2 <atan+0x2a>
 8012468:	ee10 0a10 	vmov	r0, s0
 801246c:	4b53      	ldr	r3, [pc, #332]	; (80125bc <atan+0x324>)
 801246e:	2200      	movs	r2, #0
 8012470:	4629      	mov	r1, r5
 8012472:	f7ed ff09 	bl	8000288 <__aeabi_dsub>
 8012476:	4b51      	ldr	r3, [pc, #324]	; (80125bc <atan+0x324>)
 8012478:	4606      	mov	r6, r0
 801247a:	460f      	mov	r7, r1
 801247c:	2200      	movs	r2, #0
 801247e:	4620      	mov	r0, r4
 8012480:	4629      	mov	r1, r5
 8012482:	f7ed ff03 	bl	800028c <__adddf3>
 8012486:	4602      	mov	r2, r0
 8012488:	460b      	mov	r3, r1
 801248a:	4630      	mov	r0, r6
 801248c:	4639      	mov	r1, r7
 801248e:	f7ee f9dd 	bl	800084c <__aeabi_ddiv>
 8012492:	f04f 0a01 	mov.w	sl, #1
 8012496:	4604      	mov	r4, r0
 8012498:	460d      	mov	r5, r1
 801249a:	e764      	b.n	8012366 <atan+0xce>
 801249c:	4b49      	ldr	r3, [pc, #292]	; (80125c4 <atan+0x32c>)
 801249e:	429e      	cmp	r6, r3
 80124a0:	da1d      	bge.n	80124de <atan+0x246>
 80124a2:	ee10 0a10 	vmov	r0, s0
 80124a6:	4b48      	ldr	r3, [pc, #288]	; (80125c8 <atan+0x330>)
 80124a8:	2200      	movs	r2, #0
 80124aa:	4629      	mov	r1, r5
 80124ac:	f7ed feec 	bl	8000288 <__aeabi_dsub>
 80124b0:	4b45      	ldr	r3, [pc, #276]	; (80125c8 <atan+0x330>)
 80124b2:	4606      	mov	r6, r0
 80124b4:	460f      	mov	r7, r1
 80124b6:	2200      	movs	r2, #0
 80124b8:	4620      	mov	r0, r4
 80124ba:	4629      	mov	r1, r5
 80124bc:	f7ee f89c 	bl	80005f8 <__aeabi_dmul>
 80124c0:	4b3e      	ldr	r3, [pc, #248]	; (80125bc <atan+0x324>)
 80124c2:	2200      	movs	r2, #0
 80124c4:	f7ed fee2 	bl	800028c <__adddf3>
 80124c8:	4602      	mov	r2, r0
 80124ca:	460b      	mov	r3, r1
 80124cc:	4630      	mov	r0, r6
 80124ce:	4639      	mov	r1, r7
 80124d0:	f7ee f9bc 	bl	800084c <__aeabi_ddiv>
 80124d4:	f04f 0a02 	mov.w	sl, #2
 80124d8:	4604      	mov	r4, r0
 80124da:	460d      	mov	r5, r1
 80124dc:	e743      	b.n	8012366 <atan+0xce>
 80124de:	462b      	mov	r3, r5
 80124e0:	ee10 2a10 	vmov	r2, s0
 80124e4:	4939      	ldr	r1, [pc, #228]	; (80125cc <atan+0x334>)
 80124e6:	2000      	movs	r0, #0
 80124e8:	f7ee f9b0 	bl	800084c <__aeabi_ddiv>
 80124ec:	f04f 0a03 	mov.w	sl, #3
 80124f0:	4604      	mov	r4, r0
 80124f2:	460d      	mov	r5, r1
 80124f4:	e737      	b.n	8012366 <atan+0xce>
 80124f6:	4b36      	ldr	r3, [pc, #216]	; (80125d0 <atan+0x338>)
 80124f8:	4e36      	ldr	r6, [pc, #216]	; (80125d4 <atan+0x33c>)
 80124fa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80124fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012502:	f7ed fec1 	bl	8000288 <__aeabi_dsub>
 8012506:	4622      	mov	r2, r4
 8012508:	462b      	mov	r3, r5
 801250a:	f7ed febd 	bl	8000288 <__aeabi_dsub>
 801250e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012512:	4602      	mov	r2, r0
 8012514:	460b      	mov	r3, r1
 8012516:	e9d6 0100 	ldrd	r0, r1, [r6]
 801251a:	f7ed feb5 	bl	8000288 <__aeabi_dsub>
 801251e:	f1bb 0f00 	cmp.w	fp, #0
 8012522:	4604      	mov	r4, r0
 8012524:	460d      	mov	r5, r1
 8012526:	f6bf aed6 	bge.w	80122d6 <atan+0x3e>
 801252a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801252e:	461d      	mov	r5, r3
 8012530:	e6d1      	b.n	80122d6 <atan+0x3e>
 8012532:	a51d      	add	r5, pc, #116	; (adr r5, 80125a8 <atan+0x310>)
 8012534:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012538:	e6cd      	b.n	80122d6 <atan+0x3e>
 801253a:	bf00      	nop
 801253c:	f3af 8000 	nop.w
 8012540:	54442d18 	.word	0x54442d18
 8012544:	bff921fb 	.word	0xbff921fb
 8012548:	8800759c 	.word	0x8800759c
 801254c:	7e37e43c 	.word	0x7e37e43c
 8012550:	e322da11 	.word	0xe322da11
 8012554:	3f90ad3a 	.word	0x3f90ad3a
 8012558:	24760deb 	.word	0x24760deb
 801255c:	3fa97b4b 	.word	0x3fa97b4b
 8012560:	a0d03d51 	.word	0xa0d03d51
 8012564:	3fb10d66 	.word	0x3fb10d66
 8012568:	c54c206e 	.word	0xc54c206e
 801256c:	3fb745cd 	.word	0x3fb745cd
 8012570:	920083ff 	.word	0x920083ff
 8012574:	3fc24924 	.word	0x3fc24924
 8012578:	5555550d 	.word	0x5555550d
 801257c:	3fd55555 	.word	0x3fd55555
 8012580:	2c6a6c2f 	.word	0x2c6a6c2f
 8012584:	bfa2b444 	.word	0xbfa2b444
 8012588:	52defd9a 	.word	0x52defd9a
 801258c:	3fadde2d 	.word	0x3fadde2d
 8012590:	af749a6d 	.word	0xaf749a6d
 8012594:	3fb3b0f2 	.word	0x3fb3b0f2
 8012598:	fe231671 	.word	0xfe231671
 801259c:	3fbc71c6 	.word	0x3fbc71c6
 80125a0:	9998ebc4 	.word	0x9998ebc4
 80125a4:	3fc99999 	.word	0x3fc99999
 80125a8:	54442d18 	.word	0x54442d18
 80125ac:	3ff921fb 	.word	0x3ff921fb
 80125b0:	440fffff 	.word	0x440fffff
 80125b4:	7ff00000 	.word	0x7ff00000
 80125b8:	3fdbffff 	.word	0x3fdbffff
 80125bc:	3ff00000 	.word	0x3ff00000
 80125c0:	3ff2ffff 	.word	0x3ff2ffff
 80125c4:	40038000 	.word	0x40038000
 80125c8:	3ff80000 	.word	0x3ff80000
 80125cc:	bff00000 	.word	0xbff00000
 80125d0:	08013df0 	.word	0x08013df0
 80125d4:	08013dd0 	.word	0x08013dd0

080125d8 <fabs>:
 80125d8:	ec51 0b10 	vmov	r0, r1, d0
 80125dc:	ee10 2a10 	vmov	r2, s0
 80125e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80125e4:	ec43 2b10 	vmov	d0, r2, r3
 80125e8:	4770      	bx	lr

080125ea <finite>:
 80125ea:	b082      	sub	sp, #8
 80125ec:	ed8d 0b00 	vstr	d0, [sp]
 80125f0:	9801      	ldr	r0, [sp, #4]
 80125f2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80125f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80125fa:	0fc0      	lsrs	r0, r0, #31
 80125fc:	b002      	add	sp, #8
 80125fe:	4770      	bx	lr

08012600 <__ieee754_sqrt>:
 8012600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012604:	ec55 4b10 	vmov	r4, r5, d0
 8012608:	4e67      	ldr	r6, [pc, #412]	; (80127a8 <__ieee754_sqrt+0x1a8>)
 801260a:	43ae      	bics	r6, r5
 801260c:	ee10 0a10 	vmov	r0, s0
 8012610:	ee10 2a10 	vmov	r2, s0
 8012614:	4629      	mov	r1, r5
 8012616:	462b      	mov	r3, r5
 8012618:	d10d      	bne.n	8012636 <__ieee754_sqrt+0x36>
 801261a:	f7ed ffed 	bl	80005f8 <__aeabi_dmul>
 801261e:	4602      	mov	r2, r0
 8012620:	460b      	mov	r3, r1
 8012622:	4620      	mov	r0, r4
 8012624:	4629      	mov	r1, r5
 8012626:	f7ed fe31 	bl	800028c <__adddf3>
 801262a:	4604      	mov	r4, r0
 801262c:	460d      	mov	r5, r1
 801262e:	ec45 4b10 	vmov	d0, r4, r5
 8012632:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012636:	2d00      	cmp	r5, #0
 8012638:	dc0b      	bgt.n	8012652 <__ieee754_sqrt+0x52>
 801263a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801263e:	4326      	orrs	r6, r4
 8012640:	d0f5      	beq.n	801262e <__ieee754_sqrt+0x2e>
 8012642:	b135      	cbz	r5, 8012652 <__ieee754_sqrt+0x52>
 8012644:	f7ed fe20 	bl	8000288 <__aeabi_dsub>
 8012648:	4602      	mov	r2, r0
 801264a:	460b      	mov	r3, r1
 801264c:	f7ee f8fe 	bl	800084c <__aeabi_ddiv>
 8012650:	e7eb      	b.n	801262a <__ieee754_sqrt+0x2a>
 8012652:	1509      	asrs	r1, r1, #20
 8012654:	f000 808d 	beq.w	8012772 <__ieee754_sqrt+0x172>
 8012658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801265c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8012660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012664:	07c9      	lsls	r1, r1, #31
 8012666:	bf5c      	itt	pl
 8012668:	005b      	lslpl	r3, r3, #1
 801266a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801266e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012672:	bf58      	it	pl
 8012674:	0052      	lslpl	r2, r2, #1
 8012676:	2500      	movs	r5, #0
 8012678:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801267c:	1076      	asrs	r6, r6, #1
 801267e:	0052      	lsls	r2, r2, #1
 8012680:	f04f 0e16 	mov.w	lr, #22
 8012684:	46ac      	mov	ip, r5
 8012686:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801268a:	eb0c 0001 	add.w	r0, ip, r1
 801268e:	4298      	cmp	r0, r3
 8012690:	bfde      	ittt	le
 8012692:	1a1b      	suble	r3, r3, r0
 8012694:	eb00 0c01 	addle.w	ip, r0, r1
 8012698:	186d      	addle	r5, r5, r1
 801269a:	005b      	lsls	r3, r3, #1
 801269c:	f1be 0e01 	subs.w	lr, lr, #1
 80126a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80126a4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80126a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80126ac:	d1ed      	bne.n	801268a <__ieee754_sqrt+0x8a>
 80126ae:	4674      	mov	r4, lr
 80126b0:	2720      	movs	r7, #32
 80126b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80126b6:	4563      	cmp	r3, ip
 80126b8:	eb01 000e 	add.w	r0, r1, lr
 80126bc:	dc02      	bgt.n	80126c4 <__ieee754_sqrt+0xc4>
 80126be:	d113      	bne.n	80126e8 <__ieee754_sqrt+0xe8>
 80126c0:	4290      	cmp	r0, r2
 80126c2:	d811      	bhi.n	80126e8 <__ieee754_sqrt+0xe8>
 80126c4:	2800      	cmp	r0, #0
 80126c6:	eb00 0e01 	add.w	lr, r0, r1
 80126ca:	da57      	bge.n	801277c <__ieee754_sqrt+0x17c>
 80126cc:	f1be 0f00 	cmp.w	lr, #0
 80126d0:	db54      	blt.n	801277c <__ieee754_sqrt+0x17c>
 80126d2:	f10c 0801 	add.w	r8, ip, #1
 80126d6:	eba3 030c 	sub.w	r3, r3, ip
 80126da:	4290      	cmp	r0, r2
 80126dc:	bf88      	it	hi
 80126de:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80126e2:	1a12      	subs	r2, r2, r0
 80126e4:	440c      	add	r4, r1
 80126e6:	46c4      	mov	ip, r8
 80126e8:	005b      	lsls	r3, r3, #1
 80126ea:	3f01      	subs	r7, #1
 80126ec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80126f0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80126f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80126f8:	d1dd      	bne.n	80126b6 <__ieee754_sqrt+0xb6>
 80126fa:	4313      	orrs	r3, r2
 80126fc:	d01b      	beq.n	8012736 <__ieee754_sqrt+0x136>
 80126fe:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80127ac <__ieee754_sqrt+0x1ac>
 8012702:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80127b0 <__ieee754_sqrt+0x1b0>
 8012706:	e9da 0100 	ldrd	r0, r1, [sl]
 801270a:	e9db 2300 	ldrd	r2, r3, [fp]
 801270e:	f7ed fdbb 	bl	8000288 <__aeabi_dsub>
 8012712:	e9da 8900 	ldrd	r8, r9, [sl]
 8012716:	4602      	mov	r2, r0
 8012718:	460b      	mov	r3, r1
 801271a:	4640      	mov	r0, r8
 801271c:	4649      	mov	r1, r9
 801271e:	f7ee f9e7 	bl	8000af0 <__aeabi_dcmple>
 8012722:	b140      	cbz	r0, 8012736 <__ieee754_sqrt+0x136>
 8012724:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012728:	e9da 0100 	ldrd	r0, r1, [sl]
 801272c:	e9db 2300 	ldrd	r2, r3, [fp]
 8012730:	d126      	bne.n	8012780 <__ieee754_sqrt+0x180>
 8012732:	3501      	adds	r5, #1
 8012734:	463c      	mov	r4, r7
 8012736:	106a      	asrs	r2, r5, #1
 8012738:	0863      	lsrs	r3, r4, #1
 801273a:	07e9      	lsls	r1, r5, #31
 801273c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012740:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012744:	bf48      	it	mi
 8012746:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801274a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801274e:	461c      	mov	r4, r3
 8012750:	e76d      	b.n	801262e <__ieee754_sqrt+0x2e>
 8012752:	0ad3      	lsrs	r3, r2, #11
 8012754:	3815      	subs	r0, #21
 8012756:	0552      	lsls	r2, r2, #21
 8012758:	2b00      	cmp	r3, #0
 801275a:	d0fa      	beq.n	8012752 <__ieee754_sqrt+0x152>
 801275c:	02dc      	lsls	r4, r3, #11
 801275e:	d50a      	bpl.n	8012776 <__ieee754_sqrt+0x176>
 8012760:	f1c1 0420 	rsb	r4, r1, #32
 8012764:	fa22 f404 	lsr.w	r4, r2, r4
 8012768:	1e4d      	subs	r5, r1, #1
 801276a:	408a      	lsls	r2, r1
 801276c:	4323      	orrs	r3, r4
 801276e:	1b41      	subs	r1, r0, r5
 8012770:	e772      	b.n	8012658 <__ieee754_sqrt+0x58>
 8012772:	4608      	mov	r0, r1
 8012774:	e7f0      	b.n	8012758 <__ieee754_sqrt+0x158>
 8012776:	005b      	lsls	r3, r3, #1
 8012778:	3101      	adds	r1, #1
 801277a:	e7ef      	b.n	801275c <__ieee754_sqrt+0x15c>
 801277c:	46e0      	mov	r8, ip
 801277e:	e7aa      	b.n	80126d6 <__ieee754_sqrt+0xd6>
 8012780:	f7ed fd84 	bl	800028c <__adddf3>
 8012784:	e9da 8900 	ldrd	r8, r9, [sl]
 8012788:	4602      	mov	r2, r0
 801278a:	460b      	mov	r3, r1
 801278c:	4640      	mov	r0, r8
 801278e:	4649      	mov	r1, r9
 8012790:	f7ee f9a4 	bl	8000adc <__aeabi_dcmplt>
 8012794:	b120      	cbz	r0, 80127a0 <__ieee754_sqrt+0x1a0>
 8012796:	1ca0      	adds	r0, r4, #2
 8012798:	bf08      	it	eq
 801279a:	3501      	addeq	r5, #1
 801279c:	3402      	adds	r4, #2
 801279e:	e7ca      	b.n	8012736 <__ieee754_sqrt+0x136>
 80127a0:	3401      	adds	r4, #1
 80127a2:	f024 0401 	bic.w	r4, r4, #1
 80127a6:	e7c6      	b.n	8012736 <__ieee754_sqrt+0x136>
 80127a8:	7ff00000 	.word	0x7ff00000
 80127ac:	200002a0 	.word	0x200002a0
 80127b0:	200002a8 	.word	0x200002a8
 80127b4:	00000000 	.word	0x00000000

080127b8 <__ieee754_atan2>:
 80127b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127bc:	ec57 6b11 	vmov	r6, r7, d1
 80127c0:	4273      	negs	r3, r6
 80127c2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8012940 <__ieee754_atan2+0x188>
 80127c6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80127ca:	4333      	orrs	r3, r6
 80127cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80127d0:	4543      	cmp	r3, r8
 80127d2:	ec51 0b10 	vmov	r0, r1, d0
 80127d6:	ee11 5a10 	vmov	r5, s2
 80127da:	d80a      	bhi.n	80127f2 <__ieee754_atan2+0x3a>
 80127dc:	4244      	negs	r4, r0
 80127de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80127e2:	4304      	orrs	r4, r0
 80127e4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80127e8:	4544      	cmp	r4, r8
 80127ea:	ee10 9a10 	vmov	r9, s0
 80127ee:	468e      	mov	lr, r1
 80127f0:	d907      	bls.n	8012802 <__ieee754_atan2+0x4a>
 80127f2:	4632      	mov	r2, r6
 80127f4:	463b      	mov	r3, r7
 80127f6:	f7ed fd49 	bl	800028c <__adddf3>
 80127fa:	ec41 0b10 	vmov	d0, r0, r1
 80127fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012802:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8012806:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801280a:	4334      	orrs	r4, r6
 801280c:	d103      	bne.n	8012816 <__ieee754_atan2+0x5e>
 801280e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012812:	f7ff bd41 	b.w	8012298 <atan>
 8012816:	17bc      	asrs	r4, r7, #30
 8012818:	f004 0402 	and.w	r4, r4, #2
 801281c:	ea53 0909 	orrs.w	r9, r3, r9
 8012820:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8012824:	d107      	bne.n	8012836 <__ieee754_atan2+0x7e>
 8012826:	2c02      	cmp	r4, #2
 8012828:	d05f      	beq.n	80128ea <__ieee754_atan2+0x132>
 801282a:	2c03      	cmp	r4, #3
 801282c:	d1e5      	bne.n	80127fa <__ieee754_atan2+0x42>
 801282e:	a140      	add	r1, pc, #256	; (adr r1, 8012930 <__ieee754_atan2+0x178>)
 8012830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012834:	e7e1      	b.n	80127fa <__ieee754_atan2+0x42>
 8012836:	4315      	orrs	r5, r2
 8012838:	d106      	bne.n	8012848 <__ieee754_atan2+0x90>
 801283a:	f1be 0f00 	cmp.w	lr, #0
 801283e:	da5f      	bge.n	8012900 <__ieee754_atan2+0x148>
 8012840:	a13d      	add	r1, pc, #244	; (adr r1, 8012938 <__ieee754_atan2+0x180>)
 8012842:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012846:	e7d8      	b.n	80127fa <__ieee754_atan2+0x42>
 8012848:	4542      	cmp	r2, r8
 801284a:	d10f      	bne.n	801286c <__ieee754_atan2+0xb4>
 801284c:	4293      	cmp	r3, r2
 801284e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012852:	d107      	bne.n	8012864 <__ieee754_atan2+0xac>
 8012854:	2c02      	cmp	r4, #2
 8012856:	d84c      	bhi.n	80128f2 <__ieee754_atan2+0x13a>
 8012858:	4b33      	ldr	r3, [pc, #204]	; (8012928 <__ieee754_atan2+0x170>)
 801285a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801285e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012862:	e7ca      	b.n	80127fa <__ieee754_atan2+0x42>
 8012864:	2c02      	cmp	r4, #2
 8012866:	d848      	bhi.n	80128fa <__ieee754_atan2+0x142>
 8012868:	4b30      	ldr	r3, [pc, #192]	; (801292c <__ieee754_atan2+0x174>)
 801286a:	e7f6      	b.n	801285a <__ieee754_atan2+0xa2>
 801286c:	4543      	cmp	r3, r8
 801286e:	d0e4      	beq.n	801283a <__ieee754_atan2+0x82>
 8012870:	1a9b      	subs	r3, r3, r2
 8012872:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8012876:	ea4f 5223 	mov.w	r2, r3, asr #20
 801287a:	da1e      	bge.n	80128ba <__ieee754_atan2+0x102>
 801287c:	2f00      	cmp	r7, #0
 801287e:	da01      	bge.n	8012884 <__ieee754_atan2+0xcc>
 8012880:	323c      	adds	r2, #60	; 0x3c
 8012882:	db1e      	blt.n	80128c2 <__ieee754_atan2+0x10a>
 8012884:	4632      	mov	r2, r6
 8012886:	463b      	mov	r3, r7
 8012888:	f7ed ffe0 	bl	800084c <__aeabi_ddiv>
 801288c:	ec41 0b10 	vmov	d0, r0, r1
 8012890:	f7ff fea2 	bl	80125d8 <fabs>
 8012894:	f7ff fd00 	bl	8012298 <atan>
 8012898:	ec51 0b10 	vmov	r0, r1, d0
 801289c:	2c01      	cmp	r4, #1
 801289e:	d013      	beq.n	80128c8 <__ieee754_atan2+0x110>
 80128a0:	2c02      	cmp	r4, #2
 80128a2:	d015      	beq.n	80128d0 <__ieee754_atan2+0x118>
 80128a4:	2c00      	cmp	r4, #0
 80128a6:	d0a8      	beq.n	80127fa <__ieee754_atan2+0x42>
 80128a8:	a317      	add	r3, pc, #92	; (adr r3, 8012908 <__ieee754_atan2+0x150>)
 80128aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ae:	f7ed fceb 	bl	8000288 <__aeabi_dsub>
 80128b2:	a317      	add	r3, pc, #92	; (adr r3, 8012910 <__ieee754_atan2+0x158>)
 80128b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b8:	e014      	b.n	80128e4 <__ieee754_atan2+0x12c>
 80128ba:	a117      	add	r1, pc, #92	; (adr r1, 8012918 <__ieee754_atan2+0x160>)
 80128bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128c0:	e7ec      	b.n	801289c <__ieee754_atan2+0xe4>
 80128c2:	2000      	movs	r0, #0
 80128c4:	2100      	movs	r1, #0
 80128c6:	e7e9      	b.n	801289c <__ieee754_atan2+0xe4>
 80128c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128cc:	4619      	mov	r1, r3
 80128ce:	e794      	b.n	80127fa <__ieee754_atan2+0x42>
 80128d0:	a30d      	add	r3, pc, #52	; (adr r3, 8012908 <__ieee754_atan2+0x150>)
 80128d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d6:	f7ed fcd7 	bl	8000288 <__aeabi_dsub>
 80128da:	4602      	mov	r2, r0
 80128dc:	460b      	mov	r3, r1
 80128de:	a10c      	add	r1, pc, #48	; (adr r1, 8012910 <__ieee754_atan2+0x158>)
 80128e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128e4:	f7ed fcd0 	bl	8000288 <__aeabi_dsub>
 80128e8:	e787      	b.n	80127fa <__ieee754_atan2+0x42>
 80128ea:	a109      	add	r1, pc, #36	; (adr r1, 8012910 <__ieee754_atan2+0x158>)
 80128ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128f0:	e783      	b.n	80127fa <__ieee754_atan2+0x42>
 80128f2:	a10b      	add	r1, pc, #44	; (adr r1, 8012920 <__ieee754_atan2+0x168>)
 80128f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128f8:	e77f      	b.n	80127fa <__ieee754_atan2+0x42>
 80128fa:	2000      	movs	r0, #0
 80128fc:	2100      	movs	r1, #0
 80128fe:	e77c      	b.n	80127fa <__ieee754_atan2+0x42>
 8012900:	a105      	add	r1, pc, #20	; (adr r1, 8012918 <__ieee754_atan2+0x160>)
 8012902:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012906:	e778      	b.n	80127fa <__ieee754_atan2+0x42>
 8012908:	33145c07 	.word	0x33145c07
 801290c:	3ca1a626 	.word	0x3ca1a626
 8012910:	54442d18 	.word	0x54442d18
 8012914:	400921fb 	.word	0x400921fb
 8012918:	54442d18 	.word	0x54442d18
 801291c:	3ff921fb 	.word	0x3ff921fb
 8012920:	54442d18 	.word	0x54442d18
 8012924:	3fe921fb 	.word	0x3fe921fb
 8012928:	08013e10 	.word	0x08013e10
 801292c:	08013e28 	.word	0x08013e28
 8012930:	54442d18 	.word	0x54442d18
 8012934:	c00921fb 	.word	0xc00921fb
 8012938:	54442d18 	.word	0x54442d18
 801293c:	bff921fb 	.word	0xbff921fb
 8012940:	7ff00000 	.word	0x7ff00000
 8012944:	00000000 	.word	0x00000000

08012948 <__ieee754_log>:
 8012948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801294c:	ec51 0b10 	vmov	r0, r1, d0
 8012950:	ed2d 8b04 	vpush	{d8-d9}
 8012954:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8012958:	b083      	sub	sp, #12
 801295a:	460d      	mov	r5, r1
 801295c:	da29      	bge.n	80129b2 <__ieee754_log+0x6a>
 801295e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012962:	4303      	orrs	r3, r0
 8012964:	ee10 2a10 	vmov	r2, s0
 8012968:	d10c      	bne.n	8012984 <__ieee754_log+0x3c>
 801296a:	49cf      	ldr	r1, [pc, #828]	; (8012ca8 <__ieee754_log+0x360>)
 801296c:	2200      	movs	r2, #0
 801296e:	2300      	movs	r3, #0
 8012970:	2000      	movs	r0, #0
 8012972:	f7ed ff6b 	bl	800084c <__aeabi_ddiv>
 8012976:	ec41 0b10 	vmov	d0, r0, r1
 801297a:	b003      	add	sp, #12
 801297c:	ecbd 8b04 	vpop	{d8-d9}
 8012980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012984:	2900      	cmp	r1, #0
 8012986:	da05      	bge.n	8012994 <__ieee754_log+0x4c>
 8012988:	460b      	mov	r3, r1
 801298a:	f7ed fc7d 	bl	8000288 <__aeabi_dsub>
 801298e:	2200      	movs	r2, #0
 8012990:	2300      	movs	r3, #0
 8012992:	e7ee      	b.n	8012972 <__ieee754_log+0x2a>
 8012994:	4bc5      	ldr	r3, [pc, #788]	; (8012cac <__ieee754_log+0x364>)
 8012996:	2200      	movs	r2, #0
 8012998:	f7ed fe2e 	bl	80005f8 <__aeabi_dmul>
 801299c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80129a0:	460d      	mov	r5, r1
 80129a2:	4ac3      	ldr	r2, [pc, #780]	; (8012cb0 <__ieee754_log+0x368>)
 80129a4:	4295      	cmp	r5, r2
 80129a6:	dd06      	ble.n	80129b6 <__ieee754_log+0x6e>
 80129a8:	4602      	mov	r2, r0
 80129aa:	460b      	mov	r3, r1
 80129ac:	f7ed fc6e 	bl	800028c <__adddf3>
 80129b0:	e7e1      	b.n	8012976 <__ieee754_log+0x2e>
 80129b2:	2300      	movs	r3, #0
 80129b4:	e7f5      	b.n	80129a2 <__ieee754_log+0x5a>
 80129b6:	152c      	asrs	r4, r5, #20
 80129b8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80129bc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80129c0:	441c      	add	r4, r3
 80129c2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80129c6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80129ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80129ce:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80129d2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80129d6:	ea42 0105 	orr.w	r1, r2, r5
 80129da:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80129de:	2200      	movs	r2, #0
 80129e0:	4bb4      	ldr	r3, [pc, #720]	; (8012cb4 <__ieee754_log+0x36c>)
 80129e2:	f7ed fc51 	bl	8000288 <__aeabi_dsub>
 80129e6:	1cab      	adds	r3, r5, #2
 80129e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129ec:	2b02      	cmp	r3, #2
 80129ee:	4682      	mov	sl, r0
 80129f0:	468b      	mov	fp, r1
 80129f2:	f04f 0200 	mov.w	r2, #0
 80129f6:	dc53      	bgt.n	8012aa0 <__ieee754_log+0x158>
 80129f8:	2300      	movs	r3, #0
 80129fa:	f7ee f865 	bl	8000ac8 <__aeabi_dcmpeq>
 80129fe:	b1d0      	cbz	r0, 8012a36 <__ieee754_log+0xee>
 8012a00:	2c00      	cmp	r4, #0
 8012a02:	f000 8122 	beq.w	8012c4a <__ieee754_log+0x302>
 8012a06:	4620      	mov	r0, r4
 8012a08:	f7ed fd8c 	bl	8000524 <__aeabi_i2d>
 8012a0c:	a390      	add	r3, pc, #576	; (adr r3, 8012c50 <__ieee754_log+0x308>)
 8012a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a12:	4606      	mov	r6, r0
 8012a14:	460f      	mov	r7, r1
 8012a16:	f7ed fdef 	bl	80005f8 <__aeabi_dmul>
 8012a1a:	a38f      	add	r3, pc, #572	; (adr r3, 8012c58 <__ieee754_log+0x310>)
 8012a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a20:	4604      	mov	r4, r0
 8012a22:	460d      	mov	r5, r1
 8012a24:	4630      	mov	r0, r6
 8012a26:	4639      	mov	r1, r7
 8012a28:	f7ed fde6 	bl	80005f8 <__aeabi_dmul>
 8012a2c:	4602      	mov	r2, r0
 8012a2e:	460b      	mov	r3, r1
 8012a30:	4620      	mov	r0, r4
 8012a32:	4629      	mov	r1, r5
 8012a34:	e7ba      	b.n	80129ac <__ieee754_log+0x64>
 8012a36:	a38a      	add	r3, pc, #552	; (adr r3, 8012c60 <__ieee754_log+0x318>)
 8012a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3c:	4650      	mov	r0, sl
 8012a3e:	4659      	mov	r1, fp
 8012a40:	f7ed fdda 	bl	80005f8 <__aeabi_dmul>
 8012a44:	4602      	mov	r2, r0
 8012a46:	460b      	mov	r3, r1
 8012a48:	2000      	movs	r0, #0
 8012a4a:	499b      	ldr	r1, [pc, #620]	; (8012cb8 <__ieee754_log+0x370>)
 8012a4c:	f7ed fc1c 	bl	8000288 <__aeabi_dsub>
 8012a50:	4652      	mov	r2, sl
 8012a52:	4606      	mov	r6, r0
 8012a54:	460f      	mov	r7, r1
 8012a56:	465b      	mov	r3, fp
 8012a58:	4650      	mov	r0, sl
 8012a5a:	4659      	mov	r1, fp
 8012a5c:	f7ed fdcc 	bl	80005f8 <__aeabi_dmul>
 8012a60:	4602      	mov	r2, r0
 8012a62:	460b      	mov	r3, r1
 8012a64:	4630      	mov	r0, r6
 8012a66:	4639      	mov	r1, r7
 8012a68:	f7ed fdc6 	bl	80005f8 <__aeabi_dmul>
 8012a6c:	4606      	mov	r6, r0
 8012a6e:	460f      	mov	r7, r1
 8012a70:	b914      	cbnz	r4, 8012a78 <__ieee754_log+0x130>
 8012a72:	4632      	mov	r2, r6
 8012a74:	463b      	mov	r3, r7
 8012a76:	e0a2      	b.n	8012bbe <__ieee754_log+0x276>
 8012a78:	4620      	mov	r0, r4
 8012a7a:	f7ed fd53 	bl	8000524 <__aeabi_i2d>
 8012a7e:	a374      	add	r3, pc, #464	; (adr r3, 8012c50 <__ieee754_log+0x308>)
 8012a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a84:	4680      	mov	r8, r0
 8012a86:	4689      	mov	r9, r1
 8012a88:	f7ed fdb6 	bl	80005f8 <__aeabi_dmul>
 8012a8c:	a372      	add	r3, pc, #456	; (adr r3, 8012c58 <__ieee754_log+0x310>)
 8012a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a92:	4604      	mov	r4, r0
 8012a94:	460d      	mov	r5, r1
 8012a96:	4640      	mov	r0, r8
 8012a98:	4649      	mov	r1, r9
 8012a9a:	f7ed fdad 	bl	80005f8 <__aeabi_dmul>
 8012a9e:	e0a7      	b.n	8012bf0 <__ieee754_log+0x2a8>
 8012aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012aa4:	f7ed fbf2 	bl	800028c <__adddf3>
 8012aa8:	4602      	mov	r2, r0
 8012aaa:	460b      	mov	r3, r1
 8012aac:	4650      	mov	r0, sl
 8012aae:	4659      	mov	r1, fp
 8012ab0:	f7ed fecc 	bl	800084c <__aeabi_ddiv>
 8012ab4:	ec41 0b18 	vmov	d8, r0, r1
 8012ab8:	4620      	mov	r0, r4
 8012aba:	f7ed fd33 	bl	8000524 <__aeabi_i2d>
 8012abe:	ec53 2b18 	vmov	r2, r3, d8
 8012ac2:	ec41 0b19 	vmov	d9, r0, r1
 8012ac6:	ec51 0b18 	vmov	r0, r1, d8
 8012aca:	f7ed fd95 	bl	80005f8 <__aeabi_dmul>
 8012ace:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8012ad2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8012ad6:	9301      	str	r3, [sp, #4]
 8012ad8:	4602      	mov	r2, r0
 8012ada:	460b      	mov	r3, r1
 8012adc:	4680      	mov	r8, r0
 8012ade:	4689      	mov	r9, r1
 8012ae0:	f7ed fd8a 	bl	80005f8 <__aeabi_dmul>
 8012ae4:	a360      	add	r3, pc, #384	; (adr r3, 8012c68 <__ieee754_log+0x320>)
 8012ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aea:	4606      	mov	r6, r0
 8012aec:	460f      	mov	r7, r1
 8012aee:	f7ed fd83 	bl	80005f8 <__aeabi_dmul>
 8012af2:	a35f      	add	r3, pc, #380	; (adr r3, 8012c70 <__ieee754_log+0x328>)
 8012af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af8:	f7ed fbc8 	bl	800028c <__adddf3>
 8012afc:	4632      	mov	r2, r6
 8012afe:	463b      	mov	r3, r7
 8012b00:	f7ed fd7a 	bl	80005f8 <__aeabi_dmul>
 8012b04:	a35c      	add	r3, pc, #368	; (adr r3, 8012c78 <__ieee754_log+0x330>)
 8012b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b0a:	f7ed fbbf 	bl	800028c <__adddf3>
 8012b0e:	4632      	mov	r2, r6
 8012b10:	463b      	mov	r3, r7
 8012b12:	f7ed fd71 	bl	80005f8 <__aeabi_dmul>
 8012b16:	a35a      	add	r3, pc, #360	; (adr r3, 8012c80 <__ieee754_log+0x338>)
 8012b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b1c:	f7ed fbb6 	bl	800028c <__adddf3>
 8012b20:	4642      	mov	r2, r8
 8012b22:	464b      	mov	r3, r9
 8012b24:	f7ed fd68 	bl	80005f8 <__aeabi_dmul>
 8012b28:	a357      	add	r3, pc, #348	; (adr r3, 8012c88 <__ieee754_log+0x340>)
 8012b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2e:	4680      	mov	r8, r0
 8012b30:	4689      	mov	r9, r1
 8012b32:	4630      	mov	r0, r6
 8012b34:	4639      	mov	r1, r7
 8012b36:	f7ed fd5f 	bl	80005f8 <__aeabi_dmul>
 8012b3a:	a355      	add	r3, pc, #340	; (adr r3, 8012c90 <__ieee754_log+0x348>)
 8012b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b40:	f7ed fba4 	bl	800028c <__adddf3>
 8012b44:	4632      	mov	r2, r6
 8012b46:	463b      	mov	r3, r7
 8012b48:	f7ed fd56 	bl	80005f8 <__aeabi_dmul>
 8012b4c:	a352      	add	r3, pc, #328	; (adr r3, 8012c98 <__ieee754_log+0x350>)
 8012b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b52:	f7ed fb9b 	bl	800028c <__adddf3>
 8012b56:	4632      	mov	r2, r6
 8012b58:	463b      	mov	r3, r7
 8012b5a:	f7ed fd4d 	bl	80005f8 <__aeabi_dmul>
 8012b5e:	460b      	mov	r3, r1
 8012b60:	4602      	mov	r2, r0
 8012b62:	4649      	mov	r1, r9
 8012b64:	4640      	mov	r0, r8
 8012b66:	f7ed fb91 	bl	800028c <__adddf3>
 8012b6a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8012b6e:	9b01      	ldr	r3, [sp, #4]
 8012b70:	3551      	adds	r5, #81	; 0x51
 8012b72:	431d      	orrs	r5, r3
 8012b74:	2d00      	cmp	r5, #0
 8012b76:	4680      	mov	r8, r0
 8012b78:	4689      	mov	r9, r1
 8012b7a:	dd48      	ble.n	8012c0e <__ieee754_log+0x2c6>
 8012b7c:	4b4e      	ldr	r3, [pc, #312]	; (8012cb8 <__ieee754_log+0x370>)
 8012b7e:	2200      	movs	r2, #0
 8012b80:	4650      	mov	r0, sl
 8012b82:	4659      	mov	r1, fp
 8012b84:	f7ed fd38 	bl	80005f8 <__aeabi_dmul>
 8012b88:	4652      	mov	r2, sl
 8012b8a:	465b      	mov	r3, fp
 8012b8c:	f7ed fd34 	bl	80005f8 <__aeabi_dmul>
 8012b90:	4602      	mov	r2, r0
 8012b92:	460b      	mov	r3, r1
 8012b94:	4606      	mov	r6, r0
 8012b96:	460f      	mov	r7, r1
 8012b98:	4640      	mov	r0, r8
 8012b9a:	4649      	mov	r1, r9
 8012b9c:	f7ed fb76 	bl	800028c <__adddf3>
 8012ba0:	ec53 2b18 	vmov	r2, r3, d8
 8012ba4:	f7ed fd28 	bl	80005f8 <__aeabi_dmul>
 8012ba8:	4680      	mov	r8, r0
 8012baa:	4689      	mov	r9, r1
 8012bac:	b964      	cbnz	r4, 8012bc8 <__ieee754_log+0x280>
 8012bae:	4602      	mov	r2, r0
 8012bb0:	460b      	mov	r3, r1
 8012bb2:	4630      	mov	r0, r6
 8012bb4:	4639      	mov	r1, r7
 8012bb6:	f7ed fb67 	bl	8000288 <__aeabi_dsub>
 8012bba:	4602      	mov	r2, r0
 8012bbc:	460b      	mov	r3, r1
 8012bbe:	4650      	mov	r0, sl
 8012bc0:	4659      	mov	r1, fp
 8012bc2:	f7ed fb61 	bl	8000288 <__aeabi_dsub>
 8012bc6:	e6d6      	b.n	8012976 <__ieee754_log+0x2e>
 8012bc8:	a321      	add	r3, pc, #132	; (adr r3, 8012c50 <__ieee754_log+0x308>)
 8012bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bce:	ec51 0b19 	vmov	r0, r1, d9
 8012bd2:	f7ed fd11 	bl	80005f8 <__aeabi_dmul>
 8012bd6:	a320      	add	r3, pc, #128	; (adr r3, 8012c58 <__ieee754_log+0x310>)
 8012bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bdc:	4604      	mov	r4, r0
 8012bde:	460d      	mov	r5, r1
 8012be0:	ec51 0b19 	vmov	r0, r1, d9
 8012be4:	f7ed fd08 	bl	80005f8 <__aeabi_dmul>
 8012be8:	4642      	mov	r2, r8
 8012bea:	464b      	mov	r3, r9
 8012bec:	f7ed fb4e 	bl	800028c <__adddf3>
 8012bf0:	4602      	mov	r2, r0
 8012bf2:	460b      	mov	r3, r1
 8012bf4:	4630      	mov	r0, r6
 8012bf6:	4639      	mov	r1, r7
 8012bf8:	f7ed fb46 	bl	8000288 <__aeabi_dsub>
 8012bfc:	4652      	mov	r2, sl
 8012bfe:	465b      	mov	r3, fp
 8012c00:	f7ed fb42 	bl	8000288 <__aeabi_dsub>
 8012c04:	4602      	mov	r2, r0
 8012c06:	460b      	mov	r3, r1
 8012c08:	4620      	mov	r0, r4
 8012c0a:	4629      	mov	r1, r5
 8012c0c:	e7d9      	b.n	8012bc2 <__ieee754_log+0x27a>
 8012c0e:	4602      	mov	r2, r0
 8012c10:	460b      	mov	r3, r1
 8012c12:	4650      	mov	r0, sl
 8012c14:	4659      	mov	r1, fp
 8012c16:	f7ed fb37 	bl	8000288 <__aeabi_dsub>
 8012c1a:	ec53 2b18 	vmov	r2, r3, d8
 8012c1e:	f7ed fceb 	bl	80005f8 <__aeabi_dmul>
 8012c22:	4606      	mov	r6, r0
 8012c24:	460f      	mov	r7, r1
 8012c26:	2c00      	cmp	r4, #0
 8012c28:	f43f af23 	beq.w	8012a72 <__ieee754_log+0x12a>
 8012c2c:	a308      	add	r3, pc, #32	; (adr r3, 8012c50 <__ieee754_log+0x308>)
 8012c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c32:	ec51 0b19 	vmov	r0, r1, d9
 8012c36:	f7ed fcdf 	bl	80005f8 <__aeabi_dmul>
 8012c3a:	a307      	add	r3, pc, #28	; (adr r3, 8012c58 <__ieee754_log+0x310>)
 8012c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c40:	4604      	mov	r4, r0
 8012c42:	460d      	mov	r5, r1
 8012c44:	ec51 0b19 	vmov	r0, r1, d9
 8012c48:	e727      	b.n	8012a9a <__ieee754_log+0x152>
 8012c4a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8012ca0 <__ieee754_log+0x358>
 8012c4e:	e694      	b.n	801297a <__ieee754_log+0x32>
 8012c50:	fee00000 	.word	0xfee00000
 8012c54:	3fe62e42 	.word	0x3fe62e42
 8012c58:	35793c76 	.word	0x35793c76
 8012c5c:	3dea39ef 	.word	0x3dea39ef
 8012c60:	55555555 	.word	0x55555555
 8012c64:	3fd55555 	.word	0x3fd55555
 8012c68:	df3e5244 	.word	0xdf3e5244
 8012c6c:	3fc2f112 	.word	0x3fc2f112
 8012c70:	96cb03de 	.word	0x96cb03de
 8012c74:	3fc74664 	.word	0x3fc74664
 8012c78:	94229359 	.word	0x94229359
 8012c7c:	3fd24924 	.word	0x3fd24924
 8012c80:	55555593 	.word	0x55555593
 8012c84:	3fe55555 	.word	0x3fe55555
 8012c88:	d078c69f 	.word	0xd078c69f
 8012c8c:	3fc39a09 	.word	0x3fc39a09
 8012c90:	1d8e78af 	.word	0x1d8e78af
 8012c94:	3fcc71c5 	.word	0x3fcc71c5
 8012c98:	9997fa04 	.word	0x9997fa04
 8012c9c:	3fd99999 	.word	0x3fd99999
	...
 8012ca8:	c3500000 	.word	0xc3500000
 8012cac:	43500000 	.word	0x43500000
 8012cb0:	7fefffff 	.word	0x7fefffff
 8012cb4:	3ff00000 	.word	0x3ff00000
 8012cb8:	3fe00000 	.word	0x3fe00000
 8012cbc:	00000000 	.word	0x00000000

08012cc0 <__ieee754_pow>:
 8012cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc4:	ed2d 8b06 	vpush	{d8-d10}
 8012cc8:	b089      	sub	sp, #36	; 0x24
 8012cca:	ed8d 1b00 	vstr	d1, [sp]
 8012cce:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012cd2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012cd6:	ea58 0102 	orrs.w	r1, r8, r2
 8012cda:	ec57 6b10 	vmov	r6, r7, d0
 8012cde:	d115      	bne.n	8012d0c <__ieee754_pow+0x4c>
 8012ce0:	19b3      	adds	r3, r6, r6
 8012ce2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8012ce6:	4152      	adcs	r2, r2
 8012ce8:	4299      	cmp	r1, r3
 8012cea:	4b89      	ldr	r3, [pc, #548]	; (8012f10 <__ieee754_pow+0x250>)
 8012cec:	4193      	sbcs	r3, r2
 8012cee:	f080 84d1 	bcs.w	8013694 <__ieee754_pow+0x9d4>
 8012cf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012cf6:	4630      	mov	r0, r6
 8012cf8:	4639      	mov	r1, r7
 8012cfa:	f7ed fac7 	bl	800028c <__adddf3>
 8012cfe:	ec41 0b10 	vmov	d0, r0, r1
 8012d02:	b009      	add	sp, #36	; 0x24
 8012d04:	ecbd 8b06 	vpop	{d8-d10}
 8012d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d0c:	4b81      	ldr	r3, [pc, #516]	; (8012f14 <__ieee754_pow+0x254>)
 8012d0e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8012d12:	429c      	cmp	r4, r3
 8012d14:	ee10 aa10 	vmov	sl, s0
 8012d18:	463d      	mov	r5, r7
 8012d1a:	dc06      	bgt.n	8012d2a <__ieee754_pow+0x6a>
 8012d1c:	d101      	bne.n	8012d22 <__ieee754_pow+0x62>
 8012d1e:	2e00      	cmp	r6, #0
 8012d20:	d1e7      	bne.n	8012cf2 <__ieee754_pow+0x32>
 8012d22:	4598      	cmp	r8, r3
 8012d24:	dc01      	bgt.n	8012d2a <__ieee754_pow+0x6a>
 8012d26:	d10f      	bne.n	8012d48 <__ieee754_pow+0x88>
 8012d28:	b172      	cbz	r2, 8012d48 <__ieee754_pow+0x88>
 8012d2a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012d2e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8012d32:	ea55 050a 	orrs.w	r5, r5, sl
 8012d36:	d1dc      	bne.n	8012cf2 <__ieee754_pow+0x32>
 8012d38:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012d3c:	18db      	adds	r3, r3, r3
 8012d3e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8012d42:	4152      	adcs	r2, r2
 8012d44:	429d      	cmp	r5, r3
 8012d46:	e7d0      	b.n	8012cea <__ieee754_pow+0x2a>
 8012d48:	2d00      	cmp	r5, #0
 8012d4a:	da3b      	bge.n	8012dc4 <__ieee754_pow+0x104>
 8012d4c:	4b72      	ldr	r3, [pc, #456]	; (8012f18 <__ieee754_pow+0x258>)
 8012d4e:	4598      	cmp	r8, r3
 8012d50:	dc51      	bgt.n	8012df6 <__ieee754_pow+0x136>
 8012d52:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012d56:	4598      	cmp	r8, r3
 8012d58:	f340 84ab 	ble.w	80136b2 <__ieee754_pow+0x9f2>
 8012d5c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012d60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012d64:	2b14      	cmp	r3, #20
 8012d66:	dd0f      	ble.n	8012d88 <__ieee754_pow+0xc8>
 8012d68:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012d6c:	fa22 f103 	lsr.w	r1, r2, r3
 8012d70:	fa01 f303 	lsl.w	r3, r1, r3
 8012d74:	4293      	cmp	r3, r2
 8012d76:	f040 849c 	bne.w	80136b2 <__ieee754_pow+0x9f2>
 8012d7a:	f001 0101 	and.w	r1, r1, #1
 8012d7e:	f1c1 0302 	rsb	r3, r1, #2
 8012d82:	9304      	str	r3, [sp, #16]
 8012d84:	b182      	cbz	r2, 8012da8 <__ieee754_pow+0xe8>
 8012d86:	e05f      	b.n	8012e48 <__ieee754_pow+0x188>
 8012d88:	2a00      	cmp	r2, #0
 8012d8a:	d15b      	bne.n	8012e44 <__ieee754_pow+0x184>
 8012d8c:	f1c3 0314 	rsb	r3, r3, #20
 8012d90:	fa48 f103 	asr.w	r1, r8, r3
 8012d94:	fa01 f303 	lsl.w	r3, r1, r3
 8012d98:	4543      	cmp	r3, r8
 8012d9a:	f040 8487 	bne.w	80136ac <__ieee754_pow+0x9ec>
 8012d9e:	f001 0101 	and.w	r1, r1, #1
 8012da2:	f1c1 0302 	rsb	r3, r1, #2
 8012da6:	9304      	str	r3, [sp, #16]
 8012da8:	4b5c      	ldr	r3, [pc, #368]	; (8012f1c <__ieee754_pow+0x25c>)
 8012daa:	4598      	cmp	r8, r3
 8012dac:	d132      	bne.n	8012e14 <__ieee754_pow+0x154>
 8012dae:	f1b9 0f00 	cmp.w	r9, #0
 8012db2:	f280 8477 	bge.w	80136a4 <__ieee754_pow+0x9e4>
 8012db6:	4959      	ldr	r1, [pc, #356]	; (8012f1c <__ieee754_pow+0x25c>)
 8012db8:	4632      	mov	r2, r6
 8012dba:	463b      	mov	r3, r7
 8012dbc:	2000      	movs	r0, #0
 8012dbe:	f7ed fd45 	bl	800084c <__aeabi_ddiv>
 8012dc2:	e79c      	b.n	8012cfe <__ieee754_pow+0x3e>
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	9304      	str	r3, [sp, #16]
 8012dc8:	2a00      	cmp	r2, #0
 8012dca:	d13d      	bne.n	8012e48 <__ieee754_pow+0x188>
 8012dcc:	4b51      	ldr	r3, [pc, #324]	; (8012f14 <__ieee754_pow+0x254>)
 8012dce:	4598      	cmp	r8, r3
 8012dd0:	d1ea      	bne.n	8012da8 <__ieee754_pow+0xe8>
 8012dd2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012dd6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012dda:	ea53 030a 	orrs.w	r3, r3, sl
 8012dde:	f000 8459 	beq.w	8013694 <__ieee754_pow+0x9d4>
 8012de2:	4b4f      	ldr	r3, [pc, #316]	; (8012f20 <__ieee754_pow+0x260>)
 8012de4:	429c      	cmp	r4, r3
 8012de6:	dd08      	ble.n	8012dfa <__ieee754_pow+0x13a>
 8012de8:	f1b9 0f00 	cmp.w	r9, #0
 8012dec:	f2c0 8456 	blt.w	801369c <__ieee754_pow+0x9dc>
 8012df0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012df4:	e783      	b.n	8012cfe <__ieee754_pow+0x3e>
 8012df6:	2302      	movs	r3, #2
 8012df8:	e7e5      	b.n	8012dc6 <__ieee754_pow+0x106>
 8012dfa:	f1b9 0f00 	cmp.w	r9, #0
 8012dfe:	f04f 0000 	mov.w	r0, #0
 8012e02:	f04f 0100 	mov.w	r1, #0
 8012e06:	f6bf af7a 	bge.w	8012cfe <__ieee754_pow+0x3e>
 8012e0a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012e0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012e12:	e774      	b.n	8012cfe <__ieee754_pow+0x3e>
 8012e14:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012e18:	d106      	bne.n	8012e28 <__ieee754_pow+0x168>
 8012e1a:	4632      	mov	r2, r6
 8012e1c:	463b      	mov	r3, r7
 8012e1e:	4630      	mov	r0, r6
 8012e20:	4639      	mov	r1, r7
 8012e22:	f7ed fbe9 	bl	80005f8 <__aeabi_dmul>
 8012e26:	e76a      	b.n	8012cfe <__ieee754_pow+0x3e>
 8012e28:	4b3e      	ldr	r3, [pc, #248]	; (8012f24 <__ieee754_pow+0x264>)
 8012e2a:	4599      	cmp	r9, r3
 8012e2c:	d10c      	bne.n	8012e48 <__ieee754_pow+0x188>
 8012e2e:	2d00      	cmp	r5, #0
 8012e30:	db0a      	blt.n	8012e48 <__ieee754_pow+0x188>
 8012e32:	ec47 6b10 	vmov	d0, r6, r7
 8012e36:	b009      	add	sp, #36	; 0x24
 8012e38:	ecbd 8b06 	vpop	{d8-d10}
 8012e3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e40:	f7ff bbde 	b.w	8012600 <__ieee754_sqrt>
 8012e44:	2300      	movs	r3, #0
 8012e46:	9304      	str	r3, [sp, #16]
 8012e48:	ec47 6b10 	vmov	d0, r6, r7
 8012e4c:	f7ff fbc4 	bl	80125d8 <fabs>
 8012e50:	ec51 0b10 	vmov	r0, r1, d0
 8012e54:	f1ba 0f00 	cmp.w	sl, #0
 8012e58:	d129      	bne.n	8012eae <__ieee754_pow+0x1ee>
 8012e5a:	b124      	cbz	r4, 8012e66 <__ieee754_pow+0x1a6>
 8012e5c:	4b2f      	ldr	r3, [pc, #188]	; (8012f1c <__ieee754_pow+0x25c>)
 8012e5e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012e62:	429a      	cmp	r2, r3
 8012e64:	d123      	bne.n	8012eae <__ieee754_pow+0x1ee>
 8012e66:	f1b9 0f00 	cmp.w	r9, #0
 8012e6a:	da05      	bge.n	8012e78 <__ieee754_pow+0x1b8>
 8012e6c:	4602      	mov	r2, r0
 8012e6e:	460b      	mov	r3, r1
 8012e70:	2000      	movs	r0, #0
 8012e72:	492a      	ldr	r1, [pc, #168]	; (8012f1c <__ieee754_pow+0x25c>)
 8012e74:	f7ed fcea 	bl	800084c <__aeabi_ddiv>
 8012e78:	2d00      	cmp	r5, #0
 8012e7a:	f6bf af40 	bge.w	8012cfe <__ieee754_pow+0x3e>
 8012e7e:	9b04      	ldr	r3, [sp, #16]
 8012e80:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012e84:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012e88:	431c      	orrs	r4, r3
 8012e8a:	d108      	bne.n	8012e9e <__ieee754_pow+0x1de>
 8012e8c:	4602      	mov	r2, r0
 8012e8e:	460b      	mov	r3, r1
 8012e90:	4610      	mov	r0, r2
 8012e92:	4619      	mov	r1, r3
 8012e94:	f7ed f9f8 	bl	8000288 <__aeabi_dsub>
 8012e98:	4602      	mov	r2, r0
 8012e9a:	460b      	mov	r3, r1
 8012e9c:	e78f      	b.n	8012dbe <__ieee754_pow+0xfe>
 8012e9e:	9b04      	ldr	r3, [sp, #16]
 8012ea0:	2b01      	cmp	r3, #1
 8012ea2:	f47f af2c 	bne.w	8012cfe <__ieee754_pow+0x3e>
 8012ea6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012eaa:	4619      	mov	r1, r3
 8012eac:	e727      	b.n	8012cfe <__ieee754_pow+0x3e>
 8012eae:	0feb      	lsrs	r3, r5, #31
 8012eb0:	3b01      	subs	r3, #1
 8012eb2:	9306      	str	r3, [sp, #24]
 8012eb4:	9a06      	ldr	r2, [sp, #24]
 8012eb6:	9b04      	ldr	r3, [sp, #16]
 8012eb8:	4313      	orrs	r3, r2
 8012eba:	d102      	bne.n	8012ec2 <__ieee754_pow+0x202>
 8012ebc:	4632      	mov	r2, r6
 8012ebe:	463b      	mov	r3, r7
 8012ec0:	e7e6      	b.n	8012e90 <__ieee754_pow+0x1d0>
 8012ec2:	4b19      	ldr	r3, [pc, #100]	; (8012f28 <__ieee754_pow+0x268>)
 8012ec4:	4598      	cmp	r8, r3
 8012ec6:	f340 80fb 	ble.w	80130c0 <__ieee754_pow+0x400>
 8012eca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012ece:	4598      	cmp	r8, r3
 8012ed0:	4b13      	ldr	r3, [pc, #76]	; (8012f20 <__ieee754_pow+0x260>)
 8012ed2:	dd0c      	ble.n	8012eee <__ieee754_pow+0x22e>
 8012ed4:	429c      	cmp	r4, r3
 8012ed6:	dc0f      	bgt.n	8012ef8 <__ieee754_pow+0x238>
 8012ed8:	f1b9 0f00 	cmp.w	r9, #0
 8012edc:	da0f      	bge.n	8012efe <__ieee754_pow+0x23e>
 8012ede:	2000      	movs	r0, #0
 8012ee0:	b009      	add	sp, #36	; 0x24
 8012ee2:	ecbd 8b06 	vpop	{d8-d10}
 8012ee6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eea:	f000 bcba 	b.w	8013862 <__math_oflow>
 8012eee:	429c      	cmp	r4, r3
 8012ef0:	dbf2      	blt.n	8012ed8 <__ieee754_pow+0x218>
 8012ef2:	4b0a      	ldr	r3, [pc, #40]	; (8012f1c <__ieee754_pow+0x25c>)
 8012ef4:	429c      	cmp	r4, r3
 8012ef6:	dd19      	ble.n	8012f2c <__ieee754_pow+0x26c>
 8012ef8:	f1b9 0f00 	cmp.w	r9, #0
 8012efc:	dcef      	bgt.n	8012ede <__ieee754_pow+0x21e>
 8012efe:	2000      	movs	r0, #0
 8012f00:	b009      	add	sp, #36	; 0x24
 8012f02:	ecbd 8b06 	vpop	{d8-d10}
 8012f06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f0a:	f000 bca1 	b.w	8013850 <__math_uflow>
 8012f0e:	bf00      	nop
 8012f10:	fff00000 	.word	0xfff00000
 8012f14:	7ff00000 	.word	0x7ff00000
 8012f18:	433fffff 	.word	0x433fffff
 8012f1c:	3ff00000 	.word	0x3ff00000
 8012f20:	3fefffff 	.word	0x3fefffff
 8012f24:	3fe00000 	.word	0x3fe00000
 8012f28:	41e00000 	.word	0x41e00000
 8012f2c:	4b60      	ldr	r3, [pc, #384]	; (80130b0 <__ieee754_pow+0x3f0>)
 8012f2e:	2200      	movs	r2, #0
 8012f30:	f7ed f9aa 	bl	8000288 <__aeabi_dsub>
 8012f34:	a354      	add	r3, pc, #336	; (adr r3, 8013088 <__ieee754_pow+0x3c8>)
 8012f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3a:	4604      	mov	r4, r0
 8012f3c:	460d      	mov	r5, r1
 8012f3e:	f7ed fb5b 	bl	80005f8 <__aeabi_dmul>
 8012f42:	a353      	add	r3, pc, #332	; (adr r3, 8013090 <__ieee754_pow+0x3d0>)
 8012f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f48:	4606      	mov	r6, r0
 8012f4a:	460f      	mov	r7, r1
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	4629      	mov	r1, r5
 8012f50:	f7ed fb52 	bl	80005f8 <__aeabi_dmul>
 8012f54:	4b57      	ldr	r3, [pc, #348]	; (80130b4 <__ieee754_pow+0x3f4>)
 8012f56:	4682      	mov	sl, r0
 8012f58:	468b      	mov	fp, r1
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	4620      	mov	r0, r4
 8012f5e:	4629      	mov	r1, r5
 8012f60:	f7ed fb4a 	bl	80005f8 <__aeabi_dmul>
 8012f64:	4602      	mov	r2, r0
 8012f66:	460b      	mov	r3, r1
 8012f68:	a14b      	add	r1, pc, #300	; (adr r1, 8013098 <__ieee754_pow+0x3d8>)
 8012f6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f6e:	f7ed f98b 	bl	8000288 <__aeabi_dsub>
 8012f72:	4622      	mov	r2, r4
 8012f74:	462b      	mov	r3, r5
 8012f76:	f7ed fb3f 	bl	80005f8 <__aeabi_dmul>
 8012f7a:	4602      	mov	r2, r0
 8012f7c:	460b      	mov	r3, r1
 8012f7e:	2000      	movs	r0, #0
 8012f80:	494d      	ldr	r1, [pc, #308]	; (80130b8 <__ieee754_pow+0x3f8>)
 8012f82:	f7ed f981 	bl	8000288 <__aeabi_dsub>
 8012f86:	4622      	mov	r2, r4
 8012f88:	4680      	mov	r8, r0
 8012f8a:	4689      	mov	r9, r1
 8012f8c:	462b      	mov	r3, r5
 8012f8e:	4620      	mov	r0, r4
 8012f90:	4629      	mov	r1, r5
 8012f92:	f7ed fb31 	bl	80005f8 <__aeabi_dmul>
 8012f96:	4602      	mov	r2, r0
 8012f98:	460b      	mov	r3, r1
 8012f9a:	4640      	mov	r0, r8
 8012f9c:	4649      	mov	r1, r9
 8012f9e:	f7ed fb2b 	bl	80005f8 <__aeabi_dmul>
 8012fa2:	a33f      	add	r3, pc, #252	; (adr r3, 80130a0 <__ieee754_pow+0x3e0>)
 8012fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa8:	f7ed fb26 	bl	80005f8 <__aeabi_dmul>
 8012fac:	4602      	mov	r2, r0
 8012fae:	460b      	mov	r3, r1
 8012fb0:	4650      	mov	r0, sl
 8012fb2:	4659      	mov	r1, fp
 8012fb4:	f7ed f968 	bl	8000288 <__aeabi_dsub>
 8012fb8:	4602      	mov	r2, r0
 8012fba:	460b      	mov	r3, r1
 8012fbc:	4680      	mov	r8, r0
 8012fbe:	4689      	mov	r9, r1
 8012fc0:	4630      	mov	r0, r6
 8012fc2:	4639      	mov	r1, r7
 8012fc4:	f7ed f962 	bl	800028c <__adddf3>
 8012fc8:	2000      	movs	r0, #0
 8012fca:	4632      	mov	r2, r6
 8012fcc:	463b      	mov	r3, r7
 8012fce:	4604      	mov	r4, r0
 8012fd0:	460d      	mov	r5, r1
 8012fd2:	f7ed f959 	bl	8000288 <__aeabi_dsub>
 8012fd6:	4602      	mov	r2, r0
 8012fd8:	460b      	mov	r3, r1
 8012fda:	4640      	mov	r0, r8
 8012fdc:	4649      	mov	r1, r9
 8012fde:	f7ed f953 	bl	8000288 <__aeabi_dsub>
 8012fe2:	9b04      	ldr	r3, [sp, #16]
 8012fe4:	9a06      	ldr	r2, [sp, #24]
 8012fe6:	3b01      	subs	r3, #1
 8012fe8:	4313      	orrs	r3, r2
 8012fea:	4682      	mov	sl, r0
 8012fec:	468b      	mov	fp, r1
 8012fee:	f040 81e7 	bne.w	80133c0 <__ieee754_pow+0x700>
 8012ff2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80130a8 <__ieee754_pow+0x3e8>
 8012ff6:	eeb0 8a47 	vmov.f32	s16, s14
 8012ffa:	eef0 8a67 	vmov.f32	s17, s15
 8012ffe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013002:	2600      	movs	r6, #0
 8013004:	4632      	mov	r2, r6
 8013006:	463b      	mov	r3, r7
 8013008:	e9dd 0100 	ldrd	r0, r1, [sp]
 801300c:	f7ed f93c 	bl	8000288 <__aeabi_dsub>
 8013010:	4622      	mov	r2, r4
 8013012:	462b      	mov	r3, r5
 8013014:	f7ed faf0 	bl	80005f8 <__aeabi_dmul>
 8013018:	e9dd 2300 	ldrd	r2, r3, [sp]
 801301c:	4680      	mov	r8, r0
 801301e:	4689      	mov	r9, r1
 8013020:	4650      	mov	r0, sl
 8013022:	4659      	mov	r1, fp
 8013024:	f7ed fae8 	bl	80005f8 <__aeabi_dmul>
 8013028:	4602      	mov	r2, r0
 801302a:	460b      	mov	r3, r1
 801302c:	4640      	mov	r0, r8
 801302e:	4649      	mov	r1, r9
 8013030:	f7ed f92c 	bl	800028c <__adddf3>
 8013034:	4632      	mov	r2, r6
 8013036:	463b      	mov	r3, r7
 8013038:	4680      	mov	r8, r0
 801303a:	4689      	mov	r9, r1
 801303c:	4620      	mov	r0, r4
 801303e:	4629      	mov	r1, r5
 8013040:	f7ed fada 	bl	80005f8 <__aeabi_dmul>
 8013044:	460b      	mov	r3, r1
 8013046:	4604      	mov	r4, r0
 8013048:	460d      	mov	r5, r1
 801304a:	4602      	mov	r2, r0
 801304c:	4649      	mov	r1, r9
 801304e:	4640      	mov	r0, r8
 8013050:	f7ed f91c 	bl	800028c <__adddf3>
 8013054:	4b19      	ldr	r3, [pc, #100]	; (80130bc <__ieee754_pow+0x3fc>)
 8013056:	4299      	cmp	r1, r3
 8013058:	ec45 4b19 	vmov	d9, r4, r5
 801305c:	4606      	mov	r6, r0
 801305e:	460f      	mov	r7, r1
 8013060:	468b      	mov	fp, r1
 8013062:	f340 82f0 	ble.w	8013646 <__ieee754_pow+0x986>
 8013066:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801306a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801306e:	4303      	orrs	r3, r0
 8013070:	f000 81e4 	beq.w	801343c <__ieee754_pow+0x77c>
 8013074:	ec51 0b18 	vmov	r0, r1, d8
 8013078:	2200      	movs	r2, #0
 801307a:	2300      	movs	r3, #0
 801307c:	f7ed fd2e 	bl	8000adc <__aeabi_dcmplt>
 8013080:	3800      	subs	r0, #0
 8013082:	bf18      	it	ne
 8013084:	2001      	movne	r0, #1
 8013086:	e72b      	b.n	8012ee0 <__ieee754_pow+0x220>
 8013088:	60000000 	.word	0x60000000
 801308c:	3ff71547 	.word	0x3ff71547
 8013090:	f85ddf44 	.word	0xf85ddf44
 8013094:	3e54ae0b 	.word	0x3e54ae0b
 8013098:	55555555 	.word	0x55555555
 801309c:	3fd55555 	.word	0x3fd55555
 80130a0:	652b82fe 	.word	0x652b82fe
 80130a4:	3ff71547 	.word	0x3ff71547
 80130a8:	00000000 	.word	0x00000000
 80130ac:	bff00000 	.word	0xbff00000
 80130b0:	3ff00000 	.word	0x3ff00000
 80130b4:	3fd00000 	.word	0x3fd00000
 80130b8:	3fe00000 	.word	0x3fe00000
 80130bc:	408fffff 	.word	0x408fffff
 80130c0:	4bd5      	ldr	r3, [pc, #852]	; (8013418 <__ieee754_pow+0x758>)
 80130c2:	402b      	ands	r3, r5
 80130c4:	2200      	movs	r2, #0
 80130c6:	b92b      	cbnz	r3, 80130d4 <__ieee754_pow+0x414>
 80130c8:	4bd4      	ldr	r3, [pc, #848]	; (801341c <__ieee754_pow+0x75c>)
 80130ca:	f7ed fa95 	bl	80005f8 <__aeabi_dmul>
 80130ce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80130d2:	460c      	mov	r4, r1
 80130d4:	1523      	asrs	r3, r4, #20
 80130d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80130da:	4413      	add	r3, r2
 80130dc:	9305      	str	r3, [sp, #20]
 80130de:	4bd0      	ldr	r3, [pc, #832]	; (8013420 <__ieee754_pow+0x760>)
 80130e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80130e4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80130e8:	429c      	cmp	r4, r3
 80130ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80130ee:	dd08      	ble.n	8013102 <__ieee754_pow+0x442>
 80130f0:	4bcc      	ldr	r3, [pc, #816]	; (8013424 <__ieee754_pow+0x764>)
 80130f2:	429c      	cmp	r4, r3
 80130f4:	f340 8162 	ble.w	80133bc <__ieee754_pow+0x6fc>
 80130f8:	9b05      	ldr	r3, [sp, #20]
 80130fa:	3301      	adds	r3, #1
 80130fc:	9305      	str	r3, [sp, #20]
 80130fe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013102:	2400      	movs	r4, #0
 8013104:	00e3      	lsls	r3, r4, #3
 8013106:	9307      	str	r3, [sp, #28]
 8013108:	4bc7      	ldr	r3, [pc, #796]	; (8013428 <__ieee754_pow+0x768>)
 801310a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801310e:	ed93 7b00 	vldr	d7, [r3]
 8013112:	4629      	mov	r1, r5
 8013114:	ec53 2b17 	vmov	r2, r3, d7
 8013118:	eeb0 9a47 	vmov.f32	s18, s14
 801311c:	eef0 9a67 	vmov.f32	s19, s15
 8013120:	4682      	mov	sl, r0
 8013122:	f7ed f8b1 	bl	8000288 <__aeabi_dsub>
 8013126:	4652      	mov	r2, sl
 8013128:	4606      	mov	r6, r0
 801312a:	460f      	mov	r7, r1
 801312c:	462b      	mov	r3, r5
 801312e:	ec51 0b19 	vmov	r0, r1, d9
 8013132:	f7ed f8ab 	bl	800028c <__adddf3>
 8013136:	4602      	mov	r2, r0
 8013138:	460b      	mov	r3, r1
 801313a:	2000      	movs	r0, #0
 801313c:	49bb      	ldr	r1, [pc, #748]	; (801342c <__ieee754_pow+0x76c>)
 801313e:	f7ed fb85 	bl	800084c <__aeabi_ddiv>
 8013142:	ec41 0b1a 	vmov	d10, r0, r1
 8013146:	4602      	mov	r2, r0
 8013148:	460b      	mov	r3, r1
 801314a:	4630      	mov	r0, r6
 801314c:	4639      	mov	r1, r7
 801314e:	f7ed fa53 	bl	80005f8 <__aeabi_dmul>
 8013152:	2300      	movs	r3, #0
 8013154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013158:	9302      	str	r3, [sp, #8]
 801315a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801315e:	46ab      	mov	fp, r5
 8013160:	106d      	asrs	r5, r5, #1
 8013162:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013166:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801316a:	ec41 0b18 	vmov	d8, r0, r1
 801316e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8013172:	2200      	movs	r2, #0
 8013174:	4640      	mov	r0, r8
 8013176:	4649      	mov	r1, r9
 8013178:	4614      	mov	r4, r2
 801317a:	461d      	mov	r5, r3
 801317c:	f7ed fa3c 	bl	80005f8 <__aeabi_dmul>
 8013180:	4602      	mov	r2, r0
 8013182:	460b      	mov	r3, r1
 8013184:	4630      	mov	r0, r6
 8013186:	4639      	mov	r1, r7
 8013188:	f7ed f87e 	bl	8000288 <__aeabi_dsub>
 801318c:	ec53 2b19 	vmov	r2, r3, d9
 8013190:	4606      	mov	r6, r0
 8013192:	460f      	mov	r7, r1
 8013194:	4620      	mov	r0, r4
 8013196:	4629      	mov	r1, r5
 8013198:	f7ed f876 	bl	8000288 <__aeabi_dsub>
 801319c:	4602      	mov	r2, r0
 801319e:	460b      	mov	r3, r1
 80131a0:	4650      	mov	r0, sl
 80131a2:	4659      	mov	r1, fp
 80131a4:	f7ed f870 	bl	8000288 <__aeabi_dsub>
 80131a8:	4642      	mov	r2, r8
 80131aa:	464b      	mov	r3, r9
 80131ac:	f7ed fa24 	bl	80005f8 <__aeabi_dmul>
 80131b0:	4602      	mov	r2, r0
 80131b2:	460b      	mov	r3, r1
 80131b4:	4630      	mov	r0, r6
 80131b6:	4639      	mov	r1, r7
 80131b8:	f7ed f866 	bl	8000288 <__aeabi_dsub>
 80131bc:	ec53 2b1a 	vmov	r2, r3, d10
 80131c0:	f7ed fa1a 	bl	80005f8 <__aeabi_dmul>
 80131c4:	ec53 2b18 	vmov	r2, r3, d8
 80131c8:	ec41 0b19 	vmov	d9, r0, r1
 80131cc:	ec51 0b18 	vmov	r0, r1, d8
 80131d0:	f7ed fa12 	bl	80005f8 <__aeabi_dmul>
 80131d4:	a37c      	add	r3, pc, #496	; (adr r3, 80133c8 <__ieee754_pow+0x708>)
 80131d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131da:	4604      	mov	r4, r0
 80131dc:	460d      	mov	r5, r1
 80131de:	f7ed fa0b 	bl	80005f8 <__aeabi_dmul>
 80131e2:	a37b      	add	r3, pc, #492	; (adr r3, 80133d0 <__ieee754_pow+0x710>)
 80131e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e8:	f7ed f850 	bl	800028c <__adddf3>
 80131ec:	4622      	mov	r2, r4
 80131ee:	462b      	mov	r3, r5
 80131f0:	f7ed fa02 	bl	80005f8 <__aeabi_dmul>
 80131f4:	a378      	add	r3, pc, #480	; (adr r3, 80133d8 <__ieee754_pow+0x718>)
 80131f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131fa:	f7ed f847 	bl	800028c <__adddf3>
 80131fe:	4622      	mov	r2, r4
 8013200:	462b      	mov	r3, r5
 8013202:	f7ed f9f9 	bl	80005f8 <__aeabi_dmul>
 8013206:	a376      	add	r3, pc, #472	; (adr r3, 80133e0 <__ieee754_pow+0x720>)
 8013208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801320c:	f7ed f83e 	bl	800028c <__adddf3>
 8013210:	4622      	mov	r2, r4
 8013212:	462b      	mov	r3, r5
 8013214:	f7ed f9f0 	bl	80005f8 <__aeabi_dmul>
 8013218:	a373      	add	r3, pc, #460	; (adr r3, 80133e8 <__ieee754_pow+0x728>)
 801321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801321e:	f7ed f835 	bl	800028c <__adddf3>
 8013222:	4622      	mov	r2, r4
 8013224:	462b      	mov	r3, r5
 8013226:	f7ed f9e7 	bl	80005f8 <__aeabi_dmul>
 801322a:	a371      	add	r3, pc, #452	; (adr r3, 80133f0 <__ieee754_pow+0x730>)
 801322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013230:	f7ed f82c 	bl	800028c <__adddf3>
 8013234:	4622      	mov	r2, r4
 8013236:	4606      	mov	r6, r0
 8013238:	460f      	mov	r7, r1
 801323a:	462b      	mov	r3, r5
 801323c:	4620      	mov	r0, r4
 801323e:	4629      	mov	r1, r5
 8013240:	f7ed f9da 	bl	80005f8 <__aeabi_dmul>
 8013244:	4602      	mov	r2, r0
 8013246:	460b      	mov	r3, r1
 8013248:	4630      	mov	r0, r6
 801324a:	4639      	mov	r1, r7
 801324c:	f7ed f9d4 	bl	80005f8 <__aeabi_dmul>
 8013250:	4642      	mov	r2, r8
 8013252:	4604      	mov	r4, r0
 8013254:	460d      	mov	r5, r1
 8013256:	464b      	mov	r3, r9
 8013258:	ec51 0b18 	vmov	r0, r1, d8
 801325c:	f7ed f816 	bl	800028c <__adddf3>
 8013260:	ec53 2b19 	vmov	r2, r3, d9
 8013264:	f7ed f9c8 	bl	80005f8 <__aeabi_dmul>
 8013268:	4622      	mov	r2, r4
 801326a:	462b      	mov	r3, r5
 801326c:	f7ed f80e 	bl	800028c <__adddf3>
 8013270:	4642      	mov	r2, r8
 8013272:	4682      	mov	sl, r0
 8013274:	468b      	mov	fp, r1
 8013276:	464b      	mov	r3, r9
 8013278:	4640      	mov	r0, r8
 801327a:	4649      	mov	r1, r9
 801327c:	f7ed f9bc 	bl	80005f8 <__aeabi_dmul>
 8013280:	4b6b      	ldr	r3, [pc, #428]	; (8013430 <__ieee754_pow+0x770>)
 8013282:	2200      	movs	r2, #0
 8013284:	4606      	mov	r6, r0
 8013286:	460f      	mov	r7, r1
 8013288:	f7ed f800 	bl	800028c <__adddf3>
 801328c:	4652      	mov	r2, sl
 801328e:	465b      	mov	r3, fp
 8013290:	f7ec fffc 	bl	800028c <__adddf3>
 8013294:	2000      	movs	r0, #0
 8013296:	4604      	mov	r4, r0
 8013298:	460d      	mov	r5, r1
 801329a:	4602      	mov	r2, r0
 801329c:	460b      	mov	r3, r1
 801329e:	4640      	mov	r0, r8
 80132a0:	4649      	mov	r1, r9
 80132a2:	f7ed f9a9 	bl	80005f8 <__aeabi_dmul>
 80132a6:	4b62      	ldr	r3, [pc, #392]	; (8013430 <__ieee754_pow+0x770>)
 80132a8:	4680      	mov	r8, r0
 80132aa:	4689      	mov	r9, r1
 80132ac:	2200      	movs	r2, #0
 80132ae:	4620      	mov	r0, r4
 80132b0:	4629      	mov	r1, r5
 80132b2:	f7ec ffe9 	bl	8000288 <__aeabi_dsub>
 80132b6:	4632      	mov	r2, r6
 80132b8:	463b      	mov	r3, r7
 80132ba:	f7ec ffe5 	bl	8000288 <__aeabi_dsub>
 80132be:	4602      	mov	r2, r0
 80132c0:	460b      	mov	r3, r1
 80132c2:	4650      	mov	r0, sl
 80132c4:	4659      	mov	r1, fp
 80132c6:	f7ec ffdf 	bl	8000288 <__aeabi_dsub>
 80132ca:	ec53 2b18 	vmov	r2, r3, d8
 80132ce:	f7ed f993 	bl	80005f8 <__aeabi_dmul>
 80132d2:	4622      	mov	r2, r4
 80132d4:	4606      	mov	r6, r0
 80132d6:	460f      	mov	r7, r1
 80132d8:	462b      	mov	r3, r5
 80132da:	ec51 0b19 	vmov	r0, r1, d9
 80132de:	f7ed f98b 	bl	80005f8 <__aeabi_dmul>
 80132e2:	4602      	mov	r2, r0
 80132e4:	460b      	mov	r3, r1
 80132e6:	4630      	mov	r0, r6
 80132e8:	4639      	mov	r1, r7
 80132ea:	f7ec ffcf 	bl	800028c <__adddf3>
 80132ee:	4606      	mov	r6, r0
 80132f0:	460f      	mov	r7, r1
 80132f2:	4602      	mov	r2, r0
 80132f4:	460b      	mov	r3, r1
 80132f6:	4640      	mov	r0, r8
 80132f8:	4649      	mov	r1, r9
 80132fa:	f7ec ffc7 	bl	800028c <__adddf3>
 80132fe:	a33e      	add	r3, pc, #248	; (adr r3, 80133f8 <__ieee754_pow+0x738>)
 8013300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013304:	2000      	movs	r0, #0
 8013306:	4604      	mov	r4, r0
 8013308:	460d      	mov	r5, r1
 801330a:	f7ed f975 	bl	80005f8 <__aeabi_dmul>
 801330e:	4642      	mov	r2, r8
 8013310:	ec41 0b18 	vmov	d8, r0, r1
 8013314:	464b      	mov	r3, r9
 8013316:	4620      	mov	r0, r4
 8013318:	4629      	mov	r1, r5
 801331a:	f7ec ffb5 	bl	8000288 <__aeabi_dsub>
 801331e:	4602      	mov	r2, r0
 8013320:	460b      	mov	r3, r1
 8013322:	4630      	mov	r0, r6
 8013324:	4639      	mov	r1, r7
 8013326:	f7ec ffaf 	bl	8000288 <__aeabi_dsub>
 801332a:	a335      	add	r3, pc, #212	; (adr r3, 8013400 <__ieee754_pow+0x740>)
 801332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013330:	f7ed f962 	bl	80005f8 <__aeabi_dmul>
 8013334:	a334      	add	r3, pc, #208	; (adr r3, 8013408 <__ieee754_pow+0x748>)
 8013336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333a:	4606      	mov	r6, r0
 801333c:	460f      	mov	r7, r1
 801333e:	4620      	mov	r0, r4
 8013340:	4629      	mov	r1, r5
 8013342:	f7ed f959 	bl	80005f8 <__aeabi_dmul>
 8013346:	4602      	mov	r2, r0
 8013348:	460b      	mov	r3, r1
 801334a:	4630      	mov	r0, r6
 801334c:	4639      	mov	r1, r7
 801334e:	f7ec ff9d 	bl	800028c <__adddf3>
 8013352:	9a07      	ldr	r2, [sp, #28]
 8013354:	4b37      	ldr	r3, [pc, #220]	; (8013434 <__ieee754_pow+0x774>)
 8013356:	4413      	add	r3, r2
 8013358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335c:	f7ec ff96 	bl	800028c <__adddf3>
 8013360:	4682      	mov	sl, r0
 8013362:	9805      	ldr	r0, [sp, #20]
 8013364:	468b      	mov	fp, r1
 8013366:	f7ed f8dd 	bl	8000524 <__aeabi_i2d>
 801336a:	9a07      	ldr	r2, [sp, #28]
 801336c:	4b32      	ldr	r3, [pc, #200]	; (8013438 <__ieee754_pow+0x778>)
 801336e:	4413      	add	r3, r2
 8013370:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013374:	4606      	mov	r6, r0
 8013376:	460f      	mov	r7, r1
 8013378:	4652      	mov	r2, sl
 801337a:	465b      	mov	r3, fp
 801337c:	ec51 0b18 	vmov	r0, r1, d8
 8013380:	f7ec ff84 	bl	800028c <__adddf3>
 8013384:	4642      	mov	r2, r8
 8013386:	464b      	mov	r3, r9
 8013388:	f7ec ff80 	bl	800028c <__adddf3>
 801338c:	4632      	mov	r2, r6
 801338e:	463b      	mov	r3, r7
 8013390:	f7ec ff7c 	bl	800028c <__adddf3>
 8013394:	2000      	movs	r0, #0
 8013396:	4632      	mov	r2, r6
 8013398:	463b      	mov	r3, r7
 801339a:	4604      	mov	r4, r0
 801339c:	460d      	mov	r5, r1
 801339e:	f7ec ff73 	bl	8000288 <__aeabi_dsub>
 80133a2:	4642      	mov	r2, r8
 80133a4:	464b      	mov	r3, r9
 80133a6:	f7ec ff6f 	bl	8000288 <__aeabi_dsub>
 80133aa:	ec53 2b18 	vmov	r2, r3, d8
 80133ae:	f7ec ff6b 	bl	8000288 <__aeabi_dsub>
 80133b2:	4602      	mov	r2, r0
 80133b4:	460b      	mov	r3, r1
 80133b6:	4650      	mov	r0, sl
 80133b8:	4659      	mov	r1, fp
 80133ba:	e610      	b.n	8012fde <__ieee754_pow+0x31e>
 80133bc:	2401      	movs	r4, #1
 80133be:	e6a1      	b.n	8013104 <__ieee754_pow+0x444>
 80133c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013410 <__ieee754_pow+0x750>
 80133c4:	e617      	b.n	8012ff6 <__ieee754_pow+0x336>
 80133c6:	bf00      	nop
 80133c8:	4a454eef 	.word	0x4a454eef
 80133cc:	3fca7e28 	.word	0x3fca7e28
 80133d0:	93c9db65 	.word	0x93c9db65
 80133d4:	3fcd864a 	.word	0x3fcd864a
 80133d8:	a91d4101 	.word	0xa91d4101
 80133dc:	3fd17460 	.word	0x3fd17460
 80133e0:	518f264d 	.word	0x518f264d
 80133e4:	3fd55555 	.word	0x3fd55555
 80133e8:	db6fabff 	.word	0xdb6fabff
 80133ec:	3fdb6db6 	.word	0x3fdb6db6
 80133f0:	33333303 	.word	0x33333303
 80133f4:	3fe33333 	.word	0x3fe33333
 80133f8:	e0000000 	.word	0xe0000000
 80133fc:	3feec709 	.word	0x3feec709
 8013400:	dc3a03fd 	.word	0xdc3a03fd
 8013404:	3feec709 	.word	0x3feec709
 8013408:	145b01f5 	.word	0x145b01f5
 801340c:	be3e2fe0 	.word	0xbe3e2fe0
 8013410:	00000000 	.word	0x00000000
 8013414:	3ff00000 	.word	0x3ff00000
 8013418:	7ff00000 	.word	0x7ff00000
 801341c:	43400000 	.word	0x43400000
 8013420:	0003988e 	.word	0x0003988e
 8013424:	000bb679 	.word	0x000bb679
 8013428:	08013e40 	.word	0x08013e40
 801342c:	3ff00000 	.word	0x3ff00000
 8013430:	40080000 	.word	0x40080000
 8013434:	08013e60 	.word	0x08013e60
 8013438:	08013e50 	.word	0x08013e50
 801343c:	a3b3      	add	r3, pc, #716	; (adr r3, 801370c <__ieee754_pow+0xa4c>)
 801343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013442:	4640      	mov	r0, r8
 8013444:	4649      	mov	r1, r9
 8013446:	f7ec ff21 	bl	800028c <__adddf3>
 801344a:	4622      	mov	r2, r4
 801344c:	ec41 0b1a 	vmov	d10, r0, r1
 8013450:	462b      	mov	r3, r5
 8013452:	4630      	mov	r0, r6
 8013454:	4639      	mov	r1, r7
 8013456:	f7ec ff17 	bl	8000288 <__aeabi_dsub>
 801345a:	4602      	mov	r2, r0
 801345c:	460b      	mov	r3, r1
 801345e:	ec51 0b1a 	vmov	r0, r1, d10
 8013462:	f7ed fb59 	bl	8000b18 <__aeabi_dcmpgt>
 8013466:	2800      	cmp	r0, #0
 8013468:	f47f ae04 	bne.w	8013074 <__ieee754_pow+0x3b4>
 801346c:	4aa2      	ldr	r2, [pc, #648]	; (80136f8 <__ieee754_pow+0xa38>)
 801346e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013472:	4293      	cmp	r3, r2
 8013474:	f340 8107 	ble.w	8013686 <__ieee754_pow+0x9c6>
 8013478:	151b      	asrs	r3, r3, #20
 801347a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801347e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013482:	fa4a fa03 	asr.w	sl, sl, r3
 8013486:	44da      	add	sl, fp
 8013488:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801348c:	489b      	ldr	r0, [pc, #620]	; (80136fc <__ieee754_pow+0xa3c>)
 801348e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013492:	4108      	asrs	r0, r1
 8013494:	ea00 030a 	and.w	r3, r0, sl
 8013498:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801349c:	f1c1 0114 	rsb	r1, r1, #20
 80134a0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80134a4:	fa4a fa01 	asr.w	sl, sl, r1
 80134a8:	f1bb 0f00 	cmp.w	fp, #0
 80134ac:	f04f 0200 	mov.w	r2, #0
 80134b0:	4620      	mov	r0, r4
 80134b2:	4629      	mov	r1, r5
 80134b4:	bfb8      	it	lt
 80134b6:	f1ca 0a00 	rsblt	sl, sl, #0
 80134ba:	f7ec fee5 	bl	8000288 <__aeabi_dsub>
 80134be:	ec41 0b19 	vmov	d9, r0, r1
 80134c2:	4642      	mov	r2, r8
 80134c4:	464b      	mov	r3, r9
 80134c6:	ec51 0b19 	vmov	r0, r1, d9
 80134ca:	f7ec fedf 	bl	800028c <__adddf3>
 80134ce:	a37a      	add	r3, pc, #488	; (adr r3, 80136b8 <__ieee754_pow+0x9f8>)
 80134d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d4:	2000      	movs	r0, #0
 80134d6:	4604      	mov	r4, r0
 80134d8:	460d      	mov	r5, r1
 80134da:	f7ed f88d 	bl	80005f8 <__aeabi_dmul>
 80134de:	ec53 2b19 	vmov	r2, r3, d9
 80134e2:	4606      	mov	r6, r0
 80134e4:	460f      	mov	r7, r1
 80134e6:	4620      	mov	r0, r4
 80134e8:	4629      	mov	r1, r5
 80134ea:	f7ec fecd 	bl	8000288 <__aeabi_dsub>
 80134ee:	4602      	mov	r2, r0
 80134f0:	460b      	mov	r3, r1
 80134f2:	4640      	mov	r0, r8
 80134f4:	4649      	mov	r1, r9
 80134f6:	f7ec fec7 	bl	8000288 <__aeabi_dsub>
 80134fa:	a371      	add	r3, pc, #452	; (adr r3, 80136c0 <__ieee754_pow+0xa00>)
 80134fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013500:	f7ed f87a 	bl	80005f8 <__aeabi_dmul>
 8013504:	a370      	add	r3, pc, #448	; (adr r3, 80136c8 <__ieee754_pow+0xa08>)
 8013506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801350a:	4680      	mov	r8, r0
 801350c:	4689      	mov	r9, r1
 801350e:	4620      	mov	r0, r4
 8013510:	4629      	mov	r1, r5
 8013512:	f7ed f871 	bl	80005f8 <__aeabi_dmul>
 8013516:	4602      	mov	r2, r0
 8013518:	460b      	mov	r3, r1
 801351a:	4640      	mov	r0, r8
 801351c:	4649      	mov	r1, r9
 801351e:	f7ec feb5 	bl	800028c <__adddf3>
 8013522:	4604      	mov	r4, r0
 8013524:	460d      	mov	r5, r1
 8013526:	4602      	mov	r2, r0
 8013528:	460b      	mov	r3, r1
 801352a:	4630      	mov	r0, r6
 801352c:	4639      	mov	r1, r7
 801352e:	f7ec fead 	bl	800028c <__adddf3>
 8013532:	4632      	mov	r2, r6
 8013534:	463b      	mov	r3, r7
 8013536:	4680      	mov	r8, r0
 8013538:	4689      	mov	r9, r1
 801353a:	f7ec fea5 	bl	8000288 <__aeabi_dsub>
 801353e:	4602      	mov	r2, r0
 8013540:	460b      	mov	r3, r1
 8013542:	4620      	mov	r0, r4
 8013544:	4629      	mov	r1, r5
 8013546:	f7ec fe9f 	bl	8000288 <__aeabi_dsub>
 801354a:	4642      	mov	r2, r8
 801354c:	4606      	mov	r6, r0
 801354e:	460f      	mov	r7, r1
 8013550:	464b      	mov	r3, r9
 8013552:	4640      	mov	r0, r8
 8013554:	4649      	mov	r1, r9
 8013556:	f7ed f84f 	bl	80005f8 <__aeabi_dmul>
 801355a:	a35d      	add	r3, pc, #372	; (adr r3, 80136d0 <__ieee754_pow+0xa10>)
 801355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013560:	4604      	mov	r4, r0
 8013562:	460d      	mov	r5, r1
 8013564:	f7ed f848 	bl	80005f8 <__aeabi_dmul>
 8013568:	a35b      	add	r3, pc, #364	; (adr r3, 80136d8 <__ieee754_pow+0xa18>)
 801356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801356e:	f7ec fe8b 	bl	8000288 <__aeabi_dsub>
 8013572:	4622      	mov	r2, r4
 8013574:	462b      	mov	r3, r5
 8013576:	f7ed f83f 	bl	80005f8 <__aeabi_dmul>
 801357a:	a359      	add	r3, pc, #356	; (adr r3, 80136e0 <__ieee754_pow+0xa20>)
 801357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013580:	f7ec fe84 	bl	800028c <__adddf3>
 8013584:	4622      	mov	r2, r4
 8013586:	462b      	mov	r3, r5
 8013588:	f7ed f836 	bl	80005f8 <__aeabi_dmul>
 801358c:	a356      	add	r3, pc, #344	; (adr r3, 80136e8 <__ieee754_pow+0xa28>)
 801358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013592:	f7ec fe79 	bl	8000288 <__aeabi_dsub>
 8013596:	4622      	mov	r2, r4
 8013598:	462b      	mov	r3, r5
 801359a:	f7ed f82d 	bl	80005f8 <__aeabi_dmul>
 801359e:	a354      	add	r3, pc, #336	; (adr r3, 80136f0 <__ieee754_pow+0xa30>)
 80135a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a4:	f7ec fe72 	bl	800028c <__adddf3>
 80135a8:	4622      	mov	r2, r4
 80135aa:	462b      	mov	r3, r5
 80135ac:	f7ed f824 	bl	80005f8 <__aeabi_dmul>
 80135b0:	4602      	mov	r2, r0
 80135b2:	460b      	mov	r3, r1
 80135b4:	4640      	mov	r0, r8
 80135b6:	4649      	mov	r1, r9
 80135b8:	f7ec fe66 	bl	8000288 <__aeabi_dsub>
 80135bc:	4604      	mov	r4, r0
 80135be:	460d      	mov	r5, r1
 80135c0:	4602      	mov	r2, r0
 80135c2:	460b      	mov	r3, r1
 80135c4:	4640      	mov	r0, r8
 80135c6:	4649      	mov	r1, r9
 80135c8:	f7ed f816 	bl	80005f8 <__aeabi_dmul>
 80135cc:	2200      	movs	r2, #0
 80135ce:	ec41 0b19 	vmov	d9, r0, r1
 80135d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80135d6:	4620      	mov	r0, r4
 80135d8:	4629      	mov	r1, r5
 80135da:	f7ec fe55 	bl	8000288 <__aeabi_dsub>
 80135de:	4602      	mov	r2, r0
 80135e0:	460b      	mov	r3, r1
 80135e2:	ec51 0b19 	vmov	r0, r1, d9
 80135e6:	f7ed f931 	bl	800084c <__aeabi_ddiv>
 80135ea:	4632      	mov	r2, r6
 80135ec:	4604      	mov	r4, r0
 80135ee:	460d      	mov	r5, r1
 80135f0:	463b      	mov	r3, r7
 80135f2:	4640      	mov	r0, r8
 80135f4:	4649      	mov	r1, r9
 80135f6:	f7ec ffff 	bl	80005f8 <__aeabi_dmul>
 80135fa:	4632      	mov	r2, r6
 80135fc:	463b      	mov	r3, r7
 80135fe:	f7ec fe45 	bl	800028c <__adddf3>
 8013602:	4602      	mov	r2, r0
 8013604:	460b      	mov	r3, r1
 8013606:	4620      	mov	r0, r4
 8013608:	4629      	mov	r1, r5
 801360a:	f7ec fe3d 	bl	8000288 <__aeabi_dsub>
 801360e:	4642      	mov	r2, r8
 8013610:	464b      	mov	r3, r9
 8013612:	f7ec fe39 	bl	8000288 <__aeabi_dsub>
 8013616:	460b      	mov	r3, r1
 8013618:	4602      	mov	r2, r0
 801361a:	4939      	ldr	r1, [pc, #228]	; (8013700 <__ieee754_pow+0xa40>)
 801361c:	2000      	movs	r0, #0
 801361e:	f7ec fe33 	bl	8000288 <__aeabi_dsub>
 8013622:	ec41 0b10 	vmov	d0, r0, r1
 8013626:	ee10 3a90 	vmov	r3, s1
 801362a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801362e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013632:	da2b      	bge.n	801368c <__ieee754_pow+0x9cc>
 8013634:	4650      	mov	r0, sl
 8013636:	f000 f86f 	bl	8013718 <scalbn>
 801363a:	ec51 0b10 	vmov	r0, r1, d0
 801363e:	ec53 2b18 	vmov	r2, r3, d8
 8013642:	f7ff bbee 	b.w	8012e22 <__ieee754_pow+0x162>
 8013646:	4b2f      	ldr	r3, [pc, #188]	; (8013704 <__ieee754_pow+0xa44>)
 8013648:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801364c:	429e      	cmp	r6, r3
 801364e:	f77f af0d 	ble.w	801346c <__ieee754_pow+0x7ac>
 8013652:	4b2d      	ldr	r3, [pc, #180]	; (8013708 <__ieee754_pow+0xa48>)
 8013654:	440b      	add	r3, r1
 8013656:	4303      	orrs	r3, r0
 8013658:	d009      	beq.n	801366e <__ieee754_pow+0x9ae>
 801365a:	ec51 0b18 	vmov	r0, r1, d8
 801365e:	2200      	movs	r2, #0
 8013660:	2300      	movs	r3, #0
 8013662:	f7ed fa3b 	bl	8000adc <__aeabi_dcmplt>
 8013666:	3800      	subs	r0, #0
 8013668:	bf18      	it	ne
 801366a:	2001      	movne	r0, #1
 801366c:	e448      	b.n	8012f00 <__ieee754_pow+0x240>
 801366e:	4622      	mov	r2, r4
 8013670:	462b      	mov	r3, r5
 8013672:	f7ec fe09 	bl	8000288 <__aeabi_dsub>
 8013676:	4642      	mov	r2, r8
 8013678:	464b      	mov	r3, r9
 801367a:	f7ed fa43 	bl	8000b04 <__aeabi_dcmpge>
 801367e:	2800      	cmp	r0, #0
 8013680:	f43f aef4 	beq.w	801346c <__ieee754_pow+0x7ac>
 8013684:	e7e9      	b.n	801365a <__ieee754_pow+0x99a>
 8013686:	f04f 0a00 	mov.w	sl, #0
 801368a:	e71a      	b.n	80134c2 <__ieee754_pow+0x802>
 801368c:	ec51 0b10 	vmov	r0, r1, d0
 8013690:	4619      	mov	r1, r3
 8013692:	e7d4      	b.n	801363e <__ieee754_pow+0x97e>
 8013694:	491a      	ldr	r1, [pc, #104]	; (8013700 <__ieee754_pow+0xa40>)
 8013696:	2000      	movs	r0, #0
 8013698:	f7ff bb31 	b.w	8012cfe <__ieee754_pow+0x3e>
 801369c:	2000      	movs	r0, #0
 801369e:	2100      	movs	r1, #0
 80136a0:	f7ff bb2d 	b.w	8012cfe <__ieee754_pow+0x3e>
 80136a4:	4630      	mov	r0, r6
 80136a6:	4639      	mov	r1, r7
 80136a8:	f7ff bb29 	b.w	8012cfe <__ieee754_pow+0x3e>
 80136ac:	9204      	str	r2, [sp, #16]
 80136ae:	f7ff bb7b 	b.w	8012da8 <__ieee754_pow+0xe8>
 80136b2:	2300      	movs	r3, #0
 80136b4:	f7ff bb65 	b.w	8012d82 <__ieee754_pow+0xc2>
 80136b8:	00000000 	.word	0x00000000
 80136bc:	3fe62e43 	.word	0x3fe62e43
 80136c0:	fefa39ef 	.word	0xfefa39ef
 80136c4:	3fe62e42 	.word	0x3fe62e42
 80136c8:	0ca86c39 	.word	0x0ca86c39
 80136cc:	be205c61 	.word	0xbe205c61
 80136d0:	72bea4d0 	.word	0x72bea4d0
 80136d4:	3e663769 	.word	0x3e663769
 80136d8:	c5d26bf1 	.word	0xc5d26bf1
 80136dc:	3ebbbd41 	.word	0x3ebbbd41
 80136e0:	af25de2c 	.word	0xaf25de2c
 80136e4:	3f11566a 	.word	0x3f11566a
 80136e8:	16bebd93 	.word	0x16bebd93
 80136ec:	3f66c16c 	.word	0x3f66c16c
 80136f0:	5555553e 	.word	0x5555553e
 80136f4:	3fc55555 	.word	0x3fc55555
 80136f8:	3fe00000 	.word	0x3fe00000
 80136fc:	fff00000 	.word	0xfff00000
 8013700:	3ff00000 	.word	0x3ff00000
 8013704:	4090cbff 	.word	0x4090cbff
 8013708:	3f6f3400 	.word	0x3f6f3400
 801370c:	652b82fe 	.word	0x652b82fe
 8013710:	3c971547 	.word	0x3c971547
 8013714:	00000000 	.word	0x00000000

08013718 <scalbn>:
 8013718:	b570      	push	{r4, r5, r6, lr}
 801371a:	ec55 4b10 	vmov	r4, r5, d0
 801371e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013722:	4606      	mov	r6, r0
 8013724:	462b      	mov	r3, r5
 8013726:	b999      	cbnz	r1, 8013750 <scalbn+0x38>
 8013728:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801372c:	4323      	orrs	r3, r4
 801372e:	d03f      	beq.n	80137b0 <scalbn+0x98>
 8013730:	4b35      	ldr	r3, [pc, #212]	; (8013808 <scalbn+0xf0>)
 8013732:	4629      	mov	r1, r5
 8013734:	ee10 0a10 	vmov	r0, s0
 8013738:	2200      	movs	r2, #0
 801373a:	f7ec ff5d 	bl	80005f8 <__aeabi_dmul>
 801373e:	4b33      	ldr	r3, [pc, #204]	; (801380c <scalbn+0xf4>)
 8013740:	429e      	cmp	r6, r3
 8013742:	4604      	mov	r4, r0
 8013744:	460d      	mov	r5, r1
 8013746:	da10      	bge.n	801376a <scalbn+0x52>
 8013748:	a327      	add	r3, pc, #156	; (adr r3, 80137e8 <scalbn+0xd0>)
 801374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801374e:	e01f      	b.n	8013790 <scalbn+0x78>
 8013750:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013754:	4291      	cmp	r1, r2
 8013756:	d10c      	bne.n	8013772 <scalbn+0x5a>
 8013758:	ee10 2a10 	vmov	r2, s0
 801375c:	4620      	mov	r0, r4
 801375e:	4629      	mov	r1, r5
 8013760:	f7ec fd94 	bl	800028c <__adddf3>
 8013764:	4604      	mov	r4, r0
 8013766:	460d      	mov	r5, r1
 8013768:	e022      	b.n	80137b0 <scalbn+0x98>
 801376a:	460b      	mov	r3, r1
 801376c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013770:	3936      	subs	r1, #54	; 0x36
 8013772:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013776:	4296      	cmp	r6, r2
 8013778:	dd0d      	ble.n	8013796 <scalbn+0x7e>
 801377a:	2d00      	cmp	r5, #0
 801377c:	a11c      	add	r1, pc, #112	; (adr r1, 80137f0 <scalbn+0xd8>)
 801377e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013782:	da02      	bge.n	801378a <scalbn+0x72>
 8013784:	a11c      	add	r1, pc, #112	; (adr r1, 80137f8 <scalbn+0xe0>)
 8013786:	e9d1 0100 	ldrd	r0, r1, [r1]
 801378a:	a319      	add	r3, pc, #100	; (adr r3, 80137f0 <scalbn+0xd8>)
 801378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013790:	f7ec ff32 	bl	80005f8 <__aeabi_dmul>
 8013794:	e7e6      	b.n	8013764 <scalbn+0x4c>
 8013796:	1872      	adds	r2, r6, r1
 8013798:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801379c:	428a      	cmp	r2, r1
 801379e:	dcec      	bgt.n	801377a <scalbn+0x62>
 80137a0:	2a00      	cmp	r2, #0
 80137a2:	dd08      	ble.n	80137b6 <scalbn+0x9e>
 80137a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80137a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80137ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80137b0:	ec45 4b10 	vmov	d0, r4, r5
 80137b4:	bd70      	pop	{r4, r5, r6, pc}
 80137b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80137ba:	da08      	bge.n	80137ce <scalbn+0xb6>
 80137bc:	2d00      	cmp	r5, #0
 80137be:	a10a      	add	r1, pc, #40	; (adr r1, 80137e8 <scalbn+0xd0>)
 80137c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137c4:	dac0      	bge.n	8013748 <scalbn+0x30>
 80137c6:	a10e      	add	r1, pc, #56	; (adr r1, 8013800 <scalbn+0xe8>)
 80137c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137cc:	e7bc      	b.n	8013748 <scalbn+0x30>
 80137ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80137d2:	3236      	adds	r2, #54	; 0x36
 80137d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80137d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80137dc:	4620      	mov	r0, r4
 80137de:	4b0c      	ldr	r3, [pc, #48]	; (8013810 <scalbn+0xf8>)
 80137e0:	2200      	movs	r2, #0
 80137e2:	e7d5      	b.n	8013790 <scalbn+0x78>
 80137e4:	f3af 8000 	nop.w
 80137e8:	c2f8f359 	.word	0xc2f8f359
 80137ec:	01a56e1f 	.word	0x01a56e1f
 80137f0:	8800759c 	.word	0x8800759c
 80137f4:	7e37e43c 	.word	0x7e37e43c
 80137f8:	8800759c 	.word	0x8800759c
 80137fc:	fe37e43c 	.word	0xfe37e43c
 8013800:	c2f8f359 	.word	0xc2f8f359
 8013804:	81a56e1f 	.word	0x81a56e1f
 8013808:	43500000 	.word	0x43500000
 801380c:	ffff3cb0 	.word	0xffff3cb0
 8013810:	3c900000 	.word	0x3c900000

08013814 <with_errno>:
 8013814:	b570      	push	{r4, r5, r6, lr}
 8013816:	4604      	mov	r4, r0
 8013818:	460d      	mov	r5, r1
 801381a:	4616      	mov	r6, r2
 801381c:	f7fa fc66 	bl	800e0ec <__errno>
 8013820:	4629      	mov	r1, r5
 8013822:	6006      	str	r6, [r0, #0]
 8013824:	4620      	mov	r0, r4
 8013826:	bd70      	pop	{r4, r5, r6, pc}

08013828 <xflow>:
 8013828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801382a:	4614      	mov	r4, r2
 801382c:	461d      	mov	r5, r3
 801382e:	b108      	cbz	r0, 8013834 <xflow+0xc>
 8013830:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013834:	e9cd 2300 	strd	r2, r3, [sp]
 8013838:	e9dd 2300 	ldrd	r2, r3, [sp]
 801383c:	4620      	mov	r0, r4
 801383e:	4629      	mov	r1, r5
 8013840:	f7ec feda 	bl	80005f8 <__aeabi_dmul>
 8013844:	2222      	movs	r2, #34	; 0x22
 8013846:	b003      	add	sp, #12
 8013848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801384c:	f7ff bfe2 	b.w	8013814 <with_errno>

08013850 <__math_uflow>:
 8013850:	b508      	push	{r3, lr}
 8013852:	2200      	movs	r2, #0
 8013854:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013858:	f7ff ffe6 	bl	8013828 <xflow>
 801385c:	ec41 0b10 	vmov	d0, r0, r1
 8013860:	bd08      	pop	{r3, pc}

08013862 <__math_oflow>:
 8013862:	b508      	push	{r3, lr}
 8013864:	2200      	movs	r2, #0
 8013866:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801386a:	f7ff ffdd 	bl	8013828 <xflow>
 801386e:	ec41 0b10 	vmov	d0, r0, r1
 8013872:	bd08      	pop	{r3, pc}

08013874 <_init>:
 8013874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013876:	bf00      	nop
 8013878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801387a:	bc08      	pop	{r3}
 801387c:	469e      	mov	lr, r3
 801387e:	4770      	bx	lr

08013880 <_fini>:
 8013880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013882:	bf00      	nop
 8013884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013886:	bc08      	pop	{r3}
 8013888:	469e      	mov	lr, r3
 801388a:	4770      	bx	lr
