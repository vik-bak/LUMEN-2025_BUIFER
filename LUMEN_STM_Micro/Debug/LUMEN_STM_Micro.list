
LUMEN_STM_Micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08013860  08013860  00023860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013e40  08013e40  000302b0  2**0
                  CONTENTS
  4 .ARM          00000008  08013e40  08013e40  00023e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013e48  08013e48  000302b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013e48  08013e48  00023e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013e4c  08013e4c  00023e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  08013e50  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000896c  200002b0  08014100  000302b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20008c1c  08014100  00038c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002215f  00000000  00000000  00030323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048de  00000000  00000000  00052482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cd0  00000000  00000000  00056d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001676  00000000  00000000  00058a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d300  00000000  00000000  0005a0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024c0e  00000000  00000000  000873a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001149ab  00000000  00000000  000abfb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000095d8  00000000  00000000  001c0960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001c9f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b0 	.word	0x200002b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013844 	.word	0x08013844

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b4 	.word	0x200002b4
 80001cc:	08013844 	.word	0x08013844

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <checkCalibration>:
	values[0] = 0.0;
	values[1] = 0.0;
	values[2] = 0.0;
}

bool checkCalibration(){
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	if (Ro < 0.0) {
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <checkCalibration+0x24>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	d501      	bpl.n	8001008 <checkCalibration+0x18>
			//Serial.println("Device not calibrated, call MQ2::begin before reading any value.");
			return false;
 8001004:	2300      	movs	r3, #0
 8001006:	e000      	b.n	800100a <checkCalibration+0x1a>
		}

		return true;
 8001008:	2301      	movs	r3, #1
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	20000024 	.word	0x20000024

08001018 <readLPG>:

		//lastReadTime = millis();
	    return values;
}

float readLPG(ADC_HandleTypeDef *hadc){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	if (!checkCalibration()) return 0.0;
 8001020:	f7ff ffe6 	bl	8000ff0 <checkCalibration>
 8001024:	4603      	mov	r3, r0
 8001026:	f083 0301 	eor.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <readLPG+0x1e>
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e00a      	b.n	800104c <readLPG+0x34>

	/*if (millis() < (lastReadTime + READ_DELAY) && values[0] > 0)
	        return values[0];
	else*/
	return (values[0] = MQGetPercentage(LPGCurve, hadc));
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <readLPG+0x44>)
 800103a:	f000 f8dd 	bl	80011f8 <MQGetPercentage>
 800103e:	eef0 7a40 	vmov.f32	s15, s0
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <readLPG+0x48>)
 8001044:	edc3 7a00 	vstr	s15, [r3]
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <readLPG+0x48>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eeb0 0a67 	vmov.f32	s0, s15
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000000 	.word	0x20000000
 8001060:	200002cc 	.word	0x200002cc

08001064 <readCO>:

float readCO(ADC_HandleTypeDef *hadc){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	if (!checkCalibration()) return 0.0;
 800106c:	f7ff ffc0 	bl	8000ff0 <checkCalibration>
 8001070:	4603      	mov	r3, r0
 8001072:	f083 0301 	eor.w	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <readCO+0x1e>
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	e00a      	b.n	8001098 <readCO+0x34>

	/*if (millis() < (lastReadTime + READ_DELAY) && values[1] > 0)
	        return values[1];
	else*/
	return (values[1] = MQGetPercentage(COCurve, hadc));
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4808      	ldr	r0, [pc, #32]	; (80010a8 <readCO+0x44>)
 8001086:	f000 f8b7 	bl	80011f8 <MQGetPercentage>
 800108a:	eef0 7a40 	vmov.f32	s15, s0
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <readCO+0x48>)
 8001090:	edc3 7a01 	vstr	s15, [r3, #4]
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <readCO+0x48>)
 8001096:	685b      	ldr	r3, [r3, #4]
}
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eeb0 0a67 	vmov.f32	s0, s15
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000000c 	.word	0x2000000c
 80010ac:	200002cc 	.word	0x200002cc

080010b0 <readSmoke>:

float readSmoke(ADC_HandleTypeDef *hadc){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if (!checkCalibration()) return 0.0;
 80010b8:	f7ff ff9a 	bl	8000ff0 <checkCalibration>
 80010bc:	4603      	mov	r3, r0
 80010be:	f083 0301 	eor.w	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <readSmoke+0x1e>
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e00a      	b.n	80010e4 <readSmoke+0x34>

	/*if (millis() < (lastReadTime + READ_DELAY) && values[2] > 0)
	        return values[2];
	else*/
	return (values[2] = MQGetPercentage(SmokeCurve, hadc));
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <readSmoke+0x44>)
 80010d2:	f000 f891 	bl	80011f8 <MQGetPercentage>
 80010d6:	eef0 7a40 	vmov.f32	s15, s0
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <readSmoke+0x48>)
 80010dc:	edc3 7a02 	vstr	s15, [r3, #8]
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <readSmoke+0x48>)
 80010e2:	689b      	ldr	r3, [r3, #8]
}
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000018 	.word	0x20000018
 80010f8:	200002cc 	.word	0x200002cc
 80010fc:	00000000 	.word	0x00000000

08001100 <MQResistanceCalculation>:

float MQResistanceCalculation(int raw_adc){
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	float flt_adc = (float) raw_adc;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001112:	edc7 7a03 	vstr	s15, [r7, #12]
    return RL_VALUE * (1023.0 - flt_adc) / flt_adc;
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff fa16 	bl	8000548 <__aeabi_f2d>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	a116      	add	r1, pc, #88	; (adr r1, 800117c <MQResistanceCalculation+0x7c>)
 8001122:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001126:	f7ff f8af 	bl	8000288 <__aeabi_dsub>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MQResistanceCalculation+0x78>)
 8001138:	f7ff fa5e 	bl	80005f8 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4614      	mov	r4, r2
 8001142:	461d      	mov	r5, r3
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f7ff f9ff 	bl	8000548 <__aeabi_f2d>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff fb7b 	bl	800084c <__aeabi_ddiv>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fd43 	bl	8000be8 <__aeabi_d2f>
 8001162:	4603      	mov	r3, r0
 8001164:	ee07 3a90 	vmov	s15, r3
}
 8001168:	eeb0 0a67 	vmov.f32	s0, s15
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bdb0      	pop	{r4, r5, r7, pc}
 8001172:	bf00      	nop
 8001174:	f3af 8000 	nop.w
 8001178:	40140000 	.word	0x40140000
 800117c:	00000000 	.word	0x00000000
 8001180:	408ff800 	.word	0x408ff800

08001184 <MQRead>:
	val = val / RO_CLEAN_AIR_FACTOR;

	return val;
}

float MQRead(ADC_HandleTypeDef *hadc){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	float rs = 0.0;
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < READ_SAMPLE_TIMES; i++) {
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	e01e      	b.n	80011d6 <MQRead+0x52>
		HAL_ADC_Start(hadc);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f002 fec1 	bl	8003f20 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, 100);
 800119e:	2164      	movs	r1, #100	; 0x64
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f002 ffab 	bl	80040fc <HAL_ADC_PollForConversion>
		rs += MQResistanceCalculation(HAL_ADC_GetValue(hadc));
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f003 f880 	bl	80042ac <HAL_ADC_GetValue>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ffa6 	bl	8001100 <MQResistanceCalculation>
 80011b4:	eeb0 7a40 	vmov.f32	s14, s0
 80011b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011c0:	edc7 7a03 	vstr	s15, [r7, #12]
		HAL_ADC_Stop(hadc);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f002 ff65 	bl	8004094 <HAL_ADC_Stop>
		HAL_Delay(READ_SAMPLE_INTERVAL);
 80011ca:	2032      	movs	r0, #50	; 0x32
 80011cc:	f002 fb02 	bl	80037d4 <HAL_Delay>
	for (int i = 0; i < READ_SAMPLE_TIMES; i++) {
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3301      	adds	r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b04      	cmp	r3, #4
 80011da:	dddd      	ble.n	8001198 <MQRead+0x14>

	}

	return rs / ((float) READ_SAMPLE_TIMES);  // return the average
 80011dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80011e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011e8:	eef0 7a66 	vmov.f32	s15, s13
}
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <MQGetPercentage>:

float MQGetPercentage(float *pcurve, ADC_HandleTypeDef *hadc){
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	float rs_ro_ratio = MQRead(hadc) / Ro;
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f7ff ffbe 	bl	8001184 <MQRead>
 8001208:	eef0 6a40 	vmov.f32	s13, s0
 800120c:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <MQGetPercentage+0xd0>)
 800120e:	ed93 7a00 	vldr	s14, [r3]
 8001212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001216:	edc7 7a03 	vstr	s15, [r7, #12]
    return pow(10.0, ((log(rs_ro_ratio) - pcurve[1]) / pcurve[2]) + pcurve[0]);
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f7ff f994 	bl	8000548 <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	ec43 2b10 	vmov	d0, r2, r3
 8001228:	f010 ff42 	bl	80120b0 <log>
 800122c:	ec55 4b10 	vmov	r4, r5, d0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3304      	adds	r3, #4
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f986 	bl	8000548 <__aeabi_f2d>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	f7ff f820 	bl	8000288 <__aeabi_dsub>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4614      	mov	r4, r2
 800124e:	461d      	mov	r5, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3308      	adds	r3, #8
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f976 	bl	8000548 <__aeabi_f2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff faf2 	bl	800084c <__aeabi_ddiv>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4614      	mov	r4, r2
 800126e:	461d      	mov	r5, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f967 	bl	8000548 <__aeabi_f2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4620      	mov	r0, r4
 8001280:	4629      	mov	r1, r5
 8001282:	f7ff f803 	bl	800028c <__adddf3>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	ec43 2b17 	vmov	d7, r2, r3
 800128e:	eeb0 1a47 	vmov.f32	s2, s14
 8001292:	eef0 1a67 	vmov.f32	s3, s15
 8001296:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80012c0 <MQGetPercentage+0xc8>
 800129a:	f010 ff47 	bl	801212c <pow>
 800129e:	ec53 2b10 	vmov	r2, r3, d0
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fc9f 	bl	8000be8 <__aeabi_d2f>
 80012aa:	4603      	mov	r3, r0
 80012ac:	ee07 3a90 	vmov	s15, r3
}
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	f3af 8000 	nop.w
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40240000 	.word	0x40240000
 80012c8:	20000024 	.word	0x20000024

080012cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80012dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4a06      	ldr	r2, [pc, #24]	; (80012fc <vApplicationGetIdleTaskMemory+0x30>)
 80012e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200002d8 	.word	0x200002d8
 80012fc:	20000378 	.word	0x20000378

08001300 <HAL_UART_RxCpltCallback>:
ErrorCode error = NO_ERROR_STATE; // UU

//============================= Callback section

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
    if (huart == &huart5)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_UART_RxCpltCallback+0x28>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d105      	bne.n	800131c <HAL_UART_RxCpltCallback+0x1c>
    {
        g_GnssRx_Flag = true;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_UART_RxCpltCallback+0x2c>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
        g_openFixedDataTransmition = true;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_UART_RxCpltCallback+0x30>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
    /*if (huart == &huart4)
    {
        HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
    }*/
    // HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	20001048 	.word	0x20001048
 800132c:	20000578 	.word	0x20000578
 8001330:	20000579 	.word	0x20000579

08001334 <UsrGpsL86Init>:

//============================= Initial section

void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 800133c:	f240 228a 	movw	r2, #650	; 0x28a
 8001340:	4903      	ldr	r1, [pc, #12]	; (8001350 <UsrGpsL86Init+0x1c>)
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f008 f930 	bl	80095a8 <HAL_UART_Receive_DMA>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000a58 	.word	0x20000a58

08001354 <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
    getRmc();
 800135c:	f000 f83a 	bl	80013d4 <getRmc>
    getGGA();
 8001360:	f000 f966 	bl	8001630 <getGGA>
    if (rmcValidFlag)
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <Usr_GpsL86GetValues+0x74>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <Usr_GpsL86GetValues+0x20>
    {
        rmcValidFlag = false;
 800136e:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <Usr_GpsL86GetValues+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 8001374:	f000 f8ee 	bl	8001554 <formatLatLong>

    gpsData_->lat = gpsData.lat;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <Usr_GpsL86GetValues+0x78>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <Usr_GpsL86GetValues+0x78>)
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <Usr_GpsL86GetValues+0x78>)
 800138a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
    gpsData_->speedKN = gpsData.speedKN;
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <Usr_GpsL86GetValues+0x78>)
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <Usr_GpsL86GetValues+0x78>)
 800139a:	6a1a      	ldr	r2, [r3, #32]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <Usr_GpsL86GetValues+0x78>)
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <Usr_GpsL86GetValues+0x78>)
 80013aa:	69da      	ldr	r2, [r3, #28]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <Usr_GpsL86GetValues+0x78>)
 80013b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
    UsrGpsL86Init(&huart5);
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <Usr_GpsL86GetValues+0x7c>)
 80013ba:	f7ff ffbb 	bl	8001334 <UsrGpsL86Init>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000057a 	.word	0x2000057a
 80013cc:	20000e5c 	.word	0x20000e5c
 80013d0:	20001048 	.word	0x20001048

080013d4 <getRmc>:

//============================= Statics

_io void getRmc(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af02      	add	r7, sp, #8
    if (g_GnssRx_Flag)
 80013da:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <getRmc+0x13c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 8091 	beq.w	8001508 <getRmc+0x134>
    {
        MsgIndex = 0;
 80013e6:	4b4b      	ldr	r3, [pc, #300]	; (8001514 <getRmc+0x140>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 80013ec:	494a      	ldr	r1, [pc, #296]	; (8001518 <getRmc+0x144>)
 80013ee:	484b      	ldr	r0, [pc, #300]	; (800151c <getRmc+0x148>)
 80013f0:	f00c fe91 	bl	800e116 <strcpy>
        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 80013f4:	494a      	ldr	r1, [pc, #296]	; (8001520 <getRmc+0x14c>)
 80013f6:	4849      	ldr	r0, [pc, #292]	; (800151c <getRmc+0x148>)
 80013f8:	f00c fda9 	bl	800df4e <strstr>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a49      	ldr	r2, [pc, #292]	; (8001524 <getRmc+0x150>)
 8001400:	6013      	str	r3, [r2, #0]
        if (ptr == NULL) {
 8001402:	4b48      	ldr	r3, [pc, #288]	; (8001524 <getRmc+0x150>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d107      	bne.n	800141a <getRmc+0x46>
            ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 800140a:	4947      	ldr	r1, [pc, #284]	; (8001528 <getRmc+0x154>)
 800140c:	4843      	ldr	r0, [pc, #268]	; (800151c <getRmc+0x148>)
 800140e:	f00c fd9e 	bl	800df4e <strstr>
 8001412:	4603      	mov	r3, r0
 8001414:	4a43      	ldr	r2, [pc, #268]	; (8001524 <getRmc+0x150>)
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	e002      	b.n	8001420 <getRmc+0x4c>
        } else {
        	naso = 1;
 800141a:	4b44      	ldr	r3, [pc, #272]	; (800152c <getRmc+0x158>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]
        }
        if (*ptr == 'G' && ptr != NULL)
 8001420:	4b40      	ldr	r3, [pc, #256]	; (8001524 <getRmc+0x150>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b47      	cmp	r3, #71	; 0x47
 8001428:	d16b      	bne.n	8001502 <getRmc+0x12e>
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <getRmc+0x150>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d067      	beq.n	8001502 <getRmc+0x12e>
        {
            while (1)
            {
                gpsPayload[MsgIndex] = *ptr;
 8001432:	4b3c      	ldr	r3, [pc, #240]	; (8001524 <getRmc+0x150>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4b37      	ldr	r3, [pc, #220]	; (8001514 <getRmc+0x140>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	7811      	ldrb	r1, [r2, #0]
 800143c:	4a3c      	ldr	r2, [pc, #240]	; (8001530 <getRmc+0x15c>)
 800143e:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 8001440:	4b34      	ldr	r3, [pc, #208]	; (8001514 <getRmc+0x140>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	4a33      	ldr	r2, [pc, #204]	; (8001514 <getRmc+0x140>)
 8001448:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 800144a:	4b36      	ldr	r3, [pc, #216]	; (8001524 <getRmc+0x150>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a31      	ldr	r2, [pc, #196]	; (8001514 <getRmc+0x140>)
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	441a      	add	r2, r3
 8001454:	4b33      	ldr	r3, [pc, #204]	; (8001524 <getRmc+0x150>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	701a      	strb	r2, [r3, #0]

                if (*ptr == '\n' || MsgIndex > _max_message_size)
 800145c:	4b31      	ldr	r3, [pc, #196]	; (8001524 <getRmc+0x150>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b0a      	cmp	r3, #10
 8001464:	d003      	beq.n	800146e <getRmc+0x9a>
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <getRmc+0x140>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b5a      	cmp	r3, #90	; 0x5a
 800146c:	dde1      	ble.n	8001432 <getRmc+0x5e>
                {
                    MsgIndex = 0;
 800146e:	4b29      	ldr	r3, [pc, #164]	; (8001514 <getRmc+0x140>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
                    // memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
                    //  memset(m_rxData, 0, sizeof(m_rxData));

                    for (int i = 0; i < 100; i++)
 8001474:	2300      	movs	r3, #0
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	e014      	b.n	80014a4 <getRmc+0xd0>
                    {
                        if (gpsPayload[i] == 'N')
 800147a:	4a2d      	ldr	r2, [pc, #180]	; (8001530 <getRmc+0x15c>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b4e      	cmp	r3, #78	; 0x4e
 8001484:	d102      	bne.n	800148c <getRmc+0xb8>
                            f_northFlag = true;
 8001486:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <getRmc+0x160>)
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
                        if (gpsPayload[i] == 'E')
 800148c:	4a28      	ldr	r2, [pc, #160]	; (8001530 <getRmc+0x15c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b45      	cmp	r3, #69	; 0x45
 8001496:	d102      	bne.n	800149e <getRmc+0xca>
                            f_eastFlag = true;
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <getRmc+0x164>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
                    for (int i = 0; i < 100; i++)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3301      	adds	r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b63      	cmp	r3, #99	; 0x63
 80014a8:	dde7      	ble.n	800147a <getRmc+0xa6>
                    }
                    if (strlen(gpsPayload) > 10)
 80014aa:	4821      	ldr	r0, [pc, #132]	; (8001530 <getRmc+0x15c>)
 80014ac:	f7fe fee0 	bl	8000270 <strlen>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b0a      	cmp	r3, #10
 80014b4:	d91f      	bls.n	80014f6 <getRmc+0x122>
                    {
                        if (f_eastFlag && f_northFlag)
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <getRmc+0x164>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01f      	beq.n	8001500 <getRmc+0x12c>
 80014c0:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <getRmc+0x160>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d01a      	beq.n	8001500 <getRmc+0x12c>
                        {
                            f_northFlag = false;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <getRmc+0x160>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
                            f_eastFlag = false;
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <getRmc+0x164>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <getRmc+0x168>)
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <getRmc+0x16c>)
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <getRmc+0x170>)
 80014e0:	4a19      	ldr	r2, [pc, #100]	; (8001548 <getRmc+0x174>)
 80014e2:	491a      	ldr	r1, [pc, #104]	; (800154c <getRmc+0x178>)
 80014e4:	4812      	ldr	r0, [pc, #72]	; (8001530 <getRmc+0x15c>)
 80014e6:	f00c fcb9 	bl	800de5c <siscanf>
                            rmcValidFlag = true;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <getRmc+0x17c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
                            formatLatLong();
 80014f0:	f000 f830 	bl	8001554 <formatLatLong>
                    else
                    {
                        // dataErr Log
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 80014f4:	e004      	b.n	8001500 <getRmc+0x12c>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 80014f6:	2264      	movs	r2, #100	; 0x64
 80014f8:	2100      	movs	r1, #0
 80014fa:	480d      	ldr	r0, [pc, #52]	; (8001530 <getRmc+0x15c>)
 80014fc:	f00c fd1f 	bl	800df3e <memset>
                    break;
 8001500:	bf00      	nop
                }
            }
        }
        g_GnssRx_Flag = false;
 8001502:	4b03      	ldr	r3, [pc, #12]	; (8001510 <getRmc+0x13c>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
    }
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000578 	.word	0x20000578
 8001514:	20000580 	.word	0x20000580
 8001518:	20000a58 	.word	0x20000a58
 800151c:	20000650 	.word	0x20000650
 8001520:	08013860 	.word	0x08013860
 8001524:	20000584 	.word	0x20000584
 8001528:	08013868 	.word	0x08013868
 800152c:	20000e58 	.word	0x20000e58
 8001530:	20000588 	.word	0x20000588
 8001534:	2000057b 	.word	0x2000057b
 8001538:	2000057c 	.word	0x2000057c
 800153c:	20000e64 	.word	0x20000e64
 8001540:	20000a54 	.word	0x20000a54
 8001544:	20000a50 	.word	0x20000a50
 8001548:	20000e68 	.word	0x20000e68
 800154c:	08013870 	.word	0x08013870
 8001550:	2000057a 	.word	0x2000057a

08001554 <formatLatLong>:

_io void formatLatLong(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 800155a:	4b30      	ldr	r3, [pc, #192]	; (800161c <formatLatLong+0xc8>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001564:	ee17 1a90 	vmov	r1, s15
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <formatLatLong+0xcc>)
 800156a:	fb83 2301 	smull	r2, r3, r3, r1
 800156e:	115a      	asrs	r2, r3, #5
 8001570:	17cb      	asrs	r3, r1, #31
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <formatLatLong+0xc8>)
 8001578:	ed93 7a00 	vldr	s14, [r3]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2264      	movs	r2, #100	; 0x64
 8001580:	fb02 f303 	mul.w	r3, r2, r3
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001590:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800159e:	edd7 6a00 	vldr	s13, [r7]
 80015a2:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8001624 <formatLatLong+0xd0>
 80015a6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80015aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ae:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <formatLatLong+0xd4>)
 80015b0:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <formatLatLong+0xd8>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015be:	ee17 1a90 	vmov	r1, s15
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <formatLatLong+0xcc>)
 80015c4:	fb83 2301 	smull	r2, r3, r3, r1
 80015c8:	115a      	asrs	r2, r3, #5
 80015ca:	17cb      	asrs	r3, r1, #31
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <formatLatLong+0xd8>)
 80015d2:	ed93 7a00 	vldr	s14, [r3]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2264      	movs	r2, #100	; 0x64
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ea:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f8:	edd7 6a00 	vldr	s13, [r7]
 80015fc:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8001624 <formatLatLong+0xd0>
 8001600:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <formatLatLong+0xd4>)
 800160a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000a50 	.word	0x20000a50
 8001620:	51eb851f 	.word	0x51eb851f
 8001624:	42700000 	.word	0x42700000
 8001628:	20000e5c 	.word	0x20000e5c
 800162c:	20000a54 	.word	0x20000a54

08001630 <getGGA>:

_io void getGGA(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af06      	add	r7, sp, #24
    if (g_openFixedDataTransmition)
 8001636:	4b3a      	ldr	r3, [pc, #232]	; (8001720 <getGGA+0xf0>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d06c      	beq.n	800171a <getGGA+0xea>
    {
        MsgIndex = 0;
 8001640:	4b38      	ldr	r3, [pc, #224]	; (8001724 <getGGA+0xf4>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8001646:	4938      	ldr	r1, [pc, #224]	; (8001728 <getGGA+0xf8>)
 8001648:	4838      	ldr	r0, [pc, #224]	; (800172c <getGGA+0xfc>)
 800164a:	f00c fd64 	bl	800e116 <strcpy>
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 800164e:	4938      	ldr	r1, [pc, #224]	; (8001730 <getGGA+0x100>)
 8001650:	4836      	ldr	r0, [pc, #216]	; (800172c <getGGA+0xfc>)
 8001652:	f00c fc7c 	bl	800df4e <strstr>
 8001656:	4603      	mov	r3, r0
 8001658:	4a36      	ldr	r2, [pc, #216]	; (8001734 <getGGA+0x104>)
 800165a:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 800165c:	4b35      	ldr	r3, [pc, #212]	; (8001734 <getGGA+0x104>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b47      	cmp	r3, #71	; 0x47
 8001664:	d14a      	bne.n	80016fc <getGGA+0xcc>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 8001666:	4b33      	ldr	r3, [pc, #204]	; (8001734 <getGGA+0x104>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <getGGA+0xf4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	7811      	ldrb	r1, [r2, #0]
 8001670:	4a31      	ldr	r2, [pc, #196]	; (8001738 <getGGA+0x108>)
 8001672:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 8001674:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <getGGA+0xf4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	4a2a      	ldr	r2, [pc, #168]	; (8001724 <getGGA+0xf4>)
 800167c:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 800167e:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <getGGA+0x104>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a28      	ldr	r2, [pc, #160]	; (8001724 <getGGA+0xf4>)
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	441a      	add	r2, r3
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <getGGA+0x104>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8001690:	4b28      	ldr	r3, [pc, #160]	; (8001734 <getGGA+0x104>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b0a      	cmp	r3, #10
 8001698:	d003      	beq.n	80016a2 <getGGA+0x72>
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <getGGA+0xf4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b5a      	cmp	r3, #90	; 0x5a
 80016a0:	dde1      	ble.n	8001666 <getGGA+0x36>
                {
                    MsgIndex = 0;
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <getGGA+0xf4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 80016a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ac:	2100      	movs	r1, #0
 80016ae:	481f      	ldr	r0, [pc, #124]	; (800172c <getGGA+0xfc>)
 80016b0:	f00c fc45 	bl	800df3e <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 80016b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b8:	2100      	movs	r1, #0
 80016ba:	481b      	ldr	r0, [pc, #108]	; (8001728 <getGGA+0xf8>)
 80016bc:	f00c fc3f 	bl	800df3e <memset>

                    if (strlen(gpsGGAPayload) > 10)
 80016c0:	481d      	ldr	r0, [pc, #116]	; (8001738 <getGGA+0x108>)
 80016c2:	f7fe fdd5 	bl	8000270 <strlen>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b0a      	cmp	r3, #10
 80016ca:	d912      	bls.n	80016f2 <getGGA+0xc2>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <getGGA+0x10c>)
 80016ce:	9305      	str	r3, [sp, #20]
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <getGGA+0x110>)
 80016d2:	9304      	str	r3, [sp, #16]
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <getGGA+0x114>)
 80016d6:	9303      	str	r3, [sp, #12]
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <getGGA+0x118>)
 80016da:	9302      	str	r3, [sp, #8]
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <getGGA+0x11c>)
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <getGGA+0x120>)
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <getGGA+0x124>)
 80016e6:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <getGGA+0x128>)
 80016e8:	491c      	ldr	r1, [pc, #112]	; (800175c <getGGA+0x12c>)
 80016ea:	4813      	ldr	r0, [pc, #76]	; (8001738 <getGGA+0x108>)
 80016ec:	f00c fbb6 	bl	800de5c <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 80016f0:	e004      	b.n	80016fc <getGGA+0xcc>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 80016f2:	2264      	movs	r2, #100	; 0x64
 80016f4:	2100      	movs	r1, #0
 80016f6:	481a      	ldr	r0, [pc, #104]	; (8001760 <getGGA+0x130>)
 80016f8:	f00c fc21 	bl	800df3e <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <getGGA+0xf0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
        memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 8001702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001706:	2100      	movs	r1, #0
 8001708:	4808      	ldr	r0, [pc, #32]	; (800172c <getGGA+0xfc>)
 800170a:	f00c fc18 	bl	800df3e <memset>
        memset(m_rxData, 0, sizeof(m_rxData));
 800170e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001712:	2100      	movs	r1, #0
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <getGGA+0xf8>)
 8001716:	f00c fc12 	bl	800df3e <memset>
        // UsrGpsL86Init(&huart2);
    }
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000579 	.word	0x20000579
 8001724:	20000580 	.word	0x20000580
 8001728:	20000a58 	.word	0x20000a58
 800172c:	20000650 	.word	0x20000650
 8001730:	08013868 	.word	0x08013868
 8001734:	20000584 	.word	0x20000584
 8001738:	200005ec 	.word	0x200005ec
 800173c:	20000e88 	.word	0x20000e88
 8001740:	20000e84 	.word	0x20000e84
 8001744:	20000e80 	.word	0x20000e80
 8001748:	20000e7c 	.word	0x20000e7c
 800174c:	20000e78 	.word	0x20000e78
 8001750:	20000e74 	.word	0x20000e74
 8001754:	20000e70 	.word	0x20000e70
 8001758:	20000e6c 	.word	0x20000e6c
 800175c:	0801388c 	.word	0x0801388c
 8001760:	20000588 	.word	0x20000588

08001764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176a:	f001 fff3 	bl	8003754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176e:	f000 f877 	bl	8001860 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001772:	f000 f8c6 	bl	8001902 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001776:	f000 fbbb 	bl	8001ef0 <MX_GPIO_Init>
  MX_DMA_Init();
 800177a:	f000 fb9b 	bl	8001eb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800177e:	f000 fb39 	bl	8001df4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001782:	f000 f9c3 	bl	8001b0c <MX_I2C2_Init>
  MX_ADC1_Init();
 8001786:	f000 f8e7 	bl	8001958 <MX_ADC1_Init>
  MX_I2C3_Init();
 800178a:	f000 f9ff 	bl	8001b8c <MX_I2C3_Init>
  MX_UART5_Init();
 800178e:	f000 fad1 	bl	8001d34 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001792:	f000 fb5f 	bl	8001e54 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001796:	f000 fa39 	bl	8001c0c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800179a:	f000 fafb 	bl	8001d94 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 800179e:	f000 f951 	bl	8001a44 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
  MPU6050_Init(&hi2c3);
 80017a2:	4822      	ldr	r0, [pc, #136]	; (800182c <main+0xc8>)
 80017a4:	f000 fe71 	bl	800248a <MPU6050_Init>
  UsrGpsL86Init(&huart5);
 80017a8:	4821      	ldr	r0, [pc, #132]	; (8001830 <main+0xcc>)
 80017aa:	f7ff fdc3 	bl	8001334 <UsrGpsL86Init>
  /* ------ QUEUE RELATED ------ */
  Queue_Handler = xQueueCreate(2,sizeof(data));
 80017ae:	2200      	movs	r2, #0
 80017b0:	2140      	movs	r1, #64	; 0x40
 80017b2:	2002      	movs	r0, #2
 80017b4:	f009 fa68 	bl	800ac88 <xQueueGenericCreate>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4a1e      	ldr	r2, [pc, #120]	; (8001834 <main+0xd0>)
 80017bc:	6013      	str	r3, [r2, #0]
  if (Queue_Handler == NULL) {
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <main+0xd0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <main+0x66>

      Error_Handler();
 80017c6:	f000 fe5b 	bl	8002480 <Error_Handler>
  }

  /* ------ TASK RELATED ------ */
  xTaskCreate(measurements_task, "measure", 1024, NULL, 3, &Measurements_Handler);
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <main+0xd4>)
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	2303      	movs	r3, #3
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d8:	4918      	ldr	r1, [pc, #96]	; (800183c <main+0xd8>)
 80017da:	4819      	ldr	r0, [pc, #100]	; (8001840 <main+0xdc>)
 80017dc:	f009 ffab 	bl	800b736 <xTaskCreate>
  xTaskCreate(sender_task, "send data", 128, NULL, 2, &Sender_Handler);
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <main+0xe0>)
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	2302      	movs	r3, #2
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2300      	movs	r3, #0
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	4916      	ldr	r1, [pc, #88]	; (8001848 <main+0xe4>)
 80017ee:	4817      	ldr	r0, [pc, #92]	; (800184c <main+0xe8>)
 80017f0:	f009 ffa1 	bl	800b736 <xTaskCreate>
  xTaskCreate(LED_task, "toggle LED", 128, NULL, 1, &LED_Handler);
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <main+0xec>)
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	2301      	movs	r3, #1
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2300      	movs	r3, #0
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	4914      	ldr	r1, [pc, #80]	; (8001854 <main+0xf0>)
 8001802:	4815      	ldr	r0, [pc, #84]	; (8001858 <main+0xf4>)
 8001804:	f009 ff97 	bl	800b736 <xTaskCreate>


  /* ------ SEMAPHORE/MUTEX RELATED ------ */
  PWM_Sem_Handler = xSemaphoreCreateBinary();
 8001808:	2203      	movs	r2, #3
 800180a:	2100      	movs	r1, #0
 800180c:	2001      	movs	r0, #1
 800180e:	f009 fa3b 	bl	800ac88 <xQueueGenericCreate>
 8001812:	4603      	mov	r3, r0
 8001814:	4a11      	ldr	r2, [pc, #68]	; (800185c <main+0xf8>)
 8001816:	6013      	str	r3, [r2, #0]
  if (PWM_Sem_Handler == NULL) {
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <main+0xf8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <main+0xc0>

        Error_Handler();
 8001820:	f000 fe2e 	bl	8002480 <Error_Handler>
    }

  vTaskStartScheduler();
 8001824:	f00a f910 	bl	800ba48 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001828:	e7fe      	b.n	8001828 <main+0xc4>
 800182a:	bf00      	nop
 800182c:	20000fa8 	.word	0x20000fa8
 8001830:	20001048 	.word	0x20001048
 8001834:	200013e8 	.word	0x200013e8
 8001838:	200013dc 	.word	0x200013dc
 800183c:	080138b4 	.word	0x080138b4
 8001840:	08002055 	.word	0x08002055
 8001844:	200013e0 	.word	0x200013e0
 8001848:	080138bc 	.word	0x080138bc
 800184c:	080022d9 	.word	0x080022d9
 8001850:	200013e4 	.word	0x200013e4
 8001854:	080138c8 	.word	0x080138c8
 8001858:	0800233d 	.word	0x0800233d
 800185c:	200013ec 	.word	0x200013ec

08001860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b096      	sub	sp, #88	; 0x58
 8001864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	2244      	movs	r2, #68	; 0x44
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f00c fb65 	bl	800df3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001874:	463b      	mov	r3, r7
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001882:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001886:	f005 f987 	bl	8006b98 <HAL_PWREx_ControlVoltageScaling>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001890:	f000 fdf6 	bl	8002480 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001894:	2302      	movs	r3, #2
 8001896:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800189c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189e:	2310      	movs	r3, #16
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a2:	2302      	movs	r3, #2
 80018a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a6:	2302      	movs	r3, #2
 80018a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80018ae:	230a      	movs	r3, #10
 80018b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018b2:	2307      	movs	r3, #7
 80018b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4618      	mov	r0, r3
 80018c4:	f005 f9be 	bl	8006c44 <HAL_RCC_OscConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80018ce:	f000 fdd7 	bl	8002480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d2:	230f      	movs	r3, #15
 80018d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d6:	2303      	movs	r3, #3
 80018d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018e6:	463b      	mov	r3, r7
 80018e8:	2104      	movs	r1, #4
 80018ea:	4618      	mov	r0, r3
 80018ec:	f005 fd86 	bl	80073fc <HAL_RCC_ClockConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018f6:	f000 fdc3 	bl	8002480 <Error_Handler>
  }
}
 80018fa:	bf00      	nop
 80018fc:	3758      	adds	r7, #88	; 0x58
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b0a2      	sub	sp, #136	; 0x88
 8001906:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001908:	463b      	mov	r3, r7
 800190a:	2288      	movs	r2, #136	; 0x88
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f00c fb15 	bl	800df3e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001914:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001918:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800191a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800191e:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001920:	2302      	movs	r3, #2
 8001922:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001924:	2301      	movs	r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001928:	2308      	movs	r3, #8
 800192a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800192c:	2307      	movs	r3, #7
 800192e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001930:	2302      	movs	r3, #2
 8001932:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001934:	2302      	movs	r3, #2
 8001936:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001938:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800193c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800193e:	463b      	mov	r3, r7
 8001940:	4618      	mov	r0, r3
 8001942:	f005 ffb1 	bl	80078a8 <HAL_RCCEx_PeriphCLKConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800194c:	f000 fd98 	bl	8002480 <Error_Handler>
  }
}
 8001950:	bf00      	nop
 8001952:	3788      	adds	r7, #136	; 0x88
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800197a:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <MX_ADC1_Init+0xe0>)
 800197c:	4a2f      	ldr	r2, [pc, #188]	; (8001a3c <MX_ADC1_Init+0xe4>)
 800197e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <MX_ADC1_Init+0xe0>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001986:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <MX_ADC1_Init+0xe0>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <MX_ADC1_Init+0xe0>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001992:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <MX_ADC1_Init+0xe0>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <MX_ADC1_Init+0xe0>)
 800199a:	2204      	movs	r2, #4
 800199c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019aa:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019da:	4817      	ldr	r0, [pc, #92]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019dc:	f002 f950 	bl	8003c80 <HAL_ADC_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80019e6:	f000 fd4b 	bl	8002480 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	4810      	ldr	r0, [pc, #64]	; (8001a38 <MX_ADC1_Init+0xe0>)
 80019f6:	f003 fa21 	bl	8004e3c <HAL_ADCEx_MultiModeConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001a00:	f000 fd3e 	bl	8002480 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_ADC1_Init+0xe8>)
 8001a06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a08:	2306      	movs	r3, #6
 8001a0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a10:	237f      	movs	r3, #127	; 0x7f
 8001a12:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a14:	2304      	movs	r3, #4
 8001a16:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_ADC1_Init+0xe0>)
 8001a22:	f002 fc51 	bl	80042c8 <HAL_ADC_ConfigChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001a2c:	f000 fd28 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	; 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000e8c 	.word	0x20000e8c
 8001a3c:	50040000 	.word	0x50040000
 8001a40:	43210000 	.word	0x43210000

08001a44 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
 8001a58:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001a5a:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001a5c:	4a29      	ldr	r2, [pc, #164]	; (8001b04 <MX_ADC2_Init+0xc0>)
 8001a5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a84:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001aba:	4811      	ldr	r0, [pc, #68]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001abc:	f002 f8e0 	bl	8003c80 <HAL_ADC_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001ac6:	f000 fcdb 	bl	8002480 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_ADC2_Init+0xc4>)
 8001acc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ace:	2306      	movs	r3, #6
 8001ad0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ad6:	237f      	movs	r3, #127	; 0x7f
 8001ad8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ada:	2304      	movs	r3, #4
 8001adc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	; (8001b00 <MX_ADC2_Init+0xbc>)
 8001ae8:	f002 fbee 	bl	80042c8 <HAL_ADC_ConfigChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8001af2:	f000 fcc5 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000ef0 	.word	0x20000ef0
 8001b04:	50040100 	.word	0x50040100
 8001b08:	3ac04000 	.word	0x3ac04000

08001b0c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <MX_I2C2_Init+0x74>)
 8001b12:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <MX_I2C2_Init+0x78>)
 8001b14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_I2C2_Init+0x74>)
 8001b18:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <MX_I2C2_Init+0x7c>)
 8001b1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b1c:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <MX_I2C2_Init+0x74>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_I2C2_Init+0x74>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_I2C2_Init+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_I2C2_Init+0x74>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <MX_I2C2_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_I2C2_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_I2C2_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b46:	480e      	ldr	r0, [pc, #56]	; (8001b80 <MX_I2C2_Init+0x74>)
 8001b48:	f003 ff5a 	bl	8005a00 <HAL_I2C_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b52:	f000 fc95 	bl	8002480 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b56:	2100      	movs	r1, #0
 8001b58:	4809      	ldr	r0, [pc, #36]	; (8001b80 <MX_I2C2_Init+0x74>)
 8001b5a:	f004 ff77 	bl	8006a4c <HAL_I2CEx_ConfigAnalogFilter>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b64:	f000 fc8c 	bl	8002480 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_I2C2_Init+0x74>)
 8001b6c:	f004 ffb9 	bl	8006ae2 <HAL_I2CEx_ConfigDigitalFilter>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b76:	f000 fc83 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000f54 	.word	0x20000f54
 8001b84:	40005800 	.word	0x40005800
 8001b88:	10909cec 	.word	0x10909cec

08001b8c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <MX_I2C3_Init+0x74>)
 8001b92:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <MX_I2C3_Init+0x78>)
 8001b94:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00702991;
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <MX_I2C3_Init+0x74>)
 8001b98:	4a1b      	ldr	r2, [pc, #108]	; (8001c08 <MX_I2C3_Init+0x7c>)
 8001b9a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <MX_I2C3_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_I2C3_Init+0x74>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <MX_I2C3_Init+0x74>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_I2C3_Init+0x74>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_I2C3_Init+0x74>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_I2C3_Init+0x74>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_I2C3_Init+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001bc6:	480e      	ldr	r0, [pc, #56]	; (8001c00 <MX_I2C3_Init+0x74>)
 8001bc8:	f003 ff1a 	bl	8005a00 <HAL_I2C_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001bd2:	f000 fc55 	bl	8002480 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4809      	ldr	r0, [pc, #36]	; (8001c00 <MX_I2C3_Init+0x74>)
 8001bda:	f004 ff37 	bl	8006a4c <HAL_I2CEx_ConfigAnalogFilter>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001be4:	f000 fc4c 	bl	8002480 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001be8:	2100      	movs	r1, #0
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_I2C3_Init+0x74>)
 8001bec:	f004 ff79 	bl	8006ae2 <HAL_I2CEx_ConfigDigitalFilter>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001bf6:	f000 fc43 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000fa8 	.word	0x20000fa8
 8001c04:	40005c00 	.word	0x40005c00
 8001c08:	00702991 	.word	0x00702991

08001c0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b096      	sub	sp, #88	; 0x58
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]
 8001c2e:	615a      	str	r2, [r3, #20]
 8001c30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	222c      	movs	r2, #44	; 0x2c
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f00c f980 	bl	800df3e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <MX_TIM1_Init+0x120>)
 8001c40:	4a3b      	ldr	r2, [pc, #236]	; (8001d30 <MX_TIM1_Init+0x124>)
 8001c42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c44:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <MX_TIM1_Init+0x120>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4a:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <MX_TIM1_Init+0x120>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c50:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <MX_TIM1_Init+0x120>)
 8001c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c58:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <MX_TIM1_Init+0x120>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c5e:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <MX_TIM1_Init+0x120>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c64:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <MX_TIM1_Init+0x120>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c6a:	4830      	ldr	r0, [pc, #192]	; (8001d2c <MX_TIM1_Init+0x120>)
 8001c6c:	f006 fbaa 	bl	80083c4 <HAL_TIM_PWM_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001c76:	f000 fc03 	bl	8002480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4827      	ldr	r0, [pc, #156]	; (8001d2c <MX_TIM1_Init+0x120>)
 8001c8e:	f007 fa69 	bl	8009164 <HAL_TIMEx_MasterConfigSynchronization>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c98:	f000 fbf2 	bl	8002480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c9c:	2360      	movs	r3, #96	; 0x60
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	481a      	ldr	r0, [pc, #104]	; (8001d2c <MX_TIM1_Init+0x120>)
 8001cc2:	f006 fcdd 	bl	8008680 <HAL_TIM_PWM_ConfigChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ccc:	f000 fbd8 	bl	8002480 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4809      	ldr	r0, [pc, #36]	; (8001d2c <MX_TIM1_Init+0x120>)
 8001d06:	f007 fab5 	bl	8009274 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001d10:	f000 fbb6 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001d14:	2100      	movs	r1, #0
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_TIM1_Init+0x120>)
 8001d18:	f007 f96a 	bl	8008ff0 <HAL_TIMEx_PWMN_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d1c:	4803      	ldr	r0, [pc, #12]	; (8001d2c <MX_TIM1_Init+0x120>)
 8001d1e:	f001 f9a5 	bl	800306c <HAL_TIM_MspPostInit>

}
 8001d22:	bf00      	nop
 8001d24:	3758      	adds	r7, #88	; 0x58
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000ffc 	.word	0x20000ffc
 8001d30:	40012c00 	.word	0x40012c00

08001d34 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MX_UART5_Init+0x58>)
 8001d3a:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <MX_UART5_Init+0x5c>)
 8001d3c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <MX_UART5_Init+0x58>)
 8001d40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d44:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_UART5_Init+0x58>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_UART5_Init+0x58>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_UART5_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_UART5_Init+0x58>)
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_UART5_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_UART5_Init+0x58>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <MX_UART5_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_UART5_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_UART5_Init+0x58>)
 8001d78:	f007 fb3d 	bl	80093f6 <HAL_UART_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001d82:	f000 fb7d 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20001048 	.word	0x20001048
 8001d90:	40005000 	.word	0x40005000

08001d94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <MX_USART1_UART_Init+0x58>)
 8001d9a:	4a15      	ldr	r2, [pc, #84]	; (8001df0 <MX_USART1_UART_Init+0x5c>)
 8001d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <MX_USART1_UART_Init+0x58>)
 8001da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <MX_USART1_UART_Init+0x58>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <MX_USART1_UART_Init+0x58>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <MX_USART1_UART_Init+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <MX_USART1_UART_Init+0x58>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <MX_USART1_UART_Init+0x58>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <MX_USART1_UART_Init+0x58>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <MX_USART1_UART_Init+0x58>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <MX_USART1_UART_Init+0x58>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_USART1_UART_Init+0x58>)
 8001dd8:	f007 fb0d 	bl	80093f6 <HAL_UART_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001de2:	f000 fb4d 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200010d0 	.word	0x200010d0
 8001df0:	40013800 	.word	0x40013800

08001df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001dfa:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <MX_USART2_UART_Init+0x5c>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e36:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_USART2_UART_Init+0x58>)
 8001e38:	f007 fadd 	bl	80093f6 <HAL_UART_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e42:	f000 fb1d 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20001158 	.word	0x20001158
 8001e50:	40004400 	.word	0x40004400

08001e54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <MX_USART3_UART_Init+0x58>)
 8001e5a:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <MX_USART3_UART_Init+0x5c>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <MX_USART3_UART_Init+0x58>)
 8001e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <MX_USART3_UART_Init+0x58>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <MX_USART3_UART_Init+0x58>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <MX_USART3_UART_Init+0x58>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <MX_USART3_UART_Init+0x58>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <MX_USART3_UART_Init+0x58>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <MX_USART3_UART_Init+0x58>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <MX_USART3_UART_Init+0x58>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <MX_USART3_UART_Init+0x58>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e96:	4805      	ldr	r0, [pc, #20]	; (8001eac <MX_USART3_UART_Init+0x58>)
 8001e98:	f007 faad 	bl	80093f6 <HAL_UART_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ea2:	f000 faed 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200011e0 	.word	0x200011e0
 8001eb0:	40004800 	.word	0x40004800

08001eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MX_DMA_Init+0x38>)
 8001ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ebe:	4a0b      	ldr	r2, [pc, #44]	; (8001eec <MX_DMA_Init+0x38>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6493      	str	r3, [r2, #72]	; 0x48
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MX_DMA_Init+0x38>)
 8001ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2105      	movs	r1, #5
 8001ed6:	2039      	movs	r0, #57	; 0x39
 8001ed8:	f003 f918 	bl	800510c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001edc:	2039      	movs	r0, #57	; 0x39
 8001ede:	f003 f931 	bl	8005144 <HAL_NVIC_EnableIRQ>

}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000

08001ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f06:	4b50      	ldr	r3, [pc, #320]	; (8002048 <MX_GPIO_Init+0x158>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	4a4f      	ldr	r2, [pc, #316]	; (8002048 <MX_GPIO_Init+0x158>)
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f12:	4b4d      	ldr	r3, [pc, #308]	; (8002048 <MX_GPIO_Init+0x158>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f1e:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <MX_GPIO_Init+0x158>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	4a49      	ldr	r2, [pc, #292]	; (8002048 <MX_GPIO_Init+0x158>)
 8001f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f2a:	4b47      	ldr	r3, [pc, #284]	; (8002048 <MX_GPIO_Init+0x158>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	4b44      	ldr	r3, [pc, #272]	; (8002048 <MX_GPIO_Init+0x158>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	4a43      	ldr	r2, [pc, #268]	; (8002048 <MX_GPIO_Init+0x158>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <MX_GPIO_Init+0x158>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <MX_GPIO_Init+0x158>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	4a3d      	ldr	r2, [pc, #244]	; (8002048 <MX_GPIO_Init+0x158>)
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5a:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <MX_GPIO_Init+0x158>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f66:	4b38      	ldr	r3, [pc, #224]	; (8002048 <MX_GPIO_Init+0x158>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	4a37      	ldr	r2, [pc, #220]	; (8002048 <MX_GPIO_Init+0x158>)
 8001f6c:	f043 0308 	orr.w	r3, r3, #8
 8001f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f72:	4b35      	ldr	r3, [pc, #212]	; (8002048 <MX_GPIO_Init+0x158>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAT_FULL_GPIO_Port, BAT_FULL_Pin, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2104      	movs	r1, #4
 8001f82:	4832      	ldr	r0, [pc, #200]	; (800204c <MX_GPIO_Init+0x15c>)
 8001f84:	f003 fd0c 	bl	80059a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_12|BAT_LOW_Pin, GPIO_PIN_RESET);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f249 0120 	movw	r1, #36896	; 0x9020
 8001f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f92:	f003 fd05 	bl	80059a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOST_ENABLE_GPIO_Port, BOOST_ENABLE_Pin, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f9c:	482c      	ldr	r0, [pc, #176]	; (8002050 <MX_GPIO_Init+0x160>)
 8001f9e:	f003 fcff 	bl	80059a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fa8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4824      	ldr	r0, [pc, #144]	; (800204c <MX_GPIO_Init+0x15c>)
 8001fba:	f003 fb47 	bl	800564c <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_FULL_Pin */
  GPIO_InitStruct.Pin = BAT_FULL_Pin;
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BAT_FULL_GPIO_Port, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	481d      	ldr	r0, [pc, #116]	; (800204c <MX_GPIO_Init+0x15c>)
 8001fd6:	f003 fb39 	bl	800564c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA12 BAT_LOW_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_12|BAT_LOW_Pin;
 8001fda:	f249 0320 	movw	r3, #36896	; 0x9020
 8001fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff6:	f003 fb29 	bl	800564c <HAL_GPIO_Init>

  /*Configure GPIO pin : GAS_D_Pin */
  GPIO_InitStruct.Pin = GAS_D_Pin;
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GAS_D_GPIO_Port, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	4810      	ldr	r0, [pc, #64]	; (8002050 <MX_GPIO_Init+0x160>)
 800200e:	f003 fb1d 	bl	800564c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOST_ENABLE_Pin */
  GPIO_InitStruct.Pin = BOOST_ENABLE_Pin;
 8002012:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002018:	2301      	movs	r3, #1
 800201a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002020:	2300      	movs	r3, #0
 8002022:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BOOST_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4619      	mov	r1, r3
 800202a:	4809      	ldr	r0, [pc, #36]	; (8002050 <MX_GPIO_Init+0x160>)
 800202c:	f003 fb0e 	bl	800564c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002030:	2200      	movs	r2, #0
 8002032:	2105      	movs	r1, #5
 8002034:	2028      	movs	r0, #40	; 0x28
 8002036:	f003 f869 	bl	800510c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800203a:	2028      	movs	r0, #40	; 0x28
 800203c:	f003 f882 	bl	8005144 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002040:	bf00      	nop
 8002042:	3728      	adds	r7, #40	; 0x28
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000
 800204c:	48000800 	.word	0x48000800
 8002050:	48000400 	.word	0x48000400

08002054 <measurements_task>:

/* USER CODE BEGIN 4 */
	void measurements_task(void *pvParameters){
 8002054:	b580      	push	{r7, lr}
 8002056:	ed2d 8b02 	vpush	{d8}
 800205a:	b09c      	sub	sp, #112	; 0x70
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
		while(1)
		{
			shtc3_perform_measurements(&hi2c2, &temp, &hum);
 8002060:	4a88      	ldr	r2, [pc, #544]	; (8002284 <measurements_task+0x230>)
 8002062:	4989      	ldr	r1, [pc, #548]	; (8002288 <measurements_task+0x234>)
 8002064:	4889      	ldr	r0, [pc, #548]	; (800228c <measurements_task+0x238>)
 8002066:	f000 fe81 	bl	8002d6c <shtc3_perform_measurements>

			MPU6050_Read_All(&hi2c3, &imuData);
 800206a:	4989      	ldr	r1, [pc, #548]	; (8002290 <measurements_task+0x23c>)
 800206c:	4889      	ldr	r0, [pc, #548]	; (8002294 <measurements_task+0x240>)
 800206e:	f000 fa63 	bl	8002538 <MPU6050_Read_All>

			Usr_GpsL86GetValues(&gpsData);
 8002072:	4889      	ldr	r0, [pc, #548]	; (8002298 <measurements_task+0x244>)
 8002074:	f7ff f96e 	bl	8001354 <Usr_GpsL86GetValues>
			//begin(&hadc1);

			measuredData.lpg = readLPG(&hadc1);
 8002078:	4888      	ldr	r0, [pc, #544]	; (800229c <measurements_task+0x248>)
 800207a:	f7fe ffcd 	bl	8001018 <readLPG>
 800207e:	eef0 7a40 	vmov.f32	s15, s0
 8002082:	4b87      	ldr	r3, [pc, #540]	; (80022a0 <measurements_task+0x24c>)
 8002084:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			measuredData.smoke = readSmoke(&hadc1);
 8002088:	4884      	ldr	r0, [pc, #528]	; (800229c <measurements_task+0x248>)
 800208a:	f7ff f811 	bl	80010b0 <readSmoke>
 800208e:	eef0 7a40 	vmov.f32	s15, s0
 8002092:	4b83      	ldr	r3, [pc, #524]	; (80022a0 <measurements_task+0x24c>)
 8002094:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			measuredData.co = readCO(&hadc1);
 8002098:	4880      	ldr	r0, [pc, #512]	; (800229c <measurements_task+0x248>)
 800209a:	f7fe ffe3 	bl	8001064 <readCO>
 800209e:	eef0 7a40 	vmov.f32	s15, s0
 80020a2:	4b7f      	ldr	r3, [pc, #508]	; (80022a0 <measurements_task+0x24c>)
 80020a4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			measuredData.humidity = hum;
 80020a8:	4b76      	ldr	r3, [pc, #472]	; (8002284 <measurements_task+0x230>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a7c      	ldr	r2, [pc, #496]	; (80022a0 <measurements_task+0x24c>)
 80020ae:	6053      	str	r3, [r2, #4]
			measuredData.temperature = temp;
 80020b0:	4b75      	ldr	r3, [pc, #468]	; (8002288 <measurements_task+0x234>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a7a      	ldr	r2, [pc, #488]	; (80022a0 <measurements_task+0x24c>)
 80020b6:	6013      	str	r3, [r2, #0]
			measuredData.accelX = imuData.Ax;
 80020b8:	4b75      	ldr	r3, [pc, #468]	; (8002290 <measurements_task+0x23c>)
 80020ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020be:	4978      	ldr	r1, [pc, #480]	; (80022a0 <measurements_task+0x24c>)
 80020c0:	e9c1 2306 	strd	r2, r3, [r1, #24]
			measuredData.accelY = imuData.Ay;
 80020c4:	4b72      	ldr	r3, [pc, #456]	; (8002290 <measurements_task+0x23c>)
 80020c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020ca:	4975      	ldr	r1, [pc, #468]	; (80022a0 <measurements_task+0x24c>)
 80020cc:	e9c1 2308 	strd	r2, r3, [r1, #32]
			measuredData.accelZ = imuData.Az;
 80020d0:	4b6f      	ldr	r3, [pc, #444]	; (8002290 <measurements_task+0x23c>)
 80020d2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80020d6:	4972      	ldr	r1, [pc, #456]	; (80022a0 <measurements_task+0x24c>)
 80020d8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			measuredData.latitude = gpsData.lat;
 80020dc:	4b6e      	ldr	r3, [pc, #440]	; (8002298 <measurements_task+0x244>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a6f      	ldr	r2, [pc, #444]	; (80022a0 <measurements_task+0x24c>)
 80020e2:	6093      	str	r3, [r2, #8]
			measuredData.longitude = gpsData.lon;
 80020e4:	4b6c      	ldr	r3, [pc, #432]	; (8002298 <measurements_task+0x244>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4a6d      	ldr	r2, [pc, #436]	; (80022a0 <measurements_task+0x24c>)
 80020ea:	60d3      	str	r3, [r2, #12]
			measuredData.altitude = gpsData.altitudeInMeter;
 80020ec:	4b6a      	ldr	r3, [pc, #424]	; (8002298 <measurements_task+0x244>)
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	4a6b      	ldr	r2, [pc, #428]	; (80022a0 <measurements_task+0x24c>)
 80020f2:	6113      	str	r3, [r2, #16]
			measuredData.time = gpsData.fixedTime;
 80020f4:	4b68      	ldr	r3, [pc, #416]	; (8002298 <measurements_task+0x244>)
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	4a69      	ldr	r2, [pc, #420]	; (80022a0 <measurements_task+0x24c>)
 80020fa:	6153      	str	r3, [r2, #20]
			accx = measuredData.accelZ;
 80020fc:	4b68      	ldr	r3, [pc, #416]	; (80022a0 <measurements_task+0x24c>)
 80020fe:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fd6f 	bl	8000be8 <__aeabi_d2f>
 800210a:	4603      	mov	r3, r0
 800210c:	4a65      	ldr	r2, [pc, #404]	; (80022a4 <measurements_task+0x250>)
 800210e:	6013      	str	r3, [r2, #0]
			/*HAL_ADC_Start(&hadc2);
			HAL_ADC_PollForConversion(&hadc2, 100);
			measuredData.batStatus = (HAL_ADC_GetValue(&hadc2)*batMaxVoltage)/4095;
			HAL_ADC_Stop(&hadc2);*/

			accel = sqrt(square(imuData.Ax) + square(imuData.Ay) + square(imuData.Az));
 8002110:	4b5f      	ldr	r3, [pc, #380]	; (8002290 <measurements_task+0x23c>)
 8002112:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f7fe fd65 	bl	8000be8 <__aeabi_d2f>
 800211e:	4603      	mov	r3, r0
 8002120:	ee00 3a10 	vmov	s0, r3
 8002124:	f000 f98a 	bl	800243c <square>
 8002128:	eeb0 8a40 	vmov.f32	s16, s0
 800212c:	4b58      	ldr	r3, [pc, #352]	; (8002290 <measurements_task+0x23c>)
 800212e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002132:	4610      	mov	r0, r2
 8002134:	4619      	mov	r1, r3
 8002136:	f7fe fd57 	bl	8000be8 <__aeabi_d2f>
 800213a:	4603      	mov	r3, r0
 800213c:	ee00 3a10 	vmov	s0, r3
 8002140:	f000 f97c 	bl	800243c <square>
 8002144:	eef0 7a40 	vmov.f32	s15, s0
 8002148:	ee38 8a27 	vadd.f32	s16, s16, s15
 800214c:	4b50      	ldr	r3, [pc, #320]	; (8002290 <measurements_task+0x23c>)
 800214e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	f7fe fd47 	bl	8000be8 <__aeabi_d2f>
 800215a:	4603      	mov	r3, r0
 800215c:	ee00 3a10 	vmov	s0, r3
 8002160:	f000 f96c 	bl	800243c <square>
 8002164:	eef0 7a40 	vmov.f32	s15, s0
 8002168:	ee78 7a27 	vadd.f32	s15, s16, s15
 800216c:	ee17 0a90 	vmov	r0, s15
 8002170:	f7fe f9ea 	bl	8000548 <__aeabi_f2d>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	ec43 2b10 	vmov	d0, r2, r3
 800217c:	f010 f846 	bl	801220c <sqrt>
 8002180:	ec53 2b10 	vmov	r2, r3, d0
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f7fe fd2e 	bl	8000be8 <__aeabi_d2f>
 800218c:	4603      	mov	r3, r0
 800218e:	4a46      	ldr	r2, [pc, #280]	; (80022a8 <measurements_task+0x254>)
 8002190:	6013      	str	r3, [r2, #0]
			if (accel >= 2.0){
 8002192:	4b45      	ldr	r3, [pc, #276]	; (80022a8 <measurements_task+0x254>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800219c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a4:	db12      	blt.n	80021cc <measurements_task+0x178>
				char buffer[100];
				sprintf(buffer, "HIT DETECTED \n");
 80021a6:	f107 0308 	add.w	r3, r7, #8
 80021aa:	4940      	ldr	r1, [pc, #256]	; (80022ac <measurements_task+0x258>)
 80021ac:	4618      	mov	r0, r3
 80021ae:	f00b fe35 	bl	800de1c <siprintf>
				HAL_UART_Transmit(&huart3,(uint8_t*)buffer, strlen(buffer), 50);
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe f85a 	bl	8000270 <strlen>
 80021bc:	4603      	mov	r3, r0
 80021be:	b29a      	uxth	r2, r3
 80021c0:	f107 0108 	add.w	r1, r7, #8
 80021c4:	2332      	movs	r3, #50	; 0x32
 80021c6:	483a      	ldr	r0, [pc, #232]	; (80022b0 <measurements_task+0x25c>)
 80021c8:	f007 f963 	bl	8009492 <HAL_UART_Transmit>
			}

			if (measuredData.batStatus <= voltageThreshold){
 80021cc:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <measurements_task+0x24c>)
 80021ce:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80021d2:	4b38      	ldr	r3, [pc, #224]	; (80022b4 <measurements_task+0x260>)
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e0:	d812      	bhi.n	8002208 <measurements_task+0x1b4>
				char buffer[100];
				sprintf(buffer,"10 \n");
 80021e2:	f107 0308 	add.w	r3, r7, #8
 80021e6:	4934      	ldr	r1, [pc, #208]	; (80022b8 <measurements_task+0x264>)
 80021e8:	4618      	mov	r0, r3
 80021ea:	f00b fe17 	bl	800de1c <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer), 50);
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f83c 	bl	8000270 <strlen>
 80021f8:	4603      	mov	r3, r0
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	f107 0108 	add.w	r1, r7, #8
 8002200:	2332      	movs	r3, #50	; 0x32
 8002202:	482e      	ldr	r0, [pc, #184]	; (80022bc <measurements_task+0x268>)
 8002204:	f007 f945 	bl	8009492 <HAL_UART_Transmit>
			}

			if (measuredData.batStatus >= batMaxVoltage){
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <measurements_task+0x24c>)
 800220a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <measurements_task+0x26c>)
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221c:	db12      	blt.n	8002244 <measurements_task+0x1f0>
				char buffer[100];
				sprintf(buffer,"20 \n");
 800221e:	f107 0308 	add.w	r3, r7, #8
 8002222:	4928      	ldr	r1, [pc, #160]	; (80022c4 <measurements_task+0x270>)
 8002224:	4618      	mov	r0, r3
 8002226:	f00b fdf9 	bl	800de1c <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer), 50);
 800222a:	f107 0308 	add.w	r3, r7, #8
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f81e 	bl	8000270 <strlen>
 8002234:	4603      	mov	r3, r0
 8002236:	b29a      	uxth	r2, r3
 8002238:	f107 0108 	add.w	r1, r7, #8
 800223c:	2332      	movs	r3, #50	; 0x32
 800223e:	481f      	ldr	r0, [pc, #124]	; (80022bc <measurements_task+0x268>)
 8002240:	f007 f927 	bl	8009492 <HAL_UART_Transmit>
			}

			unsigned long currentTime =  xTaskGetTickCount();
 8002244:	f009 fd14 	bl	800bc70 <xTaskGetTickCount>
 8002248:	66f8      	str	r0, [r7, #108]	; 0x6c

			if( currentTime - lastSendTime >= sendInterval){
 800224a:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <measurements_task+0x274>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002250:	1ad2      	subs	r2, r2, r3
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <measurements_task+0x278>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d30a      	bcc.n	8002270 <measurements_task+0x21c>
			xQueueSend(Queue_Handler,&measuredData,portMAX_DELAY);
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <measurements_task+0x27c>)
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	2300      	movs	r3, #0
 8002260:	f04f 32ff 	mov.w	r2, #4294967295
 8002264:	490e      	ldr	r1, [pc, #56]	; (80022a0 <measurements_task+0x24c>)
 8002266:	f008 fd69 	bl	800ad3c <xQueueGenericSend>
			lastSendTime = currentTime;
 800226a:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <measurements_task+0x274>)
 800226c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226e:	6013      	str	r3, [r2, #0]
			}
			watermark = uxTaskGetStackHighWaterMark(NULL);
 8002270:	2000      	movs	r0, #0
 8002272:	f009 ffd3 	bl	800c21c <uxTaskGetStackHighWaterMark>
 8002276:	4603      	mov	r3, r0
 8002278:	4a16      	ldr	r2, [pc, #88]	; (80022d4 <measurements_task+0x280>)
 800227a:	6013      	str	r3, [r2, #0]
			vTaskDelay(pdMS_TO_TICKS(20));
 800227c:	2014      	movs	r0, #20
 800227e:	f009 fbaf 	bl	800b9e0 <vTaskDelay>
		{
 8002282:	e6ed      	b.n	8002060 <measurements_task+0xc>
 8002284:	200012b4 	.word	0x200012b4
 8002288:	200012b0 	.word	0x200012b0
 800228c:	20000f54 	.word	0x20000f54
 8002290:	20001348 	.word	0x20001348
 8002294:	20000fa8 	.word	0x20000fa8
 8002298:	200013a0 	.word	0x200013a0
 800229c:	20000e8c 	.word	0x20000e8c
 80022a0:	200012f8 	.word	0x200012f8
 80022a4:	200013d0 	.word	0x200013d0
 80022a8:	200013d8 	.word	0x200013d8
 80022ac:	080138d4 	.word	0x080138d4
 80022b0:	200011e0 	.word	0x200011e0
 80022b4:	2000002c 	.word	0x2000002c
 80022b8:	080138e4 	.word	0x080138e4
 80022bc:	200010d0 	.word	0x200010d0
 80022c0:	20000028 	.word	0x20000028
 80022c4:	080138ec 	.word	0x080138ec
 80022c8:	200013d4 	.word	0x200013d4
 80022cc:	20000030 	.word	0x20000030
 80022d0:	200013e8 	.word	0x200013e8
 80022d4:	20001340 	.word	0x20001340

080022d8 <sender_task>:
		}
	}

	void sender_task(void *pvParameters){
 80022d8:	b580      	push	{r7, lr}
 80022da:	b09c      	sub	sp, #112	; 0x70
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

		while(1){
			if(xQueueReceive(Queue_Handler, &sendData, portMAX_DELAY) == pdPASS){
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <sender_task+0x54>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f04f 32ff 	mov.w	r2, #4294967295
 80022e8:	4911      	ldr	r1, [pc, #68]	; (8002330 <sender_task+0x58>)
 80022ea:	4618      	mov	r0, r3
 80022ec:	f008 feb2 	bl	800b054 <xQueueReceive>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d115      	bne.n	8002322 <sender_task+0x4a>
				char buffer[100];
				sprintf(buffer,"%d %d \n", sendData.humidity, sendData.temperature);
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <sender_task+0x58>)
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <sender_task+0x58>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f107 000c 	add.w	r0, r7, #12
 8002302:	490c      	ldr	r1, [pc, #48]	; (8002334 <sender_task+0x5c>)
 8002304:	f00b fd8a 	bl	800de1c <siprintf>
				//xSemaphoreTake(AlarmMutex_Handler,portMAX_DELAY);
				HAL_UART_Transmit(&huart3,(uint8_t*)buffer, strlen(buffer), 50);
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	4618      	mov	r0, r3
 800230e:	f7fd ffaf 	bl	8000270 <strlen>
 8002312:	4603      	mov	r3, r0
 8002314:	b29a      	uxth	r2, r3
 8002316:	f107 010c 	add.w	r1, r7, #12
 800231a:	2332      	movs	r3, #50	; 0x32
 800231c:	4806      	ldr	r0, [pc, #24]	; (8002338 <sender_task+0x60>)
 800231e:	f007 f8b8 	bl	8009492 <HAL_UART_Transmit>
				//xSemaphoreGive(AlarmMutex_Handler);
			}
			vTaskDelay(pdMS_TO_TICKS(20));
 8002322:	2014      	movs	r0, #20
 8002324:	f009 fb5c 	bl	800b9e0 <vTaskDelay>
			if(xQueueReceive(Queue_Handler, &sendData, portMAX_DELAY) == pdPASS){
 8002328:	e7da      	b.n	80022e0 <sender_task+0x8>
 800232a:	bf00      	nop
 800232c:	200013e8 	.word	0x200013e8
 8002330:	200012b8 	.word	0x200012b8
 8002334:	080138f4 	.word	0x080138f4
 8002338:	200011e0 	.word	0x200011e0

0800233c <LED_task>:
		}
	}


	void LED_task(void *pvParameters){
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

		while(1){
			if(xSemaphoreTake(PWM_Sem_Handler,portMAX_DELAY) == pdTRUE){
 8002344:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <LED_task+0x9c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f04f 31ff 	mov.w	r1, #4294967295
 800234c:	4618      	mov	r0, r3
 800234e:	f008 ff61 	bl	800b214 <xQueueSemaphoreTake>
 8002352:	4603      	mov	r3, r0
 8002354:	2b01      	cmp	r3, #1
 8002356:	d1f5      	bne.n	8002344 <LED_task+0x8>

			    	if(duty_cycle < 0.5){
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <LED_task+0xa0>)
 800235a:	edd3 7a00 	vldr	s15, [r3]
 800235e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236a:	d51a      	bpl.n	80023a2 <LED_task+0x66>
			    		duty_cycle = 0.5;
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <LED_task+0xa0>)
 800236e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002372:	601a      	str	r2, [r3, #0]
			    		cmp_reg = duty_cycle * htim1.Init.Period;
 8002374:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <LED_task+0xa4>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	ee07 3a90 	vmov	s15, r3
 800237c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <LED_task+0xa0>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800238e:	ee17 2a90 	vmov	r2, s15
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <LED_task+0xa8>)
 8002394:	601a      	str	r2, [r3, #0]
			    		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,cmp_reg);
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <LED_task+0xa4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <LED_task+0xa8>)
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	635a      	str	r2, [r3, #52]	; 0x34
 80023a0:	e7d0      	b.n	8002344 <LED_task+0x8>
			    	}else{
			    		duty_cycle = 0;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <LED_task+0xa0>)
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
			    		cmp_reg = duty_cycle * htim1.Init.Period;
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <LED_task+0xa4>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <LED_task+0xa0>)
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c4:	ee17 2a90 	vmov	r2, s15
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <LED_task+0xa8>)
 80023ca:	601a      	str	r2, [r3, #0]
			    		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,cmp_reg);
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <LED_task+0xa4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <LED_task+0xa8>)
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	635a      	str	r2, [r3, #52]	; 0x34
			if(xSemaphoreTake(PWM_Sem_Handler,portMAX_DELAY) == pdTRUE){
 80023d6:	e7b5      	b.n	8002344 <LED_task+0x8>
 80023d8:	200013ec 	.word	0x200013ec
 80023dc:	20001338 	.word	0x20001338
 80023e0:	20000ffc 	.word	0x20000ffc
 80023e4:	2000133c 	.word	0x2000133c

080023e8 <HAL_GPIO_EXTI_Callback>:
			    	}
		}
	}
	}

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == B1_Pin){
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023f8:	d117      	bne.n	800242a <HAL_GPIO_EXTI_Callback+0x42>
		  BaseType_t task_woken = pdFALSE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
		  xSemaphoreGiveFromISR(PWM_Sem_Handler,&task_woken);
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f107 020c 	add.w	r2, r7, #12
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f008 fd95 	bl	800af38 <xQueueGiveFromISR>

		  if(task_woken){
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HAL_GPIO_EXTI_Callback+0x42>
			  portYIELD_FROM_ISR(task_woken);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d007      	beq.n	800242a <HAL_GPIO_EXTI_Callback+0x42>
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_GPIO_EXTI_Callback+0x50>)
 800241c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	f3bf 8f6f 	isb	sy

		  }
		}
	  }
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200013ec 	.word	0x200013ec
 8002438:	e000ed04 	.word	0xe000ed04

0800243c <square>:

	/* ------- HELPING FUNCTIONS ------- */
	float square(float number){
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	ed87 0a01 	vstr	s0, [r7, #4]
		return number*number;
 8002446:	edd7 7a01 	vldr	s15, [r7, #4]
 800244a:	ee67 7aa7 	vmul.f32	s15, s15, s15
	}
 800244e:	eeb0 0a67 	vmov.f32	s0, s15
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d101      	bne.n	8002472 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800246e:	f001 f991 	bl	8003794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40001000 	.word	0x40001000

08002480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002484:	b672      	cpsid	i
}
 8002486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002488:	e7fe      	b.n	8002488 <Error_Handler+0x8>

0800248a <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b088      	sub	sp, #32
 800248e:	af04      	add	r7, sp, #16
 8002490:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002492:	2364      	movs	r3, #100	; 0x64
 8002494:	9302      	str	r3, [sp, #8]
 8002496:	2301      	movs	r3, #1
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	f107 030f 	add.w	r3, r7, #15
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	2301      	movs	r3, #1
 80024a2:	2275      	movs	r2, #117	; 0x75
 80024a4:	21d0      	movs	r1, #208	; 0xd0
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f003 fe68 	bl	800617c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b68      	cmp	r3, #104	; 0x68
 80024b0:	d13d      	bne.n	800252e <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80024b6:	2364      	movs	r3, #100	; 0x64
 80024b8:	9302      	str	r3, [sp, #8]
 80024ba:	2301      	movs	r3, #1
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	f107 030e 	add.w	r3, r7, #14
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	2301      	movs	r3, #1
 80024c6:	226b      	movs	r2, #107	; 0x6b
 80024c8:	21d0      	movs	r1, #208	; 0xd0
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f003 fd42 	bl	8005f54 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80024d0:	2307      	movs	r3, #7
 80024d2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80024d4:	2364      	movs	r3, #100	; 0x64
 80024d6:	9302      	str	r3, [sp, #8]
 80024d8:	2301      	movs	r3, #1
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	f107 030e 	add.w	r3, r7, #14
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2301      	movs	r3, #1
 80024e4:	2219      	movs	r2, #25
 80024e6:	21d0      	movs	r1, #208	; 0xd0
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f003 fd33 	bl	8005f54 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80024f2:	2364      	movs	r3, #100	; 0x64
 80024f4:	9302      	str	r3, [sp, #8]
 80024f6:	2301      	movs	r3, #1
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	f107 030e 	add.w	r3, r7, #14
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2301      	movs	r3, #1
 8002502:	221c      	movs	r2, #28
 8002504:	21d0      	movs	r1, #208	; 0xd0
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f003 fd24 	bl	8005f54 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800250c:	2300      	movs	r3, #0
 800250e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002510:	2364      	movs	r3, #100	; 0x64
 8002512:	9302      	str	r3, [sp, #8]
 8002514:	2301      	movs	r3, #1
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	f107 030e 	add.w	r3, r7, #14
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2301      	movs	r3, #1
 8002520:	221b      	movs	r2, #27
 8002522:	21d0      	movs	r1, #208	; 0xd0
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f003 fd15 	bl	8005f54 <HAL_I2C_Mem_Write>
        return 0;
 800252a:	2300      	movs	r3, #0
 800252c:	e000      	b.n	8002530 <MPU6050_Init+0xa6>
    }
    return 1;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800253c:	b094      	sub	sp, #80	; 0x50
 800253e:	af04      	add	r7, sp, #16
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002544:	2364      	movs	r3, #100	; 0x64
 8002546:	9302      	str	r3, [sp, #8]
 8002548:	230e      	movs	r3, #14
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	f107 0308 	add.w	r3, r7, #8
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2301      	movs	r3, #1
 8002554:	223b      	movs	r2, #59	; 0x3b
 8002556:	21d0      	movs	r1, #208	; 0xd0
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f003 fe0f 	bl	800617c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800255e:	7a3b      	ldrb	r3, [r7, #8]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	b21a      	sxth	r2, r3
 8002564:	7a7b      	ldrb	r3, [r7, #9]
 8002566:	b21b      	sxth	r3, r3
 8002568:	4313      	orrs	r3, r2
 800256a:	b21a      	sxth	r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002570:	7abb      	ldrb	r3, [r7, #10]
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	b21a      	sxth	r2, r3
 8002576:	7afb      	ldrb	r3, [r7, #11]
 8002578:	b21b      	sxth	r3, r3
 800257a:	4313      	orrs	r3, r2
 800257c:	b21a      	sxth	r2, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002582:	7b3b      	ldrb	r3, [r7, #12]
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	b21a      	sxth	r2, r3
 8002588:	7b7b      	ldrb	r3, [r7, #13]
 800258a:	b21b      	sxth	r3, r3
 800258c:	4313      	orrs	r3, r2
 800258e:	b21a      	sxth	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002594:	7bbb      	ldrb	r3, [r7, #14]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	b21a      	sxth	r2, r3
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	b21b      	sxth	r3, r3
 800259e:	4313      	orrs	r3, r2
 80025a0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80025a2:	7c3b      	ldrb	r3, [r7, #16]
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	b21a      	sxth	r2, r3
 80025a8:	7c7b      	ldrb	r3, [r7, #17]
 80025aa:	b21b      	sxth	r3, r3
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b21a      	sxth	r2, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80025b4:	7cbb      	ldrb	r3, [r7, #18]
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	b21a      	sxth	r2, r3
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	b21b      	sxth	r3, r3
 80025be:	4313      	orrs	r3, r2
 80025c0:	b21a      	sxth	r2, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80025c6:	7d3b      	ldrb	r3, [r7, #20]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	b21a      	sxth	r2, r3
 80025cc:	7d7b      	ldrb	r3, [r7, #21]
 80025ce:	b21b      	sxth	r3, r3
 80025d0:	4313      	orrs	r3, r2
 80025d2:	b21a      	sxth	r2, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd ffa0 	bl	8000524 <__aeabi_i2d>
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	4bbd      	ldr	r3, [pc, #756]	; (80028e0 <MPU6050_Read_All+0x3a8>)
 80025ea:	f7fe f92f 	bl	800084c <__aeabi_ddiv>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	6839      	ldr	r1, [r7, #0]
 80025f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd ff90 	bl	8000524 <__aeabi_i2d>
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	4bb5      	ldr	r3, [pc, #724]	; (80028e0 <MPU6050_Read_All+0x3a8>)
 800260a:	f7fe f91f 	bl	800084c <__aeabi_ddiv>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	6839      	ldr	r1, [r7, #0]
 8002614:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd ff80 	bl	8000524 <__aeabi_i2d>
 8002624:	a3a8      	add	r3, pc, #672	; (adr r3, 80028c8 <MPU6050_Read_All+0x390>)
 8002626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262a:	f7fe f90f 	bl	800084c <__aeabi_ddiv>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	6839      	ldr	r1, [r7, #0]
 8002634:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002638:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800263c:	ee07 3a90 	vmov	s15, r3
 8002640:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002644:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80028e4 <MPU6050_Read_All+0x3ac>
 8002648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800264c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80028e8 <MPU6050_Read_All+0x3b0>
 8002650:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff5f 	bl	8000524 <__aeabi_i2d>
 8002666:	a39a      	add	r3, pc, #616	; (adr r3, 80028d0 <MPU6050_Read_All+0x398>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fe f8ee 	bl	800084c <__aeabi_ddiv>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	6839      	ldr	r1, [r7, #0]
 8002676:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd ff4f 	bl	8000524 <__aeabi_i2d>
 8002686:	a392      	add	r3, pc, #584	; (adr r3, 80028d0 <MPU6050_Read_All+0x398>)
 8002688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268c:	f7fe f8de 	bl	800084c <__aeabi_ddiv>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	6839      	ldr	r1, [r7, #0]
 8002696:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd ff3f 	bl	8000524 <__aeabi_i2d>
 80026a6:	a38a      	add	r3, pc, #552	; (adr r3, 80028d0 <MPU6050_Read_All+0x398>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	f7fe f8ce 	bl	800084c <__aeabi_ddiv>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	6839      	ldr	r1, [r7, #0]
 80026b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80026ba:	f001 f87f 	bl	80037bc <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b8a      	ldr	r3, [pc, #552]	; (80028ec <MPU6050_Read_All+0x3b4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fd ff1c 	bl	8000504 <__aeabi_ui2d>
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	4b87      	ldr	r3, [pc, #540]	; (80028f0 <MPU6050_Read_All+0x3b8>)
 80026d2:	f7fe f8bb 	bl	800084c <__aeabi_ddiv>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80026de:	f001 f86d 	bl	80037bc <HAL_GetTick>
 80026e2:	4603      	mov	r3, r0
 80026e4:	4a81      	ldr	r2, [pc, #516]	; (80028ec <MPU6050_Read_All+0x3b4>)
 80026e6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ee:	461a      	mov	r2, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026f6:	fb03 f202 	mul.w	r2, r3, r2
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002700:	4619      	mov	r1, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ff08 	bl	8000524 <__aeabi_i2d>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	ec43 2b10 	vmov	d0, r2, r3
 800271c:	f00f fd76 	bl	801220c <sqrt>
 8002720:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002730:	f7fe f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d11f      	bne.n	800277a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd feef 	bl	8000524 <__aeabi_i2d>
 8002746:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800274a:	f7fe f87f 	bl	800084c <__aeabi_ddiv>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	ec43 2b17 	vmov	d7, r2, r3
 8002756:	eeb0 0a47 	vmov.f32	s0, s14
 800275a:	eef0 0a67 	vmov.f32	s1, s15
 800275e:	f00f fd83 	bl	8012268 <atan>
 8002762:	ec51 0b10 	vmov	r0, r1, d0
 8002766:	a35c      	add	r3, pc, #368	; (adr r3, 80028d8 <MPU6050_Read_All+0x3a0>)
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	f7fd ff44 	bl	80005f8 <__aeabi_dmul>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002778:	e005      	b.n	8002786 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800278c:	425b      	negs	r3, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f7fd fec8 	bl	8000524 <__aeabi_i2d>
 8002794:	4682      	mov	sl, r0
 8002796:	468b      	mov	fp, r1
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fec0 	bl	8000524 <__aeabi_i2d>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	ec43 2b11 	vmov	d1, r2, r3
 80027ac:	ec4b ab10 	vmov	d0, sl, fp
 80027b0:	f00f fc7a 	bl	80120a8 <atan2>
 80027b4:	ec51 0b10 	vmov	r0, r1, d0
 80027b8:	a347      	add	r3, pc, #284	; (adr r3, 80028d8 <MPU6050_Read_All+0x3a0>)
 80027ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027be:	f7fd ff1b 	bl	80005f8 <__aeabi_dmul>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	4b49      	ldr	r3, [pc, #292]	; (80028f4 <MPU6050_Read_All+0x3bc>)
 80027d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027d4:	f7fe f982 	bl	8000adc <__aeabi_dcmplt>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <MPU6050_Read_All+0x2bc>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	4b43      	ldr	r3, [pc, #268]	; (80028f8 <MPU6050_Read_All+0x3c0>)
 80027ea:	f7fe f995 	bl	8000b18 <__aeabi_dcmpgt>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d114      	bne.n	800281e <MPU6050_Read_All+0x2e6>
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	4b3f      	ldr	r3, [pc, #252]	; (80028f8 <MPU6050_Read_All+0x3c0>)
 80027fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027fe:	f7fe f98b 	bl	8000b18 <__aeabi_dcmpgt>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d015      	beq.n	8002834 <MPU6050_Read_All+0x2fc>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <MPU6050_Read_All+0x3bc>)
 8002814:	f7fe f962 	bl	8000adc <__aeabi_dcmplt>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 800281e:	4937      	ldr	r1, [pc, #220]	; (80028fc <MPU6050_Read_All+0x3c4>)
 8002820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002824:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002828:	6839      	ldr	r1, [r7, #0]
 800282a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800282e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002832:	e014      	b.n	800285e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800283a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800283e:	eeb0 1a47 	vmov.f32	s2, s14
 8002842:	eef0 1a67 	vmov.f32	s3, s15
 8002846:	ed97 0b06 	vldr	d0, [r7, #24]
 800284a:	482c      	ldr	r0, [pc, #176]	; (80028fc <MPU6050_Read_All+0x3c4>)
 800284c:	f000 f85a 	bl	8002904 <Kalman_getAngle>
 8002850:	eeb0 7a40 	vmov.f32	s14, s0
 8002854:	eef0 7a60 	vmov.f32	s15, s1
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002864:	4690      	mov	r8, r2
 8002866:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <MPU6050_Read_All+0x3c0>)
 8002870:	4640      	mov	r0, r8
 8002872:	4649      	mov	r1, r9
 8002874:	f7fe f950 	bl	8000b18 <__aeabi_dcmpgt>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002884:	4614      	mov	r4, r2
 8002886:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002896:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800289a:	eeb0 1a47 	vmov.f32	s2, s14
 800289e:	eef0 1a67 	vmov.f32	s3, s15
 80028a2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80028a6:	4816      	ldr	r0, [pc, #88]	; (8002900 <MPU6050_Read_All+0x3c8>)
 80028a8:	f000 f82c 	bl	8002904 <Kalman_getAngle>
 80028ac:	eeb0 7a40 	vmov.f32	s14, s0
 80028b0:	eef0 7a60 	vmov.f32	s15, s1
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 80028ba:	bf00      	nop
 80028bc:	3740      	adds	r7, #64	; 0x40
 80028be:	46bd      	mov	sp, r7
 80028c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028c4:	f3af 8000 	nop.w
 80028c8:	00000000 	.word	0x00000000
 80028cc:	40cc2900 	.word	0x40cc2900
 80028d0:	00000000 	.word	0x00000000
 80028d4:	40606000 	.word	0x40606000
 80028d8:	1a63c1f8 	.word	0x1a63c1f8
 80028dc:	404ca5dc 	.word	0x404ca5dc
 80028e0:	40d00000 	.word	0x40d00000
 80028e4:	43aa0000 	.word	0x43aa0000
 80028e8:	42121eb8 	.word	0x42121eb8
 80028ec:	200013f0 	.word	0x200013f0
 80028f0:	408f4000 	.word	0x408f4000
 80028f4:	c0568000 	.word	0xc0568000
 80028f8:	40568000 	.word	0x40568000
 80028fc:	20000080 	.word	0x20000080
 8002900:	20000038 	.word	0x20000038

08002904 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002904:	b5b0      	push	{r4, r5, r7, lr}
 8002906:	b096      	sub	sp, #88	; 0x58
 8002908:	af00      	add	r7, sp, #0
 800290a:	61f8      	str	r0, [r7, #28]
 800290c:	ed87 0b04 	vstr	d0, [r7, #16]
 8002910:	ed87 1b02 	vstr	d1, [r7, #8]
 8002914:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800291e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002922:	f7fd fcb1 	bl	8000288 <__aeabi_dsub>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002934:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800293c:	f7fd fe5c 	bl	80005f8 <__aeabi_dmul>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4620      	mov	r0, r4
 8002946:	4629      	mov	r1, r5
 8002948:	f7fd fca0 	bl	800028c <__adddf3>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	69f9      	ldr	r1, [r7, #28]
 8002952:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002966:	f7fd fe47 	bl	80005f8 <__aeabi_dmul>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002978:	f7fd fc86 	bl	8000288 <__aeabi_dsub>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800298a:	f7fd fc7d 	bl	8000288 <__aeabi_dsub>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f7fd fc76 	bl	800028c <__adddf3>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029ac:	f7fd fe24 	bl	80005f8 <__aeabi_dmul>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4620      	mov	r0, r4
 80029b6:	4629      	mov	r1, r5
 80029b8:	f7fd fc68 	bl	800028c <__adddf3>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	69f9      	ldr	r1, [r7, #28]
 80029c2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80029d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029d6:	f7fd fe0f 	bl	80005f8 <__aeabi_dmul>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4620      	mov	r0, r4
 80029e0:	4629      	mov	r1, r5
 80029e2:	f7fd fc51 	bl	8000288 <__aeabi_dsub>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	69f9      	ldr	r1, [r7, #28]
 80029ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80029fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a00:	f7fd fdfa 	bl	80005f8 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4620      	mov	r0, r4
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	f7fd fc3c 	bl	8000288 <__aeabi_dsub>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	69f9      	ldr	r1, [r7, #28]
 8002a16:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a2a:	f7fd fde5 	bl	80005f8 <__aeabi_dmul>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4620      	mov	r0, r4
 8002a34:	4629      	mov	r1, r5
 8002a36:	f7fd fc29 	bl	800028c <__adddf3>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	69f9      	ldr	r1, [r7, #28]
 8002a40:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a50:	f7fd fc1c 	bl	800028c <__adddf3>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002a62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a66:	f7fd fef1 	bl	800084c <__aeabi_ddiv>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002a78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a7c:	f7fd fee6 	bl	800084c <__aeabi_ddiv>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a92:	f7fd fbf9 	bl	8000288 <__aeabi_dsub>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002aa4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002aa8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002aac:	f7fd fda4 	bl	80005f8 <__aeabi_dmul>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	f7fd fbe8 	bl	800028c <__adddf3>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	69f9      	ldr	r1, [r7, #28]
 8002ac2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002acc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ad0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ad4:	f7fd fd90 	bl	80005f8 <__aeabi_dmul>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4620      	mov	r0, r4
 8002ade:	4629      	mov	r1, r5
 8002ae0:	f7fd fbd4 	bl	800028c <__adddf3>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	69f9      	ldr	r1, [r7, #28]
 8002aea:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002af4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002afe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002b08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b10:	f7fd fd72 	bl	80005f8 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4620      	mov	r0, r4
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	f7fd fbb4 	bl	8000288 <__aeabi_dsub>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	69f9      	ldr	r1, [r7, #28]
 8002b26:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002b30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b34:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b38:	f7fd fd5e 	bl	80005f8 <__aeabi_dmul>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4620      	mov	r0, r4
 8002b42:	4629      	mov	r1, r5
 8002b44:	f7fd fba0 	bl	8000288 <__aeabi_dsub>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	69f9      	ldr	r1, [r7, #28]
 8002b4e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002b58:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b60:	f7fd fd4a 	bl	80005f8 <__aeabi_dmul>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4620      	mov	r0, r4
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	f7fd fb8c 	bl	8000288 <__aeabi_dsub>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	69f9      	ldr	r1, [r7, #28]
 8002b76:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002b80:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b88:	f7fd fd36 	bl	80005f8 <__aeabi_dmul>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4620      	mov	r0, r4
 8002b92:	4629      	mov	r1, r5
 8002b94:	f7fd fb78 	bl	8000288 <__aeabi_dsub>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	69f9      	ldr	r1, [r7, #28]
 8002b9e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ba8:	ec43 2b17 	vmov	d7, r2, r3
};
 8002bac:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb0:	eef0 0a67 	vmov.f32	s1, s15
 8002bb4:	3758      	adds	r7, #88	; 0x58
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bdb0      	pop	{r4, r5, r7, pc}

08002bba <checkCRC>:
  return res == HAL_OK;
}


static uint32_t checkCRC(uint16_t value, uint8_t expected)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	460a      	mov	r2, r1
 8002bc4:	80fb      	strh	r3, [r7, #6]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	717b      	strb	r3, [r7, #5]
	uint8_t data[2] = {value >> 8, value & 0xFF};
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	723b      	strb	r3, [r7, #8]
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	727b      	strb	r3, [r7, #9]
	uint8_t crc = 0xFF;
 8002bda:	23ff      	movs	r3, #255	; 0xff
 8002bdc:	73fb      	strb	r3, [r7, #15]
	uint8_t poly = 0x31;
 8002bde:	2331      	movs	r3, #49	; 0x31
 8002be0:	733b      	strb	r3, [r7, #12]

	for (uint8_t indi = 0; indi < 2; indi++) {
 8002be2:	2300      	movs	r3, #0
 8002be4:	73bb      	strb	r3, [r7, #14]
 8002be6:	e023      	b.n	8002c30 <checkCRC+0x76>
		crc ^= data[indi];
 8002be8:	7bbb      	ldrb	r3, [r7, #14]
 8002bea:	3310      	adds	r3, #16
 8002bec:	443b      	add	r3, r7
 8002bee:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	4053      	eors	r3, r2
 8002bf6:	73fb      	strb	r3, [r7, #15]
		for (uint8_t indj = 0; indj < 8; indj++) {
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	737b      	strb	r3, [r7, #13]
 8002bfc:	e012      	b.n	8002c24 <checkCRC+0x6a>
			if (crc & 0x80) {
 8002bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	da08      	bge.n	8002c18 <checkCRC+0x5e>
				crc = (uint8_t)((crc << 1) ^ poly);
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	b25a      	sxtb	r2, r3
 8002c0c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002c10:	4053      	eors	r3, r2
 8002c12:	b25b      	sxtb	r3, r3
 8002c14:	73fb      	strb	r3, [r7, #15]
 8002c16:	e002      	b.n	8002c1e <checkCRC+0x64>
			} else {
				crc <<= 1;
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
		for (uint8_t indj = 0; indj < 8; indj++) {
 8002c1e:	7b7b      	ldrb	r3, [r7, #13]
 8002c20:	3301      	adds	r3, #1
 8002c22:	737b      	strb	r3, [r7, #13]
 8002c24:	7b7b      	ldrb	r3, [r7, #13]
 8002c26:	2b07      	cmp	r3, #7
 8002c28:	d9e9      	bls.n	8002bfe <checkCRC+0x44>
	for (uint8_t indi = 0; indi < 2; indi++) {
 8002c2a:	7bbb      	ldrb	r3, [r7, #14]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	73bb      	strb	r3, [r7, #14]
 8002c30:	7bbb      	ldrb	r3, [r7, #14]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d9d8      	bls.n	8002be8 <checkCRC+0x2e>
			}
		}
	}

	if (expected ^ crc)	{
 8002c36:	797a      	ldrb	r2, [r7, #5]
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d001      	beq.n	8002c42 <checkCRC+0x88>
    return 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e000      	b.n	8002c44 <checkCRC+0x8a>
	}
  return 1;
 8002c42:	2301      	movs	r3, #1
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <_read_values>:

static uint32_t _read_values(uint8_t* data, int32_t* out_temp, int32_t* out_hum)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  // Check CRC
  uint32_t raw_hum = data[0] << 8 | data[1];
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	3201      	adds	r2, #1
 8002c66:	7812      	ldrb	r2, [r2, #0]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]
  uint32_t raw_temp = data[3] << 8 | data[4];
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3303      	adds	r3, #3
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	3204      	adds	r2, #4
 8002c78:	7812      	ldrb	r2, [r2, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]

  if (!checkCRC(raw_hum, data[2])) {
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3302      	adds	r3, #2
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f7ff ff95 	bl	8002bba <checkCRC>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <_read_values+0x4a>
    return 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e02e      	b.n	8002cf8 <_read_values+0xa8>
  }
  if (!checkCRC(raw_temp, data[5])) {
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3305      	adds	r3, #5
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	f7ff ff87 	bl	8002bba <checkCRC>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <_read_values+0x66>
    return 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e020      	b.n	8002cf8 <_read_values+0xa8>
  }

  // Convert values
  if (out_hum) {
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <_read_values+0x82>
    *out_hum = raw_hum * 100 / 65535;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2264      	movs	r2, #100	; 0x64
 8002cc0:	fb02 f303 	mul.w	r3, r2, r3
 8002cc4:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <_read_values+0xb0>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	0bdb      	lsrs	r3, r3, #15
 8002ccc:	461a      	mov	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	601a      	str	r2, [r3, #0]
  }
  if (out_temp) {
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00e      	beq.n	8002cf6 <_read_values+0xa6>
    *out_temp = raw_temp * 17500 / 65535 - 4500;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f244 425c 	movw	r2, #17500	; 0x445c
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <_read_values+0xb0>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	0bdb      	lsrs	r3, r3, #15
 8002cea:	f5a3 538c 	sub.w	r3, r3, #4480	; 0x1180
 8002cee:	3b14      	subs	r3, #20
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	601a      	str	r2, [r3, #0]
  }

  return 1;
 8002cf6:	2301      	movs	r3, #1
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	80008001 	.word	0x80008001

08002d04 <_perform_measurements>:

static uint32_t _perform_measurements(I2C_HandleTypeDef *hi2c, uint16_t command, int32_t* out_temp, int32_t* out_hum)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	460b      	mov	r3, r1
 8002d12:	817b      	strh	r3, [r7, #10]
  uint8_t result[6];

  uint32_t res = HAL_I2C_Master_Transmit(hi2c, SHTC3_ADDRESS_WRITE, (uint8_t*)&command, 2, 100);
 8002d14:	f107 020a 	add.w	r2, r7, #10
 8002d18:	2364      	movs	r3, #100	; 0x64
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	21e0      	movs	r1, #224	; 0xe0
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f002 ff09 	bl	8005b38 <HAL_I2C_Master_Transmit>
 8002d26:	4603      	mov	r3, r0
 8002d28:	61fb      	str	r3, [r7, #28]
  if (res != HAL_OK) {
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <_perform_measurements+0x30>
    return 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e017      	b.n	8002d64 <_perform_measurements+0x60>
  }

  res = HAL_I2C_Master_Receive(hi2c, SHTC3_ADDRESS_READ, result, 6, 100);
 8002d34:	f107 0214 	add.w	r2, r7, #20
 8002d38:	2364      	movs	r3, #100	; 0x64
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	2306      	movs	r3, #6
 8002d3e:	21e1      	movs	r1, #225	; 0xe1
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f003 f811 	bl	8005d68 <HAL_I2C_Master_Receive>
 8002d46:	4603      	mov	r3, r0
 8002d48:	61fb      	str	r3, [r7, #28]
  if (res != HAL_OK) {
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <_perform_measurements+0x50>
    return 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e007      	b.n	8002d64 <_perform_measurements+0x60>
  }

  return _read_values(result, out_temp, out_hum);
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff77 	bl	8002c50 <_read_values>
 8002d62:	4603      	mov	r3, r0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <shtc3_perform_measurements>:

uint32_t shtc3_perform_measurements(I2C_HandleTypeDef *hi2c, int32_t* out_temp, int32_t* out_hum)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  return _perform_measurements(hi2c, SHTC3_CMD_CLK_STRETCH_READ_HUM_FIRST, out_temp, out_hum);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	f242 415c 	movw	r1, #9308	; 0x245c
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f7ff ffbf 	bl	8002d04 <_perform_measurements>
 8002d86:	4603      	mov	r3, r0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <HAL_MspInit+0x4c>)
 8002d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9a:	4a10      	ldr	r2, [pc, #64]	; (8002ddc <HAL_MspInit+0x4c>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6613      	str	r3, [r2, #96]	; 0x60
 8002da2:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <HAL_MspInit+0x4c>)
 8002da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dae:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_MspInit+0x4c>)
 8002db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db2:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <HAL_MspInit+0x4c>)
 8002db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db8:	6593      	str	r3, [r2, #88]	; 0x58
 8002dba:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <HAL_MspInit+0x4c>)
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	210f      	movs	r1, #15
 8002dca:	f06f 0001 	mvn.w	r0, #1
 8002dce:	f002 f99d 	bl	800510c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40021000 	.word	0x40021000

08002de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08c      	sub	sp, #48	; 0x30
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 031c 	add.w	r3, r7, #28
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a33      	ldr	r2, [pc, #204]	; (8002ecc <HAL_ADC_MspInit+0xec>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d12d      	bne.n	8002e5e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002e02:	4b33      	ldr	r3, [pc, #204]	; (8002ed0 <HAL_ADC_MspInit+0xf0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3301      	adds	r3, #1
 8002e08:	4a31      	ldr	r2, [pc, #196]	; (8002ed0 <HAL_ADC_MspInit+0xf0>)
 8002e0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002e0c:	4b30      	ldr	r3, [pc, #192]	; (8002ed0 <HAL_ADC_MspInit+0xf0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10b      	bne.n	8002e2c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002e14:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <HAL_ADC_MspInit+0xf4>)
 8002e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e18:	4a2e      	ldr	r2, [pc, #184]	; (8002ed4 <HAL_ADC_MspInit+0xf4>)
 8002e1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e20:	4b2c      	ldr	r3, [pc, #176]	; (8002ed4 <HAL_ADC_MspInit+0xf4>)
 8002e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2c:	4b29      	ldr	r3, [pc, #164]	; (8002ed4 <HAL_ADC_MspInit+0xf4>)
 8002e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e30:	4a28      	ldr	r2, [pc, #160]	; (8002ed4 <HAL_ADC_MspInit+0xf4>)
 8002e32:	f043 0302 	orr.w	r3, r3, #2
 8002e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e38:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <HAL_ADC_MspInit+0xf4>)
 8002e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GAS_ADC_Pin;
 8002e44:	2302      	movs	r3, #2
 8002e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002e48:	230b      	movs	r3, #11
 8002e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GAS_ADC_GPIO_Port, &GPIO_InitStruct);
 8002e50:	f107 031c 	add.w	r3, r7, #28
 8002e54:	4619      	mov	r1, r3
 8002e56:	4820      	ldr	r0, [pc, #128]	; (8002ed8 <HAL_ADC_MspInit+0xf8>)
 8002e58:	f002 fbf8 	bl	800564c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002e5c:	e031      	b.n	8002ec2 <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <HAL_ADC_MspInit+0xfc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d12c      	bne.n	8002ec2 <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_ADC_MspInit+0xf0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	4a18      	ldr	r2, [pc, #96]	; (8002ed0 <HAL_ADC_MspInit+0xf0>)
 8002e70:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002e72:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <HAL_ADC_MspInit+0xf0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d10b      	bne.n	8002e92 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <HAL_ADC_MspInit+0xf4>)
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7e:	4a15      	ldr	r2, [pc, #84]	; (8002ed4 <HAL_ADC_MspInit+0xf4>)
 8002e80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_ADC_MspInit+0xf4>)
 8002e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <HAL_ADC_MspInit+0xf4>)
 8002e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e96:	4a0f      	ldr	r2, [pc, #60]	; (8002ed4 <HAL_ADC_MspInit+0xf4>)
 8002e98:	f043 0304 	orr.w	r3, r3, #4
 8002e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <HAL_ADC_MspInit+0xf4>)
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BAT_SENSE_Pin;
 8002eaa:	2320      	movs	r3, #32
 8002eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002eae:	230b      	movs	r3, #11
 8002eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002eb6:	f107 031c 	add.w	r3, r7, #28
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4808      	ldr	r0, [pc, #32]	; (8002ee0 <HAL_ADC_MspInit+0x100>)
 8002ebe:	f002 fbc5 	bl	800564c <HAL_GPIO_Init>
}
 8002ec2:	bf00      	nop
 8002ec4:	3730      	adds	r7, #48	; 0x30
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	50040000 	.word	0x50040000
 8002ed0:	200013f4 	.word	0x200013f4
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	48000400 	.word	0x48000400
 8002edc:	50040100 	.word	0x50040100
 8002ee0:	48000800 	.word	0x48000800

08002ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b0ae      	sub	sp, #184	; 0xb8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002efc:	f107 031c 	add.w	r3, r7, #28
 8002f00:	2288      	movs	r2, #136	; 0x88
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f00b f81a 	bl	800df3e <memset>
  if(hi2c->Instance==I2C2)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a42      	ldr	r2, [pc, #264]	; (8003018 <HAL_I2C_MspInit+0x134>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d13c      	bne.n	8002f8e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f1c:	f107 031c 	add.w	r3, r7, #28
 8002f20:	4618      	mov	r0, r3
 8002f22:	f004 fcc1 	bl	80078a8 <HAL_RCCEx_PeriphCLKConfig>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002f2c:	f7ff faa8 	bl	8002480 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f30:	4b3a      	ldr	r3, [pc, #232]	; (800301c <HAL_I2C_MspInit+0x138>)
 8002f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f34:	4a39      	ldr	r2, [pc, #228]	; (800301c <HAL_I2C_MspInit+0x138>)
 8002f36:	f043 0302 	orr.w	r3, r3, #2
 8002f3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f3c:	4b37      	ldr	r3, [pc, #220]	; (800301c <HAL_I2C_MspInit+0x138>)
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = TEMP_SCL_Pin|TEMP_SDA_Pin;
 8002f48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f50:	2312      	movs	r3, #18
 8002f52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f62:	2304      	movs	r3, #4
 8002f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	482c      	ldr	r0, [pc, #176]	; (8003020 <HAL_I2C_MspInit+0x13c>)
 8002f70:	f002 fb6c 	bl	800564c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f74:	4b29      	ldr	r3, [pc, #164]	; (800301c <HAL_I2C_MspInit+0x138>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f78:	4a28      	ldr	r2, [pc, #160]	; (800301c <HAL_I2C_MspInit+0x138>)
 8002f7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f80:	4b26      	ldr	r3, [pc, #152]	; (800301c <HAL_I2C_MspInit+0x138>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002f8c:	e040      	b.n	8003010 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C3)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a24      	ldr	r2, [pc, #144]	; (8003024 <HAL_I2C_MspInit+0x140>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d13b      	bne.n	8003010 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f9c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fa2:	f107 031c 	add.w	r3, r7, #28
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f004 fc7e 	bl	80078a8 <HAL_RCCEx_PeriphCLKConfig>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8002fb2:	f7ff fa65 	bl	8002480 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_I2C_MspInit+0x138>)
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	4a18      	ldr	r2, [pc, #96]	; (800301c <HAL_I2C_MspInit+0x138>)
 8002fbc:	f043 0304 	orr.w	r3, r3, #4
 8002fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_I2C_MspInit+0x138>)
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fd4:	2312      	movs	r3, #18
 8002fd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	480d      	ldr	r0, [pc, #52]	; (8003028 <HAL_I2C_MspInit+0x144>)
 8002ff4:	f002 fb2a 	bl	800564c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_I2C_MspInit+0x138>)
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	4a07      	ldr	r2, [pc, #28]	; (800301c <HAL_I2C_MspInit+0x138>)
 8002ffe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003002:	6593      	str	r3, [r2, #88]	; 0x58
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <HAL_I2C_MspInit+0x138>)
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
}
 8003010:	bf00      	nop
 8003012:	37b8      	adds	r7, #184	; 0xb8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40005800 	.word	0x40005800
 800301c:	40021000 	.word	0x40021000
 8003020:	48000400 	.word	0x48000400
 8003024:	40005c00 	.word	0x40005c00
 8003028:	48000800 	.word	0x48000800

0800302c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <HAL_TIM_PWM_MspInit+0x38>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10b      	bne.n	8003056 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_TIM_PWM_MspInit+0x3c>)
 8003040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003042:	4a09      	ldr	r2, [pc, #36]	; (8003068 <HAL_TIM_PWM_MspInit+0x3c>)
 8003044:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003048:	6613      	str	r3, [r2, #96]	; 0x60
 800304a:	4b07      	ldr	r3, [pc, #28]	; (8003068 <HAL_TIM_PWM_MspInit+0x3c>)
 800304c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40021000 	.word	0x40021000

0800306c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003074:	f107 030c 	add.w	r3, r7, #12
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a11      	ldr	r2, [pc, #68]	; (80030d0 <HAL_TIM_MspPostInit+0x64>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d11c      	bne.n	80030c8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308e:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <HAL_TIM_MspPostInit+0x68>)
 8003090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003092:	4a10      	ldr	r2, [pc, #64]	; (80030d4 <HAL_TIM_MspPostInit+0x68>)
 8003094:	f043 0302 	orr.w	r3, r3, #2
 8003098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800309a:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <HAL_TIM_MspPostInit+0x68>)
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 80030a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030b8:	2301      	movs	r3, #1
 80030ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 80030bc:	f107 030c 	add.w	r3, r7, #12
 80030c0:	4619      	mov	r1, r3
 80030c2:	4805      	ldr	r0, [pc, #20]	; (80030d8 <HAL_TIM_MspPostInit+0x6c>)
 80030c4:	f002 fac2 	bl	800564c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80030c8:	bf00      	nop
 80030ca:	3720      	adds	r7, #32
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40012c00 	.word	0x40012c00
 80030d4:	40021000 	.word	0x40021000
 80030d8:	48000400 	.word	0x48000400

080030dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b0b2      	sub	sp, #200	; 0xc8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030f8:	2288      	movs	r2, #136	; 0x88
 80030fa:	2100      	movs	r1, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f00a ff1e 	bl	800df3e <memset>
  if(huart->Instance==UART5)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4aae      	ldr	r2, [pc, #696]	; (80033c0 <HAL_UART_MspInit+0x2e4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	f040 808f 	bne.w	800322c <HAL_UART_MspInit+0x150>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800310e:	2310      	movs	r3, #16
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003112:	2300      	movs	r3, #0
 8003114:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800311a:	4618      	mov	r0, r3
 800311c:	f004 fbc4 	bl	80078a8 <HAL_RCCEx_PeriphCLKConfig>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003126:	f7ff f9ab 	bl	8002480 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800312a:	4ba6      	ldr	r3, [pc, #664]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	4aa5      	ldr	r2, [pc, #660]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 8003130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003134:	6593      	str	r3, [r2, #88]	; 0x58
 8003136:	4ba3      	ldr	r3, [pc, #652]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 8003138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003142:	4ba0      	ldr	r3, [pc, #640]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 8003144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003146:	4a9f      	ldr	r2, [pc, #636]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 8003148:	f043 0304 	orr.w	r3, r3, #4
 800314c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800314e:	4b9d      	ldr	r3, [pc, #628]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 8003150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800315a:	4b9a      	ldr	r3, [pc, #616]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 800315c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315e:	4a99      	ldr	r2, [pc, #612]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 8003160:	f043 0308 	orr.w	r3, r3, #8
 8003164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003166:	4b97      	ldr	r3, [pc, #604]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 8003168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	623b      	str	r3, [r7, #32]
 8003170:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8003172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003176:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	2302      	movs	r3, #2
 800317c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003186:	2303      	movs	r3, #3
 8003188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800318c:	2308      	movs	r3, #8
 800318e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8003192:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003196:	4619      	mov	r1, r3
 8003198:	488b      	ldr	r0, [pc, #556]	; (80033c8 <HAL_UART_MspInit+0x2ec>)
 800319a:	f002 fa57 	bl	800564c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 800319e:	2304      	movs	r3, #4
 80031a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a4:	2302      	movs	r3, #2
 80031a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b0:	2303      	movs	r3, #3
 80031b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80031b6:	2308      	movs	r3, #8
 80031b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 80031bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80031c0:	4619      	mov	r1, r3
 80031c2:	4882      	ldr	r0, [pc, #520]	; (80033cc <HAL_UART_MspInit+0x2f0>)
 80031c4:	f002 fa42 	bl	800564c <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA2_Channel2;
 80031c8:	4b81      	ldr	r3, [pc, #516]	; (80033d0 <HAL_UART_MspInit+0x2f4>)
 80031ca:	4a82      	ldr	r2, [pc, #520]	; (80033d4 <HAL_UART_MspInit+0x2f8>)
 80031cc:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 80031ce:	4b80      	ldr	r3, [pc, #512]	; (80033d0 <HAL_UART_MspInit+0x2f4>)
 80031d0:	2202      	movs	r2, #2
 80031d2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031d4:	4b7e      	ldr	r3, [pc, #504]	; (80033d0 <HAL_UART_MspInit+0x2f4>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031da:	4b7d      	ldr	r3, [pc, #500]	; (80033d0 <HAL_UART_MspInit+0x2f4>)
 80031dc:	2200      	movs	r2, #0
 80031de:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031e0:	4b7b      	ldr	r3, [pc, #492]	; (80033d0 <HAL_UART_MspInit+0x2f4>)
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031e6:	4b7a      	ldr	r3, [pc, #488]	; (80033d0 <HAL_UART_MspInit+0x2f4>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031ec:	4b78      	ldr	r3, [pc, #480]	; (80033d0 <HAL_UART_MspInit+0x2f4>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80031f2:	4b77      	ldr	r3, [pc, #476]	; (80033d0 <HAL_UART_MspInit+0x2f4>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031f8:	4b75      	ldr	r3, [pc, #468]	; (80033d0 <HAL_UART_MspInit+0x2f4>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80031fe:	4874      	ldr	r0, [pc, #464]	; (80033d0 <HAL_UART_MspInit+0x2f4>)
 8003200:	f001 ffae 	bl	8005160 <HAL_DMA_Init>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 800320a:	f7ff f939 	bl	8002480 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a6f      	ldr	r2, [pc, #444]	; (80033d0 <HAL_UART_MspInit+0x2f4>)
 8003212:	675a      	str	r2, [r3, #116]	; 0x74
 8003214:	4a6e      	ldr	r2, [pc, #440]	; (80033d0 <HAL_UART_MspInit+0x2f4>)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800321a:	2200      	movs	r2, #0
 800321c:	2105      	movs	r1, #5
 800321e:	2035      	movs	r0, #53	; 0x35
 8003220:	f001 ff74 	bl	800510c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003224:	2035      	movs	r0, #53	; 0x35
 8003226:	f001 ff8d 	bl	8005144 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800322a:	e0c5      	b.n	80033b8 <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a69      	ldr	r2, [pc, #420]	; (80033d8 <HAL_UART_MspInit+0x2fc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d13d      	bne.n	80032b2 <HAL_UART_MspInit+0x1d6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003236:	2301      	movs	r3, #1
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800323a:	2300      	movs	r3, #0
 800323c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800323e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003242:	4618      	mov	r0, r3
 8003244:	f004 fb30 	bl	80078a8 <HAL_RCCEx_PeriphCLKConfig>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_UART_MspInit+0x176>
      Error_Handler();
 800324e:	f7ff f917 	bl	8002480 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003252:	4b5c      	ldr	r3, [pc, #368]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 8003254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003256:	4a5b      	ldr	r2, [pc, #364]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 8003258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800325c:	6613      	str	r3, [r2, #96]	; 0x60
 800325e:	4b59      	ldr	r3, [pc, #356]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 8003260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326a:	4b56      	ldr	r3, [pc, #344]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 800326c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326e:	4a55      	ldr	r2, [pc, #340]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003276:	4b53      	ldr	r3, [pc, #332]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = WK_RX_Pin|WK_TX_Pin;
 8003282:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003286:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003296:	2303      	movs	r3, #3
 8003298:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800329c:	2307      	movs	r3, #7
 800329e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032a6:	4619      	mov	r1, r3
 80032a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032ac:	f002 f9ce 	bl	800564c <HAL_GPIO_Init>
}
 80032b0:	e082      	b.n	80033b8 <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART2)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a49      	ldr	r2, [pc, #292]	; (80033dc <HAL_UART_MspInit+0x300>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d13c      	bne.n	8003336 <HAL_UART_MspInit+0x25a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032bc:	2302      	movs	r3, #2
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032c0:	2300      	movs	r3, #0
 80032c2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032c8:	4618      	mov	r0, r3
 80032ca:	f004 faed 	bl	80078a8 <HAL_RCCEx_PeriphCLKConfig>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80032d4:	f7ff f8d4 	bl	8002480 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032d8:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	4a39      	ldr	r2, [pc, #228]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 80032de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e2:	6593      	str	r3, [r2, #88]	; 0x58
 80032e4:	4b37      	ldr	r3, [pc, #220]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f0:	4b34      	ldr	r3, [pc, #208]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 80032f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f4:	4a33      	ldr	r2, [pc, #204]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032fc:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 80032fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003308:	230c      	movs	r3, #12
 800330a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	2302      	movs	r3, #2
 8003310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800331a:	2303      	movs	r3, #3
 800331c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003320:	2307      	movs	r3, #7
 8003322:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003326:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800332a:	4619      	mov	r1, r3
 800332c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003330:	f002 f98c 	bl	800564c <HAL_GPIO_Init>
}
 8003334:	e040      	b.n	80033b8 <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART3)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a29      	ldr	r2, [pc, #164]	; (80033e0 <HAL_UART_MspInit+0x304>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d13b      	bne.n	80033b8 <HAL_UART_MspInit+0x2dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003340:	2304      	movs	r3, #4
 8003342:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003344:	2300      	movs	r3, #0
 8003346:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800334c:	4618      	mov	r0, r3
 800334e:	f004 faab 	bl	80078a8 <HAL_RCCEx_PeriphCLKConfig>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_UART_MspInit+0x280>
      Error_Handler();
 8003358:	f7ff f892 	bl	8002480 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800335c:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 8003362:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003366:	6593      	str	r3, [r2, #88]	; 0x58
 8003368:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 800336a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003374:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 8003376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003378:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 800337a:	f043 0304 	orr.w	r3, r3, #4
 800337e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003380:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <HAL_UART_MspInit+0x2e8>)
 8003382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NET_ESP_RX_Pin|NET_ESP_TX_Pin;
 800338c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a0:	2303      	movs	r3, #3
 80033a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033a6:	2307      	movs	r3, #7
 80033a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80033b0:	4619      	mov	r1, r3
 80033b2:	4805      	ldr	r0, [pc, #20]	; (80033c8 <HAL_UART_MspInit+0x2ec>)
 80033b4:	f002 f94a 	bl	800564c <HAL_GPIO_Init>
}
 80033b8:	bf00      	nop
 80033ba:	37c8      	adds	r7, #200	; 0xc8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40005000 	.word	0x40005000
 80033c4:	40021000 	.word	0x40021000
 80033c8:	48000800 	.word	0x48000800
 80033cc:	48000c00 	.word	0x48000c00
 80033d0:	20001268 	.word	0x20001268
 80033d4:	4002041c 	.word	0x4002041c
 80033d8:	40013800 	.word	0x40013800
 80033dc:	40004400 	.word	0x40004400
 80033e0:	40004800 	.word	0x40004800

080033e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08e      	sub	sp, #56	; 0x38
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80033f2:	4b34      	ldr	r3, [pc, #208]	; (80034c4 <HAL_InitTick+0xe0>)
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	4a33      	ldr	r2, [pc, #204]	; (80034c4 <HAL_InitTick+0xe0>)
 80033f8:	f043 0310 	orr.w	r3, r3, #16
 80033fc:	6593      	str	r3, [r2, #88]	; 0x58
 80033fe:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <HAL_InitTick+0xe0>)
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800340a:	f107 0210 	add.w	r2, r7, #16
 800340e:	f107 0314 	add.w	r3, r7, #20
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f004 f9b5 	bl	8007784 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d103      	bne.n	800342c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003424:	f004 f982 	bl	800772c <HAL_RCC_GetPCLK1Freq>
 8003428:	6378      	str	r0, [r7, #52]	; 0x34
 800342a:	e004      	b.n	8003436 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800342c:	f004 f97e 	bl	800772c <HAL_RCC_GetPCLK1Freq>
 8003430:	4603      	mov	r3, r0
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003438:	4a23      	ldr	r2, [pc, #140]	; (80034c8 <HAL_InitTick+0xe4>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	0c9b      	lsrs	r3, r3, #18
 8003440:	3b01      	subs	r3, #1
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003444:	4b21      	ldr	r3, [pc, #132]	; (80034cc <HAL_InitTick+0xe8>)
 8003446:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <HAL_InitTick+0xec>)
 8003448:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800344a:	4b20      	ldr	r3, [pc, #128]	; (80034cc <HAL_InitTick+0xe8>)
 800344c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003450:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003452:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <HAL_InitTick+0xe8>)
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003458:	4b1c      	ldr	r3, [pc, #112]	; (80034cc <HAL_InitTick+0xe8>)
 800345a:	2200      	movs	r2, #0
 800345c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800345e:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_InitTick+0xe8>)
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003464:	4b19      	ldr	r3, [pc, #100]	; (80034cc <HAL_InitTick+0xe8>)
 8003466:	2200      	movs	r2, #0
 8003468:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800346a:	4818      	ldr	r0, [pc, #96]	; (80034cc <HAL_InitTick+0xe8>)
 800346c:	f004 fed8 	bl	8008220 <HAL_TIM_Base_Init>
 8003470:	4603      	mov	r3, r0
 8003472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003476:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800347a:	2b00      	cmp	r3, #0
 800347c:	d11b      	bne.n	80034b6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800347e:	4813      	ldr	r0, [pc, #76]	; (80034cc <HAL_InitTick+0xe8>)
 8003480:	f004 ff30 	bl	80082e4 <HAL_TIM_Base_Start_IT>
 8003484:	4603      	mov	r3, r0
 8003486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800348a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800348e:	2b00      	cmp	r3, #0
 8003490:	d111      	bne.n	80034b6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003492:	2036      	movs	r0, #54	; 0x36
 8003494:	f001 fe56 	bl	8005144 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b0f      	cmp	r3, #15
 800349c:	d808      	bhi.n	80034b0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800349e:	2200      	movs	r2, #0
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	2036      	movs	r0, #54	; 0x36
 80034a4:	f001 fe32 	bl	800510c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034a8:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <HAL_InitTick+0xf0>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e002      	b.n	80034b6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80034b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3738      	adds	r7, #56	; 0x38
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000
 80034c8:	431bde83 	.word	0x431bde83
 80034cc:	200013f8 	.word	0x200013f8
 80034d0:	40001000 	.word	0x40001000
 80034d4:	200000cc 	.word	0x200000cc

080034d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034dc:	e7fe      	b.n	80034dc <NMI_Handler+0x4>

080034de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034de:	b480      	push	{r7}
 80034e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034e2:	e7fe      	b.n	80034e2 <HardFault_Handler+0x4>

080034e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034e8:	e7fe      	b.n	80034e8 <MemManage_Handler+0x4>

080034ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034ea:	b480      	push	{r7}
 80034ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ee:	e7fe      	b.n	80034ee <BusFault_Handler+0x4>

080034f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034f4:	e7fe      	b.n	80034f4 <UsageFault_Handler+0x4>

080034f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003508:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800350c:	f002 fa60 	bl	80059d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003510:	bf00      	nop
 8003512:	bd80      	pop	{r7, pc}

08003514 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003518:	4802      	ldr	r0, [pc, #8]	; (8003524 <UART5_IRQHandler+0x10>)
 800351a:	f006 f891 	bl	8009640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20001048 	.word	0x20001048

08003528 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800352c:	4802      	ldr	r0, [pc, #8]	; (8003538 <TIM6_DAC_IRQHandler+0x10>)
 800352e:	f004 ffa0 	bl	8008472 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200013f8 	.word	0x200013f8

0800353c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003540:	4802      	ldr	r0, [pc, #8]	; (800354c <DMA2_Channel2_IRQHandler+0x10>)
 8003542:	f001 ffa4 	bl	800548e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20001268 	.word	0x20001268

08003550 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return 1;
 8003554:	2301      	movs	r3, #1
}
 8003556:	4618      	mov	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <_kill>:

int _kill(int pid, int sig)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800356a:	f00a fda7 	bl	800e0bc <__errno>
 800356e:	4603      	mov	r3, r0
 8003570:	2216      	movs	r2, #22
 8003572:	601a      	str	r2, [r3, #0]
  return -1;
 8003574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <_exit>:

void _exit (int status)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003588:	f04f 31ff 	mov.w	r1, #4294967295
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ffe7 	bl	8003560 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003592:	e7fe      	b.n	8003592 <_exit+0x12>

08003594 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	e00a      	b.n	80035bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035a6:	f3af 8000 	nop.w
 80035aa:	4601      	mov	r1, r0
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	60ba      	str	r2, [r7, #8]
 80035b2:	b2ca      	uxtb	r2, r1
 80035b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	3301      	adds	r3, #1
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	dbf0      	blt.n	80035a6 <_read+0x12>
  }

  return len;
 80035c4:	687b      	ldr	r3, [r7, #4]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e009      	b.n	80035f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	60ba      	str	r2, [r7, #8]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	3301      	adds	r3, #1
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	dbf1      	blt.n	80035e0 <_write+0x12>
  }
  return len;
 80035fc:	687b      	ldr	r3, [r7, #4]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <_close>:

int _close(int file)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800360e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800362e:	605a      	str	r2, [r3, #4]
  return 0;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <_isatty>:

int _isatty(int file)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003646:	2301      	movs	r3, #1
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003678:	4a14      	ldr	r2, [pc, #80]	; (80036cc <_sbrk+0x5c>)
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <_sbrk+0x60>)
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <_sbrk+0x64>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <_sbrk+0x64>)
 800368e:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <_sbrk+0x68>)
 8003690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <_sbrk+0x64>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	429a      	cmp	r2, r3
 800369e:	d207      	bcs.n	80036b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036a0:	f00a fd0c 	bl	800e0bc <__errno>
 80036a4:	4603      	mov	r3, r0
 80036a6:	220c      	movs	r2, #12
 80036a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036aa:	f04f 33ff 	mov.w	r3, #4294967295
 80036ae:	e009      	b.n	80036c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036b0:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <_sbrk+0x64>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036b6:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <_sbrk+0x64>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <_sbrk+0x64>)
 80036c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036c2:	68fb      	ldr	r3, [r7, #12]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20018000 	.word	0x20018000
 80036d0:	00000400 	.word	0x00000400
 80036d4:	20001444 	.word	0x20001444
 80036d8:	20008c20 	.word	0x20008c20

080036dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <SystemInit+0x20>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e6:	4a05      	ldr	r2, [pc, #20]	; (80036fc <SystemInit+0x20>)
 80036e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80036f0:	bf00      	nop
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	e000ed00 	.word	0xe000ed00

08003700 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003738 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003704:	f7ff ffea 	bl	80036dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003708:	480c      	ldr	r0, [pc, #48]	; (800373c <LoopForever+0x6>)
  ldr r1, =_edata
 800370a:	490d      	ldr	r1, [pc, #52]	; (8003740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800370c:	4a0d      	ldr	r2, [pc, #52]	; (8003744 <LoopForever+0xe>)
  movs r3, #0
 800370e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003710:	e002      	b.n	8003718 <LoopCopyDataInit>

08003712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003716:	3304      	adds	r3, #4

08003718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800371c:	d3f9      	bcc.n	8003712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800371e:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003720:	4c0a      	ldr	r4, [pc, #40]	; (800374c <LoopForever+0x16>)
  movs r3, #0
 8003722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003724:	e001      	b.n	800372a <LoopFillZerobss>

08003726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003728:	3204      	adds	r2, #4

0800372a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800372c:	d3fb      	bcc.n	8003726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800372e:	f00a fccb 	bl	800e0c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003732:	f7fe f817 	bl	8001764 <main>

08003736 <LoopForever>:

LoopForever:
    b LoopForever
 8003736:	e7fe      	b.n	8003736 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003738:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800373c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003740:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8003744:	08013e50 	.word	0x08013e50
  ldr r2, =_sbss
 8003748:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 800374c:	20008c1c 	.word	0x20008c1c

08003750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003750:	e7fe      	b.n	8003750 <ADC1_2_IRQHandler>
	...

08003754 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <HAL_Init+0x3c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a0b      	ldr	r2, [pc, #44]	; (8003790 <HAL_Init+0x3c>)
 8003764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003768:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800376a:	2003      	movs	r0, #3
 800376c:	f001 fcc3 	bl	80050f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003770:	200f      	movs	r0, #15
 8003772:	f7ff fe37 	bl	80033e4 <HAL_InitTick>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	71fb      	strb	r3, [r7, #7]
 8003780:	e001      	b.n	8003786 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003782:	f7ff fb05 	bl	8002d90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003786:	79fb      	ldrb	r3, [r7, #7]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40022000 	.word	0x40022000

08003794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_IncTick+0x20>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_IncTick+0x24>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4413      	add	r3, r2
 80037a4:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <HAL_IncTick+0x24>)
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	200000d0 	.word	0x200000d0
 80037b8:	20001448 	.word	0x20001448

080037bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return uwTick;
 80037c0:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <HAL_GetTick+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20001448 	.word	0x20001448

080037d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037dc:	f7ff ffee 	bl	80037bc <HAL_GetTick>
 80037e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ec:	d005      	beq.n	80037fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_Delay+0x44>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037fa:	bf00      	nop
 80037fc:	f7ff ffde 	bl	80037bc <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	429a      	cmp	r2, r3
 800380a:	d8f7      	bhi.n	80037fc <HAL_Delay+0x28>
  {
  }
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	200000d0 	.word	0x200000d0

0800381c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	609a      	str	r2, [r3, #8]
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	609a      	str	r2, [r3, #8]
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3360      	adds	r3, #96	; 0x60
 8003896:	461a      	mov	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <LL_ADC_SetOffset+0x44>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038bc:	bf00      	nop
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	03fff000 	.word	0x03fff000

080038cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3360      	adds	r3, #96	; 0x60
 80038da:	461a      	mov	r2, r3
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3360      	adds	r3, #96	; 0x60
 8003908:	461a      	mov	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	431a      	orrs	r2, r3
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3330      	adds	r3, #48	; 0x30
 8003964:	461a      	mov	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	f003 030c 	and.w	r3, r3, #12
 8003970:	4413      	add	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	211f      	movs	r1, #31
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	401a      	ands	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	0e9b      	lsrs	r3, r3, #26
 800398c:	f003 011f 	and.w	r1, r3, #31
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	431a      	orrs	r2, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039a0:	bf00      	nop
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3314      	adds	r3, #20
 80039bc:	461a      	mov	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	0e5b      	lsrs	r3, r3, #25
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	4413      	add	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	0d1b      	lsrs	r3, r3, #20
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	2107      	movs	r1, #7
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	401a      	ands	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	0d1b      	lsrs	r3, r3, #20
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	431a      	orrs	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f003 0318 	and.w	r3, r3, #24
 8003a26:	4908      	ldr	r1, [pc, #32]	; (8003a48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a28:	40d9      	lsrs	r1, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	400b      	ands	r3, r1
 8003a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a32:	431a      	orrs	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	0007ffff 	.word	0x0007ffff

08003a4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 031f 	and.w	r3, r3, #31
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003a94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6093      	str	r3, [r2, #8]
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003abc:	d101      	bne.n	8003ac2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ae4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b0c:	d101      	bne.n	8003b12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b34:	f043 0201 	orr.w	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b5c:	f043 0202 	orr.w	r2, r3, #2
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <LL_ADC_IsEnabled+0x18>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <LL_ADC_IsEnabled+0x1a>
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d101      	bne.n	8003bae <LL_ADC_IsDisableOngoing+0x18>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <LL_ADC_IsDisableOngoing+0x1a>
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bd0:	f043 0204 	orr.w	r2, r3, #4
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bf8:	f043 0210 	orr.w	r2, r3, #16
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d101      	bne.n	8003c24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c46:	f043 0220 	orr.w	r2, r3, #32
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d101      	bne.n	8003c72 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c80:	b590      	push	{r4, r7, lr}
 8003c82:	b089      	sub	sp, #36	; 0x24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e130      	b.n	8003efc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d109      	bne.n	8003cbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff f899 	bl	8002de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fef1 	bl	8003aa8 <LL_ADC_IsDeepPowerDownEnabled>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fed7 	bl	8003a84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff ff0c 	bl	8003af8 <LL_ADC_IsInternalRegulatorEnabled>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d115      	bne.n	8003d12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fef0 	bl	8003ad0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cf0:	4b84      	ldr	r3, [pc, #528]	; (8003f04 <HAL_ADC_Init+0x284>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	099b      	lsrs	r3, r3, #6
 8003cf6:	4a84      	ldr	r2, [pc, #528]	; (8003f08 <HAL_ADC_Init+0x288>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	099b      	lsrs	r3, r3, #6
 8003cfe:	3301      	adds	r3, #1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d04:	e002      	b.n	8003d0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f9      	bne.n	8003d06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff feee 	bl	8003af8 <LL_ADC_IsInternalRegulatorEnabled>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10d      	bne.n	8003d3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	f043 0210 	orr.w	r2, r3, #16
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	f043 0201 	orr.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff ff62 	bl	8003c0c <LL_ADC_REG_IsConversionOngoing>
 8003d48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f040 80c9 	bne.w	8003eea <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f040 80c5 	bne.w	8003eea <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d68:	f043 0202 	orr.w	r2, r3, #2
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fefb 	bl	8003b70 <LL_ADC_IsEnabled>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d115      	bne.n	8003dac <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d80:	4862      	ldr	r0, [pc, #392]	; (8003f0c <HAL_ADC_Init+0x28c>)
 8003d82:	f7ff fef5 	bl	8003b70 <LL_ADC_IsEnabled>
 8003d86:	4604      	mov	r4, r0
 8003d88:	4861      	ldr	r0, [pc, #388]	; (8003f10 <HAL_ADC_Init+0x290>)
 8003d8a:	f7ff fef1 	bl	8003b70 <LL_ADC_IsEnabled>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	431c      	orrs	r4, r3
 8003d92:	4860      	ldr	r0, [pc, #384]	; (8003f14 <HAL_ADC_Init+0x294>)
 8003d94:	f7ff feec 	bl	8003b70 <LL_ADC_IsEnabled>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4323      	orrs	r3, r4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d105      	bne.n	8003dac <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4619      	mov	r1, r3
 8003da6:	485c      	ldr	r0, [pc, #368]	; (8003f18 <HAL_ADC_Init+0x298>)
 8003da8:	f7ff fd38 	bl	800381c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	7e5b      	ldrb	r3, [r3, #25]
 8003db0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003db6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003dbc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003dc2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d106      	bne.n	8003de8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	3b01      	subs	r3, #1
 8003de0:	045b      	lsls	r3, r3, #17
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d009      	beq.n	8003e04 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	4b44      	ldr	r3, [pc, #272]	; (8003f1c <HAL_ADC_Init+0x29c>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	69b9      	ldr	r1, [r7, #24]
 8003e14:	430b      	orrs	r3, r1
 8003e16:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff ff1c 	bl	8003c5a <LL_ADC_INJ_IsConversionOngoing>
 8003e22:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d13d      	bne.n	8003ea6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d13a      	bne.n	8003ea6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e34:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e3c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e4c:	f023 0302 	bic.w	r3, r3, #2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	69b9      	ldr	r1, [r7, #24]
 8003e56:	430b      	orrs	r3, r1
 8003e58:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d118      	bne.n	8003e96 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e6e:	f023 0304 	bic.w	r3, r3, #4
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e7a:	4311      	orrs	r1, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e80:	4311      	orrs	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e86:	430a      	orrs	r2, r1
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	611a      	str	r2, [r3, #16]
 8003e94:	e007      	b.n	8003ea6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d10c      	bne.n	8003ec8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	f023 010f 	bic.w	r1, r3, #15
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	1e5a      	subs	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ec6:	e007      	b.n	8003ed8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 020f 	bic.w	r2, r2, #15
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003edc:	f023 0303 	bic.w	r3, r3, #3
 8003ee0:	f043 0201 	orr.w	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
 8003ee8:	e007      	b.n	8003efa <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	f043 0210 	orr.w	r2, r3, #16
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003efa:	7ffb      	ldrb	r3, [r7, #31]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3724      	adds	r7, #36	; 0x24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd90      	pop	{r4, r7, pc}
 8003f04:	200000c8 	.word	0x200000c8
 8003f08:	053e2d63 	.word	0x053e2d63
 8003f0c:	50040000 	.word	0x50040000
 8003f10:	50040100 	.word	0x50040100
 8003f14:	50040200 	.word	0x50040200
 8003f18:	50040300 	.word	0x50040300
 8003f1c:	fff0c007 	.word	0xfff0c007

08003f20 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f28:	4857      	ldr	r0, [pc, #348]	; (8004088 <HAL_ADC_Start+0x168>)
 8003f2a:	f7ff fd8f 	bl	8003a4c <LL_ADC_GetMultimode>
 8003f2e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fe69 	bl	8003c0c <LL_ADC_REG_IsConversionOngoing>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f040 809c 	bne.w	800407a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_ADC_Start+0x30>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e097      	b.n	8004080 <HAL_ADC_Start+0x160>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fe63 	bl	8004c24 <ADC_Enable>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f040 8083 	bne.w	8004070 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f72:	f023 0301 	bic.w	r3, r3, #1
 8003f76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a42      	ldr	r2, [pc, #264]	; (800408c <HAL_ADC_Start+0x16c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d002      	beq.n	8003f8e <HAL_ADC_Start+0x6e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	e000      	b.n	8003f90 <HAL_ADC_Start+0x70>
 8003f8e:	4b40      	ldr	r3, [pc, #256]	; (8004090 <HAL_ADC_Start+0x170>)
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d002      	beq.n	8003f9e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d105      	bne.n	8003faa <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb6:	d106      	bne.n	8003fc6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	f023 0206 	bic.w	r2, r3, #6
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	659a      	str	r2, [r3, #88]	; 0x58
 8003fc4:	e002      	b.n	8003fcc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	221c      	movs	r2, #28
 8003fd2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a2a      	ldr	r2, [pc, #168]	; (800408c <HAL_ADC_Start+0x16c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d002      	beq.n	8003fec <HAL_ADC_Start+0xcc>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	e000      	b.n	8003fee <HAL_ADC_Start+0xce>
 8003fec:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_ADC_Start+0x170>)
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d008      	beq.n	8004008 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b05      	cmp	r3, #5
 8004000:	d002      	beq.n	8004008 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b09      	cmp	r3, #9
 8004006:	d114      	bne.n	8004032 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800401e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fdc6 	bl	8003bbc <LL_ADC_REG_StartConversion>
 8004030:	e025      	b.n	800407e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004036:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a12      	ldr	r2, [pc, #72]	; (800408c <HAL_ADC_Start+0x16c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d002      	beq.n	800404e <HAL_ADC_Start+0x12e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	e000      	b.n	8004050 <HAL_ADC_Start+0x130>
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <HAL_ADC_Start+0x170>)
 8004050:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00f      	beq.n	800407e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004062:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004066:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	655a      	str	r2, [r3, #84]	; 0x54
 800406e:	e006      	b.n	800407e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004078:	e001      	b.n	800407e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800407a:	2302      	movs	r3, #2
 800407c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800407e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	50040300 	.word	0x50040300
 800408c:	50040100 	.word	0x50040100
 8004090:	50040000 	.word	0x50040000

08004094 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_ADC_Stop+0x16>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e023      	b.n	80040f2 <HAL_ADC_Stop+0x5e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80040b2:	2103      	movs	r1, #3
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fcf9 	bl	8004aac <ADC_ConversionStop>
 80040ba:	4603      	mov	r3, r0
 80040bc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d111      	bne.n	80040e8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fe33 	bl	8004d30 <ADC_Disable>
 80040ca:	4603      	mov	r3, r0
 80040cc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	f043 0201 	orr.w	r2, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004106:	4866      	ldr	r0, [pc, #408]	; (80042a0 <HAL_ADC_PollForConversion+0x1a4>)
 8004108:	f7ff fca0 	bl	8003a4c <LL_ADC_GetMultimode>
 800410c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	2b08      	cmp	r3, #8
 8004114:	d102      	bne.n	800411c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004116:	2308      	movs	r3, #8
 8004118:	61fb      	str	r3, [r7, #28]
 800411a:	e02a      	b.n	8004172 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b05      	cmp	r3, #5
 8004126:	d002      	beq.n	800412e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b09      	cmp	r3, #9
 800412c:	d111      	bne.n	8004152 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	f043 0220 	orr.w	r2, r3, #32
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0a4      	b.n	8004296 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800414c:	2304      	movs	r3, #4
 800414e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004150:	e00f      	b.n	8004172 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004152:	4853      	ldr	r0, [pc, #332]	; (80042a0 <HAL_ADC_PollForConversion+0x1a4>)
 8004154:	f7ff fc88 	bl	8003a68 <LL_ADC_GetMultiDMATransfer>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d007      	beq.n	800416e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004162:	f043 0220 	orr.w	r2, r3, #32
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e093      	b.n	8004296 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800416e:	2304      	movs	r3, #4
 8004170:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004172:	f7ff fb23 	bl	80037bc <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004178:	e021      	b.n	80041be <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d01d      	beq.n	80041be <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004182:	f7ff fb1b 	bl	80037bc <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d302      	bcc.n	8004198 <HAL_ADC_PollForConversion+0x9c>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d112      	bne.n	80041be <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10b      	bne.n	80041be <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	f043 0204 	orr.w	r2, r3, #4
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e06b      	b.n	8004296 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0d6      	beq.n	800417a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff fba6 	bl	800392e <LL_ADC_REG_IsTriggerSourceSWStart>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01c      	beq.n	8004222 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	7e5b      	ldrb	r3, [r3, #25]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d118      	bne.n	8004222 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d111      	bne.n	8004222 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d105      	bne.n	8004222 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421a:	f043 0201 	orr.w	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <HAL_ADC_PollForConversion+0x1a8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d002      	beq.n	8004232 <HAL_ADC_PollForConversion+0x136>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	e000      	b.n	8004234 <HAL_ADC_PollForConversion+0x138>
 8004232:	4b1d      	ldr	r3, [pc, #116]	; (80042a8 <HAL_ADC_PollForConversion+0x1ac>)
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	4293      	cmp	r3, r2
 800423a:	d008      	beq.n	800424e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b05      	cmp	r3, #5
 8004246:	d002      	beq.n	800424e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b09      	cmp	r3, #9
 800424c:	d104      	bne.n	8004258 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	e00c      	b.n	8004272 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a11      	ldr	r2, [pc, #68]	; (80042a4 <HAL_ADC_PollForConversion+0x1a8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d002      	beq.n	8004268 <HAL_ADC_PollForConversion+0x16c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	e000      	b.n	800426a <HAL_ADC_PollForConversion+0x16e>
 8004268:	4b0f      	ldr	r3, [pc, #60]	; (80042a8 <HAL_ADC_PollForConversion+0x1ac>)
 800426a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d104      	bne.n	8004282 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2208      	movs	r2, #8
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e008      	b.n	8004294 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d103      	bne.n	8004294 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	220c      	movs	r2, #12
 8004292:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	50040300 	.word	0x50040300
 80042a4:	50040100 	.word	0x50040100
 80042a8:	50040000 	.word	0x50040000

080042ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b0b6      	sub	sp, #216	; 0xd8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042d8:	2300      	movs	r3, #0
 80042da:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x22>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e3c9      	b.n	8004a7e <HAL_ADC_ConfigChannel+0x7b6>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fc88 	bl	8003c0c <LL_ADC_REG_IsConversionOngoing>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f040 83aa 	bne.w	8004a58 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b05      	cmp	r3, #5
 8004312:	d824      	bhi.n	800435e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	3b02      	subs	r3, #2
 800431a:	2b03      	cmp	r3, #3
 800431c:	d81b      	bhi.n	8004356 <HAL_ADC_ConfigChannel+0x8e>
 800431e:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <HAL_ADC_ConfigChannel+0x5c>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	08004335 	.word	0x08004335
 8004328:	0800433d 	.word	0x0800433d
 800432c:	08004345 	.word	0x08004345
 8004330:	0800434d 	.word	0x0800434d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004334:	230c      	movs	r3, #12
 8004336:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800433a:	e010      	b.n	800435e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800433c:	2312      	movs	r3, #18
 800433e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004342:	e00c      	b.n	800435e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004344:	2318      	movs	r3, #24
 8004346:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800434a:	e008      	b.n	800435e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800434c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004354:	e003      	b.n	800435e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004356:	2306      	movs	r3, #6
 8004358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800435c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800436c:	f7ff faf2 	bl	8003954 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fc49 	bl	8003c0c <LL_ADC_REG_IsConversionOngoing>
 800437a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fc69 	bl	8003c5a <LL_ADC_INJ_IsConversionOngoing>
 8004388:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800438c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004390:	2b00      	cmp	r3, #0
 8004392:	f040 81a4 	bne.w	80046de <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004396:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 819f 	bne.w	80046de <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	6819      	ldr	r1, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	461a      	mov	r2, r3
 80043ae:	f7ff fafd 	bl	80039ac <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	08db      	lsrs	r3, r3, #3
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d00a      	beq.n	80043ea <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6919      	ldr	r1, [r3, #16]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043e4:	f7ff fa4e 	bl	8003884 <LL_ADC_SetOffset>
 80043e8:	e179      	b.n	80046de <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2100      	movs	r1, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fa6b 	bl	80038cc <LL_ADC_GetOffsetChannel>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x14e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff fa60 	bl	80038cc <LL_ADC_GetOffsetChannel>
 800440c:	4603      	mov	r3, r0
 800440e:	0e9b      	lsrs	r3, r3, #26
 8004410:	f003 021f 	and.w	r2, r3, #31
 8004414:	e01e      	b.n	8004454 <HAL_ADC_ConfigChannel+0x18c>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2100      	movs	r1, #0
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fa55 	bl	80038cc <LL_ADC_GetOffsetChannel>
 8004422:	4603      	mov	r3, r0
 8004424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800442c:	fa93 f3a3 	rbit	r3, r3
 8004430:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004434:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004438:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800443c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004444:	2320      	movs	r3, #32
 8004446:	e004      	b.n	8004452 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004448:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800444c:	fab3 f383 	clz	r3, r3
 8004450:	b2db      	uxtb	r3, r3
 8004452:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800445c:	2b00      	cmp	r3, #0
 800445e:	d105      	bne.n	800446c <HAL_ADC_ConfigChannel+0x1a4>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	0e9b      	lsrs	r3, r3, #26
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	e018      	b.n	800449e <HAL_ADC_ConfigChannel+0x1d6>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004478:	fa93 f3a3 	rbit	r3, r3
 800447c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004480:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004490:	2320      	movs	r3, #32
 8004492:	e004      	b.n	800449e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004494:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004498:	fab3 f383 	clz	r3, r3
 800449c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800449e:	429a      	cmp	r2, r3
 80044a0:	d106      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2200      	movs	r2, #0
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fa24 	bl	80038f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2101      	movs	r1, #1
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fa08 	bl	80038cc <LL_ADC_GetOffsetChannel>
 80044bc:	4603      	mov	r3, r0
 80044be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x214>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2101      	movs	r1, #1
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff f9fd 	bl	80038cc <LL_ADC_GetOffsetChannel>
 80044d2:	4603      	mov	r3, r0
 80044d4:	0e9b      	lsrs	r3, r3, #26
 80044d6:	f003 021f 	and.w	r2, r3, #31
 80044da:	e01e      	b.n	800451a <HAL_ADC_ConfigChannel+0x252>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2101      	movs	r1, #1
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff f9f2 	bl	80038cc <LL_ADC_GetOffsetChannel>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044f2:	fa93 f3a3 	rbit	r3, r3
 80044f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80044fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004502:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800450a:	2320      	movs	r3, #32
 800450c:	e004      	b.n	8004518 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800450e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004512:	fab3 f383 	clz	r3, r3
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004522:	2b00      	cmp	r3, #0
 8004524:	d105      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x26a>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	0e9b      	lsrs	r3, r3, #26
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	e018      	b.n	8004564 <HAL_ADC_ConfigChannel+0x29c>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004546:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800454a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800454e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004556:	2320      	movs	r3, #32
 8004558:	e004      	b.n	8004564 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800455a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800455e:	fab3 f383 	clz	r3, r3
 8004562:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004564:	429a      	cmp	r2, r3
 8004566:	d106      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2200      	movs	r2, #0
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff f9c1 	bl	80038f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2102      	movs	r1, #2
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff f9a5 	bl	80038cc <LL_ADC_GetOffsetChannel>
 8004582:	4603      	mov	r3, r0
 8004584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x2da>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2102      	movs	r1, #2
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff f99a 	bl	80038cc <LL_ADC_GetOffsetChannel>
 8004598:	4603      	mov	r3, r0
 800459a:	0e9b      	lsrs	r3, r3, #26
 800459c:	f003 021f 	and.w	r2, r3, #31
 80045a0:	e01e      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x318>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2102      	movs	r1, #2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff f98f 	bl	80038cc <LL_ADC_GetOffsetChannel>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045b8:	fa93 f3a3 	rbit	r3, r3
 80045bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80045c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80045c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80045d0:	2320      	movs	r3, #32
 80045d2:	e004      	b.n	80045de <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80045d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045d8:	fab3 f383 	clz	r3, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d105      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x330>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	0e9b      	lsrs	r3, r3, #26
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	e014      	b.n	8004622 <HAL_ADC_ConfigChannel+0x35a>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004600:	fa93 f3a3 	rbit	r3, r3
 8004604:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004606:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800460c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004614:	2320      	movs	r3, #32
 8004616:	e004      	b.n	8004622 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004618:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800461c:	fab3 f383 	clz	r3, r3
 8004620:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004622:	429a      	cmp	r2, r3
 8004624:	d106      	bne.n	8004634 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2200      	movs	r2, #0
 800462c:	2102      	movs	r1, #2
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff f962 	bl	80038f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2103      	movs	r1, #3
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff f946 	bl	80038cc <LL_ADC_GetOffsetChannel>
 8004640:	4603      	mov	r3, r0
 8004642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x398>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2103      	movs	r1, #3
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff f93b 	bl	80038cc <LL_ADC_GetOffsetChannel>
 8004656:	4603      	mov	r3, r0
 8004658:	0e9b      	lsrs	r3, r3, #26
 800465a:	f003 021f 	and.w	r2, r3, #31
 800465e:	e017      	b.n	8004690 <HAL_ADC_ConfigChannel+0x3c8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2103      	movs	r1, #3
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff f930 	bl	80038cc <LL_ADC_GetOffsetChannel>
 800466c:	4603      	mov	r3, r0
 800466e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004670:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004672:	fa93 f3a3 	rbit	r3, r3
 8004676:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800467c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004682:	2320      	movs	r3, #32
 8004684:	e003      	b.n	800468e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004688:	fab3 f383 	clz	r3, r3
 800468c:	b2db      	uxtb	r3, r3
 800468e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x3e0>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	0e9b      	lsrs	r3, r3, #26
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	e011      	b.n	80046cc <HAL_ADC_ConfigChannel+0x404>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046b0:	fa93 f3a3 	rbit	r3, r3
 80046b4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80046b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046b8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80046ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80046c0:	2320      	movs	r3, #32
 80046c2:	e003      	b.n	80046cc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80046c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046c6:	fab3 f383 	clz	r3, r3
 80046ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d106      	bne.n	80046de <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2200      	movs	r2, #0
 80046d6:	2103      	movs	r1, #3
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff f90d 	bl	80038f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fa44 	bl	8003b70 <LL_ADC_IsEnabled>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 8140 	bne.w	8004970 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6819      	ldr	r1, [r3, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	461a      	mov	r2, r3
 80046fe:	f7ff f981 	bl	8003a04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	4a8f      	ldr	r2, [pc, #572]	; (8004944 <HAL_ADC_ConfigChannel+0x67c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	f040 8131 	bne.w	8004970 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10b      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x46e>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	0e9b      	lsrs	r3, r3, #26
 8004724:	3301      	adds	r3, #1
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	2b09      	cmp	r3, #9
 800472c:	bf94      	ite	ls
 800472e:	2301      	movls	r3, #1
 8004730:	2300      	movhi	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	e019      	b.n	800476a <HAL_ADC_ConfigChannel+0x4a2>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800473e:	fa93 f3a3 	rbit	r3, r3
 8004742:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004746:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800474e:	2320      	movs	r3, #32
 8004750:	e003      	b.n	800475a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004754:	fab3 f383 	clz	r3, r3
 8004758:	b2db      	uxtb	r3, r3
 800475a:	3301      	adds	r3, #1
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	2b09      	cmp	r3, #9
 8004762:	bf94      	ite	ls
 8004764:	2301      	movls	r3, #1
 8004766:	2300      	movhi	r3, #0
 8004768:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800476a:	2b00      	cmp	r3, #0
 800476c:	d079      	beq.n	8004862 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004776:	2b00      	cmp	r3, #0
 8004778:	d107      	bne.n	800478a <HAL_ADC_ConfigChannel+0x4c2>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	0e9b      	lsrs	r3, r3, #26
 8004780:	3301      	adds	r3, #1
 8004782:	069b      	lsls	r3, r3, #26
 8004784:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004788:	e015      	b.n	80047b6 <HAL_ADC_ConfigChannel+0x4ee>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004792:	fa93 f3a3 	rbit	r3, r3
 8004796:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800479c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80047a2:	2320      	movs	r3, #32
 80047a4:	e003      	b.n	80047ae <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80047a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a8:	fab3 f383 	clz	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	3301      	adds	r3, #1
 80047b0:	069b      	lsls	r3, r3, #26
 80047b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HAL_ADC_ConfigChannel+0x50e>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	0e9b      	lsrs	r3, r3, #26
 80047c8:	3301      	adds	r3, #1
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	2101      	movs	r1, #1
 80047d0:	fa01 f303 	lsl.w	r3, r1, r3
 80047d4:	e017      	b.n	8004806 <HAL_ADC_ConfigChannel+0x53e>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047de:	fa93 f3a3 	rbit	r3, r3
 80047e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80047e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80047e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80047ee:	2320      	movs	r3, #32
 80047f0:	e003      	b.n	80047fa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80047f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f4:	fab3 f383 	clz	r3, r3
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	3301      	adds	r3, #1
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	2101      	movs	r1, #1
 8004802:	fa01 f303 	lsl.w	r3, r1, r3
 8004806:	ea42 0103 	orr.w	r1, r2, r3
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <HAL_ADC_ConfigChannel+0x564>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	0e9b      	lsrs	r3, r3, #26
 800481c:	3301      	adds	r3, #1
 800481e:	f003 021f 	and.w	r2, r3, #31
 8004822:	4613      	mov	r3, r2
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	4413      	add	r3, r2
 8004828:	051b      	lsls	r3, r3, #20
 800482a:	e018      	b.n	800485e <HAL_ADC_ConfigChannel+0x596>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004834:	fa93 f3a3 	rbit	r3, r3
 8004838:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800483e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004844:	2320      	movs	r3, #32
 8004846:	e003      	b.n	8004850 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484a:	fab3 f383 	clz	r3, r3
 800484e:	b2db      	uxtb	r3, r3
 8004850:	3301      	adds	r3, #1
 8004852:	f003 021f 	and.w	r2, r3, #31
 8004856:	4613      	mov	r3, r2
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	4413      	add	r3, r2
 800485c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800485e:	430b      	orrs	r3, r1
 8004860:	e081      	b.n	8004966 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800486a:	2b00      	cmp	r3, #0
 800486c:	d107      	bne.n	800487e <HAL_ADC_ConfigChannel+0x5b6>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	0e9b      	lsrs	r3, r3, #26
 8004874:	3301      	adds	r3, #1
 8004876:	069b      	lsls	r3, r3, #26
 8004878:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800487c:	e015      	b.n	80048aa <HAL_ADC_ConfigChannel+0x5e2>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	fa93 f3a3 	rbit	r3, r3
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004896:	2320      	movs	r3, #32
 8004898:	e003      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	fab3 f383 	clz	r3, r3
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	3301      	adds	r3, #1
 80048a4:	069b      	lsls	r3, r3, #26
 80048a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d109      	bne.n	80048ca <HAL_ADC_ConfigChannel+0x602>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	0e9b      	lsrs	r3, r3, #26
 80048bc:	3301      	adds	r3, #1
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	2101      	movs	r1, #1
 80048c4:	fa01 f303 	lsl.w	r3, r1, r3
 80048c8:	e017      	b.n	80048fa <HAL_ADC_ConfigChannel+0x632>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	fa93 f3a3 	rbit	r3, r3
 80048d6:	61bb      	str	r3, [r7, #24]
  return result;
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80048e2:	2320      	movs	r3, #32
 80048e4:	e003      	b.n	80048ee <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	fab3 f383 	clz	r3, r3
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	3301      	adds	r3, #1
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	2101      	movs	r1, #1
 80048f6:	fa01 f303 	lsl.w	r3, r1, r3
 80048fa:	ea42 0103 	orr.w	r1, r2, r3
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10d      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x65e>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	0e9b      	lsrs	r3, r3, #26
 8004910:	3301      	adds	r3, #1
 8004912:	f003 021f 	and.w	r2, r3, #31
 8004916:	4613      	mov	r3, r2
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4413      	add	r3, r2
 800491c:	3b1e      	subs	r3, #30
 800491e:	051b      	lsls	r3, r3, #20
 8004920:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004924:	e01e      	b.n	8004964 <HAL_ADC_ConfigChannel+0x69c>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	fa93 f3a3 	rbit	r3, r3
 8004932:	60fb      	str	r3, [r7, #12]
  return result;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d104      	bne.n	8004948 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800493e:	2320      	movs	r3, #32
 8004940:	e006      	b.n	8004950 <HAL_ADC_ConfigChannel+0x688>
 8004942:	bf00      	nop
 8004944:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	fab3 f383 	clz	r3, r3
 800494e:	b2db      	uxtb	r3, r3
 8004950:	3301      	adds	r3, #1
 8004952:	f003 021f 	and.w	r2, r3, #31
 8004956:	4613      	mov	r3, r2
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	4413      	add	r3, r2
 800495c:	3b1e      	subs	r3, #30
 800495e:	051b      	lsls	r3, r3, #20
 8004960:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004964:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800496a:	4619      	mov	r1, r3
 800496c:	f7ff f81e 	bl	80039ac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4b44      	ldr	r3, [pc, #272]	; (8004a88 <HAL_ADC_ConfigChannel+0x7c0>)
 8004976:	4013      	ands	r3, r2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d07a      	beq.n	8004a72 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800497c:	4843      	ldr	r0, [pc, #268]	; (8004a8c <HAL_ADC_ConfigChannel+0x7c4>)
 800497e:	f7fe ff73 	bl	8003868 <LL_ADC_GetCommonPathInternalCh>
 8004982:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a41      	ldr	r2, [pc, #260]	; (8004a90 <HAL_ADC_ConfigChannel+0x7c8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d12c      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004990:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d126      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a3c      	ldr	r2, [pc, #240]	; (8004a94 <HAL_ADC_ConfigChannel+0x7cc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <HAL_ADC_ConfigChannel+0x6e8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a3b      	ldr	r2, [pc, #236]	; (8004a98 <HAL_ADC_ConfigChannel+0x7d0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d15d      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049b8:	4619      	mov	r1, r3
 80049ba:	4834      	ldr	r0, [pc, #208]	; (8004a8c <HAL_ADC_ConfigChannel+0x7c4>)
 80049bc:	f7fe ff41 	bl	8003842 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049c0:	4b36      	ldr	r3, [pc, #216]	; (8004a9c <HAL_ADC_ConfigChannel+0x7d4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	099b      	lsrs	r3, r3, #6
 80049c6:	4a36      	ldr	r2, [pc, #216]	; (8004aa0 <HAL_ADC_ConfigChannel+0x7d8>)
 80049c8:	fba2 2303 	umull	r2, r3, r2, r3
 80049cc:	099b      	lsrs	r3, r3, #6
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	4613      	mov	r3, r2
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80049da:	e002      	b.n	80049e2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	3b01      	subs	r3, #1
 80049e0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f9      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049e8:	e040      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a2d      	ldr	r2, [pc, #180]	; (8004aa4 <HAL_ADC_ConfigChannel+0x7dc>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d118      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d112      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a23      	ldr	r2, [pc, #140]	; (8004a94 <HAL_ADC_ConfigChannel+0x7cc>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_ADC_ConfigChannel+0x74c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a22      	ldr	r2, [pc, #136]	; (8004a98 <HAL_ADC_ConfigChannel+0x7d0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d12d      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	481b      	ldr	r0, [pc, #108]	; (8004a8c <HAL_ADC_ConfigChannel+0x7c4>)
 8004a20:	f7fe ff0f 	bl	8003842 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a24:	e024      	b.n	8004a70 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1f      	ldr	r2, [pc, #124]	; (8004aa8 <HAL_ADC_ConfigChannel+0x7e0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d120      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d11a      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a14      	ldr	r2, [pc, #80]	; (8004a94 <HAL_ADC_ConfigChannel+0x7cc>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d115      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a4e:	4619      	mov	r1, r3
 8004a50:	480e      	ldr	r0, [pc, #56]	; (8004a8c <HAL_ADC_ConfigChannel+0x7c4>)
 8004a52:	f7fe fef6 	bl	8003842 <LL_ADC_SetCommonPathInternalCh>
 8004a56:	e00c      	b.n	8004a72 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5c:	f043 0220 	orr.w	r2, r3, #32
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004a6a:	e002      	b.n	8004a72 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a6c:	bf00      	nop
 8004a6e:	e000      	b.n	8004a72 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a70:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a7a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	37d8      	adds	r7, #216	; 0xd8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	80080000 	.word	0x80080000
 8004a8c:	50040300 	.word	0x50040300
 8004a90:	c7520000 	.word	0xc7520000
 8004a94:	50040000 	.word	0x50040000
 8004a98:	50040200 	.word	0x50040200
 8004a9c:	200000c8 	.word	0x200000c8
 8004aa0:	053e2d63 	.word	0x053e2d63
 8004aa4:	cb840000 	.word	0xcb840000
 8004aa8:	80000001 	.word	0x80000001

08004aac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff f8a2 	bl	8003c0c <LL_ADC_REG_IsConversionOngoing>
 8004ac8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff f8c3 	bl	8003c5a <LL_ADC_INJ_IsConversionOngoing>
 8004ad4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d103      	bne.n	8004ae4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 8098 	beq.w	8004c14 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d02a      	beq.n	8004b48 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	7e5b      	ldrb	r3, [r3, #25]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d126      	bne.n	8004b48 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	7e1b      	ldrb	r3, [r3, #24]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d122      	bne.n	8004b48 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004b02:	2301      	movs	r3, #1
 8004b04:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004b06:	e014      	b.n	8004b32 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	4a45      	ldr	r2, [pc, #276]	; (8004c20 <ADC_ConversionStop+0x174>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d90d      	bls.n	8004b2c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b14:	f043 0210 	orr.w	r2, r3, #16
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b20:	f043 0201 	orr.w	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e074      	b.n	8004c16 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3c:	2b40      	cmp	r3, #64	; 0x40
 8004b3e:	d1e3      	bne.n	8004b08 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2240      	movs	r2, #64	; 0x40
 8004b46:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d014      	beq.n	8004b78 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff f85a 	bl	8003c0c <LL_ADC_REG_IsConversionOngoing>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00c      	beq.n	8004b78 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff f817 	bl	8003b96 <LL_ADC_IsDisableOngoing>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d104      	bne.n	8004b78 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff f836 	bl	8003be4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d014      	beq.n	8004ba8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff f869 	bl	8003c5a <LL_ADC_INJ_IsConversionOngoing>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00c      	beq.n	8004ba8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fe ffff 	bl	8003b96 <LL_ADC_IsDisableOngoing>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d104      	bne.n	8004ba8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff f845 	bl	8003c32 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d005      	beq.n	8004bba <ADC_ConversionStop+0x10e>
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d105      	bne.n	8004bc0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004bb4:	230c      	movs	r3, #12
 8004bb6:	617b      	str	r3, [r7, #20]
        break;
 8004bb8:	e005      	b.n	8004bc6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004bba:	2308      	movs	r3, #8
 8004bbc:	617b      	str	r3, [r7, #20]
        break;
 8004bbe:	e002      	b.n	8004bc6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	617b      	str	r3, [r7, #20]
        break;
 8004bc4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004bc6:	f7fe fdf9 	bl	80037bc <HAL_GetTick>
 8004bca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004bcc:	e01b      	b.n	8004c06 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004bce:	f7fe fdf5 	bl	80037bc <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b05      	cmp	r3, #5
 8004bda:	d914      	bls.n	8004c06 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00d      	beq.n	8004c06 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bee:	f043 0210 	orr.w	r2, r3, #16
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfa:	f043 0201 	orr.w	r2, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e007      	b.n	8004c16 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1dc      	bne.n	8004bce <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	a33fffff 	.word	0xa33fffff

08004c24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fe ff9b 	bl	8003b70 <LL_ADC_IsEnabled>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d169      	bne.n	8004d14 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	4b36      	ldr	r3, [pc, #216]	; (8004d20 <ADC_Enable+0xfc>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00d      	beq.n	8004c6a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c52:	f043 0210 	orr.w	r2, r3, #16
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5e:	f043 0201 	orr.w	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e055      	b.n	8004d16 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe ff56 	bl	8003b20 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004c74:	482b      	ldr	r0, [pc, #172]	; (8004d24 <ADC_Enable+0x100>)
 8004c76:	f7fe fdf7 	bl	8003868 <LL_ADC_GetCommonPathInternalCh>
 8004c7a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004c7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d013      	beq.n	8004cac <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c84:	4b28      	ldr	r3, [pc, #160]	; (8004d28 <ADC_Enable+0x104>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	099b      	lsrs	r3, r3, #6
 8004c8a:	4a28      	ldr	r2, [pc, #160]	; (8004d2c <ADC_Enable+0x108>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	4613      	mov	r3, r2
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c9e:	e002      	b.n	8004ca6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f9      	bne.n	8004ca0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004cac:	f7fe fd86 	bl	80037bc <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cb2:	e028      	b.n	8004d06 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fe ff59 	bl	8003b70 <LL_ADC_IsEnabled>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fe ff29 	bl	8003b20 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004cce:	f7fe fd75 	bl	80037bc <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d914      	bls.n	8004d06 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d00d      	beq.n	8004d06 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cee:	f043 0210 	orr.w	r2, r3, #16
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfa:	f043 0201 	orr.w	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e007      	b.n	8004d16 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d1cf      	bne.n	8004cb4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	8000003f 	.word	0x8000003f
 8004d24:	50040300 	.word	0x50040300
 8004d28:	200000c8 	.word	0x200000c8
 8004d2c:	053e2d63 	.word	0x053e2d63

08004d30 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe ff2a 	bl	8003b96 <LL_ADC_IsDisableOngoing>
 8004d42:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fe ff11 	bl	8003b70 <LL_ADC_IsEnabled>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d047      	beq.n	8004de4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d144      	bne.n	8004de4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 030d 	and.w	r3, r3, #13
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d10c      	bne.n	8004d82 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fe feeb 	bl	8003b48 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2203      	movs	r2, #3
 8004d78:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d7a:	f7fe fd1f 	bl	80037bc <HAL_GetTick>
 8004d7e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d80:	e029      	b.n	8004dd6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d86:	f043 0210 	orr.w	r2, r3, #16
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d92:	f043 0201 	orr.w	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e023      	b.n	8004de6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d9e:	f7fe fd0d 	bl	80037bc <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d914      	bls.n	8004dd6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00d      	beq.n	8004dd6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbe:	f043 0210 	orr.w	r2, r3, #16
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dca:	f043 0201 	orr.w	r2, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e007      	b.n	8004de6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1dc      	bne.n	8004d9e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <LL_ADC_IsEnabled>:
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <LL_ADC_IsEnabled+0x18>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <LL_ADC_IsEnabled+0x1a>
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <LL_ADC_REG_IsConversionOngoing>:
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d101      	bne.n	8004e2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b09f      	sub	sp, #124	; 0x7c
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e093      	b.n	8004f82 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004e62:	2300      	movs	r3, #0
 8004e64:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004e66:	2300      	movs	r3, #0
 8004e68:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a47      	ldr	r2, [pc, #284]	; (8004f8c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d102      	bne.n	8004e7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e74:	4b46      	ldr	r3, [pc, #280]	; (8004f90 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	e001      	b.n	8004e7e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10b      	bne.n	8004e9c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e88:	f043 0220 	orr.w	r2, r3, #32
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e072      	b.n	8004f82 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff ffb8 	bl	8004e14 <LL_ADC_REG_IsConversionOngoing>
 8004ea4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff ffb2 	bl	8004e14 <LL_ADC_REG_IsConversionOngoing>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d154      	bne.n	8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d151      	bne.n	8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ebc:	4b35      	ldr	r3, [pc, #212]	; (8004f94 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004ebe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d02c      	beq.n	8004f22 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	6859      	ldr	r1, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004eda:	035b      	lsls	r3, r3, #13
 8004edc:	430b      	orrs	r3, r1
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ee4:	4829      	ldr	r0, [pc, #164]	; (8004f8c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004ee6:	f7ff ff82 	bl	8004dee <LL_ADC_IsEnabled>
 8004eea:	4604      	mov	r4, r0
 8004eec:	4828      	ldr	r0, [pc, #160]	; (8004f90 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004eee:	f7ff ff7e 	bl	8004dee <LL_ADC_IsEnabled>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	431c      	orrs	r4, r3
 8004ef6:	4828      	ldr	r0, [pc, #160]	; (8004f98 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004ef8:	f7ff ff79 	bl	8004dee <LL_ADC_IsEnabled>
 8004efc:	4603      	mov	r3, r0
 8004efe:	4323      	orrs	r3, r4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d137      	bne.n	8004f74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f0c:	f023 030f 	bic.w	r3, r3, #15
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	6811      	ldr	r1, [r2, #0]
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	6892      	ldr	r2, [r2, #8]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f20:	e028      	b.n	8004f74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f2e:	4817      	ldr	r0, [pc, #92]	; (8004f8c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004f30:	f7ff ff5d 	bl	8004dee <LL_ADC_IsEnabled>
 8004f34:	4604      	mov	r4, r0
 8004f36:	4816      	ldr	r0, [pc, #88]	; (8004f90 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004f38:	f7ff ff59 	bl	8004dee <LL_ADC_IsEnabled>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	431c      	orrs	r4, r3
 8004f40:	4815      	ldr	r0, [pc, #84]	; (8004f98 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004f42:	f7ff ff54 	bl	8004dee <LL_ADC_IsEnabled>
 8004f46:	4603      	mov	r3, r0
 8004f48:	4323      	orrs	r3, r4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d112      	bne.n	8004f74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f56:	f023 030f 	bic.w	r3, r3, #15
 8004f5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f5c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f5e:	e009      	b.n	8004f74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f64:	f043 0220 	orr.w	r2, r3, #32
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004f72:	e000      	b.n	8004f76 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f7e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	377c      	adds	r7, #124	; 0x7c
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd90      	pop	{r4, r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	50040000 	.word	0x50040000
 8004f90:	50040100 	.word	0x50040100
 8004f94:	50040300 	.word	0x50040300
 8004f98:	50040200 	.word	0x50040200

08004f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fac:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fb8:	4013      	ands	r3, r2
 8004fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fce:	4a04      	ldr	r2, [pc, #16]	; (8004fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	60d3      	str	r3, [r2, #12]
}
 8004fd4:	bf00      	nop
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	e000ed00 	.word	0xe000ed00

08004fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fe8:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <__NVIC_GetPriorityGrouping+0x18>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	0a1b      	lsrs	r3, r3, #8
 8004fee:	f003 0307 	and.w	r3, r3, #7
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	e000ed00 	.word	0xe000ed00

08005000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800500a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800500e:	2b00      	cmp	r3, #0
 8005010:	db0b      	blt.n	800502a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	f003 021f 	and.w	r2, r3, #31
 8005018:	4907      	ldr	r1, [pc, #28]	; (8005038 <__NVIC_EnableIRQ+0x38>)
 800501a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	2001      	movs	r0, #1
 8005022:	fa00 f202 	lsl.w	r2, r0, r2
 8005026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800502a:	bf00      	nop
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	e000e100 	.word	0xe000e100

0800503c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	6039      	str	r1, [r7, #0]
 8005046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800504c:	2b00      	cmp	r3, #0
 800504e:	db0a      	blt.n	8005066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	b2da      	uxtb	r2, r3
 8005054:	490c      	ldr	r1, [pc, #48]	; (8005088 <__NVIC_SetPriority+0x4c>)
 8005056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505a:	0112      	lsls	r2, r2, #4
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	440b      	add	r3, r1
 8005060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005064:	e00a      	b.n	800507c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	b2da      	uxtb	r2, r3
 800506a:	4908      	ldr	r1, [pc, #32]	; (800508c <__NVIC_SetPriority+0x50>)
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	3b04      	subs	r3, #4
 8005074:	0112      	lsls	r2, r2, #4
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	440b      	add	r3, r1
 800507a:	761a      	strb	r2, [r3, #24]
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	e000e100 	.word	0xe000e100
 800508c:	e000ed00 	.word	0xe000ed00

08005090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005090:	b480      	push	{r7}
 8005092:	b089      	sub	sp, #36	; 0x24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	f1c3 0307 	rsb	r3, r3, #7
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	bf28      	it	cs
 80050ae:	2304      	movcs	r3, #4
 80050b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	3304      	adds	r3, #4
 80050b6:	2b06      	cmp	r3, #6
 80050b8:	d902      	bls.n	80050c0 <NVIC_EncodePriority+0x30>
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3b03      	subs	r3, #3
 80050be:	e000      	b.n	80050c2 <NVIC_EncodePriority+0x32>
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050c4:	f04f 32ff 	mov.w	r2, #4294967295
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	43da      	mvns	r2, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	401a      	ands	r2, r3
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050d8:	f04f 31ff 	mov.w	r1, #4294967295
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	fa01 f303 	lsl.w	r3, r1, r3
 80050e2:	43d9      	mvns	r1, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050e8:	4313      	orrs	r3, r2
         );
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3724      	adds	r7, #36	; 0x24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff ff4c 	bl	8004f9c <__NVIC_SetPriorityGrouping>
}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800511e:	f7ff ff61 	bl	8004fe4 <__NVIC_GetPriorityGrouping>
 8005122:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	6978      	ldr	r0, [r7, #20]
 800512a:	f7ff ffb1 	bl	8005090 <NVIC_EncodePriority>
 800512e:	4602      	mov	r2, r0
 8005130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005134:	4611      	mov	r1, r2
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff ff80 	bl	800503c <__NVIC_SetPriority>
}
 800513c:	bf00      	nop
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	4603      	mov	r3, r0
 800514c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800514e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff ff54 	bl	8005000 <__NVIC_EnableIRQ>
}
 8005158:	bf00      	nop
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e098      	b.n	80052a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	4b4d      	ldr	r3, [pc, #308]	; (80052b0 <HAL_DMA_Init+0x150>)
 800517a:	429a      	cmp	r2, r3
 800517c:	d80f      	bhi.n	800519e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	4b4b      	ldr	r3, [pc, #300]	; (80052b4 <HAL_DMA_Init+0x154>)
 8005186:	4413      	add	r3, r2
 8005188:	4a4b      	ldr	r2, [pc, #300]	; (80052b8 <HAL_DMA_Init+0x158>)
 800518a:	fba2 2303 	umull	r2, r3, r2, r3
 800518e:	091b      	lsrs	r3, r3, #4
 8005190:	009a      	lsls	r2, r3, #2
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a48      	ldr	r2, [pc, #288]	; (80052bc <HAL_DMA_Init+0x15c>)
 800519a:	641a      	str	r2, [r3, #64]	; 0x40
 800519c:	e00e      	b.n	80051bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	4b46      	ldr	r3, [pc, #280]	; (80052c0 <HAL_DMA_Init+0x160>)
 80051a6:	4413      	add	r3, r2
 80051a8:	4a43      	ldr	r2, [pc, #268]	; (80052b8 <HAL_DMA_Init+0x158>)
 80051aa:	fba2 2303 	umull	r2, r3, r2, r3
 80051ae:	091b      	lsrs	r3, r3, #4
 80051b0:	009a      	lsls	r2, r3, #2
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a42      	ldr	r2, [pc, #264]	; (80052c4 <HAL_DMA_Init+0x164>)
 80051ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80051d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80051e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005216:	d039      	beq.n	800528c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	4a27      	ldr	r2, [pc, #156]	; (80052bc <HAL_DMA_Init+0x15c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d11a      	bne.n	8005258 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005222:	4b29      	ldr	r3, [pc, #164]	; (80052c8 <HAL_DMA_Init+0x168>)
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	f003 031c 	and.w	r3, r3, #28
 800522e:	210f      	movs	r1, #15
 8005230:	fa01 f303 	lsl.w	r3, r1, r3
 8005234:	43db      	mvns	r3, r3
 8005236:	4924      	ldr	r1, [pc, #144]	; (80052c8 <HAL_DMA_Init+0x168>)
 8005238:	4013      	ands	r3, r2
 800523a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800523c:	4b22      	ldr	r3, [pc, #136]	; (80052c8 <HAL_DMA_Init+0x168>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6859      	ldr	r1, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005248:	f003 031c 	and.w	r3, r3, #28
 800524c:	fa01 f303 	lsl.w	r3, r1, r3
 8005250:	491d      	ldr	r1, [pc, #116]	; (80052c8 <HAL_DMA_Init+0x168>)
 8005252:	4313      	orrs	r3, r2
 8005254:	600b      	str	r3, [r1, #0]
 8005256:	e019      	b.n	800528c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005258:	4b1c      	ldr	r3, [pc, #112]	; (80052cc <HAL_DMA_Init+0x16c>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005260:	f003 031c 	and.w	r3, r3, #28
 8005264:	210f      	movs	r1, #15
 8005266:	fa01 f303 	lsl.w	r3, r1, r3
 800526a:	43db      	mvns	r3, r3
 800526c:	4917      	ldr	r1, [pc, #92]	; (80052cc <HAL_DMA_Init+0x16c>)
 800526e:	4013      	ands	r3, r2
 8005270:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005272:	4b16      	ldr	r3, [pc, #88]	; (80052cc <HAL_DMA_Init+0x16c>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6859      	ldr	r1, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527e:	f003 031c 	and.w	r3, r3, #28
 8005282:	fa01 f303 	lsl.w	r3, r1, r3
 8005286:	4911      	ldr	r1, [pc, #68]	; (80052cc <HAL_DMA_Init+0x16c>)
 8005288:	4313      	orrs	r3, r2
 800528a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	40020407 	.word	0x40020407
 80052b4:	bffdfff8 	.word	0xbffdfff8
 80052b8:	cccccccd 	.word	0xcccccccd
 80052bc:	40020000 	.word	0x40020000
 80052c0:	bffdfbf8 	.word	0xbffdfbf8
 80052c4:	40020400 	.word	0x40020400
 80052c8:	400200a8 	.word	0x400200a8
 80052cc:	400204a8 	.word	0x400204a8

080052d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_DMA_Start_IT+0x20>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e04b      	b.n	8005388 <HAL_DMA_Start_IT+0xb8>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	d13a      	bne.n	800537a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f95f 	bl	80055ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	2b00      	cmp	r3, #0
 8005334:	d008      	beq.n	8005348 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 020e 	orr.w	r2, r2, #14
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e00f      	b.n	8005368 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0204 	bic.w	r2, r2, #4
 8005356:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 020a 	orr.w	r2, r2, #10
 8005366:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	e005      	b.n	8005386 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005382:	2302      	movs	r3, #2
 8005384:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d008      	beq.n	80053ba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2204      	movs	r2, #4
 80053ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e022      	b.n	8005400 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 020e 	bic.w	r2, r2, #14
 80053c8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0201 	bic.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053de:	f003 021c 	and.w	r2, r3, #28
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	2101      	movs	r1, #1
 80053e8:	fa01 f202 	lsl.w	r2, r1, r2
 80053ec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d005      	beq.n	8005430 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2204      	movs	r2, #4
 8005428:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	73fb      	strb	r3, [r7, #15]
 800542e:	e029      	b.n	8005484 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 020e 	bic.w	r2, r2, #14
 800543e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0201 	bic.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005454:	f003 021c 	and.w	r2, r3, #28
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	2101      	movs	r1, #1
 800545e:	fa01 f202 	lsl.w	r2, r1, r2
 8005462:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	4798      	blx	r3
    }
  }
  return status;
 8005484:	7bfb      	ldrb	r3, [r7, #15]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054aa:	f003 031c 	and.w	r3, r3, #28
 80054ae:	2204      	movs	r2, #4
 80054b0:	409a      	lsls	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4013      	ands	r3, r2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d026      	beq.n	8005508 <HAL_DMA_IRQHandler+0x7a>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d021      	beq.n	8005508 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d107      	bne.n	80054e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0204 	bic.w	r2, r2, #4
 80054e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e6:	f003 021c 	and.w	r2, r3, #28
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	2104      	movs	r1, #4
 80054f0:	fa01 f202 	lsl.w	r2, r1, r2
 80054f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d071      	beq.n	80055e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005506:	e06c      	b.n	80055e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550c:	f003 031c 	and.w	r3, r3, #28
 8005510:	2202      	movs	r2, #2
 8005512:	409a      	lsls	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4013      	ands	r3, r2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d02e      	beq.n	800557a <HAL_DMA_IRQHandler+0xec>
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d029      	beq.n	800557a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10b      	bne.n	800554c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 020a 	bic.w	r2, r2, #10
 8005542:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005550:	f003 021c 	and.w	r2, r3, #28
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	2102      	movs	r1, #2
 800555a:	fa01 f202 	lsl.w	r2, r1, r2
 800555e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d038      	beq.n	80055e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005578:	e033      	b.n	80055e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557e:	f003 031c 	and.w	r3, r3, #28
 8005582:	2208      	movs	r2, #8
 8005584:	409a      	lsls	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4013      	ands	r3, r2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d02a      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x156>
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b00      	cmp	r3, #0
 8005596:	d025      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 020e 	bic.w	r2, r2, #14
 80055a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	f003 021c 	and.w	r2, r3, #28
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	2101      	movs	r1, #1
 80055b6:	fa01 f202 	lsl.w	r2, r1, r2
 80055ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d004      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055e2:	bf00      	nop
 80055e4:	bf00      	nop
}
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fe:	f003 021c 	and.w	r2, r3, #28
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	2101      	movs	r1, #1
 8005608:	fa01 f202 	lsl.w	r2, r1, r2
 800560c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b10      	cmp	r3, #16
 800561c:	d108      	bne.n	8005630 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800562e:	e007      	b.n	8005640 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	60da      	str	r2, [r3, #12]
}
 8005640:	bf00      	nop
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800565a:	e17f      	b.n	800595c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	2101      	movs	r1, #1
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	fa01 f303 	lsl.w	r3, r1, r3
 8005668:	4013      	ands	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8171 	beq.w	8005956 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	2b01      	cmp	r3, #1
 800567e:	d005      	beq.n	800568c <HAL_GPIO_Init+0x40>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d130      	bne.n	80056ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	2203      	movs	r2, #3
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	43db      	mvns	r3, r3
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4013      	ands	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	fa02 f303 	lsl.w	r3, r2, r3
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056c2:	2201      	movs	r2, #1
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	43db      	mvns	r3, r3
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4013      	ands	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	091b      	lsrs	r3, r3, #4
 80056d8:	f003 0201 	and.w	r2, r3, #1
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d118      	bne.n	800572c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005700:	2201      	movs	r2, #1
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	43db      	mvns	r3, r3
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4013      	ands	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	08db      	lsrs	r3, r3, #3
 8005716:	f003 0201 	and.w	r2, r3, #1
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 0303 	and.w	r3, r3, #3
 8005734:	2b03      	cmp	r3, #3
 8005736:	d017      	beq.n	8005768 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	2203      	movs	r2, #3
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	43db      	mvns	r3, r3
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4013      	ands	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d123      	bne.n	80057bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	08da      	lsrs	r2, r3, #3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3208      	adds	r2, #8
 800577c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005780:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	220f      	movs	r2, #15
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	43db      	mvns	r3, r3
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4013      	ands	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	08da      	lsrs	r2, r3, #3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3208      	adds	r2, #8
 80057b6:	6939      	ldr	r1, [r7, #16]
 80057b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	2203      	movs	r2, #3
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4013      	ands	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f003 0203 	and.w	r2, r3, #3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 80ac 	beq.w	8005956 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057fe:	4b5f      	ldr	r3, [pc, #380]	; (800597c <HAL_GPIO_Init+0x330>)
 8005800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005802:	4a5e      	ldr	r2, [pc, #376]	; (800597c <HAL_GPIO_Init+0x330>)
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	6613      	str	r3, [r2, #96]	; 0x60
 800580a:	4b5c      	ldr	r3, [pc, #368]	; (800597c <HAL_GPIO_Init+0x330>)
 800580c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	60bb      	str	r3, [r7, #8]
 8005814:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005816:	4a5a      	ldr	r2, [pc, #360]	; (8005980 <HAL_GPIO_Init+0x334>)
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	089b      	lsrs	r3, r3, #2
 800581c:	3302      	adds	r3, #2
 800581e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005822:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	220f      	movs	r2, #15
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43db      	mvns	r3, r3
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4013      	ands	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005840:	d025      	beq.n	800588e <HAL_GPIO_Init+0x242>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a4f      	ldr	r2, [pc, #316]	; (8005984 <HAL_GPIO_Init+0x338>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01f      	beq.n	800588a <HAL_GPIO_Init+0x23e>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a4e      	ldr	r2, [pc, #312]	; (8005988 <HAL_GPIO_Init+0x33c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d019      	beq.n	8005886 <HAL_GPIO_Init+0x23a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a4d      	ldr	r2, [pc, #308]	; (800598c <HAL_GPIO_Init+0x340>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d013      	beq.n	8005882 <HAL_GPIO_Init+0x236>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a4c      	ldr	r2, [pc, #304]	; (8005990 <HAL_GPIO_Init+0x344>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00d      	beq.n	800587e <HAL_GPIO_Init+0x232>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a4b      	ldr	r2, [pc, #300]	; (8005994 <HAL_GPIO_Init+0x348>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d007      	beq.n	800587a <HAL_GPIO_Init+0x22e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a4a      	ldr	r2, [pc, #296]	; (8005998 <HAL_GPIO_Init+0x34c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d101      	bne.n	8005876 <HAL_GPIO_Init+0x22a>
 8005872:	2306      	movs	r3, #6
 8005874:	e00c      	b.n	8005890 <HAL_GPIO_Init+0x244>
 8005876:	2307      	movs	r3, #7
 8005878:	e00a      	b.n	8005890 <HAL_GPIO_Init+0x244>
 800587a:	2305      	movs	r3, #5
 800587c:	e008      	b.n	8005890 <HAL_GPIO_Init+0x244>
 800587e:	2304      	movs	r3, #4
 8005880:	e006      	b.n	8005890 <HAL_GPIO_Init+0x244>
 8005882:	2303      	movs	r3, #3
 8005884:	e004      	b.n	8005890 <HAL_GPIO_Init+0x244>
 8005886:	2302      	movs	r3, #2
 8005888:	e002      	b.n	8005890 <HAL_GPIO_Init+0x244>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <HAL_GPIO_Init+0x244>
 800588e:	2300      	movs	r3, #0
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	f002 0203 	and.w	r2, r2, #3
 8005896:	0092      	lsls	r2, r2, #2
 8005898:	4093      	lsls	r3, r2
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80058a0:	4937      	ldr	r1, [pc, #220]	; (8005980 <HAL_GPIO_Init+0x334>)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	089b      	lsrs	r3, r3, #2
 80058a6:	3302      	adds	r3, #2
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058ae:	4b3b      	ldr	r3, [pc, #236]	; (800599c <HAL_GPIO_Init+0x350>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	43db      	mvns	r3, r3
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4013      	ands	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058d2:	4a32      	ldr	r2, [pc, #200]	; (800599c <HAL_GPIO_Init+0x350>)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80058d8:	4b30      	ldr	r3, [pc, #192]	; (800599c <HAL_GPIO_Init+0x350>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	43db      	mvns	r3, r3
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4013      	ands	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058fc:	4a27      	ldr	r2, [pc, #156]	; (800599c <HAL_GPIO_Init+0x350>)
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005902:	4b26      	ldr	r3, [pc, #152]	; (800599c <HAL_GPIO_Init+0x350>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	43db      	mvns	r3, r3
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4013      	ands	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005926:	4a1d      	ldr	r2, [pc, #116]	; (800599c <HAL_GPIO_Init+0x350>)
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800592c:	4b1b      	ldr	r3, [pc, #108]	; (800599c <HAL_GPIO_Init+0x350>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	43db      	mvns	r3, r3
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4013      	ands	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005950:	4a12      	ldr	r2, [pc, #72]	; (800599c <HAL_GPIO_Init+0x350>)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	3301      	adds	r3, #1
 800595a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	fa22 f303 	lsr.w	r3, r2, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	f47f ae78 	bne.w	800565c <HAL_GPIO_Init+0x10>
  }
}
 800596c:	bf00      	nop
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40021000 	.word	0x40021000
 8005980:	40010000 	.word	0x40010000
 8005984:	48000400 	.word	0x48000400
 8005988:	48000800 	.word	0x48000800
 800598c:	48000c00 	.word	0x48000c00
 8005990:	48001000 	.word	0x48001000
 8005994:	48001400 	.word	0x48001400
 8005998:	48001800 	.word	0x48001800
 800599c:	40010400 	.word	0x40010400

080059a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	807b      	strh	r3, [r7, #2]
 80059ac:	4613      	mov	r3, r2
 80059ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059b0:	787b      	ldrb	r3, [r7, #1]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059b6:	887a      	ldrh	r2, [r7, #2]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059bc:	e002      	b.n	80059c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059be:	887a      	ldrh	r2, [r7, #2]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80059da:	4b08      	ldr	r3, [pc, #32]	; (80059fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059dc:	695a      	ldr	r2, [r3, #20]
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	4013      	ands	r3, r2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d006      	beq.n	80059f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059e6:	4a05      	ldr	r2, [pc, #20]	; (80059fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fc fcfa 	bl	80023e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80059f4:	bf00      	nop
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40010400 	.word	0x40010400

08005a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e08d      	b.n	8005b2e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fd fa5c 	bl	8002ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2224      	movs	r2, #36	; 0x24
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0201 	bic.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d107      	bne.n	8005a7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a76:	609a      	str	r2, [r3, #8]
 8005a78:	e006      	b.n	8005a88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005a86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d108      	bne.n	8005aa2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a9e:	605a      	str	r2, [r3, #4]
 8005aa0:	e007      	b.n	8005ab2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ab0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6812      	ldr	r2, [r2, #0]
 8005abc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ad4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69d9      	ldr	r1, [r3, #28]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a1a      	ldr	r2, [r3, #32]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	607a      	str	r2, [r7, #4]
 8005b42:	461a      	mov	r2, r3
 8005b44:	460b      	mov	r3, r1
 8005b46:	817b      	strh	r3, [r7, #10]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	f040 80fd 	bne.w	8005d54 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_I2C_Master_Transmit+0x30>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e0f6      	b.n	8005d56 <HAL_I2C_Master_Transmit+0x21e>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b70:	f7fd fe24 	bl	80037bc <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	2319      	movs	r3, #25
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fce0 	bl	8006548 <I2C_WaitOnFlagUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e0e1      	b.n	8005d56 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2221      	movs	r2, #33	; 0x21
 8005b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2210      	movs	r2, #16
 8005b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	893a      	ldrh	r2, [r7, #8]
 8005bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2bff      	cmp	r3, #255	; 0xff
 8005bc2:	d906      	bls.n	8005bd2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	22ff      	movs	r2, #255	; 0xff
 8005bc8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005bca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	e007      	b.n	8005be2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005bdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005be0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d024      	beq.n	8005c34 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	781a      	ldrb	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	3301      	adds	r3, #1
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	8979      	ldrh	r1, [r7, #10]
 8005c26:	4b4e      	ldr	r3, [pc, #312]	; (8005d60 <HAL_I2C_Master_Transmit+0x228>)
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fedb 	bl	80069e8 <I2C_TransferConfig>
 8005c32:	e066      	b.n	8005d02 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	8979      	ldrh	r1, [r7, #10]
 8005c3c:	4b48      	ldr	r3, [pc, #288]	; (8005d60 <HAL_I2C_Master_Transmit+0x228>)
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 fed0 	bl	80069e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005c48:	e05b      	b.n	8005d02 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	6a39      	ldr	r1, [r7, #32]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 fcd3 	bl	80065fa <I2C_WaitOnTXISFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e07b      	b.n	8005d56 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	781a      	ldrb	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d034      	beq.n	8005d02 <HAL_I2C_Master_Transmit+0x1ca>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d130      	bne.n	8005d02 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2180      	movs	r1, #128	; 0x80
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 fc4c 	bl	8006548 <I2C_WaitOnFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e04d      	b.n	8005d56 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2bff      	cmp	r3, #255	; 0xff
 8005cc2:	d90e      	bls.n	8005ce2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	22ff      	movs	r2, #255	; 0xff
 8005cc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	8979      	ldrh	r1, [r7, #10]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 fe84 	bl	80069e8 <I2C_TransferConfig>
 8005ce0:	e00f      	b.n	8005d02 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	8979      	ldrh	r1, [r7, #10]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 fe73 	bl	80069e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d19e      	bne.n	8005c4a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	6a39      	ldr	r1, [r7, #32]
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 fcb9 	bl	8006688 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e01a      	b.n	8005d56 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2220      	movs	r2, #32
 8005d26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6859      	ldr	r1, [r3, #4]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <HAL_I2C_Master_Transmit+0x22c>)
 8005d34:	400b      	ands	r3, r1
 8005d36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	e000      	b.n	8005d56 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005d54:	2302      	movs	r3, #2
  }
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	80002000 	.word	0x80002000
 8005d64:	fe00e800 	.word	0xfe00e800

08005d68 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af02      	add	r7, sp, #8
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	607a      	str	r2, [r7, #4]
 8005d72:	461a      	mov	r2, r3
 8005d74:	460b      	mov	r3, r1
 8005d76:	817b      	strh	r3, [r7, #10]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b20      	cmp	r3, #32
 8005d86:	f040 80db 	bne.w	8005f40 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_I2C_Master_Receive+0x30>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e0d4      	b.n	8005f42 <HAL_I2C_Master_Receive+0x1da>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005da0:	f7fd fd0c 	bl	80037bc <HAL_GetTick>
 8005da4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	2319      	movs	r3, #25
 8005dac:	2201      	movs	r2, #1
 8005dae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 fbc8 	bl	8006548 <I2C_WaitOnFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e0bf      	b.n	8005f42 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2222      	movs	r2, #34	; 0x22
 8005dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2210      	movs	r2, #16
 8005dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	893a      	ldrh	r2, [r7, #8]
 8005de2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2bff      	cmp	r3, #255	; 0xff
 8005df2:	d90e      	bls.n	8005e12 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	8979      	ldrh	r1, [r7, #10]
 8005e02:	4b52      	ldr	r3, [pc, #328]	; (8005f4c <HAL_I2C_Master_Receive+0x1e4>)
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 fdec 	bl	80069e8 <I2C_TransferConfig>
 8005e10:	e06d      	b.n	8005eee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	8979      	ldrh	r1, [r7, #10]
 8005e24:	4b49      	ldr	r3, [pc, #292]	; (8005f4c <HAL_I2C_Master_Receive+0x1e4>)
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 fddb 	bl	80069e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005e32:	e05c      	b.n	8005eee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	6a39      	ldr	r1, [r7, #32]
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fc69 	bl	8006710 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e07c      	b.n	8005f42 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3b01      	subs	r3, #1
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d034      	beq.n	8005eee <HAL_I2C_Master_Receive+0x186>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d130      	bne.n	8005eee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	2200      	movs	r2, #0
 8005e94:	2180      	movs	r1, #128	; 0x80
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 fb56 	bl	8006548 <I2C_WaitOnFlagUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e04d      	b.n	8005f42 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2bff      	cmp	r3, #255	; 0xff
 8005eae:	d90e      	bls.n	8005ece <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	22ff      	movs	r2, #255	; 0xff
 8005eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	8979      	ldrh	r1, [r7, #10]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 fd8e 	bl	80069e8 <I2C_TransferConfig>
 8005ecc:	e00f      	b.n	8005eee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	8979      	ldrh	r1, [r7, #10]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fd7d 	bl	80069e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d19d      	bne.n	8005e34 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	6a39      	ldr	r1, [r7, #32]
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fbc3 	bl	8006688 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e01a      	b.n	8005f42 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2220      	movs	r2, #32
 8005f12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6859      	ldr	r1, [r3, #4]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <HAL_I2C_Master_Receive+0x1e8>)
 8005f20:	400b      	ands	r3, r1
 8005f22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e000      	b.n	8005f42 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005f40:	2302      	movs	r3, #2
  }
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	80002400 	.word	0x80002400
 8005f50:	fe00e800 	.word	0xfe00e800

08005f54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	4611      	mov	r1, r2
 8005f60:	461a      	mov	r2, r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	817b      	strh	r3, [r7, #10]
 8005f66:	460b      	mov	r3, r1
 8005f68:	813b      	strh	r3, [r7, #8]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	f040 80f9 	bne.w	800616e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <HAL_I2C_Mem_Write+0x34>
 8005f82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d105      	bne.n	8005f94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e0ed      	b.n	8006170 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_I2C_Mem_Write+0x4e>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e0e6      	b.n	8006170 <HAL_I2C_Mem_Write+0x21c>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005faa:	f7fd fc07 	bl	80037bc <HAL_GetTick>
 8005fae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	2319      	movs	r3, #25
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fac3 	bl	8006548 <I2C_WaitOnFlagUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0d1      	b.n	8006170 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2221      	movs	r2, #33	; 0x21
 8005fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2240      	movs	r2, #64	; 0x40
 8005fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a3a      	ldr	r2, [r7, #32]
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ff4:	88f8      	ldrh	r0, [r7, #6]
 8005ff6:	893a      	ldrh	r2, [r7, #8]
 8005ff8:	8979      	ldrh	r1, [r7, #10]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	9301      	str	r3, [sp, #4]
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	4603      	mov	r3, r0
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 f9d3 	bl	80063b0 <I2C_RequestMemoryWrite>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e0a9      	b.n	8006170 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006020:	b29b      	uxth	r3, r3
 8006022:	2bff      	cmp	r3, #255	; 0xff
 8006024:	d90e      	bls.n	8006044 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	22ff      	movs	r2, #255	; 0xff
 800602a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006030:	b2da      	uxtb	r2, r3
 8006032:	8979      	ldrh	r1, [r7, #10]
 8006034:	2300      	movs	r3, #0
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fcd3 	bl	80069e8 <I2C_TransferConfig>
 8006042:	e00f      	b.n	8006064 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006048:	b29a      	uxth	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006052:	b2da      	uxtb	r2, r3
 8006054:	8979      	ldrh	r1, [r7, #10]
 8006056:	2300      	movs	r3, #0
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 fcc2 	bl	80069e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 fac6 	bl	80065fa <I2C_WaitOnTXISFlagUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e07b      	b.n	8006170 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	781a      	ldrb	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d034      	beq.n	800611c <HAL_I2C_Mem_Write+0x1c8>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d130      	bne.n	800611c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	2200      	movs	r2, #0
 80060c2:	2180      	movs	r1, #128	; 0x80
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 fa3f 	bl	8006548 <I2C_WaitOnFlagUntilTimeout>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e04d      	b.n	8006170 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2bff      	cmp	r3, #255	; 0xff
 80060dc:	d90e      	bls.n	80060fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	22ff      	movs	r2, #255	; 0xff
 80060e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	8979      	ldrh	r1, [r7, #10]
 80060ec:	2300      	movs	r3, #0
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fc77 	bl	80069e8 <I2C_TransferConfig>
 80060fa:	e00f      	b.n	800611c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610a:	b2da      	uxtb	r2, r3
 800610c:	8979      	ldrh	r1, [r7, #10]
 800610e:	2300      	movs	r3, #0
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 fc66 	bl	80069e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d19e      	bne.n	8006064 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 faac 	bl	8006688 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e01a      	b.n	8006170 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2220      	movs	r2, #32
 8006140:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6859      	ldr	r1, [r3, #4]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	4b0a      	ldr	r3, [pc, #40]	; (8006178 <HAL_I2C_Mem_Write+0x224>)
 800614e:	400b      	ands	r3, r1
 8006150:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	e000      	b.n	8006170 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800616e:	2302      	movs	r3, #2
  }
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	fe00e800 	.word	0xfe00e800

0800617c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	4608      	mov	r0, r1
 8006186:	4611      	mov	r1, r2
 8006188:	461a      	mov	r2, r3
 800618a:	4603      	mov	r3, r0
 800618c:	817b      	strh	r3, [r7, #10]
 800618e:	460b      	mov	r3, r1
 8006190:	813b      	strh	r3, [r7, #8]
 8006192:	4613      	mov	r3, r2
 8006194:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b20      	cmp	r3, #32
 80061a0:	f040 80fd 	bne.w	800639e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_I2C_Mem_Read+0x34>
 80061aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d105      	bne.n	80061bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0f1      	b.n	80063a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d101      	bne.n	80061ca <HAL_I2C_Mem_Read+0x4e>
 80061c6:	2302      	movs	r3, #2
 80061c8:	e0ea      	b.n	80063a0 <HAL_I2C_Mem_Read+0x224>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061d2:	f7fd faf3 	bl	80037bc <HAL_GetTick>
 80061d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	2319      	movs	r3, #25
 80061de:	2201      	movs	r2, #1
 80061e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f9af 	bl	8006548 <I2C_WaitOnFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e0d5      	b.n	80063a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2222      	movs	r2, #34	; 0x22
 80061f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2240      	movs	r2, #64	; 0x40
 8006200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a3a      	ldr	r2, [r7, #32]
 800620e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006214:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800621c:	88f8      	ldrh	r0, [r7, #6]
 800621e:	893a      	ldrh	r2, [r7, #8]
 8006220:	8979      	ldrh	r1, [r7, #10]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	4603      	mov	r3, r0
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f913 	bl	8006458 <I2C_RequestMemoryRead>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e0ad      	b.n	80063a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006248:	b29b      	uxth	r3, r3
 800624a:	2bff      	cmp	r3, #255	; 0xff
 800624c:	d90e      	bls.n	800626c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006258:	b2da      	uxtb	r2, r3
 800625a:	8979      	ldrh	r1, [r7, #10]
 800625c:	4b52      	ldr	r3, [pc, #328]	; (80063a8 <HAL_I2C_Mem_Read+0x22c>)
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 fbbf 	bl	80069e8 <I2C_TransferConfig>
 800626a:	e00f      	b.n	800628c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627a:	b2da      	uxtb	r2, r3
 800627c:	8979      	ldrh	r1, [r7, #10]
 800627e:	4b4a      	ldr	r3, [pc, #296]	; (80063a8 <HAL_I2C_Mem_Read+0x22c>)
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 fbae 	bl	80069e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	2200      	movs	r2, #0
 8006294:	2104      	movs	r1, #4
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 f956 	bl	8006548 <I2C_WaitOnFlagUntilTimeout>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e07c      	b.n	80063a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d034      	beq.n	800634c <HAL_I2C_Mem_Read+0x1d0>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d130      	bne.n	800634c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	2200      	movs	r2, #0
 80062f2:	2180      	movs	r1, #128	; 0x80
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f927 	bl	8006548 <I2C_WaitOnFlagUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e04d      	b.n	80063a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006308:	b29b      	uxth	r3, r3
 800630a:	2bff      	cmp	r3, #255	; 0xff
 800630c:	d90e      	bls.n	800632c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2201      	movs	r2, #1
 8006312:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006318:	b2da      	uxtb	r2, r3
 800631a:	8979      	ldrh	r1, [r7, #10]
 800631c:	2300      	movs	r3, #0
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 fb5f 	bl	80069e8 <I2C_TransferConfig>
 800632a:	e00f      	b.n	800634c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633a:	b2da      	uxtb	r2, r3
 800633c:	8979      	ldrh	r1, [r7, #10]
 800633e:	2300      	movs	r3, #0
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 fb4e 	bl	80069e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d19a      	bne.n	800628c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f994 	bl	8006688 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e01a      	b.n	80063a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2220      	movs	r2, #32
 8006370:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6859      	ldr	r1, [r3, #4]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <HAL_I2C_Mem_Read+0x230>)
 800637e:	400b      	ands	r3, r1
 8006380:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2220      	movs	r2, #32
 8006386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	e000      	b.n	80063a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800639e:	2302      	movs	r3, #2
  }
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	80002400 	.word	0x80002400
 80063ac:	fe00e800 	.word	0xfe00e800

080063b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af02      	add	r7, sp, #8
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	4608      	mov	r0, r1
 80063ba:	4611      	mov	r1, r2
 80063bc:	461a      	mov	r2, r3
 80063be:	4603      	mov	r3, r0
 80063c0:	817b      	strh	r3, [r7, #10]
 80063c2:	460b      	mov	r3, r1
 80063c4:	813b      	strh	r3, [r7, #8]
 80063c6:	4613      	mov	r3, r2
 80063c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80063ca:	88fb      	ldrh	r3, [r7, #6]
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	8979      	ldrh	r1, [r7, #10]
 80063d0:	4b20      	ldr	r3, [pc, #128]	; (8006454 <I2C_RequestMemoryWrite+0xa4>)
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 fb05 	bl	80069e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	69b9      	ldr	r1, [r7, #24]
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 f909 	bl	80065fa <I2C_WaitOnTXISFlagUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e02c      	b.n	800644c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d105      	bne.n	8006404 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063f8:	893b      	ldrh	r3, [r7, #8]
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	629a      	str	r2, [r3, #40]	; 0x28
 8006402:	e015      	b.n	8006430 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006404:	893b      	ldrh	r3, [r7, #8]
 8006406:	0a1b      	lsrs	r3, r3, #8
 8006408:	b29b      	uxth	r3, r3
 800640a:	b2da      	uxtb	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	69b9      	ldr	r1, [r7, #24]
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 f8ef 	bl	80065fa <I2C_WaitOnTXISFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e012      	b.n	800644c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006426:	893b      	ldrh	r3, [r7, #8]
 8006428:	b2da      	uxtb	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2200      	movs	r2, #0
 8006438:	2180      	movs	r1, #128	; 0x80
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 f884 	bl	8006548 <I2C_WaitOnFlagUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	80002000 	.word	0x80002000

08006458 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af02      	add	r7, sp, #8
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	4608      	mov	r0, r1
 8006462:	4611      	mov	r1, r2
 8006464:	461a      	mov	r2, r3
 8006466:	4603      	mov	r3, r0
 8006468:	817b      	strh	r3, [r7, #10]
 800646a:	460b      	mov	r3, r1
 800646c:	813b      	strh	r3, [r7, #8]
 800646e:	4613      	mov	r3, r2
 8006470:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	b2da      	uxtb	r2, r3
 8006476:	8979      	ldrh	r1, [r7, #10]
 8006478:	4b20      	ldr	r3, [pc, #128]	; (80064fc <I2C_RequestMemoryRead+0xa4>)
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	2300      	movs	r3, #0
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fab2 	bl	80069e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006484:	69fa      	ldr	r2, [r7, #28]
 8006486:	69b9      	ldr	r1, [r7, #24]
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f8b6 	bl	80065fa <I2C_WaitOnTXISFlagUntilTimeout>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e02c      	b.n	80064f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d105      	bne.n	80064aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800649e:	893b      	ldrh	r3, [r7, #8]
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	629a      	str	r2, [r3, #40]	; 0x28
 80064a8:	e015      	b.n	80064d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064aa:	893b      	ldrh	r3, [r7, #8]
 80064ac:	0a1b      	lsrs	r3, r3, #8
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	69b9      	ldr	r1, [r7, #24]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 f89c 	bl	80065fa <I2C_WaitOnTXISFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e012      	b.n	80064f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064cc:	893b      	ldrh	r3, [r7, #8]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	2200      	movs	r2, #0
 80064de:	2140      	movs	r1, #64	; 0x40
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 f831 	bl	8006548 <I2C_WaitOnFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e000      	b.n	80064f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	80002000 	.word	0x80002000

08006500 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b02      	cmp	r3, #2
 8006514:	d103      	bne.n	800651e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2200      	movs	r2, #0
 800651c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b01      	cmp	r3, #1
 800652a:	d007      	beq.n	800653c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0201 	orr.w	r2, r2, #1
 800653a:	619a      	str	r2, [r3, #24]
  }
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006558:	e03b      	b.n	80065d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f962 	bl	8006828 <I2C_IsErrorOccurred>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e041      	b.n	80065f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006574:	d02d      	beq.n	80065d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006576:	f7fd f921 	bl	80037bc <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d302      	bcc.n	800658c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d122      	bne.n	80065d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	4013      	ands	r3, r2
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	429a      	cmp	r2, r3
 800659a:	bf0c      	ite	eq
 800659c:	2301      	moveq	r3, #1
 800659e:	2300      	movne	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	461a      	mov	r2, r3
 80065a4:	79fb      	ldrb	r3, [r7, #7]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d113      	bne.n	80065d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ae:	f043 0220 	orr.w	r2, r3, #32
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e00f      	b.n	80065f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	699a      	ldr	r2, [r3, #24]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4013      	ands	r3, r2
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	bf0c      	ite	eq
 80065e2:	2301      	moveq	r3, #1
 80065e4:	2300      	movne	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	79fb      	ldrb	r3, [r7, #7]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d0b4      	beq.n	800655a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006606:	e033      	b.n	8006670 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f90b 	bl	8006828 <I2C_IsErrorOccurred>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e031      	b.n	8006680 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006622:	d025      	beq.n	8006670 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006624:	f7fd f8ca 	bl	80037bc <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	429a      	cmp	r2, r3
 8006632:	d302      	bcc.n	800663a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d11a      	bne.n	8006670 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b02      	cmp	r3, #2
 8006646:	d013      	beq.n	8006670 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664c:	f043 0220 	orr.w	r2, r3, #32
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e007      	b.n	8006680 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b02      	cmp	r3, #2
 800667c:	d1c4      	bne.n	8006608 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006694:	e02f      	b.n	80066f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	68b9      	ldr	r1, [r7, #8]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 f8c4 	bl	8006828 <I2C_IsErrorOccurred>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e02d      	b.n	8006706 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066aa:	f7fd f887 	bl	80037bc <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d302      	bcc.n	80066c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d11a      	bne.n	80066f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d013      	beq.n	80066f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d2:	f043 0220 	orr.w	r2, r3, #32
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2220      	movs	r2, #32
 80066de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e007      	b.n	8006706 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	f003 0320 	and.w	r3, r3, #32
 8006700:	2b20      	cmp	r3, #32
 8006702:	d1c8      	bne.n	8006696 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006720:	e071      	b.n	8006806 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	68b9      	ldr	r1, [r7, #8]
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f87e 	bl	8006828 <I2C_IsErrorOccurred>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b20      	cmp	r3, #32
 8006742:	d13b      	bne.n	80067bc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006744:	7dfb      	ldrb	r3, [r7, #23]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d138      	bne.n	80067bc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b04      	cmp	r3, #4
 8006756:	d105      	bne.n	8006764 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	f003 0310 	and.w	r3, r3, #16
 800676e:	2b10      	cmp	r3, #16
 8006770:	d121      	bne.n	80067b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2210      	movs	r2, #16
 8006778:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2204      	movs	r2, #4
 800677e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2220      	movs	r2, #32
 8006786:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6859      	ldr	r1, [r3, #4]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	4b24      	ldr	r3, [pc, #144]	; (8006824 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006794:	400b      	ands	r3, r1
 8006796:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2220      	movs	r2, #32
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	75fb      	strb	r3, [r7, #23]
 80067b4:	e002      	b.n	80067bc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80067bc:	f7fc fffe 	bl	80037bc <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d302      	bcc.n	80067d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d119      	bne.n	8006806 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d116      	bne.n	8006806 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d00f      	beq.n	8006806 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ea:	f043 0220 	orr.w	r2, r3, #32
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b04      	cmp	r3, #4
 8006812:	d002      	beq.n	800681a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006814:	7dfb      	ldrb	r3, [r7, #23]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d083      	beq.n	8006722 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800681a:	7dfb      	ldrb	r3, [r7, #23]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	fe00e800 	.word	0xfe00e800

08006828 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	f003 0310 	and.w	r3, r3, #16
 8006850:	2b00      	cmp	r3, #0
 8006852:	d068      	beq.n	8006926 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2210      	movs	r2, #16
 800685a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800685c:	e049      	b.n	80068f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006864:	d045      	beq.n	80068f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006866:	f7fc ffa9 	bl	80037bc <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	429a      	cmp	r2, r3
 8006874:	d302      	bcc.n	800687c <I2C_IsErrorOccurred+0x54>
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d13a      	bne.n	80068f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006886:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800688e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800689a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800689e:	d121      	bne.n	80068e4 <I2C_IsErrorOccurred+0xbc>
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068a6:	d01d      	beq.n	80068e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80068a8:	7cfb      	ldrb	r3, [r7, #19]
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d01a      	beq.n	80068e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068be:	f7fc ff7d 	bl	80037bc <HAL_GetTick>
 80068c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068c4:	e00e      	b.n	80068e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068c6:	f7fc ff79 	bl	80037bc <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b19      	cmp	r3, #25
 80068d2:	d907      	bls.n	80068e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	f043 0320 	orr.w	r3, r3, #32
 80068da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80068e2:	e006      	b.n	80068f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	f003 0320 	and.w	r3, r3, #32
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d1e9      	bne.n	80068c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	d003      	beq.n	8006908 <I2C_IsErrorOccurred+0xe0>
 8006900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0aa      	beq.n	800685e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800690c:	2b00      	cmp	r3, #0
 800690e:	d103      	bne.n	8006918 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2220      	movs	r2, #32
 8006916:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	f043 0304 	orr.w	r3, r3, #4
 800691e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	f043 0301 	orr.w	r3, r3, #1
 800693e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006948:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00b      	beq.n	8006972 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	f043 0308 	orr.w	r3, r3, #8
 8006960:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800696a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00b      	beq.n	8006994 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	f043 0302 	orr.w	r3, r3, #2
 8006982:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800698c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01c      	beq.n	80069d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7ff fdaf 	bl	8006500 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6859      	ldr	r1, [r3, #4]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	4b0d      	ldr	r3, [pc, #52]	; (80069e4 <I2C_IsErrorOccurred+0x1bc>)
 80069ae:	400b      	ands	r3, r1
 80069b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	431a      	orrs	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80069d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3728      	adds	r7, #40	; 0x28
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	fe00e800 	.word	0xfe00e800

080069e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	607b      	str	r3, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	817b      	strh	r3, [r7, #10]
 80069f6:	4613      	mov	r3, r2
 80069f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069fa:	897b      	ldrh	r3, [r7, #10]
 80069fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a00:	7a7b      	ldrb	r3, [r7, #9]
 8006a02:	041b      	lsls	r3, r3, #16
 8006a04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	0d5b      	lsrs	r3, r3, #21
 8006a22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006a26:	4b08      	ldr	r3, [pc, #32]	; (8006a48 <I2C_TransferConfig+0x60>)
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	43db      	mvns	r3, r3
 8006a2c:	ea02 0103 	and.w	r1, r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	03ff63ff 	.word	0x03ff63ff

08006a4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d138      	bne.n	8006ad4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e032      	b.n	8006ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2224      	movs	r2, #36	; 0x24
 8006a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0201 	bic.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6819      	ldr	r1, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e000      	b.n	8006ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ad4:	2302      	movs	r3, #2
  }
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b20      	cmp	r3, #32
 8006af6:	d139      	bne.n	8006b6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d101      	bne.n	8006b06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e033      	b.n	8006b6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2224      	movs	r2, #36	; 0x24
 8006b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f022 0201 	bic.w	r2, r2, #1
 8006b24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0201 	orr.w	r2, r2, #1
 8006b56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e000      	b.n	8006b6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b6c:	2302      	movs	r3, #2
  }
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006b80:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <HAL_PWREx_GetVoltageRange+0x18>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	40007000 	.word	0x40007000

08006b98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ba6:	d130      	bne.n	8006c0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ba8:	4b23      	ldr	r3, [pc, #140]	; (8006c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bb4:	d038      	beq.n	8006c28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bb6:	4b20      	ldr	r3, [pc, #128]	; (8006c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006bbe:	4a1e      	ldr	r2, [pc, #120]	; (8006c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006bc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006bc6:	4b1d      	ldr	r3, [pc, #116]	; (8006c3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2232      	movs	r2, #50	; 0x32
 8006bcc:	fb02 f303 	mul.w	r3, r2, r3
 8006bd0:	4a1b      	ldr	r2, [pc, #108]	; (8006c40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd6:	0c9b      	lsrs	r3, r3, #18
 8006bd8:	3301      	adds	r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bdc:	e002      	b.n	8006be4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006be4:	4b14      	ldr	r3, [pc, #80]	; (8006c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bf0:	d102      	bne.n	8006bf8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1f2      	bne.n	8006bde <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006bf8:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c04:	d110      	bne.n	8006c28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e00f      	b.n	8006c2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c16:	d007      	beq.n	8006c28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006c18:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c20:	4a05      	ldr	r2, [pc, #20]	; (8006c38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40007000 	.word	0x40007000
 8006c3c:	200000c8 	.word	0x200000c8
 8006c40:	431bde83 	.word	0x431bde83

08006c44 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e3ca      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c56:	4b97      	ldr	r3, [pc, #604]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f003 030c 	and.w	r3, r3, #12
 8006c5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c60:	4b94      	ldr	r3, [pc, #592]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0310 	and.w	r3, r3, #16
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 80e4 	beq.w	8006e40 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d007      	beq.n	8006c8e <HAL_RCC_OscConfig+0x4a>
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b0c      	cmp	r3, #12
 8006c82:	f040 808b 	bne.w	8006d9c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	f040 8087 	bne.w	8006d9c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c8e:	4b89      	ldr	r3, [pc, #548]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d005      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x62>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e3a2      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1a      	ldr	r2, [r3, #32]
 8006caa:	4b82      	ldr	r3, [pc, #520]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x7c>
 8006cb6:	4b7f      	ldr	r3, [pc, #508]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cbe:	e005      	b.n	8006ccc <HAL_RCC_OscConfig+0x88>
 8006cc0:	4b7c      	ldr	r3, [pc, #496]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cc6:	091b      	lsrs	r3, r3, #4
 8006cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d223      	bcs.n	8006d18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fd87 	bl	80077e8 <RCC_SetFlashLatencyFromMSIRange>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e383      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ce4:	4b73      	ldr	r3, [pc, #460]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a72      	ldr	r2, [pc, #456]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006cea:	f043 0308 	orr.w	r3, r3, #8
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	4b70      	ldr	r3, [pc, #448]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	496d      	ldr	r1, [pc, #436]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d02:	4b6c      	ldr	r3, [pc, #432]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	021b      	lsls	r3, r3, #8
 8006d10:	4968      	ldr	r1, [pc, #416]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	604b      	str	r3, [r1, #4]
 8006d16:	e025      	b.n	8006d64 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d18:	4b66      	ldr	r3, [pc, #408]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a65      	ldr	r2, [pc, #404]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006d1e:	f043 0308 	orr.w	r3, r3, #8
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	4b63      	ldr	r3, [pc, #396]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	4960      	ldr	r1, [pc, #384]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d36:	4b5f      	ldr	r3, [pc, #380]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	021b      	lsls	r3, r3, #8
 8006d44:	495b      	ldr	r1, [pc, #364]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d109      	bne.n	8006d64 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 fd47 	bl	80077e8 <RCC_SetFlashLatencyFromMSIRange>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e343      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d64:	f000 fc4a 	bl	80075fc <HAL_RCC_GetSysClockFreq>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	4b52      	ldr	r3, [pc, #328]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	091b      	lsrs	r3, r3, #4
 8006d70:	f003 030f 	and.w	r3, r3, #15
 8006d74:	4950      	ldr	r1, [pc, #320]	; (8006eb8 <HAL_RCC_OscConfig+0x274>)
 8006d76:	5ccb      	ldrb	r3, [r1, r3]
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d80:	4a4e      	ldr	r2, [pc, #312]	; (8006ebc <HAL_RCC_OscConfig+0x278>)
 8006d82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006d84:	4b4e      	ldr	r3, [pc, #312]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fc fb2b 	bl	80033e4 <HAL_InitTick>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d052      	beq.n	8006e3e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	e327      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d032      	beq.n	8006e0a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006da4:	4b43      	ldr	r3, [pc, #268]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a42      	ldr	r2, [pc, #264]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006daa:	f043 0301 	orr.w	r3, r3, #1
 8006dae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006db0:	f7fc fd04 	bl	80037bc <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006db8:	f7fc fd00 	bl	80037bc <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e310      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006dca:	4b3a      	ldr	r3, [pc, #232]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0f0      	beq.n	8006db8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006dd6:	4b37      	ldr	r3, [pc, #220]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a36      	ldr	r2, [pc, #216]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006ddc:	f043 0308 	orr.w	r3, r3, #8
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	4b34      	ldr	r3, [pc, #208]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	4931      	ldr	r1, [pc, #196]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006df4:	4b2f      	ldr	r3, [pc, #188]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	021b      	lsls	r3, r3, #8
 8006e02:	492c      	ldr	r1, [pc, #176]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	604b      	str	r3, [r1, #4]
 8006e08:	e01a      	b.n	8006e40 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006e0a:	4b2a      	ldr	r3, [pc, #168]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a29      	ldr	r2, [pc, #164]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006e10:	f023 0301 	bic.w	r3, r3, #1
 8006e14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e16:	f7fc fcd1 	bl	80037bc <HAL_GetTick>
 8006e1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e1c:	e008      	b.n	8006e30 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e1e:	f7fc fccd 	bl	80037bc <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d901      	bls.n	8006e30 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e2dd      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e30:	4b20      	ldr	r3, [pc, #128]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1f0      	bne.n	8006e1e <HAL_RCC_OscConfig+0x1da>
 8006e3c:	e000      	b.n	8006e40 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e3e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d074      	beq.n	8006f36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	2b08      	cmp	r3, #8
 8006e50:	d005      	beq.n	8006e5e <HAL_RCC_OscConfig+0x21a>
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2b0c      	cmp	r3, #12
 8006e56:	d10e      	bne.n	8006e76 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d10b      	bne.n	8006e76 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e5e:	4b15      	ldr	r3, [pc, #84]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d064      	beq.n	8006f34 <HAL_RCC_OscConfig+0x2f0>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d160      	bne.n	8006f34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e2ba      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e7e:	d106      	bne.n	8006e8e <HAL_RCC_OscConfig+0x24a>
 8006e80:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a0b      	ldr	r2, [pc, #44]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	e026      	b.n	8006edc <HAL_RCC_OscConfig+0x298>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e96:	d115      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x280>
 8006e98:	4b06      	ldr	r3, [pc, #24]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a05      	ldr	r2, [pc, #20]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006e9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	4b03      	ldr	r3, [pc, #12]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a02      	ldr	r2, [pc, #8]	; (8006eb4 <HAL_RCC_OscConfig+0x270>)
 8006eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eae:	6013      	str	r3, [r2, #0]
 8006eb0:	e014      	b.n	8006edc <HAL_RCC_OscConfig+0x298>
 8006eb2:	bf00      	nop
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	08013910 	.word	0x08013910
 8006ebc:	200000c8 	.word	0x200000c8
 8006ec0:	200000cc 	.word	0x200000cc
 8006ec4:	4ba0      	ldr	r3, [pc, #640]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a9f      	ldr	r2, [pc, #636]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	4b9d      	ldr	r3, [pc, #628]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a9c      	ldr	r2, [pc, #624]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d013      	beq.n	8006f0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee4:	f7fc fc6a 	bl	80037bc <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006eec:	f7fc fc66 	bl	80037bc <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b64      	cmp	r3, #100	; 0x64
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e276      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006efe:	4b92      	ldr	r3, [pc, #584]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0f0      	beq.n	8006eec <HAL_RCC_OscConfig+0x2a8>
 8006f0a:	e014      	b.n	8006f36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0c:	f7fc fc56 	bl	80037bc <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f14:	f7fc fc52 	bl	80037bc <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b64      	cmp	r3, #100	; 0x64
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e262      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f26:	4b88      	ldr	r3, [pc, #544]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f0      	bne.n	8006f14 <HAL_RCC_OscConfig+0x2d0>
 8006f32:	e000      	b.n	8006f36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d060      	beq.n	8007004 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d005      	beq.n	8006f54 <HAL_RCC_OscConfig+0x310>
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	2b0c      	cmp	r3, #12
 8006f4c:	d119      	bne.n	8006f82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d116      	bne.n	8006f82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f54:	4b7c      	ldr	r3, [pc, #496]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <HAL_RCC_OscConfig+0x328>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e23f      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f6c:	4b76      	ldr	r3, [pc, #472]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	061b      	lsls	r3, r3, #24
 8006f7a:	4973      	ldr	r1, [pc, #460]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f80:	e040      	b.n	8007004 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d023      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f8a:	4b6f      	ldr	r3, [pc, #444]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a6e      	ldr	r2, [pc, #440]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f96:	f7fc fc11 	bl	80037bc <HAL_GetTick>
 8006f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f9c:	e008      	b.n	8006fb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f9e:	f7fc fc0d 	bl	80037bc <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e21d      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fb0:	4b65      	ldr	r3, [pc, #404]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0f0      	beq.n	8006f9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fbc:	4b62      	ldr	r3, [pc, #392]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	061b      	lsls	r3, r3, #24
 8006fca:	495f      	ldr	r1, [pc, #380]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	604b      	str	r3, [r1, #4]
 8006fd0:	e018      	b.n	8007004 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fd2:	4b5d      	ldr	r3, [pc, #372]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a5c      	ldr	r2, [pc, #368]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fde:	f7fc fbed 	bl	80037bc <HAL_GetTick>
 8006fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006fe4:	e008      	b.n	8006ff8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fe6:	f7fc fbe9 	bl	80037bc <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e1f9      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ff8:	4b53      	ldr	r3, [pc, #332]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1f0      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b00      	cmp	r3, #0
 800700e:	d03c      	beq.n	800708a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01c      	beq.n	8007052 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007018:	4b4b      	ldr	r3, [pc, #300]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 800701a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800701e:	4a4a      	ldr	r2, [pc, #296]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8007020:	f043 0301 	orr.w	r3, r3, #1
 8007024:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007028:	f7fc fbc8 	bl	80037bc <HAL_GetTick>
 800702c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800702e:	e008      	b.n	8007042 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007030:	f7fc fbc4 	bl	80037bc <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b02      	cmp	r3, #2
 800703c:	d901      	bls.n	8007042 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e1d4      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007042:	4b41      	ldr	r3, [pc, #260]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8007044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0ef      	beq.n	8007030 <HAL_RCC_OscConfig+0x3ec>
 8007050:	e01b      	b.n	800708a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007052:	4b3d      	ldr	r3, [pc, #244]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8007054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007058:	4a3b      	ldr	r2, [pc, #236]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 800705a:	f023 0301 	bic.w	r3, r3, #1
 800705e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007062:	f7fc fbab 	bl	80037bc <HAL_GetTick>
 8007066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007068:	e008      	b.n	800707c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800706a:	f7fc fba7 	bl	80037bc <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d901      	bls.n	800707c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e1b7      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800707c:	4b32      	ldr	r3, [pc, #200]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 800707e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1ef      	bne.n	800706a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0304 	and.w	r3, r3, #4
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 80a6 	beq.w	80071e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007098:	2300      	movs	r3, #0
 800709a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800709c:	4b2a      	ldr	r3, [pc, #168]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 800709e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10d      	bne.n	80070c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070a8:	4b27      	ldr	r3, [pc, #156]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 80070aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ac:	4a26      	ldr	r2, [pc, #152]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 80070ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b2:	6593      	str	r3, [r2, #88]	; 0x58
 80070b4:	4b24      	ldr	r3, [pc, #144]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 80070b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070bc:	60bb      	str	r3, [r7, #8]
 80070be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070c0:	2301      	movs	r3, #1
 80070c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070c4:	4b21      	ldr	r3, [pc, #132]	; (800714c <HAL_RCC_OscConfig+0x508>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d118      	bne.n	8007102 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070d0:	4b1e      	ldr	r3, [pc, #120]	; (800714c <HAL_RCC_OscConfig+0x508>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1d      	ldr	r2, [pc, #116]	; (800714c <HAL_RCC_OscConfig+0x508>)
 80070d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070dc:	f7fc fb6e 	bl	80037bc <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070e4:	f7fc fb6a 	bl	80037bc <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e17a      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070f6:	4b15      	ldr	r3, [pc, #84]	; (800714c <HAL_RCC_OscConfig+0x508>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0f0      	beq.n	80070e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d108      	bne.n	800711c <HAL_RCC_OscConfig+0x4d8>
 800710a:	4b0f      	ldr	r3, [pc, #60]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 800710c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007110:	4a0d      	ldr	r2, [pc, #52]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8007112:	f043 0301 	orr.w	r3, r3, #1
 8007116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800711a:	e029      	b.n	8007170 <HAL_RCC_OscConfig+0x52c>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	2b05      	cmp	r3, #5
 8007122:	d115      	bne.n	8007150 <HAL_RCC_OscConfig+0x50c>
 8007124:	4b08      	ldr	r3, [pc, #32]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8007126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712a:	4a07      	ldr	r2, [pc, #28]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 800712c:	f043 0304 	orr.w	r3, r3, #4
 8007130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007134:	4b04      	ldr	r3, [pc, #16]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 8007136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713a:	4a03      	ldr	r2, [pc, #12]	; (8007148 <HAL_RCC_OscConfig+0x504>)
 800713c:	f043 0301 	orr.w	r3, r3, #1
 8007140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007144:	e014      	b.n	8007170 <HAL_RCC_OscConfig+0x52c>
 8007146:	bf00      	nop
 8007148:	40021000 	.word	0x40021000
 800714c:	40007000 	.word	0x40007000
 8007150:	4b9c      	ldr	r3, [pc, #624]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 8007152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007156:	4a9b      	ldr	r2, [pc, #620]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 8007158:	f023 0301 	bic.w	r3, r3, #1
 800715c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007160:	4b98      	ldr	r3, [pc, #608]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 8007162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007166:	4a97      	ldr	r2, [pc, #604]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 8007168:	f023 0304 	bic.w	r3, r3, #4
 800716c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d016      	beq.n	80071a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007178:	f7fc fb20 	bl	80037bc <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800717e:	e00a      	b.n	8007196 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007180:	f7fc fb1c 	bl	80037bc <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	f241 3288 	movw	r2, #5000	; 0x1388
 800718e:	4293      	cmp	r3, r2
 8007190:	d901      	bls.n	8007196 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e12a      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007196:	4b8b      	ldr	r3, [pc, #556]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 8007198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d0ed      	beq.n	8007180 <HAL_RCC_OscConfig+0x53c>
 80071a4:	e015      	b.n	80071d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a6:	f7fc fb09 	bl	80037bc <HAL_GetTick>
 80071aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071ac:	e00a      	b.n	80071c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ae:	f7fc fb05 	bl	80037bc <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071bc:	4293      	cmp	r3, r2
 80071be:	d901      	bls.n	80071c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e113      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071c4:	4b7f      	ldr	r3, [pc, #508]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 80071c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1ed      	bne.n	80071ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071d2:	7ffb      	ldrb	r3, [r7, #31]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d105      	bne.n	80071e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071d8:	4b7a      	ldr	r3, [pc, #488]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 80071da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071dc:	4a79      	ldr	r2, [pc, #484]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 80071de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80fe 	beq.w	80073ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	f040 80d0 	bne.w	8007398 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80071f8:	4b72      	ldr	r3, [pc, #456]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f003 0203 	and.w	r2, r3, #3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	429a      	cmp	r2, r3
 800720a:	d130      	bne.n	800726e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	3b01      	subs	r3, #1
 8007218:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800721a:	429a      	cmp	r2, r3
 800721c:	d127      	bne.n	800726e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007228:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800722a:	429a      	cmp	r2, r3
 800722c:	d11f      	bne.n	800726e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007238:	2a07      	cmp	r2, #7
 800723a:	bf14      	ite	ne
 800723c:	2201      	movne	r2, #1
 800723e:	2200      	moveq	r2, #0
 8007240:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007242:	4293      	cmp	r3, r2
 8007244:	d113      	bne.n	800726e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007250:	085b      	lsrs	r3, r3, #1
 8007252:	3b01      	subs	r3, #1
 8007254:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007256:	429a      	cmp	r2, r3
 8007258:	d109      	bne.n	800726e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007264:	085b      	lsrs	r3, r3, #1
 8007266:	3b01      	subs	r3, #1
 8007268:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800726a:	429a      	cmp	r2, r3
 800726c:	d06e      	beq.n	800734c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	2b0c      	cmp	r3, #12
 8007272:	d069      	beq.n	8007348 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007274:	4b53      	ldr	r3, [pc, #332]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d105      	bne.n	800728c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007280:	4b50      	ldr	r3, [pc, #320]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e0ad      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007290:	4b4c      	ldr	r3, [pc, #304]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a4b      	ldr	r2, [pc, #300]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 8007296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800729a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800729c:	f7fc fa8e 	bl	80037bc <HAL_GetTick>
 80072a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072a2:	e008      	b.n	80072b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072a4:	f7fc fa8a 	bl	80037bc <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e09a      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072b6:	4b43      	ldr	r3, [pc, #268]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1f0      	bne.n	80072a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072c2:	4b40      	ldr	r3, [pc, #256]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	4b40      	ldr	r3, [pc, #256]	; (80073c8 <HAL_RCC_OscConfig+0x784>)
 80072c8:	4013      	ands	r3, r2
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80072d2:	3a01      	subs	r2, #1
 80072d4:	0112      	lsls	r2, r2, #4
 80072d6:	4311      	orrs	r1, r2
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80072dc:	0212      	lsls	r2, r2, #8
 80072de:	4311      	orrs	r1, r2
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80072e4:	0852      	lsrs	r2, r2, #1
 80072e6:	3a01      	subs	r2, #1
 80072e8:	0552      	lsls	r2, r2, #21
 80072ea:	4311      	orrs	r1, r2
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80072f0:	0852      	lsrs	r2, r2, #1
 80072f2:	3a01      	subs	r2, #1
 80072f4:	0652      	lsls	r2, r2, #25
 80072f6:	4311      	orrs	r1, r2
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072fc:	0912      	lsrs	r2, r2, #4
 80072fe:	0452      	lsls	r2, r2, #17
 8007300:	430a      	orrs	r2, r1
 8007302:	4930      	ldr	r1, [pc, #192]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 8007304:	4313      	orrs	r3, r2
 8007306:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007308:	4b2e      	ldr	r3, [pc, #184]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a2d      	ldr	r2, [pc, #180]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 800730e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007312:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007314:	4b2b      	ldr	r3, [pc, #172]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	4a2a      	ldr	r2, [pc, #168]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 800731a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800731e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007320:	f7fc fa4c 	bl	80037bc <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007328:	f7fc fa48 	bl	80037bc <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e058      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800733a:	4b22      	ldr	r3, [pc, #136]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0f0      	beq.n	8007328 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007346:	e050      	b.n	80073ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e04f      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800734c:	4b1d      	ldr	r3, [pc, #116]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d148      	bne.n	80073ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007358:	4b1a      	ldr	r3, [pc, #104]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a19      	ldr	r2, [pc, #100]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 800735e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007362:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007364:	4b17      	ldr	r3, [pc, #92]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	4a16      	ldr	r2, [pc, #88]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 800736a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800736e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007370:	f7fc fa24 	bl	80037bc <HAL_GetTick>
 8007374:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007376:	e008      	b.n	800738a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007378:	f7fc fa20 	bl	80037bc <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e030      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800738a:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0f0      	beq.n	8007378 <HAL_RCC_OscConfig+0x734>
 8007396:	e028      	b.n	80073ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	2b0c      	cmp	r3, #12
 800739c:	d023      	beq.n	80073e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800739e:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a08      	ldr	r2, [pc, #32]	; (80073c4 <HAL_RCC_OscConfig+0x780>)
 80073a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073aa:	f7fc fa07 	bl	80037bc <HAL_GetTick>
 80073ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073b0:	e00c      	b.n	80073cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b2:	f7fc fa03 	bl	80037bc <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d905      	bls.n	80073cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e013      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
 80073c4:	40021000 	.word	0x40021000
 80073c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073cc:	4b09      	ldr	r3, [pc, #36]	; (80073f4 <HAL_RCC_OscConfig+0x7b0>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1ec      	bne.n	80073b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80073d8:	4b06      	ldr	r3, [pc, #24]	; (80073f4 <HAL_RCC_OscConfig+0x7b0>)
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	4905      	ldr	r1, [pc, #20]	; (80073f4 <HAL_RCC_OscConfig+0x7b0>)
 80073de:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <HAL_RCC_OscConfig+0x7b4>)
 80073e0:	4013      	ands	r3, r2
 80073e2:	60cb      	str	r3, [r1, #12]
 80073e4:	e001      	b.n	80073ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e000      	b.n	80073ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3720      	adds	r7, #32
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	40021000 	.word	0x40021000
 80073f8:	feeefffc 	.word	0xfeeefffc

080073fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e0e7      	b.n	80075e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007410:	4b75      	ldr	r3, [pc, #468]	; (80075e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0307 	and.w	r3, r3, #7
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	429a      	cmp	r2, r3
 800741c:	d910      	bls.n	8007440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800741e:	4b72      	ldr	r3, [pc, #456]	; (80075e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f023 0207 	bic.w	r2, r3, #7
 8007426:	4970      	ldr	r1, [pc, #448]	; (80075e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	4313      	orrs	r3, r2
 800742c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800742e:	4b6e      	ldr	r3, [pc, #440]	; (80075e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d001      	beq.n	8007440 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e0cf      	b.n	80075e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d010      	beq.n	800746e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	4b66      	ldr	r3, [pc, #408]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007458:	429a      	cmp	r2, r3
 800745a:	d908      	bls.n	800746e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800745c:	4b63      	ldr	r3, [pc, #396]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	4960      	ldr	r1, [pc, #384]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 800746a:	4313      	orrs	r3, r2
 800746c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d04c      	beq.n	8007514 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	2b03      	cmp	r3, #3
 8007480:	d107      	bne.n	8007492 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007482:	4b5a      	ldr	r3, [pc, #360]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d121      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e0a6      	b.n	80075e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b02      	cmp	r3, #2
 8007498:	d107      	bne.n	80074aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800749a:	4b54      	ldr	r3, [pc, #336]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d115      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e09a      	b.n	80075e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d107      	bne.n	80074c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80074b2:	4b4e      	ldr	r3, [pc, #312]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d109      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e08e      	b.n	80075e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074c2:	4b4a      	ldr	r3, [pc, #296]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e086      	b.n	80075e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074d2:	4b46      	ldr	r3, [pc, #280]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f023 0203 	bic.w	r2, r3, #3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	4943      	ldr	r1, [pc, #268]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074e4:	f7fc f96a 	bl	80037bc <HAL_GetTick>
 80074e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074ea:	e00a      	b.n	8007502 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074ec:	f7fc f966 	bl	80037bc <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e06e      	b.n	80075e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007502:	4b3a      	ldr	r3, [pc, #232]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 020c 	and.w	r2, r3, #12
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	429a      	cmp	r2, r3
 8007512:	d1eb      	bne.n	80074ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d010      	beq.n	8007542 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	4b31      	ldr	r3, [pc, #196]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800752c:	429a      	cmp	r2, r3
 800752e:	d208      	bcs.n	8007542 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007530:	4b2e      	ldr	r3, [pc, #184]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	492b      	ldr	r1, [pc, #172]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 800753e:	4313      	orrs	r3, r2
 8007540:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007542:	4b29      	ldr	r3, [pc, #164]	; (80075e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	429a      	cmp	r2, r3
 800754e:	d210      	bcs.n	8007572 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007550:	4b25      	ldr	r3, [pc, #148]	; (80075e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f023 0207 	bic.w	r2, r3, #7
 8007558:	4923      	ldr	r1, [pc, #140]	; (80075e8 <HAL_RCC_ClockConfig+0x1ec>)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	4313      	orrs	r3, r2
 800755e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007560:	4b21      	ldr	r3, [pc, #132]	; (80075e8 <HAL_RCC_ClockConfig+0x1ec>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0307 	and.w	r3, r3, #7
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	429a      	cmp	r2, r3
 800756c:	d001      	beq.n	8007572 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e036      	b.n	80075e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0304 	and.w	r3, r3, #4
 800757a:	2b00      	cmp	r3, #0
 800757c:	d008      	beq.n	8007590 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800757e:	4b1b      	ldr	r3, [pc, #108]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	4918      	ldr	r1, [pc, #96]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 800758c:	4313      	orrs	r3, r2
 800758e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0308 	and.w	r3, r3, #8
 8007598:	2b00      	cmp	r3, #0
 800759a:	d009      	beq.n	80075b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800759c:	4b13      	ldr	r3, [pc, #76]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	00db      	lsls	r3, r3, #3
 80075aa:	4910      	ldr	r1, [pc, #64]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80075b0:	f000 f824 	bl	80075fc <HAL_RCC_GetSysClockFreq>
 80075b4:	4602      	mov	r2, r0
 80075b6:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <HAL_RCC_ClockConfig+0x1f0>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	091b      	lsrs	r3, r3, #4
 80075bc:	f003 030f 	and.w	r3, r3, #15
 80075c0:	490b      	ldr	r1, [pc, #44]	; (80075f0 <HAL_RCC_ClockConfig+0x1f4>)
 80075c2:	5ccb      	ldrb	r3, [r1, r3]
 80075c4:	f003 031f 	and.w	r3, r3, #31
 80075c8:	fa22 f303 	lsr.w	r3, r2, r3
 80075cc:	4a09      	ldr	r2, [pc, #36]	; (80075f4 <HAL_RCC_ClockConfig+0x1f8>)
 80075ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80075d0:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <HAL_RCC_ClockConfig+0x1fc>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fb ff05 	bl	80033e4 <HAL_InitTick>
 80075da:	4603      	mov	r3, r0
 80075dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80075de:	7afb      	ldrb	r3, [r7, #11]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	40022000 	.word	0x40022000
 80075ec:	40021000 	.word	0x40021000
 80075f0:	08013910 	.word	0x08013910
 80075f4:	200000c8 	.word	0x200000c8
 80075f8:	200000cc 	.word	0x200000cc

080075fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b089      	sub	sp, #36	; 0x24
 8007600:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	61fb      	str	r3, [r7, #28]
 8007606:	2300      	movs	r3, #0
 8007608:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800760a:	4b3e      	ldr	r3, [pc, #248]	; (8007704 <HAL_RCC_GetSysClockFreq+0x108>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f003 030c 	and.w	r3, r3, #12
 8007612:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007614:	4b3b      	ldr	r3, [pc, #236]	; (8007704 <HAL_RCC_GetSysClockFreq+0x108>)
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f003 0303 	and.w	r3, r3, #3
 800761c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d005      	beq.n	8007630 <HAL_RCC_GetSysClockFreq+0x34>
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	2b0c      	cmp	r3, #12
 8007628:	d121      	bne.n	800766e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d11e      	bne.n	800766e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007630:	4b34      	ldr	r3, [pc, #208]	; (8007704 <HAL_RCC_GetSysClockFreq+0x108>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	2b00      	cmp	r3, #0
 800763a:	d107      	bne.n	800764c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800763c:	4b31      	ldr	r3, [pc, #196]	; (8007704 <HAL_RCC_GetSysClockFreq+0x108>)
 800763e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007642:	0a1b      	lsrs	r3, r3, #8
 8007644:	f003 030f 	and.w	r3, r3, #15
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	e005      	b.n	8007658 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800764c:	4b2d      	ldr	r3, [pc, #180]	; (8007704 <HAL_RCC_GetSysClockFreq+0x108>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	091b      	lsrs	r3, r3, #4
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007658:	4a2b      	ldr	r2, [pc, #172]	; (8007708 <HAL_RCC_GetSysClockFreq+0x10c>)
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007660:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10d      	bne.n	8007684 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800766c:	e00a      	b.n	8007684 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2b04      	cmp	r3, #4
 8007672:	d102      	bne.n	800767a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007674:	4b25      	ldr	r3, [pc, #148]	; (800770c <HAL_RCC_GetSysClockFreq+0x110>)
 8007676:	61bb      	str	r3, [r7, #24]
 8007678:	e004      	b.n	8007684 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	2b08      	cmp	r3, #8
 800767e:	d101      	bne.n	8007684 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007680:	4b23      	ldr	r3, [pc, #140]	; (8007710 <HAL_RCC_GetSysClockFreq+0x114>)
 8007682:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	2b0c      	cmp	r3, #12
 8007688:	d134      	bne.n	80076f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800768a:	4b1e      	ldr	r3, [pc, #120]	; (8007704 <HAL_RCC_GetSysClockFreq+0x108>)
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f003 0303 	and.w	r3, r3, #3
 8007692:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b02      	cmp	r3, #2
 8007698:	d003      	beq.n	80076a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2b03      	cmp	r3, #3
 800769e:	d003      	beq.n	80076a8 <HAL_RCC_GetSysClockFreq+0xac>
 80076a0:	e005      	b.n	80076ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80076a2:	4b1a      	ldr	r3, [pc, #104]	; (800770c <HAL_RCC_GetSysClockFreq+0x110>)
 80076a4:	617b      	str	r3, [r7, #20]
      break;
 80076a6:	e005      	b.n	80076b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80076a8:	4b19      	ldr	r3, [pc, #100]	; (8007710 <HAL_RCC_GetSysClockFreq+0x114>)
 80076aa:	617b      	str	r3, [r7, #20]
      break;
 80076ac:	e002      	b.n	80076b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	617b      	str	r3, [r7, #20]
      break;
 80076b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076b4:	4b13      	ldr	r3, [pc, #76]	; (8007704 <HAL_RCC_GetSysClockFreq+0x108>)
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	091b      	lsrs	r3, r3, #4
 80076ba:	f003 0307 	and.w	r3, r3, #7
 80076be:	3301      	adds	r3, #1
 80076c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80076c2:	4b10      	ldr	r3, [pc, #64]	; (8007704 <HAL_RCC_GetSysClockFreq+0x108>)
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	0a1b      	lsrs	r3, r3, #8
 80076c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	fb03 f202 	mul.w	r2, r3, r2
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80076da:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <HAL_RCC_GetSysClockFreq+0x108>)
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	0e5b      	lsrs	r3, r3, #25
 80076e0:	f003 0303 	and.w	r3, r3, #3
 80076e4:	3301      	adds	r3, #1
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80076f4:	69bb      	ldr	r3, [r7, #24]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3724      	adds	r7, #36	; 0x24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40021000 	.word	0x40021000
 8007708:	08013928 	.word	0x08013928
 800770c:	00f42400 	.word	0x00f42400
 8007710:	007a1200 	.word	0x007a1200

08007714 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007714:	b480      	push	{r7}
 8007716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007718:	4b03      	ldr	r3, [pc, #12]	; (8007728 <HAL_RCC_GetHCLKFreq+0x14>)
 800771a:	681b      	ldr	r3, [r3, #0]
}
 800771c:	4618      	mov	r0, r3
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	200000c8 	.word	0x200000c8

0800772c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007730:	f7ff fff0 	bl	8007714 <HAL_RCC_GetHCLKFreq>
 8007734:	4602      	mov	r2, r0
 8007736:	4b06      	ldr	r3, [pc, #24]	; (8007750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	0a1b      	lsrs	r3, r3, #8
 800773c:	f003 0307 	and.w	r3, r3, #7
 8007740:	4904      	ldr	r1, [pc, #16]	; (8007754 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007742:	5ccb      	ldrb	r3, [r1, r3]
 8007744:	f003 031f 	and.w	r3, r3, #31
 8007748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800774c:	4618      	mov	r0, r3
 800774e:	bd80      	pop	{r7, pc}
 8007750:	40021000 	.word	0x40021000
 8007754:	08013920 	.word	0x08013920

08007758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800775c:	f7ff ffda 	bl	8007714 <HAL_RCC_GetHCLKFreq>
 8007760:	4602      	mov	r2, r0
 8007762:	4b06      	ldr	r3, [pc, #24]	; (800777c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	0adb      	lsrs	r3, r3, #11
 8007768:	f003 0307 	and.w	r3, r3, #7
 800776c:	4904      	ldr	r1, [pc, #16]	; (8007780 <HAL_RCC_GetPCLK2Freq+0x28>)
 800776e:	5ccb      	ldrb	r3, [r1, r3]
 8007770:	f003 031f 	and.w	r3, r3, #31
 8007774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007778:	4618      	mov	r0, r3
 800777a:	bd80      	pop	{r7, pc}
 800777c:	40021000 	.word	0x40021000
 8007780:	08013920 	.word	0x08013920

08007784 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	220f      	movs	r2, #15
 8007792:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007794:	4b12      	ldr	r3, [pc, #72]	; (80077e0 <HAL_RCC_GetClockConfig+0x5c>)
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f003 0203 	and.w	r2, r3, #3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80077a0:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <HAL_RCC_GetClockConfig+0x5c>)
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80077ac:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <HAL_RCC_GetClockConfig+0x5c>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80077b8:	4b09      	ldr	r3, [pc, #36]	; (80077e0 <HAL_RCC_GetClockConfig+0x5c>)
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	08db      	lsrs	r3, r3, #3
 80077be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80077c6:	4b07      	ldr	r3, [pc, #28]	; (80077e4 <HAL_RCC_GetClockConfig+0x60>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0207 	and.w	r2, r3, #7
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	601a      	str	r2, [r3, #0]
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	40021000 	.word	0x40021000
 80077e4:	40022000 	.word	0x40022000

080077e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80077f0:	2300      	movs	r3, #0
 80077f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80077f4:	4b2a      	ldr	r3, [pc, #168]	; (80078a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80077f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d003      	beq.n	8007808 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007800:	f7ff f9bc 	bl	8006b7c <HAL_PWREx_GetVoltageRange>
 8007804:	6178      	str	r0, [r7, #20]
 8007806:	e014      	b.n	8007832 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007808:	4b25      	ldr	r3, [pc, #148]	; (80078a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800780a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780c:	4a24      	ldr	r2, [pc, #144]	; (80078a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800780e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007812:	6593      	str	r3, [r2, #88]	; 0x58
 8007814:	4b22      	ldr	r3, [pc, #136]	; (80078a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007820:	f7ff f9ac 	bl	8006b7c <HAL_PWREx_GetVoltageRange>
 8007824:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007826:	4b1e      	ldr	r3, [pc, #120]	; (80078a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782a:	4a1d      	ldr	r2, [pc, #116]	; (80078a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800782c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007830:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007838:	d10b      	bne.n	8007852 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b80      	cmp	r3, #128	; 0x80
 800783e:	d919      	bls.n	8007874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2ba0      	cmp	r3, #160	; 0xa0
 8007844:	d902      	bls.n	800784c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007846:	2302      	movs	r3, #2
 8007848:	613b      	str	r3, [r7, #16]
 800784a:	e013      	b.n	8007874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800784c:	2301      	movs	r3, #1
 800784e:	613b      	str	r3, [r7, #16]
 8007850:	e010      	b.n	8007874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b80      	cmp	r3, #128	; 0x80
 8007856:	d902      	bls.n	800785e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007858:	2303      	movs	r3, #3
 800785a:	613b      	str	r3, [r7, #16]
 800785c:	e00a      	b.n	8007874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b80      	cmp	r3, #128	; 0x80
 8007862:	d102      	bne.n	800786a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007864:	2302      	movs	r3, #2
 8007866:	613b      	str	r3, [r7, #16]
 8007868:	e004      	b.n	8007874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b70      	cmp	r3, #112	; 0x70
 800786e:	d101      	bne.n	8007874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007870:	2301      	movs	r3, #1
 8007872:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007874:	4b0b      	ldr	r3, [pc, #44]	; (80078a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f023 0207 	bic.w	r2, r3, #7
 800787c:	4909      	ldr	r1, [pc, #36]	; (80078a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	4313      	orrs	r3, r2
 8007882:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007884:	4b07      	ldr	r3, [pc, #28]	; (80078a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0307 	and.w	r3, r3, #7
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	429a      	cmp	r2, r3
 8007890:	d001      	beq.n	8007896 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	40021000 	.word	0x40021000
 80078a4:	40022000 	.word	0x40022000

080078a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078b0:	2300      	movs	r3, #0
 80078b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078b4:	2300      	movs	r3, #0
 80078b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d041      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80078cc:	d02a      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80078ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80078d2:	d824      	bhi.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80078d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078d8:	d008      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80078da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078de:	d81e      	bhi.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00a      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80078e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078e8:	d010      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80078ea:	e018      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80078ec:	4b86      	ldr	r3, [pc, #536]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	4a85      	ldr	r2, [pc, #532]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80078f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80078f8:	e015      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	3304      	adds	r3, #4
 80078fe:	2100      	movs	r1, #0
 8007900:	4618      	mov	r0, r3
 8007902:	f000 fabb 	bl	8007e7c <RCCEx_PLLSAI1_Config>
 8007906:	4603      	mov	r3, r0
 8007908:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800790a:	e00c      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3320      	adds	r3, #32
 8007910:	2100      	movs	r1, #0
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fba6 	bl	8008064 <RCCEx_PLLSAI2_Config>
 8007918:	4603      	mov	r3, r0
 800791a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800791c:	e003      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	74fb      	strb	r3, [r7, #19]
      break;
 8007922:	e000      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007926:	7cfb      	ldrb	r3, [r7, #19]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10b      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800792c:	4b76      	ldr	r3, [pc, #472]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800792e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007932:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800793a:	4973      	ldr	r1, [pc, #460]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800793c:	4313      	orrs	r3, r2
 800793e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007942:	e001      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007944:	7cfb      	ldrb	r3, [r7, #19]
 8007946:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d041      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007958:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800795c:	d02a      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800795e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007962:	d824      	bhi.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007968:	d008      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800796a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800796e:	d81e      	bhi.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00a      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007978:	d010      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800797a:	e018      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800797c:	4b62      	ldr	r3, [pc, #392]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	4a61      	ldr	r2, [pc, #388]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007986:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007988:	e015      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	3304      	adds	r3, #4
 800798e:	2100      	movs	r1, #0
 8007990:	4618      	mov	r0, r3
 8007992:	f000 fa73 	bl	8007e7c <RCCEx_PLLSAI1_Config>
 8007996:	4603      	mov	r3, r0
 8007998:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800799a:	e00c      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3320      	adds	r3, #32
 80079a0:	2100      	movs	r1, #0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fb5e 	bl	8008064 <RCCEx_PLLSAI2_Config>
 80079a8:	4603      	mov	r3, r0
 80079aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80079ac:	e003      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	74fb      	strb	r3, [r7, #19]
      break;
 80079b2:	e000      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80079b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079b6:	7cfb      	ldrb	r3, [r7, #19]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10b      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80079bc:	4b52      	ldr	r3, [pc, #328]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079ca:	494f      	ldr	r1, [pc, #316]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80079d2:	e001      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d4:	7cfb      	ldrb	r3, [r7, #19]
 80079d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 80a0 	beq.w	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079e6:	2300      	movs	r3, #0
 80079e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80079ea:	4b47      	ldr	r3, [pc, #284]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80079f6:	2301      	movs	r3, #1
 80079f8:	e000      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80079fa:	2300      	movs	r3, #0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00d      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a00:	4b41      	ldr	r3, [pc, #260]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a04:	4a40      	ldr	r2, [pc, #256]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8007a0c:	4b3e      	ldr	r3, [pc, #248]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a14:	60bb      	str	r3, [r7, #8]
 8007a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a1c:	4b3b      	ldr	r3, [pc, #236]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a3a      	ldr	r2, [pc, #232]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a28:	f7fb fec8 	bl	80037bc <HAL_GetTick>
 8007a2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a2e:	e009      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a30:	f7fb fec4 	bl	80037bc <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d902      	bls.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	74fb      	strb	r3, [r7, #19]
        break;
 8007a42:	e005      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a44:	4b31      	ldr	r3, [pc, #196]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d0ef      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007a50:	7cfb      	ldrb	r3, [r7, #19]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d15c      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a56:	4b2c      	ldr	r3, [pc, #176]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01f      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d019      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a74:	4b24      	ldr	r3, [pc, #144]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a80:	4b21      	ldr	r3, [pc, #132]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a86:	4a20      	ldr	r2, [pc, #128]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a90:	4b1d      	ldr	r3, [pc, #116]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a96:	4a1c      	ldr	r2, [pc, #112]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007aa0:	4a19      	ldr	r2, [pc, #100]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d016      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab2:	f7fb fe83 	bl	80037bc <HAL_GetTick>
 8007ab6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ab8:	e00b      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aba:	f7fb fe7f 	bl	80037bc <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d902      	bls.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	74fb      	strb	r3, [r7, #19]
            break;
 8007ad0:	e006      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ad2:	4b0d      	ldr	r3, [pc, #52]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d0ec      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007ae0:	7cfb      	ldrb	r3, [r7, #19]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10c      	bne.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ae6:	4b08      	ldr	r3, [pc, #32]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af6:	4904      	ldr	r1, [pc, #16]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007afe:	e009      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b00:	7cfb      	ldrb	r3, [r7, #19]
 8007b02:	74bb      	strb	r3, [r7, #18]
 8007b04:	e006      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007b06:	bf00      	nop
 8007b08:	40021000 	.word	0x40021000
 8007b0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b10:	7cfb      	ldrb	r3, [r7, #19]
 8007b12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b14:	7c7b      	ldrb	r3, [r7, #17]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d105      	bne.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b1a:	4b9e      	ldr	r3, [pc, #632]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1e:	4a9d      	ldr	r2, [pc, #628]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00a      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b32:	4b98      	ldr	r3, [pc, #608]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b38:	f023 0203 	bic.w	r2, r3, #3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b40:	4994      	ldr	r1, [pc, #592]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00a      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b54:	4b8f      	ldr	r3, [pc, #572]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b5a:	f023 020c 	bic.w	r2, r3, #12
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b62:	498c      	ldr	r1, [pc, #560]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0304 	and.w	r3, r3, #4
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b76:	4b87      	ldr	r3, [pc, #540]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b84:	4983      	ldr	r1, [pc, #524]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0308 	and.w	r3, r3, #8
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00a      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b98:	4b7e      	ldr	r3, [pc, #504]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba6:	497b      	ldr	r1, [pc, #492]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0310 	and.w	r3, r3, #16
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bba:	4b76      	ldr	r3, [pc, #472]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc8:	4972      	ldr	r1, [pc, #456]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0320 	and.w	r3, r3, #32
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00a      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bdc:	4b6d      	ldr	r3, [pc, #436]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bea:	496a      	ldr	r1, [pc, #424]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bfe:	4b65      	ldr	r3, [pc, #404]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c0c:	4961      	ldr	r1, [pc, #388]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00a      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c20:	4b5c      	ldr	r3, [pc, #368]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c2e:	4959      	ldr	r1, [pc, #356]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c42:	4b54      	ldr	r3, [pc, #336]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c50:	4950      	ldr	r1, [pc, #320]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00a      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c64:	4b4b      	ldr	r3, [pc, #300]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c72:	4948      	ldr	r1, [pc, #288]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c86:	4b43      	ldr	r3, [pc, #268]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c94:	493f      	ldr	r1, [pc, #252]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d028      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ca8:	4b3a      	ldr	r3, [pc, #232]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cb6:	4937      	ldr	r1, [pc, #220]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cc6:	d106      	bne.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cc8:	4b32      	ldr	r3, [pc, #200]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	4a31      	ldr	r2, [pc, #196]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cd2:	60d3      	str	r3, [r2, #12]
 8007cd4:	e011      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cde:	d10c      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 f8c8 	bl	8007e7c <RCCEx_PLLSAI1_Config>
 8007cec:	4603      	mov	r3, r0
 8007cee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007cf0:	7cfb      	ldrb	r3, [r7, #19]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007cf6:	7cfb      	ldrb	r3, [r7, #19]
 8007cf8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d028      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d06:	4b23      	ldr	r3, [pc, #140]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d14:	491f      	ldr	r1, [pc, #124]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d24:	d106      	bne.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d26:	4b1b      	ldr	r3, [pc, #108]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	4a1a      	ldr	r2, [pc, #104]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d30:	60d3      	str	r3, [r2, #12]
 8007d32:	e011      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d3c:	d10c      	bne.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	3304      	adds	r3, #4
 8007d42:	2101      	movs	r1, #1
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 f899 	bl	8007e7c <RCCEx_PLLSAI1_Config>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d4e:	7cfb      	ldrb	r3, [r7, #19]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007d54:	7cfb      	ldrb	r3, [r7, #19]
 8007d56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d02b      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d64:	4b0b      	ldr	r3, [pc, #44]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d72:	4908      	ldr	r1, [pc, #32]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d82:	d109      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d84:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	4a02      	ldr	r2, [pc, #8]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d8e:	60d3      	str	r3, [r2, #12]
 8007d90:	e014      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007d92:	bf00      	nop
 8007d94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007da0:	d10c      	bne.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3304      	adds	r3, #4
 8007da6:	2101      	movs	r1, #1
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 f867 	bl	8007e7c <RCCEx_PLLSAI1_Config>
 8007dae:	4603      	mov	r3, r0
 8007db0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007db2:	7cfb      	ldrb	r3, [r7, #19]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007db8:	7cfb      	ldrb	r3, [r7, #19]
 8007dba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d02f      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dc8:	4b2b      	ldr	r3, [pc, #172]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dd6:	4928      	ldr	r1, [pc, #160]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007de6:	d10d      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	3304      	adds	r3, #4
 8007dec:	2102      	movs	r1, #2
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 f844 	bl	8007e7c <RCCEx_PLLSAI1_Config>
 8007df4:	4603      	mov	r3, r0
 8007df6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007df8:	7cfb      	ldrb	r3, [r7, #19]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d014      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007dfe:	7cfb      	ldrb	r3, [r7, #19]
 8007e00:	74bb      	strb	r3, [r7, #18]
 8007e02:	e011      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e0c:	d10c      	bne.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3320      	adds	r3, #32
 8007e12:	2102      	movs	r1, #2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 f925 	bl	8008064 <RCCEx_PLLSAI2_Config>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e1e:	7cfb      	ldrb	r3, [r7, #19]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007e24:	7cfb      	ldrb	r3, [r7, #19]
 8007e26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00a      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e34:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e42:	490d      	ldr	r1, [pc, #52]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00b      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e56:	4b08      	ldr	r3, [pc, #32]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e66:	4904      	ldr	r1, [pc, #16]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007e6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3718      	adds	r7, #24
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	40021000 	.word	0x40021000

08007e7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007e8a:	4b75      	ldr	r3, [pc, #468]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d018      	beq.n	8007ec8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007e96:	4b72      	ldr	r3, [pc, #456]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f003 0203 	and.w	r2, r3, #3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d10d      	bne.n	8007ec2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
       ||
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d009      	beq.n	8007ec2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007eae:	4b6c      	ldr	r3, [pc, #432]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	091b      	lsrs	r3, r3, #4
 8007eb4:	f003 0307 	and.w	r3, r3, #7
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
       ||
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d047      	beq.n	8007f52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	73fb      	strb	r3, [r7, #15]
 8007ec6:	e044      	b.n	8007f52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d018      	beq.n	8007f02 <RCCEx_PLLSAI1_Config+0x86>
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d825      	bhi.n	8007f20 <RCCEx_PLLSAI1_Config+0xa4>
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d002      	beq.n	8007ede <RCCEx_PLLSAI1_Config+0x62>
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d009      	beq.n	8007ef0 <RCCEx_PLLSAI1_Config+0x74>
 8007edc:	e020      	b.n	8007f20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007ede:	4b60      	ldr	r3, [pc, #384]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d11d      	bne.n	8007f26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007eee:	e01a      	b.n	8007f26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ef0:	4b5b      	ldr	r3, [pc, #364]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d116      	bne.n	8007f2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f00:	e013      	b.n	8007f2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007f02:	4b57      	ldr	r3, [pc, #348]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10f      	bne.n	8007f2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007f0e:	4b54      	ldr	r3, [pc, #336]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f1e:	e006      	b.n	8007f2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	73fb      	strb	r3, [r7, #15]
      break;
 8007f24:	e004      	b.n	8007f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f26:	bf00      	nop
 8007f28:	e002      	b.n	8007f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f2a:	bf00      	nop
 8007f2c:	e000      	b.n	8007f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10d      	bne.n	8007f52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007f36:	4b4a      	ldr	r3, [pc, #296]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6819      	ldr	r1, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	011b      	lsls	r3, r3, #4
 8007f4a:	430b      	orrs	r3, r1
 8007f4c:	4944      	ldr	r1, [pc, #272]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d17d      	bne.n	8008054 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007f58:	4b41      	ldr	r3, [pc, #260]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a40      	ldr	r2, [pc, #256]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f64:	f7fb fc2a 	bl	80037bc <HAL_GetTick>
 8007f68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f6a:	e009      	b.n	8007f80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f6c:	f7fb fc26 	bl	80037bc <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d902      	bls.n	8007f80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	73fb      	strb	r3, [r7, #15]
        break;
 8007f7e:	e005      	b.n	8007f8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f80:	4b37      	ldr	r3, [pc, #220]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1ef      	bne.n	8007f6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d160      	bne.n	8008054 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d111      	bne.n	8007fbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007f98:	4b31      	ldr	r3, [pc, #196]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6892      	ldr	r2, [r2, #8]
 8007fa8:	0211      	lsls	r1, r2, #8
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	68d2      	ldr	r2, [r2, #12]
 8007fae:	0912      	lsrs	r2, r2, #4
 8007fb0:	0452      	lsls	r2, r2, #17
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	492a      	ldr	r1, [pc, #168]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	610b      	str	r3, [r1, #16]
 8007fba:	e027      	b.n	800800c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d112      	bne.n	8007fe8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007fc2:	4b27      	ldr	r3, [pc, #156]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007fca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	6892      	ldr	r2, [r2, #8]
 8007fd2:	0211      	lsls	r1, r2, #8
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	6912      	ldr	r2, [r2, #16]
 8007fd8:	0852      	lsrs	r2, r2, #1
 8007fda:	3a01      	subs	r2, #1
 8007fdc:	0552      	lsls	r2, r2, #21
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	491f      	ldr	r1, [pc, #124]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	610b      	str	r3, [r1, #16]
 8007fe6:	e011      	b.n	800800c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007fe8:	4b1d      	ldr	r3, [pc, #116]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007ff0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	6892      	ldr	r2, [r2, #8]
 8007ff8:	0211      	lsls	r1, r2, #8
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	6952      	ldr	r2, [r2, #20]
 8007ffe:	0852      	lsrs	r2, r2, #1
 8008000:	3a01      	subs	r2, #1
 8008002:	0652      	lsls	r2, r2, #25
 8008004:	430a      	orrs	r2, r1
 8008006:	4916      	ldr	r1, [pc, #88]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008008:	4313      	orrs	r3, r2
 800800a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800800c:	4b14      	ldr	r3, [pc, #80]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a13      	ldr	r2, [pc, #76]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008012:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008016:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008018:	f7fb fbd0 	bl	80037bc <HAL_GetTick>
 800801c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800801e:	e009      	b.n	8008034 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008020:	f7fb fbcc 	bl	80037bc <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	2b02      	cmp	r3, #2
 800802c:	d902      	bls.n	8008034 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	73fb      	strb	r3, [r7, #15]
          break;
 8008032:	e005      	b.n	8008040 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008034:	4b0a      	ldr	r3, [pc, #40]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0ef      	beq.n	8008020 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d106      	bne.n	8008054 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008046:	4b06      	ldr	r3, [pc, #24]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008048:	691a      	ldr	r2, [r3, #16]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	4904      	ldr	r1, [pc, #16]	; (8008060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008050:	4313      	orrs	r3, r2
 8008052:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008054:	7bfb      	ldrb	r3, [r7, #15]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	40021000 	.word	0x40021000

08008064 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008072:	4b6a      	ldr	r3, [pc, #424]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	f003 0303 	and.w	r3, r3, #3
 800807a:	2b00      	cmp	r3, #0
 800807c:	d018      	beq.n	80080b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800807e:	4b67      	ldr	r3, [pc, #412]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f003 0203 	and.w	r2, r3, #3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	429a      	cmp	r2, r3
 800808c:	d10d      	bne.n	80080aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
       ||
 8008092:	2b00      	cmp	r3, #0
 8008094:	d009      	beq.n	80080aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008096:	4b61      	ldr	r3, [pc, #388]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	091b      	lsrs	r3, r3, #4
 800809c:	f003 0307 	and.w	r3, r3, #7
 80080a0:	1c5a      	adds	r2, r3, #1
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685b      	ldr	r3, [r3, #4]
       ||
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d047      	beq.n	800813a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	73fb      	strb	r3, [r7, #15]
 80080ae:	e044      	b.n	800813a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d018      	beq.n	80080ea <RCCEx_PLLSAI2_Config+0x86>
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d825      	bhi.n	8008108 <RCCEx_PLLSAI2_Config+0xa4>
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d002      	beq.n	80080c6 <RCCEx_PLLSAI2_Config+0x62>
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d009      	beq.n	80080d8 <RCCEx_PLLSAI2_Config+0x74>
 80080c4:	e020      	b.n	8008108 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80080c6:	4b55      	ldr	r3, [pc, #340]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d11d      	bne.n	800810e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080d6:	e01a      	b.n	800810e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80080d8:	4b50      	ldr	r3, [pc, #320]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d116      	bne.n	8008112 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080e8:	e013      	b.n	8008112 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80080ea:	4b4c      	ldr	r3, [pc, #304]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10f      	bne.n	8008116 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80080f6:	4b49      	ldr	r3, [pc, #292]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d109      	bne.n	8008116 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008106:	e006      	b.n	8008116 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	73fb      	strb	r3, [r7, #15]
      break;
 800810c:	e004      	b.n	8008118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800810e:	bf00      	nop
 8008110:	e002      	b.n	8008118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008112:	bf00      	nop
 8008114:	e000      	b.n	8008118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008116:	bf00      	nop
    }

    if(status == HAL_OK)
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10d      	bne.n	800813a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800811e:	4b3f      	ldr	r3, [pc, #252]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6819      	ldr	r1, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	3b01      	subs	r3, #1
 8008130:	011b      	lsls	r3, r3, #4
 8008132:	430b      	orrs	r3, r1
 8008134:	4939      	ldr	r1, [pc, #228]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008136:	4313      	orrs	r3, r2
 8008138:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800813a:	7bfb      	ldrb	r3, [r7, #15]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d167      	bne.n	8008210 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008140:	4b36      	ldr	r3, [pc, #216]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a35      	ldr	r2, [pc, #212]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800814a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800814c:	f7fb fb36 	bl	80037bc <HAL_GetTick>
 8008150:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008152:	e009      	b.n	8008168 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008154:	f7fb fb32 	bl	80037bc <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b02      	cmp	r3, #2
 8008160:	d902      	bls.n	8008168 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	73fb      	strb	r3, [r7, #15]
        break;
 8008166:	e005      	b.n	8008174 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008168:	4b2c      	ldr	r3, [pc, #176]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1ef      	bne.n	8008154 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d14a      	bne.n	8008210 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d111      	bne.n	80081a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008180:	4b26      	ldr	r3, [pc, #152]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6892      	ldr	r2, [r2, #8]
 8008190:	0211      	lsls	r1, r2, #8
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	68d2      	ldr	r2, [r2, #12]
 8008196:	0912      	lsrs	r2, r2, #4
 8008198:	0452      	lsls	r2, r2, #17
 800819a:	430a      	orrs	r2, r1
 800819c:	491f      	ldr	r1, [pc, #124]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	614b      	str	r3, [r1, #20]
 80081a2:	e011      	b.n	80081c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80081a4:	4b1d      	ldr	r3, [pc, #116]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80081ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	6892      	ldr	r2, [r2, #8]
 80081b4:	0211      	lsls	r1, r2, #8
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	6912      	ldr	r2, [r2, #16]
 80081ba:	0852      	lsrs	r2, r2, #1
 80081bc:	3a01      	subs	r2, #1
 80081be:	0652      	lsls	r2, r2, #25
 80081c0:	430a      	orrs	r2, r1
 80081c2:	4916      	ldr	r1, [pc, #88]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80081c8:	4b14      	ldr	r3, [pc, #80]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a13      	ldr	r2, [pc, #76]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 80081ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081d4:	f7fb faf2 	bl	80037bc <HAL_GetTick>
 80081d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80081da:	e009      	b.n	80081f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80081dc:	f7fb faee 	bl	80037bc <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d902      	bls.n	80081f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	73fb      	strb	r3, [r7, #15]
          break;
 80081ee:	e005      	b.n	80081fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80081f0:	4b0a      	ldr	r3, [pc, #40]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0ef      	beq.n	80081dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008202:	4b06      	ldr	r3, [pc, #24]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008204:	695a      	ldr	r2, [r3, #20]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	4904      	ldr	r1, [pc, #16]	; (800821c <RCCEx_PLLSAI2_Config+0x1b8>)
 800820c:	4313      	orrs	r3, r2
 800820e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008210:	7bfb      	ldrb	r3, [r7, #15]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	40021000 	.word	0x40021000

08008220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e049      	b.n	80082c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d106      	bne.n	800824c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f841 	bl	80082ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3304      	adds	r3, #4
 800825c:	4619      	mov	r1, r3
 800825e:	4610      	mov	r0, r2
 8008260:	f000 fb4a 	bl	80088f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b083      	sub	sp, #12
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80082d6:	bf00      	nop
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
	...

080082e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d001      	beq.n	80082fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e04f      	b.n	800839c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68da      	ldr	r2, [r3, #12]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0201 	orr.w	r2, r2, #1
 8008312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a23      	ldr	r2, [pc, #140]	; (80083a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d01d      	beq.n	800835a <HAL_TIM_Base_Start_IT+0x76>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008326:	d018      	beq.n	800835a <HAL_TIM_Base_Start_IT+0x76>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a1f      	ldr	r2, [pc, #124]	; (80083ac <HAL_TIM_Base_Start_IT+0xc8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d013      	beq.n	800835a <HAL_TIM_Base_Start_IT+0x76>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a1e      	ldr	r2, [pc, #120]	; (80083b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d00e      	beq.n	800835a <HAL_TIM_Base_Start_IT+0x76>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a1c      	ldr	r2, [pc, #112]	; (80083b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d009      	beq.n	800835a <HAL_TIM_Base_Start_IT+0x76>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a1b      	ldr	r2, [pc, #108]	; (80083b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d004      	beq.n	800835a <HAL_TIM_Base_Start_IT+0x76>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a19      	ldr	r2, [pc, #100]	; (80083bc <HAL_TIM_Base_Start_IT+0xd8>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d115      	bne.n	8008386 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	4b17      	ldr	r3, [pc, #92]	; (80083c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008362:	4013      	ands	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2b06      	cmp	r3, #6
 800836a:	d015      	beq.n	8008398 <HAL_TIM_Base_Start_IT+0xb4>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008372:	d011      	beq.n	8008398 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f042 0201 	orr.w	r2, r2, #1
 8008382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008384:	e008      	b.n	8008398 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0201 	orr.w	r2, r2, #1
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	e000      	b.n	800839a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008398:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	40012c00 	.word	0x40012c00
 80083ac:	40000400 	.word	0x40000400
 80083b0:	40000800 	.word	0x40000800
 80083b4:	40000c00 	.word	0x40000c00
 80083b8:	40013400 	.word	0x40013400
 80083bc:	40014000 	.word	0x40014000
 80083c0:	00010007 	.word	0x00010007

080083c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e049      	b.n	800846a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d106      	bne.n	80083f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7fa fe1e 	bl	800302c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2202      	movs	r2, #2
 80083f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	3304      	adds	r3, #4
 8008400:	4619      	mov	r1, r3
 8008402:	4610      	mov	r0, r2
 8008404:	f000 fa78 	bl	80088f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b00      	cmp	r3, #0
 8008492:	d020      	beq.n	80084d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f003 0302 	and.w	r3, r3, #2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d01b      	beq.n	80084d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f06f 0202 	mvn.w	r2, #2
 80084a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	f003 0303 	and.w	r3, r3, #3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d003      	beq.n	80084c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f9fd 	bl	80088bc <HAL_TIM_IC_CaptureCallback>
 80084c2:	e005      	b.n	80084d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f9ef 	bl	80088a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fa00 	bl	80088d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d020      	beq.n	8008522 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f003 0304 	and.w	r3, r3, #4
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d01b      	beq.n	8008522 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f06f 0204 	mvn.w	r2, #4
 80084f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2202      	movs	r2, #2
 80084f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008504:	2b00      	cmp	r3, #0
 8008506:	d003      	beq.n	8008510 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f9d7 	bl	80088bc <HAL_TIM_IC_CaptureCallback>
 800850e:	e005      	b.n	800851c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f9c9 	bl	80088a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f9da 	bl	80088d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	f003 0308 	and.w	r3, r3, #8
 8008528:	2b00      	cmp	r3, #0
 800852a:	d020      	beq.n	800856e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f003 0308 	and.w	r3, r3, #8
 8008532:	2b00      	cmp	r3, #0
 8008534:	d01b      	beq.n	800856e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f06f 0208 	mvn.w	r2, #8
 800853e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2204      	movs	r2, #4
 8008544:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	f003 0303 	and.w	r3, r3, #3
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f9b1 	bl	80088bc <HAL_TIM_IC_CaptureCallback>
 800855a:	e005      	b.n	8008568 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f9a3 	bl	80088a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f9b4 	bl	80088d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	f003 0310 	and.w	r3, r3, #16
 8008574:	2b00      	cmp	r3, #0
 8008576:	d020      	beq.n	80085ba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f003 0310 	and.w	r3, r3, #16
 800857e:	2b00      	cmp	r3, #0
 8008580:	d01b      	beq.n	80085ba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f06f 0210 	mvn.w	r2, #16
 800858a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2208      	movs	r2, #8
 8008590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f98b 	bl	80088bc <HAL_TIM_IC_CaptureCallback>
 80085a6:	e005      	b.n	80085b4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f97d 	bl	80088a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f98e 	bl	80088d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f003 0301 	and.w	r3, r3, #1
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00c      	beq.n	80085de <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d007      	beq.n	80085de <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f06f 0201 	mvn.w	r2, #1
 80085d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f7f9 ff3f 	bl	800245c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d104      	bne.n	80085f2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00c      	beq.n	800860c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d007      	beq.n	800860c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8008604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 febc 	bl	8009384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00c      	beq.n	8008630 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861c:	2b00      	cmp	r3, #0
 800861e:	d007      	beq.n	8008630 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 feb4 	bl	8009398 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00c      	beq.n	8008654 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008640:	2b00      	cmp	r3, #0
 8008642:	d007      	beq.n	8008654 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800864c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f948 	bl	80088e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f003 0320 	and.w	r3, r3, #32
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00c      	beq.n	8008678 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f003 0320 	and.w	r3, r3, #32
 8008664:	2b00      	cmp	r3, #0
 8008666:	d007      	beq.n	8008678 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f06f 0220 	mvn.w	r2, #32
 8008670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fe7c 	bl	8009370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008678:	bf00      	nop
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008696:	2b01      	cmp	r3, #1
 8008698:	d101      	bne.n	800869e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800869a:	2302      	movs	r3, #2
 800869c:	e0ff      	b.n	800889e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2b14      	cmp	r3, #20
 80086aa:	f200 80f0 	bhi.w	800888e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80086ae:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	08008709 	.word	0x08008709
 80086b8:	0800888f 	.word	0x0800888f
 80086bc:	0800888f 	.word	0x0800888f
 80086c0:	0800888f 	.word	0x0800888f
 80086c4:	08008749 	.word	0x08008749
 80086c8:	0800888f 	.word	0x0800888f
 80086cc:	0800888f 	.word	0x0800888f
 80086d0:	0800888f 	.word	0x0800888f
 80086d4:	0800878b 	.word	0x0800878b
 80086d8:	0800888f 	.word	0x0800888f
 80086dc:	0800888f 	.word	0x0800888f
 80086e0:	0800888f 	.word	0x0800888f
 80086e4:	080087cb 	.word	0x080087cb
 80086e8:	0800888f 	.word	0x0800888f
 80086ec:	0800888f 	.word	0x0800888f
 80086f0:	0800888f 	.word	0x0800888f
 80086f4:	0800880d 	.word	0x0800880d
 80086f8:	0800888f 	.word	0x0800888f
 80086fc:	0800888f 	.word	0x0800888f
 8008700:	0800888f 	.word	0x0800888f
 8008704:	0800884d 	.word	0x0800884d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68b9      	ldr	r1, [r7, #8]
 800870e:	4618      	mov	r0, r3
 8008710:	f000 f998 	bl	8008a44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	699a      	ldr	r2, [r3, #24]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f042 0208 	orr.w	r2, r2, #8
 8008722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699a      	ldr	r2, [r3, #24]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0204 	bic.w	r2, r2, #4
 8008732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6999      	ldr	r1, [r3, #24]
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	691a      	ldr	r2, [r3, #16]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	619a      	str	r2, [r3, #24]
      break;
 8008746:	e0a5      	b.n	8008894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68b9      	ldr	r1, [r7, #8]
 800874e:	4618      	mov	r0, r3
 8008750:	f000 fa08 	bl	8008b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699a      	ldr	r2, [r3, #24]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	699a      	ldr	r2, [r3, #24]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6999      	ldr	r1, [r3, #24]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	021a      	lsls	r2, r3, #8
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	619a      	str	r2, [r3, #24]
      break;
 8008788:	e084      	b.n	8008894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68b9      	ldr	r1, [r7, #8]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 fa71 	bl	8008c78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	69da      	ldr	r2, [r3, #28]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f042 0208 	orr.w	r2, r2, #8
 80087a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	69da      	ldr	r2, [r3, #28]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0204 	bic.w	r2, r2, #4
 80087b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	69d9      	ldr	r1, [r3, #28]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	691a      	ldr	r2, [r3, #16]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	430a      	orrs	r2, r1
 80087c6:	61da      	str	r2, [r3, #28]
      break;
 80087c8:	e064      	b.n	8008894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68b9      	ldr	r1, [r7, #8]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 fad9 	bl	8008d88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	69da      	ldr	r2, [r3, #28]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69da      	ldr	r2, [r3, #28]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	69d9      	ldr	r1, [r3, #28]
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	021a      	lsls	r2, r3, #8
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	430a      	orrs	r2, r1
 8008808:	61da      	str	r2, [r3, #28]
      break;
 800880a:	e043      	b.n	8008894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68b9      	ldr	r1, [r7, #8]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fb22 	bl	8008e5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f042 0208 	orr.w	r2, r2, #8
 8008826:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 0204 	bic.w	r2, r2, #4
 8008836:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	691a      	ldr	r2, [r3, #16]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800884a:	e023      	b.n	8008894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68b9      	ldr	r1, [r7, #8]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 fb66 	bl	8008f24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008866:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008876:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	021a      	lsls	r2, r3, #8
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800888c:	e002      	b.n	8008894 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	75fb      	strb	r3, [r7, #23]
      break;
 8008892:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800889c:	7dfb      	ldrb	r3, [r7, #23]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop

080088a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a46      	ldr	r2, [pc, #280]	; (8008a24 <TIM_Base_SetConfig+0x12c>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d013      	beq.n	8008938 <TIM_Base_SetConfig+0x40>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008916:	d00f      	beq.n	8008938 <TIM_Base_SetConfig+0x40>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a43      	ldr	r2, [pc, #268]	; (8008a28 <TIM_Base_SetConfig+0x130>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d00b      	beq.n	8008938 <TIM_Base_SetConfig+0x40>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a42      	ldr	r2, [pc, #264]	; (8008a2c <TIM_Base_SetConfig+0x134>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d007      	beq.n	8008938 <TIM_Base_SetConfig+0x40>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a41      	ldr	r2, [pc, #260]	; (8008a30 <TIM_Base_SetConfig+0x138>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d003      	beq.n	8008938 <TIM_Base_SetConfig+0x40>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a40      	ldr	r2, [pc, #256]	; (8008a34 <TIM_Base_SetConfig+0x13c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d108      	bne.n	800894a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a35      	ldr	r2, [pc, #212]	; (8008a24 <TIM_Base_SetConfig+0x12c>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d01f      	beq.n	8008992 <TIM_Base_SetConfig+0x9a>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008958:	d01b      	beq.n	8008992 <TIM_Base_SetConfig+0x9a>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a32      	ldr	r2, [pc, #200]	; (8008a28 <TIM_Base_SetConfig+0x130>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d017      	beq.n	8008992 <TIM_Base_SetConfig+0x9a>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a31      	ldr	r2, [pc, #196]	; (8008a2c <TIM_Base_SetConfig+0x134>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d013      	beq.n	8008992 <TIM_Base_SetConfig+0x9a>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a30      	ldr	r2, [pc, #192]	; (8008a30 <TIM_Base_SetConfig+0x138>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d00f      	beq.n	8008992 <TIM_Base_SetConfig+0x9a>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a2f      	ldr	r2, [pc, #188]	; (8008a34 <TIM_Base_SetConfig+0x13c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d00b      	beq.n	8008992 <TIM_Base_SetConfig+0x9a>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a2e      	ldr	r2, [pc, #184]	; (8008a38 <TIM_Base_SetConfig+0x140>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d007      	beq.n	8008992 <TIM_Base_SetConfig+0x9a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a2d      	ldr	r2, [pc, #180]	; (8008a3c <TIM_Base_SetConfig+0x144>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d003      	beq.n	8008992 <TIM_Base_SetConfig+0x9a>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a2c      	ldr	r2, [pc, #176]	; (8008a40 <TIM_Base_SetConfig+0x148>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d108      	bne.n	80089a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	689a      	ldr	r2, [r3, #8]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a16      	ldr	r2, [pc, #88]	; (8008a24 <TIM_Base_SetConfig+0x12c>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00f      	beq.n	80089f0 <TIM_Base_SetConfig+0xf8>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a18      	ldr	r2, [pc, #96]	; (8008a34 <TIM_Base_SetConfig+0x13c>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d00b      	beq.n	80089f0 <TIM_Base_SetConfig+0xf8>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a17      	ldr	r2, [pc, #92]	; (8008a38 <TIM_Base_SetConfig+0x140>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d007      	beq.n	80089f0 <TIM_Base_SetConfig+0xf8>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a16      	ldr	r2, [pc, #88]	; (8008a3c <TIM_Base_SetConfig+0x144>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d003      	beq.n	80089f0 <TIM_Base_SetConfig+0xf8>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a15      	ldr	r2, [pc, #84]	; (8008a40 <TIM_Base_SetConfig+0x148>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d103      	bne.n	80089f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	691a      	ldr	r2, [r3, #16]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d105      	bne.n	8008a16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	f023 0201 	bic.w	r2, r3, #1
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	611a      	str	r2, [r3, #16]
  }
}
 8008a16:	bf00      	nop
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	40012c00 	.word	0x40012c00
 8008a28:	40000400 	.word	0x40000400
 8008a2c:	40000800 	.word	0x40000800
 8008a30:	40000c00 	.word	0x40000c00
 8008a34:	40013400 	.word	0x40013400
 8008a38:	40014000 	.word	0x40014000
 8008a3c:	40014400 	.word	0x40014400
 8008a40:	40014800 	.word	0x40014800

08008a44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	f023 0201 	bic.w	r2, r3, #1
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f023 0303 	bic.w	r3, r3, #3
 8008a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f023 0302 	bic.w	r3, r3, #2
 8008a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a2c      	ldr	r2, [pc, #176]	; (8008b50 <TIM_OC1_SetConfig+0x10c>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d00f      	beq.n	8008ac4 <TIM_OC1_SetConfig+0x80>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a2b      	ldr	r2, [pc, #172]	; (8008b54 <TIM_OC1_SetConfig+0x110>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d00b      	beq.n	8008ac4 <TIM_OC1_SetConfig+0x80>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a2a      	ldr	r2, [pc, #168]	; (8008b58 <TIM_OC1_SetConfig+0x114>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d007      	beq.n	8008ac4 <TIM_OC1_SetConfig+0x80>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a29      	ldr	r2, [pc, #164]	; (8008b5c <TIM_OC1_SetConfig+0x118>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d003      	beq.n	8008ac4 <TIM_OC1_SetConfig+0x80>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a28      	ldr	r2, [pc, #160]	; (8008b60 <TIM_OC1_SetConfig+0x11c>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d10c      	bne.n	8008ade <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f023 0308 	bic.w	r3, r3, #8
 8008aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f023 0304 	bic.w	r3, r3, #4
 8008adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a1b      	ldr	r2, [pc, #108]	; (8008b50 <TIM_OC1_SetConfig+0x10c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d00f      	beq.n	8008b06 <TIM_OC1_SetConfig+0xc2>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a1a      	ldr	r2, [pc, #104]	; (8008b54 <TIM_OC1_SetConfig+0x110>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d00b      	beq.n	8008b06 <TIM_OC1_SetConfig+0xc2>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a19      	ldr	r2, [pc, #100]	; (8008b58 <TIM_OC1_SetConfig+0x114>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d007      	beq.n	8008b06 <TIM_OC1_SetConfig+0xc2>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a18      	ldr	r2, [pc, #96]	; (8008b5c <TIM_OC1_SetConfig+0x118>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d003      	beq.n	8008b06 <TIM_OC1_SetConfig+0xc2>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a17      	ldr	r2, [pc, #92]	; (8008b60 <TIM_OC1_SetConfig+0x11c>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d111      	bne.n	8008b2a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	685a      	ldr	r2, [r3, #4]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	621a      	str	r2, [r3, #32]
}
 8008b44:	bf00      	nop
 8008b46:	371c      	adds	r7, #28
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	40012c00 	.word	0x40012c00
 8008b54:	40013400 	.word	0x40013400
 8008b58:	40014000 	.word	0x40014000
 8008b5c:	40014400 	.word	0x40014400
 8008b60:	40014800 	.word	0x40014800

08008b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	f023 0210 	bic.w	r2, r3, #16
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	021b      	lsls	r3, r3, #8
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	f023 0320 	bic.w	r3, r3, #32
 8008bb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	011b      	lsls	r3, r3, #4
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a28      	ldr	r2, [pc, #160]	; (8008c64 <TIM_OC2_SetConfig+0x100>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d003      	beq.n	8008bd0 <TIM_OC2_SetConfig+0x6c>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a27      	ldr	r2, [pc, #156]	; (8008c68 <TIM_OC2_SetConfig+0x104>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d10d      	bne.n	8008bec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	011b      	lsls	r3, r3, #4
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a1d      	ldr	r2, [pc, #116]	; (8008c64 <TIM_OC2_SetConfig+0x100>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d00f      	beq.n	8008c14 <TIM_OC2_SetConfig+0xb0>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a1c      	ldr	r2, [pc, #112]	; (8008c68 <TIM_OC2_SetConfig+0x104>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d00b      	beq.n	8008c14 <TIM_OC2_SetConfig+0xb0>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a1b      	ldr	r2, [pc, #108]	; (8008c6c <TIM_OC2_SetConfig+0x108>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d007      	beq.n	8008c14 <TIM_OC2_SetConfig+0xb0>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a1a      	ldr	r2, [pc, #104]	; (8008c70 <TIM_OC2_SetConfig+0x10c>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d003      	beq.n	8008c14 <TIM_OC2_SetConfig+0xb0>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a19      	ldr	r2, [pc, #100]	; (8008c74 <TIM_OC2_SetConfig+0x110>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d113      	bne.n	8008c3c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	621a      	str	r2, [r3, #32]
}
 8008c56:	bf00      	nop
 8008c58:	371c      	adds	r7, #28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	40012c00 	.word	0x40012c00
 8008c68:	40013400 	.word	0x40013400
 8008c6c:	40014000 	.word	0x40014000
 8008c70:	40014400 	.word	0x40014400
 8008c74:	40014800 	.word	0x40014800

08008c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a1b      	ldr	r3, [r3, #32]
 8008c8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	69db      	ldr	r3, [r3, #28]
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f023 0303 	bic.w	r3, r3, #3
 8008cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	021b      	lsls	r3, r3, #8
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a27      	ldr	r2, [pc, #156]	; (8008d74 <TIM_OC3_SetConfig+0xfc>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d003      	beq.n	8008ce2 <TIM_OC3_SetConfig+0x6a>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a26      	ldr	r2, [pc, #152]	; (8008d78 <TIM_OC3_SetConfig+0x100>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d10d      	bne.n	8008cfe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	021b      	lsls	r3, r3, #8
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a1c      	ldr	r2, [pc, #112]	; (8008d74 <TIM_OC3_SetConfig+0xfc>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d00f      	beq.n	8008d26 <TIM_OC3_SetConfig+0xae>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a1b      	ldr	r2, [pc, #108]	; (8008d78 <TIM_OC3_SetConfig+0x100>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d00b      	beq.n	8008d26 <TIM_OC3_SetConfig+0xae>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a1a      	ldr	r2, [pc, #104]	; (8008d7c <TIM_OC3_SetConfig+0x104>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d007      	beq.n	8008d26 <TIM_OC3_SetConfig+0xae>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a19      	ldr	r2, [pc, #100]	; (8008d80 <TIM_OC3_SetConfig+0x108>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d003      	beq.n	8008d26 <TIM_OC3_SetConfig+0xae>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a18      	ldr	r2, [pc, #96]	; (8008d84 <TIM_OC3_SetConfig+0x10c>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d113      	bne.n	8008d4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	011b      	lsls	r3, r3, #4
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	011b      	lsls	r3, r3, #4
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	621a      	str	r2, [r3, #32]
}
 8008d68:	bf00      	nop
 8008d6a:	371c      	adds	r7, #28
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr
 8008d74:	40012c00 	.word	0x40012c00
 8008d78:	40013400 	.word	0x40013400
 8008d7c:	40014000 	.word	0x40014000
 8008d80:	40014400 	.word	0x40014400
 8008d84:	40014800 	.word	0x40014800

08008d88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a1b      	ldr	r3, [r3, #32]
 8008d9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	021b      	lsls	r3, r3, #8
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	031b      	lsls	r3, r3, #12
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a18      	ldr	r2, [pc, #96]	; (8008e48 <TIM_OC4_SetConfig+0xc0>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d00f      	beq.n	8008e0c <TIM_OC4_SetConfig+0x84>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a17      	ldr	r2, [pc, #92]	; (8008e4c <TIM_OC4_SetConfig+0xc4>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d00b      	beq.n	8008e0c <TIM_OC4_SetConfig+0x84>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a16      	ldr	r2, [pc, #88]	; (8008e50 <TIM_OC4_SetConfig+0xc8>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d007      	beq.n	8008e0c <TIM_OC4_SetConfig+0x84>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a15      	ldr	r2, [pc, #84]	; (8008e54 <TIM_OC4_SetConfig+0xcc>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d003      	beq.n	8008e0c <TIM_OC4_SetConfig+0x84>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a14      	ldr	r2, [pc, #80]	; (8008e58 <TIM_OC4_SetConfig+0xd0>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d109      	bne.n	8008e20 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	019b      	lsls	r3, r3, #6
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	621a      	str	r2, [r3, #32]
}
 8008e3a:	bf00      	nop
 8008e3c:	371c      	adds	r7, #28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	40012c00 	.word	0x40012c00
 8008e4c:	40013400 	.word	0x40013400
 8008e50:	40014000 	.word	0x40014000
 8008e54:	40014400 	.word	0x40014400
 8008e58:	40014800 	.word	0x40014800

08008e5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a1b      	ldr	r3, [r3, #32]
 8008e6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ea0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	041b      	lsls	r3, r3, #16
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a17      	ldr	r2, [pc, #92]	; (8008f10 <TIM_OC5_SetConfig+0xb4>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d00f      	beq.n	8008ed6 <TIM_OC5_SetConfig+0x7a>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a16      	ldr	r2, [pc, #88]	; (8008f14 <TIM_OC5_SetConfig+0xb8>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d00b      	beq.n	8008ed6 <TIM_OC5_SetConfig+0x7a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a15      	ldr	r2, [pc, #84]	; (8008f18 <TIM_OC5_SetConfig+0xbc>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d007      	beq.n	8008ed6 <TIM_OC5_SetConfig+0x7a>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a14      	ldr	r2, [pc, #80]	; (8008f1c <TIM_OC5_SetConfig+0xc0>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d003      	beq.n	8008ed6 <TIM_OC5_SetConfig+0x7a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a13      	ldr	r2, [pc, #76]	; (8008f20 <TIM_OC5_SetConfig+0xc4>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d109      	bne.n	8008eea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008edc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	021b      	lsls	r3, r3, #8
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	693a      	ldr	r2, [r7, #16]
 8008f02:	621a      	str	r2, [r3, #32]
}
 8008f04:	bf00      	nop
 8008f06:	371c      	adds	r7, #28
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	40012c00 	.word	0x40012c00
 8008f14:	40013400 	.word	0x40013400
 8008f18:	40014000 	.word	0x40014000
 8008f1c:	40014400 	.word	0x40014400
 8008f20:	40014800 	.word	0x40014800

08008f24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a1b      	ldr	r3, [r3, #32]
 8008f38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	021b      	lsls	r3, r3, #8
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	051b      	lsls	r3, r3, #20
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a18      	ldr	r2, [pc, #96]	; (8008fdc <TIM_OC6_SetConfig+0xb8>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d00f      	beq.n	8008fa0 <TIM_OC6_SetConfig+0x7c>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a17      	ldr	r2, [pc, #92]	; (8008fe0 <TIM_OC6_SetConfig+0xbc>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d00b      	beq.n	8008fa0 <TIM_OC6_SetConfig+0x7c>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a16      	ldr	r2, [pc, #88]	; (8008fe4 <TIM_OC6_SetConfig+0xc0>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d007      	beq.n	8008fa0 <TIM_OC6_SetConfig+0x7c>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a15      	ldr	r2, [pc, #84]	; (8008fe8 <TIM_OC6_SetConfig+0xc4>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d003      	beq.n	8008fa0 <TIM_OC6_SetConfig+0x7c>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a14      	ldr	r2, [pc, #80]	; (8008fec <TIM_OC6_SetConfig+0xc8>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d109      	bne.n	8008fb4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	029b      	lsls	r3, r3, #10
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	621a      	str	r2, [r3, #32]
}
 8008fce:	bf00      	nop
 8008fd0:	371c      	adds	r7, #28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	40012c00 	.word	0x40012c00
 8008fe0:	40013400 	.word	0x40013400
 8008fe4:	40014000 	.word	0x40014000
 8008fe8:	40014400 	.word	0x40014400
 8008fec:	40014800 	.word	0x40014800

08008ff0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d109      	bne.n	8009014 <HAL_TIMEx_PWMN_Start+0x24>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b01      	cmp	r3, #1
 800900a:	bf14      	ite	ne
 800900c:	2301      	movne	r3, #1
 800900e:	2300      	moveq	r3, #0
 8009010:	b2db      	uxtb	r3, r3
 8009012:	e022      	b.n	800905a <HAL_TIMEx_PWMN_Start+0x6a>
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2b04      	cmp	r3, #4
 8009018:	d109      	bne.n	800902e <HAL_TIMEx_PWMN_Start+0x3e>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b01      	cmp	r3, #1
 8009024:	bf14      	ite	ne
 8009026:	2301      	movne	r3, #1
 8009028:	2300      	moveq	r3, #0
 800902a:	b2db      	uxtb	r3, r3
 800902c:	e015      	b.n	800905a <HAL_TIMEx_PWMN_Start+0x6a>
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	2b08      	cmp	r3, #8
 8009032:	d109      	bne.n	8009048 <HAL_TIMEx_PWMN_Start+0x58>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b01      	cmp	r3, #1
 800903e:	bf14      	ite	ne
 8009040:	2301      	movne	r3, #1
 8009042:	2300      	moveq	r3, #0
 8009044:	b2db      	uxtb	r3, r3
 8009046:	e008      	b.n	800905a <HAL_TIMEx_PWMN_Start+0x6a>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b01      	cmp	r3, #1
 8009052:	bf14      	ite	ne
 8009054:	2301      	movne	r3, #1
 8009056:	2300      	moveq	r3, #0
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e06e      	b.n	8009140 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d104      	bne.n	8009072 <HAL_TIMEx_PWMN_Start+0x82>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2202      	movs	r2, #2
 800906c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009070:	e013      	b.n	800909a <HAL_TIMEx_PWMN_Start+0xaa>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b04      	cmp	r3, #4
 8009076:	d104      	bne.n	8009082 <HAL_TIMEx_PWMN_Start+0x92>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2202      	movs	r2, #2
 800907c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009080:	e00b      	b.n	800909a <HAL_TIMEx_PWMN_Start+0xaa>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b08      	cmp	r3, #8
 8009086:	d104      	bne.n	8009092 <HAL_TIMEx_PWMN_Start+0xa2>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2202      	movs	r2, #2
 800908c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009090:	e003      	b.n	800909a <HAL_TIMEx_PWMN_Start+0xaa>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2202      	movs	r2, #2
 8009096:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2204      	movs	r2, #4
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 f982 	bl	80093ac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a22      	ldr	r2, [pc, #136]	; (8009148 <HAL_TIMEx_PWMN_Start+0x158>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d01d      	beq.n	80090fe <HAL_TIMEx_PWMN_Start+0x10e>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ca:	d018      	beq.n	80090fe <HAL_TIMEx_PWMN_Start+0x10e>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a1e      	ldr	r2, [pc, #120]	; (800914c <HAL_TIMEx_PWMN_Start+0x15c>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d013      	beq.n	80090fe <HAL_TIMEx_PWMN_Start+0x10e>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a1d      	ldr	r2, [pc, #116]	; (8009150 <HAL_TIMEx_PWMN_Start+0x160>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d00e      	beq.n	80090fe <HAL_TIMEx_PWMN_Start+0x10e>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a1b      	ldr	r2, [pc, #108]	; (8009154 <HAL_TIMEx_PWMN_Start+0x164>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d009      	beq.n	80090fe <HAL_TIMEx_PWMN_Start+0x10e>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a1a      	ldr	r2, [pc, #104]	; (8009158 <HAL_TIMEx_PWMN_Start+0x168>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d004      	beq.n	80090fe <HAL_TIMEx_PWMN_Start+0x10e>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a18      	ldr	r2, [pc, #96]	; (800915c <HAL_TIMEx_PWMN_Start+0x16c>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d115      	bne.n	800912a <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	4b16      	ldr	r3, [pc, #88]	; (8009160 <HAL_TIMEx_PWMN_Start+0x170>)
 8009106:	4013      	ands	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2b06      	cmp	r3, #6
 800910e:	d015      	beq.n	800913c <HAL_TIMEx_PWMN_Start+0x14c>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009116:	d011      	beq.n	800913c <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0201 	orr.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009128:	e008      	b.n	800913c <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f042 0201 	orr.w	r2, r2, #1
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	e000      	b.n	800913e <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800913c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	40012c00 	.word	0x40012c00
 800914c:	40000400 	.word	0x40000400
 8009150:	40000800 	.word	0x40000800
 8009154:	40000c00 	.word	0x40000c00
 8009158:	40013400 	.word	0x40013400
 800915c:	40014000 	.word	0x40014000
 8009160:	00010007 	.word	0x00010007

08009164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009174:	2b01      	cmp	r3, #1
 8009176:	d101      	bne.n	800917c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009178:	2302      	movs	r3, #2
 800917a:	e068      	b.n	800924e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2202      	movs	r2, #2
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a2e      	ldr	r2, [pc, #184]	; (800925c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d004      	beq.n	80091b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a2d      	ldr	r2, [pc, #180]	; (8009260 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d108      	bne.n	80091c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80091b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	4313      	orrs	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a1e      	ldr	r2, [pc, #120]	; (800925c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d01d      	beq.n	8009222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ee:	d018      	beq.n	8009222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a1b      	ldr	r2, [pc, #108]	; (8009264 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d013      	beq.n	8009222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a1a      	ldr	r2, [pc, #104]	; (8009268 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d00e      	beq.n	8009222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a18      	ldr	r2, [pc, #96]	; (800926c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d009      	beq.n	8009222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a13      	ldr	r2, [pc, #76]	; (8009260 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d004      	beq.n	8009222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a14      	ldr	r2, [pc, #80]	; (8009270 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d10c      	bne.n	800923c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009228:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	4313      	orrs	r3, r2
 8009232:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	40012c00 	.word	0x40012c00
 8009260:	40013400 	.word	0x40013400
 8009264:	40000400 	.word	0x40000400
 8009268:	40000800 	.word	0x40000800
 800926c:	40000c00 	.word	0x40000c00
 8009270:	40014000 	.word	0x40014000

08009274 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009288:	2b01      	cmp	r3, #1
 800928a:	d101      	bne.n	8009290 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800928c:	2302      	movs	r3, #2
 800928e:	e065      	b.n	800935c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	4313      	orrs	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	4313      	orrs	r3, r2
 80092dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f6:	4313      	orrs	r3, r2
 80092f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	041b      	lsls	r3, r3, #16
 8009306:	4313      	orrs	r3, r2
 8009308:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a16      	ldr	r2, [pc, #88]	; (8009368 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d004      	beq.n	800931e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a14      	ldr	r2, [pc, #80]	; (800936c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d115      	bne.n	800934a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	051b      	lsls	r3, r3, #20
 800932a:	4313      	orrs	r3, r2
 800932c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	4313      	orrs	r3, r2
 800933a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	4313      	orrs	r3, r2
 8009348:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	40012c00 	.word	0x40012c00
 800936c:	40013400 	.word	0x40013400

08009370 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b087      	sub	sp, #28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	f003 030f 	and.w	r3, r3, #15
 80093be:	2204      	movs	r2, #4
 80093c0:	fa02 f303 	lsl.w	r3, r2, r3
 80093c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6a1a      	ldr	r2, [r3, #32]
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	43db      	mvns	r3, r3
 80093ce:	401a      	ands	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6a1a      	ldr	r2, [r3, #32]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	f003 030f 	and.w	r3, r3, #15
 80093de:	6879      	ldr	r1, [r7, #4]
 80093e0:	fa01 f303 	lsl.w	r3, r1, r3
 80093e4:	431a      	orrs	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	621a      	str	r2, [r3, #32]
}
 80093ea:	bf00      	nop
 80093ec:	371c      	adds	r7, #28
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b082      	sub	sp, #8
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d101      	bne.n	8009408 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e040      	b.n	800948a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800940c:	2b00      	cmp	r3, #0
 800940e:	d106      	bne.n	800941e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7f9 fe5f 	bl	80030dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2224      	movs	r2, #36	; 0x24
 8009422:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 0201 	bic.w	r2, r2, #1
 8009432:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	2b00      	cmp	r3, #0
 800943a:	d002      	beq.n	8009442 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fee7 	bl	800a210 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fc2c 	bl	8009ca0 <UART_SetConfig>
 8009448:	4603      	mov	r3, r0
 800944a:	2b01      	cmp	r3, #1
 800944c:	d101      	bne.n	8009452 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e01b      	b.n	800948a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	685a      	ldr	r2, [r3, #4]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009460:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	689a      	ldr	r2, [r3, #8]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009470:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f042 0201 	orr.w	r2, r2, #1
 8009480:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 ff66 	bl	800a354 <UART_CheckIdleState>
 8009488:	4603      	mov	r3, r0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b08a      	sub	sp, #40	; 0x28
 8009496:	af02      	add	r7, sp, #8
 8009498:	60f8      	str	r0, [r7, #12]
 800949a:	60b9      	str	r1, [r7, #8]
 800949c:	603b      	str	r3, [r7, #0]
 800949e:	4613      	mov	r3, r2
 80094a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094a6:	2b20      	cmp	r3, #32
 80094a8:	d178      	bne.n	800959c <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d002      	beq.n	80094b6 <HAL_UART_Transmit+0x24>
 80094b0:	88fb      	ldrh	r3, [r7, #6]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	e071      	b.n	800959e <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2221      	movs	r2, #33	; 0x21
 80094c6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094c8:	f7fa f978 	bl	80037bc <HAL_GetTick>
 80094cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	88fa      	ldrh	r2, [r7, #6]
 80094d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	88fa      	ldrh	r2, [r7, #6]
 80094da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094e6:	d108      	bne.n	80094fa <HAL_UART_Transmit+0x68>
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d104      	bne.n	80094fa <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80094f0:	2300      	movs	r3, #0
 80094f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	61bb      	str	r3, [r7, #24]
 80094f8:	e003      	b.n	8009502 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094fe:	2300      	movs	r3, #0
 8009500:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009502:	e030      	b.n	8009566 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	2200      	movs	r2, #0
 800950c:	2180      	movs	r1, #128	; 0x80
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f000 ffc8 	bl	800a4a4 <UART_WaitOnFlagUntilTimeout>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d004      	beq.n	8009524 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2220      	movs	r2, #32
 800951e:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e03c      	b.n	800959e <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10b      	bne.n	8009542 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	881a      	ldrh	r2, [r3, #0]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009536:	b292      	uxth	r2, r2
 8009538:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	3302      	adds	r3, #2
 800953e:	61bb      	str	r3, [r7, #24]
 8009540:	e008      	b.n	8009554 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	781a      	ldrb	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	b292      	uxth	r2, r2
 800954c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	3301      	adds	r3, #1
 8009552:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800955a:	b29b      	uxth	r3, r3
 800955c:	3b01      	subs	r3, #1
 800955e:	b29a      	uxth	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800956c:	b29b      	uxth	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1c8      	bne.n	8009504 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	2200      	movs	r2, #0
 800957a:	2140      	movs	r1, #64	; 0x40
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f000 ff91 	bl	800a4a4 <UART_WaitOnFlagUntilTimeout>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d004      	beq.n	8009592 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2220      	movs	r2, #32
 800958c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800958e:	2303      	movs	r3, #3
 8009590:	e005      	b.n	800959e <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2220      	movs	r2, #32
 8009596:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	e000      	b.n	800959e <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800959c:	2302      	movs	r3, #2
  }
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3720      	adds	r7, #32
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
	...

080095a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b08a      	sub	sp, #40	; 0x28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	4613      	mov	r3, r2
 80095b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095bc:	2b20      	cmp	r3, #32
 80095be:	d137      	bne.n	8009630 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <HAL_UART_Receive_DMA+0x24>
 80095c6:	88fb      	ldrh	r3, [r7, #6]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d101      	bne.n	80095d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e030      	b.n	8009632 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2200      	movs	r2, #0
 80095d4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a18      	ldr	r2, [pc, #96]	; (800963c <HAL_UART_Receive_DMA+0x94>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d01f      	beq.n	8009620 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d018      	beq.n	8009620 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	e853 3f00 	ldrex	r3, [r3]
 80095fa:	613b      	str	r3, [r7, #16]
   return(result);
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009602:	627b      	str	r3, [r7, #36]	; 0x24
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	461a      	mov	r2, r3
 800960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960c:	623b      	str	r3, [r7, #32]
 800960e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009610:	69f9      	ldr	r1, [r7, #28]
 8009612:	6a3a      	ldr	r2, [r7, #32]
 8009614:	e841 2300 	strex	r3, r2, [r1]
 8009618:	61bb      	str	r3, [r7, #24]
   return(result);
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1e6      	bne.n	80095ee <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009620:	88fb      	ldrh	r3, [r7, #6]
 8009622:	461a      	mov	r2, r3
 8009624:	68b9      	ldr	r1, [r7, #8]
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f000 ffaa 	bl	800a580 <UART_Start_Receive_DMA>
 800962c:	4603      	mov	r3, r0
 800962e:	e000      	b.n	8009632 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009630:	2302      	movs	r3, #2
  }
}
 8009632:	4618      	mov	r0, r3
 8009634:	3728      	adds	r7, #40	; 0x28
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	40008000 	.word	0x40008000

08009640 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b0ba      	sub	sp, #232	; 0xe8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009666:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800966a:	f640 030f 	movw	r3, #2063	; 0x80f
 800966e:	4013      	ands	r3, r2
 8009670:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009678:	2b00      	cmp	r3, #0
 800967a:	d115      	bne.n	80096a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800967c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009680:	f003 0320 	and.w	r3, r3, #32
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00f      	beq.n	80096a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800968c:	f003 0320 	and.w	r3, r3, #32
 8009690:	2b00      	cmp	r3, #0
 8009692:	d009      	beq.n	80096a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 82ca 	beq.w	8009c32 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	4798      	blx	r3
      }
      return;
 80096a6:	e2c4      	b.n	8009c32 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80096a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8117 	beq.w	80098e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80096b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d106      	bne.n	80096cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80096be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80096c2:	4b85      	ldr	r3, [pc, #532]	; (80098d8 <HAL_UART_IRQHandler+0x298>)
 80096c4:	4013      	ands	r3, r2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 810a 	beq.w	80098e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d011      	beq.n	80096fc <HAL_UART_IRQHandler+0xbc>
 80096d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2201      	movs	r2, #1
 80096ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096f2:	f043 0201 	orr.w	r2, r3, #1
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009700:	f003 0302 	and.w	r3, r3, #2
 8009704:	2b00      	cmp	r3, #0
 8009706:	d011      	beq.n	800972c <HAL_UART_IRQHandler+0xec>
 8009708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00b      	beq.n	800972c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2202      	movs	r2, #2
 800971a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009722:	f043 0204 	orr.w	r2, r3, #4
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800972c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009730:	f003 0304 	and.w	r3, r3, #4
 8009734:	2b00      	cmp	r3, #0
 8009736:	d011      	beq.n	800975c <HAL_UART_IRQHandler+0x11c>
 8009738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00b      	beq.n	800975c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2204      	movs	r2, #4
 800974a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009752:	f043 0202 	orr.w	r2, r3, #2
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800975c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009760:	f003 0308 	and.w	r3, r3, #8
 8009764:	2b00      	cmp	r3, #0
 8009766:	d017      	beq.n	8009798 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800976c:	f003 0320 	and.w	r3, r3, #32
 8009770:	2b00      	cmp	r3, #0
 8009772:	d105      	bne.n	8009780 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009778:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00b      	beq.n	8009798 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2208      	movs	r2, #8
 8009786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800978e:	f043 0208 	orr.w	r2, r3, #8
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800979c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d012      	beq.n	80097ca <HAL_UART_IRQHandler+0x18a>
 80097a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00c      	beq.n	80097ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097c0:	f043 0220 	orr.w	r2, r3, #32
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 8230 	beq.w	8009c36 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80097d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097da:	f003 0320 	and.w	r3, r3, #32
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00d      	beq.n	80097fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80097e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097e6:	f003 0320 	and.w	r3, r3, #32
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d007      	beq.n	80097fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d003      	beq.n	80097fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009804:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009812:	2b40      	cmp	r3, #64	; 0x40
 8009814:	d005      	beq.n	8009822 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800981a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800981e:	2b00      	cmp	r3, #0
 8009820:	d04f      	beq.n	80098c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 ff72 	bl	800a70c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009832:	2b40      	cmp	r3, #64	; 0x40
 8009834:	d141      	bne.n	80098ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3308      	adds	r3, #8
 800983c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009840:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009844:	e853 3f00 	ldrex	r3, [r3]
 8009848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800984c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009854:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3308      	adds	r3, #8
 800985e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009862:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009866:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800986e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009872:	e841 2300 	strex	r3, r2, [r1]
 8009876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800987a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1d9      	bne.n	8009836 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009886:	2b00      	cmp	r3, #0
 8009888:	d013      	beq.n	80098b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800988e:	4a13      	ldr	r2, [pc, #76]	; (80098dc <HAL_UART_IRQHandler+0x29c>)
 8009890:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009896:	4618      	mov	r0, r3
 8009898:	f7fb fdb8 	bl	800540c <HAL_DMA_Abort_IT>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d017      	beq.n	80098d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80098ac:	4610      	mov	r0, r2
 80098ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b0:	e00f      	b.n	80098d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f9de 	bl	8009c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b8:	e00b      	b.n	80098d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f9da 	bl	8009c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c0:	e007      	b.n	80098d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f9d6 	bl	8009c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80098d0:	e1b1      	b.n	8009c36 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d2:	bf00      	nop
    return;
 80098d4:	e1af      	b.n	8009c36 <HAL_UART_IRQHandler+0x5f6>
 80098d6:	bf00      	nop
 80098d8:	04000120 	.word	0x04000120
 80098dc:	0800a9bd 	.word	0x0800a9bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	f040 816a 	bne.w	8009bbe <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80098ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ee:	f003 0310 	and.w	r3, r3, #16
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f000 8163 	beq.w	8009bbe <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80098f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098fc:	f003 0310 	and.w	r3, r3, #16
 8009900:	2b00      	cmp	r3, #0
 8009902:	f000 815c 	beq.w	8009bbe <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2210      	movs	r2, #16
 800990c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009918:	2b40      	cmp	r3, #64	; 0x40
 800991a:	f040 80d4 	bne.w	8009ac6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800992a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 80ad 	beq.w	8009a8e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800993a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800993e:	429a      	cmp	r2, r3
 8009940:	f080 80a5 	bcs.w	8009a8e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800994a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0320 	and.w	r3, r3, #32
 800995a:	2b00      	cmp	r3, #0
 800995c:	f040 8086 	bne.w	8009a6c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009968:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009974:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800997c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	461a      	mov	r2, r3
 8009986:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800998a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800998e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009992:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009996:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800999a:	e841 2300 	strex	r3, r2, [r1]
 800999e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80099a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1da      	bne.n	8009960 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3308      	adds	r3, #8
 80099b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099b4:	e853 3f00 	ldrex	r3, [r3]
 80099b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80099ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099bc:	f023 0301 	bic.w	r3, r3, #1
 80099c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3308      	adds	r3, #8
 80099ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80099ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80099d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80099d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80099e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e1      	bne.n	80099aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3308      	adds	r3, #8
 80099ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80099f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3308      	adds	r3, #8
 8009a06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009a0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009a0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1e3      	bne.n	80099e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2220      	movs	r2, #32
 8009a22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a34:	e853 3f00 	ldrex	r3, [r3]
 8009a38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a3c:	f023 0310 	bic.w	r3, r3, #16
 8009a40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a56:	e841 2300 	strex	r3, r2, [r1]
 8009a5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1e4      	bne.n	8009a2c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fb fc92 	bl	8005390 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f8fe 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009a8c:	e0d5      	b.n	8009c3a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009a94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	f040 80ce 	bne.w	8009c3a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 0320 	and.w	r3, r3, #32
 8009aaa:	2b20      	cmp	r3, #32
 8009aac:	f040 80c5 	bne.w	8009c3a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009abc:	4619      	mov	r1, r3
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f8e2 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
      return;
 8009ac4:	e0b9      	b.n	8009c3a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 80ab 	beq.w	8009c3e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8009ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 80a6 	beq.w	8009c3e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b14:	647b      	str	r3, [r7, #68]	; 0x44
 8009b16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b1c:	e841 2300 	strex	r3, r2, [r1]
 8009b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1e4      	bne.n	8009af2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	3308      	adds	r3, #8
 8009b2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	e853 3f00 	ldrex	r3, [r3]
 8009b36:	623b      	str	r3, [r7, #32]
   return(result);
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	f023 0301 	bic.w	r3, r3, #1
 8009b3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3308      	adds	r3, #8
 8009b48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009b4c:	633a      	str	r2, [r7, #48]	; 0x30
 8009b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b54:	e841 2300 	strex	r3, r2, [r1]
 8009b58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1e3      	bne.n	8009b28 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2220      	movs	r2, #32
 8009b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	e853 3f00 	ldrex	r3, [r3]
 8009b80:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f023 0310 	bic.w	r3, r3, #16
 8009b88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	461a      	mov	r2, r3
 8009b92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009b96:	61fb      	str	r3, [r7, #28]
 8009b98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9a:	69b9      	ldr	r1, [r7, #24]
 8009b9c:	69fa      	ldr	r2, [r7, #28]
 8009b9e:	e841 2300 	strex	r3, r2, [r1]
 8009ba2:	617b      	str	r3, [r7, #20]
   return(result);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1e4      	bne.n	8009b74 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2202      	movs	r2, #2
 8009bae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f866 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bbc:	e03f      	b.n	8009c3e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00e      	beq.n	8009be8 <HAL_UART_IRQHandler+0x5a8>
 8009bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d008      	beq.n	8009be8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009bde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 ff2b 	bl	800aa3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009be6:	e02d      	b.n	8009c44 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00e      	beq.n	8009c12 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d008      	beq.n	8009c12 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d01c      	beq.n	8009c42 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	4798      	blx	r3
    }
    return;
 8009c10:	e017      	b.n	8009c42 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d012      	beq.n	8009c44 <HAL_UART_IRQHandler+0x604>
 8009c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00c      	beq.n	8009c44 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fedc 	bl	800a9e8 <UART_EndTransmit_IT>
    return;
 8009c30:	e008      	b.n	8009c44 <HAL_UART_IRQHandler+0x604>
      return;
 8009c32:	bf00      	nop
 8009c34:	e006      	b.n	8009c44 <HAL_UART_IRQHandler+0x604>
    return;
 8009c36:	bf00      	nop
 8009c38:	e004      	b.n	8009c44 <HAL_UART_IRQHandler+0x604>
      return;
 8009c3a:	bf00      	nop
 8009c3c:	e002      	b.n	8009c44 <HAL_UART_IRQHandler+0x604>
      return;
 8009c3e:	bf00      	nop
 8009c40:	e000      	b.n	8009c44 <HAL_UART_IRQHandler+0x604>
    return;
 8009c42:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009c44:	37e8      	adds	r7, #232	; 0xe8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop

08009c4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ca4:	b08a      	sub	sp, #40	; 0x28
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009caa:	2300      	movs	r3, #0
 8009cac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	689a      	ldr	r2, [r3, #8]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	695b      	ldr	r3, [r3, #20]
 8009cbe:	431a      	orrs	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	4ba4      	ldr	r3, [pc, #656]	; (8009f60 <UART_SetConfig+0x2c0>)
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	6812      	ldr	r2, [r2, #0]
 8009cd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cd8:	430b      	orrs	r3, r1
 8009cda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	68da      	ldr	r2, [r3, #12]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a99      	ldr	r2, [pc, #612]	; (8009f64 <UART_SetConfig+0x2c4>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d004      	beq.n	8009d0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1c:	430a      	orrs	r2, r1
 8009d1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a90      	ldr	r2, [pc, #576]	; (8009f68 <UART_SetConfig+0x2c8>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d126      	bne.n	8009d78 <UART_SetConfig+0xd8>
 8009d2a:	4b90      	ldr	r3, [pc, #576]	; (8009f6c <UART_SetConfig+0x2cc>)
 8009d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d30:	f003 0303 	and.w	r3, r3, #3
 8009d34:	2b03      	cmp	r3, #3
 8009d36:	d81b      	bhi.n	8009d70 <UART_SetConfig+0xd0>
 8009d38:	a201      	add	r2, pc, #4	; (adr r2, 8009d40 <UART_SetConfig+0xa0>)
 8009d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3e:	bf00      	nop
 8009d40:	08009d51 	.word	0x08009d51
 8009d44:	08009d61 	.word	0x08009d61
 8009d48:	08009d59 	.word	0x08009d59
 8009d4c:	08009d69 	.word	0x08009d69
 8009d50:	2301      	movs	r3, #1
 8009d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d56:	e116      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009d58:	2302      	movs	r3, #2
 8009d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d5e:	e112      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009d60:	2304      	movs	r3, #4
 8009d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d66:	e10e      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009d68:	2308      	movs	r3, #8
 8009d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d6e:	e10a      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009d70:	2310      	movs	r3, #16
 8009d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d76:	e106      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a7c      	ldr	r2, [pc, #496]	; (8009f70 <UART_SetConfig+0x2d0>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d138      	bne.n	8009df4 <UART_SetConfig+0x154>
 8009d82:	4b7a      	ldr	r3, [pc, #488]	; (8009f6c <UART_SetConfig+0x2cc>)
 8009d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d88:	f003 030c 	and.w	r3, r3, #12
 8009d8c:	2b0c      	cmp	r3, #12
 8009d8e:	d82d      	bhi.n	8009dec <UART_SetConfig+0x14c>
 8009d90:	a201      	add	r2, pc, #4	; (adr r2, 8009d98 <UART_SetConfig+0xf8>)
 8009d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d96:	bf00      	nop
 8009d98:	08009dcd 	.word	0x08009dcd
 8009d9c:	08009ded 	.word	0x08009ded
 8009da0:	08009ded 	.word	0x08009ded
 8009da4:	08009ded 	.word	0x08009ded
 8009da8:	08009ddd 	.word	0x08009ddd
 8009dac:	08009ded 	.word	0x08009ded
 8009db0:	08009ded 	.word	0x08009ded
 8009db4:	08009ded 	.word	0x08009ded
 8009db8:	08009dd5 	.word	0x08009dd5
 8009dbc:	08009ded 	.word	0x08009ded
 8009dc0:	08009ded 	.word	0x08009ded
 8009dc4:	08009ded 	.word	0x08009ded
 8009dc8:	08009de5 	.word	0x08009de5
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dd2:	e0d8      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dda:	e0d4      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009ddc:	2304      	movs	r3, #4
 8009dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009de2:	e0d0      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009de4:	2308      	movs	r3, #8
 8009de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009dea:	e0cc      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009dec:	2310      	movs	r3, #16
 8009dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009df2:	e0c8      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a5e      	ldr	r2, [pc, #376]	; (8009f74 <UART_SetConfig+0x2d4>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d125      	bne.n	8009e4a <UART_SetConfig+0x1aa>
 8009dfe:	4b5b      	ldr	r3, [pc, #364]	; (8009f6c <UART_SetConfig+0x2cc>)
 8009e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e08:	2b30      	cmp	r3, #48	; 0x30
 8009e0a:	d016      	beq.n	8009e3a <UART_SetConfig+0x19a>
 8009e0c:	2b30      	cmp	r3, #48	; 0x30
 8009e0e:	d818      	bhi.n	8009e42 <UART_SetConfig+0x1a2>
 8009e10:	2b20      	cmp	r3, #32
 8009e12:	d00a      	beq.n	8009e2a <UART_SetConfig+0x18a>
 8009e14:	2b20      	cmp	r3, #32
 8009e16:	d814      	bhi.n	8009e42 <UART_SetConfig+0x1a2>
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d002      	beq.n	8009e22 <UART_SetConfig+0x182>
 8009e1c:	2b10      	cmp	r3, #16
 8009e1e:	d008      	beq.n	8009e32 <UART_SetConfig+0x192>
 8009e20:	e00f      	b.n	8009e42 <UART_SetConfig+0x1a2>
 8009e22:	2300      	movs	r3, #0
 8009e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e28:	e0ad      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e30:	e0a9      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009e32:	2304      	movs	r3, #4
 8009e34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e38:	e0a5      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009e3a:	2308      	movs	r3, #8
 8009e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e40:	e0a1      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009e42:	2310      	movs	r3, #16
 8009e44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e48:	e09d      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a4a      	ldr	r2, [pc, #296]	; (8009f78 <UART_SetConfig+0x2d8>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d125      	bne.n	8009ea0 <UART_SetConfig+0x200>
 8009e54:	4b45      	ldr	r3, [pc, #276]	; (8009f6c <UART_SetConfig+0x2cc>)
 8009e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8009e60:	d016      	beq.n	8009e90 <UART_SetConfig+0x1f0>
 8009e62:	2bc0      	cmp	r3, #192	; 0xc0
 8009e64:	d818      	bhi.n	8009e98 <UART_SetConfig+0x1f8>
 8009e66:	2b80      	cmp	r3, #128	; 0x80
 8009e68:	d00a      	beq.n	8009e80 <UART_SetConfig+0x1e0>
 8009e6a:	2b80      	cmp	r3, #128	; 0x80
 8009e6c:	d814      	bhi.n	8009e98 <UART_SetConfig+0x1f8>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d002      	beq.n	8009e78 <UART_SetConfig+0x1d8>
 8009e72:	2b40      	cmp	r3, #64	; 0x40
 8009e74:	d008      	beq.n	8009e88 <UART_SetConfig+0x1e8>
 8009e76:	e00f      	b.n	8009e98 <UART_SetConfig+0x1f8>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e7e:	e082      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009e80:	2302      	movs	r3, #2
 8009e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e86:	e07e      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009e88:	2304      	movs	r3, #4
 8009e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e8e:	e07a      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009e90:	2308      	movs	r3, #8
 8009e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e96:	e076      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009e98:	2310      	movs	r3, #16
 8009e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e9e:	e072      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a35      	ldr	r2, [pc, #212]	; (8009f7c <UART_SetConfig+0x2dc>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d12a      	bne.n	8009f00 <UART_SetConfig+0x260>
 8009eaa:	4b30      	ldr	r3, [pc, #192]	; (8009f6c <UART_SetConfig+0x2cc>)
 8009eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009eb8:	d01a      	beq.n	8009ef0 <UART_SetConfig+0x250>
 8009eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ebe:	d81b      	bhi.n	8009ef8 <UART_SetConfig+0x258>
 8009ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ec4:	d00c      	beq.n	8009ee0 <UART_SetConfig+0x240>
 8009ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eca:	d815      	bhi.n	8009ef8 <UART_SetConfig+0x258>
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d003      	beq.n	8009ed8 <UART_SetConfig+0x238>
 8009ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ed4:	d008      	beq.n	8009ee8 <UART_SetConfig+0x248>
 8009ed6:	e00f      	b.n	8009ef8 <UART_SetConfig+0x258>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ede:	e052      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ee6:	e04e      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009ee8:	2304      	movs	r3, #4
 8009eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009eee:	e04a      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009ef0:	2308      	movs	r3, #8
 8009ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ef6:	e046      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009ef8:	2310      	movs	r3, #16
 8009efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009efe:	e042      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a17      	ldr	r2, [pc, #92]	; (8009f64 <UART_SetConfig+0x2c4>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d13a      	bne.n	8009f80 <UART_SetConfig+0x2e0>
 8009f0a:	4b18      	ldr	r3, [pc, #96]	; (8009f6c <UART_SetConfig+0x2cc>)
 8009f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009f14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f18:	d01a      	beq.n	8009f50 <UART_SetConfig+0x2b0>
 8009f1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f1e:	d81b      	bhi.n	8009f58 <UART_SetConfig+0x2b8>
 8009f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f24:	d00c      	beq.n	8009f40 <UART_SetConfig+0x2a0>
 8009f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f2a:	d815      	bhi.n	8009f58 <UART_SetConfig+0x2b8>
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d003      	beq.n	8009f38 <UART_SetConfig+0x298>
 8009f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f34:	d008      	beq.n	8009f48 <UART_SetConfig+0x2a8>
 8009f36:	e00f      	b.n	8009f58 <UART_SetConfig+0x2b8>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f3e:	e022      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009f40:	2302      	movs	r3, #2
 8009f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f46:	e01e      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009f48:	2304      	movs	r3, #4
 8009f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f4e:	e01a      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009f50:	2308      	movs	r3, #8
 8009f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f56:	e016      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009f58:	2310      	movs	r3, #16
 8009f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f5e:	e012      	b.n	8009f86 <UART_SetConfig+0x2e6>
 8009f60:	efff69f3 	.word	0xefff69f3
 8009f64:	40008000 	.word	0x40008000
 8009f68:	40013800 	.word	0x40013800
 8009f6c:	40021000 	.word	0x40021000
 8009f70:	40004400 	.word	0x40004400
 8009f74:	40004800 	.word	0x40004800
 8009f78:	40004c00 	.word	0x40004c00
 8009f7c:	40005000 	.word	0x40005000
 8009f80:	2310      	movs	r3, #16
 8009f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a9f      	ldr	r2, [pc, #636]	; (800a208 <UART_SetConfig+0x568>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d17a      	bne.n	800a086 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f94:	2b08      	cmp	r3, #8
 8009f96:	d824      	bhi.n	8009fe2 <UART_SetConfig+0x342>
 8009f98:	a201      	add	r2, pc, #4	; (adr r2, 8009fa0 <UART_SetConfig+0x300>)
 8009f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9e:	bf00      	nop
 8009fa0:	08009fc5 	.word	0x08009fc5
 8009fa4:	08009fe3 	.word	0x08009fe3
 8009fa8:	08009fcd 	.word	0x08009fcd
 8009fac:	08009fe3 	.word	0x08009fe3
 8009fb0:	08009fd3 	.word	0x08009fd3
 8009fb4:	08009fe3 	.word	0x08009fe3
 8009fb8:	08009fe3 	.word	0x08009fe3
 8009fbc:	08009fe3 	.word	0x08009fe3
 8009fc0:	08009fdb 	.word	0x08009fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fc4:	f7fd fbb2 	bl	800772c <HAL_RCC_GetPCLK1Freq>
 8009fc8:	61f8      	str	r0, [r7, #28]
        break;
 8009fca:	e010      	b.n	8009fee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fcc:	4b8f      	ldr	r3, [pc, #572]	; (800a20c <UART_SetConfig+0x56c>)
 8009fce:	61fb      	str	r3, [r7, #28]
        break;
 8009fd0:	e00d      	b.n	8009fee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fd2:	f7fd fb13 	bl	80075fc <HAL_RCC_GetSysClockFreq>
 8009fd6:	61f8      	str	r0, [r7, #28]
        break;
 8009fd8:	e009      	b.n	8009fee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fde:	61fb      	str	r3, [r7, #28]
        break;
 8009fe0:	e005      	b.n	8009fee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009fec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 80fb 	beq.w	800a1ec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	005b      	lsls	r3, r3, #1
 8009ffe:	4413      	add	r3, r2
 800a000:	69fa      	ldr	r2, [r7, #28]
 800a002:	429a      	cmp	r2, r3
 800a004:	d305      	bcc.n	800a012 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a00c:	69fa      	ldr	r2, [r7, #28]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d903      	bls.n	800a01a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a018:	e0e8      	b.n	800a1ec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	2200      	movs	r2, #0
 800a01e:	461c      	mov	r4, r3
 800a020:	4615      	mov	r5, r2
 800a022:	f04f 0200 	mov.w	r2, #0
 800a026:	f04f 0300 	mov.w	r3, #0
 800a02a:	022b      	lsls	r3, r5, #8
 800a02c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a030:	0222      	lsls	r2, r4, #8
 800a032:	68f9      	ldr	r1, [r7, #12]
 800a034:	6849      	ldr	r1, [r1, #4]
 800a036:	0849      	lsrs	r1, r1, #1
 800a038:	2000      	movs	r0, #0
 800a03a:	4688      	mov	r8, r1
 800a03c:	4681      	mov	r9, r0
 800a03e:	eb12 0a08 	adds.w	sl, r2, r8
 800a042:	eb43 0b09 	adc.w	fp, r3, r9
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	603b      	str	r3, [r7, #0]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a054:	4650      	mov	r0, sl
 800a056:	4659      	mov	r1, fp
 800a058:	f7f6 fe16 	bl	8000c88 <__aeabi_uldivmod>
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	4613      	mov	r3, r2
 800a062:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a06a:	d308      	bcc.n	800a07e <UART_SetConfig+0x3de>
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a072:	d204      	bcs.n	800a07e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	69ba      	ldr	r2, [r7, #24]
 800a07a:	60da      	str	r2, [r3, #12]
 800a07c:	e0b6      	b.n	800a1ec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a084:	e0b2      	b.n	800a1ec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a08e:	d15e      	bne.n	800a14e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a090:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a094:	2b08      	cmp	r3, #8
 800a096:	d828      	bhi.n	800a0ea <UART_SetConfig+0x44a>
 800a098:	a201      	add	r2, pc, #4	; (adr r2, 800a0a0 <UART_SetConfig+0x400>)
 800a09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09e:	bf00      	nop
 800a0a0:	0800a0c5 	.word	0x0800a0c5
 800a0a4:	0800a0cd 	.word	0x0800a0cd
 800a0a8:	0800a0d5 	.word	0x0800a0d5
 800a0ac:	0800a0eb 	.word	0x0800a0eb
 800a0b0:	0800a0db 	.word	0x0800a0db
 800a0b4:	0800a0eb 	.word	0x0800a0eb
 800a0b8:	0800a0eb 	.word	0x0800a0eb
 800a0bc:	0800a0eb 	.word	0x0800a0eb
 800a0c0:	0800a0e3 	.word	0x0800a0e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0c4:	f7fd fb32 	bl	800772c <HAL_RCC_GetPCLK1Freq>
 800a0c8:	61f8      	str	r0, [r7, #28]
        break;
 800a0ca:	e014      	b.n	800a0f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0cc:	f7fd fb44 	bl	8007758 <HAL_RCC_GetPCLK2Freq>
 800a0d0:	61f8      	str	r0, [r7, #28]
        break;
 800a0d2:	e010      	b.n	800a0f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0d4:	4b4d      	ldr	r3, [pc, #308]	; (800a20c <UART_SetConfig+0x56c>)
 800a0d6:	61fb      	str	r3, [r7, #28]
        break;
 800a0d8:	e00d      	b.n	800a0f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0da:	f7fd fa8f 	bl	80075fc <HAL_RCC_GetSysClockFreq>
 800a0de:	61f8      	str	r0, [r7, #28]
        break;
 800a0e0:	e009      	b.n	800a0f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0e6:	61fb      	str	r3, [r7, #28]
        break;
 800a0e8:	e005      	b.n	800a0f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a0f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d077      	beq.n	800a1ec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	005a      	lsls	r2, r3, #1
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	085b      	lsrs	r3, r3, #1
 800a106:	441a      	add	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a110:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	2b0f      	cmp	r3, #15
 800a116:	d916      	bls.n	800a146 <UART_SetConfig+0x4a6>
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a11e:	d212      	bcs.n	800a146 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	b29b      	uxth	r3, r3
 800a124:	f023 030f 	bic.w	r3, r3, #15
 800a128:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	085b      	lsrs	r3, r3, #1
 800a12e:	b29b      	uxth	r3, r3
 800a130:	f003 0307 	and.w	r3, r3, #7
 800a134:	b29a      	uxth	r2, r3
 800a136:	8afb      	ldrh	r3, [r7, #22]
 800a138:	4313      	orrs	r3, r2
 800a13a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	8afa      	ldrh	r2, [r7, #22]
 800a142:	60da      	str	r2, [r3, #12]
 800a144:	e052      	b.n	800a1ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a14c:	e04e      	b.n	800a1ec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a14e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a152:	2b08      	cmp	r3, #8
 800a154:	d827      	bhi.n	800a1a6 <UART_SetConfig+0x506>
 800a156:	a201      	add	r2, pc, #4	; (adr r2, 800a15c <UART_SetConfig+0x4bc>)
 800a158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15c:	0800a181 	.word	0x0800a181
 800a160:	0800a189 	.word	0x0800a189
 800a164:	0800a191 	.word	0x0800a191
 800a168:	0800a1a7 	.word	0x0800a1a7
 800a16c:	0800a197 	.word	0x0800a197
 800a170:	0800a1a7 	.word	0x0800a1a7
 800a174:	0800a1a7 	.word	0x0800a1a7
 800a178:	0800a1a7 	.word	0x0800a1a7
 800a17c:	0800a19f 	.word	0x0800a19f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a180:	f7fd fad4 	bl	800772c <HAL_RCC_GetPCLK1Freq>
 800a184:	61f8      	str	r0, [r7, #28]
        break;
 800a186:	e014      	b.n	800a1b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a188:	f7fd fae6 	bl	8007758 <HAL_RCC_GetPCLK2Freq>
 800a18c:	61f8      	str	r0, [r7, #28]
        break;
 800a18e:	e010      	b.n	800a1b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a190:	4b1e      	ldr	r3, [pc, #120]	; (800a20c <UART_SetConfig+0x56c>)
 800a192:	61fb      	str	r3, [r7, #28]
        break;
 800a194:	e00d      	b.n	800a1b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a196:	f7fd fa31 	bl	80075fc <HAL_RCC_GetSysClockFreq>
 800a19a:	61f8      	str	r0, [r7, #28]
        break;
 800a19c:	e009      	b.n	800a1b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a19e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1a2:	61fb      	str	r3, [r7, #28]
        break;
 800a1a4:	e005      	b.n	800a1b2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a1b0:	bf00      	nop
    }

    if (pclk != 0U)
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d019      	beq.n	800a1ec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	085a      	lsrs	r2, r3, #1
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	441a      	add	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	2b0f      	cmp	r3, #15
 800a1d0:	d909      	bls.n	800a1e6 <UART_SetConfig+0x546>
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1d8:	d205      	bcs.n	800a1e6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	60da      	str	r2, [r3, #12]
 800a1e4:	e002      	b.n	800a1ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a1f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3728      	adds	r7, #40	; 0x28
 800a200:	46bd      	mov	sp, r7
 800a202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a206:	bf00      	nop
 800a208:	40008000 	.word	0x40008000
 800a20c:	00f42400 	.word	0x00f42400

0800a210 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21c:	f003 0308 	and.w	r3, r3, #8
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00a      	beq.n	800a23a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	430a      	orrs	r2, r1
 800a238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00a      	beq.n	800a25c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	430a      	orrs	r2, r1
 800a25a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a260:	f003 0302 	and.w	r3, r3, #2
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00a      	beq.n	800a27e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a282:	f003 0304 	and.w	r3, r3, #4
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	430a      	orrs	r2, r1
 800a29e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a4:	f003 0310 	and.w	r3, r3, #16
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00a      	beq.n	800a2c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c6:	f003 0320 	and.w	r3, r3, #32
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00a      	beq.n	800a2e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	430a      	orrs	r2, r1
 800a2e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d01a      	beq.n	800a326 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	430a      	orrs	r2, r1
 800a304:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a30e:	d10a      	bne.n	800a326 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	430a      	orrs	r2, r1
 800a324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00a      	beq.n	800a348 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	430a      	orrs	r2, r1
 800a346:	605a      	str	r2, [r3, #4]
  }
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b098      	sub	sp, #96	; 0x60
 800a358:	af02      	add	r7, sp, #8
 800a35a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a364:	f7f9 fa2a 	bl	80037bc <HAL_GetTick>
 800a368:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0308 	and.w	r3, r3, #8
 800a374:	2b08      	cmp	r3, #8
 800a376:	d12e      	bne.n	800a3d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a380:	2200      	movs	r2, #0
 800a382:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f88c 	bl	800a4a4 <UART_WaitOnFlagUntilTimeout>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d021      	beq.n	800a3d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39a:	e853 3f00 	ldrex	r3, [r3]
 800a39e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3a6:	653b      	str	r3, [r7, #80]	; 0x50
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3b0:	647b      	str	r3, [r7, #68]	; 0x44
 800a3b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3b8:	e841 2300 	strex	r3, r2, [r1]
 800a3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1e6      	bne.n	800a392 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e062      	b.n	800a49c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 0304 	and.w	r3, r3, #4
 800a3e0:	2b04      	cmp	r3, #4
 800a3e2:	d149      	bne.n	800a478 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f856 	bl	800a4a4 <UART_WaitOnFlagUntilTimeout>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d03c      	beq.n	800a478 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a406:	e853 3f00 	ldrex	r3, [r3]
 800a40a:	623b      	str	r3, [r7, #32]
   return(result);
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a412:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	461a      	mov	r2, r3
 800a41a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a41c:	633b      	str	r3, [r7, #48]	; 0x30
 800a41e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a420:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a424:	e841 2300 	strex	r3, r2, [r1]
 800a428:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1e6      	bne.n	800a3fe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3308      	adds	r3, #8
 800a436:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	e853 3f00 	ldrex	r3, [r3]
 800a43e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f023 0301 	bic.w	r3, r3, #1
 800a446:	64bb      	str	r3, [r7, #72]	; 0x48
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3308      	adds	r3, #8
 800a44e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a450:	61fa      	str	r2, [r7, #28]
 800a452:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a454:	69b9      	ldr	r1, [r7, #24]
 800a456:	69fa      	ldr	r2, [r7, #28]
 800a458:	e841 2300 	strex	r3, r2, [r1]
 800a45c:	617b      	str	r3, [r7, #20]
   return(result);
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1e5      	bne.n	800a430 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2220      	movs	r2, #32
 800a468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a474:	2303      	movs	r3, #3
 800a476:	e011      	b.n	800a49c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2220      	movs	r2, #32
 800a47c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2220      	movs	r2, #32
 800a482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3758      	adds	r7, #88	; 0x58
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	603b      	str	r3, [r7, #0]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4b4:	e04f      	b.n	800a556 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4bc:	d04b      	beq.n	800a556 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4be:	f7f9 f97d 	bl	80037bc <HAL_GetTick>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	69ba      	ldr	r2, [r7, #24]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d302      	bcc.n	800a4d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	e04e      	b.n	800a576 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 0304 	and.w	r3, r3, #4
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d037      	beq.n	800a556 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	2b80      	cmp	r3, #128	; 0x80
 800a4ea:	d034      	beq.n	800a556 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2b40      	cmp	r3, #64	; 0x40
 800a4f0:	d031      	beq.n	800a556 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	69db      	ldr	r3, [r3, #28]
 800a4f8:	f003 0308 	and.w	r3, r3, #8
 800a4fc:	2b08      	cmp	r3, #8
 800a4fe:	d110      	bne.n	800a522 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2208      	movs	r2, #8
 800a506:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 f8ff 	bl	800a70c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2208      	movs	r2, #8
 800a512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e029      	b.n	800a576 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	69db      	ldr	r3, [r3, #28]
 800a528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a52c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a530:	d111      	bne.n	800a556 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a53a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f000 f8e5 	bl	800a70c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2220      	movs	r2, #32
 800a546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a552:	2303      	movs	r3, #3
 800a554:	e00f      	b.n	800a576 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	69da      	ldr	r2, [r3, #28]
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	4013      	ands	r3, r2
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	429a      	cmp	r2, r3
 800a564:	bf0c      	ite	eq
 800a566:	2301      	moveq	r3, #1
 800a568:	2300      	movne	r3, #0
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	461a      	mov	r2, r3
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	429a      	cmp	r2, r3
 800a572:	d0a0      	beq.n	800a4b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
	...

0800a580 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b096      	sub	sp, #88	; 0x58
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	4613      	mov	r3, r2
 800a58c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	88fa      	ldrh	r2, [r7, #6]
 800a598:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2222      	movs	r2, #34	; 0x22
 800a5a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d028      	beq.n	800a606 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5b8:	4a3e      	ldr	r2, [pc, #248]	; (800a6b4 <UART_Start_Receive_DMA+0x134>)
 800a5ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5c0:	4a3d      	ldr	r2, [pc, #244]	; (800a6b8 <UART_Start_Receive_DMA+0x138>)
 800a5c2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5c8:	4a3c      	ldr	r2, [pc, #240]	; (800a6bc <UART_Start_Receive_DMA+0x13c>)
 800a5ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3324      	adds	r3, #36	; 0x24
 800a5de:	4619      	mov	r1, r3
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	88fb      	ldrh	r3, [r7, #6]
 800a5e8:	f7fa fe72 	bl	80052d0 <HAL_DMA_Start_IT>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d009      	beq.n	800a606 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2210      	movs	r2, #16
 800a5f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2220      	movs	r2, #32
 800a5fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e051      	b.n	800a6aa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d018      	beq.n	800a640 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a616:	e853 3f00 	ldrex	r3, [r3]
 800a61a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a622:	657b      	str	r3, [r7, #84]	; 0x54
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	461a      	mov	r2, r3
 800a62a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a62c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a62e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a630:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a634:	e841 2300 	strex	r3, r2, [r1]
 800a638:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1e6      	bne.n	800a60e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	3308      	adds	r3, #8
 800a646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64a:	e853 3f00 	ldrex	r3, [r3]
 800a64e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	f043 0301 	orr.w	r3, r3, #1
 800a656:	653b      	str	r3, [r7, #80]	; 0x50
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3308      	adds	r3, #8
 800a65e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a660:	637a      	str	r2, [r7, #52]	; 0x34
 800a662:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a664:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a668:	e841 2300 	strex	r3, r2, [r1]
 800a66c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a670:	2b00      	cmp	r3, #0
 800a672:	d1e5      	bne.n	800a640 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	3308      	adds	r3, #8
 800a67a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	e853 3f00 	ldrex	r3, [r3]
 800a682:	613b      	str	r3, [r7, #16]
   return(result);
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a68a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3308      	adds	r3, #8
 800a692:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a694:	623a      	str	r2, [r7, #32]
 800a696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a698:	69f9      	ldr	r1, [r7, #28]
 800a69a:	6a3a      	ldr	r2, [r7, #32]
 800a69c:	e841 2300 	strex	r3, r2, [r1]
 800a6a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d1e5      	bne.n	800a674 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3758      	adds	r7, #88	; 0x58
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	0800a7d5 	.word	0x0800a7d5
 800a6b8:	0800a901 	.word	0x0800a901
 800a6bc:	0800a93f 	.word	0x0800a93f

0800a6c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b089      	sub	sp, #36	; 0x24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	e853 3f00 	ldrex	r3, [r3]
 800a6d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a6dc:	61fb      	str	r3, [r7, #28]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	61bb      	str	r3, [r7, #24]
 800a6e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ea:	6979      	ldr	r1, [r7, #20]
 800a6ec:	69ba      	ldr	r2, [r7, #24]
 800a6ee:	e841 2300 	strex	r3, r2, [r1]
 800a6f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1e6      	bne.n	800a6c8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2220      	movs	r2, #32
 800a6fe:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800a700:	bf00      	nop
 800a702:	3724      	adds	r7, #36	; 0x24
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b095      	sub	sp, #84	; 0x54
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71c:	e853 3f00 	ldrex	r3, [r3]
 800a720:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a728:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a732:	643b      	str	r3, [r7, #64]	; 0x40
 800a734:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a736:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a738:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a73a:	e841 2300 	strex	r3, r2, [r1]
 800a73e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1e6      	bne.n	800a714 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3308      	adds	r3, #8
 800a74c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	e853 3f00 	ldrex	r3, [r3]
 800a754:	61fb      	str	r3, [r7, #28]
   return(result);
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	f023 0301 	bic.w	r3, r3, #1
 800a75c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	3308      	adds	r3, #8
 800a764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a766:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a768:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a76c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a76e:	e841 2300 	strex	r3, r2, [r1]
 800a772:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e5      	bne.n	800a746 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d118      	bne.n	800a7b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	e853 3f00 	ldrex	r3, [r3]
 800a78e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	f023 0310 	bic.w	r3, r3, #16
 800a796:	647b      	str	r3, [r7, #68]	; 0x44
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	461a      	mov	r2, r3
 800a79e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7a0:	61bb      	str	r3, [r7, #24]
 800a7a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a4:	6979      	ldr	r1, [r7, #20]
 800a7a6:	69ba      	ldr	r2, [r7, #24]
 800a7a8:	e841 2300 	strex	r3, r2, [r1]
 800a7ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1e6      	bne.n	800a782 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a7c8:	bf00      	nop
 800a7ca:	3754      	adds	r7, #84	; 0x54
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b09c      	sub	sp, #112	; 0x70
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0320 	and.w	r3, r3, #32
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d171      	bne.n	800a8d4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a7f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a800:	e853 3f00 	ldrex	r3, [r3]
 800a804:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a80c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a80e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	461a      	mov	r2, r3
 800a814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a816:	65bb      	str	r3, [r7, #88]	; 0x58
 800a818:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a81c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a81e:	e841 2300 	strex	r3, r2, [r1]
 800a822:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1e6      	bne.n	800a7f8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a82a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	3308      	adds	r3, #8
 800a830:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a834:	e853 3f00 	ldrex	r3, [r3]
 800a838:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a83c:	f023 0301 	bic.w	r3, r3, #1
 800a840:	667b      	str	r3, [r7, #100]	; 0x64
 800a842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	3308      	adds	r3, #8
 800a848:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a84a:	647a      	str	r2, [r7, #68]	; 0x44
 800a84c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a852:	e841 2300 	strex	r3, r2, [r1]
 800a856:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1e5      	bne.n	800a82a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a85e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	3308      	adds	r3, #8
 800a864:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a868:	e853 3f00 	ldrex	r3, [r3]
 800a86c:	623b      	str	r3, [r7, #32]
   return(result);
 800a86e:	6a3b      	ldr	r3, [r7, #32]
 800a870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a874:	663b      	str	r3, [r7, #96]	; 0x60
 800a876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	3308      	adds	r3, #8
 800a87c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a87e:	633a      	str	r2, [r7, #48]	; 0x30
 800a880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a886:	e841 2300 	strex	r3, r2, [r1]
 800a88a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1e5      	bne.n	800a85e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a894:	2220      	movs	r2, #32
 800a896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a89a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a89c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d118      	bne.n	800a8d4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	e853 3f00 	ldrex	r3, [r3]
 800a8ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f023 0310 	bic.w	r3, r3, #16
 800a8b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	461a      	mov	r2, r3
 800a8be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8c0:	61fb      	str	r3, [r7, #28]
 800a8c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c4:	69b9      	ldr	r1, [r7, #24]
 800a8c6:	69fa      	ldr	r2, [r7, #28]
 800a8c8:	e841 2300 	strex	r3, r2, [r1]
 800a8cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1e6      	bne.n	800a8a2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d107      	bne.n	800a8f2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a8ec:	f7ff f9cc 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8f0:	e002      	b.n	800a8f8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a8f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a8f4:	f7f6 fd04 	bl	8001300 <HAL_UART_RxCpltCallback>
}
 800a8f8:	bf00      	nop
 800a8fa:	3770      	adds	r7, #112	; 0x70
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a90c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2201      	movs	r2, #1
 800a912:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d109      	bne.n	800a930 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a922:	085b      	lsrs	r3, r3, #1
 800a924:	b29b      	uxth	r3, r3
 800a926:	4619      	mov	r1, r3
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f7ff f9ad 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a92e:	e002      	b.n	800a936 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f7ff f995 	bl	8009c60 <HAL_UART_RxHalfCpltCallback>
}
 800a936:	bf00      	nop
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b086      	sub	sp, #24
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a94a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a950:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a958:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a964:	2b80      	cmp	r3, #128	; 0x80
 800a966:	d109      	bne.n	800a97c <UART_DMAError+0x3e>
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	2b21      	cmp	r3, #33	; 0x21
 800a96c:	d106      	bne.n	800a97c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2200      	movs	r2, #0
 800a972:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a976:	6978      	ldr	r0, [r7, #20]
 800a978:	f7ff fea2 	bl	800a6c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a986:	2b40      	cmp	r3, #64	; 0x40
 800a988:	d109      	bne.n	800a99e <UART_DMAError+0x60>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2b22      	cmp	r3, #34	; 0x22
 800a98e:	d106      	bne.n	800a99e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	2200      	movs	r2, #0
 800a994:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a998:	6978      	ldr	r0, [r7, #20]
 800a99a:	f7ff feb7 	bl	800a70c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9a4:	f043 0210 	orr.w	r2, r3, #16
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9ae:	6978      	ldr	r0, [r7, #20]
 800a9b0:	f7ff f960 	bl	8009c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9b4:	bf00      	nop
 800a9b6:	3718      	adds	r7, #24
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f7ff f94a 	bl	8009c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9e0:	bf00      	nop
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b088      	sub	sp, #32
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	e853 3f00 	ldrex	r3, [r3]
 800a9fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa04:	61fb      	str	r3, [r7, #28]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	61bb      	str	r3, [r7, #24]
 800aa10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa12:	6979      	ldr	r1, [r7, #20]
 800aa14:	69ba      	ldr	r2, [r7, #24]
 800aa16:	e841 2300 	strex	r3, r2, [r1]
 800aa1a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1e6      	bne.n	800a9f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2220      	movs	r2, #32
 800aa26:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7ff f90c 	bl	8009c4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa34:	bf00      	nop
 800aa36:	3720      	adds	r7, #32
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f103 0208 	add.w	r2, r3, #8
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f04f 32ff 	mov.w	r2, #4294967295
 800aa68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f103 0208 	add.w	r2, r3, #8
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f103 0208 	add.w	r2, r3, #8
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa9e:	bf00      	nop
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b085      	sub	sp, #20
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	689a      	ldr	r2, [r3, #8]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	1c5a      	adds	r2, r3, #1
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	601a      	str	r2, [r3, #0]
}
 800aae6:	bf00      	nop
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b085      	sub	sp, #20
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab08:	d103      	bne.n	800ab12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	60fb      	str	r3, [r7, #12]
 800ab10:	e00c      	b.n	800ab2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	3308      	adds	r3, #8
 800ab16:	60fb      	str	r3, [r7, #12]
 800ab18:	e002      	b.n	800ab20 <vListInsert+0x2e>
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d2f6      	bcs.n	800ab1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	685a      	ldr	r2, [r3, #4]
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	1c5a      	adds	r2, r3, #1
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	601a      	str	r2, [r3, #0]
}
 800ab58:	bf00      	nop
 800ab5a:	3714      	adds	r7, #20
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	6892      	ldr	r2, [r2, #8]
 800ab7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	6852      	ldr	r2, [r2, #4]
 800ab84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d103      	bne.n	800ab98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	689a      	ldr	r2, [r3, #8]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	1e5a      	subs	r2, r3, #1
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
}
 800abac:	4618      	mov	r0, r3
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10a      	bne.n	800abe2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800abde:	bf00      	nop
 800abe0:	e7fe      	b.n	800abe0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800abe2:	f001 fed7 	bl	800c994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abee:	68f9      	ldr	r1, [r7, #12]
 800abf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abf2:	fb01 f303 	mul.w	r3, r1, r3
 800abf6:	441a      	add	r2, r3
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2200      	movs	r2, #0
 800ac00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac12:	3b01      	subs	r3, #1
 800ac14:	68f9      	ldr	r1, [r7, #12]
 800ac16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac18:	fb01 f303 	mul.w	r3, r1, r3
 800ac1c:	441a      	add	r2, r3
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	22ff      	movs	r2, #255	; 0xff
 800ac26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	22ff      	movs	r2, #255	; 0xff
 800ac2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d114      	bne.n	800ac62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d01a      	beq.n	800ac76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	3310      	adds	r3, #16
 800ac44:	4618      	mov	r0, r3
 800ac46:	f001 f961 	bl	800bf0c <xTaskRemoveFromEventList>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d012      	beq.n	800ac76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac50:	4b0c      	ldr	r3, [pc, #48]	; (800ac84 <xQueueGenericReset+0xcc>)
 800ac52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac56:	601a      	str	r2, [r3, #0]
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	e009      	b.n	800ac76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	3310      	adds	r3, #16
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7ff fef2 	bl	800aa50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	3324      	adds	r3, #36	; 0x24
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7ff feed 	bl	800aa50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac76:	f001 febd 	bl	800c9f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac7a:	2301      	movs	r3, #1
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	e000ed04 	.word	0xe000ed04

0800ac88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08a      	sub	sp, #40	; 0x28
 800ac8c:	af02      	add	r7, sp, #8
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	4613      	mov	r3, r2
 800ac94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10a      	bne.n	800acb2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ac9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca0:	f383 8811 	msr	BASEPRI, r3
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	613b      	str	r3, [r7, #16]
}
 800acae:	bf00      	nop
 800acb0:	e7fe      	b.n	800acb0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	68ba      	ldr	r2, [r7, #8]
 800acb6:	fb02 f303 	mul.w	r3, r2, r3
 800acba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	3348      	adds	r3, #72	; 0x48
 800acc0:	4618      	mov	r0, r3
 800acc2:	f001 ff89 	bl	800cbd8 <pvPortMalloc>
 800acc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d011      	beq.n	800acf2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	3348      	adds	r3, #72	; 0x48
 800acd6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ace0:	79fa      	ldrb	r2, [r7, #7]
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	4613      	mov	r3, r2
 800ace8:	697a      	ldr	r2, [r7, #20]
 800acea:	68b9      	ldr	r1, [r7, #8]
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f000 f805 	bl	800acfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800acf2:	69bb      	ldr	r3, [r7, #24]
	}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3720      	adds	r7, #32
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
 800ad08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d103      	bne.n	800ad18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	69ba      	ldr	r2, [r7, #24]
 800ad14:	601a      	str	r2, [r3, #0]
 800ad16:	e002      	b.n	800ad1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad2a:	2101      	movs	r1, #1
 800ad2c:	69b8      	ldr	r0, [r7, #24]
 800ad2e:	f7ff ff43 	bl	800abb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad32:	bf00      	nop
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
	...

0800ad3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b08e      	sub	sp, #56	; 0x38
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
 800ad48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10a      	bne.n	800ad6e <xQueueGenericSend+0x32>
	__asm volatile
 800ad58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5c:	f383 8811 	msr	BASEPRI, r3
 800ad60:	f3bf 8f6f 	isb	sy
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad6a:	bf00      	nop
 800ad6c:	e7fe      	b.n	800ad6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d103      	bne.n	800ad7c <xQueueGenericSend+0x40>
 800ad74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d101      	bne.n	800ad80 <xQueueGenericSend+0x44>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e000      	b.n	800ad82 <xQueueGenericSend+0x46>
 800ad80:	2300      	movs	r3, #0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10a      	bne.n	800ad9c <xQueueGenericSend+0x60>
	__asm volatile
 800ad86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8a:	f383 8811 	msr	BASEPRI, r3
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f3bf 8f4f 	dsb	sy
 800ad96:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad98:	bf00      	nop
 800ad9a:	e7fe      	b.n	800ad9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	d103      	bne.n	800adaa <xQueueGenericSend+0x6e>
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d101      	bne.n	800adae <xQueueGenericSend+0x72>
 800adaa:	2301      	movs	r3, #1
 800adac:	e000      	b.n	800adb0 <xQueueGenericSend+0x74>
 800adae:	2300      	movs	r3, #0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d10a      	bne.n	800adca <xQueueGenericSend+0x8e>
	__asm volatile
 800adb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb8:	f383 8811 	msr	BASEPRI, r3
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	f3bf 8f4f 	dsb	sy
 800adc4:	623b      	str	r3, [r7, #32]
}
 800adc6:	bf00      	nop
 800adc8:	e7fe      	b.n	800adc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adca:	f001 fa97 	bl	800c2fc <xTaskGetSchedulerState>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d102      	bne.n	800adda <xQueueGenericSend+0x9e>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <xQueueGenericSend+0xa2>
 800adda:	2301      	movs	r3, #1
 800addc:	e000      	b.n	800ade0 <xQueueGenericSend+0xa4>
 800adde:	2300      	movs	r3, #0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <xQueueGenericSend+0xbe>
	__asm volatile
 800ade4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	61fb      	str	r3, [r7, #28]
}
 800adf6:	bf00      	nop
 800adf8:	e7fe      	b.n	800adf8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adfa:	f001 fdcb 	bl	800c994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d302      	bcc.n	800ae10 <xQueueGenericSend+0xd4>
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	d129      	bne.n	800ae64 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae10:	683a      	ldr	r2, [r7, #0]
 800ae12:	68b9      	ldr	r1, [r7, #8]
 800ae14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae16:	f000 fb21 	bl	800b45c <prvCopyDataToQueue>
 800ae1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d010      	beq.n	800ae46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae26:	3324      	adds	r3, #36	; 0x24
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f001 f86f 	bl	800bf0c <xTaskRemoveFromEventList>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d013      	beq.n	800ae5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae34:	4b3f      	ldr	r3, [pc, #252]	; (800af34 <xQueueGenericSend+0x1f8>)
 800ae36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae3a:	601a      	str	r2, [r3, #0]
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	f3bf 8f6f 	isb	sy
 800ae44:	e00a      	b.n	800ae5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d007      	beq.n	800ae5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae4c:	4b39      	ldr	r3, [pc, #228]	; (800af34 <xQueueGenericSend+0x1f8>)
 800ae4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae5c:	f001 fdca 	bl	800c9f4 <vPortExitCritical>
				return pdPASS;
 800ae60:	2301      	movs	r3, #1
 800ae62:	e063      	b.n	800af2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d103      	bne.n	800ae72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae6a:	f001 fdc3 	bl	800c9f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e05c      	b.n	800af2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d106      	bne.n	800ae86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae78:	f107 0314 	add.w	r3, r7, #20
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f001 f8a7 	bl	800bfd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae82:	2301      	movs	r3, #1
 800ae84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae86:	f001 fdb5 	bl	800c9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae8a:	f000 fe47 	bl	800bb1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae8e:	f001 fd81 	bl	800c994 <vPortEnterCritical>
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae98:	b25b      	sxtb	r3, r3
 800ae9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae9e:	d103      	bne.n	800aea8 <xQueueGenericSend+0x16c>
 800aea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea2:	2200      	movs	r2, #0
 800aea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeae:	b25b      	sxtb	r3, r3
 800aeb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb4:	d103      	bne.n	800aebe <xQueueGenericSend+0x182>
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aebe:	f001 fd99 	bl	800c9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aec2:	1d3a      	adds	r2, r7, #4
 800aec4:	f107 0314 	add.w	r3, r7, #20
 800aec8:	4611      	mov	r1, r2
 800aeca:	4618      	mov	r0, r3
 800aecc:	f001 f896 	bl	800bffc <xTaskCheckForTimeOut>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d124      	bne.n	800af20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aed6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aed8:	f000 fbb8 	bl	800b64c <prvIsQueueFull>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d018      	beq.n	800af14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee4:	3310      	adds	r3, #16
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	4611      	mov	r1, r2
 800aeea:	4618      	mov	r0, r3
 800aeec:	f000 ffea 	bl	800bec4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aef2:	f000 fb43 	bl	800b57c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aef6:	f000 fe1f 	bl	800bb38 <xTaskResumeAll>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f47f af7c 	bne.w	800adfa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af02:	4b0c      	ldr	r3, [pc, #48]	; (800af34 <xQueueGenericSend+0x1f8>)
 800af04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af08:	601a      	str	r2, [r3, #0]
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	e772      	b.n	800adfa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af16:	f000 fb31 	bl	800b57c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af1a:	f000 fe0d 	bl	800bb38 <xTaskResumeAll>
 800af1e:	e76c      	b.n	800adfa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af22:	f000 fb2b 	bl	800b57c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af26:	f000 fe07 	bl	800bb38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3738      	adds	r7, #56	; 0x38
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	e000ed04 	.word	0xe000ed04

0800af38 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b08e      	sub	sp, #56	; 0x38
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10a      	bne.n	800af62 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800af4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af50:	f383 8811 	msr	BASEPRI, r3
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	623b      	str	r3, [r7, #32]
}
 800af5e:	bf00      	nop
 800af60:	e7fe      	b.n	800af60 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00a      	beq.n	800af80 <xQueueGiveFromISR+0x48>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	61fb      	str	r3, [r7, #28]
}
 800af7c:	bf00      	nop
 800af7e:	e7fe      	b.n	800af7e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800af80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d103      	bne.n	800af90 <xQueueGiveFromISR+0x58>
 800af88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d101      	bne.n	800af94 <xQueueGiveFromISR+0x5c>
 800af90:	2301      	movs	r3, #1
 800af92:	e000      	b.n	800af96 <xQueueGiveFromISR+0x5e>
 800af94:	2300      	movs	r3, #0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10a      	bne.n	800afb0 <xQueueGiveFromISR+0x78>
	__asm volatile
 800af9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9e:	f383 8811 	msr	BASEPRI, r3
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	61bb      	str	r3, [r7, #24]
}
 800afac:	bf00      	nop
 800afae:	e7fe      	b.n	800afae <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afb0:	f001 fdd2 	bl	800cb58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800afb4:	f3ef 8211 	mrs	r2, BASEPRI
 800afb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbc:	f383 8811 	msr	BASEPRI, r3
 800afc0:	f3bf 8f6f 	isb	sy
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	617a      	str	r2, [r7, #20]
 800afca:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800afcc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afdc:	429a      	cmp	r2, r3
 800afde:	d22b      	bcs.n	800b038 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afec:	1c5a      	adds	r2, r3, #1
 800afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aff2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800affa:	d112      	bne.n	800b022 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800affc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b000:	2b00      	cmp	r3, #0
 800b002:	d016      	beq.n	800b032 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b006:	3324      	adds	r3, #36	; 0x24
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 ff7f 	bl	800bf0c <xTaskRemoveFromEventList>
 800b00e:	4603      	mov	r3, r0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00e      	beq.n	800b032 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00b      	beq.n	800b032 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	2201      	movs	r2, #1
 800b01e:	601a      	str	r2, [r3, #0]
 800b020:	e007      	b.n	800b032 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b026:	3301      	adds	r3, #1
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	b25a      	sxtb	r2, r3
 800b02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b032:	2301      	movs	r3, #1
 800b034:	637b      	str	r3, [r7, #52]	; 0x34
 800b036:	e001      	b.n	800b03c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b038:	2300      	movs	r3, #0
 800b03a:	637b      	str	r3, [r7, #52]	; 0x34
 800b03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b046:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3738      	adds	r7, #56	; 0x38
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
	...

0800b054 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08c      	sub	sp, #48	; 0x30
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b060:	2300      	movs	r3, #0
 800b062:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10a      	bne.n	800b084 <xQueueReceive+0x30>
	__asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	623b      	str	r3, [r7, #32]
}
 800b080:	bf00      	nop
 800b082:	e7fe      	b.n	800b082 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d103      	bne.n	800b092 <xQueueReceive+0x3e>
 800b08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <xQueueReceive+0x42>
 800b092:	2301      	movs	r3, #1
 800b094:	e000      	b.n	800b098 <xQueueReceive+0x44>
 800b096:	2300      	movs	r3, #0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10a      	bne.n	800b0b2 <xQueueReceive+0x5e>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	61fb      	str	r3, [r7, #28]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0b2:	f001 f923 	bl	800c2fc <xTaskGetSchedulerState>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d102      	bne.n	800b0c2 <xQueueReceive+0x6e>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <xQueueReceive+0x72>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e000      	b.n	800b0c8 <xQueueReceive+0x74>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10a      	bne.n	800b0e2 <xQueueReceive+0x8e>
	__asm volatile
 800b0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d0:	f383 8811 	msr	BASEPRI, r3
 800b0d4:	f3bf 8f6f 	isb	sy
 800b0d8:	f3bf 8f4f 	dsb	sy
 800b0dc:	61bb      	str	r3, [r7, #24]
}
 800b0de:	bf00      	nop
 800b0e0:	e7fe      	b.n	800b0e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0e2:	f001 fc57 	bl	800c994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d01f      	beq.n	800b132 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0f2:	68b9      	ldr	r1, [r7, #8]
 800b0f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0f6:	f000 fa1b 	bl	800b530 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	1e5a      	subs	r2, r3, #1
 800b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b100:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00f      	beq.n	800b12a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10c:	3310      	adds	r3, #16
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 fefc 	bl	800bf0c <xTaskRemoveFromEventList>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d007      	beq.n	800b12a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b11a:	4b3d      	ldr	r3, [pc, #244]	; (800b210 <xQueueReceive+0x1bc>)
 800b11c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b12a:	f001 fc63 	bl	800c9f4 <vPortExitCritical>
				return pdPASS;
 800b12e:	2301      	movs	r3, #1
 800b130:	e069      	b.n	800b206 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d103      	bne.n	800b140 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b138:	f001 fc5c 	bl	800c9f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b13c:	2300      	movs	r3, #0
 800b13e:	e062      	b.n	800b206 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b142:	2b00      	cmp	r3, #0
 800b144:	d106      	bne.n	800b154 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b146:	f107 0310 	add.w	r3, r7, #16
 800b14a:	4618      	mov	r0, r3
 800b14c:	f000 ff40 	bl	800bfd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b150:	2301      	movs	r3, #1
 800b152:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b154:	f001 fc4e 	bl	800c9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b158:	f000 fce0 	bl	800bb1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b15c:	f001 fc1a 	bl	800c994 <vPortEnterCritical>
 800b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b166:	b25b      	sxtb	r3, r3
 800b168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b16c:	d103      	bne.n	800b176 <xQueueReceive+0x122>
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	2200      	movs	r2, #0
 800b172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b17c:	b25b      	sxtb	r3, r3
 800b17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b182:	d103      	bne.n	800b18c <xQueueReceive+0x138>
 800b184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b186:	2200      	movs	r2, #0
 800b188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b18c:	f001 fc32 	bl	800c9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b190:	1d3a      	adds	r2, r7, #4
 800b192:	f107 0310 	add.w	r3, r7, #16
 800b196:	4611      	mov	r1, r2
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 ff2f 	bl	800bffc <xTaskCheckForTimeOut>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d123      	bne.n	800b1ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1a6:	f000 fa3b 	bl	800b620 <prvIsQueueEmpty>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d017      	beq.n	800b1e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b2:	3324      	adds	r3, #36	; 0x24
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f000 fe83 	bl	800bec4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1c0:	f000 f9dc 	bl	800b57c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1c4:	f000 fcb8 	bl	800bb38 <xTaskResumeAll>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d189      	bne.n	800b0e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b1ce:	4b10      	ldr	r3, [pc, #64]	; (800b210 <xQueueReceive+0x1bc>)
 800b1d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	e780      	b.n	800b0e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1e2:	f000 f9cb 	bl	800b57c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1e6:	f000 fca7 	bl	800bb38 <xTaskResumeAll>
 800b1ea:	e77a      	b.n	800b0e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ee:	f000 f9c5 	bl	800b57c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1f2:	f000 fca1 	bl	800bb38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1f8:	f000 fa12 	bl	800b620 <prvIsQueueEmpty>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f43f af6f 	beq.w	800b0e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b204:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b206:	4618      	mov	r0, r3
 800b208:	3730      	adds	r7, #48	; 0x30
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	e000ed04 	.word	0xe000ed04

0800b214 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b08e      	sub	sp, #56	; 0x38
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b21e:	2300      	movs	r3, #0
 800b220:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b226:	2300      	movs	r3, #0
 800b228:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10a      	bne.n	800b246 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	623b      	str	r3, [r7, #32]
}
 800b242:	bf00      	nop
 800b244:	e7fe      	b.n	800b244 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00a      	beq.n	800b264 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	61fb      	str	r3, [r7, #28]
}
 800b260:	bf00      	nop
 800b262:	e7fe      	b.n	800b262 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b264:	f001 f84a 	bl	800c2fc <xTaskGetSchedulerState>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d102      	bne.n	800b274 <xQueueSemaphoreTake+0x60>
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d101      	bne.n	800b278 <xQueueSemaphoreTake+0x64>
 800b274:	2301      	movs	r3, #1
 800b276:	e000      	b.n	800b27a <xQueueSemaphoreTake+0x66>
 800b278:	2300      	movs	r3, #0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d10a      	bne.n	800b294 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	61bb      	str	r3, [r7, #24]
}
 800b290:	bf00      	nop
 800b292:	e7fe      	b.n	800b292 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b294:	f001 fb7e 	bl	800c994 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d024      	beq.n	800b2ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a6:	1e5a      	subs	r2, r3, #1
 800b2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d104      	bne.n	800b2be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b2b4:	f001 f9ca 	bl	800c64c <pvTaskIncrementMutexHeldCount>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00f      	beq.n	800b2e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c8:	3310      	adds	r3, #16
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f000 fe1e 	bl	800bf0c <xTaskRemoveFromEventList>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d007      	beq.n	800b2e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b2d6:	4b54      	ldr	r3, [pc, #336]	; (800b428 <xQueueSemaphoreTake+0x214>)
 800b2d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2dc:	601a      	str	r2, [r3, #0]
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b2e6:	f001 fb85 	bl	800c9f4 <vPortExitCritical>
				return pdPASS;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e097      	b.n	800b41e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d111      	bne.n	800b318 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00a      	beq.n	800b310 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fe:	f383 8811 	msr	BASEPRI, r3
 800b302:	f3bf 8f6f 	isb	sy
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	617b      	str	r3, [r7, #20]
}
 800b30c:	bf00      	nop
 800b30e:	e7fe      	b.n	800b30e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b310:	f001 fb70 	bl	800c9f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b314:	2300      	movs	r3, #0
 800b316:	e082      	b.n	800b41e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d106      	bne.n	800b32c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b31e:	f107 030c 	add.w	r3, r7, #12
 800b322:	4618      	mov	r0, r3
 800b324:	f000 fe54 	bl	800bfd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b328:	2301      	movs	r3, #1
 800b32a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b32c:	f001 fb62 	bl	800c9f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b330:	f000 fbf4 	bl	800bb1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b334:	f001 fb2e 	bl	800c994 <vPortEnterCritical>
 800b338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b33e:	b25b      	sxtb	r3, r3
 800b340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b344:	d103      	bne.n	800b34e <xQueueSemaphoreTake+0x13a>
 800b346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b354:	b25b      	sxtb	r3, r3
 800b356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b35a:	d103      	bne.n	800b364 <xQueueSemaphoreTake+0x150>
 800b35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35e:	2200      	movs	r2, #0
 800b360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b364:	f001 fb46 	bl	800c9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b368:	463a      	mov	r2, r7
 800b36a:	f107 030c 	add.w	r3, r7, #12
 800b36e:	4611      	mov	r1, r2
 800b370:	4618      	mov	r0, r3
 800b372:	f000 fe43 	bl	800bffc <xTaskCheckForTimeOut>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d132      	bne.n	800b3e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b37c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b37e:	f000 f94f 	bl	800b620 <prvIsQueueEmpty>
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d026      	beq.n	800b3d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d109      	bne.n	800b3a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b390:	f001 fb00 	bl	800c994 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	4618      	mov	r0, r3
 800b39a:	f000 ffcd 	bl	800c338 <xTaskPriorityInherit>
 800b39e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b3a0:	f001 fb28 	bl	800c9f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a6:	3324      	adds	r3, #36	; 0x24
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f000 fd89 	bl	800bec4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3b4:	f000 f8e2 	bl	800b57c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3b8:	f000 fbbe 	bl	800bb38 <xTaskResumeAll>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f47f af68 	bne.w	800b294 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b3c4:	4b18      	ldr	r3, [pc, #96]	; (800b428 <xQueueSemaphoreTake+0x214>)
 800b3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ca:	601a      	str	r2, [r3, #0]
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	f3bf 8f6f 	isb	sy
 800b3d4:	e75e      	b.n	800b294 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b3d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3d8:	f000 f8d0 	bl	800b57c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3dc:	f000 fbac 	bl	800bb38 <xTaskResumeAll>
 800b3e0:	e758      	b.n	800b294 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b3e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3e4:	f000 f8ca 	bl	800b57c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3e8:	f000 fba6 	bl	800bb38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3ee:	f000 f917 	bl	800b620 <prvIsQueueEmpty>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f43f af4d 	beq.w	800b294 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00d      	beq.n	800b41c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b400:	f001 fac8 	bl	800c994 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b404:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b406:	f000 f811 	bl	800b42c <prvGetDisinheritPriorityAfterTimeout>
 800b40a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b412:	4618      	mov	r0, r3
 800b414:	f001 f88c 	bl	800c530 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b418:	f001 faec 	bl	800c9f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b41c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3738      	adds	r7, #56	; 0x38
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	e000ed04 	.word	0xe000ed04

0800b42c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d006      	beq.n	800b44a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f1c3 0307 	rsb	r3, r3, #7
 800b446:	60fb      	str	r3, [r7, #12]
 800b448:	e001      	b.n	800b44e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b44a:	2300      	movs	r3, #0
 800b44c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b44e:	68fb      	ldr	r3, [r7, #12]
	}
 800b450:	4618      	mov	r0, r3
 800b452:	3714      	adds	r7, #20
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b086      	sub	sp, #24
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b468:	2300      	movs	r3, #0
 800b46a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b470:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10d      	bne.n	800b496 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d14d      	bne.n	800b51e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	4618      	mov	r0, r3
 800b488:	f000 ffcc 	bl	800c424 <xTaskPriorityDisinherit>
 800b48c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	609a      	str	r2, [r3, #8]
 800b494:	e043      	b.n	800b51e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d119      	bne.n	800b4d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6858      	ldr	r0, [r3, #4]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	68b9      	ldr	r1, [r7, #8]
 800b4a8:	f002 fe3d 	bl	800e126 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	685a      	ldr	r2, [r3, #4]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b4:	441a      	add	r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	685a      	ldr	r2, [r3, #4]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d32b      	bcc.n	800b51e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	605a      	str	r2, [r3, #4]
 800b4ce:	e026      	b.n	800b51e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	68d8      	ldr	r0, [r3, #12]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d8:	461a      	mov	r2, r3
 800b4da:	68b9      	ldr	r1, [r7, #8]
 800b4dc:	f002 fe23 	bl	800e126 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	68da      	ldr	r2, [r3, #12]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e8:	425b      	negs	r3, r3
 800b4ea:	441a      	add	r2, r3
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	68da      	ldr	r2, [r3, #12]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d207      	bcs.n	800b50c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	689a      	ldr	r2, [r3, #8]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b504:	425b      	negs	r3, r3
 800b506:	441a      	add	r2, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	d105      	bne.n	800b51e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d002      	beq.n	800b51e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	3b01      	subs	r3, #1
 800b51c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	1c5a      	adds	r2, r3, #1
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b526:	697b      	ldr	r3, [r7, #20]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3718      	adds	r7, #24
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d018      	beq.n	800b574 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68da      	ldr	r2, [r3, #12]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b54a:	441a      	add	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	68da      	ldr	r2, [r3, #12]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d303      	bcc.n	800b564 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	68d9      	ldr	r1, [r3, #12]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56c:	461a      	mov	r2, r3
 800b56e:	6838      	ldr	r0, [r7, #0]
 800b570:	f002 fdd9 	bl	800e126 <memcpy>
	}
}
 800b574:	bf00      	nop
 800b576:	3708      	adds	r7, #8
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b584:	f001 fa06 	bl	800c994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b58e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b590:	e011      	b.n	800b5b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b596:	2b00      	cmp	r3, #0
 800b598:	d012      	beq.n	800b5c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	3324      	adds	r3, #36	; 0x24
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 fcb4 	bl	800bf0c <xTaskRemoveFromEventList>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b5aa:	f000 fd89 	bl	800c0c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b5ae:	7bfb      	ldrb	r3, [r7, #15]
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	dce9      	bgt.n	800b592 <prvUnlockQueue+0x16>
 800b5be:	e000      	b.n	800b5c2 <prvUnlockQueue+0x46>
					break;
 800b5c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	22ff      	movs	r2, #255	; 0xff
 800b5c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b5ca:	f001 fa13 	bl	800c9f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b5ce:	f001 f9e1 	bl	800c994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5da:	e011      	b.n	800b600 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	691b      	ldr	r3, [r3, #16]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d012      	beq.n	800b60a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	3310      	adds	r3, #16
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 fc8f 	bl	800bf0c <xTaskRemoveFromEventList>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d001      	beq.n	800b5f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b5f4:	f000 fd64 	bl	800c0c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b5f8:	7bbb      	ldrb	r3, [r7, #14]
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b604:	2b00      	cmp	r3, #0
 800b606:	dce9      	bgt.n	800b5dc <prvUnlockQueue+0x60>
 800b608:	e000      	b.n	800b60c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b60a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	22ff      	movs	r2, #255	; 0xff
 800b610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b614:	f001 f9ee 	bl	800c9f4 <vPortExitCritical>
}
 800b618:	bf00      	nop
 800b61a:	3710      	adds	r7, #16
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b628:	f001 f9b4 	bl	800c994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b630:	2b00      	cmp	r3, #0
 800b632:	d102      	bne.n	800b63a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b634:	2301      	movs	r3, #1
 800b636:	60fb      	str	r3, [r7, #12]
 800b638:	e001      	b.n	800b63e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b63a:	2300      	movs	r3, #0
 800b63c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b63e:	f001 f9d9 	bl	800c9f4 <vPortExitCritical>

	return xReturn;
 800b642:	68fb      	ldr	r3, [r7, #12]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b654:	f001 f99e 	bl	800c994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b660:	429a      	cmp	r2, r3
 800b662:	d102      	bne.n	800b66a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b664:	2301      	movs	r3, #1
 800b666:	60fb      	str	r3, [r7, #12]
 800b668:	e001      	b.n	800b66e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b66a:	2300      	movs	r3, #0
 800b66c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b66e:	f001 f9c1 	bl	800c9f4 <vPortExitCritical>

	return xReturn;
 800b672:	68fb      	ldr	r3, [r7, #12]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b08e      	sub	sp, #56	; 0x38
 800b680:	af04      	add	r7, sp, #16
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
 800b688:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d10a      	bne.n	800b6a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b694:	f383 8811 	msr	BASEPRI, r3
 800b698:	f3bf 8f6f 	isb	sy
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	623b      	str	r3, [r7, #32]
}
 800b6a2:	bf00      	nop
 800b6a4:	e7fe      	b.n	800b6a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d10a      	bne.n	800b6c2 <xTaskCreateStatic+0x46>
	__asm volatile
 800b6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b0:	f383 8811 	msr	BASEPRI, r3
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	61fb      	str	r3, [r7, #28]
}
 800b6be:	bf00      	nop
 800b6c0:	e7fe      	b.n	800b6c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b6c2:	23a0      	movs	r3, #160	; 0xa0
 800b6c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	2ba0      	cmp	r3, #160	; 0xa0
 800b6ca:	d00a      	beq.n	800b6e2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d0:	f383 8811 	msr	BASEPRI, r3
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	61bb      	str	r3, [r7, #24]
}
 800b6de:	bf00      	nop
 800b6e0:	e7fe      	b.n	800b6e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b6e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d01e      	beq.n	800b728 <xTaskCreateStatic+0xac>
 800b6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d01b      	beq.n	800b728 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fc:	2202      	movs	r2, #2
 800b6fe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b702:	2300      	movs	r3, #0
 800b704:	9303      	str	r3, [sp, #12]
 800b706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b708:	9302      	str	r3, [sp, #8]
 800b70a:	f107 0314 	add.w	r3, r7, #20
 800b70e:	9301      	str	r3, [sp, #4]
 800b710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	68b9      	ldr	r1, [r7, #8]
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f000 f850 	bl	800b7c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b722:	f000 f8f3 	bl	800b90c <prvAddNewTaskToReadyList>
 800b726:	e001      	b.n	800b72c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b728:	2300      	movs	r3, #0
 800b72a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b72c:	697b      	ldr	r3, [r7, #20]
	}
 800b72e:	4618      	mov	r0, r3
 800b730:	3728      	adds	r7, #40	; 0x28
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b736:	b580      	push	{r7, lr}
 800b738:	b08c      	sub	sp, #48	; 0x30
 800b73a:	af04      	add	r7, sp, #16
 800b73c:	60f8      	str	r0, [r7, #12]
 800b73e:	60b9      	str	r1, [r7, #8]
 800b740:	603b      	str	r3, [r7, #0]
 800b742:	4613      	mov	r3, r2
 800b744:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b746:	88fb      	ldrh	r3, [r7, #6]
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4618      	mov	r0, r3
 800b74c:	f001 fa44 	bl	800cbd8 <pvPortMalloc>
 800b750:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d00e      	beq.n	800b776 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b758:	20a0      	movs	r0, #160	; 0xa0
 800b75a:	f001 fa3d 	bl	800cbd8 <pvPortMalloc>
 800b75e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b760:	69fb      	ldr	r3, [r7, #28]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d003      	beq.n	800b76e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	631a      	str	r2, [r3, #48]	; 0x30
 800b76c:	e005      	b.n	800b77a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b76e:	6978      	ldr	r0, [r7, #20]
 800b770:	f001 fafe 	bl	800cd70 <vPortFree>
 800b774:	e001      	b.n	800b77a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b776:	2300      	movs	r3, #0
 800b778:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d017      	beq.n	800b7b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b788:	88fa      	ldrh	r2, [r7, #6]
 800b78a:	2300      	movs	r3, #0
 800b78c:	9303      	str	r3, [sp, #12]
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	9302      	str	r3, [sp, #8]
 800b792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b794:	9301      	str	r3, [sp, #4]
 800b796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	68b9      	ldr	r1, [r7, #8]
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f000 f80e 	bl	800b7c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7a4:	69f8      	ldr	r0, [r7, #28]
 800b7a6:	f000 f8b1 	bl	800b90c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	61bb      	str	r3, [r7, #24]
 800b7ae:	e002      	b.n	800b7b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b7b6:	69bb      	ldr	r3, [r7, #24]
	}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3720      	adds	r7, #32
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
 800b7cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	21a5      	movs	r1, #165	; 0xa5
 800b7da:	f002 fbb0 	bl	800df3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	4413      	add	r3, r2
 800b7ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	f023 0307 	bic.w	r3, r3, #7
 800b7f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	f003 0307 	and.w	r3, r3, #7
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00a      	beq.n	800b818 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	617b      	str	r3, [r7, #20]
}
 800b814:	bf00      	nop
 800b816:	e7fe      	b.n	800b816 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d01f      	beq.n	800b85e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b81e:	2300      	movs	r3, #0
 800b820:	61fb      	str	r3, [r7, #28]
 800b822:	e012      	b.n	800b84a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	4413      	add	r3, r2
 800b82a:	7819      	ldrb	r1, [r3, #0]
 800b82c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	4413      	add	r3, r2
 800b832:	3334      	adds	r3, #52	; 0x34
 800b834:	460a      	mov	r2, r1
 800b836:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	4413      	add	r3, r2
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d006      	beq.n	800b852 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	3301      	adds	r3, #1
 800b848:	61fb      	str	r3, [r7, #28]
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	2b0f      	cmp	r3, #15
 800b84e:	d9e9      	bls.n	800b824 <prvInitialiseNewTask+0x64>
 800b850:	e000      	b.n	800b854 <prvInitialiseNewTask+0x94>
			{
				break;
 800b852:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b856:	2200      	movs	r2, #0
 800b858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b85c:	e003      	b.n	800b866 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b860:	2200      	movs	r2, #0
 800b862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b868:	2b06      	cmp	r3, #6
 800b86a:	d901      	bls.n	800b870 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b86c:	2306      	movs	r3, #6
 800b86e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b874:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b87a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87e:	2200      	movs	r2, #0
 800b880:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b884:	3304      	adds	r3, #4
 800b886:	4618      	mov	r0, r3
 800b888:	f7ff f902 	bl	800aa90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88e:	3318      	adds	r3, #24
 800b890:	4618      	mov	r0, r3
 800b892:	f7ff f8fd 	bl	800aa90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b89a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	f1c3 0207 	rsb	r2, r3, #7
 800b8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8be:	334c      	adds	r3, #76	; 0x4c
 800b8c0:	224c      	movs	r2, #76	; 0x4c
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f002 fb3a 	bl	800df3e <memset>
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8cc:	4a0c      	ldr	r2, [pc, #48]	; (800b900 <prvInitialiseNewTask+0x140>)
 800b8ce:	651a      	str	r2, [r3, #80]	; 0x50
 800b8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d2:	4a0c      	ldr	r2, [pc, #48]	; (800b904 <prvInitialiseNewTask+0x144>)
 800b8d4:	655a      	str	r2, [r3, #84]	; 0x54
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	4a0b      	ldr	r2, [pc, #44]	; (800b908 <prvInitialiseNewTask+0x148>)
 800b8da:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b8dc:	683a      	ldr	r2, [r7, #0]
 800b8de:	68f9      	ldr	r1, [r7, #12]
 800b8e0:	69b8      	ldr	r0, [r7, #24]
 800b8e2:	f000 ff2d 	bl	800c740 <pxPortInitialiseStack>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d002      	beq.n	800b8f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8f8:	bf00      	nop
 800b8fa:	3720      	adds	r7, #32
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	20008ad0 	.word	0x20008ad0
 800b904:	20008b38 	.word	0x20008b38
 800b908:	20008ba0 	.word	0x20008ba0

0800b90c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b914:	f001 f83e 	bl	800c994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b918:	4b2a      	ldr	r3, [pc, #168]	; (800b9c4 <prvAddNewTaskToReadyList+0xb8>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	3301      	adds	r3, #1
 800b91e:	4a29      	ldr	r2, [pc, #164]	; (800b9c4 <prvAddNewTaskToReadyList+0xb8>)
 800b920:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b922:	4b29      	ldr	r3, [pc, #164]	; (800b9c8 <prvAddNewTaskToReadyList+0xbc>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d109      	bne.n	800b93e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b92a:	4a27      	ldr	r2, [pc, #156]	; (800b9c8 <prvAddNewTaskToReadyList+0xbc>)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b930:	4b24      	ldr	r3, [pc, #144]	; (800b9c4 <prvAddNewTaskToReadyList+0xb8>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b01      	cmp	r3, #1
 800b936:	d110      	bne.n	800b95a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b938:	f000 fbe6 	bl	800c108 <prvInitialiseTaskLists>
 800b93c:	e00d      	b.n	800b95a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b93e:	4b23      	ldr	r3, [pc, #140]	; (800b9cc <prvAddNewTaskToReadyList+0xc0>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d109      	bne.n	800b95a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b946:	4b20      	ldr	r3, [pc, #128]	; (800b9c8 <prvAddNewTaskToReadyList+0xbc>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b950:	429a      	cmp	r2, r3
 800b952:	d802      	bhi.n	800b95a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b954:	4a1c      	ldr	r2, [pc, #112]	; (800b9c8 <prvAddNewTaskToReadyList+0xbc>)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b95a:	4b1d      	ldr	r3, [pc, #116]	; (800b9d0 <prvAddNewTaskToReadyList+0xc4>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	3301      	adds	r3, #1
 800b960:	4a1b      	ldr	r2, [pc, #108]	; (800b9d0 <prvAddNewTaskToReadyList+0xc4>)
 800b962:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b968:	2201      	movs	r2, #1
 800b96a:	409a      	lsls	r2, r3
 800b96c:	4b19      	ldr	r3, [pc, #100]	; (800b9d4 <prvAddNewTaskToReadyList+0xc8>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4313      	orrs	r3, r2
 800b972:	4a18      	ldr	r2, [pc, #96]	; (800b9d4 <prvAddNewTaskToReadyList+0xc8>)
 800b974:	6013      	str	r3, [r2, #0]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97a:	4613      	mov	r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	4413      	add	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4a15      	ldr	r2, [pc, #84]	; (800b9d8 <prvAddNewTaskToReadyList+0xcc>)
 800b984:	441a      	add	r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	3304      	adds	r3, #4
 800b98a:	4619      	mov	r1, r3
 800b98c:	4610      	mov	r0, r2
 800b98e:	f7ff f88c 	bl	800aaaa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b992:	f001 f82f 	bl	800c9f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b996:	4b0d      	ldr	r3, [pc, #52]	; (800b9cc <prvAddNewTaskToReadyList+0xc0>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00e      	beq.n	800b9bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b99e:	4b0a      	ldr	r3, [pc, #40]	; (800b9c8 <prvAddNewTaskToReadyList+0xbc>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d207      	bcs.n	800b9bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b9ac:	4b0b      	ldr	r3, [pc, #44]	; (800b9dc <prvAddNewTaskToReadyList+0xd0>)
 800b9ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b2:	601a      	str	r2, [r3, #0]
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9bc:	bf00      	nop
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	2000154c 	.word	0x2000154c
 800b9c8:	2000144c 	.word	0x2000144c
 800b9cc:	20001558 	.word	0x20001558
 800b9d0:	20001568 	.word	0x20001568
 800b9d4:	20001554 	.word	0x20001554
 800b9d8:	20001450 	.word	0x20001450
 800b9dc:	e000ed04 	.word	0xe000ed04

0800b9e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d017      	beq.n	800ba22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b9f2:	4b13      	ldr	r3, [pc, #76]	; (800ba40 <vTaskDelay+0x60>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00a      	beq.n	800ba10 <vTaskDelay+0x30>
	__asm volatile
 800b9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	60bb      	str	r3, [r7, #8]
}
 800ba0c:	bf00      	nop
 800ba0e:	e7fe      	b.n	800ba0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba10:	f000 f884 	bl	800bb1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba14:	2100      	movs	r1, #0
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 fe2c 	bl	800c674 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba1c:	f000 f88c 	bl	800bb38 <xTaskResumeAll>
 800ba20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d107      	bne.n	800ba38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ba28:	4b06      	ldr	r3, [pc, #24]	; (800ba44 <vTaskDelay+0x64>)
 800ba2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba2e:	601a      	str	r2, [r3, #0]
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba38:	bf00      	nop
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	20001574 	.word	0x20001574
 800ba44:	e000ed04 	.word	0xe000ed04

0800ba48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b08a      	sub	sp, #40	; 0x28
 800ba4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ba52:	2300      	movs	r3, #0
 800ba54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ba56:	463a      	mov	r2, r7
 800ba58:	1d39      	adds	r1, r7, #4
 800ba5a:	f107 0308 	add.w	r3, r7, #8
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7f5 fc34 	bl	80012cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ba64:	6839      	ldr	r1, [r7, #0]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	9202      	str	r2, [sp, #8]
 800ba6c:	9301      	str	r3, [sp, #4]
 800ba6e:	2300      	movs	r3, #0
 800ba70:	9300      	str	r3, [sp, #0]
 800ba72:	2300      	movs	r3, #0
 800ba74:	460a      	mov	r2, r1
 800ba76:	4921      	ldr	r1, [pc, #132]	; (800bafc <vTaskStartScheduler+0xb4>)
 800ba78:	4821      	ldr	r0, [pc, #132]	; (800bb00 <vTaskStartScheduler+0xb8>)
 800ba7a:	f7ff fdff 	bl	800b67c <xTaskCreateStatic>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	4a20      	ldr	r2, [pc, #128]	; (800bb04 <vTaskStartScheduler+0xbc>)
 800ba82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ba84:	4b1f      	ldr	r3, [pc, #124]	; (800bb04 <vTaskStartScheduler+0xbc>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	617b      	str	r3, [r7, #20]
 800ba90:	e001      	b.n	800ba96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ba92:	2300      	movs	r3, #0
 800ba94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d11b      	bne.n	800bad4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800ba9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa0:	f383 8811 	msr	BASEPRI, r3
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	613b      	str	r3, [r7, #16]
}
 800baae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bab0:	4b15      	ldr	r3, [pc, #84]	; (800bb08 <vTaskStartScheduler+0xc0>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	334c      	adds	r3, #76	; 0x4c
 800bab6:	4a15      	ldr	r2, [pc, #84]	; (800bb0c <vTaskStartScheduler+0xc4>)
 800bab8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800baba:	4b15      	ldr	r3, [pc, #84]	; (800bb10 <vTaskStartScheduler+0xc8>)
 800babc:	f04f 32ff 	mov.w	r2, #4294967295
 800bac0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bac2:	4b14      	ldr	r3, [pc, #80]	; (800bb14 <vTaskStartScheduler+0xcc>)
 800bac4:	2201      	movs	r2, #1
 800bac6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bac8:	4b13      	ldr	r3, [pc, #76]	; (800bb18 <vTaskStartScheduler+0xd0>)
 800baca:	2200      	movs	r2, #0
 800bacc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bace:	f000 febf 	bl	800c850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bad2:	e00e      	b.n	800baf2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bada:	d10a      	bne.n	800baf2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae0:	f383 8811 	msr	BASEPRI, r3
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	60fb      	str	r3, [r7, #12]
}
 800baee:	bf00      	nop
 800baf0:	e7fe      	b.n	800baf0 <vTaskStartScheduler+0xa8>
}
 800baf2:	bf00      	nop
 800baf4:	3718      	adds	r7, #24
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	080138fc 	.word	0x080138fc
 800bb00:	0800c0d9 	.word	0x0800c0d9
 800bb04:	20001570 	.word	0x20001570
 800bb08:	2000144c 	.word	0x2000144c
 800bb0c:	20000130 	.word	0x20000130
 800bb10:	2000156c 	.word	0x2000156c
 800bb14:	20001558 	.word	0x20001558
 800bb18:	20001550 	.word	0x20001550

0800bb1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bb20:	4b04      	ldr	r3, [pc, #16]	; (800bb34 <vTaskSuspendAll+0x18>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	3301      	adds	r3, #1
 800bb26:	4a03      	ldr	r2, [pc, #12]	; (800bb34 <vTaskSuspendAll+0x18>)
 800bb28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bb2a:	bf00      	nop
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr
 800bb34:	20001574 	.word	0x20001574

0800bb38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bb42:	2300      	movs	r3, #0
 800bb44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bb46:	4b41      	ldr	r3, [pc, #260]	; (800bc4c <xTaskResumeAll+0x114>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d10a      	bne.n	800bb64 <xTaskResumeAll+0x2c>
	__asm volatile
 800bb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	603b      	str	r3, [r7, #0]
}
 800bb60:	bf00      	nop
 800bb62:	e7fe      	b.n	800bb62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bb64:	f000 ff16 	bl	800c994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bb68:	4b38      	ldr	r3, [pc, #224]	; (800bc4c <xTaskResumeAll+0x114>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	4a37      	ldr	r2, [pc, #220]	; (800bc4c <xTaskResumeAll+0x114>)
 800bb70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb72:	4b36      	ldr	r3, [pc, #216]	; (800bc4c <xTaskResumeAll+0x114>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d161      	bne.n	800bc3e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb7a:	4b35      	ldr	r3, [pc, #212]	; (800bc50 <xTaskResumeAll+0x118>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d05d      	beq.n	800bc3e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb82:	e02e      	b.n	800bbe2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb84:	4b33      	ldr	r3, [pc, #204]	; (800bc54 <xTaskResumeAll+0x11c>)
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	3318      	adds	r3, #24
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe ffe7 	bl	800ab64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3304      	adds	r3, #4
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fe ffe2 	bl	800ab64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba4:	2201      	movs	r2, #1
 800bba6:	409a      	lsls	r2, r3
 800bba8:	4b2b      	ldr	r3, [pc, #172]	; (800bc58 <xTaskResumeAll+0x120>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4313      	orrs	r3, r2
 800bbae:	4a2a      	ldr	r2, [pc, #168]	; (800bc58 <xTaskResumeAll+0x120>)
 800bbb0:	6013      	str	r3, [r2, #0]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4413      	add	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4a27      	ldr	r2, [pc, #156]	; (800bc5c <xTaskResumeAll+0x124>)
 800bbc0:	441a      	add	r2, r3
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	3304      	adds	r3, #4
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	4610      	mov	r0, r2
 800bbca:	f7fe ff6e 	bl	800aaaa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd2:	4b23      	ldr	r3, [pc, #140]	; (800bc60 <xTaskResumeAll+0x128>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d302      	bcc.n	800bbe2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bbdc:	4b21      	ldr	r3, [pc, #132]	; (800bc64 <xTaskResumeAll+0x12c>)
 800bbde:	2201      	movs	r2, #1
 800bbe0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbe2:	4b1c      	ldr	r3, [pc, #112]	; (800bc54 <xTaskResumeAll+0x11c>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1cc      	bne.n	800bb84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d001      	beq.n	800bbf4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bbf0:	f000 fb64 	bl	800c2bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bbf4:	4b1c      	ldr	r3, [pc, #112]	; (800bc68 <xTaskResumeAll+0x130>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d010      	beq.n	800bc22 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bc00:	f000 f846 	bl	800bc90 <xTaskIncrementTick>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d002      	beq.n	800bc10 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bc0a:	4b16      	ldr	r3, [pc, #88]	; (800bc64 <xTaskResumeAll+0x12c>)
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	3b01      	subs	r3, #1
 800bc14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d1f1      	bne.n	800bc00 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bc1c:	4b12      	ldr	r3, [pc, #72]	; (800bc68 <xTaskResumeAll+0x130>)
 800bc1e:	2200      	movs	r2, #0
 800bc20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bc22:	4b10      	ldr	r3, [pc, #64]	; (800bc64 <xTaskResumeAll+0x12c>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d009      	beq.n	800bc3e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bc2e:	4b0f      	ldr	r3, [pc, #60]	; (800bc6c <xTaskResumeAll+0x134>)
 800bc30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc34:	601a      	str	r2, [r3, #0]
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc3e:	f000 fed9 	bl	800c9f4 <vPortExitCritical>

	return xAlreadyYielded;
 800bc42:	68bb      	ldr	r3, [r7, #8]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	20001574 	.word	0x20001574
 800bc50:	2000154c 	.word	0x2000154c
 800bc54:	2000150c 	.word	0x2000150c
 800bc58:	20001554 	.word	0x20001554
 800bc5c:	20001450 	.word	0x20001450
 800bc60:	2000144c 	.word	0x2000144c
 800bc64:	20001560 	.word	0x20001560
 800bc68:	2000155c 	.word	0x2000155c
 800bc6c:	e000ed04 	.word	0xe000ed04

0800bc70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bc76:	4b05      	ldr	r3, [pc, #20]	; (800bc8c <xTaskGetTickCount+0x1c>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bc7c:	687b      	ldr	r3, [r7, #4]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	370c      	adds	r7, #12
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr
 800bc8a:	bf00      	nop
 800bc8c:	20001550 	.word	0x20001550

0800bc90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc96:	2300      	movs	r3, #0
 800bc98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc9a:	4b4e      	ldr	r3, [pc, #312]	; (800bdd4 <xTaskIncrementTick+0x144>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f040 808e 	bne.w	800bdc0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bca4:	4b4c      	ldr	r3, [pc, #304]	; (800bdd8 <xTaskIncrementTick+0x148>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bcac:	4a4a      	ldr	r2, [pc, #296]	; (800bdd8 <xTaskIncrementTick+0x148>)
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d120      	bne.n	800bcfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bcb8:	4b48      	ldr	r3, [pc, #288]	; (800bddc <xTaskIncrementTick+0x14c>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d00a      	beq.n	800bcd8 <xTaskIncrementTick+0x48>
	__asm volatile
 800bcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc6:	f383 8811 	msr	BASEPRI, r3
 800bcca:	f3bf 8f6f 	isb	sy
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	603b      	str	r3, [r7, #0]
}
 800bcd4:	bf00      	nop
 800bcd6:	e7fe      	b.n	800bcd6 <xTaskIncrementTick+0x46>
 800bcd8:	4b40      	ldr	r3, [pc, #256]	; (800bddc <xTaskIncrementTick+0x14c>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	60fb      	str	r3, [r7, #12]
 800bcde:	4b40      	ldr	r3, [pc, #256]	; (800bde0 <xTaskIncrementTick+0x150>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a3e      	ldr	r2, [pc, #248]	; (800bddc <xTaskIncrementTick+0x14c>)
 800bce4:	6013      	str	r3, [r2, #0]
 800bce6:	4a3e      	ldr	r2, [pc, #248]	; (800bde0 <xTaskIncrementTick+0x150>)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6013      	str	r3, [r2, #0]
 800bcec:	4b3d      	ldr	r3, [pc, #244]	; (800bde4 <xTaskIncrementTick+0x154>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	4a3c      	ldr	r2, [pc, #240]	; (800bde4 <xTaskIncrementTick+0x154>)
 800bcf4:	6013      	str	r3, [r2, #0]
 800bcf6:	f000 fae1 	bl	800c2bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bcfa:	4b3b      	ldr	r3, [pc, #236]	; (800bde8 <xTaskIncrementTick+0x158>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d348      	bcc.n	800bd96 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd04:	4b35      	ldr	r3, [pc, #212]	; (800bddc <xTaskIncrementTick+0x14c>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d104      	bne.n	800bd18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd0e:	4b36      	ldr	r3, [pc, #216]	; (800bde8 <xTaskIncrementTick+0x158>)
 800bd10:	f04f 32ff 	mov.w	r2, #4294967295
 800bd14:	601a      	str	r2, [r3, #0]
					break;
 800bd16:	e03e      	b.n	800bd96 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd18:	4b30      	ldr	r3, [pc, #192]	; (800bddc <xTaskIncrementTick+0x14c>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bd28:	693a      	ldr	r2, [r7, #16]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d203      	bcs.n	800bd38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bd30:	4a2d      	ldr	r2, [pc, #180]	; (800bde8 <xTaskIncrementTick+0x158>)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bd36:	e02e      	b.n	800bd96 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7fe ff11 	bl	800ab64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d004      	beq.n	800bd54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	3318      	adds	r3, #24
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fe ff08 	bl	800ab64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd58:	2201      	movs	r2, #1
 800bd5a:	409a      	lsls	r2, r3
 800bd5c:	4b23      	ldr	r3, [pc, #140]	; (800bdec <xTaskIncrementTick+0x15c>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	4a22      	ldr	r2, [pc, #136]	; (800bdec <xTaskIncrementTick+0x15c>)
 800bd64:	6013      	str	r3, [r2, #0]
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	4a1f      	ldr	r2, [pc, #124]	; (800bdf0 <xTaskIncrementTick+0x160>)
 800bd74:	441a      	add	r2, r3
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	3304      	adds	r3, #4
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	f7fe fe94 	bl	800aaaa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd86:	4b1b      	ldr	r3, [pc, #108]	; (800bdf4 <xTaskIncrementTick+0x164>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d3b9      	bcc.n	800bd04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bd90:	2301      	movs	r3, #1
 800bd92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd94:	e7b6      	b.n	800bd04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd96:	4b17      	ldr	r3, [pc, #92]	; (800bdf4 <xTaskIncrementTick+0x164>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd9c:	4914      	ldr	r1, [pc, #80]	; (800bdf0 <xTaskIncrementTick+0x160>)
 800bd9e:	4613      	mov	r3, r2
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	440b      	add	r3, r1
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d901      	bls.n	800bdb2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bdb2:	4b11      	ldr	r3, [pc, #68]	; (800bdf8 <xTaskIncrementTick+0x168>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d007      	beq.n	800bdca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	617b      	str	r3, [r7, #20]
 800bdbe:	e004      	b.n	800bdca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bdc0:	4b0e      	ldr	r3, [pc, #56]	; (800bdfc <xTaskIncrementTick+0x16c>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	4a0d      	ldr	r2, [pc, #52]	; (800bdfc <xTaskIncrementTick+0x16c>)
 800bdc8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bdca:	697b      	ldr	r3, [r7, #20]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3718      	adds	r7, #24
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	20001574 	.word	0x20001574
 800bdd8:	20001550 	.word	0x20001550
 800bddc:	20001504 	.word	0x20001504
 800bde0:	20001508 	.word	0x20001508
 800bde4:	20001564 	.word	0x20001564
 800bde8:	2000156c 	.word	0x2000156c
 800bdec:	20001554 	.word	0x20001554
 800bdf0:	20001450 	.word	0x20001450
 800bdf4:	2000144c 	.word	0x2000144c
 800bdf8:	20001560 	.word	0x20001560
 800bdfc:	2000155c 	.word	0x2000155c

0800be00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be00:	b480      	push	{r7}
 800be02:	b087      	sub	sp, #28
 800be04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be06:	4b29      	ldr	r3, [pc, #164]	; (800beac <vTaskSwitchContext+0xac>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d003      	beq.n	800be16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be0e:	4b28      	ldr	r3, [pc, #160]	; (800beb0 <vTaskSwitchContext+0xb0>)
 800be10:	2201      	movs	r2, #1
 800be12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800be14:	e044      	b.n	800bea0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800be16:	4b26      	ldr	r3, [pc, #152]	; (800beb0 <vTaskSwitchContext+0xb0>)
 800be18:	2200      	movs	r2, #0
 800be1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be1c:	4b25      	ldr	r3, [pc, #148]	; (800beb4 <vTaskSwitchContext+0xb4>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	fab3 f383 	clz	r3, r3
 800be28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800be2a:	7afb      	ldrb	r3, [r7, #11]
 800be2c:	f1c3 031f 	rsb	r3, r3, #31
 800be30:	617b      	str	r3, [r7, #20]
 800be32:	4921      	ldr	r1, [pc, #132]	; (800beb8 <vTaskSwitchContext+0xb8>)
 800be34:	697a      	ldr	r2, [r7, #20]
 800be36:	4613      	mov	r3, r2
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	4413      	add	r3, r2
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	440b      	add	r3, r1
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10a      	bne.n	800be5c <vTaskSwitchContext+0x5c>
	__asm volatile
 800be46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	607b      	str	r3, [r7, #4]
}
 800be58:	bf00      	nop
 800be5a:	e7fe      	b.n	800be5a <vTaskSwitchContext+0x5a>
 800be5c:	697a      	ldr	r2, [r7, #20]
 800be5e:	4613      	mov	r3, r2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	4413      	add	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	4a14      	ldr	r2, [pc, #80]	; (800beb8 <vTaskSwitchContext+0xb8>)
 800be68:	4413      	add	r3, r2
 800be6a:	613b      	str	r3, [r7, #16]
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	685a      	ldr	r2, [r3, #4]
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	605a      	str	r2, [r3, #4]
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	3308      	adds	r3, #8
 800be7e:	429a      	cmp	r2, r3
 800be80:	d104      	bne.n	800be8c <vTaskSwitchContext+0x8c>
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	685a      	ldr	r2, [r3, #4]
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	605a      	str	r2, [r3, #4]
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	4a0a      	ldr	r2, [pc, #40]	; (800bebc <vTaskSwitchContext+0xbc>)
 800be94:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be96:	4b09      	ldr	r3, [pc, #36]	; (800bebc <vTaskSwitchContext+0xbc>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	334c      	adds	r3, #76	; 0x4c
 800be9c:	4a08      	ldr	r2, [pc, #32]	; (800bec0 <vTaskSwitchContext+0xc0>)
 800be9e:	6013      	str	r3, [r2, #0]
}
 800bea0:	bf00      	nop
 800bea2:	371c      	adds	r7, #28
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	20001574 	.word	0x20001574
 800beb0:	20001560 	.word	0x20001560
 800beb4:	20001554 	.word	0x20001554
 800beb8:	20001450 	.word	0x20001450
 800bebc:	2000144c 	.word	0x2000144c
 800bec0:	20000130 	.word	0x20000130

0800bec4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10a      	bne.n	800beea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed8:	f383 8811 	msr	BASEPRI, r3
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	f3bf 8f4f 	dsb	sy
 800bee4:	60fb      	str	r3, [r7, #12]
}
 800bee6:	bf00      	nop
 800bee8:	e7fe      	b.n	800bee8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800beea:	4b07      	ldr	r3, [pc, #28]	; (800bf08 <vTaskPlaceOnEventList+0x44>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	3318      	adds	r3, #24
 800bef0:	4619      	mov	r1, r3
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f7fe fdfd 	bl	800aaf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bef8:	2101      	movs	r1, #1
 800befa:	6838      	ldr	r0, [r7, #0]
 800befc:	f000 fbba 	bl	800c674 <prvAddCurrentTaskToDelayedList>
}
 800bf00:	bf00      	nop
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	2000144c 	.word	0x2000144c

0800bf0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d10a      	bne.n	800bf38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf26:	f383 8811 	msr	BASEPRI, r3
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	60fb      	str	r3, [r7, #12]
}
 800bf34:	bf00      	nop
 800bf36:	e7fe      	b.n	800bf36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	3318      	adds	r3, #24
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7fe fe11 	bl	800ab64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf42:	4b1d      	ldr	r3, [pc, #116]	; (800bfb8 <xTaskRemoveFromEventList+0xac>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d11c      	bne.n	800bf84 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fe fe08 	bl	800ab64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf58:	2201      	movs	r2, #1
 800bf5a:	409a      	lsls	r2, r3
 800bf5c:	4b17      	ldr	r3, [pc, #92]	; (800bfbc <xTaskRemoveFromEventList+0xb0>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	4a16      	ldr	r2, [pc, #88]	; (800bfbc <xTaskRemoveFromEventList+0xb0>)
 800bf64:	6013      	str	r3, [r2, #0]
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4413      	add	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4a13      	ldr	r2, [pc, #76]	; (800bfc0 <xTaskRemoveFromEventList+0xb4>)
 800bf74:	441a      	add	r2, r3
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	f7fe fd94 	bl	800aaaa <vListInsertEnd>
 800bf82:	e005      	b.n	800bf90 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	3318      	adds	r3, #24
 800bf88:	4619      	mov	r1, r3
 800bf8a:	480e      	ldr	r0, [pc, #56]	; (800bfc4 <xTaskRemoveFromEventList+0xb8>)
 800bf8c:	f7fe fd8d 	bl	800aaaa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf94:	4b0c      	ldr	r3, [pc, #48]	; (800bfc8 <xTaskRemoveFromEventList+0xbc>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d905      	bls.n	800bfaa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bfa2:	4b0a      	ldr	r3, [pc, #40]	; (800bfcc <xTaskRemoveFromEventList+0xc0>)
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	601a      	str	r2, [r3, #0]
 800bfa8:	e001      	b.n	800bfae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bfae:	697b      	ldr	r3, [r7, #20]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	20001574 	.word	0x20001574
 800bfbc:	20001554 	.word	0x20001554
 800bfc0:	20001450 	.word	0x20001450
 800bfc4:	2000150c 	.word	0x2000150c
 800bfc8:	2000144c 	.word	0x2000144c
 800bfcc:	20001560 	.word	0x20001560

0800bfd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bfd8:	4b06      	ldr	r3, [pc, #24]	; (800bff4 <vTaskInternalSetTimeOutState+0x24>)
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bfe0:	4b05      	ldr	r3, [pc, #20]	; (800bff8 <vTaskInternalSetTimeOutState+0x28>)
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	605a      	str	r2, [r3, #4]
}
 800bfe8:	bf00      	nop
 800bfea:	370c      	adds	r7, #12
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr
 800bff4:	20001564 	.word	0x20001564
 800bff8:	20001550 	.word	0x20001550

0800bffc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b088      	sub	sp, #32
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d10a      	bne.n	800c022 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c010:	f383 8811 	msr	BASEPRI, r3
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	613b      	str	r3, [r7, #16]
}
 800c01e:	bf00      	nop
 800c020:	e7fe      	b.n	800c020 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d10a      	bne.n	800c03e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02c:	f383 8811 	msr	BASEPRI, r3
 800c030:	f3bf 8f6f 	isb	sy
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	60fb      	str	r3, [r7, #12]
}
 800c03a:	bf00      	nop
 800c03c:	e7fe      	b.n	800c03c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c03e:	f000 fca9 	bl	800c994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c042:	4b1d      	ldr	r3, [pc, #116]	; (800c0b8 <xTaskCheckForTimeOut+0xbc>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	69ba      	ldr	r2, [r7, #24]
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05a:	d102      	bne.n	800c062 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c05c:	2300      	movs	r3, #0
 800c05e:	61fb      	str	r3, [r7, #28]
 800c060:	e023      	b.n	800c0aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	4b15      	ldr	r3, [pc, #84]	; (800c0bc <xTaskCheckForTimeOut+0xc0>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d007      	beq.n	800c07e <xTaskCheckForTimeOut+0x82>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	69ba      	ldr	r2, [r7, #24]
 800c074:	429a      	cmp	r2, r3
 800c076:	d302      	bcc.n	800c07e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c078:	2301      	movs	r3, #1
 800c07a:	61fb      	str	r3, [r7, #28]
 800c07c:	e015      	b.n	800c0aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	697a      	ldr	r2, [r7, #20]
 800c084:	429a      	cmp	r2, r3
 800c086:	d20b      	bcs.n	800c0a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	1ad2      	subs	r2, r2, r3
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7ff ff9b 	bl	800bfd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c09a:	2300      	movs	r3, #0
 800c09c:	61fb      	str	r3, [r7, #28]
 800c09e:	e004      	b.n	800c0aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c0aa:	f000 fca3 	bl	800c9f4 <vPortExitCritical>

	return xReturn;
 800c0ae:	69fb      	ldr	r3, [r7, #28]
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3720      	adds	r7, #32
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	20001550 	.word	0x20001550
 800c0bc:	20001564 	.word	0x20001564

0800c0c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c0c4:	4b03      	ldr	r3, [pc, #12]	; (800c0d4 <vTaskMissedYield+0x14>)
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	601a      	str	r2, [r3, #0]
}
 800c0ca:	bf00      	nop
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr
 800c0d4:	20001560 	.word	0x20001560

0800c0d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c0e0:	f000 f852 	bl	800c188 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c0e4:	4b06      	ldr	r3, [pc, #24]	; (800c100 <prvIdleTask+0x28>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d9f9      	bls.n	800c0e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c0ec:	4b05      	ldr	r3, [pc, #20]	; (800c104 <prvIdleTask+0x2c>)
 800c0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0f2:	601a      	str	r2, [r3, #0]
 800c0f4:	f3bf 8f4f 	dsb	sy
 800c0f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c0fc:	e7f0      	b.n	800c0e0 <prvIdleTask+0x8>
 800c0fe:	bf00      	nop
 800c100:	20001450 	.word	0x20001450
 800c104:	e000ed04 	.word	0xe000ed04

0800c108 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c10e:	2300      	movs	r3, #0
 800c110:	607b      	str	r3, [r7, #4]
 800c112:	e00c      	b.n	800c12e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	4613      	mov	r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	4413      	add	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4a12      	ldr	r2, [pc, #72]	; (800c168 <prvInitialiseTaskLists+0x60>)
 800c120:	4413      	add	r3, r2
 800c122:	4618      	mov	r0, r3
 800c124:	f7fe fc94 	bl	800aa50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	3301      	adds	r3, #1
 800c12c:	607b      	str	r3, [r7, #4]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2b06      	cmp	r3, #6
 800c132:	d9ef      	bls.n	800c114 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c134:	480d      	ldr	r0, [pc, #52]	; (800c16c <prvInitialiseTaskLists+0x64>)
 800c136:	f7fe fc8b 	bl	800aa50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c13a:	480d      	ldr	r0, [pc, #52]	; (800c170 <prvInitialiseTaskLists+0x68>)
 800c13c:	f7fe fc88 	bl	800aa50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c140:	480c      	ldr	r0, [pc, #48]	; (800c174 <prvInitialiseTaskLists+0x6c>)
 800c142:	f7fe fc85 	bl	800aa50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c146:	480c      	ldr	r0, [pc, #48]	; (800c178 <prvInitialiseTaskLists+0x70>)
 800c148:	f7fe fc82 	bl	800aa50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c14c:	480b      	ldr	r0, [pc, #44]	; (800c17c <prvInitialiseTaskLists+0x74>)
 800c14e:	f7fe fc7f 	bl	800aa50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c152:	4b0b      	ldr	r3, [pc, #44]	; (800c180 <prvInitialiseTaskLists+0x78>)
 800c154:	4a05      	ldr	r2, [pc, #20]	; (800c16c <prvInitialiseTaskLists+0x64>)
 800c156:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c158:	4b0a      	ldr	r3, [pc, #40]	; (800c184 <prvInitialiseTaskLists+0x7c>)
 800c15a:	4a05      	ldr	r2, [pc, #20]	; (800c170 <prvInitialiseTaskLists+0x68>)
 800c15c:	601a      	str	r2, [r3, #0]
}
 800c15e:	bf00      	nop
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	20001450 	.word	0x20001450
 800c16c:	200014dc 	.word	0x200014dc
 800c170:	200014f0 	.word	0x200014f0
 800c174:	2000150c 	.word	0x2000150c
 800c178:	20001520 	.word	0x20001520
 800c17c:	20001538 	.word	0x20001538
 800c180:	20001504 	.word	0x20001504
 800c184:	20001508 	.word	0x20001508

0800c188 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c18e:	e019      	b.n	800c1c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c190:	f000 fc00 	bl	800c994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c194:	4b10      	ldr	r3, [pc, #64]	; (800c1d8 <prvCheckTasksWaitingTermination+0x50>)
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	3304      	adds	r3, #4
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7fe fcdf 	bl	800ab64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c1a6:	4b0d      	ldr	r3, [pc, #52]	; (800c1dc <prvCheckTasksWaitingTermination+0x54>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	4a0b      	ldr	r2, [pc, #44]	; (800c1dc <prvCheckTasksWaitingTermination+0x54>)
 800c1ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c1b0:	4b0b      	ldr	r3, [pc, #44]	; (800c1e0 <prvCheckTasksWaitingTermination+0x58>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	4a0a      	ldr	r2, [pc, #40]	; (800c1e0 <prvCheckTasksWaitingTermination+0x58>)
 800c1b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c1ba:	f000 fc1b 	bl	800c9f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f848 	bl	800c254 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1c4:	4b06      	ldr	r3, [pc, #24]	; (800c1e0 <prvCheckTasksWaitingTermination+0x58>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1e1      	bne.n	800c190 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c1cc:	bf00      	nop
 800c1ce:	bf00      	nop
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	20001520 	.word	0x20001520
 800c1dc:	2000154c 	.word	0x2000154c
 800c1e0:	20001534 	.word	0x20001534

0800c1e4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c1f0:	e005      	b.n	800c1fe <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	2ba5      	cmp	r3, #165	; 0xa5
 800c204:	d0f5      	beq.n	800c1f2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	089b      	lsrs	r3, r3, #2
 800c20a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	b29b      	uxth	r3, r3
	}
 800c210:	4618      	mov	r0, r3
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b086      	sub	sp, #24
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d102      	bne.n	800c230 <uxTaskGetStackHighWaterMark+0x14>
 800c22a:	4b09      	ldr	r3, [pc, #36]	; (800c250 <uxTaskGetStackHighWaterMark+0x34>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	e000      	b.n	800c232 <uxTaskGetStackHighWaterMark+0x16>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c238:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800c23a:	6938      	ldr	r0, [r7, #16]
 800c23c:	f7ff ffd2 	bl	800c1e4 <prvTaskCheckFreeStackSpace>
 800c240:	4603      	mov	r3, r0
 800c242:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800c244:	68fb      	ldr	r3, [r7, #12]
	}
 800c246:	4618      	mov	r0, r3
 800c248:	3718      	adds	r7, #24
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	2000144c 	.word	0x2000144c

0800c254 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	334c      	adds	r3, #76	; 0x4c
 800c260:	4618      	mov	r0, r3
 800c262:	f001 fe9f 	bl	800dfa4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d108      	bne.n	800c282 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c274:	4618      	mov	r0, r3
 800c276:	f000 fd7b 	bl	800cd70 <vPortFree>
				vPortFree( pxTCB );
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 fd78 	bl	800cd70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c280:	e018      	b.n	800c2b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d103      	bne.n	800c294 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 fd6f 	bl	800cd70 <vPortFree>
	}
 800c292:	e00f      	b.n	800c2b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c29a:	2b02      	cmp	r3, #2
 800c29c:	d00a      	beq.n	800c2b4 <prvDeleteTCB+0x60>
	__asm volatile
 800c29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	60fb      	str	r3, [r7, #12]
}
 800c2b0:	bf00      	nop
 800c2b2:	e7fe      	b.n	800c2b2 <prvDeleteTCB+0x5e>
	}
 800c2b4:	bf00      	nop
 800c2b6:	3710      	adds	r7, #16
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2c2:	4b0c      	ldr	r3, [pc, #48]	; (800c2f4 <prvResetNextTaskUnblockTime+0x38>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d104      	bne.n	800c2d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c2cc:	4b0a      	ldr	r3, [pc, #40]	; (800c2f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c2ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c2d4:	e008      	b.n	800c2e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2d6:	4b07      	ldr	r3, [pc, #28]	; (800c2f4 <prvResetNextTaskUnblockTime+0x38>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	4a04      	ldr	r2, [pc, #16]	; (800c2f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c2e6:	6013      	str	r3, [r2, #0]
}
 800c2e8:	bf00      	nop
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr
 800c2f4:	20001504 	.word	0x20001504
 800c2f8:	2000156c 	.word	0x2000156c

0800c2fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c302:	4b0b      	ldr	r3, [pc, #44]	; (800c330 <xTaskGetSchedulerState+0x34>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d102      	bne.n	800c310 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c30a:	2301      	movs	r3, #1
 800c30c:	607b      	str	r3, [r7, #4]
 800c30e:	e008      	b.n	800c322 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c310:	4b08      	ldr	r3, [pc, #32]	; (800c334 <xTaskGetSchedulerState+0x38>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d102      	bne.n	800c31e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c318:	2302      	movs	r3, #2
 800c31a:	607b      	str	r3, [r7, #4]
 800c31c:	e001      	b.n	800c322 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c31e:	2300      	movs	r3, #0
 800c320:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c322:	687b      	ldr	r3, [r7, #4]
	}
 800c324:	4618      	mov	r0, r3
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	20001558 	.word	0x20001558
 800c334:	20001574 	.word	0x20001574

0800c338 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c344:	2300      	movs	r3, #0
 800c346:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d05e      	beq.n	800c40c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c352:	4b31      	ldr	r3, [pc, #196]	; (800c418 <xTaskPriorityInherit+0xe0>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c358:	429a      	cmp	r2, r3
 800c35a:	d24e      	bcs.n	800c3fa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	699b      	ldr	r3, [r3, #24]
 800c360:	2b00      	cmp	r3, #0
 800c362:	db06      	blt.n	800c372 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c364:	4b2c      	ldr	r3, [pc, #176]	; (800c418 <xTaskPriorityInherit+0xe0>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c36a:	f1c3 0207 	rsb	r2, r3, #7
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	6959      	ldr	r1, [r3, #20]
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c37a:	4613      	mov	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	4413      	add	r3, r2
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	4a26      	ldr	r2, [pc, #152]	; (800c41c <xTaskPriorityInherit+0xe4>)
 800c384:	4413      	add	r3, r2
 800c386:	4299      	cmp	r1, r3
 800c388:	d12f      	bne.n	800c3ea <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	3304      	adds	r3, #4
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fe fbe8 	bl	800ab64 <uxListRemove>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d10a      	bne.n	800c3b0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c39e:	2201      	movs	r2, #1
 800c3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3a4:	43da      	mvns	r2, r3
 800c3a6:	4b1e      	ldr	r3, [pc, #120]	; (800c420 <xTaskPriorityInherit+0xe8>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4013      	ands	r3, r2
 800c3ac:	4a1c      	ldr	r2, [pc, #112]	; (800c420 <xTaskPriorityInherit+0xe8>)
 800c3ae:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3b0:	4b19      	ldr	r3, [pc, #100]	; (800c418 <xTaskPriorityInherit+0xe0>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3be:	2201      	movs	r2, #1
 800c3c0:	409a      	lsls	r2, r3
 800c3c2:	4b17      	ldr	r3, [pc, #92]	; (800c420 <xTaskPriorityInherit+0xe8>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	4a15      	ldr	r2, [pc, #84]	; (800c420 <xTaskPriorityInherit+0xe8>)
 800c3ca:	6013      	str	r3, [r2, #0]
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	4413      	add	r3, r2
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	4a10      	ldr	r2, [pc, #64]	; (800c41c <xTaskPriorityInherit+0xe4>)
 800c3da:	441a      	add	r2, r3
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	3304      	adds	r3, #4
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	4610      	mov	r0, r2
 800c3e4:	f7fe fb61 	bl	800aaaa <vListInsertEnd>
 800c3e8:	e004      	b.n	800c3f4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3ea:	4b0b      	ldr	r3, [pc, #44]	; (800c418 <xTaskPriorityInherit+0xe0>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	60fb      	str	r3, [r7, #12]
 800c3f8:	e008      	b.n	800c40c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3fe:	4b06      	ldr	r3, [pc, #24]	; (800c418 <xTaskPriorityInherit+0xe0>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	429a      	cmp	r2, r3
 800c406:	d201      	bcs.n	800c40c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c408:	2301      	movs	r3, #1
 800c40a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c40c:	68fb      	ldr	r3, [r7, #12]
	}
 800c40e:	4618      	mov	r0, r3
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	2000144c 	.word	0x2000144c
 800c41c:	20001450 	.word	0x20001450
 800c420:	20001554 	.word	0x20001554

0800c424 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c424:	b580      	push	{r7, lr}
 800c426:	b086      	sub	sp, #24
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c430:	2300      	movs	r3, #0
 800c432:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d06e      	beq.n	800c518 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c43a:	4b3a      	ldr	r3, [pc, #232]	; (800c524 <xTaskPriorityDisinherit+0x100>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	693a      	ldr	r2, [r7, #16]
 800c440:	429a      	cmp	r2, r3
 800c442:	d00a      	beq.n	800c45a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	60fb      	str	r3, [r7, #12]
}
 800c456:	bf00      	nop
 800c458:	e7fe      	b.n	800c458 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d10a      	bne.n	800c478 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c466:	f383 8811 	msr	BASEPRI, r3
 800c46a:	f3bf 8f6f 	isb	sy
 800c46e:	f3bf 8f4f 	dsb	sy
 800c472:	60bb      	str	r3, [r7, #8]
}
 800c474:	bf00      	nop
 800c476:	e7fe      	b.n	800c476 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c47c:	1e5a      	subs	r2, r3, #1
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d044      	beq.n	800c518 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c492:	2b00      	cmp	r3, #0
 800c494:	d140      	bne.n	800c518 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	3304      	adds	r3, #4
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe fb62 	bl	800ab64 <uxListRemove>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d115      	bne.n	800c4d2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4aa:	491f      	ldr	r1, [pc, #124]	; (800c528 <xTaskPriorityDisinherit+0x104>)
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4413      	add	r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	440b      	add	r3, r1
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d10a      	bne.n	800c4d2 <xTaskPriorityDisinherit+0xae>
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4c6:	43da      	mvns	r2, r3
 800c4c8:	4b18      	ldr	r3, [pc, #96]	; (800c52c <xTaskPriorityDisinherit+0x108>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4013      	ands	r3, r2
 800c4ce:	4a17      	ldr	r2, [pc, #92]	; (800c52c <xTaskPriorityDisinherit+0x108>)
 800c4d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4de:	f1c3 0207 	rsb	r2, r3, #7
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	409a      	lsls	r2, r3
 800c4ee:	4b0f      	ldr	r3, [pc, #60]	; (800c52c <xTaskPriorityDisinherit+0x108>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	4a0d      	ldr	r2, [pc, #52]	; (800c52c <xTaskPriorityDisinherit+0x108>)
 800c4f6:	6013      	str	r3, [r2, #0]
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	4413      	add	r3, r2
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	4a08      	ldr	r2, [pc, #32]	; (800c528 <xTaskPriorityDisinherit+0x104>)
 800c506:	441a      	add	r2, r3
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	3304      	adds	r3, #4
 800c50c:	4619      	mov	r1, r3
 800c50e:	4610      	mov	r0, r2
 800c510:	f7fe facb 	bl	800aaaa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c514:	2301      	movs	r3, #1
 800c516:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c518:	697b      	ldr	r3, [r7, #20]
	}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3718      	adds	r7, #24
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	2000144c 	.word	0x2000144c
 800c528:	20001450 	.word	0x20001450
 800c52c:	20001554 	.word	0x20001554

0800c530 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c530:	b580      	push	{r7, lr}
 800c532:	b088      	sub	sp, #32
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c53e:	2301      	movs	r3, #1
 800c540:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d077      	beq.n	800c638 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d10a      	bne.n	800c566 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c554:	f383 8811 	msr	BASEPRI, r3
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	60fb      	str	r3, [r7, #12]
}
 800c562:	bf00      	nop
 800c564:	e7fe      	b.n	800c564 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c56a:	683a      	ldr	r2, [r7, #0]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d902      	bls.n	800c576 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	61fb      	str	r3, [r7, #28]
 800c574:	e002      	b.n	800c57c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c57a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c580:	69fa      	ldr	r2, [r7, #28]
 800c582:	429a      	cmp	r2, r3
 800c584:	d058      	beq.n	800c638 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c58a:	697a      	ldr	r2, [r7, #20]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d153      	bne.n	800c638 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c590:	4b2b      	ldr	r3, [pc, #172]	; (800c640 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	69ba      	ldr	r2, [r7, #24]
 800c596:	429a      	cmp	r2, r3
 800c598:	d10a      	bne.n	800c5b0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	60bb      	str	r3, [r7, #8]
}
 800c5ac:	bf00      	nop
 800c5ae:	e7fe      	b.n	800c5ae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	69fa      	ldr	r2, [r7, #28]
 800c5ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	699b      	ldr	r3, [r3, #24]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	db04      	blt.n	800c5ce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	f1c3 0207 	rsb	r2, r3, #7
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c5ce:	69bb      	ldr	r3, [r7, #24]
 800c5d0:	6959      	ldr	r1, [r3, #20]
 800c5d2:	693a      	ldr	r2, [r7, #16]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	4a19      	ldr	r2, [pc, #100]	; (800c644 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c5de:	4413      	add	r3, r2
 800c5e0:	4299      	cmp	r1, r3
 800c5e2:	d129      	bne.n	800c638 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5e4:	69bb      	ldr	r3, [r7, #24]
 800c5e6:	3304      	adds	r3, #4
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7fe fabb 	bl	800ab64 <uxListRemove>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10a      	bne.n	800c60a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c5fe:	43da      	mvns	r2, r3
 800c600:	4b11      	ldr	r3, [pc, #68]	; (800c648 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4013      	ands	r3, r2
 800c606:	4a10      	ldr	r2, [pc, #64]	; (800c648 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c608:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c60e:	2201      	movs	r2, #1
 800c610:	409a      	lsls	r2, r3
 800c612:	4b0d      	ldr	r3, [pc, #52]	; (800c648 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	4313      	orrs	r3, r2
 800c618:	4a0b      	ldr	r2, [pc, #44]	; (800c648 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c61a:	6013      	str	r3, [r2, #0]
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c620:	4613      	mov	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	4413      	add	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	4a06      	ldr	r2, [pc, #24]	; (800c644 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c62a:	441a      	add	r2, r3
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	3304      	adds	r3, #4
 800c630:	4619      	mov	r1, r3
 800c632:	4610      	mov	r0, r2
 800c634:	f7fe fa39 	bl	800aaaa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c638:	bf00      	nop
 800c63a:	3720      	adds	r7, #32
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	2000144c 	.word	0x2000144c
 800c644:	20001450 	.word	0x20001450
 800c648:	20001554 	.word	0x20001554

0800c64c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c64c:	b480      	push	{r7}
 800c64e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c650:	4b07      	ldr	r3, [pc, #28]	; (800c670 <pvTaskIncrementMutexHeldCount+0x24>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d004      	beq.n	800c662 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c658:	4b05      	ldr	r3, [pc, #20]	; (800c670 <pvTaskIncrementMutexHeldCount+0x24>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c65e:	3201      	adds	r2, #1
 800c660:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c662:	4b03      	ldr	r3, [pc, #12]	; (800c670 <pvTaskIncrementMutexHeldCount+0x24>)
 800c664:	681b      	ldr	r3, [r3, #0]
	}
 800c666:	4618      	mov	r0, r3
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr
 800c670:	2000144c 	.word	0x2000144c

0800c674 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c67e:	4b29      	ldr	r3, [pc, #164]	; (800c724 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c684:	4b28      	ldr	r3, [pc, #160]	; (800c728 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	3304      	adds	r3, #4
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7fe fa6a 	bl	800ab64 <uxListRemove>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d10b      	bne.n	800c6ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c696:	4b24      	ldr	r3, [pc, #144]	; (800c728 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69c:	2201      	movs	r2, #1
 800c69e:	fa02 f303 	lsl.w	r3, r2, r3
 800c6a2:	43da      	mvns	r2, r3
 800c6a4:	4b21      	ldr	r3, [pc, #132]	; (800c72c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4013      	ands	r3, r2
 800c6aa:	4a20      	ldr	r2, [pc, #128]	; (800c72c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c6ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b4:	d10a      	bne.n	800c6cc <prvAddCurrentTaskToDelayedList+0x58>
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d007      	beq.n	800c6cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6bc:	4b1a      	ldr	r3, [pc, #104]	; (800c728 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	481a      	ldr	r0, [pc, #104]	; (800c730 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c6c6:	f7fe f9f0 	bl	800aaaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c6ca:	e026      	b.n	800c71a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c6d4:	4b14      	ldr	r3, [pc, #80]	; (800c728 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68ba      	ldr	r2, [r7, #8]
 800c6da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c6dc:	68ba      	ldr	r2, [r7, #8]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d209      	bcs.n	800c6f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6e4:	4b13      	ldr	r3, [pc, #76]	; (800c734 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	4b0f      	ldr	r3, [pc, #60]	; (800c728 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	f7fe f9fe 	bl	800aaf2 <vListInsert>
}
 800c6f6:	e010      	b.n	800c71a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6f8:	4b0f      	ldr	r3, [pc, #60]	; (800c738 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	4b0a      	ldr	r3, [pc, #40]	; (800c728 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	3304      	adds	r3, #4
 800c702:	4619      	mov	r1, r3
 800c704:	4610      	mov	r0, r2
 800c706:	f7fe f9f4 	bl	800aaf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c70a:	4b0c      	ldr	r3, [pc, #48]	; (800c73c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68ba      	ldr	r2, [r7, #8]
 800c710:	429a      	cmp	r2, r3
 800c712:	d202      	bcs.n	800c71a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c714:	4a09      	ldr	r2, [pc, #36]	; (800c73c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	6013      	str	r3, [r2, #0]
}
 800c71a:	bf00      	nop
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	20001550 	.word	0x20001550
 800c728:	2000144c 	.word	0x2000144c
 800c72c:	20001554 	.word	0x20001554
 800c730:	20001538 	.word	0x20001538
 800c734:	20001508 	.word	0x20001508
 800c738:	20001504 	.word	0x20001504
 800c73c:	2000156c 	.word	0x2000156c

0800c740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	3b04      	subs	r3, #4
 800c750:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	3b04      	subs	r3, #4
 800c75e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	f023 0201 	bic.w	r2, r3, #1
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	3b04      	subs	r3, #4
 800c76e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c770:	4a0c      	ldr	r2, [pc, #48]	; (800c7a4 <pxPortInitialiseStack+0x64>)
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	3b14      	subs	r3, #20
 800c77a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	3b04      	subs	r3, #4
 800c786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f06f 0202 	mvn.w	r2, #2
 800c78e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	3b20      	subs	r3, #32
 800c794:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c796:	68fb      	ldr	r3, [r7, #12]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3714      	adds	r7, #20
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr
 800c7a4:	0800c7a9 	.word	0x0800c7a9

0800c7a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7b2:	4b12      	ldr	r3, [pc, #72]	; (800c7fc <prvTaskExitError+0x54>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ba:	d00a      	beq.n	800c7d2 <prvTaskExitError+0x2a>
	__asm volatile
 800c7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c0:	f383 8811 	msr	BASEPRI, r3
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	60fb      	str	r3, [r7, #12]
}
 800c7ce:	bf00      	nop
 800c7d0:	e7fe      	b.n	800c7d0 <prvTaskExitError+0x28>
	__asm volatile
 800c7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	60bb      	str	r3, [r7, #8]
}
 800c7e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7e6:	bf00      	nop
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d0fc      	beq.n	800c7e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7ee:	bf00      	nop
 800c7f0:	bf00      	nop
 800c7f2:	3714      	adds	r7, #20
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr
 800c7fc:	200000d4 	.word	0x200000d4

0800c800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c800:	4b07      	ldr	r3, [pc, #28]	; (800c820 <pxCurrentTCBConst2>)
 800c802:	6819      	ldr	r1, [r3, #0]
 800c804:	6808      	ldr	r0, [r1, #0]
 800c806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80a:	f380 8809 	msr	PSP, r0
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f04f 0000 	mov.w	r0, #0
 800c816:	f380 8811 	msr	BASEPRI, r0
 800c81a:	4770      	bx	lr
 800c81c:	f3af 8000 	nop.w

0800c820 <pxCurrentTCBConst2>:
 800c820:	2000144c 	.word	0x2000144c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c824:	bf00      	nop
 800c826:	bf00      	nop

0800c828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c828:	4808      	ldr	r0, [pc, #32]	; (800c84c <prvPortStartFirstTask+0x24>)
 800c82a:	6800      	ldr	r0, [r0, #0]
 800c82c:	6800      	ldr	r0, [r0, #0]
 800c82e:	f380 8808 	msr	MSP, r0
 800c832:	f04f 0000 	mov.w	r0, #0
 800c836:	f380 8814 	msr	CONTROL, r0
 800c83a:	b662      	cpsie	i
 800c83c:	b661      	cpsie	f
 800c83e:	f3bf 8f4f 	dsb	sy
 800c842:	f3bf 8f6f 	isb	sy
 800c846:	df00      	svc	0
 800c848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c84a:	bf00      	nop
 800c84c:	e000ed08 	.word	0xe000ed08

0800c850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b086      	sub	sp, #24
 800c854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c856:	4b46      	ldr	r3, [pc, #280]	; (800c970 <xPortStartScheduler+0x120>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a46      	ldr	r2, [pc, #280]	; (800c974 <xPortStartScheduler+0x124>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d10a      	bne.n	800c876 <xPortStartScheduler+0x26>
	__asm volatile
 800c860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c864:	f383 8811 	msr	BASEPRI, r3
 800c868:	f3bf 8f6f 	isb	sy
 800c86c:	f3bf 8f4f 	dsb	sy
 800c870:	613b      	str	r3, [r7, #16]
}
 800c872:	bf00      	nop
 800c874:	e7fe      	b.n	800c874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c876:	4b3e      	ldr	r3, [pc, #248]	; (800c970 <xPortStartScheduler+0x120>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a3f      	ldr	r2, [pc, #252]	; (800c978 <xPortStartScheduler+0x128>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d10a      	bne.n	800c896 <xPortStartScheduler+0x46>
	__asm volatile
 800c880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	60fb      	str	r3, [r7, #12]
}
 800c892:	bf00      	nop
 800c894:	e7fe      	b.n	800c894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c896:	4b39      	ldr	r3, [pc, #228]	; (800c97c <xPortStartScheduler+0x12c>)
 800c898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	22ff      	movs	r2, #255	; 0xff
 800c8a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8b0:	78fb      	ldrb	r3, [r7, #3]
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c8b8:	b2da      	uxtb	r2, r3
 800c8ba:	4b31      	ldr	r3, [pc, #196]	; (800c980 <xPortStartScheduler+0x130>)
 800c8bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8be:	4b31      	ldr	r3, [pc, #196]	; (800c984 <xPortStartScheduler+0x134>)
 800c8c0:	2207      	movs	r2, #7
 800c8c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8c4:	e009      	b.n	800c8da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c8c6:	4b2f      	ldr	r3, [pc, #188]	; (800c984 <xPortStartScheduler+0x134>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	4a2d      	ldr	r2, [pc, #180]	; (800c984 <xPortStartScheduler+0x134>)
 800c8ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c8d0:	78fb      	ldrb	r3, [r7, #3]
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	005b      	lsls	r3, r3, #1
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8da:	78fb      	ldrb	r3, [r7, #3]
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8e2:	2b80      	cmp	r3, #128	; 0x80
 800c8e4:	d0ef      	beq.n	800c8c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8e6:	4b27      	ldr	r3, [pc, #156]	; (800c984 <xPortStartScheduler+0x134>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f1c3 0307 	rsb	r3, r3, #7
 800c8ee:	2b04      	cmp	r3, #4
 800c8f0:	d00a      	beq.n	800c908 <xPortStartScheduler+0xb8>
	__asm volatile
 800c8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	60bb      	str	r3, [r7, #8]
}
 800c904:	bf00      	nop
 800c906:	e7fe      	b.n	800c906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c908:	4b1e      	ldr	r3, [pc, #120]	; (800c984 <xPortStartScheduler+0x134>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	021b      	lsls	r3, r3, #8
 800c90e:	4a1d      	ldr	r2, [pc, #116]	; (800c984 <xPortStartScheduler+0x134>)
 800c910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c912:	4b1c      	ldr	r3, [pc, #112]	; (800c984 <xPortStartScheduler+0x134>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c91a:	4a1a      	ldr	r2, [pc, #104]	; (800c984 <xPortStartScheduler+0x134>)
 800c91c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	b2da      	uxtb	r2, r3
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c926:	4b18      	ldr	r3, [pc, #96]	; (800c988 <xPortStartScheduler+0x138>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a17      	ldr	r2, [pc, #92]	; (800c988 <xPortStartScheduler+0x138>)
 800c92c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c932:	4b15      	ldr	r3, [pc, #84]	; (800c988 <xPortStartScheduler+0x138>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a14      	ldr	r2, [pc, #80]	; (800c988 <xPortStartScheduler+0x138>)
 800c938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c93c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c93e:	f000 f8dd 	bl	800cafc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c942:	4b12      	ldr	r3, [pc, #72]	; (800c98c <xPortStartScheduler+0x13c>)
 800c944:	2200      	movs	r2, #0
 800c946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c948:	f000 f8fc 	bl	800cb44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c94c:	4b10      	ldr	r3, [pc, #64]	; (800c990 <xPortStartScheduler+0x140>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a0f      	ldr	r2, [pc, #60]	; (800c990 <xPortStartScheduler+0x140>)
 800c952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c958:	f7ff ff66 	bl	800c828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c95c:	f7ff fa50 	bl	800be00 <vTaskSwitchContext>
	prvTaskExitError();
 800c960:	f7ff ff22 	bl	800c7a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3718      	adds	r7, #24
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	e000ed00 	.word	0xe000ed00
 800c974:	410fc271 	.word	0x410fc271
 800c978:	410fc270 	.word	0x410fc270
 800c97c:	e000e400 	.word	0xe000e400
 800c980:	20001578 	.word	0x20001578
 800c984:	2000157c 	.word	0x2000157c
 800c988:	e000ed20 	.word	0xe000ed20
 800c98c:	200000d4 	.word	0x200000d4
 800c990:	e000ef34 	.word	0xe000ef34

0800c994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	607b      	str	r3, [r7, #4]
}
 800c9ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c9ae:	4b0f      	ldr	r3, [pc, #60]	; (800c9ec <vPortEnterCritical+0x58>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	4a0d      	ldr	r2, [pc, #52]	; (800c9ec <vPortEnterCritical+0x58>)
 800c9b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c9b8:	4b0c      	ldr	r3, [pc, #48]	; (800c9ec <vPortEnterCritical+0x58>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d10f      	bne.n	800c9e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9c0:	4b0b      	ldr	r3, [pc, #44]	; (800c9f0 <vPortEnterCritical+0x5c>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d00a      	beq.n	800c9e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ce:	f383 8811 	msr	BASEPRI, r3
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	f3bf 8f4f 	dsb	sy
 800c9da:	603b      	str	r3, [r7, #0]
}
 800c9dc:	bf00      	nop
 800c9de:	e7fe      	b.n	800c9de <vPortEnterCritical+0x4a>
	}
}
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr
 800c9ec:	200000d4 	.word	0x200000d4
 800c9f0:	e000ed04 	.word	0xe000ed04

0800c9f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9fa:	4b12      	ldr	r3, [pc, #72]	; (800ca44 <vPortExitCritical+0x50>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d10a      	bne.n	800ca18 <vPortExitCritical+0x24>
	__asm volatile
 800ca02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca06:	f383 8811 	msr	BASEPRI, r3
 800ca0a:	f3bf 8f6f 	isb	sy
 800ca0e:	f3bf 8f4f 	dsb	sy
 800ca12:	607b      	str	r3, [r7, #4]
}
 800ca14:	bf00      	nop
 800ca16:	e7fe      	b.n	800ca16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca18:	4b0a      	ldr	r3, [pc, #40]	; (800ca44 <vPortExitCritical+0x50>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	4a09      	ldr	r2, [pc, #36]	; (800ca44 <vPortExitCritical+0x50>)
 800ca20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca22:	4b08      	ldr	r3, [pc, #32]	; (800ca44 <vPortExitCritical+0x50>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d105      	bne.n	800ca36 <vPortExitCritical+0x42>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	f383 8811 	msr	BASEPRI, r3
}
 800ca34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca36:	bf00      	nop
 800ca38:	370c      	adds	r7, #12
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
 800ca42:	bf00      	nop
 800ca44:	200000d4 	.word	0x200000d4
	...

0800ca50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca50:	f3ef 8009 	mrs	r0, PSP
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	4b15      	ldr	r3, [pc, #84]	; (800cab0 <pxCurrentTCBConst>)
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	f01e 0f10 	tst.w	lr, #16
 800ca60:	bf08      	it	eq
 800ca62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6a:	6010      	str	r0, [r2, #0]
 800ca6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca74:	f380 8811 	msr	BASEPRI, r0
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	f3bf 8f6f 	isb	sy
 800ca80:	f7ff f9be 	bl	800be00 <vTaskSwitchContext>
 800ca84:	f04f 0000 	mov.w	r0, #0
 800ca88:	f380 8811 	msr	BASEPRI, r0
 800ca8c:	bc09      	pop	{r0, r3}
 800ca8e:	6819      	ldr	r1, [r3, #0]
 800ca90:	6808      	ldr	r0, [r1, #0]
 800ca92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca96:	f01e 0f10 	tst.w	lr, #16
 800ca9a:	bf08      	it	eq
 800ca9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800caa0:	f380 8809 	msr	PSP, r0
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	f3af 8000 	nop.w

0800cab0 <pxCurrentTCBConst>:
 800cab0:	2000144c 	.word	0x2000144c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cab4:	bf00      	nop
 800cab6:	bf00      	nop

0800cab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
	__asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	607b      	str	r3, [r7, #4]
}
 800cad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cad2:	f7ff f8dd 	bl	800bc90 <xTaskIncrementTick>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d003      	beq.n	800cae4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cadc:	4b06      	ldr	r3, [pc, #24]	; (800caf8 <SysTick_Handler+0x40>)
 800cade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cae2:	601a      	str	r2, [r3, #0]
 800cae4:	2300      	movs	r3, #0
 800cae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	f383 8811 	msr	BASEPRI, r3
}
 800caee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800caf0:	bf00      	nop
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	e000ed04 	.word	0xe000ed04

0800cafc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cafc:	b480      	push	{r7}
 800cafe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb00:	4b0b      	ldr	r3, [pc, #44]	; (800cb30 <vPortSetupTimerInterrupt+0x34>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb06:	4b0b      	ldr	r3, [pc, #44]	; (800cb34 <vPortSetupTimerInterrupt+0x38>)
 800cb08:	2200      	movs	r2, #0
 800cb0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb0c:	4b0a      	ldr	r3, [pc, #40]	; (800cb38 <vPortSetupTimerInterrupt+0x3c>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a0a      	ldr	r2, [pc, #40]	; (800cb3c <vPortSetupTimerInterrupt+0x40>)
 800cb12:	fba2 2303 	umull	r2, r3, r2, r3
 800cb16:	099b      	lsrs	r3, r3, #6
 800cb18:	4a09      	ldr	r2, [pc, #36]	; (800cb40 <vPortSetupTimerInterrupt+0x44>)
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb1e:	4b04      	ldr	r3, [pc, #16]	; (800cb30 <vPortSetupTimerInterrupt+0x34>)
 800cb20:	2207      	movs	r2, #7
 800cb22:	601a      	str	r2, [r3, #0]
}
 800cb24:	bf00      	nop
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	e000e010 	.word	0xe000e010
 800cb34:	e000e018 	.word	0xe000e018
 800cb38:	200000c8 	.word	0x200000c8
 800cb3c:	10624dd3 	.word	0x10624dd3
 800cb40:	e000e014 	.word	0xe000e014

0800cb44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb54 <vPortEnableVFP+0x10>
 800cb48:	6801      	ldr	r1, [r0, #0]
 800cb4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb4e:	6001      	str	r1, [r0, #0]
 800cb50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb52:	bf00      	nop
 800cb54:	e000ed88 	.word	0xe000ed88

0800cb58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb5e:	f3ef 8305 	mrs	r3, IPSR
 800cb62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b0f      	cmp	r3, #15
 800cb68:	d914      	bls.n	800cb94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb6a:	4a17      	ldr	r2, [pc, #92]	; (800cbc8 <vPortValidateInterruptPriority+0x70>)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	4413      	add	r3, r2
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb74:	4b15      	ldr	r3, [pc, #84]	; (800cbcc <vPortValidateInterruptPriority+0x74>)
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	7afa      	ldrb	r2, [r7, #11]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d20a      	bcs.n	800cb94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	607b      	str	r3, [r7, #4]
}
 800cb90:	bf00      	nop
 800cb92:	e7fe      	b.n	800cb92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb94:	4b0e      	ldr	r3, [pc, #56]	; (800cbd0 <vPortValidateInterruptPriority+0x78>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb9c:	4b0d      	ldr	r3, [pc, #52]	; (800cbd4 <vPortValidateInterruptPriority+0x7c>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d90a      	bls.n	800cbba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba8:	f383 8811 	msr	BASEPRI, r3
 800cbac:	f3bf 8f6f 	isb	sy
 800cbb0:	f3bf 8f4f 	dsb	sy
 800cbb4:	603b      	str	r3, [r7, #0]
}
 800cbb6:	bf00      	nop
 800cbb8:	e7fe      	b.n	800cbb8 <vPortValidateInterruptPriority+0x60>
	}
 800cbba:	bf00      	nop
 800cbbc:	3714      	adds	r7, #20
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop
 800cbc8:	e000e3f0 	.word	0xe000e3f0
 800cbcc:	20001578 	.word	0x20001578
 800cbd0:	e000ed0c 	.word	0xe000ed0c
 800cbd4:	2000157c 	.word	0x2000157c

0800cbd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b08a      	sub	sp, #40	; 0x28
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cbe4:	f7fe ff9a 	bl	800bb1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cbe8:	4b5b      	ldr	r3, [pc, #364]	; (800cd58 <pvPortMalloc+0x180>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d101      	bne.n	800cbf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cbf0:	f000 f920 	bl	800ce34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cbf4:	4b59      	ldr	r3, [pc, #356]	; (800cd5c <pvPortMalloc+0x184>)
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f040 8093 	bne.w	800cd28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d01d      	beq.n	800cc44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cc08:	2208      	movs	r2, #8
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f003 0307 	and.w	r3, r3, #7
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d014      	beq.n	800cc44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f023 0307 	bic.w	r3, r3, #7
 800cc20:	3308      	adds	r3, #8
 800cc22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f003 0307 	and.w	r3, r3, #7
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d00a      	beq.n	800cc44 <pvPortMalloc+0x6c>
	__asm volatile
 800cc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	617b      	str	r3, [r7, #20]
}
 800cc40:	bf00      	nop
 800cc42:	e7fe      	b.n	800cc42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d06e      	beq.n	800cd28 <pvPortMalloc+0x150>
 800cc4a:	4b45      	ldr	r3, [pc, #276]	; (800cd60 <pvPortMalloc+0x188>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d869      	bhi.n	800cd28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc54:	4b43      	ldr	r3, [pc, #268]	; (800cd64 <pvPortMalloc+0x18c>)
 800cc56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc58:	4b42      	ldr	r3, [pc, #264]	; (800cd64 <pvPortMalloc+0x18c>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc5e:	e004      	b.n	800cc6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d903      	bls.n	800cc7c <pvPortMalloc+0xa4>
 800cc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d1f1      	bne.n	800cc60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc7c:	4b36      	ldr	r3, [pc, #216]	; (800cd58 <pvPortMalloc+0x180>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d050      	beq.n	800cd28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc86:	6a3b      	ldr	r3, [r7, #32]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2208      	movs	r2, #8
 800cc8c:	4413      	add	r3, r2
 800cc8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	6a3b      	ldr	r3, [r7, #32]
 800cc96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9a:	685a      	ldr	r2, [r3, #4]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	1ad2      	subs	r2, r2, r3
 800cca0:	2308      	movs	r3, #8
 800cca2:	005b      	lsls	r3, r3, #1
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d91f      	bls.n	800cce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4413      	add	r3, r2
 800ccae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	f003 0307 	and.w	r3, r3, #7
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00a      	beq.n	800ccd0 <pvPortMalloc+0xf8>
	__asm volatile
 800ccba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbe:	f383 8811 	msr	BASEPRI, r3
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	613b      	str	r3, [r7, #16]
}
 800cccc:	bf00      	nop
 800ccce:	e7fe      	b.n	800ccce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ccd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd2:	685a      	ldr	r2, [r3, #4]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	1ad2      	subs	r2, r2, r3
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cce2:	69b8      	ldr	r0, [r7, #24]
 800cce4:	f000 f908 	bl	800cef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cce8:	4b1d      	ldr	r3, [pc, #116]	; (800cd60 <pvPortMalloc+0x188>)
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	1ad3      	subs	r3, r2, r3
 800ccf2:	4a1b      	ldr	r2, [pc, #108]	; (800cd60 <pvPortMalloc+0x188>)
 800ccf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ccf6:	4b1a      	ldr	r3, [pc, #104]	; (800cd60 <pvPortMalloc+0x188>)
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	4b1b      	ldr	r3, [pc, #108]	; (800cd68 <pvPortMalloc+0x190>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d203      	bcs.n	800cd0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd02:	4b17      	ldr	r3, [pc, #92]	; (800cd60 <pvPortMalloc+0x188>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4a18      	ldr	r2, [pc, #96]	; (800cd68 <pvPortMalloc+0x190>)
 800cd08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0c:	685a      	ldr	r2, [r3, #4]
 800cd0e:	4b13      	ldr	r3, [pc, #76]	; (800cd5c <pvPortMalloc+0x184>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	431a      	orrs	r2, r3
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd1e:	4b13      	ldr	r3, [pc, #76]	; (800cd6c <pvPortMalloc+0x194>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	3301      	adds	r3, #1
 800cd24:	4a11      	ldr	r2, [pc, #68]	; (800cd6c <pvPortMalloc+0x194>)
 800cd26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd28:	f7fe ff06 	bl	800bb38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd2c:	69fb      	ldr	r3, [r7, #28]
 800cd2e:	f003 0307 	and.w	r3, r3, #7
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00a      	beq.n	800cd4c <pvPortMalloc+0x174>
	__asm volatile
 800cd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3a:	f383 8811 	msr	BASEPRI, r3
 800cd3e:	f3bf 8f6f 	isb	sy
 800cd42:	f3bf 8f4f 	dsb	sy
 800cd46:	60fb      	str	r3, [r7, #12]
}
 800cd48:	bf00      	nop
 800cd4a:	e7fe      	b.n	800cd4a <pvPortMalloc+0x172>
	return pvReturn;
 800cd4c:	69fb      	ldr	r3, [r7, #28]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3728      	adds	r7, #40	; 0x28
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	20008ab8 	.word	0x20008ab8
 800cd5c:	20008acc 	.word	0x20008acc
 800cd60:	20008abc 	.word	0x20008abc
 800cd64:	20008ab0 	.word	0x20008ab0
 800cd68:	20008ac0 	.word	0x20008ac0
 800cd6c:	20008ac4 	.word	0x20008ac4

0800cd70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b086      	sub	sp, #24
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d04d      	beq.n	800ce1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd82:	2308      	movs	r3, #8
 800cd84:	425b      	negs	r3, r3
 800cd86:	697a      	ldr	r2, [r7, #20]
 800cd88:	4413      	add	r3, r2
 800cd8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	685a      	ldr	r2, [r3, #4]
 800cd94:	4b24      	ldr	r3, [pc, #144]	; (800ce28 <vPortFree+0xb8>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4013      	ands	r3, r2
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d10a      	bne.n	800cdb4 <vPortFree+0x44>
	__asm volatile
 800cd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	60fb      	str	r3, [r7, #12]
}
 800cdb0:	bf00      	nop
 800cdb2:	e7fe      	b.n	800cdb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00a      	beq.n	800cdd2 <vPortFree+0x62>
	__asm volatile
 800cdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	60bb      	str	r3, [r7, #8]
}
 800cdce:	bf00      	nop
 800cdd0:	e7fe      	b.n	800cdd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	685a      	ldr	r2, [r3, #4]
 800cdd6:	4b14      	ldr	r3, [pc, #80]	; (800ce28 <vPortFree+0xb8>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4013      	ands	r3, r2
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d01e      	beq.n	800ce1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d11a      	bne.n	800ce1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	685a      	ldr	r2, [r3, #4]
 800cdec:	4b0e      	ldr	r3, [pc, #56]	; (800ce28 <vPortFree+0xb8>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	43db      	mvns	r3, r3
 800cdf2:	401a      	ands	r2, r3
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cdf8:	f7fe fe90 	bl	800bb1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	685a      	ldr	r2, [r3, #4]
 800ce00:	4b0a      	ldr	r3, [pc, #40]	; (800ce2c <vPortFree+0xbc>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4413      	add	r3, r2
 800ce06:	4a09      	ldr	r2, [pc, #36]	; (800ce2c <vPortFree+0xbc>)
 800ce08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce0a:	6938      	ldr	r0, [r7, #16]
 800ce0c:	f000 f874 	bl	800cef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce10:	4b07      	ldr	r3, [pc, #28]	; (800ce30 <vPortFree+0xc0>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	3301      	adds	r3, #1
 800ce16:	4a06      	ldr	r2, [pc, #24]	; (800ce30 <vPortFree+0xc0>)
 800ce18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce1a:	f7fe fe8d 	bl	800bb38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce1e:	bf00      	nop
 800ce20:	3718      	adds	r7, #24
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	20008acc 	.word	0x20008acc
 800ce2c:	20008abc 	.word	0x20008abc
 800ce30:	20008ac8 	.word	0x20008ac8

0800ce34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce34:	b480      	push	{r7}
 800ce36:	b085      	sub	sp, #20
 800ce38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce3a:	f247 5330 	movw	r3, #30000	; 0x7530
 800ce3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce40:	4b27      	ldr	r3, [pc, #156]	; (800cee0 <prvHeapInit+0xac>)
 800ce42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f003 0307 	and.w	r3, r3, #7
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00c      	beq.n	800ce68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	3307      	adds	r3, #7
 800ce52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f023 0307 	bic.w	r3, r3, #7
 800ce5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	4a1f      	ldr	r2, [pc, #124]	; (800cee0 <prvHeapInit+0xac>)
 800ce64:	4413      	add	r3, r2
 800ce66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce6c:	4a1d      	ldr	r2, [pc, #116]	; (800cee4 <prvHeapInit+0xb0>)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce72:	4b1c      	ldr	r3, [pc, #112]	; (800cee4 <prvHeapInit+0xb0>)
 800ce74:	2200      	movs	r2, #0
 800ce76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	68ba      	ldr	r2, [r7, #8]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce80:	2208      	movs	r2, #8
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	1a9b      	subs	r3, r3, r2
 800ce86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f023 0307 	bic.w	r3, r3, #7
 800ce8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	4a15      	ldr	r2, [pc, #84]	; (800cee8 <prvHeapInit+0xb4>)
 800ce94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce96:	4b14      	ldr	r3, [pc, #80]	; (800cee8 <prvHeapInit+0xb4>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce9e:	4b12      	ldr	r3, [pc, #72]	; (800cee8 <prvHeapInit+0xb4>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2200      	movs	r2, #0
 800cea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	1ad2      	subs	r2, r2, r3
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ceb4:	4b0c      	ldr	r3, [pc, #48]	; (800cee8 <prvHeapInit+0xb4>)
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	4a0a      	ldr	r2, [pc, #40]	; (800ceec <prvHeapInit+0xb8>)
 800cec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	4a09      	ldr	r2, [pc, #36]	; (800cef0 <prvHeapInit+0xbc>)
 800ceca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cecc:	4b09      	ldr	r3, [pc, #36]	; (800cef4 <prvHeapInit+0xc0>)
 800cece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ced2:	601a      	str	r2, [r3, #0]
}
 800ced4:	bf00      	nop
 800ced6:	3714      	adds	r7, #20
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	20001580 	.word	0x20001580
 800cee4:	20008ab0 	.word	0x20008ab0
 800cee8:	20008ab8 	.word	0x20008ab8
 800ceec:	20008ac0 	.word	0x20008ac0
 800cef0:	20008abc 	.word	0x20008abc
 800cef4:	20008acc 	.word	0x20008acc

0800cef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf00:	4b28      	ldr	r3, [pc, #160]	; (800cfa4 <prvInsertBlockIntoFreeList+0xac>)
 800cf02:	60fb      	str	r3, [r7, #12]
 800cf04:	e002      	b.n	800cf0c <prvInsertBlockIntoFreeList+0x14>
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	60fb      	str	r3, [r7, #12]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d8f7      	bhi.n	800cf06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	4413      	add	r3, r2
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d108      	bne.n	800cf3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	441a      	add	r2, r3
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	68ba      	ldr	r2, [r7, #8]
 800cf44:	441a      	add	r2, r3
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d118      	bne.n	800cf80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	4b15      	ldr	r3, [pc, #84]	; (800cfa8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d00d      	beq.n	800cf76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	685a      	ldr	r2, [r3, #4]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	441a      	add	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	e008      	b.n	800cf88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf76:	4b0c      	ldr	r3, [pc, #48]	; (800cfa8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	e003      	b.n	800cf88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d002      	beq.n	800cf96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf96:	bf00      	nop
 800cf98:	3714      	adds	r7, #20
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr
 800cfa2:	bf00      	nop
 800cfa4:	20008ab0 	.word	0x20008ab0
 800cfa8:	20008ab8 	.word	0x20008ab8

0800cfac <__cvt>:
 800cfac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfb0:	ec55 4b10 	vmov	r4, r5, d0
 800cfb4:	2d00      	cmp	r5, #0
 800cfb6:	460e      	mov	r6, r1
 800cfb8:	4619      	mov	r1, r3
 800cfba:	462b      	mov	r3, r5
 800cfbc:	bfbb      	ittet	lt
 800cfbe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cfc2:	461d      	movlt	r5, r3
 800cfc4:	2300      	movge	r3, #0
 800cfc6:	232d      	movlt	r3, #45	; 0x2d
 800cfc8:	700b      	strb	r3, [r1, #0]
 800cfca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfcc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cfd0:	4691      	mov	r9, r2
 800cfd2:	f023 0820 	bic.w	r8, r3, #32
 800cfd6:	bfbc      	itt	lt
 800cfd8:	4622      	movlt	r2, r4
 800cfda:	4614      	movlt	r4, r2
 800cfdc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cfe0:	d005      	beq.n	800cfee <__cvt+0x42>
 800cfe2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cfe6:	d100      	bne.n	800cfea <__cvt+0x3e>
 800cfe8:	3601      	adds	r6, #1
 800cfea:	2102      	movs	r1, #2
 800cfec:	e000      	b.n	800cff0 <__cvt+0x44>
 800cfee:	2103      	movs	r1, #3
 800cff0:	ab03      	add	r3, sp, #12
 800cff2:	9301      	str	r3, [sp, #4]
 800cff4:	ab02      	add	r3, sp, #8
 800cff6:	9300      	str	r3, [sp, #0]
 800cff8:	ec45 4b10 	vmov	d0, r4, r5
 800cffc:	4653      	mov	r3, sl
 800cffe:	4632      	mov	r2, r6
 800d000:	f001 f92e 	bl	800e260 <_dtoa_r>
 800d004:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d008:	4607      	mov	r7, r0
 800d00a:	d102      	bne.n	800d012 <__cvt+0x66>
 800d00c:	f019 0f01 	tst.w	r9, #1
 800d010:	d022      	beq.n	800d058 <__cvt+0xac>
 800d012:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d016:	eb07 0906 	add.w	r9, r7, r6
 800d01a:	d110      	bne.n	800d03e <__cvt+0x92>
 800d01c:	783b      	ldrb	r3, [r7, #0]
 800d01e:	2b30      	cmp	r3, #48	; 0x30
 800d020:	d10a      	bne.n	800d038 <__cvt+0x8c>
 800d022:	2200      	movs	r2, #0
 800d024:	2300      	movs	r3, #0
 800d026:	4620      	mov	r0, r4
 800d028:	4629      	mov	r1, r5
 800d02a:	f7f3 fd4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d02e:	b918      	cbnz	r0, 800d038 <__cvt+0x8c>
 800d030:	f1c6 0601 	rsb	r6, r6, #1
 800d034:	f8ca 6000 	str.w	r6, [sl]
 800d038:	f8da 3000 	ldr.w	r3, [sl]
 800d03c:	4499      	add	r9, r3
 800d03e:	2200      	movs	r2, #0
 800d040:	2300      	movs	r3, #0
 800d042:	4620      	mov	r0, r4
 800d044:	4629      	mov	r1, r5
 800d046:	f7f3 fd3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d04a:	b108      	cbz	r0, 800d050 <__cvt+0xa4>
 800d04c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d050:	2230      	movs	r2, #48	; 0x30
 800d052:	9b03      	ldr	r3, [sp, #12]
 800d054:	454b      	cmp	r3, r9
 800d056:	d307      	bcc.n	800d068 <__cvt+0xbc>
 800d058:	9b03      	ldr	r3, [sp, #12]
 800d05a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d05c:	1bdb      	subs	r3, r3, r7
 800d05e:	4638      	mov	r0, r7
 800d060:	6013      	str	r3, [r2, #0]
 800d062:	b004      	add	sp, #16
 800d064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d068:	1c59      	adds	r1, r3, #1
 800d06a:	9103      	str	r1, [sp, #12]
 800d06c:	701a      	strb	r2, [r3, #0]
 800d06e:	e7f0      	b.n	800d052 <__cvt+0xa6>

0800d070 <__exponent>:
 800d070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d072:	4603      	mov	r3, r0
 800d074:	2900      	cmp	r1, #0
 800d076:	bfb8      	it	lt
 800d078:	4249      	neglt	r1, r1
 800d07a:	f803 2b02 	strb.w	r2, [r3], #2
 800d07e:	bfb4      	ite	lt
 800d080:	222d      	movlt	r2, #45	; 0x2d
 800d082:	222b      	movge	r2, #43	; 0x2b
 800d084:	2909      	cmp	r1, #9
 800d086:	7042      	strb	r2, [r0, #1]
 800d088:	dd2a      	ble.n	800d0e0 <__exponent+0x70>
 800d08a:	f10d 0207 	add.w	r2, sp, #7
 800d08e:	4617      	mov	r7, r2
 800d090:	260a      	movs	r6, #10
 800d092:	4694      	mov	ip, r2
 800d094:	fb91 f5f6 	sdiv	r5, r1, r6
 800d098:	fb06 1415 	mls	r4, r6, r5, r1
 800d09c:	3430      	adds	r4, #48	; 0x30
 800d09e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d0a2:	460c      	mov	r4, r1
 800d0a4:	2c63      	cmp	r4, #99	; 0x63
 800d0a6:	f102 32ff 	add.w	r2, r2, #4294967295
 800d0aa:	4629      	mov	r1, r5
 800d0ac:	dcf1      	bgt.n	800d092 <__exponent+0x22>
 800d0ae:	3130      	adds	r1, #48	; 0x30
 800d0b0:	f1ac 0402 	sub.w	r4, ip, #2
 800d0b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d0b8:	1c41      	adds	r1, r0, #1
 800d0ba:	4622      	mov	r2, r4
 800d0bc:	42ba      	cmp	r2, r7
 800d0be:	d30a      	bcc.n	800d0d6 <__exponent+0x66>
 800d0c0:	f10d 0209 	add.w	r2, sp, #9
 800d0c4:	eba2 020c 	sub.w	r2, r2, ip
 800d0c8:	42bc      	cmp	r4, r7
 800d0ca:	bf88      	it	hi
 800d0cc:	2200      	movhi	r2, #0
 800d0ce:	4413      	add	r3, r2
 800d0d0:	1a18      	subs	r0, r3, r0
 800d0d2:	b003      	add	sp, #12
 800d0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d0da:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d0de:	e7ed      	b.n	800d0bc <__exponent+0x4c>
 800d0e0:	2330      	movs	r3, #48	; 0x30
 800d0e2:	3130      	adds	r1, #48	; 0x30
 800d0e4:	7083      	strb	r3, [r0, #2]
 800d0e6:	70c1      	strb	r1, [r0, #3]
 800d0e8:	1d03      	adds	r3, r0, #4
 800d0ea:	e7f1      	b.n	800d0d0 <__exponent+0x60>

0800d0ec <_printf_float>:
 800d0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f0:	ed2d 8b02 	vpush	{d8}
 800d0f4:	b08d      	sub	sp, #52	; 0x34
 800d0f6:	460c      	mov	r4, r1
 800d0f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d0fc:	4616      	mov	r6, r2
 800d0fe:	461f      	mov	r7, r3
 800d100:	4605      	mov	r5, r0
 800d102:	f000 ff3b 	bl	800df7c <_localeconv_r>
 800d106:	f8d0 a000 	ldr.w	sl, [r0]
 800d10a:	4650      	mov	r0, sl
 800d10c:	f7f3 f8b0 	bl	8000270 <strlen>
 800d110:	2300      	movs	r3, #0
 800d112:	930a      	str	r3, [sp, #40]	; 0x28
 800d114:	6823      	ldr	r3, [r4, #0]
 800d116:	9305      	str	r3, [sp, #20]
 800d118:	f8d8 3000 	ldr.w	r3, [r8]
 800d11c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d120:	3307      	adds	r3, #7
 800d122:	f023 0307 	bic.w	r3, r3, #7
 800d126:	f103 0208 	add.w	r2, r3, #8
 800d12a:	f8c8 2000 	str.w	r2, [r8]
 800d12e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d132:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d136:	9307      	str	r3, [sp, #28]
 800d138:	f8cd 8018 	str.w	r8, [sp, #24]
 800d13c:	ee08 0a10 	vmov	s16, r0
 800d140:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d144:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d148:	4b9e      	ldr	r3, [pc, #632]	; (800d3c4 <_printf_float+0x2d8>)
 800d14a:	f04f 32ff 	mov.w	r2, #4294967295
 800d14e:	f7f3 fced 	bl	8000b2c <__aeabi_dcmpun>
 800d152:	bb88      	cbnz	r0, 800d1b8 <_printf_float+0xcc>
 800d154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d158:	4b9a      	ldr	r3, [pc, #616]	; (800d3c4 <_printf_float+0x2d8>)
 800d15a:	f04f 32ff 	mov.w	r2, #4294967295
 800d15e:	f7f3 fcc7 	bl	8000af0 <__aeabi_dcmple>
 800d162:	bb48      	cbnz	r0, 800d1b8 <_printf_float+0xcc>
 800d164:	2200      	movs	r2, #0
 800d166:	2300      	movs	r3, #0
 800d168:	4640      	mov	r0, r8
 800d16a:	4649      	mov	r1, r9
 800d16c:	f7f3 fcb6 	bl	8000adc <__aeabi_dcmplt>
 800d170:	b110      	cbz	r0, 800d178 <_printf_float+0x8c>
 800d172:	232d      	movs	r3, #45	; 0x2d
 800d174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d178:	4a93      	ldr	r2, [pc, #588]	; (800d3c8 <_printf_float+0x2dc>)
 800d17a:	4b94      	ldr	r3, [pc, #592]	; (800d3cc <_printf_float+0x2e0>)
 800d17c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d180:	bf94      	ite	ls
 800d182:	4690      	movls	r8, r2
 800d184:	4698      	movhi	r8, r3
 800d186:	2303      	movs	r3, #3
 800d188:	6123      	str	r3, [r4, #16]
 800d18a:	9b05      	ldr	r3, [sp, #20]
 800d18c:	f023 0304 	bic.w	r3, r3, #4
 800d190:	6023      	str	r3, [r4, #0]
 800d192:	f04f 0900 	mov.w	r9, #0
 800d196:	9700      	str	r7, [sp, #0]
 800d198:	4633      	mov	r3, r6
 800d19a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d19c:	4621      	mov	r1, r4
 800d19e:	4628      	mov	r0, r5
 800d1a0:	f000 f9da 	bl	800d558 <_printf_common>
 800d1a4:	3001      	adds	r0, #1
 800d1a6:	f040 8090 	bne.w	800d2ca <_printf_float+0x1de>
 800d1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ae:	b00d      	add	sp, #52	; 0x34
 800d1b0:	ecbd 8b02 	vpop	{d8}
 800d1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1b8:	4642      	mov	r2, r8
 800d1ba:	464b      	mov	r3, r9
 800d1bc:	4640      	mov	r0, r8
 800d1be:	4649      	mov	r1, r9
 800d1c0:	f7f3 fcb4 	bl	8000b2c <__aeabi_dcmpun>
 800d1c4:	b140      	cbz	r0, 800d1d8 <_printf_float+0xec>
 800d1c6:	464b      	mov	r3, r9
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	bfbc      	itt	lt
 800d1cc:	232d      	movlt	r3, #45	; 0x2d
 800d1ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d1d2:	4a7f      	ldr	r2, [pc, #508]	; (800d3d0 <_printf_float+0x2e4>)
 800d1d4:	4b7f      	ldr	r3, [pc, #508]	; (800d3d4 <_printf_float+0x2e8>)
 800d1d6:	e7d1      	b.n	800d17c <_printf_float+0x90>
 800d1d8:	6863      	ldr	r3, [r4, #4]
 800d1da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d1de:	9206      	str	r2, [sp, #24]
 800d1e0:	1c5a      	adds	r2, r3, #1
 800d1e2:	d13f      	bne.n	800d264 <_printf_float+0x178>
 800d1e4:	2306      	movs	r3, #6
 800d1e6:	6063      	str	r3, [r4, #4]
 800d1e8:	9b05      	ldr	r3, [sp, #20]
 800d1ea:	6861      	ldr	r1, [r4, #4]
 800d1ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	9303      	str	r3, [sp, #12]
 800d1f4:	ab0a      	add	r3, sp, #40	; 0x28
 800d1f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d1fa:	ab09      	add	r3, sp, #36	; 0x24
 800d1fc:	ec49 8b10 	vmov	d0, r8, r9
 800d200:	9300      	str	r3, [sp, #0]
 800d202:	6022      	str	r2, [r4, #0]
 800d204:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d208:	4628      	mov	r0, r5
 800d20a:	f7ff fecf 	bl	800cfac <__cvt>
 800d20e:	9b06      	ldr	r3, [sp, #24]
 800d210:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d212:	2b47      	cmp	r3, #71	; 0x47
 800d214:	4680      	mov	r8, r0
 800d216:	d108      	bne.n	800d22a <_printf_float+0x13e>
 800d218:	1cc8      	adds	r0, r1, #3
 800d21a:	db02      	blt.n	800d222 <_printf_float+0x136>
 800d21c:	6863      	ldr	r3, [r4, #4]
 800d21e:	4299      	cmp	r1, r3
 800d220:	dd41      	ble.n	800d2a6 <_printf_float+0x1ba>
 800d222:	f1ab 0302 	sub.w	r3, fp, #2
 800d226:	fa5f fb83 	uxtb.w	fp, r3
 800d22a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d22e:	d820      	bhi.n	800d272 <_printf_float+0x186>
 800d230:	3901      	subs	r1, #1
 800d232:	465a      	mov	r2, fp
 800d234:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d238:	9109      	str	r1, [sp, #36]	; 0x24
 800d23a:	f7ff ff19 	bl	800d070 <__exponent>
 800d23e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d240:	1813      	adds	r3, r2, r0
 800d242:	2a01      	cmp	r2, #1
 800d244:	4681      	mov	r9, r0
 800d246:	6123      	str	r3, [r4, #16]
 800d248:	dc02      	bgt.n	800d250 <_printf_float+0x164>
 800d24a:	6822      	ldr	r2, [r4, #0]
 800d24c:	07d2      	lsls	r2, r2, #31
 800d24e:	d501      	bpl.n	800d254 <_printf_float+0x168>
 800d250:	3301      	adds	r3, #1
 800d252:	6123      	str	r3, [r4, #16]
 800d254:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d09c      	beq.n	800d196 <_printf_float+0xaa>
 800d25c:	232d      	movs	r3, #45	; 0x2d
 800d25e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d262:	e798      	b.n	800d196 <_printf_float+0xaa>
 800d264:	9a06      	ldr	r2, [sp, #24]
 800d266:	2a47      	cmp	r2, #71	; 0x47
 800d268:	d1be      	bne.n	800d1e8 <_printf_float+0xfc>
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d1bc      	bne.n	800d1e8 <_printf_float+0xfc>
 800d26e:	2301      	movs	r3, #1
 800d270:	e7b9      	b.n	800d1e6 <_printf_float+0xfa>
 800d272:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d276:	d118      	bne.n	800d2aa <_printf_float+0x1be>
 800d278:	2900      	cmp	r1, #0
 800d27a:	6863      	ldr	r3, [r4, #4]
 800d27c:	dd0b      	ble.n	800d296 <_printf_float+0x1aa>
 800d27e:	6121      	str	r1, [r4, #16]
 800d280:	b913      	cbnz	r3, 800d288 <_printf_float+0x19c>
 800d282:	6822      	ldr	r2, [r4, #0]
 800d284:	07d0      	lsls	r0, r2, #31
 800d286:	d502      	bpl.n	800d28e <_printf_float+0x1a2>
 800d288:	3301      	adds	r3, #1
 800d28a:	440b      	add	r3, r1
 800d28c:	6123      	str	r3, [r4, #16]
 800d28e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d290:	f04f 0900 	mov.w	r9, #0
 800d294:	e7de      	b.n	800d254 <_printf_float+0x168>
 800d296:	b913      	cbnz	r3, 800d29e <_printf_float+0x1b2>
 800d298:	6822      	ldr	r2, [r4, #0]
 800d29a:	07d2      	lsls	r2, r2, #31
 800d29c:	d501      	bpl.n	800d2a2 <_printf_float+0x1b6>
 800d29e:	3302      	adds	r3, #2
 800d2a0:	e7f4      	b.n	800d28c <_printf_float+0x1a0>
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e7f2      	b.n	800d28c <_printf_float+0x1a0>
 800d2a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d2aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2ac:	4299      	cmp	r1, r3
 800d2ae:	db05      	blt.n	800d2bc <_printf_float+0x1d0>
 800d2b0:	6823      	ldr	r3, [r4, #0]
 800d2b2:	6121      	str	r1, [r4, #16]
 800d2b4:	07d8      	lsls	r0, r3, #31
 800d2b6:	d5ea      	bpl.n	800d28e <_printf_float+0x1a2>
 800d2b8:	1c4b      	adds	r3, r1, #1
 800d2ba:	e7e7      	b.n	800d28c <_printf_float+0x1a0>
 800d2bc:	2900      	cmp	r1, #0
 800d2be:	bfd4      	ite	le
 800d2c0:	f1c1 0202 	rsble	r2, r1, #2
 800d2c4:	2201      	movgt	r2, #1
 800d2c6:	4413      	add	r3, r2
 800d2c8:	e7e0      	b.n	800d28c <_printf_float+0x1a0>
 800d2ca:	6823      	ldr	r3, [r4, #0]
 800d2cc:	055a      	lsls	r2, r3, #21
 800d2ce:	d407      	bmi.n	800d2e0 <_printf_float+0x1f4>
 800d2d0:	6923      	ldr	r3, [r4, #16]
 800d2d2:	4642      	mov	r2, r8
 800d2d4:	4631      	mov	r1, r6
 800d2d6:	4628      	mov	r0, r5
 800d2d8:	47b8      	blx	r7
 800d2da:	3001      	adds	r0, #1
 800d2dc:	d12c      	bne.n	800d338 <_printf_float+0x24c>
 800d2de:	e764      	b.n	800d1aa <_printf_float+0xbe>
 800d2e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d2e4:	f240 80e0 	bls.w	800d4a8 <_printf_float+0x3bc>
 800d2e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	f7f3 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d034      	beq.n	800d362 <_printf_float+0x276>
 800d2f8:	4a37      	ldr	r2, [pc, #220]	; (800d3d8 <_printf_float+0x2ec>)
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	4631      	mov	r1, r6
 800d2fe:	4628      	mov	r0, r5
 800d300:	47b8      	blx	r7
 800d302:	3001      	adds	r0, #1
 800d304:	f43f af51 	beq.w	800d1aa <_printf_float+0xbe>
 800d308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d30c:	429a      	cmp	r2, r3
 800d30e:	db02      	blt.n	800d316 <_printf_float+0x22a>
 800d310:	6823      	ldr	r3, [r4, #0]
 800d312:	07d8      	lsls	r0, r3, #31
 800d314:	d510      	bpl.n	800d338 <_printf_float+0x24c>
 800d316:	ee18 3a10 	vmov	r3, s16
 800d31a:	4652      	mov	r2, sl
 800d31c:	4631      	mov	r1, r6
 800d31e:	4628      	mov	r0, r5
 800d320:	47b8      	blx	r7
 800d322:	3001      	adds	r0, #1
 800d324:	f43f af41 	beq.w	800d1aa <_printf_float+0xbe>
 800d328:	f04f 0800 	mov.w	r8, #0
 800d32c:	f104 091a 	add.w	r9, r4, #26
 800d330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d332:	3b01      	subs	r3, #1
 800d334:	4543      	cmp	r3, r8
 800d336:	dc09      	bgt.n	800d34c <_printf_float+0x260>
 800d338:	6823      	ldr	r3, [r4, #0]
 800d33a:	079b      	lsls	r3, r3, #30
 800d33c:	f100 8107 	bmi.w	800d54e <_printf_float+0x462>
 800d340:	68e0      	ldr	r0, [r4, #12]
 800d342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d344:	4298      	cmp	r0, r3
 800d346:	bfb8      	it	lt
 800d348:	4618      	movlt	r0, r3
 800d34a:	e730      	b.n	800d1ae <_printf_float+0xc2>
 800d34c:	2301      	movs	r3, #1
 800d34e:	464a      	mov	r2, r9
 800d350:	4631      	mov	r1, r6
 800d352:	4628      	mov	r0, r5
 800d354:	47b8      	blx	r7
 800d356:	3001      	adds	r0, #1
 800d358:	f43f af27 	beq.w	800d1aa <_printf_float+0xbe>
 800d35c:	f108 0801 	add.w	r8, r8, #1
 800d360:	e7e6      	b.n	800d330 <_printf_float+0x244>
 800d362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d364:	2b00      	cmp	r3, #0
 800d366:	dc39      	bgt.n	800d3dc <_printf_float+0x2f0>
 800d368:	4a1b      	ldr	r2, [pc, #108]	; (800d3d8 <_printf_float+0x2ec>)
 800d36a:	2301      	movs	r3, #1
 800d36c:	4631      	mov	r1, r6
 800d36e:	4628      	mov	r0, r5
 800d370:	47b8      	blx	r7
 800d372:	3001      	adds	r0, #1
 800d374:	f43f af19 	beq.w	800d1aa <_printf_float+0xbe>
 800d378:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d37c:	4313      	orrs	r3, r2
 800d37e:	d102      	bne.n	800d386 <_printf_float+0x29a>
 800d380:	6823      	ldr	r3, [r4, #0]
 800d382:	07d9      	lsls	r1, r3, #31
 800d384:	d5d8      	bpl.n	800d338 <_printf_float+0x24c>
 800d386:	ee18 3a10 	vmov	r3, s16
 800d38a:	4652      	mov	r2, sl
 800d38c:	4631      	mov	r1, r6
 800d38e:	4628      	mov	r0, r5
 800d390:	47b8      	blx	r7
 800d392:	3001      	adds	r0, #1
 800d394:	f43f af09 	beq.w	800d1aa <_printf_float+0xbe>
 800d398:	f04f 0900 	mov.w	r9, #0
 800d39c:	f104 0a1a 	add.w	sl, r4, #26
 800d3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3a2:	425b      	negs	r3, r3
 800d3a4:	454b      	cmp	r3, r9
 800d3a6:	dc01      	bgt.n	800d3ac <_printf_float+0x2c0>
 800d3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3aa:	e792      	b.n	800d2d2 <_printf_float+0x1e6>
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	4652      	mov	r2, sl
 800d3b0:	4631      	mov	r1, r6
 800d3b2:	4628      	mov	r0, r5
 800d3b4:	47b8      	blx	r7
 800d3b6:	3001      	adds	r0, #1
 800d3b8:	f43f aef7 	beq.w	800d1aa <_printf_float+0xbe>
 800d3bc:	f109 0901 	add.w	r9, r9, #1
 800d3c0:	e7ee      	b.n	800d3a0 <_printf_float+0x2b4>
 800d3c2:	bf00      	nop
 800d3c4:	7fefffff 	.word	0x7fefffff
 800d3c8:	08013958 	.word	0x08013958
 800d3cc:	0801395c 	.word	0x0801395c
 800d3d0:	08013960 	.word	0x08013960
 800d3d4:	08013964 	.word	0x08013964
 800d3d8:	08013cf0 	.word	0x08013cf0
 800d3dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	bfa8      	it	ge
 800d3e4:	461a      	movge	r2, r3
 800d3e6:	2a00      	cmp	r2, #0
 800d3e8:	4691      	mov	r9, r2
 800d3ea:	dc37      	bgt.n	800d45c <_printf_float+0x370>
 800d3ec:	f04f 0b00 	mov.w	fp, #0
 800d3f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d3f4:	f104 021a 	add.w	r2, r4, #26
 800d3f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d3fa:	9305      	str	r3, [sp, #20]
 800d3fc:	eba3 0309 	sub.w	r3, r3, r9
 800d400:	455b      	cmp	r3, fp
 800d402:	dc33      	bgt.n	800d46c <_printf_float+0x380>
 800d404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d408:	429a      	cmp	r2, r3
 800d40a:	db3b      	blt.n	800d484 <_printf_float+0x398>
 800d40c:	6823      	ldr	r3, [r4, #0]
 800d40e:	07da      	lsls	r2, r3, #31
 800d410:	d438      	bmi.n	800d484 <_printf_float+0x398>
 800d412:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d416:	eba2 0903 	sub.w	r9, r2, r3
 800d41a:	9b05      	ldr	r3, [sp, #20]
 800d41c:	1ad2      	subs	r2, r2, r3
 800d41e:	4591      	cmp	r9, r2
 800d420:	bfa8      	it	ge
 800d422:	4691      	movge	r9, r2
 800d424:	f1b9 0f00 	cmp.w	r9, #0
 800d428:	dc35      	bgt.n	800d496 <_printf_float+0x3aa>
 800d42a:	f04f 0800 	mov.w	r8, #0
 800d42e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d432:	f104 0a1a 	add.w	sl, r4, #26
 800d436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d43a:	1a9b      	subs	r3, r3, r2
 800d43c:	eba3 0309 	sub.w	r3, r3, r9
 800d440:	4543      	cmp	r3, r8
 800d442:	f77f af79 	ble.w	800d338 <_printf_float+0x24c>
 800d446:	2301      	movs	r3, #1
 800d448:	4652      	mov	r2, sl
 800d44a:	4631      	mov	r1, r6
 800d44c:	4628      	mov	r0, r5
 800d44e:	47b8      	blx	r7
 800d450:	3001      	adds	r0, #1
 800d452:	f43f aeaa 	beq.w	800d1aa <_printf_float+0xbe>
 800d456:	f108 0801 	add.w	r8, r8, #1
 800d45a:	e7ec      	b.n	800d436 <_printf_float+0x34a>
 800d45c:	4613      	mov	r3, r2
 800d45e:	4631      	mov	r1, r6
 800d460:	4642      	mov	r2, r8
 800d462:	4628      	mov	r0, r5
 800d464:	47b8      	blx	r7
 800d466:	3001      	adds	r0, #1
 800d468:	d1c0      	bne.n	800d3ec <_printf_float+0x300>
 800d46a:	e69e      	b.n	800d1aa <_printf_float+0xbe>
 800d46c:	2301      	movs	r3, #1
 800d46e:	4631      	mov	r1, r6
 800d470:	4628      	mov	r0, r5
 800d472:	9205      	str	r2, [sp, #20]
 800d474:	47b8      	blx	r7
 800d476:	3001      	adds	r0, #1
 800d478:	f43f ae97 	beq.w	800d1aa <_printf_float+0xbe>
 800d47c:	9a05      	ldr	r2, [sp, #20]
 800d47e:	f10b 0b01 	add.w	fp, fp, #1
 800d482:	e7b9      	b.n	800d3f8 <_printf_float+0x30c>
 800d484:	ee18 3a10 	vmov	r3, s16
 800d488:	4652      	mov	r2, sl
 800d48a:	4631      	mov	r1, r6
 800d48c:	4628      	mov	r0, r5
 800d48e:	47b8      	blx	r7
 800d490:	3001      	adds	r0, #1
 800d492:	d1be      	bne.n	800d412 <_printf_float+0x326>
 800d494:	e689      	b.n	800d1aa <_printf_float+0xbe>
 800d496:	9a05      	ldr	r2, [sp, #20]
 800d498:	464b      	mov	r3, r9
 800d49a:	4442      	add	r2, r8
 800d49c:	4631      	mov	r1, r6
 800d49e:	4628      	mov	r0, r5
 800d4a0:	47b8      	blx	r7
 800d4a2:	3001      	adds	r0, #1
 800d4a4:	d1c1      	bne.n	800d42a <_printf_float+0x33e>
 800d4a6:	e680      	b.n	800d1aa <_printf_float+0xbe>
 800d4a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4aa:	2a01      	cmp	r2, #1
 800d4ac:	dc01      	bgt.n	800d4b2 <_printf_float+0x3c6>
 800d4ae:	07db      	lsls	r3, r3, #31
 800d4b0:	d53a      	bpl.n	800d528 <_printf_float+0x43c>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	4642      	mov	r2, r8
 800d4b6:	4631      	mov	r1, r6
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	47b8      	blx	r7
 800d4bc:	3001      	adds	r0, #1
 800d4be:	f43f ae74 	beq.w	800d1aa <_printf_float+0xbe>
 800d4c2:	ee18 3a10 	vmov	r3, s16
 800d4c6:	4652      	mov	r2, sl
 800d4c8:	4631      	mov	r1, r6
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	47b8      	blx	r7
 800d4ce:	3001      	adds	r0, #1
 800d4d0:	f43f ae6b 	beq.w	800d1aa <_printf_float+0xbe>
 800d4d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d4d8:	2200      	movs	r2, #0
 800d4da:	2300      	movs	r3, #0
 800d4dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d4e0:	f7f3 faf2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4e4:	b9d8      	cbnz	r0, 800d51e <_printf_float+0x432>
 800d4e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d4ea:	f108 0201 	add.w	r2, r8, #1
 800d4ee:	4631      	mov	r1, r6
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	47b8      	blx	r7
 800d4f4:	3001      	adds	r0, #1
 800d4f6:	d10e      	bne.n	800d516 <_printf_float+0x42a>
 800d4f8:	e657      	b.n	800d1aa <_printf_float+0xbe>
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	4652      	mov	r2, sl
 800d4fe:	4631      	mov	r1, r6
 800d500:	4628      	mov	r0, r5
 800d502:	47b8      	blx	r7
 800d504:	3001      	adds	r0, #1
 800d506:	f43f ae50 	beq.w	800d1aa <_printf_float+0xbe>
 800d50a:	f108 0801 	add.w	r8, r8, #1
 800d50e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d510:	3b01      	subs	r3, #1
 800d512:	4543      	cmp	r3, r8
 800d514:	dcf1      	bgt.n	800d4fa <_printf_float+0x40e>
 800d516:	464b      	mov	r3, r9
 800d518:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d51c:	e6da      	b.n	800d2d4 <_printf_float+0x1e8>
 800d51e:	f04f 0800 	mov.w	r8, #0
 800d522:	f104 0a1a 	add.w	sl, r4, #26
 800d526:	e7f2      	b.n	800d50e <_printf_float+0x422>
 800d528:	2301      	movs	r3, #1
 800d52a:	4642      	mov	r2, r8
 800d52c:	e7df      	b.n	800d4ee <_printf_float+0x402>
 800d52e:	2301      	movs	r3, #1
 800d530:	464a      	mov	r2, r9
 800d532:	4631      	mov	r1, r6
 800d534:	4628      	mov	r0, r5
 800d536:	47b8      	blx	r7
 800d538:	3001      	adds	r0, #1
 800d53a:	f43f ae36 	beq.w	800d1aa <_printf_float+0xbe>
 800d53e:	f108 0801 	add.w	r8, r8, #1
 800d542:	68e3      	ldr	r3, [r4, #12]
 800d544:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d546:	1a5b      	subs	r3, r3, r1
 800d548:	4543      	cmp	r3, r8
 800d54a:	dcf0      	bgt.n	800d52e <_printf_float+0x442>
 800d54c:	e6f8      	b.n	800d340 <_printf_float+0x254>
 800d54e:	f04f 0800 	mov.w	r8, #0
 800d552:	f104 0919 	add.w	r9, r4, #25
 800d556:	e7f4      	b.n	800d542 <_printf_float+0x456>

0800d558 <_printf_common>:
 800d558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d55c:	4616      	mov	r6, r2
 800d55e:	4699      	mov	r9, r3
 800d560:	688a      	ldr	r2, [r1, #8]
 800d562:	690b      	ldr	r3, [r1, #16]
 800d564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d568:	4293      	cmp	r3, r2
 800d56a:	bfb8      	it	lt
 800d56c:	4613      	movlt	r3, r2
 800d56e:	6033      	str	r3, [r6, #0]
 800d570:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d574:	4607      	mov	r7, r0
 800d576:	460c      	mov	r4, r1
 800d578:	b10a      	cbz	r2, 800d57e <_printf_common+0x26>
 800d57a:	3301      	adds	r3, #1
 800d57c:	6033      	str	r3, [r6, #0]
 800d57e:	6823      	ldr	r3, [r4, #0]
 800d580:	0699      	lsls	r1, r3, #26
 800d582:	bf42      	ittt	mi
 800d584:	6833      	ldrmi	r3, [r6, #0]
 800d586:	3302      	addmi	r3, #2
 800d588:	6033      	strmi	r3, [r6, #0]
 800d58a:	6825      	ldr	r5, [r4, #0]
 800d58c:	f015 0506 	ands.w	r5, r5, #6
 800d590:	d106      	bne.n	800d5a0 <_printf_common+0x48>
 800d592:	f104 0a19 	add.w	sl, r4, #25
 800d596:	68e3      	ldr	r3, [r4, #12]
 800d598:	6832      	ldr	r2, [r6, #0]
 800d59a:	1a9b      	subs	r3, r3, r2
 800d59c:	42ab      	cmp	r3, r5
 800d59e:	dc26      	bgt.n	800d5ee <_printf_common+0x96>
 800d5a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5a4:	1e13      	subs	r3, r2, #0
 800d5a6:	6822      	ldr	r2, [r4, #0]
 800d5a8:	bf18      	it	ne
 800d5aa:	2301      	movne	r3, #1
 800d5ac:	0692      	lsls	r2, r2, #26
 800d5ae:	d42b      	bmi.n	800d608 <_printf_common+0xb0>
 800d5b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5b4:	4649      	mov	r1, r9
 800d5b6:	4638      	mov	r0, r7
 800d5b8:	47c0      	blx	r8
 800d5ba:	3001      	adds	r0, #1
 800d5bc:	d01e      	beq.n	800d5fc <_printf_common+0xa4>
 800d5be:	6823      	ldr	r3, [r4, #0]
 800d5c0:	6922      	ldr	r2, [r4, #16]
 800d5c2:	f003 0306 	and.w	r3, r3, #6
 800d5c6:	2b04      	cmp	r3, #4
 800d5c8:	bf02      	ittt	eq
 800d5ca:	68e5      	ldreq	r5, [r4, #12]
 800d5cc:	6833      	ldreq	r3, [r6, #0]
 800d5ce:	1aed      	subeq	r5, r5, r3
 800d5d0:	68a3      	ldr	r3, [r4, #8]
 800d5d2:	bf0c      	ite	eq
 800d5d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5d8:	2500      	movne	r5, #0
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	bfc4      	itt	gt
 800d5de:	1a9b      	subgt	r3, r3, r2
 800d5e0:	18ed      	addgt	r5, r5, r3
 800d5e2:	2600      	movs	r6, #0
 800d5e4:	341a      	adds	r4, #26
 800d5e6:	42b5      	cmp	r5, r6
 800d5e8:	d11a      	bne.n	800d620 <_printf_common+0xc8>
 800d5ea:	2000      	movs	r0, #0
 800d5ec:	e008      	b.n	800d600 <_printf_common+0xa8>
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	4652      	mov	r2, sl
 800d5f2:	4649      	mov	r1, r9
 800d5f4:	4638      	mov	r0, r7
 800d5f6:	47c0      	blx	r8
 800d5f8:	3001      	adds	r0, #1
 800d5fa:	d103      	bne.n	800d604 <_printf_common+0xac>
 800d5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d604:	3501      	adds	r5, #1
 800d606:	e7c6      	b.n	800d596 <_printf_common+0x3e>
 800d608:	18e1      	adds	r1, r4, r3
 800d60a:	1c5a      	adds	r2, r3, #1
 800d60c:	2030      	movs	r0, #48	; 0x30
 800d60e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d612:	4422      	add	r2, r4
 800d614:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d618:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d61c:	3302      	adds	r3, #2
 800d61e:	e7c7      	b.n	800d5b0 <_printf_common+0x58>
 800d620:	2301      	movs	r3, #1
 800d622:	4622      	mov	r2, r4
 800d624:	4649      	mov	r1, r9
 800d626:	4638      	mov	r0, r7
 800d628:	47c0      	blx	r8
 800d62a:	3001      	adds	r0, #1
 800d62c:	d0e6      	beq.n	800d5fc <_printf_common+0xa4>
 800d62e:	3601      	adds	r6, #1
 800d630:	e7d9      	b.n	800d5e6 <_printf_common+0x8e>
	...

0800d634 <_printf_i>:
 800d634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d638:	7e0f      	ldrb	r7, [r1, #24]
 800d63a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d63c:	2f78      	cmp	r7, #120	; 0x78
 800d63e:	4691      	mov	r9, r2
 800d640:	4680      	mov	r8, r0
 800d642:	460c      	mov	r4, r1
 800d644:	469a      	mov	sl, r3
 800d646:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d64a:	d807      	bhi.n	800d65c <_printf_i+0x28>
 800d64c:	2f62      	cmp	r7, #98	; 0x62
 800d64e:	d80a      	bhi.n	800d666 <_printf_i+0x32>
 800d650:	2f00      	cmp	r7, #0
 800d652:	f000 80d4 	beq.w	800d7fe <_printf_i+0x1ca>
 800d656:	2f58      	cmp	r7, #88	; 0x58
 800d658:	f000 80c0 	beq.w	800d7dc <_printf_i+0x1a8>
 800d65c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d660:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d664:	e03a      	b.n	800d6dc <_printf_i+0xa8>
 800d666:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d66a:	2b15      	cmp	r3, #21
 800d66c:	d8f6      	bhi.n	800d65c <_printf_i+0x28>
 800d66e:	a101      	add	r1, pc, #4	; (adr r1, 800d674 <_printf_i+0x40>)
 800d670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d674:	0800d6cd 	.word	0x0800d6cd
 800d678:	0800d6e1 	.word	0x0800d6e1
 800d67c:	0800d65d 	.word	0x0800d65d
 800d680:	0800d65d 	.word	0x0800d65d
 800d684:	0800d65d 	.word	0x0800d65d
 800d688:	0800d65d 	.word	0x0800d65d
 800d68c:	0800d6e1 	.word	0x0800d6e1
 800d690:	0800d65d 	.word	0x0800d65d
 800d694:	0800d65d 	.word	0x0800d65d
 800d698:	0800d65d 	.word	0x0800d65d
 800d69c:	0800d65d 	.word	0x0800d65d
 800d6a0:	0800d7e5 	.word	0x0800d7e5
 800d6a4:	0800d70d 	.word	0x0800d70d
 800d6a8:	0800d79f 	.word	0x0800d79f
 800d6ac:	0800d65d 	.word	0x0800d65d
 800d6b0:	0800d65d 	.word	0x0800d65d
 800d6b4:	0800d807 	.word	0x0800d807
 800d6b8:	0800d65d 	.word	0x0800d65d
 800d6bc:	0800d70d 	.word	0x0800d70d
 800d6c0:	0800d65d 	.word	0x0800d65d
 800d6c4:	0800d65d 	.word	0x0800d65d
 800d6c8:	0800d7a7 	.word	0x0800d7a7
 800d6cc:	682b      	ldr	r3, [r5, #0]
 800d6ce:	1d1a      	adds	r2, r3, #4
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	602a      	str	r2, [r5, #0]
 800d6d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e09f      	b.n	800d820 <_printf_i+0x1ec>
 800d6e0:	6820      	ldr	r0, [r4, #0]
 800d6e2:	682b      	ldr	r3, [r5, #0]
 800d6e4:	0607      	lsls	r7, r0, #24
 800d6e6:	f103 0104 	add.w	r1, r3, #4
 800d6ea:	6029      	str	r1, [r5, #0]
 800d6ec:	d501      	bpl.n	800d6f2 <_printf_i+0xbe>
 800d6ee:	681e      	ldr	r6, [r3, #0]
 800d6f0:	e003      	b.n	800d6fa <_printf_i+0xc6>
 800d6f2:	0646      	lsls	r6, r0, #25
 800d6f4:	d5fb      	bpl.n	800d6ee <_printf_i+0xba>
 800d6f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d6fa:	2e00      	cmp	r6, #0
 800d6fc:	da03      	bge.n	800d706 <_printf_i+0xd2>
 800d6fe:	232d      	movs	r3, #45	; 0x2d
 800d700:	4276      	negs	r6, r6
 800d702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d706:	485a      	ldr	r0, [pc, #360]	; (800d870 <_printf_i+0x23c>)
 800d708:	230a      	movs	r3, #10
 800d70a:	e012      	b.n	800d732 <_printf_i+0xfe>
 800d70c:	682b      	ldr	r3, [r5, #0]
 800d70e:	6820      	ldr	r0, [r4, #0]
 800d710:	1d19      	adds	r1, r3, #4
 800d712:	6029      	str	r1, [r5, #0]
 800d714:	0605      	lsls	r5, r0, #24
 800d716:	d501      	bpl.n	800d71c <_printf_i+0xe8>
 800d718:	681e      	ldr	r6, [r3, #0]
 800d71a:	e002      	b.n	800d722 <_printf_i+0xee>
 800d71c:	0641      	lsls	r1, r0, #25
 800d71e:	d5fb      	bpl.n	800d718 <_printf_i+0xe4>
 800d720:	881e      	ldrh	r6, [r3, #0]
 800d722:	4853      	ldr	r0, [pc, #332]	; (800d870 <_printf_i+0x23c>)
 800d724:	2f6f      	cmp	r7, #111	; 0x6f
 800d726:	bf0c      	ite	eq
 800d728:	2308      	moveq	r3, #8
 800d72a:	230a      	movne	r3, #10
 800d72c:	2100      	movs	r1, #0
 800d72e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d732:	6865      	ldr	r5, [r4, #4]
 800d734:	60a5      	str	r5, [r4, #8]
 800d736:	2d00      	cmp	r5, #0
 800d738:	bfa2      	ittt	ge
 800d73a:	6821      	ldrge	r1, [r4, #0]
 800d73c:	f021 0104 	bicge.w	r1, r1, #4
 800d740:	6021      	strge	r1, [r4, #0]
 800d742:	b90e      	cbnz	r6, 800d748 <_printf_i+0x114>
 800d744:	2d00      	cmp	r5, #0
 800d746:	d04b      	beq.n	800d7e0 <_printf_i+0x1ac>
 800d748:	4615      	mov	r5, r2
 800d74a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d74e:	fb03 6711 	mls	r7, r3, r1, r6
 800d752:	5dc7      	ldrb	r7, [r0, r7]
 800d754:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d758:	4637      	mov	r7, r6
 800d75a:	42bb      	cmp	r3, r7
 800d75c:	460e      	mov	r6, r1
 800d75e:	d9f4      	bls.n	800d74a <_printf_i+0x116>
 800d760:	2b08      	cmp	r3, #8
 800d762:	d10b      	bne.n	800d77c <_printf_i+0x148>
 800d764:	6823      	ldr	r3, [r4, #0]
 800d766:	07de      	lsls	r6, r3, #31
 800d768:	d508      	bpl.n	800d77c <_printf_i+0x148>
 800d76a:	6923      	ldr	r3, [r4, #16]
 800d76c:	6861      	ldr	r1, [r4, #4]
 800d76e:	4299      	cmp	r1, r3
 800d770:	bfde      	ittt	le
 800d772:	2330      	movle	r3, #48	; 0x30
 800d774:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d778:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d77c:	1b52      	subs	r2, r2, r5
 800d77e:	6122      	str	r2, [r4, #16]
 800d780:	f8cd a000 	str.w	sl, [sp]
 800d784:	464b      	mov	r3, r9
 800d786:	aa03      	add	r2, sp, #12
 800d788:	4621      	mov	r1, r4
 800d78a:	4640      	mov	r0, r8
 800d78c:	f7ff fee4 	bl	800d558 <_printf_common>
 800d790:	3001      	adds	r0, #1
 800d792:	d14a      	bne.n	800d82a <_printf_i+0x1f6>
 800d794:	f04f 30ff 	mov.w	r0, #4294967295
 800d798:	b004      	add	sp, #16
 800d79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d79e:	6823      	ldr	r3, [r4, #0]
 800d7a0:	f043 0320 	orr.w	r3, r3, #32
 800d7a4:	6023      	str	r3, [r4, #0]
 800d7a6:	4833      	ldr	r0, [pc, #204]	; (800d874 <_printf_i+0x240>)
 800d7a8:	2778      	movs	r7, #120	; 0x78
 800d7aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d7ae:	6823      	ldr	r3, [r4, #0]
 800d7b0:	6829      	ldr	r1, [r5, #0]
 800d7b2:	061f      	lsls	r7, r3, #24
 800d7b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800d7b8:	d402      	bmi.n	800d7c0 <_printf_i+0x18c>
 800d7ba:	065f      	lsls	r7, r3, #25
 800d7bc:	bf48      	it	mi
 800d7be:	b2b6      	uxthmi	r6, r6
 800d7c0:	07df      	lsls	r7, r3, #31
 800d7c2:	bf48      	it	mi
 800d7c4:	f043 0320 	orrmi.w	r3, r3, #32
 800d7c8:	6029      	str	r1, [r5, #0]
 800d7ca:	bf48      	it	mi
 800d7cc:	6023      	strmi	r3, [r4, #0]
 800d7ce:	b91e      	cbnz	r6, 800d7d8 <_printf_i+0x1a4>
 800d7d0:	6823      	ldr	r3, [r4, #0]
 800d7d2:	f023 0320 	bic.w	r3, r3, #32
 800d7d6:	6023      	str	r3, [r4, #0]
 800d7d8:	2310      	movs	r3, #16
 800d7da:	e7a7      	b.n	800d72c <_printf_i+0xf8>
 800d7dc:	4824      	ldr	r0, [pc, #144]	; (800d870 <_printf_i+0x23c>)
 800d7de:	e7e4      	b.n	800d7aa <_printf_i+0x176>
 800d7e0:	4615      	mov	r5, r2
 800d7e2:	e7bd      	b.n	800d760 <_printf_i+0x12c>
 800d7e4:	682b      	ldr	r3, [r5, #0]
 800d7e6:	6826      	ldr	r6, [r4, #0]
 800d7e8:	6961      	ldr	r1, [r4, #20]
 800d7ea:	1d18      	adds	r0, r3, #4
 800d7ec:	6028      	str	r0, [r5, #0]
 800d7ee:	0635      	lsls	r5, r6, #24
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	d501      	bpl.n	800d7f8 <_printf_i+0x1c4>
 800d7f4:	6019      	str	r1, [r3, #0]
 800d7f6:	e002      	b.n	800d7fe <_printf_i+0x1ca>
 800d7f8:	0670      	lsls	r0, r6, #25
 800d7fa:	d5fb      	bpl.n	800d7f4 <_printf_i+0x1c0>
 800d7fc:	8019      	strh	r1, [r3, #0]
 800d7fe:	2300      	movs	r3, #0
 800d800:	6123      	str	r3, [r4, #16]
 800d802:	4615      	mov	r5, r2
 800d804:	e7bc      	b.n	800d780 <_printf_i+0x14c>
 800d806:	682b      	ldr	r3, [r5, #0]
 800d808:	1d1a      	adds	r2, r3, #4
 800d80a:	602a      	str	r2, [r5, #0]
 800d80c:	681d      	ldr	r5, [r3, #0]
 800d80e:	6862      	ldr	r2, [r4, #4]
 800d810:	2100      	movs	r1, #0
 800d812:	4628      	mov	r0, r5
 800d814:	f7f2 fcdc 	bl	80001d0 <memchr>
 800d818:	b108      	cbz	r0, 800d81e <_printf_i+0x1ea>
 800d81a:	1b40      	subs	r0, r0, r5
 800d81c:	6060      	str	r0, [r4, #4]
 800d81e:	6863      	ldr	r3, [r4, #4]
 800d820:	6123      	str	r3, [r4, #16]
 800d822:	2300      	movs	r3, #0
 800d824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d828:	e7aa      	b.n	800d780 <_printf_i+0x14c>
 800d82a:	6923      	ldr	r3, [r4, #16]
 800d82c:	462a      	mov	r2, r5
 800d82e:	4649      	mov	r1, r9
 800d830:	4640      	mov	r0, r8
 800d832:	47d0      	blx	sl
 800d834:	3001      	adds	r0, #1
 800d836:	d0ad      	beq.n	800d794 <_printf_i+0x160>
 800d838:	6823      	ldr	r3, [r4, #0]
 800d83a:	079b      	lsls	r3, r3, #30
 800d83c:	d413      	bmi.n	800d866 <_printf_i+0x232>
 800d83e:	68e0      	ldr	r0, [r4, #12]
 800d840:	9b03      	ldr	r3, [sp, #12]
 800d842:	4298      	cmp	r0, r3
 800d844:	bfb8      	it	lt
 800d846:	4618      	movlt	r0, r3
 800d848:	e7a6      	b.n	800d798 <_printf_i+0x164>
 800d84a:	2301      	movs	r3, #1
 800d84c:	4632      	mov	r2, r6
 800d84e:	4649      	mov	r1, r9
 800d850:	4640      	mov	r0, r8
 800d852:	47d0      	blx	sl
 800d854:	3001      	adds	r0, #1
 800d856:	d09d      	beq.n	800d794 <_printf_i+0x160>
 800d858:	3501      	adds	r5, #1
 800d85a:	68e3      	ldr	r3, [r4, #12]
 800d85c:	9903      	ldr	r1, [sp, #12]
 800d85e:	1a5b      	subs	r3, r3, r1
 800d860:	42ab      	cmp	r3, r5
 800d862:	dcf2      	bgt.n	800d84a <_printf_i+0x216>
 800d864:	e7eb      	b.n	800d83e <_printf_i+0x20a>
 800d866:	2500      	movs	r5, #0
 800d868:	f104 0619 	add.w	r6, r4, #25
 800d86c:	e7f5      	b.n	800d85a <_printf_i+0x226>
 800d86e:	bf00      	nop
 800d870:	08013968 	.word	0x08013968
 800d874:	08013979 	.word	0x08013979

0800d878 <_scanf_float>:
 800d878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87c:	b087      	sub	sp, #28
 800d87e:	4617      	mov	r7, r2
 800d880:	9303      	str	r3, [sp, #12]
 800d882:	688b      	ldr	r3, [r1, #8]
 800d884:	1e5a      	subs	r2, r3, #1
 800d886:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d88a:	bf83      	ittte	hi
 800d88c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d890:	195b      	addhi	r3, r3, r5
 800d892:	9302      	strhi	r3, [sp, #8]
 800d894:	2300      	movls	r3, #0
 800d896:	bf86      	itte	hi
 800d898:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d89c:	608b      	strhi	r3, [r1, #8]
 800d89e:	9302      	strls	r3, [sp, #8]
 800d8a0:	680b      	ldr	r3, [r1, #0]
 800d8a2:	468b      	mov	fp, r1
 800d8a4:	2500      	movs	r5, #0
 800d8a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d8aa:	f84b 3b1c 	str.w	r3, [fp], #28
 800d8ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d8b2:	4680      	mov	r8, r0
 800d8b4:	460c      	mov	r4, r1
 800d8b6:	465e      	mov	r6, fp
 800d8b8:	46aa      	mov	sl, r5
 800d8ba:	46a9      	mov	r9, r5
 800d8bc:	9501      	str	r5, [sp, #4]
 800d8be:	68a2      	ldr	r2, [r4, #8]
 800d8c0:	b152      	cbz	r2, 800d8d8 <_scanf_float+0x60>
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	2b4e      	cmp	r3, #78	; 0x4e
 800d8c8:	d864      	bhi.n	800d994 <_scanf_float+0x11c>
 800d8ca:	2b40      	cmp	r3, #64	; 0x40
 800d8cc:	d83c      	bhi.n	800d948 <_scanf_float+0xd0>
 800d8ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d8d2:	b2c8      	uxtb	r0, r1
 800d8d4:	280e      	cmp	r0, #14
 800d8d6:	d93a      	bls.n	800d94e <_scanf_float+0xd6>
 800d8d8:	f1b9 0f00 	cmp.w	r9, #0
 800d8dc:	d003      	beq.n	800d8e6 <_scanf_float+0x6e>
 800d8de:	6823      	ldr	r3, [r4, #0]
 800d8e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8e4:	6023      	str	r3, [r4, #0]
 800d8e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d8ea:	f1ba 0f01 	cmp.w	sl, #1
 800d8ee:	f200 8113 	bhi.w	800db18 <_scanf_float+0x2a0>
 800d8f2:	455e      	cmp	r6, fp
 800d8f4:	f200 8105 	bhi.w	800db02 <_scanf_float+0x28a>
 800d8f8:	2501      	movs	r5, #1
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	b007      	add	sp, #28
 800d8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d902:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d906:	2a0d      	cmp	r2, #13
 800d908:	d8e6      	bhi.n	800d8d8 <_scanf_float+0x60>
 800d90a:	a101      	add	r1, pc, #4	; (adr r1, 800d910 <_scanf_float+0x98>)
 800d90c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d910:	0800da4f 	.word	0x0800da4f
 800d914:	0800d8d9 	.word	0x0800d8d9
 800d918:	0800d8d9 	.word	0x0800d8d9
 800d91c:	0800d8d9 	.word	0x0800d8d9
 800d920:	0800daaf 	.word	0x0800daaf
 800d924:	0800da87 	.word	0x0800da87
 800d928:	0800d8d9 	.word	0x0800d8d9
 800d92c:	0800d8d9 	.word	0x0800d8d9
 800d930:	0800da5d 	.word	0x0800da5d
 800d934:	0800d8d9 	.word	0x0800d8d9
 800d938:	0800d8d9 	.word	0x0800d8d9
 800d93c:	0800d8d9 	.word	0x0800d8d9
 800d940:	0800d8d9 	.word	0x0800d8d9
 800d944:	0800da15 	.word	0x0800da15
 800d948:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d94c:	e7db      	b.n	800d906 <_scanf_float+0x8e>
 800d94e:	290e      	cmp	r1, #14
 800d950:	d8c2      	bhi.n	800d8d8 <_scanf_float+0x60>
 800d952:	a001      	add	r0, pc, #4	; (adr r0, 800d958 <_scanf_float+0xe0>)
 800d954:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d958:	0800da07 	.word	0x0800da07
 800d95c:	0800d8d9 	.word	0x0800d8d9
 800d960:	0800da07 	.word	0x0800da07
 800d964:	0800da9b 	.word	0x0800da9b
 800d968:	0800d8d9 	.word	0x0800d8d9
 800d96c:	0800d9b5 	.word	0x0800d9b5
 800d970:	0800d9f1 	.word	0x0800d9f1
 800d974:	0800d9f1 	.word	0x0800d9f1
 800d978:	0800d9f1 	.word	0x0800d9f1
 800d97c:	0800d9f1 	.word	0x0800d9f1
 800d980:	0800d9f1 	.word	0x0800d9f1
 800d984:	0800d9f1 	.word	0x0800d9f1
 800d988:	0800d9f1 	.word	0x0800d9f1
 800d98c:	0800d9f1 	.word	0x0800d9f1
 800d990:	0800d9f1 	.word	0x0800d9f1
 800d994:	2b6e      	cmp	r3, #110	; 0x6e
 800d996:	d809      	bhi.n	800d9ac <_scanf_float+0x134>
 800d998:	2b60      	cmp	r3, #96	; 0x60
 800d99a:	d8b2      	bhi.n	800d902 <_scanf_float+0x8a>
 800d99c:	2b54      	cmp	r3, #84	; 0x54
 800d99e:	d077      	beq.n	800da90 <_scanf_float+0x218>
 800d9a0:	2b59      	cmp	r3, #89	; 0x59
 800d9a2:	d199      	bne.n	800d8d8 <_scanf_float+0x60>
 800d9a4:	2d07      	cmp	r5, #7
 800d9a6:	d197      	bne.n	800d8d8 <_scanf_float+0x60>
 800d9a8:	2508      	movs	r5, #8
 800d9aa:	e029      	b.n	800da00 <_scanf_float+0x188>
 800d9ac:	2b74      	cmp	r3, #116	; 0x74
 800d9ae:	d06f      	beq.n	800da90 <_scanf_float+0x218>
 800d9b0:	2b79      	cmp	r3, #121	; 0x79
 800d9b2:	e7f6      	b.n	800d9a2 <_scanf_float+0x12a>
 800d9b4:	6821      	ldr	r1, [r4, #0]
 800d9b6:	05c8      	lsls	r0, r1, #23
 800d9b8:	d51a      	bpl.n	800d9f0 <_scanf_float+0x178>
 800d9ba:	9b02      	ldr	r3, [sp, #8]
 800d9bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d9c0:	6021      	str	r1, [r4, #0]
 800d9c2:	f109 0901 	add.w	r9, r9, #1
 800d9c6:	b11b      	cbz	r3, 800d9d0 <_scanf_float+0x158>
 800d9c8:	3b01      	subs	r3, #1
 800d9ca:	3201      	adds	r2, #1
 800d9cc:	9302      	str	r3, [sp, #8]
 800d9ce:	60a2      	str	r2, [r4, #8]
 800d9d0:	68a3      	ldr	r3, [r4, #8]
 800d9d2:	3b01      	subs	r3, #1
 800d9d4:	60a3      	str	r3, [r4, #8]
 800d9d6:	6923      	ldr	r3, [r4, #16]
 800d9d8:	3301      	adds	r3, #1
 800d9da:	6123      	str	r3, [r4, #16]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	3b01      	subs	r3, #1
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	607b      	str	r3, [r7, #4]
 800d9e4:	f340 8084 	ble.w	800daf0 <_scanf_float+0x278>
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	603b      	str	r3, [r7, #0]
 800d9ee:	e766      	b.n	800d8be <_scanf_float+0x46>
 800d9f0:	eb1a 0f05 	cmn.w	sl, r5
 800d9f4:	f47f af70 	bne.w	800d8d8 <_scanf_float+0x60>
 800d9f8:	6822      	ldr	r2, [r4, #0]
 800d9fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d9fe:	6022      	str	r2, [r4, #0]
 800da00:	f806 3b01 	strb.w	r3, [r6], #1
 800da04:	e7e4      	b.n	800d9d0 <_scanf_float+0x158>
 800da06:	6822      	ldr	r2, [r4, #0]
 800da08:	0610      	lsls	r0, r2, #24
 800da0a:	f57f af65 	bpl.w	800d8d8 <_scanf_float+0x60>
 800da0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800da12:	e7f4      	b.n	800d9fe <_scanf_float+0x186>
 800da14:	f1ba 0f00 	cmp.w	sl, #0
 800da18:	d10e      	bne.n	800da38 <_scanf_float+0x1c0>
 800da1a:	f1b9 0f00 	cmp.w	r9, #0
 800da1e:	d10e      	bne.n	800da3e <_scanf_float+0x1c6>
 800da20:	6822      	ldr	r2, [r4, #0]
 800da22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800da26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800da2a:	d108      	bne.n	800da3e <_scanf_float+0x1c6>
 800da2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800da30:	6022      	str	r2, [r4, #0]
 800da32:	f04f 0a01 	mov.w	sl, #1
 800da36:	e7e3      	b.n	800da00 <_scanf_float+0x188>
 800da38:	f1ba 0f02 	cmp.w	sl, #2
 800da3c:	d055      	beq.n	800daea <_scanf_float+0x272>
 800da3e:	2d01      	cmp	r5, #1
 800da40:	d002      	beq.n	800da48 <_scanf_float+0x1d0>
 800da42:	2d04      	cmp	r5, #4
 800da44:	f47f af48 	bne.w	800d8d8 <_scanf_float+0x60>
 800da48:	3501      	adds	r5, #1
 800da4a:	b2ed      	uxtb	r5, r5
 800da4c:	e7d8      	b.n	800da00 <_scanf_float+0x188>
 800da4e:	f1ba 0f01 	cmp.w	sl, #1
 800da52:	f47f af41 	bne.w	800d8d8 <_scanf_float+0x60>
 800da56:	f04f 0a02 	mov.w	sl, #2
 800da5a:	e7d1      	b.n	800da00 <_scanf_float+0x188>
 800da5c:	b97d      	cbnz	r5, 800da7e <_scanf_float+0x206>
 800da5e:	f1b9 0f00 	cmp.w	r9, #0
 800da62:	f47f af3c 	bne.w	800d8de <_scanf_float+0x66>
 800da66:	6822      	ldr	r2, [r4, #0]
 800da68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800da6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800da70:	f47f af39 	bne.w	800d8e6 <_scanf_float+0x6e>
 800da74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800da78:	6022      	str	r2, [r4, #0]
 800da7a:	2501      	movs	r5, #1
 800da7c:	e7c0      	b.n	800da00 <_scanf_float+0x188>
 800da7e:	2d03      	cmp	r5, #3
 800da80:	d0e2      	beq.n	800da48 <_scanf_float+0x1d0>
 800da82:	2d05      	cmp	r5, #5
 800da84:	e7de      	b.n	800da44 <_scanf_float+0x1cc>
 800da86:	2d02      	cmp	r5, #2
 800da88:	f47f af26 	bne.w	800d8d8 <_scanf_float+0x60>
 800da8c:	2503      	movs	r5, #3
 800da8e:	e7b7      	b.n	800da00 <_scanf_float+0x188>
 800da90:	2d06      	cmp	r5, #6
 800da92:	f47f af21 	bne.w	800d8d8 <_scanf_float+0x60>
 800da96:	2507      	movs	r5, #7
 800da98:	e7b2      	b.n	800da00 <_scanf_float+0x188>
 800da9a:	6822      	ldr	r2, [r4, #0]
 800da9c:	0591      	lsls	r1, r2, #22
 800da9e:	f57f af1b 	bpl.w	800d8d8 <_scanf_float+0x60>
 800daa2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800daa6:	6022      	str	r2, [r4, #0]
 800daa8:	f8cd 9004 	str.w	r9, [sp, #4]
 800daac:	e7a8      	b.n	800da00 <_scanf_float+0x188>
 800daae:	6822      	ldr	r2, [r4, #0]
 800dab0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800dab4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800dab8:	d006      	beq.n	800dac8 <_scanf_float+0x250>
 800daba:	0550      	lsls	r0, r2, #21
 800dabc:	f57f af0c 	bpl.w	800d8d8 <_scanf_float+0x60>
 800dac0:	f1b9 0f00 	cmp.w	r9, #0
 800dac4:	f43f af0f 	beq.w	800d8e6 <_scanf_float+0x6e>
 800dac8:	0591      	lsls	r1, r2, #22
 800daca:	bf58      	it	pl
 800dacc:	9901      	ldrpl	r1, [sp, #4]
 800dace:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dad2:	bf58      	it	pl
 800dad4:	eba9 0101 	subpl.w	r1, r9, r1
 800dad8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800dadc:	bf58      	it	pl
 800dade:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dae2:	6022      	str	r2, [r4, #0]
 800dae4:	f04f 0900 	mov.w	r9, #0
 800dae8:	e78a      	b.n	800da00 <_scanf_float+0x188>
 800daea:	f04f 0a03 	mov.w	sl, #3
 800daee:	e787      	b.n	800da00 <_scanf_float+0x188>
 800daf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800daf4:	4639      	mov	r1, r7
 800daf6:	4640      	mov	r0, r8
 800daf8:	4798      	blx	r3
 800dafa:	2800      	cmp	r0, #0
 800dafc:	f43f aedf 	beq.w	800d8be <_scanf_float+0x46>
 800db00:	e6ea      	b.n	800d8d8 <_scanf_float+0x60>
 800db02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800db0a:	463a      	mov	r2, r7
 800db0c:	4640      	mov	r0, r8
 800db0e:	4798      	blx	r3
 800db10:	6923      	ldr	r3, [r4, #16]
 800db12:	3b01      	subs	r3, #1
 800db14:	6123      	str	r3, [r4, #16]
 800db16:	e6ec      	b.n	800d8f2 <_scanf_float+0x7a>
 800db18:	1e6b      	subs	r3, r5, #1
 800db1a:	2b06      	cmp	r3, #6
 800db1c:	d825      	bhi.n	800db6a <_scanf_float+0x2f2>
 800db1e:	2d02      	cmp	r5, #2
 800db20:	d836      	bhi.n	800db90 <_scanf_float+0x318>
 800db22:	455e      	cmp	r6, fp
 800db24:	f67f aee8 	bls.w	800d8f8 <_scanf_float+0x80>
 800db28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800db30:	463a      	mov	r2, r7
 800db32:	4640      	mov	r0, r8
 800db34:	4798      	blx	r3
 800db36:	6923      	ldr	r3, [r4, #16]
 800db38:	3b01      	subs	r3, #1
 800db3a:	6123      	str	r3, [r4, #16]
 800db3c:	e7f1      	b.n	800db22 <_scanf_float+0x2aa>
 800db3e:	9802      	ldr	r0, [sp, #8]
 800db40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800db48:	9002      	str	r0, [sp, #8]
 800db4a:	463a      	mov	r2, r7
 800db4c:	4640      	mov	r0, r8
 800db4e:	4798      	blx	r3
 800db50:	6923      	ldr	r3, [r4, #16]
 800db52:	3b01      	subs	r3, #1
 800db54:	6123      	str	r3, [r4, #16]
 800db56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db5a:	fa5f fa8a 	uxtb.w	sl, sl
 800db5e:	f1ba 0f02 	cmp.w	sl, #2
 800db62:	d1ec      	bne.n	800db3e <_scanf_float+0x2c6>
 800db64:	3d03      	subs	r5, #3
 800db66:	b2ed      	uxtb	r5, r5
 800db68:	1b76      	subs	r6, r6, r5
 800db6a:	6823      	ldr	r3, [r4, #0]
 800db6c:	05da      	lsls	r2, r3, #23
 800db6e:	d52f      	bpl.n	800dbd0 <_scanf_float+0x358>
 800db70:	055b      	lsls	r3, r3, #21
 800db72:	d510      	bpl.n	800db96 <_scanf_float+0x31e>
 800db74:	455e      	cmp	r6, fp
 800db76:	f67f aebf 	bls.w	800d8f8 <_scanf_float+0x80>
 800db7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800db82:	463a      	mov	r2, r7
 800db84:	4640      	mov	r0, r8
 800db86:	4798      	blx	r3
 800db88:	6923      	ldr	r3, [r4, #16]
 800db8a:	3b01      	subs	r3, #1
 800db8c:	6123      	str	r3, [r4, #16]
 800db8e:	e7f1      	b.n	800db74 <_scanf_float+0x2fc>
 800db90:	46aa      	mov	sl, r5
 800db92:	9602      	str	r6, [sp, #8]
 800db94:	e7df      	b.n	800db56 <_scanf_float+0x2de>
 800db96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800db9a:	6923      	ldr	r3, [r4, #16]
 800db9c:	2965      	cmp	r1, #101	; 0x65
 800db9e:	f103 33ff 	add.w	r3, r3, #4294967295
 800dba2:	f106 35ff 	add.w	r5, r6, #4294967295
 800dba6:	6123      	str	r3, [r4, #16]
 800dba8:	d00c      	beq.n	800dbc4 <_scanf_float+0x34c>
 800dbaa:	2945      	cmp	r1, #69	; 0x45
 800dbac:	d00a      	beq.n	800dbc4 <_scanf_float+0x34c>
 800dbae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dbb2:	463a      	mov	r2, r7
 800dbb4:	4640      	mov	r0, r8
 800dbb6:	4798      	blx	r3
 800dbb8:	6923      	ldr	r3, [r4, #16]
 800dbba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dbbe:	3b01      	subs	r3, #1
 800dbc0:	1eb5      	subs	r5, r6, #2
 800dbc2:	6123      	str	r3, [r4, #16]
 800dbc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dbc8:	463a      	mov	r2, r7
 800dbca:	4640      	mov	r0, r8
 800dbcc:	4798      	blx	r3
 800dbce:	462e      	mov	r6, r5
 800dbd0:	6825      	ldr	r5, [r4, #0]
 800dbd2:	f015 0510 	ands.w	r5, r5, #16
 800dbd6:	d158      	bne.n	800dc8a <_scanf_float+0x412>
 800dbd8:	7035      	strb	r5, [r6, #0]
 800dbda:	6823      	ldr	r3, [r4, #0]
 800dbdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dbe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbe4:	d11c      	bne.n	800dc20 <_scanf_float+0x3a8>
 800dbe6:	9b01      	ldr	r3, [sp, #4]
 800dbe8:	454b      	cmp	r3, r9
 800dbea:	eba3 0209 	sub.w	r2, r3, r9
 800dbee:	d124      	bne.n	800dc3a <_scanf_float+0x3c2>
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	4659      	mov	r1, fp
 800dbf4:	4640      	mov	r0, r8
 800dbf6:	f002 fcdf 	bl	80105b8 <_strtod_r>
 800dbfa:	9b03      	ldr	r3, [sp, #12]
 800dbfc:	6821      	ldr	r1, [r4, #0]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f011 0f02 	tst.w	r1, #2
 800dc04:	ec57 6b10 	vmov	r6, r7, d0
 800dc08:	f103 0204 	add.w	r2, r3, #4
 800dc0c:	d020      	beq.n	800dc50 <_scanf_float+0x3d8>
 800dc0e:	9903      	ldr	r1, [sp, #12]
 800dc10:	600a      	str	r2, [r1, #0]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	e9c3 6700 	strd	r6, r7, [r3]
 800dc18:	68e3      	ldr	r3, [r4, #12]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	60e3      	str	r3, [r4, #12]
 800dc1e:	e66c      	b.n	800d8fa <_scanf_float+0x82>
 800dc20:	9b04      	ldr	r3, [sp, #16]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d0e4      	beq.n	800dbf0 <_scanf_float+0x378>
 800dc26:	9905      	ldr	r1, [sp, #20]
 800dc28:	230a      	movs	r3, #10
 800dc2a:	462a      	mov	r2, r5
 800dc2c:	3101      	adds	r1, #1
 800dc2e:	4640      	mov	r0, r8
 800dc30:	f002 fd4a 	bl	80106c8 <_strtol_r>
 800dc34:	9b04      	ldr	r3, [sp, #16]
 800dc36:	9e05      	ldr	r6, [sp, #20]
 800dc38:	1ac2      	subs	r2, r0, r3
 800dc3a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800dc3e:	429e      	cmp	r6, r3
 800dc40:	bf28      	it	cs
 800dc42:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800dc46:	4912      	ldr	r1, [pc, #72]	; (800dc90 <_scanf_float+0x418>)
 800dc48:	4630      	mov	r0, r6
 800dc4a:	f000 f8e7 	bl	800de1c <siprintf>
 800dc4e:	e7cf      	b.n	800dbf0 <_scanf_float+0x378>
 800dc50:	f011 0f04 	tst.w	r1, #4
 800dc54:	9903      	ldr	r1, [sp, #12]
 800dc56:	600a      	str	r2, [r1, #0]
 800dc58:	d1db      	bne.n	800dc12 <_scanf_float+0x39a>
 800dc5a:	f8d3 8000 	ldr.w	r8, [r3]
 800dc5e:	ee10 2a10 	vmov	r2, s0
 800dc62:	ee10 0a10 	vmov	r0, s0
 800dc66:	463b      	mov	r3, r7
 800dc68:	4639      	mov	r1, r7
 800dc6a:	f7f2 ff5f 	bl	8000b2c <__aeabi_dcmpun>
 800dc6e:	b128      	cbz	r0, 800dc7c <_scanf_float+0x404>
 800dc70:	4808      	ldr	r0, [pc, #32]	; (800dc94 <_scanf_float+0x41c>)
 800dc72:	f000 fa67 	bl	800e144 <nanf>
 800dc76:	ed88 0a00 	vstr	s0, [r8]
 800dc7a:	e7cd      	b.n	800dc18 <_scanf_float+0x3a0>
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	4639      	mov	r1, r7
 800dc80:	f7f2 ffb2 	bl	8000be8 <__aeabi_d2f>
 800dc84:	f8c8 0000 	str.w	r0, [r8]
 800dc88:	e7c6      	b.n	800dc18 <_scanf_float+0x3a0>
 800dc8a:	2500      	movs	r5, #0
 800dc8c:	e635      	b.n	800d8fa <_scanf_float+0x82>
 800dc8e:	bf00      	nop
 800dc90:	0801398a 	.word	0x0801398a
 800dc94:	08013d38 	.word	0x08013d38

0800dc98 <std>:
 800dc98:	2300      	movs	r3, #0
 800dc9a:	b510      	push	{r4, lr}
 800dc9c:	4604      	mov	r4, r0
 800dc9e:	e9c0 3300 	strd	r3, r3, [r0]
 800dca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dca6:	6083      	str	r3, [r0, #8]
 800dca8:	8181      	strh	r1, [r0, #12]
 800dcaa:	6643      	str	r3, [r0, #100]	; 0x64
 800dcac:	81c2      	strh	r2, [r0, #14]
 800dcae:	6183      	str	r3, [r0, #24]
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	2208      	movs	r2, #8
 800dcb4:	305c      	adds	r0, #92	; 0x5c
 800dcb6:	f000 f942 	bl	800df3e <memset>
 800dcba:	4b0d      	ldr	r3, [pc, #52]	; (800dcf0 <std+0x58>)
 800dcbc:	6263      	str	r3, [r4, #36]	; 0x24
 800dcbe:	4b0d      	ldr	r3, [pc, #52]	; (800dcf4 <std+0x5c>)
 800dcc0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dcc2:	4b0d      	ldr	r3, [pc, #52]	; (800dcf8 <std+0x60>)
 800dcc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dcc6:	4b0d      	ldr	r3, [pc, #52]	; (800dcfc <std+0x64>)
 800dcc8:	6323      	str	r3, [r4, #48]	; 0x30
 800dcca:	4b0d      	ldr	r3, [pc, #52]	; (800dd00 <std+0x68>)
 800dccc:	6224      	str	r4, [r4, #32]
 800dcce:	429c      	cmp	r4, r3
 800dcd0:	d006      	beq.n	800dce0 <std+0x48>
 800dcd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800dcd6:	4294      	cmp	r4, r2
 800dcd8:	d002      	beq.n	800dce0 <std+0x48>
 800dcda:	33d0      	adds	r3, #208	; 0xd0
 800dcdc:	429c      	cmp	r4, r3
 800dcde:	d105      	bne.n	800dcec <std+0x54>
 800dce0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dce8:	f000 ba12 	b.w	800e110 <__retarget_lock_init_recursive>
 800dcec:	bd10      	pop	{r4, pc}
 800dcee:	bf00      	nop
 800dcf0:	0800deb5 	.word	0x0800deb5
 800dcf4:	0800dedb 	.word	0x0800dedb
 800dcf8:	0800df13 	.word	0x0800df13
 800dcfc:	0800df37 	.word	0x0800df37
 800dd00:	20008ad0 	.word	0x20008ad0

0800dd04 <stdio_exit_handler>:
 800dd04:	4a02      	ldr	r2, [pc, #8]	; (800dd10 <stdio_exit_handler+0xc>)
 800dd06:	4903      	ldr	r1, [pc, #12]	; (800dd14 <stdio_exit_handler+0x10>)
 800dd08:	4803      	ldr	r0, [pc, #12]	; (800dd18 <stdio_exit_handler+0x14>)
 800dd0a:	f000 b869 	b.w	800dde0 <_fwalk_sglue>
 800dd0e:	bf00      	nop
 800dd10:	200000d8 	.word	0x200000d8
 800dd14:	080110c9 	.word	0x080110c9
 800dd18:	200000e4 	.word	0x200000e4

0800dd1c <cleanup_stdio>:
 800dd1c:	6841      	ldr	r1, [r0, #4]
 800dd1e:	4b0c      	ldr	r3, [pc, #48]	; (800dd50 <cleanup_stdio+0x34>)
 800dd20:	4299      	cmp	r1, r3
 800dd22:	b510      	push	{r4, lr}
 800dd24:	4604      	mov	r4, r0
 800dd26:	d001      	beq.n	800dd2c <cleanup_stdio+0x10>
 800dd28:	f003 f9ce 	bl	80110c8 <_fflush_r>
 800dd2c:	68a1      	ldr	r1, [r4, #8]
 800dd2e:	4b09      	ldr	r3, [pc, #36]	; (800dd54 <cleanup_stdio+0x38>)
 800dd30:	4299      	cmp	r1, r3
 800dd32:	d002      	beq.n	800dd3a <cleanup_stdio+0x1e>
 800dd34:	4620      	mov	r0, r4
 800dd36:	f003 f9c7 	bl	80110c8 <_fflush_r>
 800dd3a:	68e1      	ldr	r1, [r4, #12]
 800dd3c:	4b06      	ldr	r3, [pc, #24]	; (800dd58 <cleanup_stdio+0x3c>)
 800dd3e:	4299      	cmp	r1, r3
 800dd40:	d004      	beq.n	800dd4c <cleanup_stdio+0x30>
 800dd42:	4620      	mov	r0, r4
 800dd44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd48:	f003 b9be 	b.w	80110c8 <_fflush_r>
 800dd4c:	bd10      	pop	{r4, pc}
 800dd4e:	bf00      	nop
 800dd50:	20008ad0 	.word	0x20008ad0
 800dd54:	20008b38 	.word	0x20008b38
 800dd58:	20008ba0 	.word	0x20008ba0

0800dd5c <global_stdio_init.part.0>:
 800dd5c:	b510      	push	{r4, lr}
 800dd5e:	4b0b      	ldr	r3, [pc, #44]	; (800dd8c <global_stdio_init.part.0+0x30>)
 800dd60:	4c0b      	ldr	r4, [pc, #44]	; (800dd90 <global_stdio_init.part.0+0x34>)
 800dd62:	4a0c      	ldr	r2, [pc, #48]	; (800dd94 <global_stdio_init.part.0+0x38>)
 800dd64:	601a      	str	r2, [r3, #0]
 800dd66:	4620      	mov	r0, r4
 800dd68:	2200      	movs	r2, #0
 800dd6a:	2104      	movs	r1, #4
 800dd6c:	f7ff ff94 	bl	800dc98 <std>
 800dd70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800dd74:	2201      	movs	r2, #1
 800dd76:	2109      	movs	r1, #9
 800dd78:	f7ff ff8e 	bl	800dc98 <std>
 800dd7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800dd80:	2202      	movs	r2, #2
 800dd82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd86:	2112      	movs	r1, #18
 800dd88:	f7ff bf86 	b.w	800dc98 <std>
 800dd8c:	20008c08 	.word	0x20008c08
 800dd90:	20008ad0 	.word	0x20008ad0
 800dd94:	0800dd05 	.word	0x0800dd05

0800dd98 <__sfp_lock_acquire>:
 800dd98:	4801      	ldr	r0, [pc, #4]	; (800dda0 <__sfp_lock_acquire+0x8>)
 800dd9a:	f000 b9ba 	b.w	800e112 <__retarget_lock_acquire_recursive>
 800dd9e:	bf00      	nop
 800dda0:	20008c11 	.word	0x20008c11

0800dda4 <__sfp_lock_release>:
 800dda4:	4801      	ldr	r0, [pc, #4]	; (800ddac <__sfp_lock_release+0x8>)
 800dda6:	f000 b9b5 	b.w	800e114 <__retarget_lock_release_recursive>
 800ddaa:	bf00      	nop
 800ddac:	20008c11 	.word	0x20008c11

0800ddb0 <__sinit>:
 800ddb0:	b510      	push	{r4, lr}
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	f7ff fff0 	bl	800dd98 <__sfp_lock_acquire>
 800ddb8:	6a23      	ldr	r3, [r4, #32]
 800ddba:	b11b      	cbz	r3, 800ddc4 <__sinit+0x14>
 800ddbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddc0:	f7ff bff0 	b.w	800dda4 <__sfp_lock_release>
 800ddc4:	4b04      	ldr	r3, [pc, #16]	; (800ddd8 <__sinit+0x28>)
 800ddc6:	6223      	str	r3, [r4, #32]
 800ddc8:	4b04      	ldr	r3, [pc, #16]	; (800dddc <__sinit+0x2c>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d1f5      	bne.n	800ddbc <__sinit+0xc>
 800ddd0:	f7ff ffc4 	bl	800dd5c <global_stdio_init.part.0>
 800ddd4:	e7f2      	b.n	800ddbc <__sinit+0xc>
 800ddd6:	bf00      	nop
 800ddd8:	0800dd1d 	.word	0x0800dd1d
 800dddc:	20008c08 	.word	0x20008c08

0800dde0 <_fwalk_sglue>:
 800dde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dde4:	4607      	mov	r7, r0
 800dde6:	4688      	mov	r8, r1
 800dde8:	4614      	mov	r4, r2
 800ddea:	2600      	movs	r6, #0
 800ddec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ddf0:	f1b9 0901 	subs.w	r9, r9, #1
 800ddf4:	d505      	bpl.n	800de02 <_fwalk_sglue+0x22>
 800ddf6:	6824      	ldr	r4, [r4, #0]
 800ddf8:	2c00      	cmp	r4, #0
 800ddfa:	d1f7      	bne.n	800ddec <_fwalk_sglue+0xc>
 800ddfc:	4630      	mov	r0, r6
 800ddfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de02:	89ab      	ldrh	r3, [r5, #12]
 800de04:	2b01      	cmp	r3, #1
 800de06:	d907      	bls.n	800de18 <_fwalk_sglue+0x38>
 800de08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de0c:	3301      	adds	r3, #1
 800de0e:	d003      	beq.n	800de18 <_fwalk_sglue+0x38>
 800de10:	4629      	mov	r1, r5
 800de12:	4638      	mov	r0, r7
 800de14:	47c0      	blx	r8
 800de16:	4306      	orrs	r6, r0
 800de18:	3568      	adds	r5, #104	; 0x68
 800de1a:	e7e9      	b.n	800ddf0 <_fwalk_sglue+0x10>

0800de1c <siprintf>:
 800de1c:	b40e      	push	{r1, r2, r3}
 800de1e:	b500      	push	{lr}
 800de20:	b09c      	sub	sp, #112	; 0x70
 800de22:	ab1d      	add	r3, sp, #116	; 0x74
 800de24:	9002      	str	r0, [sp, #8]
 800de26:	9006      	str	r0, [sp, #24]
 800de28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800de2c:	4809      	ldr	r0, [pc, #36]	; (800de54 <siprintf+0x38>)
 800de2e:	9107      	str	r1, [sp, #28]
 800de30:	9104      	str	r1, [sp, #16]
 800de32:	4909      	ldr	r1, [pc, #36]	; (800de58 <siprintf+0x3c>)
 800de34:	f853 2b04 	ldr.w	r2, [r3], #4
 800de38:	9105      	str	r1, [sp, #20]
 800de3a:	6800      	ldr	r0, [r0, #0]
 800de3c:	9301      	str	r3, [sp, #4]
 800de3e:	a902      	add	r1, sp, #8
 800de40:	f002 fc9e 	bl	8010780 <_svfiprintf_r>
 800de44:	9b02      	ldr	r3, [sp, #8]
 800de46:	2200      	movs	r2, #0
 800de48:	701a      	strb	r2, [r3, #0]
 800de4a:	b01c      	add	sp, #112	; 0x70
 800de4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de50:	b003      	add	sp, #12
 800de52:	4770      	bx	lr
 800de54:	20000130 	.word	0x20000130
 800de58:	ffff0208 	.word	0xffff0208

0800de5c <siscanf>:
 800de5c:	b40e      	push	{r1, r2, r3}
 800de5e:	b510      	push	{r4, lr}
 800de60:	b09f      	sub	sp, #124	; 0x7c
 800de62:	ac21      	add	r4, sp, #132	; 0x84
 800de64:	f44f 7101 	mov.w	r1, #516	; 0x204
 800de68:	f854 2b04 	ldr.w	r2, [r4], #4
 800de6c:	9201      	str	r2, [sp, #4]
 800de6e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800de72:	9004      	str	r0, [sp, #16]
 800de74:	9008      	str	r0, [sp, #32]
 800de76:	f7f2 f9fb 	bl	8000270 <strlen>
 800de7a:	4b0c      	ldr	r3, [pc, #48]	; (800deac <siscanf+0x50>)
 800de7c:	9005      	str	r0, [sp, #20]
 800de7e:	9009      	str	r0, [sp, #36]	; 0x24
 800de80:	930d      	str	r3, [sp, #52]	; 0x34
 800de82:	480b      	ldr	r0, [pc, #44]	; (800deb0 <siscanf+0x54>)
 800de84:	9a01      	ldr	r2, [sp, #4]
 800de86:	6800      	ldr	r0, [r0, #0]
 800de88:	9403      	str	r4, [sp, #12]
 800de8a:	2300      	movs	r3, #0
 800de8c:	9311      	str	r3, [sp, #68]	; 0x44
 800de8e:	9316      	str	r3, [sp, #88]	; 0x58
 800de90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de94:	f8ad 301e 	strh.w	r3, [sp, #30]
 800de98:	a904      	add	r1, sp, #16
 800de9a:	4623      	mov	r3, r4
 800de9c:	f002 fdc8 	bl	8010a30 <__ssvfiscanf_r>
 800dea0:	b01f      	add	sp, #124	; 0x7c
 800dea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dea6:	b003      	add	sp, #12
 800dea8:	4770      	bx	lr
 800deaa:	bf00      	nop
 800deac:	0800ded7 	.word	0x0800ded7
 800deb0:	20000130 	.word	0x20000130

0800deb4 <__sread>:
 800deb4:	b510      	push	{r4, lr}
 800deb6:	460c      	mov	r4, r1
 800deb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800debc:	f000 f8da 	bl	800e074 <_read_r>
 800dec0:	2800      	cmp	r0, #0
 800dec2:	bfab      	itete	ge
 800dec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dec6:	89a3      	ldrhlt	r3, [r4, #12]
 800dec8:	181b      	addge	r3, r3, r0
 800deca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dece:	bfac      	ite	ge
 800ded0:	6563      	strge	r3, [r4, #84]	; 0x54
 800ded2:	81a3      	strhlt	r3, [r4, #12]
 800ded4:	bd10      	pop	{r4, pc}

0800ded6 <__seofread>:
 800ded6:	2000      	movs	r0, #0
 800ded8:	4770      	bx	lr

0800deda <__swrite>:
 800deda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dede:	461f      	mov	r7, r3
 800dee0:	898b      	ldrh	r3, [r1, #12]
 800dee2:	05db      	lsls	r3, r3, #23
 800dee4:	4605      	mov	r5, r0
 800dee6:	460c      	mov	r4, r1
 800dee8:	4616      	mov	r6, r2
 800deea:	d505      	bpl.n	800def8 <__swrite+0x1e>
 800deec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800def0:	2302      	movs	r3, #2
 800def2:	2200      	movs	r2, #0
 800def4:	f000 f8ac 	bl	800e050 <_lseek_r>
 800def8:	89a3      	ldrh	r3, [r4, #12]
 800defa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800defe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df02:	81a3      	strh	r3, [r4, #12]
 800df04:	4632      	mov	r2, r6
 800df06:	463b      	mov	r3, r7
 800df08:	4628      	mov	r0, r5
 800df0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df0e:	f000 b8c3 	b.w	800e098 <_write_r>

0800df12 <__sseek>:
 800df12:	b510      	push	{r4, lr}
 800df14:	460c      	mov	r4, r1
 800df16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df1a:	f000 f899 	bl	800e050 <_lseek_r>
 800df1e:	1c43      	adds	r3, r0, #1
 800df20:	89a3      	ldrh	r3, [r4, #12]
 800df22:	bf15      	itete	ne
 800df24:	6560      	strne	r0, [r4, #84]	; 0x54
 800df26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df2e:	81a3      	strheq	r3, [r4, #12]
 800df30:	bf18      	it	ne
 800df32:	81a3      	strhne	r3, [r4, #12]
 800df34:	bd10      	pop	{r4, pc}

0800df36 <__sclose>:
 800df36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df3a:	f000 b823 	b.w	800df84 <_close_r>

0800df3e <memset>:
 800df3e:	4402      	add	r2, r0
 800df40:	4603      	mov	r3, r0
 800df42:	4293      	cmp	r3, r2
 800df44:	d100      	bne.n	800df48 <memset+0xa>
 800df46:	4770      	bx	lr
 800df48:	f803 1b01 	strb.w	r1, [r3], #1
 800df4c:	e7f9      	b.n	800df42 <memset+0x4>

0800df4e <strstr>:
 800df4e:	780a      	ldrb	r2, [r1, #0]
 800df50:	b570      	push	{r4, r5, r6, lr}
 800df52:	b96a      	cbnz	r2, 800df70 <strstr+0x22>
 800df54:	bd70      	pop	{r4, r5, r6, pc}
 800df56:	429a      	cmp	r2, r3
 800df58:	d109      	bne.n	800df6e <strstr+0x20>
 800df5a:	460c      	mov	r4, r1
 800df5c:	4605      	mov	r5, r0
 800df5e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800df62:	2b00      	cmp	r3, #0
 800df64:	d0f6      	beq.n	800df54 <strstr+0x6>
 800df66:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800df6a:	429e      	cmp	r6, r3
 800df6c:	d0f7      	beq.n	800df5e <strstr+0x10>
 800df6e:	3001      	adds	r0, #1
 800df70:	7803      	ldrb	r3, [r0, #0]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d1ef      	bne.n	800df56 <strstr+0x8>
 800df76:	4618      	mov	r0, r3
 800df78:	e7ec      	b.n	800df54 <strstr+0x6>
	...

0800df7c <_localeconv_r>:
 800df7c:	4800      	ldr	r0, [pc, #0]	; (800df80 <_localeconv_r+0x4>)
 800df7e:	4770      	bx	lr
 800df80:	20000224 	.word	0x20000224

0800df84 <_close_r>:
 800df84:	b538      	push	{r3, r4, r5, lr}
 800df86:	4d06      	ldr	r5, [pc, #24]	; (800dfa0 <_close_r+0x1c>)
 800df88:	2300      	movs	r3, #0
 800df8a:	4604      	mov	r4, r0
 800df8c:	4608      	mov	r0, r1
 800df8e:	602b      	str	r3, [r5, #0]
 800df90:	f7f5 fb39 	bl	8003606 <_close>
 800df94:	1c43      	adds	r3, r0, #1
 800df96:	d102      	bne.n	800df9e <_close_r+0x1a>
 800df98:	682b      	ldr	r3, [r5, #0]
 800df9a:	b103      	cbz	r3, 800df9e <_close_r+0x1a>
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	bd38      	pop	{r3, r4, r5, pc}
 800dfa0:	20008c0c 	.word	0x20008c0c

0800dfa4 <_reclaim_reent>:
 800dfa4:	4b29      	ldr	r3, [pc, #164]	; (800e04c <_reclaim_reent+0xa8>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4283      	cmp	r3, r0
 800dfaa:	b570      	push	{r4, r5, r6, lr}
 800dfac:	4604      	mov	r4, r0
 800dfae:	d04b      	beq.n	800e048 <_reclaim_reent+0xa4>
 800dfb0:	69c3      	ldr	r3, [r0, #28]
 800dfb2:	b143      	cbz	r3, 800dfc6 <_reclaim_reent+0x22>
 800dfb4:	68db      	ldr	r3, [r3, #12]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d144      	bne.n	800e044 <_reclaim_reent+0xa0>
 800dfba:	69e3      	ldr	r3, [r4, #28]
 800dfbc:	6819      	ldr	r1, [r3, #0]
 800dfbe:	b111      	cbz	r1, 800dfc6 <_reclaim_reent+0x22>
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f000 ff3f 	bl	800ee44 <_free_r>
 800dfc6:	6961      	ldr	r1, [r4, #20]
 800dfc8:	b111      	cbz	r1, 800dfd0 <_reclaim_reent+0x2c>
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f000 ff3a 	bl	800ee44 <_free_r>
 800dfd0:	69e1      	ldr	r1, [r4, #28]
 800dfd2:	b111      	cbz	r1, 800dfda <_reclaim_reent+0x36>
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f000 ff35 	bl	800ee44 <_free_r>
 800dfda:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800dfdc:	b111      	cbz	r1, 800dfe4 <_reclaim_reent+0x40>
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f000 ff30 	bl	800ee44 <_free_r>
 800dfe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfe6:	b111      	cbz	r1, 800dfee <_reclaim_reent+0x4a>
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f000 ff2b 	bl	800ee44 <_free_r>
 800dfee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dff0:	b111      	cbz	r1, 800dff8 <_reclaim_reent+0x54>
 800dff2:	4620      	mov	r0, r4
 800dff4:	f000 ff26 	bl	800ee44 <_free_r>
 800dff8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dffa:	b111      	cbz	r1, 800e002 <_reclaim_reent+0x5e>
 800dffc:	4620      	mov	r0, r4
 800dffe:	f000 ff21 	bl	800ee44 <_free_r>
 800e002:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e004:	b111      	cbz	r1, 800e00c <_reclaim_reent+0x68>
 800e006:	4620      	mov	r0, r4
 800e008:	f000 ff1c 	bl	800ee44 <_free_r>
 800e00c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e00e:	b111      	cbz	r1, 800e016 <_reclaim_reent+0x72>
 800e010:	4620      	mov	r0, r4
 800e012:	f000 ff17 	bl	800ee44 <_free_r>
 800e016:	6a23      	ldr	r3, [r4, #32]
 800e018:	b1b3      	cbz	r3, 800e048 <_reclaim_reent+0xa4>
 800e01a:	4620      	mov	r0, r4
 800e01c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e020:	4718      	bx	r3
 800e022:	5949      	ldr	r1, [r1, r5]
 800e024:	b941      	cbnz	r1, 800e038 <_reclaim_reent+0x94>
 800e026:	3504      	adds	r5, #4
 800e028:	69e3      	ldr	r3, [r4, #28]
 800e02a:	2d80      	cmp	r5, #128	; 0x80
 800e02c:	68d9      	ldr	r1, [r3, #12]
 800e02e:	d1f8      	bne.n	800e022 <_reclaim_reent+0x7e>
 800e030:	4620      	mov	r0, r4
 800e032:	f000 ff07 	bl	800ee44 <_free_r>
 800e036:	e7c0      	b.n	800dfba <_reclaim_reent+0x16>
 800e038:	680e      	ldr	r6, [r1, #0]
 800e03a:	4620      	mov	r0, r4
 800e03c:	f000 ff02 	bl	800ee44 <_free_r>
 800e040:	4631      	mov	r1, r6
 800e042:	e7ef      	b.n	800e024 <_reclaim_reent+0x80>
 800e044:	2500      	movs	r5, #0
 800e046:	e7ef      	b.n	800e028 <_reclaim_reent+0x84>
 800e048:	bd70      	pop	{r4, r5, r6, pc}
 800e04a:	bf00      	nop
 800e04c:	20000130 	.word	0x20000130

0800e050 <_lseek_r>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	4d07      	ldr	r5, [pc, #28]	; (800e070 <_lseek_r+0x20>)
 800e054:	4604      	mov	r4, r0
 800e056:	4608      	mov	r0, r1
 800e058:	4611      	mov	r1, r2
 800e05a:	2200      	movs	r2, #0
 800e05c:	602a      	str	r2, [r5, #0]
 800e05e:	461a      	mov	r2, r3
 800e060:	f7f5 faf8 	bl	8003654 <_lseek>
 800e064:	1c43      	adds	r3, r0, #1
 800e066:	d102      	bne.n	800e06e <_lseek_r+0x1e>
 800e068:	682b      	ldr	r3, [r5, #0]
 800e06a:	b103      	cbz	r3, 800e06e <_lseek_r+0x1e>
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	bd38      	pop	{r3, r4, r5, pc}
 800e070:	20008c0c 	.word	0x20008c0c

0800e074 <_read_r>:
 800e074:	b538      	push	{r3, r4, r5, lr}
 800e076:	4d07      	ldr	r5, [pc, #28]	; (800e094 <_read_r+0x20>)
 800e078:	4604      	mov	r4, r0
 800e07a:	4608      	mov	r0, r1
 800e07c:	4611      	mov	r1, r2
 800e07e:	2200      	movs	r2, #0
 800e080:	602a      	str	r2, [r5, #0]
 800e082:	461a      	mov	r2, r3
 800e084:	f7f5 fa86 	bl	8003594 <_read>
 800e088:	1c43      	adds	r3, r0, #1
 800e08a:	d102      	bne.n	800e092 <_read_r+0x1e>
 800e08c:	682b      	ldr	r3, [r5, #0]
 800e08e:	b103      	cbz	r3, 800e092 <_read_r+0x1e>
 800e090:	6023      	str	r3, [r4, #0]
 800e092:	bd38      	pop	{r3, r4, r5, pc}
 800e094:	20008c0c 	.word	0x20008c0c

0800e098 <_write_r>:
 800e098:	b538      	push	{r3, r4, r5, lr}
 800e09a:	4d07      	ldr	r5, [pc, #28]	; (800e0b8 <_write_r+0x20>)
 800e09c:	4604      	mov	r4, r0
 800e09e:	4608      	mov	r0, r1
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	602a      	str	r2, [r5, #0]
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	f7f5 fa91 	bl	80035ce <_write>
 800e0ac:	1c43      	adds	r3, r0, #1
 800e0ae:	d102      	bne.n	800e0b6 <_write_r+0x1e>
 800e0b0:	682b      	ldr	r3, [r5, #0]
 800e0b2:	b103      	cbz	r3, 800e0b6 <_write_r+0x1e>
 800e0b4:	6023      	str	r3, [r4, #0]
 800e0b6:	bd38      	pop	{r3, r4, r5, pc}
 800e0b8:	20008c0c 	.word	0x20008c0c

0800e0bc <__errno>:
 800e0bc:	4b01      	ldr	r3, [pc, #4]	; (800e0c4 <__errno+0x8>)
 800e0be:	6818      	ldr	r0, [r3, #0]
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop
 800e0c4:	20000130 	.word	0x20000130

0800e0c8 <__libc_init_array>:
 800e0c8:	b570      	push	{r4, r5, r6, lr}
 800e0ca:	4d0d      	ldr	r5, [pc, #52]	; (800e100 <__libc_init_array+0x38>)
 800e0cc:	4c0d      	ldr	r4, [pc, #52]	; (800e104 <__libc_init_array+0x3c>)
 800e0ce:	1b64      	subs	r4, r4, r5
 800e0d0:	10a4      	asrs	r4, r4, #2
 800e0d2:	2600      	movs	r6, #0
 800e0d4:	42a6      	cmp	r6, r4
 800e0d6:	d109      	bne.n	800e0ec <__libc_init_array+0x24>
 800e0d8:	4d0b      	ldr	r5, [pc, #44]	; (800e108 <__libc_init_array+0x40>)
 800e0da:	4c0c      	ldr	r4, [pc, #48]	; (800e10c <__libc_init_array+0x44>)
 800e0dc:	f005 fbb2 	bl	8013844 <_init>
 800e0e0:	1b64      	subs	r4, r4, r5
 800e0e2:	10a4      	asrs	r4, r4, #2
 800e0e4:	2600      	movs	r6, #0
 800e0e6:	42a6      	cmp	r6, r4
 800e0e8:	d105      	bne.n	800e0f6 <__libc_init_array+0x2e>
 800e0ea:	bd70      	pop	{r4, r5, r6, pc}
 800e0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0f0:	4798      	blx	r3
 800e0f2:	3601      	adds	r6, #1
 800e0f4:	e7ee      	b.n	800e0d4 <__libc_init_array+0xc>
 800e0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0fa:	4798      	blx	r3
 800e0fc:	3601      	adds	r6, #1
 800e0fe:	e7f2      	b.n	800e0e6 <__libc_init_array+0x1e>
 800e100:	08013e48 	.word	0x08013e48
 800e104:	08013e48 	.word	0x08013e48
 800e108:	08013e48 	.word	0x08013e48
 800e10c:	08013e4c 	.word	0x08013e4c

0800e110 <__retarget_lock_init_recursive>:
 800e110:	4770      	bx	lr

0800e112 <__retarget_lock_acquire_recursive>:
 800e112:	4770      	bx	lr

0800e114 <__retarget_lock_release_recursive>:
 800e114:	4770      	bx	lr

0800e116 <strcpy>:
 800e116:	4603      	mov	r3, r0
 800e118:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e11c:	f803 2b01 	strb.w	r2, [r3], #1
 800e120:	2a00      	cmp	r2, #0
 800e122:	d1f9      	bne.n	800e118 <strcpy+0x2>
 800e124:	4770      	bx	lr

0800e126 <memcpy>:
 800e126:	440a      	add	r2, r1
 800e128:	4291      	cmp	r1, r2
 800e12a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e12e:	d100      	bne.n	800e132 <memcpy+0xc>
 800e130:	4770      	bx	lr
 800e132:	b510      	push	{r4, lr}
 800e134:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e138:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e13c:	4291      	cmp	r1, r2
 800e13e:	d1f9      	bne.n	800e134 <memcpy+0xe>
 800e140:	bd10      	pop	{r4, pc}
	...

0800e144 <nanf>:
 800e144:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e14c <nanf+0x8>
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	7fc00000 	.word	0x7fc00000

0800e150 <quorem>:
 800e150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	6903      	ldr	r3, [r0, #16]
 800e156:	690c      	ldr	r4, [r1, #16]
 800e158:	42a3      	cmp	r3, r4
 800e15a:	4607      	mov	r7, r0
 800e15c:	db7e      	blt.n	800e25c <quorem+0x10c>
 800e15e:	3c01      	subs	r4, #1
 800e160:	f101 0814 	add.w	r8, r1, #20
 800e164:	f100 0514 	add.w	r5, r0, #20
 800e168:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e16c:	9301      	str	r3, [sp, #4]
 800e16e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e172:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e176:	3301      	adds	r3, #1
 800e178:	429a      	cmp	r2, r3
 800e17a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e17e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e182:	fbb2 f6f3 	udiv	r6, r2, r3
 800e186:	d331      	bcc.n	800e1ec <quorem+0x9c>
 800e188:	f04f 0e00 	mov.w	lr, #0
 800e18c:	4640      	mov	r0, r8
 800e18e:	46ac      	mov	ip, r5
 800e190:	46f2      	mov	sl, lr
 800e192:	f850 2b04 	ldr.w	r2, [r0], #4
 800e196:	b293      	uxth	r3, r2
 800e198:	fb06 e303 	mla	r3, r6, r3, lr
 800e19c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e1a0:	0c1a      	lsrs	r2, r3, #16
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	ebaa 0303 	sub.w	r3, sl, r3
 800e1a8:	f8dc a000 	ldr.w	sl, [ip]
 800e1ac:	fa13 f38a 	uxtah	r3, r3, sl
 800e1b0:	fb06 220e 	mla	r2, r6, lr, r2
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	9b00      	ldr	r3, [sp, #0]
 800e1b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e1bc:	b292      	uxth	r2, r2
 800e1be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e1c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e1c6:	f8bd 3000 	ldrh.w	r3, [sp]
 800e1ca:	4581      	cmp	r9, r0
 800e1cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e1d0:	f84c 3b04 	str.w	r3, [ip], #4
 800e1d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e1d8:	d2db      	bcs.n	800e192 <quorem+0x42>
 800e1da:	f855 300b 	ldr.w	r3, [r5, fp]
 800e1de:	b92b      	cbnz	r3, 800e1ec <quorem+0x9c>
 800e1e0:	9b01      	ldr	r3, [sp, #4]
 800e1e2:	3b04      	subs	r3, #4
 800e1e4:	429d      	cmp	r5, r3
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	d32c      	bcc.n	800e244 <quorem+0xf4>
 800e1ea:	613c      	str	r4, [r7, #16]
 800e1ec:	4638      	mov	r0, r7
 800e1ee:	f001 f9ef 	bl	800f5d0 <__mcmp>
 800e1f2:	2800      	cmp	r0, #0
 800e1f4:	db22      	blt.n	800e23c <quorem+0xec>
 800e1f6:	3601      	adds	r6, #1
 800e1f8:	4629      	mov	r1, r5
 800e1fa:	2000      	movs	r0, #0
 800e1fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800e200:	f8d1 c000 	ldr.w	ip, [r1]
 800e204:	b293      	uxth	r3, r2
 800e206:	1ac3      	subs	r3, r0, r3
 800e208:	0c12      	lsrs	r2, r2, #16
 800e20a:	fa13 f38c 	uxtah	r3, r3, ip
 800e20e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e212:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e216:	b29b      	uxth	r3, r3
 800e218:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e21c:	45c1      	cmp	r9, r8
 800e21e:	f841 3b04 	str.w	r3, [r1], #4
 800e222:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e226:	d2e9      	bcs.n	800e1fc <quorem+0xac>
 800e228:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e22c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e230:	b922      	cbnz	r2, 800e23c <quorem+0xec>
 800e232:	3b04      	subs	r3, #4
 800e234:	429d      	cmp	r5, r3
 800e236:	461a      	mov	r2, r3
 800e238:	d30a      	bcc.n	800e250 <quorem+0x100>
 800e23a:	613c      	str	r4, [r7, #16]
 800e23c:	4630      	mov	r0, r6
 800e23e:	b003      	add	sp, #12
 800e240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e244:	6812      	ldr	r2, [r2, #0]
 800e246:	3b04      	subs	r3, #4
 800e248:	2a00      	cmp	r2, #0
 800e24a:	d1ce      	bne.n	800e1ea <quorem+0x9a>
 800e24c:	3c01      	subs	r4, #1
 800e24e:	e7c9      	b.n	800e1e4 <quorem+0x94>
 800e250:	6812      	ldr	r2, [r2, #0]
 800e252:	3b04      	subs	r3, #4
 800e254:	2a00      	cmp	r2, #0
 800e256:	d1f0      	bne.n	800e23a <quorem+0xea>
 800e258:	3c01      	subs	r4, #1
 800e25a:	e7eb      	b.n	800e234 <quorem+0xe4>
 800e25c:	2000      	movs	r0, #0
 800e25e:	e7ee      	b.n	800e23e <quorem+0xee>

0800e260 <_dtoa_r>:
 800e260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e264:	ed2d 8b04 	vpush	{d8-d9}
 800e268:	69c5      	ldr	r5, [r0, #28]
 800e26a:	b093      	sub	sp, #76	; 0x4c
 800e26c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e270:	ec57 6b10 	vmov	r6, r7, d0
 800e274:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e278:	9107      	str	r1, [sp, #28]
 800e27a:	4604      	mov	r4, r0
 800e27c:	920a      	str	r2, [sp, #40]	; 0x28
 800e27e:	930d      	str	r3, [sp, #52]	; 0x34
 800e280:	b975      	cbnz	r5, 800e2a0 <_dtoa_r+0x40>
 800e282:	2010      	movs	r0, #16
 800e284:	f000 fe2a 	bl	800eedc <malloc>
 800e288:	4602      	mov	r2, r0
 800e28a:	61e0      	str	r0, [r4, #28]
 800e28c:	b920      	cbnz	r0, 800e298 <_dtoa_r+0x38>
 800e28e:	4bae      	ldr	r3, [pc, #696]	; (800e548 <_dtoa_r+0x2e8>)
 800e290:	21ef      	movs	r1, #239	; 0xef
 800e292:	48ae      	ldr	r0, [pc, #696]	; (800e54c <_dtoa_r+0x2ec>)
 800e294:	f002 fff8 	bl	8011288 <__assert_func>
 800e298:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e29c:	6005      	str	r5, [r0, #0]
 800e29e:	60c5      	str	r5, [r0, #12]
 800e2a0:	69e3      	ldr	r3, [r4, #28]
 800e2a2:	6819      	ldr	r1, [r3, #0]
 800e2a4:	b151      	cbz	r1, 800e2bc <_dtoa_r+0x5c>
 800e2a6:	685a      	ldr	r2, [r3, #4]
 800e2a8:	604a      	str	r2, [r1, #4]
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	4093      	lsls	r3, r2
 800e2ae:	608b      	str	r3, [r1, #8]
 800e2b0:	4620      	mov	r0, r4
 800e2b2:	f000 ff07 	bl	800f0c4 <_Bfree>
 800e2b6:	69e3      	ldr	r3, [r4, #28]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	601a      	str	r2, [r3, #0]
 800e2bc:	1e3b      	subs	r3, r7, #0
 800e2be:	bfbb      	ittet	lt
 800e2c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e2c4:	9303      	strlt	r3, [sp, #12]
 800e2c6:	2300      	movge	r3, #0
 800e2c8:	2201      	movlt	r2, #1
 800e2ca:	bfac      	ite	ge
 800e2cc:	f8c8 3000 	strge.w	r3, [r8]
 800e2d0:	f8c8 2000 	strlt.w	r2, [r8]
 800e2d4:	4b9e      	ldr	r3, [pc, #632]	; (800e550 <_dtoa_r+0x2f0>)
 800e2d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e2da:	ea33 0308 	bics.w	r3, r3, r8
 800e2de:	d11b      	bne.n	800e318 <_dtoa_r+0xb8>
 800e2e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e2e2:	f242 730f 	movw	r3, #9999	; 0x270f
 800e2e6:	6013      	str	r3, [r2, #0]
 800e2e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e2ec:	4333      	orrs	r3, r6
 800e2ee:	f000 8593 	beq.w	800ee18 <_dtoa_r+0xbb8>
 800e2f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2f4:	b963      	cbnz	r3, 800e310 <_dtoa_r+0xb0>
 800e2f6:	4b97      	ldr	r3, [pc, #604]	; (800e554 <_dtoa_r+0x2f4>)
 800e2f8:	e027      	b.n	800e34a <_dtoa_r+0xea>
 800e2fa:	4b97      	ldr	r3, [pc, #604]	; (800e558 <_dtoa_r+0x2f8>)
 800e2fc:	9300      	str	r3, [sp, #0]
 800e2fe:	3308      	adds	r3, #8
 800e300:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e302:	6013      	str	r3, [r2, #0]
 800e304:	9800      	ldr	r0, [sp, #0]
 800e306:	b013      	add	sp, #76	; 0x4c
 800e308:	ecbd 8b04 	vpop	{d8-d9}
 800e30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e310:	4b90      	ldr	r3, [pc, #576]	; (800e554 <_dtoa_r+0x2f4>)
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	3303      	adds	r3, #3
 800e316:	e7f3      	b.n	800e300 <_dtoa_r+0xa0>
 800e318:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e31c:	2200      	movs	r2, #0
 800e31e:	ec51 0b17 	vmov	r0, r1, d7
 800e322:	eeb0 8a47 	vmov.f32	s16, s14
 800e326:	eef0 8a67 	vmov.f32	s17, s15
 800e32a:	2300      	movs	r3, #0
 800e32c:	f7f2 fbcc 	bl	8000ac8 <__aeabi_dcmpeq>
 800e330:	4681      	mov	r9, r0
 800e332:	b160      	cbz	r0, 800e34e <_dtoa_r+0xee>
 800e334:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e336:	2301      	movs	r3, #1
 800e338:	6013      	str	r3, [r2, #0]
 800e33a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	f000 8568 	beq.w	800ee12 <_dtoa_r+0xbb2>
 800e342:	4b86      	ldr	r3, [pc, #536]	; (800e55c <_dtoa_r+0x2fc>)
 800e344:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e346:	6013      	str	r3, [r2, #0]
 800e348:	3b01      	subs	r3, #1
 800e34a:	9300      	str	r3, [sp, #0]
 800e34c:	e7da      	b.n	800e304 <_dtoa_r+0xa4>
 800e34e:	aa10      	add	r2, sp, #64	; 0x40
 800e350:	a911      	add	r1, sp, #68	; 0x44
 800e352:	4620      	mov	r0, r4
 800e354:	eeb0 0a48 	vmov.f32	s0, s16
 800e358:	eef0 0a68 	vmov.f32	s1, s17
 800e35c:	f001 fa4e 	bl	800f7fc <__d2b>
 800e360:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e364:	4682      	mov	sl, r0
 800e366:	2d00      	cmp	r5, #0
 800e368:	d07f      	beq.n	800e46a <_dtoa_r+0x20a>
 800e36a:	ee18 3a90 	vmov	r3, s17
 800e36e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e372:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e376:	ec51 0b18 	vmov	r0, r1, d8
 800e37a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e37e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e382:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e386:	4619      	mov	r1, r3
 800e388:	2200      	movs	r2, #0
 800e38a:	4b75      	ldr	r3, [pc, #468]	; (800e560 <_dtoa_r+0x300>)
 800e38c:	f7f1 ff7c 	bl	8000288 <__aeabi_dsub>
 800e390:	a367      	add	r3, pc, #412	; (adr r3, 800e530 <_dtoa_r+0x2d0>)
 800e392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e396:	f7f2 f92f 	bl	80005f8 <__aeabi_dmul>
 800e39a:	a367      	add	r3, pc, #412	; (adr r3, 800e538 <_dtoa_r+0x2d8>)
 800e39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a0:	f7f1 ff74 	bl	800028c <__adddf3>
 800e3a4:	4606      	mov	r6, r0
 800e3a6:	4628      	mov	r0, r5
 800e3a8:	460f      	mov	r7, r1
 800e3aa:	f7f2 f8bb 	bl	8000524 <__aeabi_i2d>
 800e3ae:	a364      	add	r3, pc, #400	; (adr r3, 800e540 <_dtoa_r+0x2e0>)
 800e3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b4:	f7f2 f920 	bl	80005f8 <__aeabi_dmul>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	4630      	mov	r0, r6
 800e3be:	4639      	mov	r1, r7
 800e3c0:	f7f1 ff64 	bl	800028c <__adddf3>
 800e3c4:	4606      	mov	r6, r0
 800e3c6:	460f      	mov	r7, r1
 800e3c8:	f7f2 fbc6 	bl	8000b58 <__aeabi_d2iz>
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	4683      	mov	fp, r0
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	4639      	mov	r1, r7
 800e3d6:	f7f2 fb81 	bl	8000adc <__aeabi_dcmplt>
 800e3da:	b148      	cbz	r0, 800e3f0 <_dtoa_r+0x190>
 800e3dc:	4658      	mov	r0, fp
 800e3de:	f7f2 f8a1 	bl	8000524 <__aeabi_i2d>
 800e3e2:	4632      	mov	r2, r6
 800e3e4:	463b      	mov	r3, r7
 800e3e6:	f7f2 fb6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3ea:	b908      	cbnz	r0, 800e3f0 <_dtoa_r+0x190>
 800e3ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e3f0:	f1bb 0f16 	cmp.w	fp, #22
 800e3f4:	d857      	bhi.n	800e4a6 <_dtoa_r+0x246>
 800e3f6:	4b5b      	ldr	r3, [pc, #364]	; (800e564 <_dtoa_r+0x304>)
 800e3f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e400:	ec51 0b18 	vmov	r0, r1, d8
 800e404:	f7f2 fb6a 	bl	8000adc <__aeabi_dcmplt>
 800e408:	2800      	cmp	r0, #0
 800e40a:	d04e      	beq.n	800e4aa <_dtoa_r+0x24a>
 800e40c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e410:	2300      	movs	r3, #0
 800e412:	930c      	str	r3, [sp, #48]	; 0x30
 800e414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e416:	1b5b      	subs	r3, r3, r5
 800e418:	1e5a      	subs	r2, r3, #1
 800e41a:	bf45      	ittet	mi
 800e41c:	f1c3 0301 	rsbmi	r3, r3, #1
 800e420:	9305      	strmi	r3, [sp, #20]
 800e422:	2300      	movpl	r3, #0
 800e424:	2300      	movmi	r3, #0
 800e426:	9206      	str	r2, [sp, #24]
 800e428:	bf54      	ite	pl
 800e42a:	9305      	strpl	r3, [sp, #20]
 800e42c:	9306      	strmi	r3, [sp, #24]
 800e42e:	f1bb 0f00 	cmp.w	fp, #0
 800e432:	db3c      	blt.n	800e4ae <_dtoa_r+0x24e>
 800e434:	9b06      	ldr	r3, [sp, #24]
 800e436:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e43a:	445b      	add	r3, fp
 800e43c:	9306      	str	r3, [sp, #24]
 800e43e:	2300      	movs	r3, #0
 800e440:	9308      	str	r3, [sp, #32]
 800e442:	9b07      	ldr	r3, [sp, #28]
 800e444:	2b09      	cmp	r3, #9
 800e446:	d868      	bhi.n	800e51a <_dtoa_r+0x2ba>
 800e448:	2b05      	cmp	r3, #5
 800e44a:	bfc4      	itt	gt
 800e44c:	3b04      	subgt	r3, #4
 800e44e:	9307      	strgt	r3, [sp, #28]
 800e450:	9b07      	ldr	r3, [sp, #28]
 800e452:	f1a3 0302 	sub.w	r3, r3, #2
 800e456:	bfcc      	ite	gt
 800e458:	2500      	movgt	r5, #0
 800e45a:	2501      	movle	r5, #1
 800e45c:	2b03      	cmp	r3, #3
 800e45e:	f200 8085 	bhi.w	800e56c <_dtoa_r+0x30c>
 800e462:	e8df f003 	tbb	[pc, r3]
 800e466:	3b2e      	.short	0x3b2e
 800e468:	5839      	.short	0x5839
 800e46a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e46e:	441d      	add	r5, r3
 800e470:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e474:	2b20      	cmp	r3, #32
 800e476:	bfc1      	itttt	gt
 800e478:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e47c:	fa08 f803 	lslgt.w	r8, r8, r3
 800e480:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e484:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e488:	bfd6      	itet	le
 800e48a:	f1c3 0320 	rsble	r3, r3, #32
 800e48e:	ea48 0003 	orrgt.w	r0, r8, r3
 800e492:	fa06 f003 	lslle.w	r0, r6, r3
 800e496:	f7f2 f835 	bl	8000504 <__aeabi_ui2d>
 800e49a:	2201      	movs	r2, #1
 800e49c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e4a0:	3d01      	subs	r5, #1
 800e4a2:	920e      	str	r2, [sp, #56]	; 0x38
 800e4a4:	e76f      	b.n	800e386 <_dtoa_r+0x126>
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	e7b3      	b.n	800e412 <_dtoa_r+0x1b2>
 800e4aa:	900c      	str	r0, [sp, #48]	; 0x30
 800e4ac:	e7b2      	b.n	800e414 <_dtoa_r+0x1b4>
 800e4ae:	9b05      	ldr	r3, [sp, #20]
 800e4b0:	eba3 030b 	sub.w	r3, r3, fp
 800e4b4:	9305      	str	r3, [sp, #20]
 800e4b6:	f1cb 0300 	rsb	r3, fp, #0
 800e4ba:	9308      	str	r3, [sp, #32]
 800e4bc:	2300      	movs	r3, #0
 800e4be:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4c0:	e7bf      	b.n	800e442 <_dtoa_r+0x1e2>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	dc52      	bgt.n	800e572 <_dtoa_r+0x312>
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	9301      	str	r3, [sp, #4]
 800e4d0:	9304      	str	r3, [sp, #16]
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	920a      	str	r2, [sp, #40]	; 0x28
 800e4d6:	e00b      	b.n	800e4f0 <_dtoa_r+0x290>
 800e4d8:	2301      	movs	r3, #1
 800e4da:	e7f3      	b.n	800e4c4 <_dtoa_r+0x264>
 800e4dc:	2300      	movs	r3, #0
 800e4de:	9309      	str	r3, [sp, #36]	; 0x24
 800e4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4e2:	445b      	add	r3, fp
 800e4e4:	9301      	str	r3, [sp, #4]
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	9304      	str	r3, [sp, #16]
 800e4ec:	bfb8      	it	lt
 800e4ee:	2301      	movlt	r3, #1
 800e4f0:	69e0      	ldr	r0, [r4, #28]
 800e4f2:	2100      	movs	r1, #0
 800e4f4:	2204      	movs	r2, #4
 800e4f6:	f102 0614 	add.w	r6, r2, #20
 800e4fa:	429e      	cmp	r6, r3
 800e4fc:	d93d      	bls.n	800e57a <_dtoa_r+0x31a>
 800e4fe:	6041      	str	r1, [r0, #4]
 800e500:	4620      	mov	r0, r4
 800e502:	f000 fd9f 	bl	800f044 <_Balloc>
 800e506:	9000      	str	r0, [sp, #0]
 800e508:	2800      	cmp	r0, #0
 800e50a:	d139      	bne.n	800e580 <_dtoa_r+0x320>
 800e50c:	4b16      	ldr	r3, [pc, #88]	; (800e568 <_dtoa_r+0x308>)
 800e50e:	4602      	mov	r2, r0
 800e510:	f240 11af 	movw	r1, #431	; 0x1af
 800e514:	e6bd      	b.n	800e292 <_dtoa_r+0x32>
 800e516:	2301      	movs	r3, #1
 800e518:	e7e1      	b.n	800e4de <_dtoa_r+0x27e>
 800e51a:	2501      	movs	r5, #1
 800e51c:	2300      	movs	r3, #0
 800e51e:	9307      	str	r3, [sp, #28]
 800e520:	9509      	str	r5, [sp, #36]	; 0x24
 800e522:	f04f 33ff 	mov.w	r3, #4294967295
 800e526:	9301      	str	r3, [sp, #4]
 800e528:	9304      	str	r3, [sp, #16]
 800e52a:	2200      	movs	r2, #0
 800e52c:	2312      	movs	r3, #18
 800e52e:	e7d1      	b.n	800e4d4 <_dtoa_r+0x274>
 800e530:	636f4361 	.word	0x636f4361
 800e534:	3fd287a7 	.word	0x3fd287a7
 800e538:	8b60c8b3 	.word	0x8b60c8b3
 800e53c:	3fc68a28 	.word	0x3fc68a28
 800e540:	509f79fb 	.word	0x509f79fb
 800e544:	3fd34413 	.word	0x3fd34413
 800e548:	0801399c 	.word	0x0801399c
 800e54c:	080139b3 	.word	0x080139b3
 800e550:	7ff00000 	.word	0x7ff00000
 800e554:	08013998 	.word	0x08013998
 800e558:	0801398f 	.word	0x0801398f
 800e55c:	08013cf1 	.word	0x08013cf1
 800e560:	3ff80000 	.word	0x3ff80000
 800e564:	08013aa0 	.word	0x08013aa0
 800e568:	08013a0b 	.word	0x08013a0b
 800e56c:	2301      	movs	r3, #1
 800e56e:	9309      	str	r3, [sp, #36]	; 0x24
 800e570:	e7d7      	b.n	800e522 <_dtoa_r+0x2c2>
 800e572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e574:	9301      	str	r3, [sp, #4]
 800e576:	9304      	str	r3, [sp, #16]
 800e578:	e7ba      	b.n	800e4f0 <_dtoa_r+0x290>
 800e57a:	3101      	adds	r1, #1
 800e57c:	0052      	lsls	r2, r2, #1
 800e57e:	e7ba      	b.n	800e4f6 <_dtoa_r+0x296>
 800e580:	69e3      	ldr	r3, [r4, #28]
 800e582:	9a00      	ldr	r2, [sp, #0]
 800e584:	601a      	str	r2, [r3, #0]
 800e586:	9b04      	ldr	r3, [sp, #16]
 800e588:	2b0e      	cmp	r3, #14
 800e58a:	f200 80a8 	bhi.w	800e6de <_dtoa_r+0x47e>
 800e58e:	2d00      	cmp	r5, #0
 800e590:	f000 80a5 	beq.w	800e6de <_dtoa_r+0x47e>
 800e594:	f1bb 0f00 	cmp.w	fp, #0
 800e598:	dd38      	ble.n	800e60c <_dtoa_r+0x3ac>
 800e59a:	4bc0      	ldr	r3, [pc, #768]	; (800e89c <_dtoa_r+0x63c>)
 800e59c:	f00b 020f 	and.w	r2, fp, #15
 800e5a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e5a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e5ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e5b0:	d019      	beq.n	800e5e6 <_dtoa_r+0x386>
 800e5b2:	4bbb      	ldr	r3, [pc, #748]	; (800e8a0 <_dtoa_r+0x640>)
 800e5b4:	ec51 0b18 	vmov	r0, r1, d8
 800e5b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e5bc:	f7f2 f946 	bl	800084c <__aeabi_ddiv>
 800e5c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5c4:	f008 080f 	and.w	r8, r8, #15
 800e5c8:	2503      	movs	r5, #3
 800e5ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e8a0 <_dtoa_r+0x640>
 800e5ce:	f1b8 0f00 	cmp.w	r8, #0
 800e5d2:	d10a      	bne.n	800e5ea <_dtoa_r+0x38a>
 800e5d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5d8:	4632      	mov	r2, r6
 800e5da:	463b      	mov	r3, r7
 800e5dc:	f7f2 f936 	bl	800084c <__aeabi_ddiv>
 800e5e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5e4:	e02b      	b.n	800e63e <_dtoa_r+0x3de>
 800e5e6:	2502      	movs	r5, #2
 800e5e8:	e7ef      	b.n	800e5ca <_dtoa_r+0x36a>
 800e5ea:	f018 0f01 	tst.w	r8, #1
 800e5ee:	d008      	beq.n	800e602 <_dtoa_r+0x3a2>
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	4639      	mov	r1, r7
 800e5f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e5f8:	f7f1 fffe 	bl	80005f8 <__aeabi_dmul>
 800e5fc:	3501      	adds	r5, #1
 800e5fe:	4606      	mov	r6, r0
 800e600:	460f      	mov	r7, r1
 800e602:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e606:	f109 0908 	add.w	r9, r9, #8
 800e60a:	e7e0      	b.n	800e5ce <_dtoa_r+0x36e>
 800e60c:	f000 809f 	beq.w	800e74e <_dtoa_r+0x4ee>
 800e610:	f1cb 0600 	rsb	r6, fp, #0
 800e614:	4ba1      	ldr	r3, [pc, #644]	; (800e89c <_dtoa_r+0x63c>)
 800e616:	4fa2      	ldr	r7, [pc, #648]	; (800e8a0 <_dtoa_r+0x640>)
 800e618:	f006 020f 	and.w	r2, r6, #15
 800e61c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e624:	ec51 0b18 	vmov	r0, r1, d8
 800e628:	f7f1 ffe6 	bl	80005f8 <__aeabi_dmul>
 800e62c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e630:	1136      	asrs	r6, r6, #4
 800e632:	2300      	movs	r3, #0
 800e634:	2502      	movs	r5, #2
 800e636:	2e00      	cmp	r6, #0
 800e638:	d17e      	bne.n	800e738 <_dtoa_r+0x4d8>
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d1d0      	bne.n	800e5e0 <_dtoa_r+0x380>
 800e63e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e640:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e644:	2b00      	cmp	r3, #0
 800e646:	f000 8084 	beq.w	800e752 <_dtoa_r+0x4f2>
 800e64a:	4b96      	ldr	r3, [pc, #600]	; (800e8a4 <_dtoa_r+0x644>)
 800e64c:	2200      	movs	r2, #0
 800e64e:	4640      	mov	r0, r8
 800e650:	4649      	mov	r1, r9
 800e652:	f7f2 fa43 	bl	8000adc <__aeabi_dcmplt>
 800e656:	2800      	cmp	r0, #0
 800e658:	d07b      	beq.n	800e752 <_dtoa_r+0x4f2>
 800e65a:	9b04      	ldr	r3, [sp, #16]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d078      	beq.n	800e752 <_dtoa_r+0x4f2>
 800e660:	9b01      	ldr	r3, [sp, #4]
 800e662:	2b00      	cmp	r3, #0
 800e664:	dd39      	ble.n	800e6da <_dtoa_r+0x47a>
 800e666:	4b90      	ldr	r3, [pc, #576]	; (800e8a8 <_dtoa_r+0x648>)
 800e668:	2200      	movs	r2, #0
 800e66a:	4640      	mov	r0, r8
 800e66c:	4649      	mov	r1, r9
 800e66e:	f7f1 ffc3 	bl	80005f8 <__aeabi_dmul>
 800e672:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e676:	9e01      	ldr	r6, [sp, #4]
 800e678:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e67c:	3501      	adds	r5, #1
 800e67e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e682:	4628      	mov	r0, r5
 800e684:	f7f1 ff4e 	bl	8000524 <__aeabi_i2d>
 800e688:	4642      	mov	r2, r8
 800e68a:	464b      	mov	r3, r9
 800e68c:	f7f1 ffb4 	bl	80005f8 <__aeabi_dmul>
 800e690:	4b86      	ldr	r3, [pc, #536]	; (800e8ac <_dtoa_r+0x64c>)
 800e692:	2200      	movs	r2, #0
 800e694:	f7f1 fdfa 	bl	800028c <__adddf3>
 800e698:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e69c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6a0:	9303      	str	r3, [sp, #12]
 800e6a2:	2e00      	cmp	r6, #0
 800e6a4:	d158      	bne.n	800e758 <_dtoa_r+0x4f8>
 800e6a6:	4b82      	ldr	r3, [pc, #520]	; (800e8b0 <_dtoa_r+0x650>)
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	4640      	mov	r0, r8
 800e6ac:	4649      	mov	r1, r9
 800e6ae:	f7f1 fdeb 	bl	8000288 <__aeabi_dsub>
 800e6b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e6b6:	4680      	mov	r8, r0
 800e6b8:	4689      	mov	r9, r1
 800e6ba:	f7f2 fa2d 	bl	8000b18 <__aeabi_dcmpgt>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	f040 8296 	bne.w	800ebf0 <_dtoa_r+0x990>
 800e6c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e6c8:	4640      	mov	r0, r8
 800e6ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6ce:	4649      	mov	r1, r9
 800e6d0:	f7f2 fa04 	bl	8000adc <__aeabi_dcmplt>
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	f040 8289 	bne.w	800ebec <_dtoa_r+0x98c>
 800e6da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e6de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	f2c0 814e 	blt.w	800e982 <_dtoa_r+0x722>
 800e6e6:	f1bb 0f0e 	cmp.w	fp, #14
 800e6ea:	f300 814a 	bgt.w	800e982 <_dtoa_r+0x722>
 800e6ee:	4b6b      	ldr	r3, [pc, #428]	; (800e89c <_dtoa_r+0x63c>)
 800e6f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e6f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	f280 80dc 	bge.w	800e8b8 <_dtoa_r+0x658>
 800e700:	9b04      	ldr	r3, [sp, #16]
 800e702:	2b00      	cmp	r3, #0
 800e704:	f300 80d8 	bgt.w	800e8b8 <_dtoa_r+0x658>
 800e708:	f040 826f 	bne.w	800ebea <_dtoa_r+0x98a>
 800e70c:	4b68      	ldr	r3, [pc, #416]	; (800e8b0 <_dtoa_r+0x650>)
 800e70e:	2200      	movs	r2, #0
 800e710:	4640      	mov	r0, r8
 800e712:	4649      	mov	r1, r9
 800e714:	f7f1 ff70 	bl	80005f8 <__aeabi_dmul>
 800e718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e71c:	f7f2 f9f2 	bl	8000b04 <__aeabi_dcmpge>
 800e720:	9e04      	ldr	r6, [sp, #16]
 800e722:	4637      	mov	r7, r6
 800e724:	2800      	cmp	r0, #0
 800e726:	f040 8245 	bne.w	800ebb4 <_dtoa_r+0x954>
 800e72a:	9d00      	ldr	r5, [sp, #0]
 800e72c:	2331      	movs	r3, #49	; 0x31
 800e72e:	f805 3b01 	strb.w	r3, [r5], #1
 800e732:	f10b 0b01 	add.w	fp, fp, #1
 800e736:	e241      	b.n	800ebbc <_dtoa_r+0x95c>
 800e738:	07f2      	lsls	r2, r6, #31
 800e73a:	d505      	bpl.n	800e748 <_dtoa_r+0x4e8>
 800e73c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e740:	f7f1 ff5a 	bl	80005f8 <__aeabi_dmul>
 800e744:	3501      	adds	r5, #1
 800e746:	2301      	movs	r3, #1
 800e748:	1076      	asrs	r6, r6, #1
 800e74a:	3708      	adds	r7, #8
 800e74c:	e773      	b.n	800e636 <_dtoa_r+0x3d6>
 800e74e:	2502      	movs	r5, #2
 800e750:	e775      	b.n	800e63e <_dtoa_r+0x3de>
 800e752:	9e04      	ldr	r6, [sp, #16]
 800e754:	465f      	mov	r7, fp
 800e756:	e792      	b.n	800e67e <_dtoa_r+0x41e>
 800e758:	9900      	ldr	r1, [sp, #0]
 800e75a:	4b50      	ldr	r3, [pc, #320]	; (800e89c <_dtoa_r+0x63c>)
 800e75c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e760:	4431      	add	r1, r6
 800e762:	9102      	str	r1, [sp, #8]
 800e764:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e766:	eeb0 9a47 	vmov.f32	s18, s14
 800e76a:	eef0 9a67 	vmov.f32	s19, s15
 800e76e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e772:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e776:	2900      	cmp	r1, #0
 800e778:	d044      	beq.n	800e804 <_dtoa_r+0x5a4>
 800e77a:	494e      	ldr	r1, [pc, #312]	; (800e8b4 <_dtoa_r+0x654>)
 800e77c:	2000      	movs	r0, #0
 800e77e:	f7f2 f865 	bl	800084c <__aeabi_ddiv>
 800e782:	ec53 2b19 	vmov	r2, r3, d9
 800e786:	f7f1 fd7f 	bl	8000288 <__aeabi_dsub>
 800e78a:	9d00      	ldr	r5, [sp, #0]
 800e78c:	ec41 0b19 	vmov	d9, r0, r1
 800e790:	4649      	mov	r1, r9
 800e792:	4640      	mov	r0, r8
 800e794:	f7f2 f9e0 	bl	8000b58 <__aeabi_d2iz>
 800e798:	4606      	mov	r6, r0
 800e79a:	f7f1 fec3 	bl	8000524 <__aeabi_i2d>
 800e79e:	4602      	mov	r2, r0
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	4640      	mov	r0, r8
 800e7a4:	4649      	mov	r1, r9
 800e7a6:	f7f1 fd6f 	bl	8000288 <__aeabi_dsub>
 800e7aa:	3630      	adds	r6, #48	; 0x30
 800e7ac:	f805 6b01 	strb.w	r6, [r5], #1
 800e7b0:	ec53 2b19 	vmov	r2, r3, d9
 800e7b4:	4680      	mov	r8, r0
 800e7b6:	4689      	mov	r9, r1
 800e7b8:	f7f2 f990 	bl	8000adc <__aeabi_dcmplt>
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	d164      	bne.n	800e88a <_dtoa_r+0x62a>
 800e7c0:	4642      	mov	r2, r8
 800e7c2:	464b      	mov	r3, r9
 800e7c4:	4937      	ldr	r1, [pc, #220]	; (800e8a4 <_dtoa_r+0x644>)
 800e7c6:	2000      	movs	r0, #0
 800e7c8:	f7f1 fd5e 	bl	8000288 <__aeabi_dsub>
 800e7cc:	ec53 2b19 	vmov	r2, r3, d9
 800e7d0:	f7f2 f984 	bl	8000adc <__aeabi_dcmplt>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	f040 80b6 	bne.w	800e946 <_dtoa_r+0x6e6>
 800e7da:	9b02      	ldr	r3, [sp, #8]
 800e7dc:	429d      	cmp	r5, r3
 800e7de:	f43f af7c 	beq.w	800e6da <_dtoa_r+0x47a>
 800e7e2:	4b31      	ldr	r3, [pc, #196]	; (800e8a8 <_dtoa_r+0x648>)
 800e7e4:	ec51 0b19 	vmov	r0, r1, d9
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	f7f1 ff05 	bl	80005f8 <__aeabi_dmul>
 800e7ee:	4b2e      	ldr	r3, [pc, #184]	; (800e8a8 <_dtoa_r+0x648>)
 800e7f0:	ec41 0b19 	vmov	d9, r0, r1
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	4640      	mov	r0, r8
 800e7f8:	4649      	mov	r1, r9
 800e7fa:	f7f1 fefd 	bl	80005f8 <__aeabi_dmul>
 800e7fe:	4680      	mov	r8, r0
 800e800:	4689      	mov	r9, r1
 800e802:	e7c5      	b.n	800e790 <_dtoa_r+0x530>
 800e804:	ec51 0b17 	vmov	r0, r1, d7
 800e808:	f7f1 fef6 	bl	80005f8 <__aeabi_dmul>
 800e80c:	9b02      	ldr	r3, [sp, #8]
 800e80e:	9d00      	ldr	r5, [sp, #0]
 800e810:	930f      	str	r3, [sp, #60]	; 0x3c
 800e812:	ec41 0b19 	vmov	d9, r0, r1
 800e816:	4649      	mov	r1, r9
 800e818:	4640      	mov	r0, r8
 800e81a:	f7f2 f99d 	bl	8000b58 <__aeabi_d2iz>
 800e81e:	4606      	mov	r6, r0
 800e820:	f7f1 fe80 	bl	8000524 <__aeabi_i2d>
 800e824:	3630      	adds	r6, #48	; 0x30
 800e826:	4602      	mov	r2, r0
 800e828:	460b      	mov	r3, r1
 800e82a:	4640      	mov	r0, r8
 800e82c:	4649      	mov	r1, r9
 800e82e:	f7f1 fd2b 	bl	8000288 <__aeabi_dsub>
 800e832:	f805 6b01 	strb.w	r6, [r5], #1
 800e836:	9b02      	ldr	r3, [sp, #8]
 800e838:	429d      	cmp	r5, r3
 800e83a:	4680      	mov	r8, r0
 800e83c:	4689      	mov	r9, r1
 800e83e:	f04f 0200 	mov.w	r2, #0
 800e842:	d124      	bne.n	800e88e <_dtoa_r+0x62e>
 800e844:	4b1b      	ldr	r3, [pc, #108]	; (800e8b4 <_dtoa_r+0x654>)
 800e846:	ec51 0b19 	vmov	r0, r1, d9
 800e84a:	f7f1 fd1f 	bl	800028c <__adddf3>
 800e84e:	4602      	mov	r2, r0
 800e850:	460b      	mov	r3, r1
 800e852:	4640      	mov	r0, r8
 800e854:	4649      	mov	r1, r9
 800e856:	f7f2 f95f 	bl	8000b18 <__aeabi_dcmpgt>
 800e85a:	2800      	cmp	r0, #0
 800e85c:	d173      	bne.n	800e946 <_dtoa_r+0x6e6>
 800e85e:	ec53 2b19 	vmov	r2, r3, d9
 800e862:	4914      	ldr	r1, [pc, #80]	; (800e8b4 <_dtoa_r+0x654>)
 800e864:	2000      	movs	r0, #0
 800e866:	f7f1 fd0f 	bl	8000288 <__aeabi_dsub>
 800e86a:	4602      	mov	r2, r0
 800e86c:	460b      	mov	r3, r1
 800e86e:	4640      	mov	r0, r8
 800e870:	4649      	mov	r1, r9
 800e872:	f7f2 f933 	bl	8000adc <__aeabi_dcmplt>
 800e876:	2800      	cmp	r0, #0
 800e878:	f43f af2f 	beq.w	800e6da <_dtoa_r+0x47a>
 800e87c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e87e:	1e6b      	subs	r3, r5, #1
 800e880:	930f      	str	r3, [sp, #60]	; 0x3c
 800e882:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e886:	2b30      	cmp	r3, #48	; 0x30
 800e888:	d0f8      	beq.n	800e87c <_dtoa_r+0x61c>
 800e88a:	46bb      	mov	fp, r7
 800e88c:	e04a      	b.n	800e924 <_dtoa_r+0x6c4>
 800e88e:	4b06      	ldr	r3, [pc, #24]	; (800e8a8 <_dtoa_r+0x648>)
 800e890:	f7f1 feb2 	bl	80005f8 <__aeabi_dmul>
 800e894:	4680      	mov	r8, r0
 800e896:	4689      	mov	r9, r1
 800e898:	e7bd      	b.n	800e816 <_dtoa_r+0x5b6>
 800e89a:	bf00      	nop
 800e89c:	08013aa0 	.word	0x08013aa0
 800e8a0:	08013a78 	.word	0x08013a78
 800e8a4:	3ff00000 	.word	0x3ff00000
 800e8a8:	40240000 	.word	0x40240000
 800e8ac:	401c0000 	.word	0x401c0000
 800e8b0:	40140000 	.word	0x40140000
 800e8b4:	3fe00000 	.word	0x3fe00000
 800e8b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e8bc:	9d00      	ldr	r5, [sp, #0]
 800e8be:	4642      	mov	r2, r8
 800e8c0:	464b      	mov	r3, r9
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	4639      	mov	r1, r7
 800e8c6:	f7f1 ffc1 	bl	800084c <__aeabi_ddiv>
 800e8ca:	f7f2 f945 	bl	8000b58 <__aeabi_d2iz>
 800e8ce:	9001      	str	r0, [sp, #4]
 800e8d0:	f7f1 fe28 	bl	8000524 <__aeabi_i2d>
 800e8d4:	4642      	mov	r2, r8
 800e8d6:	464b      	mov	r3, r9
 800e8d8:	f7f1 fe8e 	bl	80005f8 <__aeabi_dmul>
 800e8dc:	4602      	mov	r2, r0
 800e8de:	460b      	mov	r3, r1
 800e8e0:	4630      	mov	r0, r6
 800e8e2:	4639      	mov	r1, r7
 800e8e4:	f7f1 fcd0 	bl	8000288 <__aeabi_dsub>
 800e8e8:	9e01      	ldr	r6, [sp, #4]
 800e8ea:	9f04      	ldr	r7, [sp, #16]
 800e8ec:	3630      	adds	r6, #48	; 0x30
 800e8ee:	f805 6b01 	strb.w	r6, [r5], #1
 800e8f2:	9e00      	ldr	r6, [sp, #0]
 800e8f4:	1bae      	subs	r6, r5, r6
 800e8f6:	42b7      	cmp	r7, r6
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	460b      	mov	r3, r1
 800e8fc:	d134      	bne.n	800e968 <_dtoa_r+0x708>
 800e8fe:	f7f1 fcc5 	bl	800028c <__adddf3>
 800e902:	4642      	mov	r2, r8
 800e904:	464b      	mov	r3, r9
 800e906:	4606      	mov	r6, r0
 800e908:	460f      	mov	r7, r1
 800e90a:	f7f2 f905 	bl	8000b18 <__aeabi_dcmpgt>
 800e90e:	b9c8      	cbnz	r0, 800e944 <_dtoa_r+0x6e4>
 800e910:	4642      	mov	r2, r8
 800e912:	464b      	mov	r3, r9
 800e914:	4630      	mov	r0, r6
 800e916:	4639      	mov	r1, r7
 800e918:	f7f2 f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e91c:	b110      	cbz	r0, 800e924 <_dtoa_r+0x6c4>
 800e91e:	9b01      	ldr	r3, [sp, #4]
 800e920:	07db      	lsls	r3, r3, #31
 800e922:	d40f      	bmi.n	800e944 <_dtoa_r+0x6e4>
 800e924:	4651      	mov	r1, sl
 800e926:	4620      	mov	r0, r4
 800e928:	f000 fbcc 	bl	800f0c4 <_Bfree>
 800e92c:	2300      	movs	r3, #0
 800e92e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e930:	702b      	strb	r3, [r5, #0]
 800e932:	f10b 0301 	add.w	r3, fp, #1
 800e936:	6013      	str	r3, [r2, #0]
 800e938:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f43f ace2 	beq.w	800e304 <_dtoa_r+0xa4>
 800e940:	601d      	str	r5, [r3, #0]
 800e942:	e4df      	b.n	800e304 <_dtoa_r+0xa4>
 800e944:	465f      	mov	r7, fp
 800e946:	462b      	mov	r3, r5
 800e948:	461d      	mov	r5, r3
 800e94a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e94e:	2a39      	cmp	r2, #57	; 0x39
 800e950:	d106      	bne.n	800e960 <_dtoa_r+0x700>
 800e952:	9a00      	ldr	r2, [sp, #0]
 800e954:	429a      	cmp	r2, r3
 800e956:	d1f7      	bne.n	800e948 <_dtoa_r+0x6e8>
 800e958:	9900      	ldr	r1, [sp, #0]
 800e95a:	2230      	movs	r2, #48	; 0x30
 800e95c:	3701      	adds	r7, #1
 800e95e:	700a      	strb	r2, [r1, #0]
 800e960:	781a      	ldrb	r2, [r3, #0]
 800e962:	3201      	adds	r2, #1
 800e964:	701a      	strb	r2, [r3, #0]
 800e966:	e790      	b.n	800e88a <_dtoa_r+0x62a>
 800e968:	4ba3      	ldr	r3, [pc, #652]	; (800ebf8 <_dtoa_r+0x998>)
 800e96a:	2200      	movs	r2, #0
 800e96c:	f7f1 fe44 	bl	80005f8 <__aeabi_dmul>
 800e970:	2200      	movs	r2, #0
 800e972:	2300      	movs	r3, #0
 800e974:	4606      	mov	r6, r0
 800e976:	460f      	mov	r7, r1
 800e978:	f7f2 f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	d09e      	beq.n	800e8be <_dtoa_r+0x65e>
 800e980:	e7d0      	b.n	800e924 <_dtoa_r+0x6c4>
 800e982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e984:	2a00      	cmp	r2, #0
 800e986:	f000 80ca 	beq.w	800eb1e <_dtoa_r+0x8be>
 800e98a:	9a07      	ldr	r2, [sp, #28]
 800e98c:	2a01      	cmp	r2, #1
 800e98e:	f300 80ad 	bgt.w	800eaec <_dtoa_r+0x88c>
 800e992:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e994:	2a00      	cmp	r2, #0
 800e996:	f000 80a5 	beq.w	800eae4 <_dtoa_r+0x884>
 800e99a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e99e:	9e08      	ldr	r6, [sp, #32]
 800e9a0:	9d05      	ldr	r5, [sp, #20]
 800e9a2:	9a05      	ldr	r2, [sp, #20]
 800e9a4:	441a      	add	r2, r3
 800e9a6:	9205      	str	r2, [sp, #20]
 800e9a8:	9a06      	ldr	r2, [sp, #24]
 800e9aa:	2101      	movs	r1, #1
 800e9ac:	441a      	add	r2, r3
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	9206      	str	r2, [sp, #24]
 800e9b2:	f000 fc87 	bl	800f2c4 <__i2b>
 800e9b6:	4607      	mov	r7, r0
 800e9b8:	b165      	cbz	r5, 800e9d4 <_dtoa_r+0x774>
 800e9ba:	9b06      	ldr	r3, [sp, #24]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	dd09      	ble.n	800e9d4 <_dtoa_r+0x774>
 800e9c0:	42ab      	cmp	r3, r5
 800e9c2:	9a05      	ldr	r2, [sp, #20]
 800e9c4:	bfa8      	it	ge
 800e9c6:	462b      	movge	r3, r5
 800e9c8:	1ad2      	subs	r2, r2, r3
 800e9ca:	9205      	str	r2, [sp, #20]
 800e9cc:	9a06      	ldr	r2, [sp, #24]
 800e9ce:	1aed      	subs	r5, r5, r3
 800e9d0:	1ad3      	subs	r3, r2, r3
 800e9d2:	9306      	str	r3, [sp, #24]
 800e9d4:	9b08      	ldr	r3, [sp, #32]
 800e9d6:	b1f3      	cbz	r3, 800ea16 <_dtoa_r+0x7b6>
 800e9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	f000 80a3 	beq.w	800eb26 <_dtoa_r+0x8c6>
 800e9e0:	2e00      	cmp	r6, #0
 800e9e2:	dd10      	ble.n	800ea06 <_dtoa_r+0x7a6>
 800e9e4:	4639      	mov	r1, r7
 800e9e6:	4632      	mov	r2, r6
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	f000 fd2b 	bl	800f444 <__pow5mult>
 800e9ee:	4652      	mov	r2, sl
 800e9f0:	4601      	mov	r1, r0
 800e9f2:	4607      	mov	r7, r0
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	f000 fc7b 	bl	800f2f0 <__multiply>
 800e9fa:	4651      	mov	r1, sl
 800e9fc:	4680      	mov	r8, r0
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f000 fb60 	bl	800f0c4 <_Bfree>
 800ea04:	46c2      	mov	sl, r8
 800ea06:	9b08      	ldr	r3, [sp, #32]
 800ea08:	1b9a      	subs	r2, r3, r6
 800ea0a:	d004      	beq.n	800ea16 <_dtoa_r+0x7b6>
 800ea0c:	4651      	mov	r1, sl
 800ea0e:	4620      	mov	r0, r4
 800ea10:	f000 fd18 	bl	800f444 <__pow5mult>
 800ea14:	4682      	mov	sl, r0
 800ea16:	2101      	movs	r1, #1
 800ea18:	4620      	mov	r0, r4
 800ea1a:	f000 fc53 	bl	800f2c4 <__i2b>
 800ea1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	4606      	mov	r6, r0
 800ea24:	f340 8081 	ble.w	800eb2a <_dtoa_r+0x8ca>
 800ea28:	461a      	mov	r2, r3
 800ea2a:	4601      	mov	r1, r0
 800ea2c:	4620      	mov	r0, r4
 800ea2e:	f000 fd09 	bl	800f444 <__pow5mult>
 800ea32:	9b07      	ldr	r3, [sp, #28]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	4606      	mov	r6, r0
 800ea38:	dd7a      	ble.n	800eb30 <_dtoa_r+0x8d0>
 800ea3a:	f04f 0800 	mov.w	r8, #0
 800ea3e:	6933      	ldr	r3, [r6, #16]
 800ea40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ea44:	6918      	ldr	r0, [r3, #16]
 800ea46:	f000 fbef 	bl	800f228 <__hi0bits>
 800ea4a:	f1c0 0020 	rsb	r0, r0, #32
 800ea4e:	9b06      	ldr	r3, [sp, #24]
 800ea50:	4418      	add	r0, r3
 800ea52:	f010 001f 	ands.w	r0, r0, #31
 800ea56:	f000 8094 	beq.w	800eb82 <_dtoa_r+0x922>
 800ea5a:	f1c0 0320 	rsb	r3, r0, #32
 800ea5e:	2b04      	cmp	r3, #4
 800ea60:	f340 8085 	ble.w	800eb6e <_dtoa_r+0x90e>
 800ea64:	9b05      	ldr	r3, [sp, #20]
 800ea66:	f1c0 001c 	rsb	r0, r0, #28
 800ea6a:	4403      	add	r3, r0
 800ea6c:	9305      	str	r3, [sp, #20]
 800ea6e:	9b06      	ldr	r3, [sp, #24]
 800ea70:	4403      	add	r3, r0
 800ea72:	4405      	add	r5, r0
 800ea74:	9306      	str	r3, [sp, #24]
 800ea76:	9b05      	ldr	r3, [sp, #20]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	dd05      	ble.n	800ea88 <_dtoa_r+0x828>
 800ea7c:	4651      	mov	r1, sl
 800ea7e:	461a      	mov	r2, r3
 800ea80:	4620      	mov	r0, r4
 800ea82:	f000 fd39 	bl	800f4f8 <__lshift>
 800ea86:	4682      	mov	sl, r0
 800ea88:	9b06      	ldr	r3, [sp, #24]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	dd05      	ble.n	800ea9a <_dtoa_r+0x83a>
 800ea8e:	4631      	mov	r1, r6
 800ea90:	461a      	mov	r2, r3
 800ea92:	4620      	mov	r0, r4
 800ea94:	f000 fd30 	bl	800f4f8 <__lshift>
 800ea98:	4606      	mov	r6, r0
 800ea9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d072      	beq.n	800eb86 <_dtoa_r+0x926>
 800eaa0:	4631      	mov	r1, r6
 800eaa2:	4650      	mov	r0, sl
 800eaa4:	f000 fd94 	bl	800f5d0 <__mcmp>
 800eaa8:	2800      	cmp	r0, #0
 800eaaa:	da6c      	bge.n	800eb86 <_dtoa_r+0x926>
 800eaac:	2300      	movs	r3, #0
 800eaae:	4651      	mov	r1, sl
 800eab0:	220a      	movs	r2, #10
 800eab2:	4620      	mov	r0, r4
 800eab4:	f000 fb28 	bl	800f108 <__multadd>
 800eab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eabe:	4682      	mov	sl, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f000 81b0 	beq.w	800ee26 <_dtoa_r+0xbc6>
 800eac6:	2300      	movs	r3, #0
 800eac8:	4639      	mov	r1, r7
 800eaca:	220a      	movs	r2, #10
 800eacc:	4620      	mov	r0, r4
 800eace:	f000 fb1b 	bl	800f108 <__multadd>
 800ead2:	9b01      	ldr	r3, [sp, #4]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	4607      	mov	r7, r0
 800ead8:	f300 8096 	bgt.w	800ec08 <_dtoa_r+0x9a8>
 800eadc:	9b07      	ldr	r3, [sp, #28]
 800eade:	2b02      	cmp	r3, #2
 800eae0:	dc59      	bgt.n	800eb96 <_dtoa_r+0x936>
 800eae2:	e091      	b.n	800ec08 <_dtoa_r+0x9a8>
 800eae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eae6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eaea:	e758      	b.n	800e99e <_dtoa_r+0x73e>
 800eaec:	9b04      	ldr	r3, [sp, #16]
 800eaee:	1e5e      	subs	r6, r3, #1
 800eaf0:	9b08      	ldr	r3, [sp, #32]
 800eaf2:	42b3      	cmp	r3, r6
 800eaf4:	bfbf      	itttt	lt
 800eaf6:	9b08      	ldrlt	r3, [sp, #32]
 800eaf8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800eafa:	9608      	strlt	r6, [sp, #32]
 800eafc:	1af3      	sublt	r3, r6, r3
 800eafe:	bfb4      	ite	lt
 800eb00:	18d2      	addlt	r2, r2, r3
 800eb02:	1b9e      	subge	r6, r3, r6
 800eb04:	9b04      	ldr	r3, [sp, #16]
 800eb06:	bfbc      	itt	lt
 800eb08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800eb0a:	2600      	movlt	r6, #0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	bfb7      	itett	lt
 800eb10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800eb14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800eb18:	1a9d      	sublt	r5, r3, r2
 800eb1a:	2300      	movlt	r3, #0
 800eb1c:	e741      	b.n	800e9a2 <_dtoa_r+0x742>
 800eb1e:	9e08      	ldr	r6, [sp, #32]
 800eb20:	9d05      	ldr	r5, [sp, #20]
 800eb22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800eb24:	e748      	b.n	800e9b8 <_dtoa_r+0x758>
 800eb26:	9a08      	ldr	r2, [sp, #32]
 800eb28:	e770      	b.n	800ea0c <_dtoa_r+0x7ac>
 800eb2a:	9b07      	ldr	r3, [sp, #28]
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	dc19      	bgt.n	800eb64 <_dtoa_r+0x904>
 800eb30:	9b02      	ldr	r3, [sp, #8]
 800eb32:	b9bb      	cbnz	r3, 800eb64 <_dtoa_r+0x904>
 800eb34:	9b03      	ldr	r3, [sp, #12]
 800eb36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb3a:	b99b      	cbnz	r3, 800eb64 <_dtoa_r+0x904>
 800eb3c:	9b03      	ldr	r3, [sp, #12]
 800eb3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eb42:	0d1b      	lsrs	r3, r3, #20
 800eb44:	051b      	lsls	r3, r3, #20
 800eb46:	b183      	cbz	r3, 800eb6a <_dtoa_r+0x90a>
 800eb48:	9b05      	ldr	r3, [sp, #20]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	9305      	str	r3, [sp, #20]
 800eb4e:	9b06      	ldr	r3, [sp, #24]
 800eb50:	3301      	adds	r3, #1
 800eb52:	9306      	str	r3, [sp, #24]
 800eb54:	f04f 0801 	mov.w	r8, #1
 800eb58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	f47f af6f 	bne.w	800ea3e <_dtoa_r+0x7de>
 800eb60:	2001      	movs	r0, #1
 800eb62:	e774      	b.n	800ea4e <_dtoa_r+0x7ee>
 800eb64:	f04f 0800 	mov.w	r8, #0
 800eb68:	e7f6      	b.n	800eb58 <_dtoa_r+0x8f8>
 800eb6a:	4698      	mov	r8, r3
 800eb6c:	e7f4      	b.n	800eb58 <_dtoa_r+0x8f8>
 800eb6e:	d082      	beq.n	800ea76 <_dtoa_r+0x816>
 800eb70:	9a05      	ldr	r2, [sp, #20]
 800eb72:	331c      	adds	r3, #28
 800eb74:	441a      	add	r2, r3
 800eb76:	9205      	str	r2, [sp, #20]
 800eb78:	9a06      	ldr	r2, [sp, #24]
 800eb7a:	441a      	add	r2, r3
 800eb7c:	441d      	add	r5, r3
 800eb7e:	9206      	str	r2, [sp, #24]
 800eb80:	e779      	b.n	800ea76 <_dtoa_r+0x816>
 800eb82:	4603      	mov	r3, r0
 800eb84:	e7f4      	b.n	800eb70 <_dtoa_r+0x910>
 800eb86:	9b04      	ldr	r3, [sp, #16]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	dc37      	bgt.n	800ebfc <_dtoa_r+0x99c>
 800eb8c:	9b07      	ldr	r3, [sp, #28]
 800eb8e:	2b02      	cmp	r3, #2
 800eb90:	dd34      	ble.n	800ebfc <_dtoa_r+0x99c>
 800eb92:	9b04      	ldr	r3, [sp, #16]
 800eb94:	9301      	str	r3, [sp, #4]
 800eb96:	9b01      	ldr	r3, [sp, #4]
 800eb98:	b963      	cbnz	r3, 800ebb4 <_dtoa_r+0x954>
 800eb9a:	4631      	mov	r1, r6
 800eb9c:	2205      	movs	r2, #5
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f000 fab2 	bl	800f108 <__multadd>
 800eba4:	4601      	mov	r1, r0
 800eba6:	4606      	mov	r6, r0
 800eba8:	4650      	mov	r0, sl
 800ebaa:	f000 fd11 	bl	800f5d0 <__mcmp>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	f73f adbb 	bgt.w	800e72a <_dtoa_r+0x4ca>
 800ebb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebb6:	9d00      	ldr	r5, [sp, #0]
 800ebb8:	ea6f 0b03 	mvn.w	fp, r3
 800ebbc:	f04f 0800 	mov.w	r8, #0
 800ebc0:	4631      	mov	r1, r6
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	f000 fa7e 	bl	800f0c4 <_Bfree>
 800ebc8:	2f00      	cmp	r7, #0
 800ebca:	f43f aeab 	beq.w	800e924 <_dtoa_r+0x6c4>
 800ebce:	f1b8 0f00 	cmp.w	r8, #0
 800ebd2:	d005      	beq.n	800ebe0 <_dtoa_r+0x980>
 800ebd4:	45b8      	cmp	r8, r7
 800ebd6:	d003      	beq.n	800ebe0 <_dtoa_r+0x980>
 800ebd8:	4641      	mov	r1, r8
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f000 fa72 	bl	800f0c4 <_Bfree>
 800ebe0:	4639      	mov	r1, r7
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f000 fa6e 	bl	800f0c4 <_Bfree>
 800ebe8:	e69c      	b.n	800e924 <_dtoa_r+0x6c4>
 800ebea:	2600      	movs	r6, #0
 800ebec:	4637      	mov	r7, r6
 800ebee:	e7e1      	b.n	800ebb4 <_dtoa_r+0x954>
 800ebf0:	46bb      	mov	fp, r7
 800ebf2:	4637      	mov	r7, r6
 800ebf4:	e599      	b.n	800e72a <_dtoa_r+0x4ca>
 800ebf6:	bf00      	nop
 800ebf8:	40240000 	.word	0x40240000
 800ebfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	f000 80c8 	beq.w	800ed94 <_dtoa_r+0xb34>
 800ec04:	9b04      	ldr	r3, [sp, #16]
 800ec06:	9301      	str	r3, [sp, #4]
 800ec08:	2d00      	cmp	r5, #0
 800ec0a:	dd05      	ble.n	800ec18 <_dtoa_r+0x9b8>
 800ec0c:	4639      	mov	r1, r7
 800ec0e:	462a      	mov	r2, r5
 800ec10:	4620      	mov	r0, r4
 800ec12:	f000 fc71 	bl	800f4f8 <__lshift>
 800ec16:	4607      	mov	r7, r0
 800ec18:	f1b8 0f00 	cmp.w	r8, #0
 800ec1c:	d05b      	beq.n	800ecd6 <_dtoa_r+0xa76>
 800ec1e:	6879      	ldr	r1, [r7, #4]
 800ec20:	4620      	mov	r0, r4
 800ec22:	f000 fa0f 	bl	800f044 <_Balloc>
 800ec26:	4605      	mov	r5, r0
 800ec28:	b928      	cbnz	r0, 800ec36 <_dtoa_r+0x9d6>
 800ec2a:	4b83      	ldr	r3, [pc, #524]	; (800ee38 <_dtoa_r+0xbd8>)
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ec32:	f7ff bb2e 	b.w	800e292 <_dtoa_r+0x32>
 800ec36:	693a      	ldr	r2, [r7, #16]
 800ec38:	3202      	adds	r2, #2
 800ec3a:	0092      	lsls	r2, r2, #2
 800ec3c:	f107 010c 	add.w	r1, r7, #12
 800ec40:	300c      	adds	r0, #12
 800ec42:	f7ff fa70 	bl	800e126 <memcpy>
 800ec46:	2201      	movs	r2, #1
 800ec48:	4629      	mov	r1, r5
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f000 fc54 	bl	800f4f8 <__lshift>
 800ec50:	9b00      	ldr	r3, [sp, #0]
 800ec52:	3301      	adds	r3, #1
 800ec54:	9304      	str	r3, [sp, #16]
 800ec56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	9308      	str	r3, [sp, #32]
 800ec5e:	9b02      	ldr	r3, [sp, #8]
 800ec60:	f003 0301 	and.w	r3, r3, #1
 800ec64:	46b8      	mov	r8, r7
 800ec66:	9306      	str	r3, [sp, #24]
 800ec68:	4607      	mov	r7, r0
 800ec6a:	9b04      	ldr	r3, [sp, #16]
 800ec6c:	4631      	mov	r1, r6
 800ec6e:	3b01      	subs	r3, #1
 800ec70:	4650      	mov	r0, sl
 800ec72:	9301      	str	r3, [sp, #4]
 800ec74:	f7ff fa6c 	bl	800e150 <quorem>
 800ec78:	4641      	mov	r1, r8
 800ec7a:	9002      	str	r0, [sp, #8]
 800ec7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ec80:	4650      	mov	r0, sl
 800ec82:	f000 fca5 	bl	800f5d0 <__mcmp>
 800ec86:	463a      	mov	r2, r7
 800ec88:	9005      	str	r0, [sp, #20]
 800ec8a:	4631      	mov	r1, r6
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f000 fcbb 	bl	800f608 <__mdiff>
 800ec92:	68c2      	ldr	r2, [r0, #12]
 800ec94:	4605      	mov	r5, r0
 800ec96:	bb02      	cbnz	r2, 800ecda <_dtoa_r+0xa7a>
 800ec98:	4601      	mov	r1, r0
 800ec9a:	4650      	mov	r0, sl
 800ec9c:	f000 fc98 	bl	800f5d0 <__mcmp>
 800eca0:	4602      	mov	r2, r0
 800eca2:	4629      	mov	r1, r5
 800eca4:	4620      	mov	r0, r4
 800eca6:	9209      	str	r2, [sp, #36]	; 0x24
 800eca8:	f000 fa0c 	bl	800f0c4 <_Bfree>
 800ecac:	9b07      	ldr	r3, [sp, #28]
 800ecae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ecb0:	9d04      	ldr	r5, [sp, #16]
 800ecb2:	ea43 0102 	orr.w	r1, r3, r2
 800ecb6:	9b06      	ldr	r3, [sp, #24]
 800ecb8:	4319      	orrs	r1, r3
 800ecba:	d110      	bne.n	800ecde <_dtoa_r+0xa7e>
 800ecbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ecc0:	d029      	beq.n	800ed16 <_dtoa_r+0xab6>
 800ecc2:	9b05      	ldr	r3, [sp, #20]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	dd02      	ble.n	800ecce <_dtoa_r+0xa6e>
 800ecc8:	9b02      	ldr	r3, [sp, #8]
 800ecca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ecce:	9b01      	ldr	r3, [sp, #4]
 800ecd0:	f883 9000 	strb.w	r9, [r3]
 800ecd4:	e774      	b.n	800ebc0 <_dtoa_r+0x960>
 800ecd6:	4638      	mov	r0, r7
 800ecd8:	e7ba      	b.n	800ec50 <_dtoa_r+0x9f0>
 800ecda:	2201      	movs	r2, #1
 800ecdc:	e7e1      	b.n	800eca2 <_dtoa_r+0xa42>
 800ecde:	9b05      	ldr	r3, [sp, #20]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	db04      	blt.n	800ecee <_dtoa_r+0xa8e>
 800ece4:	9907      	ldr	r1, [sp, #28]
 800ece6:	430b      	orrs	r3, r1
 800ece8:	9906      	ldr	r1, [sp, #24]
 800ecea:	430b      	orrs	r3, r1
 800ecec:	d120      	bne.n	800ed30 <_dtoa_r+0xad0>
 800ecee:	2a00      	cmp	r2, #0
 800ecf0:	dded      	ble.n	800ecce <_dtoa_r+0xa6e>
 800ecf2:	4651      	mov	r1, sl
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f000 fbfe 	bl	800f4f8 <__lshift>
 800ecfc:	4631      	mov	r1, r6
 800ecfe:	4682      	mov	sl, r0
 800ed00:	f000 fc66 	bl	800f5d0 <__mcmp>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	dc03      	bgt.n	800ed10 <_dtoa_r+0xab0>
 800ed08:	d1e1      	bne.n	800ecce <_dtoa_r+0xa6e>
 800ed0a:	f019 0f01 	tst.w	r9, #1
 800ed0e:	d0de      	beq.n	800ecce <_dtoa_r+0xa6e>
 800ed10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ed14:	d1d8      	bne.n	800ecc8 <_dtoa_r+0xa68>
 800ed16:	9a01      	ldr	r2, [sp, #4]
 800ed18:	2339      	movs	r3, #57	; 0x39
 800ed1a:	7013      	strb	r3, [r2, #0]
 800ed1c:	462b      	mov	r3, r5
 800ed1e:	461d      	mov	r5, r3
 800ed20:	3b01      	subs	r3, #1
 800ed22:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ed26:	2a39      	cmp	r2, #57	; 0x39
 800ed28:	d06c      	beq.n	800ee04 <_dtoa_r+0xba4>
 800ed2a:	3201      	adds	r2, #1
 800ed2c:	701a      	strb	r2, [r3, #0]
 800ed2e:	e747      	b.n	800ebc0 <_dtoa_r+0x960>
 800ed30:	2a00      	cmp	r2, #0
 800ed32:	dd07      	ble.n	800ed44 <_dtoa_r+0xae4>
 800ed34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ed38:	d0ed      	beq.n	800ed16 <_dtoa_r+0xab6>
 800ed3a:	9a01      	ldr	r2, [sp, #4]
 800ed3c:	f109 0301 	add.w	r3, r9, #1
 800ed40:	7013      	strb	r3, [r2, #0]
 800ed42:	e73d      	b.n	800ebc0 <_dtoa_r+0x960>
 800ed44:	9b04      	ldr	r3, [sp, #16]
 800ed46:	9a08      	ldr	r2, [sp, #32]
 800ed48:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d043      	beq.n	800edd8 <_dtoa_r+0xb78>
 800ed50:	4651      	mov	r1, sl
 800ed52:	2300      	movs	r3, #0
 800ed54:	220a      	movs	r2, #10
 800ed56:	4620      	mov	r0, r4
 800ed58:	f000 f9d6 	bl	800f108 <__multadd>
 800ed5c:	45b8      	cmp	r8, r7
 800ed5e:	4682      	mov	sl, r0
 800ed60:	f04f 0300 	mov.w	r3, #0
 800ed64:	f04f 020a 	mov.w	r2, #10
 800ed68:	4641      	mov	r1, r8
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	d107      	bne.n	800ed7e <_dtoa_r+0xb1e>
 800ed6e:	f000 f9cb 	bl	800f108 <__multadd>
 800ed72:	4680      	mov	r8, r0
 800ed74:	4607      	mov	r7, r0
 800ed76:	9b04      	ldr	r3, [sp, #16]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	9304      	str	r3, [sp, #16]
 800ed7c:	e775      	b.n	800ec6a <_dtoa_r+0xa0a>
 800ed7e:	f000 f9c3 	bl	800f108 <__multadd>
 800ed82:	4639      	mov	r1, r7
 800ed84:	4680      	mov	r8, r0
 800ed86:	2300      	movs	r3, #0
 800ed88:	220a      	movs	r2, #10
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	f000 f9bc 	bl	800f108 <__multadd>
 800ed90:	4607      	mov	r7, r0
 800ed92:	e7f0      	b.n	800ed76 <_dtoa_r+0xb16>
 800ed94:	9b04      	ldr	r3, [sp, #16]
 800ed96:	9301      	str	r3, [sp, #4]
 800ed98:	9d00      	ldr	r5, [sp, #0]
 800ed9a:	4631      	mov	r1, r6
 800ed9c:	4650      	mov	r0, sl
 800ed9e:	f7ff f9d7 	bl	800e150 <quorem>
 800eda2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800eda6:	9b00      	ldr	r3, [sp, #0]
 800eda8:	f805 9b01 	strb.w	r9, [r5], #1
 800edac:	1aea      	subs	r2, r5, r3
 800edae:	9b01      	ldr	r3, [sp, #4]
 800edb0:	4293      	cmp	r3, r2
 800edb2:	dd07      	ble.n	800edc4 <_dtoa_r+0xb64>
 800edb4:	4651      	mov	r1, sl
 800edb6:	2300      	movs	r3, #0
 800edb8:	220a      	movs	r2, #10
 800edba:	4620      	mov	r0, r4
 800edbc:	f000 f9a4 	bl	800f108 <__multadd>
 800edc0:	4682      	mov	sl, r0
 800edc2:	e7ea      	b.n	800ed9a <_dtoa_r+0xb3a>
 800edc4:	9b01      	ldr	r3, [sp, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	bfc8      	it	gt
 800edca:	461d      	movgt	r5, r3
 800edcc:	9b00      	ldr	r3, [sp, #0]
 800edce:	bfd8      	it	le
 800edd0:	2501      	movle	r5, #1
 800edd2:	441d      	add	r5, r3
 800edd4:	f04f 0800 	mov.w	r8, #0
 800edd8:	4651      	mov	r1, sl
 800edda:	2201      	movs	r2, #1
 800eddc:	4620      	mov	r0, r4
 800edde:	f000 fb8b 	bl	800f4f8 <__lshift>
 800ede2:	4631      	mov	r1, r6
 800ede4:	4682      	mov	sl, r0
 800ede6:	f000 fbf3 	bl	800f5d0 <__mcmp>
 800edea:	2800      	cmp	r0, #0
 800edec:	dc96      	bgt.n	800ed1c <_dtoa_r+0xabc>
 800edee:	d102      	bne.n	800edf6 <_dtoa_r+0xb96>
 800edf0:	f019 0f01 	tst.w	r9, #1
 800edf4:	d192      	bne.n	800ed1c <_dtoa_r+0xabc>
 800edf6:	462b      	mov	r3, r5
 800edf8:	461d      	mov	r5, r3
 800edfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800edfe:	2a30      	cmp	r2, #48	; 0x30
 800ee00:	d0fa      	beq.n	800edf8 <_dtoa_r+0xb98>
 800ee02:	e6dd      	b.n	800ebc0 <_dtoa_r+0x960>
 800ee04:	9a00      	ldr	r2, [sp, #0]
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d189      	bne.n	800ed1e <_dtoa_r+0xabe>
 800ee0a:	f10b 0b01 	add.w	fp, fp, #1
 800ee0e:	2331      	movs	r3, #49	; 0x31
 800ee10:	e796      	b.n	800ed40 <_dtoa_r+0xae0>
 800ee12:	4b0a      	ldr	r3, [pc, #40]	; (800ee3c <_dtoa_r+0xbdc>)
 800ee14:	f7ff ba99 	b.w	800e34a <_dtoa_r+0xea>
 800ee18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	f47f aa6d 	bne.w	800e2fa <_dtoa_r+0x9a>
 800ee20:	4b07      	ldr	r3, [pc, #28]	; (800ee40 <_dtoa_r+0xbe0>)
 800ee22:	f7ff ba92 	b.w	800e34a <_dtoa_r+0xea>
 800ee26:	9b01      	ldr	r3, [sp, #4]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	dcb5      	bgt.n	800ed98 <_dtoa_r+0xb38>
 800ee2c:	9b07      	ldr	r3, [sp, #28]
 800ee2e:	2b02      	cmp	r3, #2
 800ee30:	f73f aeb1 	bgt.w	800eb96 <_dtoa_r+0x936>
 800ee34:	e7b0      	b.n	800ed98 <_dtoa_r+0xb38>
 800ee36:	bf00      	nop
 800ee38:	08013a0b 	.word	0x08013a0b
 800ee3c:	08013cf0 	.word	0x08013cf0
 800ee40:	0801398f 	.word	0x0801398f

0800ee44 <_free_r>:
 800ee44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee46:	2900      	cmp	r1, #0
 800ee48:	d044      	beq.n	800eed4 <_free_r+0x90>
 800ee4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee4e:	9001      	str	r0, [sp, #4]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	f1a1 0404 	sub.w	r4, r1, #4
 800ee56:	bfb8      	it	lt
 800ee58:	18e4      	addlt	r4, r4, r3
 800ee5a:	f000 f8e7 	bl	800f02c <__malloc_lock>
 800ee5e:	4a1e      	ldr	r2, [pc, #120]	; (800eed8 <_free_r+0x94>)
 800ee60:	9801      	ldr	r0, [sp, #4]
 800ee62:	6813      	ldr	r3, [r2, #0]
 800ee64:	b933      	cbnz	r3, 800ee74 <_free_r+0x30>
 800ee66:	6063      	str	r3, [r4, #4]
 800ee68:	6014      	str	r4, [r2, #0]
 800ee6a:	b003      	add	sp, #12
 800ee6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee70:	f000 b8e2 	b.w	800f038 <__malloc_unlock>
 800ee74:	42a3      	cmp	r3, r4
 800ee76:	d908      	bls.n	800ee8a <_free_r+0x46>
 800ee78:	6825      	ldr	r5, [r4, #0]
 800ee7a:	1961      	adds	r1, r4, r5
 800ee7c:	428b      	cmp	r3, r1
 800ee7e:	bf01      	itttt	eq
 800ee80:	6819      	ldreq	r1, [r3, #0]
 800ee82:	685b      	ldreq	r3, [r3, #4]
 800ee84:	1949      	addeq	r1, r1, r5
 800ee86:	6021      	streq	r1, [r4, #0]
 800ee88:	e7ed      	b.n	800ee66 <_free_r+0x22>
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	b10b      	cbz	r3, 800ee94 <_free_r+0x50>
 800ee90:	42a3      	cmp	r3, r4
 800ee92:	d9fa      	bls.n	800ee8a <_free_r+0x46>
 800ee94:	6811      	ldr	r1, [r2, #0]
 800ee96:	1855      	adds	r5, r2, r1
 800ee98:	42a5      	cmp	r5, r4
 800ee9a:	d10b      	bne.n	800eeb4 <_free_r+0x70>
 800ee9c:	6824      	ldr	r4, [r4, #0]
 800ee9e:	4421      	add	r1, r4
 800eea0:	1854      	adds	r4, r2, r1
 800eea2:	42a3      	cmp	r3, r4
 800eea4:	6011      	str	r1, [r2, #0]
 800eea6:	d1e0      	bne.n	800ee6a <_free_r+0x26>
 800eea8:	681c      	ldr	r4, [r3, #0]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	6053      	str	r3, [r2, #4]
 800eeae:	440c      	add	r4, r1
 800eeb0:	6014      	str	r4, [r2, #0]
 800eeb2:	e7da      	b.n	800ee6a <_free_r+0x26>
 800eeb4:	d902      	bls.n	800eebc <_free_r+0x78>
 800eeb6:	230c      	movs	r3, #12
 800eeb8:	6003      	str	r3, [r0, #0]
 800eeba:	e7d6      	b.n	800ee6a <_free_r+0x26>
 800eebc:	6825      	ldr	r5, [r4, #0]
 800eebe:	1961      	adds	r1, r4, r5
 800eec0:	428b      	cmp	r3, r1
 800eec2:	bf04      	itt	eq
 800eec4:	6819      	ldreq	r1, [r3, #0]
 800eec6:	685b      	ldreq	r3, [r3, #4]
 800eec8:	6063      	str	r3, [r4, #4]
 800eeca:	bf04      	itt	eq
 800eecc:	1949      	addeq	r1, r1, r5
 800eece:	6021      	streq	r1, [r4, #0]
 800eed0:	6054      	str	r4, [r2, #4]
 800eed2:	e7ca      	b.n	800ee6a <_free_r+0x26>
 800eed4:	b003      	add	sp, #12
 800eed6:	bd30      	pop	{r4, r5, pc}
 800eed8:	20008c14 	.word	0x20008c14

0800eedc <malloc>:
 800eedc:	4b02      	ldr	r3, [pc, #8]	; (800eee8 <malloc+0xc>)
 800eede:	4601      	mov	r1, r0
 800eee0:	6818      	ldr	r0, [r3, #0]
 800eee2:	f000 b823 	b.w	800ef2c <_malloc_r>
 800eee6:	bf00      	nop
 800eee8:	20000130 	.word	0x20000130

0800eeec <sbrk_aligned>:
 800eeec:	b570      	push	{r4, r5, r6, lr}
 800eeee:	4e0e      	ldr	r6, [pc, #56]	; (800ef28 <sbrk_aligned+0x3c>)
 800eef0:	460c      	mov	r4, r1
 800eef2:	6831      	ldr	r1, [r6, #0]
 800eef4:	4605      	mov	r5, r0
 800eef6:	b911      	cbnz	r1, 800eefe <sbrk_aligned+0x12>
 800eef8:	f002 f9ae 	bl	8011258 <_sbrk_r>
 800eefc:	6030      	str	r0, [r6, #0]
 800eefe:	4621      	mov	r1, r4
 800ef00:	4628      	mov	r0, r5
 800ef02:	f002 f9a9 	bl	8011258 <_sbrk_r>
 800ef06:	1c43      	adds	r3, r0, #1
 800ef08:	d00a      	beq.n	800ef20 <sbrk_aligned+0x34>
 800ef0a:	1cc4      	adds	r4, r0, #3
 800ef0c:	f024 0403 	bic.w	r4, r4, #3
 800ef10:	42a0      	cmp	r0, r4
 800ef12:	d007      	beq.n	800ef24 <sbrk_aligned+0x38>
 800ef14:	1a21      	subs	r1, r4, r0
 800ef16:	4628      	mov	r0, r5
 800ef18:	f002 f99e 	bl	8011258 <_sbrk_r>
 800ef1c:	3001      	adds	r0, #1
 800ef1e:	d101      	bne.n	800ef24 <sbrk_aligned+0x38>
 800ef20:	f04f 34ff 	mov.w	r4, #4294967295
 800ef24:	4620      	mov	r0, r4
 800ef26:	bd70      	pop	{r4, r5, r6, pc}
 800ef28:	20008c18 	.word	0x20008c18

0800ef2c <_malloc_r>:
 800ef2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef30:	1ccd      	adds	r5, r1, #3
 800ef32:	f025 0503 	bic.w	r5, r5, #3
 800ef36:	3508      	adds	r5, #8
 800ef38:	2d0c      	cmp	r5, #12
 800ef3a:	bf38      	it	cc
 800ef3c:	250c      	movcc	r5, #12
 800ef3e:	2d00      	cmp	r5, #0
 800ef40:	4607      	mov	r7, r0
 800ef42:	db01      	blt.n	800ef48 <_malloc_r+0x1c>
 800ef44:	42a9      	cmp	r1, r5
 800ef46:	d905      	bls.n	800ef54 <_malloc_r+0x28>
 800ef48:	230c      	movs	r3, #12
 800ef4a:	603b      	str	r3, [r7, #0]
 800ef4c:	2600      	movs	r6, #0
 800ef4e:	4630      	mov	r0, r6
 800ef50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f028 <_malloc_r+0xfc>
 800ef58:	f000 f868 	bl	800f02c <__malloc_lock>
 800ef5c:	f8d8 3000 	ldr.w	r3, [r8]
 800ef60:	461c      	mov	r4, r3
 800ef62:	bb5c      	cbnz	r4, 800efbc <_malloc_r+0x90>
 800ef64:	4629      	mov	r1, r5
 800ef66:	4638      	mov	r0, r7
 800ef68:	f7ff ffc0 	bl	800eeec <sbrk_aligned>
 800ef6c:	1c43      	adds	r3, r0, #1
 800ef6e:	4604      	mov	r4, r0
 800ef70:	d155      	bne.n	800f01e <_malloc_r+0xf2>
 800ef72:	f8d8 4000 	ldr.w	r4, [r8]
 800ef76:	4626      	mov	r6, r4
 800ef78:	2e00      	cmp	r6, #0
 800ef7a:	d145      	bne.n	800f008 <_malloc_r+0xdc>
 800ef7c:	2c00      	cmp	r4, #0
 800ef7e:	d048      	beq.n	800f012 <_malloc_r+0xe6>
 800ef80:	6823      	ldr	r3, [r4, #0]
 800ef82:	4631      	mov	r1, r6
 800ef84:	4638      	mov	r0, r7
 800ef86:	eb04 0903 	add.w	r9, r4, r3
 800ef8a:	f002 f965 	bl	8011258 <_sbrk_r>
 800ef8e:	4581      	cmp	r9, r0
 800ef90:	d13f      	bne.n	800f012 <_malloc_r+0xe6>
 800ef92:	6821      	ldr	r1, [r4, #0]
 800ef94:	1a6d      	subs	r5, r5, r1
 800ef96:	4629      	mov	r1, r5
 800ef98:	4638      	mov	r0, r7
 800ef9a:	f7ff ffa7 	bl	800eeec <sbrk_aligned>
 800ef9e:	3001      	adds	r0, #1
 800efa0:	d037      	beq.n	800f012 <_malloc_r+0xe6>
 800efa2:	6823      	ldr	r3, [r4, #0]
 800efa4:	442b      	add	r3, r5
 800efa6:	6023      	str	r3, [r4, #0]
 800efa8:	f8d8 3000 	ldr.w	r3, [r8]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d038      	beq.n	800f022 <_malloc_r+0xf6>
 800efb0:	685a      	ldr	r2, [r3, #4]
 800efb2:	42a2      	cmp	r2, r4
 800efb4:	d12b      	bne.n	800f00e <_malloc_r+0xe2>
 800efb6:	2200      	movs	r2, #0
 800efb8:	605a      	str	r2, [r3, #4]
 800efba:	e00f      	b.n	800efdc <_malloc_r+0xb0>
 800efbc:	6822      	ldr	r2, [r4, #0]
 800efbe:	1b52      	subs	r2, r2, r5
 800efc0:	d41f      	bmi.n	800f002 <_malloc_r+0xd6>
 800efc2:	2a0b      	cmp	r2, #11
 800efc4:	d917      	bls.n	800eff6 <_malloc_r+0xca>
 800efc6:	1961      	adds	r1, r4, r5
 800efc8:	42a3      	cmp	r3, r4
 800efca:	6025      	str	r5, [r4, #0]
 800efcc:	bf18      	it	ne
 800efce:	6059      	strne	r1, [r3, #4]
 800efd0:	6863      	ldr	r3, [r4, #4]
 800efd2:	bf08      	it	eq
 800efd4:	f8c8 1000 	streq.w	r1, [r8]
 800efd8:	5162      	str	r2, [r4, r5]
 800efda:	604b      	str	r3, [r1, #4]
 800efdc:	4638      	mov	r0, r7
 800efde:	f104 060b 	add.w	r6, r4, #11
 800efe2:	f000 f829 	bl	800f038 <__malloc_unlock>
 800efe6:	f026 0607 	bic.w	r6, r6, #7
 800efea:	1d23      	adds	r3, r4, #4
 800efec:	1af2      	subs	r2, r6, r3
 800efee:	d0ae      	beq.n	800ef4e <_malloc_r+0x22>
 800eff0:	1b9b      	subs	r3, r3, r6
 800eff2:	50a3      	str	r3, [r4, r2]
 800eff4:	e7ab      	b.n	800ef4e <_malloc_r+0x22>
 800eff6:	42a3      	cmp	r3, r4
 800eff8:	6862      	ldr	r2, [r4, #4]
 800effa:	d1dd      	bne.n	800efb8 <_malloc_r+0x8c>
 800effc:	f8c8 2000 	str.w	r2, [r8]
 800f000:	e7ec      	b.n	800efdc <_malloc_r+0xb0>
 800f002:	4623      	mov	r3, r4
 800f004:	6864      	ldr	r4, [r4, #4]
 800f006:	e7ac      	b.n	800ef62 <_malloc_r+0x36>
 800f008:	4634      	mov	r4, r6
 800f00a:	6876      	ldr	r6, [r6, #4]
 800f00c:	e7b4      	b.n	800ef78 <_malloc_r+0x4c>
 800f00e:	4613      	mov	r3, r2
 800f010:	e7cc      	b.n	800efac <_malloc_r+0x80>
 800f012:	230c      	movs	r3, #12
 800f014:	603b      	str	r3, [r7, #0]
 800f016:	4638      	mov	r0, r7
 800f018:	f000 f80e 	bl	800f038 <__malloc_unlock>
 800f01c:	e797      	b.n	800ef4e <_malloc_r+0x22>
 800f01e:	6025      	str	r5, [r4, #0]
 800f020:	e7dc      	b.n	800efdc <_malloc_r+0xb0>
 800f022:	605b      	str	r3, [r3, #4]
 800f024:	deff      	udf	#255	; 0xff
 800f026:	bf00      	nop
 800f028:	20008c14 	.word	0x20008c14

0800f02c <__malloc_lock>:
 800f02c:	4801      	ldr	r0, [pc, #4]	; (800f034 <__malloc_lock+0x8>)
 800f02e:	f7ff b870 	b.w	800e112 <__retarget_lock_acquire_recursive>
 800f032:	bf00      	nop
 800f034:	20008c10 	.word	0x20008c10

0800f038 <__malloc_unlock>:
 800f038:	4801      	ldr	r0, [pc, #4]	; (800f040 <__malloc_unlock+0x8>)
 800f03a:	f7ff b86b 	b.w	800e114 <__retarget_lock_release_recursive>
 800f03e:	bf00      	nop
 800f040:	20008c10 	.word	0x20008c10

0800f044 <_Balloc>:
 800f044:	b570      	push	{r4, r5, r6, lr}
 800f046:	69c6      	ldr	r6, [r0, #28]
 800f048:	4604      	mov	r4, r0
 800f04a:	460d      	mov	r5, r1
 800f04c:	b976      	cbnz	r6, 800f06c <_Balloc+0x28>
 800f04e:	2010      	movs	r0, #16
 800f050:	f7ff ff44 	bl	800eedc <malloc>
 800f054:	4602      	mov	r2, r0
 800f056:	61e0      	str	r0, [r4, #28]
 800f058:	b920      	cbnz	r0, 800f064 <_Balloc+0x20>
 800f05a:	4b18      	ldr	r3, [pc, #96]	; (800f0bc <_Balloc+0x78>)
 800f05c:	4818      	ldr	r0, [pc, #96]	; (800f0c0 <_Balloc+0x7c>)
 800f05e:	216b      	movs	r1, #107	; 0x6b
 800f060:	f002 f912 	bl	8011288 <__assert_func>
 800f064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f068:	6006      	str	r6, [r0, #0]
 800f06a:	60c6      	str	r6, [r0, #12]
 800f06c:	69e6      	ldr	r6, [r4, #28]
 800f06e:	68f3      	ldr	r3, [r6, #12]
 800f070:	b183      	cbz	r3, 800f094 <_Balloc+0x50>
 800f072:	69e3      	ldr	r3, [r4, #28]
 800f074:	68db      	ldr	r3, [r3, #12]
 800f076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f07a:	b9b8      	cbnz	r0, 800f0ac <_Balloc+0x68>
 800f07c:	2101      	movs	r1, #1
 800f07e:	fa01 f605 	lsl.w	r6, r1, r5
 800f082:	1d72      	adds	r2, r6, #5
 800f084:	0092      	lsls	r2, r2, #2
 800f086:	4620      	mov	r0, r4
 800f088:	f002 f91c 	bl	80112c4 <_calloc_r>
 800f08c:	b160      	cbz	r0, 800f0a8 <_Balloc+0x64>
 800f08e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f092:	e00e      	b.n	800f0b2 <_Balloc+0x6e>
 800f094:	2221      	movs	r2, #33	; 0x21
 800f096:	2104      	movs	r1, #4
 800f098:	4620      	mov	r0, r4
 800f09a:	f002 f913 	bl	80112c4 <_calloc_r>
 800f09e:	69e3      	ldr	r3, [r4, #28]
 800f0a0:	60f0      	str	r0, [r6, #12]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d1e4      	bne.n	800f072 <_Balloc+0x2e>
 800f0a8:	2000      	movs	r0, #0
 800f0aa:	bd70      	pop	{r4, r5, r6, pc}
 800f0ac:	6802      	ldr	r2, [r0, #0]
 800f0ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f0b8:	e7f7      	b.n	800f0aa <_Balloc+0x66>
 800f0ba:	bf00      	nop
 800f0bc:	0801399c 	.word	0x0801399c
 800f0c0:	08013a1c 	.word	0x08013a1c

0800f0c4 <_Bfree>:
 800f0c4:	b570      	push	{r4, r5, r6, lr}
 800f0c6:	69c6      	ldr	r6, [r0, #28]
 800f0c8:	4605      	mov	r5, r0
 800f0ca:	460c      	mov	r4, r1
 800f0cc:	b976      	cbnz	r6, 800f0ec <_Bfree+0x28>
 800f0ce:	2010      	movs	r0, #16
 800f0d0:	f7ff ff04 	bl	800eedc <malloc>
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	61e8      	str	r0, [r5, #28]
 800f0d8:	b920      	cbnz	r0, 800f0e4 <_Bfree+0x20>
 800f0da:	4b09      	ldr	r3, [pc, #36]	; (800f100 <_Bfree+0x3c>)
 800f0dc:	4809      	ldr	r0, [pc, #36]	; (800f104 <_Bfree+0x40>)
 800f0de:	218f      	movs	r1, #143	; 0x8f
 800f0e0:	f002 f8d2 	bl	8011288 <__assert_func>
 800f0e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0e8:	6006      	str	r6, [r0, #0]
 800f0ea:	60c6      	str	r6, [r0, #12]
 800f0ec:	b13c      	cbz	r4, 800f0fe <_Bfree+0x3a>
 800f0ee:	69eb      	ldr	r3, [r5, #28]
 800f0f0:	6862      	ldr	r2, [r4, #4]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f0f8:	6021      	str	r1, [r4, #0]
 800f0fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f0fe:	bd70      	pop	{r4, r5, r6, pc}
 800f100:	0801399c 	.word	0x0801399c
 800f104:	08013a1c 	.word	0x08013a1c

0800f108 <__multadd>:
 800f108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f10c:	690d      	ldr	r5, [r1, #16]
 800f10e:	4607      	mov	r7, r0
 800f110:	460c      	mov	r4, r1
 800f112:	461e      	mov	r6, r3
 800f114:	f101 0c14 	add.w	ip, r1, #20
 800f118:	2000      	movs	r0, #0
 800f11a:	f8dc 3000 	ldr.w	r3, [ip]
 800f11e:	b299      	uxth	r1, r3
 800f120:	fb02 6101 	mla	r1, r2, r1, r6
 800f124:	0c1e      	lsrs	r6, r3, #16
 800f126:	0c0b      	lsrs	r3, r1, #16
 800f128:	fb02 3306 	mla	r3, r2, r6, r3
 800f12c:	b289      	uxth	r1, r1
 800f12e:	3001      	adds	r0, #1
 800f130:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f134:	4285      	cmp	r5, r0
 800f136:	f84c 1b04 	str.w	r1, [ip], #4
 800f13a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f13e:	dcec      	bgt.n	800f11a <__multadd+0x12>
 800f140:	b30e      	cbz	r6, 800f186 <__multadd+0x7e>
 800f142:	68a3      	ldr	r3, [r4, #8]
 800f144:	42ab      	cmp	r3, r5
 800f146:	dc19      	bgt.n	800f17c <__multadd+0x74>
 800f148:	6861      	ldr	r1, [r4, #4]
 800f14a:	4638      	mov	r0, r7
 800f14c:	3101      	adds	r1, #1
 800f14e:	f7ff ff79 	bl	800f044 <_Balloc>
 800f152:	4680      	mov	r8, r0
 800f154:	b928      	cbnz	r0, 800f162 <__multadd+0x5a>
 800f156:	4602      	mov	r2, r0
 800f158:	4b0c      	ldr	r3, [pc, #48]	; (800f18c <__multadd+0x84>)
 800f15a:	480d      	ldr	r0, [pc, #52]	; (800f190 <__multadd+0x88>)
 800f15c:	21ba      	movs	r1, #186	; 0xba
 800f15e:	f002 f893 	bl	8011288 <__assert_func>
 800f162:	6922      	ldr	r2, [r4, #16]
 800f164:	3202      	adds	r2, #2
 800f166:	f104 010c 	add.w	r1, r4, #12
 800f16a:	0092      	lsls	r2, r2, #2
 800f16c:	300c      	adds	r0, #12
 800f16e:	f7fe ffda 	bl	800e126 <memcpy>
 800f172:	4621      	mov	r1, r4
 800f174:	4638      	mov	r0, r7
 800f176:	f7ff ffa5 	bl	800f0c4 <_Bfree>
 800f17a:	4644      	mov	r4, r8
 800f17c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f180:	3501      	adds	r5, #1
 800f182:	615e      	str	r6, [r3, #20]
 800f184:	6125      	str	r5, [r4, #16]
 800f186:	4620      	mov	r0, r4
 800f188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f18c:	08013a0b 	.word	0x08013a0b
 800f190:	08013a1c 	.word	0x08013a1c

0800f194 <__s2b>:
 800f194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f198:	460c      	mov	r4, r1
 800f19a:	4615      	mov	r5, r2
 800f19c:	461f      	mov	r7, r3
 800f19e:	2209      	movs	r2, #9
 800f1a0:	3308      	adds	r3, #8
 800f1a2:	4606      	mov	r6, r0
 800f1a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1a8:	2100      	movs	r1, #0
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	db09      	blt.n	800f1c4 <__s2b+0x30>
 800f1b0:	4630      	mov	r0, r6
 800f1b2:	f7ff ff47 	bl	800f044 <_Balloc>
 800f1b6:	b940      	cbnz	r0, 800f1ca <__s2b+0x36>
 800f1b8:	4602      	mov	r2, r0
 800f1ba:	4b19      	ldr	r3, [pc, #100]	; (800f220 <__s2b+0x8c>)
 800f1bc:	4819      	ldr	r0, [pc, #100]	; (800f224 <__s2b+0x90>)
 800f1be:	21d3      	movs	r1, #211	; 0xd3
 800f1c0:	f002 f862 	bl	8011288 <__assert_func>
 800f1c4:	0052      	lsls	r2, r2, #1
 800f1c6:	3101      	adds	r1, #1
 800f1c8:	e7f0      	b.n	800f1ac <__s2b+0x18>
 800f1ca:	9b08      	ldr	r3, [sp, #32]
 800f1cc:	6143      	str	r3, [r0, #20]
 800f1ce:	2d09      	cmp	r5, #9
 800f1d0:	f04f 0301 	mov.w	r3, #1
 800f1d4:	6103      	str	r3, [r0, #16]
 800f1d6:	dd16      	ble.n	800f206 <__s2b+0x72>
 800f1d8:	f104 0909 	add.w	r9, r4, #9
 800f1dc:	46c8      	mov	r8, r9
 800f1de:	442c      	add	r4, r5
 800f1e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f1e4:	4601      	mov	r1, r0
 800f1e6:	3b30      	subs	r3, #48	; 0x30
 800f1e8:	220a      	movs	r2, #10
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	f7ff ff8c 	bl	800f108 <__multadd>
 800f1f0:	45a0      	cmp	r8, r4
 800f1f2:	d1f5      	bne.n	800f1e0 <__s2b+0x4c>
 800f1f4:	f1a5 0408 	sub.w	r4, r5, #8
 800f1f8:	444c      	add	r4, r9
 800f1fa:	1b2d      	subs	r5, r5, r4
 800f1fc:	1963      	adds	r3, r4, r5
 800f1fe:	42bb      	cmp	r3, r7
 800f200:	db04      	blt.n	800f20c <__s2b+0x78>
 800f202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f206:	340a      	adds	r4, #10
 800f208:	2509      	movs	r5, #9
 800f20a:	e7f6      	b.n	800f1fa <__s2b+0x66>
 800f20c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f210:	4601      	mov	r1, r0
 800f212:	3b30      	subs	r3, #48	; 0x30
 800f214:	220a      	movs	r2, #10
 800f216:	4630      	mov	r0, r6
 800f218:	f7ff ff76 	bl	800f108 <__multadd>
 800f21c:	e7ee      	b.n	800f1fc <__s2b+0x68>
 800f21e:	bf00      	nop
 800f220:	08013a0b 	.word	0x08013a0b
 800f224:	08013a1c 	.word	0x08013a1c

0800f228 <__hi0bits>:
 800f228:	0c03      	lsrs	r3, r0, #16
 800f22a:	041b      	lsls	r3, r3, #16
 800f22c:	b9d3      	cbnz	r3, 800f264 <__hi0bits+0x3c>
 800f22e:	0400      	lsls	r0, r0, #16
 800f230:	2310      	movs	r3, #16
 800f232:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f236:	bf04      	itt	eq
 800f238:	0200      	lsleq	r0, r0, #8
 800f23a:	3308      	addeq	r3, #8
 800f23c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f240:	bf04      	itt	eq
 800f242:	0100      	lsleq	r0, r0, #4
 800f244:	3304      	addeq	r3, #4
 800f246:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f24a:	bf04      	itt	eq
 800f24c:	0080      	lsleq	r0, r0, #2
 800f24e:	3302      	addeq	r3, #2
 800f250:	2800      	cmp	r0, #0
 800f252:	db05      	blt.n	800f260 <__hi0bits+0x38>
 800f254:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f258:	f103 0301 	add.w	r3, r3, #1
 800f25c:	bf08      	it	eq
 800f25e:	2320      	moveq	r3, #32
 800f260:	4618      	mov	r0, r3
 800f262:	4770      	bx	lr
 800f264:	2300      	movs	r3, #0
 800f266:	e7e4      	b.n	800f232 <__hi0bits+0xa>

0800f268 <__lo0bits>:
 800f268:	6803      	ldr	r3, [r0, #0]
 800f26a:	f013 0207 	ands.w	r2, r3, #7
 800f26e:	d00c      	beq.n	800f28a <__lo0bits+0x22>
 800f270:	07d9      	lsls	r1, r3, #31
 800f272:	d422      	bmi.n	800f2ba <__lo0bits+0x52>
 800f274:	079a      	lsls	r2, r3, #30
 800f276:	bf49      	itett	mi
 800f278:	085b      	lsrmi	r3, r3, #1
 800f27a:	089b      	lsrpl	r3, r3, #2
 800f27c:	6003      	strmi	r3, [r0, #0]
 800f27e:	2201      	movmi	r2, #1
 800f280:	bf5c      	itt	pl
 800f282:	6003      	strpl	r3, [r0, #0]
 800f284:	2202      	movpl	r2, #2
 800f286:	4610      	mov	r0, r2
 800f288:	4770      	bx	lr
 800f28a:	b299      	uxth	r1, r3
 800f28c:	b909      	cbnz	r1, 800f292 <__lo0bits+0x2a>
 800f28e:	0c1b      	lsrs	r3, r3, #16
 800f290:	2210      	movs	r2, #16
 800f292:	b2d9      	uxtb	r1, r3
 800f294:	b909      	cbnz	r1, 800f29a <__lo0bits+0x32>
 800f296:	3208      	adds	r2, #8
 800f298:	0a1b      	lsrs	r3, r3, #8
 800f29a:	0719      	lsls	r1, r3, #28
 800f29c:	bf04      	itt	eq
 800f29e:	091b      	lsreq	r3, r3, #4
 800f2a0:	3204      	addeq	r2, #4
 800f2a2:	0799      	lsls	r1, r3, #30
 800f2a4:	bf04      	itt	eq
 800f2a6:	089b      	lsreq	r3, r3, #2
 800f2a8:	3202      	addeq	r2, #2
 800f2aa:	07d9      	lsls	r1, r3, #31
 800f2ac:	d403      	bmi.n	800f2b6 <__lo0bits+0x4e>
 800f2ae:	085b      	lsrs	r3, r3, #1
 800f2b0:	f102 0201 	add.w	r2, r2, #1
 800f2b4:	d003      	beq.n	800f2be <__lo0bits+0x56>
 800f2b6:	6003      	str	r3, [r0, #0]
 800f2b8:	e7e5      	b.n	800f286 <__lo0bits+0x1e>
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	e7e3      	b.n	800f286 <__lo0bits+0x1e>
 800f2be:	2220      	movs	r2, #32
 800f2c0:	e7e1      	b.n	800f286 <__lo0bits+0x1e>
	...

0800f2c4 <__i2b>:
 800f2c4:	b510      	push	{r4, lr}
 800f2c6:	460c      	mov	r4, r1
 800f2c8:	2101      	movs	r1, #1
 800f2ca:	f7ff febb 	bl	800f044 <_Balloc>
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	b928      	cbnz	r0, 800f2de <__i2b+0x1a>
 800f2d2:	4b05      	ldr	r3, [pc, #20]	; (800f2e8 <__i2b+0x24>)
 800f2d4:	4805      	ldr	r0, [pc, #20]	; (800f2ec <__i2b+0x28>)
 800f2d6:	f240 1145 	movw	r1, #325	; 0x145
 800f2da:	f001 ffd5 	bl	8011288 <__assert_func>
 800f2de:	2301      	movs	r3, #1
 800f2e0:	6144      	str	r4, [r0, #20]
 800f2e2:	6103      	str	r3, [r0, #16]
 800f2e4:	bd10      	pop	{r4, pc}
 800f2e6:	bf00      	nop
 800f2e8:	08013a0b 	.word	0x08013a0b
 800f2ec:	08013a1c 	.word	0x08013a1c

0800f2f0 <__multiply>:
 800f2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f4:	4691      	mov	r9, r2
 800f2f6:	690a      	ldr	r2, [r1, #16]
 800f2f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	bfb8      	it	lt
 800f300:	460b      	movlt	r3, r1
 800f302:	460c      	mov	r4, r1
 800f304:	bfbc      	itt	lt
 800f306:	464c      	movlt	r4, r9
 800f308:	4699      	movlt	r9, r3
 800f30a:	6927      	ldr	r7, [r4, #16]
 800f30c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f310:	68a3      	ldr	r3, [r4, #8]
 800f312:	6861      	ldr	r1, [r4, #4]
 800f314:	eb07 060a 	add.w	r6, r7, sl
 800f318:	42b3      	cmp	r3, r6
 800f31a:	b085      	sub	sp, #20
 800f31c:	bfb8      	it	lt
 800f31e:	3101      	addlt	r1, #1
 800f320:	f7ff fe90 	bl	800f044 <_Balloc>
 800f324:	b930      	cbnz	r0, 800f334 <__multiply+0x44>
 800f326:	4602      	mov	r2, r0
 800f328:	4b44      	ldr	r3, [pc, #272]	; (800f43c <__multiply+0x14c>)
 800f32a:	4845      	ldr	r0, [pc, #276]	; (800f440 <__multiply+0x150>)
 800f32c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f330:	f001 ffaa 	bl	8011288 <__assert_func>
 800f334:	f100 0514 	add.w	r5, r0, #20
 800f338:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f33c:	462b      	mov	r3, r5
 800f33e:	2200      	movs	r2, #0
 800f340:	4543      	cmp	r3, r8
 800f342:	d321      	bcc.n	800f388 <__multiply+0x98>
 800f344:	f104 0314 	add.w	r3, r4, #20
 800f348:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f34c:	f109 0314 	add.w	r3, r9, #20
 800f350:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f354:	9202      	str	r2, [sp, #8]
 800f356:	1b3a      	subs	r2, r7, r4
 800f358:	3a15      	subs	r2, #21
 800f35a:	f022 0203 	bic.w	r2, r2, #3
 800f35e:	3204      	adds	r2, #4
 800f360:	f104 0115 	add.w	r1, r4, #21
 800f364:	428f      	cmp	r7, r1
 800f366:	bf38      	it	cc
 800f368:	2204      	movcc	r2, #4
 800f36a:	9201      	str	r2, [sp, #4]
 800f36c:	9a02      	ldr	r2, [sp, #8]
 800f36e:	9303      	str	r3, [sp, #12]
 800f370:	429a      	cmp	r2, r3
 800f372:	d80c      	bhi.n	800f38e <__multiply+0x9e>
 800f374:	2e00      	cmp	r6, #0
 800f376:	dd03      	ble.n	800f380 <__multiply+0x90>
 800f378:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d05b      	beq.n	800f438 <__multiply+0x148>
 800f380:	6106      	str	r6, [r0, #16]
 800f382:	b005      	add	sp, #20
 800f384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f388:	f843 2b04 	str.w	r2, [r3], #4
 800f38c:	e7d8      	b.n	800f340 <__multiply+0x50>
 800f38e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f392:	f1ba 0f00 	cmp.w	sl, #0
 800f396:	d024      	beq.n	800f3e2 <__multiply+0xf2>
 800f398:	f104 0e14 	add.w	lr, r4, #20
 800f39c:	46a9      	mov	r9, r5
 800f39e:	f04f 0c00 	mov.w	ip, #0
 800f3a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f3a6:	f8d9 1000 	ldr.w	r1, [r9]
 800f3aa:	fa1f fb82 	uxth.w	fp, r2
 800f3ae:	b289      	uxth	r1, r1
 800f3b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800f3b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f3b8:	f8d9 2000 	ldr.w	r2, [r9]
 800f3bc:	4461      	add	r1, ip
 800f3be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f3c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800f3c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f3ca:	b289      	uxth	r1, r1
 800f3cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f3d0:	4577      	cmp	r7, lr
 800f3d2:	f849 1b04 	str.w	r1, [r9], #4
 800f3d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f3da:	d8e2      	bhi.n	800f3a2 <__multiply+0xb2>
 800f3dc:	9a01      	ldr	r2, [sp, #4]
 800f3de:	f845 c002 	str.w	ip, [r5, r2]
 800f3e2:	9a03      	ldr	r2, [sp, #12]
 800f3e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f3e8:	3304      	adds	r3, #4
 800f3ea:	f1b9 0f00 	cmp.w	r9, #0
 800f3ee:	d021      	beq.n	800f434 <__multiply+0x144>
 800f3f0:	6829      	ldr	r1, [r5, #0]
 800f3f2:	f104 0c14 	add.w	ip, r4, #20
 800f3f6:	46ae      	mov	lr, r5
 800f3f8:	f04f 0a00 	mov.w	sl, #0
 800f3fc:	f8bc b000 	ldrh.w	fp, [ip]
 800f400:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f404:	fb09 220b 	mla	r2, r9, fp, r2
 800f408:	4452      	add	r2, sl
 800f40a:	b289      	uxth	r1, r1
 800f40c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f410:	f84e 1b04 	str.w	r1, [lr], #4
 800f414:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f418:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f41c:	f8be 1000 	ldrh.w	r1, [lr]
 800f420:	fb09 110a 	mla	r1, r9, sl, r1
 800f424:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f428:	4567      	cmp	r7, ip
 800f42a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f42e:	d8e5      	bhi.n	800f3fc <__multiply+0x10c>
 800f430:	9a01      	ldr	r2, [sp, #4]
 800f432:	50a9      	str	r1, [r5, r2]
 800f434:	3504      	adds	r5, #4
 800f436:	e799      	b.n	800f36c <__multiply+0x7c>
 800f438:	3e01      	subs	r6, #1
 800f43a:	e79b      	b.n	800f374 <__multiply+0x84>
 800f43c:	08013a0b 	.word	0x08013a0b
 800f440:	08013a1c 	.word	0x08013a1c

0800f444 <__pow5mult>:
 800f444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f448:	4615      	mov	r5, r2
 800f44a:	f012 0203 	ands.w	r2, r2, #3
 800f44e:	4606      	mov	r6, r0
 800f450:	460f      	mov	r7, r1
 800f452:	d007      	beq.n	800f464 <__pow5mult+0x20>
 800f454:	4c25      	ldr	r4, [pc, #148]	; (800f4ec <__pow5mult+0xa8>)
 800f456:	3a01      	subs	r2, #1
 800f458:	2300      	movs	r3, #0
 800f45a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f45e:	f7ff fe53 	bl	800f108 <__multadd>
 800f462:	4607      	mov	r7, r0
 800f464:	10ad      	asrs	r5, r5, #2
 800f466:	d03d      	beq.n	800f4e4 <__pow5mult+0xa0>
 800f468:	69f4      	ldr	r4, [r6, #28]
 800f46a:	b97c      	cbnz	r4, 800f48c <__pow5mult+0x48>
 800f46c:	2010      	movs	r0, #16
 800f46e:	f7ff fd35 	bl	800eedc <malloc>
 800f472:	4602      	mov	r2, r0
 800f474:	61f0      	str	r0, [r6, #28]
 800f476:	b928      	cbnz	r0, 800f484 <__pow5mult+0x40>
 800f478:	4b1d      	ldr	r3, [pc, #116]	; (800f4f0 <__pow5mult+0xac>)
 800f47a:	481e      	ldr	r0, [pc, #120]	; (800f4f4 <__pow5mult+0xb0>)
 800f47c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f480:	f001 ff02 	bl	8011288 <__assert_func>
 800f484:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f488:	6004      	str	r4, [r0, #0]
 800f48a:	60c4      	str	r4, [r0, #12]
 800f48c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f490:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f494:	b94c      	cbnz	r4, 800f4aa <__pow5mult+0x66>
 800f496:	f240 2171 	movw	r1, #625	; 0x271
 800f49a:	4630      	mov	r0, r6
 800f49c:	f7ff ff12 	bl	800f2c4 <__i2b>
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f4a6:	4604      	mov	r4, r0
 800f4a8:	6003      	str	r3, [r0, #0]
 800f4aa:	f04f 0900 	mov.w	r9, #0
 800f4ae:	07eb      	lsls	r3, r5, #31
 800f4b0:	d50a      	bpl.n	800f4c8 <__pow5mult+0x84>
 800f4b2:	4639      	mov	r1, r7
 800f4b4:	4622      	mov	r2, r4
 800f4b6:	4630      	mov	r0, r6
 800f4b8:	f7ff ff1a 	bl	800f2f0 <__multiply>
 800f4bc:	4639      	mov	r1, r7
 800f4be:	4680      	mov	r8, r0
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	f7ff fdff 	bl	800f0c4 <_Bfree>
 800f4c6:	4647      	mov	r7, r8
 800f4c8:	106d      	asrs	r5, r5, #1
 800f4ca:	d00b      	beq.n	800f4e4 <__pow5mult+0xa0>
 800f4cc:	6820      	ldr	r0, [r4, #0]
 800f4ce:	b938      	cbnz	r0, 800f4e0 <__pow5mult+0x9c>
 800f4d0:	4622      	mov	r2, r4
 800f4d2:	4621      	mov	r1, r4
 800f4d4:	4630      	mov	r0, r6
 800f4d6:	f7ff ff0b 	bl	800f2f0 <__multiply>
 800f4da:	6020      	str	r0, [r4, #0]
 800f4dc:	f8c0 9000 	str.w	r9, [r0]
 800f4e0:	4604      	mov	r4, r0
 800f4e2:	e7e4      	b.n	800f4ae <__pow5mult+0x6a>
 800f4e4:	4638      	mov	r0, r7
 800f4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ea:	bf00      	nop
 800f4ec:	08013b68 	.word	0x08013b68
 800f4f0:	0801399c 	.word	0x0801399c
 800f4f4:	08013a1c 	.word	0x08013a1c

0800f4f8 <__lshift>:
 800f4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4fc:	460c      	mov	r4, r1
 800f4fe:	6849      	ldr	r1, [r1, #4]
 800f500:	6923      	ldr	r3, [r4, #16]
 800f502:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f506:	68a3      	ldr	r3, [r4, #8]
 800f508:	4607      	mov	r7, r0
 800f50a:	4691      	mov	r9, r2
 800f50c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f510:	f108 0601 	add.w	r6, r8, #1
 800f514:	42b3      	cmp	r3, r6
 800f516:	db0b      	blt.n	800f530 <__lshift+0x38>
 800f518:	4638      	mov	r0, r7
 800f51a:	f7ff fd93 	bl	800f044 <_Balloc>
 800f51e:	4605      	mov	r5, r0
 800f520:	b948      	cbnz	r0, 800f536 <__lshift+0x3e>
 800f522:	4602      	mov	r2, r0
 800f524:	4b28      	ldr	r3, [pc, #160]	; (800f5c8 <__lshift+0xd0>)
 800f526:	4829      	ldr	r0, [pc, #164]	; (800f5cc <__lshift+0xd4>)
 800f528:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f52c:	f001 feac 	bl	8011288 <__assert_func>
 800f530:	3101      	adds	r1, #1
 800f532:	005b      	lsls	r3, r3, #1
 800f534:	e7ee      	b.n	800f514 <__lshift+0x1c>
 800f536:	2300      	movs	r3, #0
 800f538:	f100 0114 	add.w	r1, r0, #20
 800f53c:	f100 0210 	add.w	r2, r0, #16
 800f540:	4618      	mov	r0, r3
 800f542:	4553      	cmp	r3, sl
 800f544:	db33      	blt.n	800f5ae <__lshift+0xb6>
 800f546:	6920      	ldr	r0, [r4, #16]
 800f548:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f54c:	f104 0314 	add.w	r3, r4, #20
 800f550:	f019 091f 	ands.w	r9, r9, #31
 800f554:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f558:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f55c:	d02b      	beq.n	800f5b6 <__lshift+0xbe>
 800f55e:	f1c9 0e20 	rsb	lr, r9, #32
 800f562:	468a      	mov	sl, r1
 800f564:	2200      	movs	r2, #0
 800f566:	6818      	ldr	r0, [r3, #0]
 800f568:	fa00 f009 	lsl.w	r0, r0, r9
 800f56c:	4310      	orrs	r0, r2
 800f56e:	f84a 0b04 	str.w	r0, [sl], #4
 800f572:	f853 2b04 	ldr.w	r2, [r3], #4
 800f576:	459c      	cmp	ip, r3
 800f578:	fa22 f20e 	lsr.w	r2, r2, lr
 800f57c:	d8f3      	bhi.n	800f566 <__lshift+0x6e>
 800f57e:	ebac 0304 	sub.w	r3, ip, r4
 800f582:	3b15      	subs	r3, #21
 800f584:	f023 0303 	bic.w	r3, r3, #3
 800f588:	3304      	adds	r3, #4
 800f58a:	f104 0015 	add.w	r0, r4, #21
 800f58e:	4584      	cmp	ip, r0
 800f590:	bf38      	it	cc
 800f592:	2304      	movcc	r3, #4
 800f594:	50ca      	str	r2, [r1, r3]
 800f596:	b10a      	cbz	r2, 800f59c <__lshift+0xa4>
 800f598:	f108 0602 	add.w	r6, r8, #2
 800f59c:	3e01      	subs	r6, #1
 800f59e:	4638      	mov	r0, r7
 800f5a0:	612e      	str	r6, [r5, #16]
 800f5a2:	4621      	mov	r1, r4
 800f5a4:	f7ff fd8e 	bl	800f0c4 <_Bfree>
 800f5a8:	4628      	mov	r0, r5
 800f5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	e7c5      	b.n	800f542 <__lshift+0x4a>
 800f5b6:	3904      	subs	r1, #4
 800f5b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800f5c0:	459c      	cmp	ip, r3
 800f5c2:	d8f9      	bhi.n	800f5b8 <__lshift+0xc0>
 800f5c4:	e7ea      	b.n	800f59c <__lshift+0xa4>
 800f5c6:	bf00      	nop
 800f5c8:	08013a0b 	.word	0x08013a0b
 800f5cc:	08013a1c 	.word	0x08013a1c

0800f5d0 <__mcmp>:
 800f5d0:	b530      	push	{r4, r5, lr}
 800f5d2:	6902      	ldr	r2, [r0, #16]
 800f5d4:	690c      	ldr	r4, [r1, #16]
 800f5d6:	1b12      	subs	r2, r2, r4
 800f5d8:	d10e      	bne.n	800f5f8 <__mcmp+0x28>
 800f5da:	f100 0314 	add.w	r3, r0, #20
 800f5de:	3114      	adds	r1, #20
 800f5e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f5e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f5e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f5ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f5f0:	42a5      	cmp	r5, r4
 800f5f2:	d003      	beq.n	800f5fc <__mcmp+0x2c>
 800f5f4:	d305      	bcc.n	800f602 <__mcmp+0x32>
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	4610      	mov	r0, r2
 800f5fa:	bd30      	pop	{r4, r5, pc}
 800f5fc:	4283      	cmp	r3, r0
 800f5fe:	d3f3      	bcc.n	800f5e8 <__mcmp+0x18>
 800f600:	e7fa      	b.n	800f5f8 <__mcmp+0x28>
 800f602:	f04f 32ff 	mov.w	r2, #4294967295
 800f606:	e7f7      	b.n	800f5f8 <__mcmp+0x28>

0800f608 <__mdiff>:
 800f608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f60c:	460c      	mov	r4, r1
 800f60e:	4606      	mov	r6, r0
 800f610:	4611      	mov	r1, r2
 800f612:	4620      	mov	r0, r4
 800f614:	4690      	mov	r8, r2
 800f616:	f7ff ffdb 	bl	800f5d0 <__mcmp>
 800f61a:	1e05      	subs	r5, r0, #0
 800f61c:	d110      	bne.n	800f640 <__mdiff+0x38>
 800f61e:	4629      	mov	r1, r5
 800f620:	4630      	mov	r0, r6
 800f622:	f7ff fd0f 	bl	800f044 <_Balloc>
 800f626:	b930      	cbnz	r0, 800f636 <__mdiff+0x2e>
 800f628:	4b3a      	ldr	r3, [pc, #232]	; (800f714 <__mdiff+0x10c>)
 800f62a:	4602      	mov	r2, r0
 800f62c:	f240 2137 	movw	r1, #567	; 0x237
 800f630:	4839      	ldr	r0, [pc, #228]	; (800f718 <__mdiff+0x110>)
 800f632:	f001 fe29 	bl	8011288 <__assert_func>
 800f636:	2301      	movs	r3, #1
 800f638:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f63c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f640:	bfa4      	itt	ge
 800f642:	4643      	movge	r3, r8
 800f644:	46a0      	movge	r8, r4
 800f646:	4630      	mov	r0, r6
 800f648:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f64c:	bfa6      	itte	ge
 800f64e:	461c      	movge	r4, r3
 800f650:	2500      	movge	r5, #0
 800f652:	2501      	movlt	r5, #1
 800f654:	f7ff fcf6 	bl	800f044 <_Balloc>
 800f658:	b920      	cbnz	r0, 800f664 <__mdiff+0x5c>
 800f65a:	4b2e      	ldr	r3, [pc, #184]	; (800f714 <__mdiff+0x10c>)
 800f65c:	4602      	mov	r2, r0
 800f65e:	f240 2145 	movw	r1, #581	; 0x245
 800f662:	e7e5      	b.n	800f630 <__mdiff+0x28>
 800f664:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f668:	6926      	ldr	r6, [r4, #16]
 800f66a:	60c5      	str	r5, [r0, #12]
 800f66c:	f104 0914 	add.w	r9, r4, #20
 800f670:	f108 0514 	add.w	r5, r8, #20
 800f674:	f100 0e14 	add.w	lr, r0, #20
 800f678:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f67c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f680:	f108 0210 	add.w	r2, r8, #16
 800f684:	46f2      	mov	sl, lr
 800f686:	2100      	movs	r1, #0
 800f688:	f859 3b04 	ldr.w	r3, [r9], #4
 800f68c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f690:	fa11 f88b 	uxtah	r8, r1, fp
 800f694:	b299      	uxth	r1, r3
 800f696:	0c1b      	lsrs	r3, r3, #16
 800f698:	eba8 0801 	sub.w	r8, r8, r1
 800f69c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f6a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f6a4:	fa1f f888 	uxth.w	r8, r8
 800f6a8:	1419      	asrs	r1, r3, #16
 800f6aa:	454e      	cmp	r6, r9
 800f6ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f6b0:	f84a 3b04 	str.w	r3, [sl], #4
 800f6b4:	d8e8      	bhi.n	800f688 <__mdiff+0x80>
 800f6b6:	1b33      	subs	r3, r6, r4
 800f6b8:	3b15      	subs	r3, #21
 800f6ba:	f023 0303 	bic.w	r3, r3, #3
 800f6be:	3304      	adds	r3, #4
 800f6c0:	3415      	adds	r4, #21
 800f6c2:	42a6      	cmp	r6, r4
 800f6c4:	bf38      	it	cc
 800f6c6:	2304      	movcc	r3, #4
 800f6c8:	441d      	add	r5, r3
 800f6ca:	4473      	add	r3, lr
 800f6cc:	469e      	mov	lr, r3
 800f6ce:	462e      	mov	r6, r5
 800f6d0:	4566      	cmp	r6, ip
 800f6d2:	d30e      	bcc.n	800f6f2 <__mdiff+0xea>
 800f6d4:	f10c 0203 	add.w	r2, ip, #3
 800f6d8:	1b52      	subs	r2, r2, r5
 800f6da:	f022 0203 	bic.w	r2, r2, #3
 800f6de:	3d03      	subs	r5, #3
 800f6e0:	45ac      	cmp	ip, r5
 800f6e2:	bf38      	it	cc
 800f6e4:	2200      	movcc	r2, #0
 800f6e6:	4413      	add	r3, r2
 800f6e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f6ec:	b17a      	cbz	r2, 800f70e <__mdiff+0x106>
 800f6ee:	6107      	str	r7, [r0, #16]
 800f6f0:	e7a4      	b.n	800f63c <__mdiff+0x34>
 800f6f2:	f856 8b04 	ldr.w	r8, [r6], #4
 800f6f6:	fa11 f288 	uxtah	r2, r1, r8
 800f6fa:	1414      	asrs	r4, r2, #16
 800f6fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f700:	b292      	uxth	r2, r2
 800f702:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f706:	f84e 2b04 	str.w	r2, [lr], #4
 800f70a:	1421      	asrs	r1, r4, #16
 800f70c:	e7e0      	b.n	800f6d0 <__mdiff+0xc8>
 800f70e:	3f01      	subs	r7, #1
 800f710:	e7ea      	b.n	800f6e8 <__mdiff+0xe0>
 800f712:	bf00      	nop
 800f714:	08013a0b 	.word	0x08013a0b
 800f718:	08013a1c 	.word	0x08013a1c

0800f71c <__ulp>:
 800f71c:	b082      	sub	sp, #8
 800f71e:	ed8d 0b00 	vstr	d0, [sp]
 800f722:	9a01      	ldr	r2, [sp, #4]
 800f724:	4b0f      	ldr	r3, [pc, #60]	; (800f764 <__ulp+0x48>)
 800f726:	4013      	ands	r3, r2
 800f728:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	dc08      	bgt.n	800f742 <__ulp+0x26>
 800f730:	425b      	negs	r3, r3
 800f732:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f736:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f73a:	da04      	bge.n	800f746 <__ulp+0x2a>
 800f73c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f740:	4113      	asrs	r3, r2
 800f742:	2200      	movs	r2, #0
 800f744:	e008      	b.n	800f758 <__ulp+0x3c>
 800f746:	f1a2 0314 	sub.w	r3, r2, #20
 800f74a:	2b1e      	cmp	r3, #30
 800f74c:	bfda      	itte	le
 800f74e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f752:	40da      	lsrle	r2, r3
 800f754:	2201      	movgt	r2, #1
 800f756:	2300      	movs	r3, #0
 800f758:	4619      	mov	r1, r3
 800f75a:	4610      	mov	r0, r2
 800f75c:	ec41 0b10 	vmov	d0, r0, r1
 800f760:	b002      	add	sp, #8
 800f762:	4770      	bx	lr
 800f764:	7ff00000 	.word	0x7ff00000

0800f768 <__b2d>:
 800f768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f76c:	6906      	ldr	r6, [r0, #16]
 800f76e:	f100 0814 	add.w	r8, r0, #20
 800f772:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f776:	1f37      	subs	r7, r6, #4
 800f778:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f77c:	4610      	mov	r0, r2
 800f77e:	f7ff fd53 	bl	800f228 <__hi0bits>
 800f782:	f1c0 0320 	rsb	r3, r0, #32
 800f786:	280a      	cmp	r0, #10
 800f788:	600b      	str	r3, [r1, #0]
 800f78a:	491b      	ldr	r1, [pc, #108]	; (800f7f8 <__b2d+0x90>)
 800f78c:	dc15      	bgt.n	800f7ba <__b2d+0x52>
 800f78e:	f1c0 0c0b 	rsb	ip, r0, #11
 800f792:	fa22 f30c 	lsr.w	r3, r2, ip
 800f796:	45b8      	cmp	r8, r7
 800f798:	ea43 0501 	orr.w	r5, r3, r1
 800f79c:	bf34      	ite	cc
 800f79e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f7a2:	2300      	movcs	r3, #0
 800f7a4:	3015      	adds	r0, #21
 800f7a6:	fa02 f000 	lsl.w	r0, r2, r0
 800f7aa:	fa23 f30c 	lsr.w	r3, r3, ip
 800f7ae:	4303      	orrs	r3, r0
 800f7b0:	461c      	mov	r4, r3
 800f7b2:	ec45 4b10 	vmov	d0, r4, r5
 800f7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7ba:	45b8      	cmp	r8, r7
 800f7bc:	bf3a      	itte	cc
 800f7be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f7c2:	f1a6 0708 	subcc.w	r7, r6, #8
 800f7c6:	2300      	movcs	r3, #0
 800f7c8:	380b      	subs	r0, #11
 800f7ca:	d012      	beq.n	800f7f2 <__b2d+0x8a>
 800f7cc:	f1c0 0120 	rsb	r1, r0, #32
 800f7d0:	fa23 f401 	lsr.w	r4, r3, r1
 800f7d4:	4082      	lsls	r2, r0
 800f7d6:	4322      	orrs	r2, r4
 800f7d8:	4547      	cmp	r7, r8
 800f7da:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800f7de:	bf8c      	ite	hi
 800f7e0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f7e4:	2200      	movls	r2, #0
 800f7e6:	4083      	lsls	r3, r0
 800f7e8:	40ca      	lsrs	r2, r1
 800f7ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f7ee:	4313      	orrs	r3, r2
 800f7f0:	e7de      	b.n	800f7b0 <__b2d+0x48>
 800f7f2:	ea42 0501 	orr.w	r5, r2, r1
 800f7f6:	e7db      	b.n	800f7b0 <__b2d+0x48>
 800f7f8:	3ff00000 	.word	0x3ff00000

0800f7fc <__d2b>:
 800f7fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f800:	460f      	mov	r7, r1
 800f802:	2101      	movs	r1, #1
 800f804:	ec59 8b10 	vmov	r8, r9, d0
 800f808:	4616      	mov	r6, r2
 800f80a:	f7ff fc1b 	bl	800f044 <_Balloc>
 800f80e:	4604      	mov	r4, r0
 800f810:	b930      	cbnz	r0, 800f820 <__d2b+0x24>
 800f812:	4602      	mov	r2, r0
 800f814:	4b24      	ldr	r3, [pc, #144]	; (800f8a8 <__d2b+0xac>)
 800f816:	4825      	ldr	r0, [pc, #148]	; (800f8ac <__d2b+0xb0>)
 800f818:	f240 310f 	movw	r1, #783	; 0x30f
 800f81c:	f001 fd34 	bl	8011288 <__assert_func>
 800f820:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f824:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f828:	bb2d      	cbnz	r5, 800f876 <__d2b+0x7a>
 800f82a:	9301      	str	r3, [sp, #4]
 800f82c:	f1b8 0300 	subs.w	r3, r8, #0
 800f830:	d026      	beq.n	800f880 <__d2b+0x84>
 800f832:	4668      	mov	r0, sp
 800f834:	9300      	str	r3, [sp, #0]
 800f836:	f7ff fd17 	bl	800f268 <__lo0bits>
 800f83a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f83e:	b1e8      	cbz	r0, 800f87c <__d2b+0x80>
 800f840:	f1c0 0320 	rsb	r3, r0, #32
 800f844:	fa02 f303 	lsl.w	r3, r2, r3
 800f848:	430b      	orrs	r3, r1
 800f84a:	40c2      	lsrs	r2, r0
 800f84c:	6163      	str	r3, [r4, #20]
 800f84e:	9201      	str	r2, [sp, #4]
 800f850:	9b01      	ldr	r3, [sp, #4]
 800f852:	61a3      	str	r3, [r4, #24]
 800f854:	2b00      	cmp	r3, #0
 800f856:	bf14      	ite	ne
 800f858:	2202      	movne	r2, #2
 800f85a:	2201      	moveq	r2, #1
 800f85c:	6122      	str	r2, [r4, #16]
 800f85e:	b1bd      	cbz	r5, 800f890 <__d2b+0x94>
 800f860:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f864:	4405      	add	r5, r0
 800f866:	603d      	str	r5, [r7, #0]
 800f868:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f86c:	6030      	str	r0, [r6, #0]
 800f86e:	4620      	mov	r0, r4
 800f870:	b003      	add	sp, #12
 800f872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f87a:	e7d6      	b.n	800f82a <__d2b+0x2e>
 800f87c:	6161      	str	r1, [r4, #20]
 800f87e:	e7e7      	b.n	800f850 <__d2b+0x54>
 800f880:	a801      	add	r0, sp, #4
 800f882:	f7ff fcf1 	bl	800f268 <__lo0bits>
 800f886:	9b01      	ldr	r3, [sp, #4]
 800f888:	6163      	str	r3, [r4, #20]
 800f88a:	3020      	adds	r0, #32
 800f88c:	2201      	movs	r2, #1
 800f88e:	e7e5      	b.n	800f85c <__d2b+0x60>
 800f890:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f894:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f898:	6038      	str	r0, [r7, #0]
 800f89a:	6918      	ldr	r0, [r3, #16]
 800f89c:	f7ff fcc4 	bl	800f228 <__hi0bits>
 800f8a0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f8a4:	e7e2      	b.n	800f86c <__d2b+0x70>
 800f8a6:	bf00      	nop
 800f8a8:	08013a0b 	.word	0x08013a0b
 800f8ac:	08013a1c 	.word	0x08013a1c

0800f8b0 <__ratio>:
 800f8b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b4:	4688      	mov	r8, r1
 800f8b6:	4669      	mov	r1, sp
 800f8b8:	4681      	mov	r9, r0
 800f8ba:	f7ff ff55 	bl	800f768 <__b2d>
 800f8be:	a901      	add	r1, sp, #4
 800f8c0:	4640      	mov	r0, r8
 800f8c2:	ec55 4b10 	vmov	r4, r5, d0
 800f8c6:	f7ff ff4f 	bl	800f768 <__b2d>
 800f8ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f8ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f8d2:	eba3 0c02 	sub.w	ip, r3, r2
 800f8d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f8da:	1a9b      	subs	r3, r3, r2
 800f8dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f8e0:	ec51 0b10 	vmov	r0, r1, d0
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	bfd6      	itet	le
 800f8e8:	460a      	movle	r2, r1
 800f8ea:	462a      	movgt	r2, r5
 800f8ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f8f0:	468b      	mov	fp, r1
 800f8f2:	462f      	mov	r7, r5
 800f8f4:	bfd4      	ite	le
 800f8f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f8fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f8fe:	4620      	mov	r0, r4
 800f900:	ee10 2a10 	vmov	r2, s0
 800f904:	465b      	mov	r3, fp
 800f906:	4639      	mov	r1, r7
 800f908:	f7f0 ffa0 	bl	800084c <__aeabi_ddiv>
 800f90c:	ec41 0b10 	vmov	d0, r0, r1
 800f910:	b003      	add	sp, #12
 800f912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f916 <__copybits>:
 800f916:	3901      	subs	r1, #1
 800f918:	b570      	push	{r4, r5, r6, lr}
 800f91a:	1149      	asrs	r1, r1, #5
 800f91c:	6914      	ldr	r4, [r2, #16]
 800f91e:	3101      	adds	r1, #1
 800f920:	f102 0314 	add.w	r3, r2, #20
 800f924:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f928:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f92c:	1f05      	subs	r5, r0, #4
 800f92e:	42a3      	cmp	r3, r4
 800f930:	d30c      	bcc.n	800f94c <__copybits+0x36>
 800f932:	1aa3      	subs	r3, r4, r2
 800f934:	3b11      	subs	r3, #17
 800f936:	f023 0303 	bic.w	r3, r3, #3
 800f93a:	3211      	adds	r2, #17
 800f93c:	42a2      	cmp	r2, r4
 800f93e:	bf88      	it	hi
 800f940:	2300      	movhi	r3, #0
 800f942:	4418      	add	r0, r3
 800f944:	2300      	movs	r3, #0
 800f946:	4288      	cmp	r0, r1
 800f948:	d305      	bcc.n	800f956 <__copybits+0x40>
 800f94a:	bd70      	pop	{r4, r5, r6, pc}
 800f94c:	f853 6b04 	ldr.w	r6, [r3], #4
 800f950:	f845 6f04 	str.w	r6, [r5, #4]!
 800f954:	e7eb      	b.n	800f92e <__copybits+0x18>
 800f956:	f840 3b04 	str.w	r3, [r0], #4
 800f95a:	e7f4      	b.n	800f946 <__copybits+0x30>

0800f95c <__any_on>:
 800f95c:	f100 0214 	add.w	r2, r0, #20
 800f960:	6900      	ldr	r0, [r0, #16]
 800f962:	114b      	asrs	r3, r1, #5
 800f964:	4298      	cmp	r0, r3
 800f966:	b510      	push	{r4, lr}
 800f968:	db11      	blt.n	800f98e <__any_on+0x32>
 800f96a:	dd0a      	ble.n	800f982 <__any_on+0x26>
 800f96c:	f011 011f 	ands.w	r1, r1, #31
 800f970:	d007      	beq.n	800f982 <__any_on+0x26>
 800f972:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f976:	fa24 f001 	lsr.w	r0, r4, r1
 800f97a:	fa00 f101 	lsl.w	r1, r0, r1
 800f97e:	428c      	cmp	r4, r1
 800f980:	d10b      	bne.n	800f99a <__any_on+0x3e>
 800f982:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f986:	4293      	cmp	r3, r2
 800f988:	d803      	bhi.n	800f992 <__any_on+0x36>
 800f98a:	2000      	movs	r0, #0
 800f98c:	bd10      	pop	{r4, pc}
 800f98e:	4603      	mov	r3, r0
 800f990:	e7f7      	b.n	800f982 <__any_on+0x26>
 800f992:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f996:	2900      	cmp	r1, #0
 800f998:	d0f5      	beq.n	800f986 <__any_on+0x2a>
 800f99a:	2001      	movs	r0, #1
 800f99c:	e7f6      	b.n	800f98c <__any_on+0x30>

0800f99e <sulp>:
 800f99e:	b570      	push	{r4, r5, r6, lr}
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	460d      	mov	r5, r1
 800f9a4:	ec45 4b10 	vmov	d0, r4, r5
 800f9a8:	4616      	mov	r6, r2
 800f9aa:	f7ff feb7 	bl	800f71c <__ulp>
 800f9ae:	ec51 0b10 	vmov	r0, r1, d0
 800f9b2:	b17e      	cbz	r6, 800f9d4 <sulp+0x36>
 800f9b4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f9b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	dd09      	ble.n	800f9d4 <sulp+0x36>
 800f9c0:	051b      	lsls	r3, r3, #20
 800f9c2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f9c6:	2400      	movs	r4, #0
 800f9c8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f9cc:	4622      	mov	r2, r4
 800f9ce:	462b      	mov	r3, r5
 800f9d0:	f7f0 fe12 	bl	80005f8 <__aeabi_dmul>
 800f9d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f9d8 <_strtod_l>:
 800f9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9dc:	ed2d 8b02 	vpush	{d8}
 800f9e0:	b09b      	sub	sp, #108	; 0x6c
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	9213      	str	r2, [sp, #76]	; 0x4c
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	9216      	str	r2, [sp, #88]	; 0x58
 800f9ea:	460d      	mov	r5, r1
 800f9ec:	f04f 0800 	mov.w	r8, #0
 800f9f0:	f04f 0900 	mov.w	r9, #0
 800f9f4:	460a      	mov	r2, r1
 800f9f6:	9215      	str	r2, [sp, #84]	; 0x54
 800f9f8:	7811      	ldrb	r1, [r2, #0]
 800f9fa:	292b      	cmp	r1, #43	; 0x2b
 800f9fc:	d04c      	beq.n	800fa98 <_strtod_l+0xc0>
 800f9fe:	d83a      	bhi.n	800fa76 <_strtod_l+0x9e>
 800fa00:	290d      	cmp	r1, #13
 800fa02:	d834      	bhi.n	800fa6e <_strtod_l+0x96>
 800fa04:	2908      	cmp	r1, #8
 800fa06:	d834      	bhi.n	800fa72 <_strtod_l+0x9a>
 800fa08:	2900      	cmp	r1, #0
 800fa0a:	d03d      	beq.n	800fa88 <_strtod_l+0xb0>
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	920a      	str	r2, [sp, #40]	; 0x28
 800fa10:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800fa12:	7832      	ldrb	r2, [r6, #0]
 800fa14:	2a30      	cmp	r2, #48	; 0x30
 800fa16:	f040 80b4 	bne.w	800fb82 <_strtod_l+0x1aa>
 800fa1a:	7872      	ldrb	r2, [r6, #1]
 800fa1c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fa20:	2a58      	cmp	r2, #88	; 0x58
 800fa22:	d170      	bne.n	800fb06 <_strtod_l+0x12e>
 800fa24:	9302      	str	r3, [sp, #8]
 800fa26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa28:	9301      	str	r3, [sp, #4]
 800fa2a:	ab16      	add	r3, sp, #88	; 0x58
 800fa2c:	9300      	str	r3, [sp, #0]
 800fa2e:	4a8e      	ldr	r2, [pc, #568]	; (800fc68 <_strtod_l+0x290>)
 800fa30:	ab17      	add	r3, sp, #92	; 0x5c
 800fa32:	a915      	add	r1, sp, #84	; 0x54
 800fa34:	4620      	mov	r0, r4
 800fa36:	f001 fcc3 	bl	80113c0 <__gethex>
 800fa3a:	f010 070f 	ands.w	r7, r0, #15
 800fa3e:	4605      	mov	r5, r0
 800fa40:	d005      	beq.n	800fa4e <_strtod_l+0x76>
 800fa42:	2f06      	cmp	r7, #6
 800fa44:	d12a      	bne.n	800fa9c <_strtod_l+0xc4>
 800fa46:	3601      	adds	r6, #1
 800fa48:	2300      	movs	r3, #0
 800fa4a:	9615      	str	r6, [sp, #84]	; 0x54
 800fa4c:	930a      	str	r3, [sp, #40]	; 0x28
 800fa4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	f040 857f 	bne.w	8010554 <_strtod_l+0xb7c>
 800fa56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa58:	b1db      	cbz	r3, 800fa92 <_strtod_l+0xba>
 800fa5a:	4642      	mov	r2, r8
 800fa5c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fa60:	ec43 2b10 	vmov	d0, r2, r3
 800fa64:	b01b      	add	sp, #108	; 0x6c
 800fa66:	ecbd 8b02 	vpop	{d8}
 800fa6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa6e:	2920      	cmp	r1, #32
 800fa70:	d1cc      	bne.n	800fa0c <_strtod_l+0x34>
 800fa72:	3201      	adds	r2, #1
 800fa74:	e7bf      	b.n	800f9f6 <_strtod_l+0x1e>
 800fa76:	292d      	cmp	r1, #45	; 0x2d
 800fa78:	d1c8      	bne.n	800fa0c <_strtod_l+0x34>
 800fa7a:	2101      	movs	r1, #1
 800fa7c:	910a      	str	r1, [sp, #40]	; 0x28
 800fa7e:	1c51      	adds	r1, r2, #1
 800fa80:	9115      	str	r1, [sp, #84]	; 0x54
 800fa82:	7852      	ldrb	r2, [r2, #1]
 800fa84:	2a00      	cmp	r2, #0
 800fa86:	d1c3      	bne.n	800fa10 <_strtod_l+0x38>
 800fa88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa8a:	9515      	str	r5, [sp, #84]	; 0x54
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	f040 855f 	bne.w	8010550 <_strtod_l+0xb78>
 800fa92:	4642      	mov	r2, r8
 800fa94:	464b      	mov	r3, r9
 800fa96:	e7e3      	b.n	800fa60 <_strtod_l+0x88>
 800fa98:	2100      	movs	r1, #0
 800fa9a:	e7ef      	b.n	800fa7c <_strtod_l+0xa4>
 800fa9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fa9e:	b13a      	cbz	r2, 800fab0 <_strtod_l+0xd8>
 800faa0:	2135      	movs	r1, #53	; 0x35
 800faa2:	a818      	add	r0, sp, #96	; 0x60
 800faa4:	f7ff ff37 	bl	800f916 <__copybits>
 800faa8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800faaa:	4620      	mov	r0, r4
 800faac:	f7ff fb0a 	bl	800f0c4 <_Bfree>
 800fab0:	3f01      	subs	r7, #1
 800fab2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fab4:	2f04      	cmp	r7, #4
 800fab6:	d806      	bhi.n	800fac6 <_strtod_l+0xee>
 800fab8:	e8df f007 	tbb	[pc, r7]
 800fabc:	201d0314 	.word	0x201d0314
 800fac0:	14          	.byte	0x14
 800fac1:	00          	.byte	0x00
 800fac2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800fac6:	05e9      	lsls	r1, r5, #23
 800fac8:	bf48      	it	mi
 800faca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800face:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fad2:	0d1b      	lsrs	r3, r3, #20
 800fad4:	051b      	lsls	r3, r3, #20
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d1b9      	bne.n	800fa4e <_strtod_l+0x76>
 800fada:	f7fe faef 	bl	800e0bc <__errno>
 800fade:	2322      	movs	r3, #34	; 0x22
 800fae0:	6003      	str	r3, [r0, #0]
 800fae2:	e7b4      	b.n	800fa4e <_strtod_l+0x76>
 800fae4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800fae8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800faec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800faf0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800faf4:	e7e7      	b.n	800fac6 <_strtod_l+0xee>
 800faf6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800fc70 <_strtod_l+0x298>
 800fafa:	e7e4      	b.n	800fac6 <_strtod_l+0xee>
 800fafc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800fb00:	f04f 38ff 	mov.w	r8, #4294967295
 800fb04:	e7df      	b.n	800fac6 <_strtod_l+0xee>
 800fb06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb08:	1c5a      	adds	r2, r3, #1
 800fb0a:	9215      	str	r2, [sp, #84]	; 0x54
 800fb0c:	785b      	ldrb	r3, [r3, #1]
 800fb0e:	2b30      	cmp	r3, #48	; 0x30
 800fb10:	d0f9      	beq.n	800fb06 <_strtod_l+0x12e>
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d09b      	beq.n	800fa4e <_strtod_l+0x76>
 800fb16:	2301      	movs	r3, #1
 800fb18:	f04f 0a00 	mov.w	sl, #0
 800fb1c:	9304      	str	r3, [sp, #16]
 800fb1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb20:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb22:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800fb26:	46d3      	mov	fp, sl
 800fb28:	220a      	movs	r2, #10
 800fb2a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800fb2c:	7806      	ldrb	r6, [r0, #0]
 800fb2e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fb32:	b2d9      	uxtb	r1, r3
 800fb34:	2909      	cmp	r1, #9
 800fb36:	d926      	bls.n	800fb86 <_strtod_l+0x1ae>
 800fb38:	494c      	ldr	r1, [pc, #304]	; (800fc6c <_strtod_l+0x294>)
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	f001 fb79 	bl	8011232 <strncmp>
 800fb40:	2800      	cmp	r0, #0
 800fb42:	d030      	beq.n	800fba6 <_strtod_l+0x1ce>
 800fb44:	2000      	movs	r0, #0
 800fb46:	4632      	mov	r2, r6
 800fb48:	9005      	str	r0, [sp, #20]
 800fb4a:	465e      	mov	r6, fp
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2a65      	cmp	r2, #101	; 0x65
 800fb50:	d001      	beq.n	800fb56 <_strtod_l+0x17e>
 800fb52:	2a45      	cmp	r2, #69	; 0x45
 800fb54:	d113      	bne.n	800fb7e <_strtod_l+0x1a6>
 800fb56:	b91e      	cbnz	r6, 800fb60 <_strtod_l+0x188>
 800fb58:	9a04      	ldr	r2, [sp, #16]
 800fb5a:	4302      	orrs	r2, r0
 800fb5c:	d094      	beq.n	800fa88 <_strtod_l+0xb0>
 800fb5e:	2600      	movs	r6, #0
 800fb60:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800fb62:	1c6a      	adds	r2, r5, #1
 800fb64:	9215      	str	r2, [sp, #84]	; 0x54
 800fb66:	786a      	ldrb	r2, [r5, #1]
 800fb68:	2a2b      	cmp	r2, #43	; 0x2b
 800fb6a:	d074      	beq.n	800fc56 <_strtod_l+0x27e>
 800fb6c:	2a2d      	cmp	r2, #45	; 0x2d
 800fb6e:	d078      	beq.n	800fc62 <_strtod_l+0x28a>
 800fb70:	f04f 0c00 	mov.w	ip, #0
 800fb74:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fb78:	2909      	cmp	r1, #9
 800fb7a:	d97f      	bls.n	800fc7c <_strtod_l+0x2a4>
 800fb7c:	9515      	str	r5, [sp, #84]	; 0x54
 800fb7e:	2700      	movs	r7, #0
 800fb80:	e09e      	b.n	800fcc0 <_strtod_l+0x2e8>
 800fb82:	2300      	movs	r3, #0
 800fb84:	e7c8      	b.n	800fb18 <_strtod_l+0x140>
 800fb86:	f1bb 0f08 	cmp.w	fp, #8
 800fb8a:	bfd8      	it	le
 800fb8c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800fb8e:	f100 0001 	add.w	r0, r0, #1
 800fb92:	bfda      	itte	le
 800fb94:	fb02 3301 	mlale	r3, r2, r1, r3
 800fb98:	9309      	strle	r3, [sp, #36]	; 0x24
 800fb9a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800fb9e:	f10b 0b01 	add.w	fp, fp, #1
 800fba2:	9015      	str	r0, [sp, #84]	; 0x54
 800fba4:	e7c1      	b.n	800fb2a <_strtod_l+0x152>
 800fba6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fba8:	1c5a      	adds	r2, r3, #1
 800fbaa:	9215      	str	r2, [sp, #84]	; 0x54
 800fbac:	785a      	ldrb	r2, [r3, #1]
 800fbae:	f1bb 0f00 	cmp.w	fp, #0
 800fbb2:	d037      	beq.n	800fc24 <_strtod_l+0x24c>
 800fbb4:	9005      	str	r0, [sp, #20]
 800fbb6:	465e      	mov	r6, fp
 800fbb8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fbbc:	2b09      	cmp	r3, #9
 800fbbe:	d912      	bls.n	800fbe6 <_strtod_l+0x20e>
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	e7c4      	b.n	800fb4e <_strtod_l+0x176>
 800fbc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fbc6:	1c5a      	adds	r2, r3, #1
 800fbc8:	9215      	str	r2, [sp, #84]	; 0x54
 800fbca:	785a      	ldrb	r2, [r3, #1]
 800fbcc:	3001      	adds	r0, #1
 800fbce:	2a30      	cmp	r2, #48	; 0x30
 800fbd0:	d0f8      	beq.n	800fbc4 <_strtod_l+0x1ec>
 800fbd2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fbd6:	2b08      	cmp	r3, #8
 800fbd8:	f200 84c1 	bhi.w	801055e <_strtod_l+0xb86>
 800fbdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fbde:	9005      	str	r0, [sp, #20]
 800fbe0:	2000      	movs	r0, #0
 800fbe2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fbe4:	4606      	mov	r6, r0
 800fbe6:	3a30      	subs	r2, #48	; 0x30
 800fbe8:	f100 0301 	add.w	r3, r0, #1
 800fbec:	d014      	beq.n	800fc18 <_strtod_l+0x240>
 800fbee:	9905      	ldr	r1, [sp, #20]
 800fbf0:	4419      	add	r1, r3
 800fbf2:	9105      	str	r1, [sp, #20]
 800fbf4:	4633      	mov	r3, r6
 800fbf6:	eb00 0c06 	add.w	ip, r0, r6
 800fbfa:	210a      	movs	r1, #10
 800fbfc:	4563      	cmp	r3, ip
 800fbfe:	d113      	bne.n	800fc28 <_strtod_l+0x250>
 800fc00:	1833      	adds	r3, r6, r0
 800fc02:	2b08      	cmp	r3, #8
 800fc04:	f106 0601 	add.w	r6, r6, #1
 800fc08:	4406      	add	r6, r0
 800fc0a:	dc1a      	bgt.n	800fc42 <_strtod_l+0x26a>
 800fc0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc0e:	230a      	movs	r3, #10
 800fc10:	fb03 2301 	mla	r3, r3, r1, r2
 800fc14:	9309      	str	r3, [sp, #36]	; 0x24
 800fc16:	2300      	movs	r3, #0
 800fc18:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fc1a:	1c51      	adds	r1, r2, #1
 800fc1c:	9115      	str	r1, [sp, #84]	; 0x54
 800fc1e:	7852      	ldrb	r2, [r2, #1]
 800fc20:	4618      	mov	r0, r3
 800fc22:	e7c9      	b.n	800fbb8 <_strtod_l+0x1e0>
 800fc24:	4658      	mov	r0, fp
 800fc26:	e7d2      	b.n	800fbce <_strtod_l+0x1f6>
 800fc28:	2b08      	cmp	r3, #8
 800fc2a:	f103 0301 	add.w	r3, r3, #1
 800fc2e:	dc03      	bgt.n	800fc38 <_strtod_l+0x260>
 800fc30:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fc32:	434f      	muls	r7, r1
 800fc34:	9709      	str	r7, [sp, #36]	; 0x24
 800fc36:	e7e1      	b.n	800fbfc <_strtod_l+0x224>
 800fc38:	2b10      	cmp	r3, #16
 800fc3a:	bfd8      	it	le
 800fc3c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800fc40:	e7dc      	b.n	800fbfc <_strtod_l+0x224>
 800fc42:	2e10      	cmp	r6, #16
 800fc44:	bfdc      	itt	le
 800fc46:	230a      	movle	r3, #10
 800fc48:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800fc4c:	e7e3      	b.n	800fc16 <_strtod_l+0x23e>
 800fc4e:	2300      	movs	r3, #0
 800fc50:	9305      	str	r3, [sp, #20]
 800fc52:	2301      	movs	r3, #1
 800fc54:	e780      	b.n	800fb58 <_strtod_l+0x180>
 800fc56:	f04f 0c00 	mov.w	ip, #0
 800fc5a:	1caa      	adds	r2, r5, #2
 800fc5c:	9215      	str	r2, [sp, #84]	; 0x54
 800fc5e:	78aa      	ldrb	r2, [r5, #2]
 800fc60:	e788      	b.n	800fb74 <_strtod_l+0x19c>
 800fc62:	f04f 0c01 	mov.w	ip, #1
 800fc66:	e7f8      	b.n	800fc5a <_strtod_l+0x282>
 800fc68:	08013b78 	.word	0x08013b78
 800fc6c:	08013b74 	.word	0x08013b74
 800fc70:	7ff00000 	.word	0x7ff00000
 800fc74:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fc76:	1c51      	adds	r1, r2, #1
 800fc78:	9115      	str	r1, [sp, #84]	; 0x54
 800fc7a:	7852      	ldrb	r2, [r2, #1]
 800fc7c:	2a30      	cmp	r2, #48	; 0x30
 800fc7e:	d0f9      	beq.n	800fc74 <_strtod_l+0x29c>
 800fc80:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fc84:	2908      	cmp	r1, #8
 800fc86:	f63f af7a 	bhi.w	800fb7e <_strtod_l+0x1a6>
 800fc8a:	3a30      	subs	r2, #48	; 0x30
 800fc8c:	9208      	str	r2, [sp, #32]
 800fc8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fc90:	920c      	str	r2, [sp, #48]	; 0x30
 800fc92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fc94:	1c57      	adds	r7, r2, #1
 800fc96:	9715      	str	r7, [sp, #84]	; 0x54
 800fc98:	7852      	ldrb	r2, [r2, #1]
 800fc9a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fc9e:	f1be 0f09 	cmp.w	lr, #9
 800fca2:	d938      	bls.n	800fd16 <_strtod_l+0x33e>
 800fca4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fca6:	1a7f      	subs	r7, r7, r1
 800fca8:	2f08      	cmp	r7, #8
 800fcaa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800fcae:	dc03      	bgt.n	800fcb8 <_strtod_l+0x2e0>
 800fcb0:	9908      	ldr	r1, [sp, #32]
 800fcb2:	428f      	cmp	r7, r1
 800fcb4:	bfa8      	it	ge
 800fcb6:	460f      	movge	r7, r1
 800fcb8:	f1bc 0f00 	cmp.w	ip, #0
 800fcbc:	d000      	beq.n	800fcc0 <_strtod_l+0x2e8>
 800fcbe:	427f      	negs	r7, r7
 800fcc0:	2e00      	cmp	r6, #0
 800fcc2:	d14f      	bne.n	800fd64 <_strtod_l+0x38c>
 800fcc4:	9904      	ldr	r1, [sp, #16]
 800fcc6:	4301      	orrs	r1, r0
 800fcc8:	f47f aec1 	bne.w	800fa4e <_strtod_l+0x76>
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	f47f aedb 	bne.w	800fa88 <_strtod_l+0xb0>
 800fcd2:	2a69      	cmp	r2, #105	; 0x69
 800fcd4:	d029      	beq.n	800fd2a <_strtod_l+0x352>
 800fcd6:	dc26      	bgt.n	800fd26 <_strtod_l+0x34e>
 800fcd8:	2a49      	cmp	r2, #73	; 0x49
 800fcda:	d026      	beq.n	800fd2a <_strtod_l+0x352>
 800fcdc:	2a4e      	cmp	r2, #78	; 0x4e
 800fcde:	f47f aed3 	bne.w	800fa88 <_strtod_l+0xb0>
 800fce2:	499b      	ldr	r1, [pc, #620]	; (800ff50 <_strtod_l+0x578>)
 800fce4:	a815      	add	r0, sp, #84	; 0x54
 800fce6:	f001 fdab 	bl	8011840 <__match>
 800fcea:	2800      	cmp	r0, #0
 800fcec:	f43f aecc 	beq.w	800fa88 <_strtod_l+0xb0>
 800fcf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	2b28      	cmp	r3, #40	; 0x28
 800fcf6:	d12f      	bne.n	800fd58 <_strtod_l+0x380>
 800fcf8:	4996      	ldr	r1, [pc, #600]	; (800ff54 <_strtod_l+0x57c>)
 800fcfa:	aa18      	add	r2, sp, #96	; 0x60
 800fcfc:	a815      	add	r0, sp, #84	; 0x54
 800fcfe:	f001 fdb3 	bl	8011868 <__hexnan>
 800fd02:	2805      	cmp	r0, #5
 800fd04:	d128      	bne.n	800fd58 <_strtod_l+0x380>
 800fd06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fd08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fd0c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800fd10:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800fd14:	e69b      	b.n	800fa4e <_strtod_l+0x76>
 800fd16:	9f08      	ldr	r7, [sp, #32]
 800fd18:	210a      	movs	r1, #10
 800fd1a:	fb01 2107 	mla	r1, r1, r7, r2
 800fd1e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800fd22:	9208      	str	r2, [sp, #32]
 800fd24:	e7b5      	b.n	800fc92 <_strtod_l+0x2ba>
 800fd26:	2a6e      	cmp	r2, #110	; 0x6e
 800fd28:	e7d9      	b.n	800fcde <_strtod_l+0x306>
 800fd2a:	498b      	ldr	r1, [pc, #556]	; (800ff58 <_strtod_l+0x580>)
 800fd2c:	a815      	add	r0, sp, #84	; 0x54
 800fd2e:	f001 fd87 	bl	8011840 <__match>
 800fd32:	2800      	cmp	r0, #0
 800fd34:	f43f aea8 	beq.w	800fa88 <_strtod_l+0xb0>
 800fd38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd3a:	4988      	ldr	r1, [pc, #544]	; (800ff5c <_strtod_l+0x584>)
 800fd3c:	3b01      	subs	r3, #1
 800fd3e:	a815      	add	r0, sp, #84	; 0x54
 800fd40:	9315      	str	r3, [sp, #84]	; 0x54
 800fd42:	f001 fd7d 	bl	8011840 <__match>
 800fd46:	b910      	cbnz	r0, 800fd4e <_strtod_l+0x376>
 800fd48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	9315      	str	r3, [sp, #84]	; 0x54
 800fd4e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800ff6c <_strtod_l+0x594>
 800fd52:	f04f 0800 	mov.w	r8, #0
 800fd56:	e67a      	b.n	800fa4e <_strtod_l+0x76>
 800fd58:	4881      	ldr	r0, [pc, #516]	; (800ff60 <_strtod_l+0x588>)
 800fd5a:	f001 fa8d 	bl	8011278 <nan>
 800fd5e:	ec59 8b10 	vmov	r8, r9, d0
 800fd62:	e674      	b.n	800fa4e <_strtod_l+0x76>
 800fd64:	9b05      	ldr	r3, [sp, #20]
 800fd66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd68:	1afb      	subs	r3, r7, r3
 800fd6a:	f1bb 0f00 	cmp.w	fp, #0
 800fd6e:	bf08      	it	eq
 800fd70:	46b3      	moveq	fp, r6
 800fd72:	2e10      	cmp	r6, #16
 800fd74:	9308      	str	r3, [sp, #32]
 800fd76:	4635      	mov	r5, r6
 800fd78:	bfa8      	it	ge
 800fd7a:	2510      	movge	r5, #16
 800fd7c:	f7f0 fbc2 	bl	8000504 <__aeabi_ui2d>
 800fd80:	2e09      	cmp	r6, #9
 800fd82:	4680      	mov	r8, r0
 800fd84:	4689      	mov	r9, r1
 800fd86:	dd13      	ble.n	800fdb0 <_strtod_l+0x3d8>
 800fd88:	4b76      	ldr	r3, [pc, #472]	; (800ff64 <_strtod_l+0x58c>)
 800fd8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fd8e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fd92:	f7f0 fc31 	bl	80005f8 <__aeabi_dmul>
 800fd96:	4680      	mov	r8, r0
 800fd98:	4650      	mov	r0, sl
 800fd9a:	4689      	mov	r9, r1
 800fd9c:	f7f0 fbb2 	bl	8000504 <__aeabi_ui2d>
 800fda0:	4602      	mov	r2, r0
 800fda2:	460b      	mov	r3, r1
 800fda4:	4640      	mov	r0, r8
 800fda6:	4649      	mov	r1, r9
 800fda8:	f7f0 fa70 	bl	800028c <__adddf3>
 800fdac:	4680      	mov	r8, r0
 800fdae:	4689      	mov	r9, r1
 800fdb0:	2e0f      	cmp	r6, #15
 800fdb2:	dc38      	bgt.n	800fe26 <_strtod_l+0x44e>
 800fdb4:	9b08      	ldr	r3, [sp, #32]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	f43f ae49 	beq.w	800fa4e <_strtod_l+0x76>
 800fdbc:	dd24      	ble.n	800fe08 <_strtod_l+0x430>
 800fdbe:	2b16      	cmp	r3, #22
 800fdc0:	dc0b      	bgt.n	800fdda <_strtod_l+0x402>
 800fdc2:	4968      	ldr	r1, [pc, #416]	; (800ff64 <_strtod_l+0x58c>)
 800fdc4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fdc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdcc:	4642      	mov	r2, r8
 800fdce:	464b      	mov	r3, r9
 800fdd0:	f7f0 fc12 	bl	80005f8 <__aeabi_dmul>
 800fdd4:	4680      	mov	r8, r0
 800fdd6:	4689      	mov	r9, r1
 800fdd8:	e639      	b.n	800fa4e <_strtod_l+0x76>
 800fdda:	9a08      	ldr	r2, [sp, #32]
 800fddc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800fde0:	4293      	cmp	r3, r2
 800fde2:	db20      	blt.n	800fe26 <_strtod_l+0x44e>
 800fde4:	4c5f      	ldr	r4, [pc, #380]	; (800ff64 <_strtod_l+0x58c>)
 800fde6:	f1c6 060f 	rsb	r6, r6, #15
 800fdea:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800fdee:	4642      	mov	r2, r8
 800fdf0:	464b      	mov	r3, r9
 800fdf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdf6:	f7f0 fbff 	bl	80005f8 <__aeabi_dmul>
 800fdfa:	9b08      	ldr	r3, [sp, #32]
 800fdfc:	1b9e      	subs	r6, r3, r6
 800fdfe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800fe02:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fe06:	e7e3      	b.n	800fdd0 <_strtod_l+0x3f8>
 800fe08:	9b08      	ldr	r3, [sp, #32]
 800fe0a:	3316      	adds	r3, #22
 800fe0c:	db0b      	blt.n	800fe26 <_strtod_l+0x44e>
 800fe0e:	9b05      	ldr	r3, [sp, #20]
 800fe10:	1bdf      	subs	r7, r3, r7
 800fe12:	4b54      	ldr	r3, [pc, #336]	; (800ff64 <_strtod_l+0x58c>)
 800fe14:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800fe18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe1c:	4640      	mov	r0, r8
 800fe1e:	4649      	mov	r1, r9
 800fe20:	f7f0 fd14 	bl	800084c <__aeabi_ddiv>
 800fe24:	e7d6      	b.n	800fdd4 <_strtod_l+0x3fc>
 800fe26:	9b08      	ldr	r3, [sp, #32]
 800fe28:	1b75      	subs	r5, r6, r5
 800fe2a:	441d      	add	r5, r3
 800fe2c:	2d00      	cmp	r5, #0
 800fe2e:	dd70      	ble.n	800ff12 <_strtod_l+0x53a>
 800fe30:	f015 030f 	ands.w	r3, r5, #15
 800fe34:	d00a      	beq.n	800fe4c <_strtod_l+0x474>
 800fe36:	494b      	ldr	r1, [pc, #300]	; (800ff64 <_strtod_l+0x58c>)
 800fe38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fe3c:	4642      	mov	r2, r8
 800fe3e:	464b      	mov	r3, r9
 800fe40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe44:	f7f0 fbd8 	bl	80005f8 <__aeabi_dmul>
 800fe48:	4680      	mov	r8, r0
 800fe4a:	4689      	mov	r9, r1
 800fe4c:	f035 050f 	bics.w	r5, r5, #15
 800fe50:	d04d      	beq.n	800feee <_strtod_l+0x516>
 800fe52:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800fe56:	dd22      	ble.n	800fe9e <_strtod_l+0x4c6>
 800fe58:	2500      	movs	r5, #0
 800fe5a:	46ab      	mov	fp, r5
 800fe5c:	9509      	str	r5, [sp, #36]	; 0x24
 800fe5e:	9505      	str	r5, [sp, #20]
 800fe60:	2322      	movs	r3, #34	; 0x22
 800fe62:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ff6c <_strtod_l+0x594>
 800fe66:	6023      	str	r3, [r4, #0]
 800fe68:	f04f 0800 	mov.w	r8, #0
 800fe6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	f43f aded 	beq.w	800fa4e <_strtod_l+0x76>
 800fe74:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fe76:	4620      	mov	r0, r4
 800fe78:	f7ff f924 	bl	800f0c4 <_Bfree>
 800fe7c:	9905      	ldr	r1, [sp, #20]
 800fe7e:	4620      	mov	r0, r4
 800fe80:	f7ff f920 	bl	800f0c4 <_Bfree>
 800fe84:	4659      	mov	r1, fp
 800fe86:	4620      	mov	r0, r4
 800fe88:	f7ff f91c 	bl	800f0c4 <_Bfree>
 800fe8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe8e:	4620      	mov	r0, r4
 800fe90:	f7ff f918 	bl	800f0c4 <_Bfree>
 800fe94:	4629      	mov	r1, r5
 800fe96:	4620      	mov	r0, r4
 800fe98:	f7ff f914 	bl	800f0c4 <_Bfree>
 800fe9c:	e5d7      	b.n	800fa4e <_strtod_l+0x76>
 800fe9e:	4b32      	ldr	r3, [pc, #200]	; (800ff68 <_strtod_l+0x590>)
 800fea0:	9304      	str	r3, [sp, #16]
 800fea2:	2300      	movs	r3, #0
 800fea4:	112d      	asrs	r5, r5, #4
 800fea6:	4640      	mov	r0, r8
 800fea8:	4649      	mov	r1, r9
 800feaa:	469a      	mov	sl, r3
 800feac:	2d01      	cmp	r5, #1
 800feae:	dc21      	bgt.n	800fef4 <_strtod_l+0x51c>
 800feb0:	b10b      	cbz	r3, 800feb6 <_strtod_l+0x4de>
 800feb2:	4680      	mov	r8, r0
 800feb4:	4689      	mov	r9, r1
 800feb6:	492c      	ldr	r1, [pc, #176]	; (800ff68 <_strtod_l+0x590>)
 800feb8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800febc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fec0:	4642      	mov	r2, r8
 800fec2:	464b      	mov	r3, r9
 800fec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fec8:	f7f0 fb96 	bl	80005f8 <__aeabi_dmul>
 800fecc:	4b27      	ldr	r3, [pc, #156]	; (800ff6c <_strtod_l+0x594>)
 800fece:	460a      	mov	r2, r1
 800fed0:	400b      	ands	r3, r1
 800fed2:	4927      	ldr	r1, [pc, #156]	; (800ff70 <_strtod_l+0x598>)
 800fed4:	428b      	cmp	r3, r1
 800fed6:	4680      	mov	r8, r0
 800fed8:	d8be      	bhi.n	800fe58 <_strtod_l+0x480>
 800feda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fede:	428b      	cmp	r3, r1
 800fee0:	bf86      	itte	hi
 800fee2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800ff74 <_strtod_l+0x59c>
 800fee6:	f04f 38ff 	movhi.w	r8, #4294967295
 800feea:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800feee:	2300      	movs	r3, #0
 800fef0:	9304      	str	r3, [sp, #16]
 800fef2:	e07b      	b.n	800ffec <_strtod_l+0x614>
 800fef4:	07ea      	lsls	r2, r5, #31
 800fef6:	d505      	bpl.n	800ff04 <_strtod_l+0x52c>
 800fef8:	9b04      	ldr	r3, [sp, #16]
 800fefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefe:	f7f0 fb7b 	bl	80005f8 <__aeabi_dmul>
 800ff02:	2301      	movs	r3, #1
 800ff04:	9a04      	ldr	r2, [sp, #16]
 800ff06:	3208      	adds	r2, #8
 800ff08:	f10a 0a01 	add.w	sl, sl, #1
 800ff0c:	106d      	asrs	r5, r5, #1
 800ff0e:	9204      	str	r2, [sp, #16]
 800ff10:	e7cc      	b.n	800feac <_strtod_l+0x4d4>
 800ff12:	d0ec      	beq.n	800feee <_strtod_l+0x516>
 800ff14:	426d      	negs	r5, r5
 800ff16:	f015 020f 	ands.w	r2, r5, #15
 800ff1a:	d00a      	beq.n	800ff32 <_strtod_l+0x55a>
 800ff1c:	4b11      	ldr	r3, [pc, #68]	; (800ff64 <_strtod_l+0x58c>)
 800ff1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff22:	4640      	mov	r0, r8
 800ff24:	4649      	mov	r1, r9
 800ff26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff2a:	f7f0 fc8f 	bl	800084c <__aeabi_ddiv>
 800ff2e:	4680      	mov	r8, r0
 800ff30:	4689      	mov	r9, r1
 800ff32:	112d      	asrs	r5, r5, #4
 800ff34:	d0db      	beq.n	800feee <_strtod_l+0x516>
 800ff36:	2d1f      	cmp	r5, #31
 800ff38:	dd1e      	ble.n	800ff78 <_strtod_l+0x5a0>
 800ff3a:	2500      	movs	r5, #0
 800ff3c:	46ab      	mov	fp, r5
 800ff3e:	9509      	str	r5, [sp, #36]	; 0x24
 800ff40:	9505      	str	r5, [sp, #20]
 800ff42:	2322      	movs	r3, #34	; 0x22
 800ff44:	f04f 0800 	mov.w	r8, #0
 800ff48:	f04f 0900 	mov.w	r9, #0
 800ff4c:	6023      	str	r3, [r4, #0]
 800ff4e:	e78d      	b.n	800fe6c <_strtod_l+0x494>
 800ff50:	08013965 	.word	0x08013965
 800ff54:	08013b8c 	.word	0x08013b8c
 800ff58:	0801395d 	.word	0x0801395d
 800ff5c:	08013992 	.word	0x08013992
 800ff60:	08013d38 	.word	0x08013d38
 800ff64:	08013aa0 	.word	0x08013aa0
 800ff68:	08013a78 	.word	0x08013a78
 800ff6c:	7ff00000 	.word	0x7ff00000
 800ff70:	7ca00000 	.word	0x7ca00000
 800ff74:	7fefffff 	.word	0x7fefffff
 800ff78:	f015 0310 	ands.w	r3, r5, #16
 800ff7c:	bf18      	it	ne
 800ff7e:	236a      	movne	r3, #106	; 0x6a
 800ff80:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8010324 <_strtod_l+0x94c>
 800ff84:	9304      	str	r3, [sp, #16]
 800ff86:	4640      	mov	r0, r8
 800ff88:	4649      	mov	r1, r9
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	07ea      	lsls	r2, r5, #31
 800ff8e:	d504      	bpl.n	800ff9a <_strtod_l+0x5c2>
 800ff90:	e9da 2300 	ldrd	r2, r3, [sl]
 800ff94:	f7f0 fb30 	bl	80005f8 <__aeabi_dmul>
 800ff98:	2301      	movs	r3, #1
 800ff9a:	106d      	asrs	r5, r5, #1
 800ff9c:	f10a 0a08 	add.w	sl, sl, #8
 800ffa0:	d1f4      	bne.n	800ff8c <_strtod_l+0x5b4>
 800ffa2:	b10b      	cbz	r3, 800ffa8 <_strtod_l+0x5d0>
 800ffa4:	4680      	mov	r8, r0
 800ffa6:	4689      	mov	r9, r1
 800ffa8:	9b04      	ldr	r3, [sp, #16]
 800ffaa:	b1bb      	cbz	r3, 800ffdc <_strtod_l+0x604>
 800ffac:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ffb0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	4649      	mov	r1, r9
 800ffb8:	dd10      	ble.n	800ffdc <_strtod_l+0x604>
 800ffba:	2b1f      	cmp	r3, #31
 800ffbc:	f340 811e 	ble.w	80101fc <_strtod_l+0x824>
 800ffc0:	2b34      	cmp	r3, #52	; 0x34
 800ffc2:	bfde      	ittt	le
 800ffc4:	f04f 33ff 	movle.w	r3, #4294967295
 800ffc8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ffcc:	4093      	lslle	r3, r2
 800ffce:	f04f 0800 	mov.w	r8, #0
 800ffd2:	bfcc      	ite	gt
 800ffd4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ffd8:	ea03 0901 	andle.w	r9, r3, r1
 800ffdc:	2200      	movs	r2, #0
 800ffde:	2300      	movs	r3, #0
 800ffe0:	4640      	mov	r0, r8
 800ffe2:	4649      	mov	r1, r9
 800ffe4:	f7f0 fd70 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffe8:	2800      	cmp	r0, #0
 800ffea:	d1a6      	bne.n	800ff3a <_strtod_l+0x562>
 800ffec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffee:	9300      	str	r3, [sp, #0]
 800fff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fff2:	4633      	mov	r3, r6
 800fff4:	465a      	mov	r2, fp
 800fff6:	4620      	mov	r0, r4
 800fff8:	f7ff f8cc 	bl	800f194 <__s2b>
 800fffc:	9009      	str	r0, [sp, #36]	; 0x24
 800fffe:	2800      	cmp	r0, #0
 8010000:	f43f af2a 	beq.w	800fe58 <_strtod_l+0x480>
 8010004:	9a08      	ldr	r2, [sp, #32]
 8010006:	9b05      	ldr	r3, [sp, #20]
 8010008:	2a00      	cmp	r2, #0
 801000a:	eba3 0307 	sub.w	r3, r3, r7
 801000e:	bfa8      	it	ge
 8010010:	2300      	movge	r3, #0
 8010012:	930c      	str	r3, [sp, #48]	; 0x30
 8010014:	2500      	movs	r5, #0
 8010016:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801001a:	9312      	str	r3, [sp, #72]	; 0x48
 801001c:	46ab      	mov	fp, r5
 801001e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010020:	4620      	mov	r0, r4
 8010022:	6859      	ldr	r1, [r3, #4]
 8010024:	f7ff f80e 	bl	800f044 <_Balloc>
 8010028:	9005      	str	r0, [sp, #20]
 801002a:	2800      	cmp	r0, #0
 801002c:	f43f af18 	beq.w	800fe60 <_strtod_l+0x488>
 8010030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010032:	691a      	ldr	r2, [r3, #16]
 8010034:	3202      	adds	r2, #2
 8010036:	f103 010c 	add.w	r1, r3, #12
 801003a:	0092      	lsls	r2, r2, #2
 801003c:	300c      	adds	r0, #12
 801003e:	f7fe f872 	bl	800e126 <memcpy>
 8010042:	ec49 8b10 	vmov	d0, r8, r9
 8010046:	aa18      	add	r2, sp, #96	; 0x60
 8010048:	a917      	add	r1, sp, #92	; 0x5c
 801004a:	4620      	mov	r0, r4
 801004c:	f7ff fbd6 	bl	800f7fc <__d2b>
 8010050:	ec49 8b18 	vmov	d8, r8, r9
 8010054:	9016      	str	r0, [sp, #88]	; 0x58
 8010056:	2800      	cmp	r0, #0
 8010058:	f43f af02 	beq.w	800fe60 <_strtod_l+0x488>
 801005c:	2101      	movs	r1, #1
 801005e:	4620      	mov	r0, r4
 8010060:	f7ff f930 	bl	800f2c4 <__i2b>
 8010064:	4683      	mov	fp, r0
 8010066:	2800      	cmp	r0, #0
 8010068:	f43f aefa 	beq.w	800fe60 <_strtod_l+0x488>
 801006c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801006e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010070:	2e00      	cmp	r6, #0
 8010072:	bfab      	itete	ge
 8010074:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8010076:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010078:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801007a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801007e:	bfac      	ite	ge
 8010080:	eb06 0a03 	addge.w	sl, r6, r3
 8010084:	1b9f      	sublt	r7, r3, r6
 8010086:	9b04      	ldr	r3, [sp, #16]
 8010088:	1af6      	subs	r6, r6, r3
 801008a:	4416      	add	r6, r2
 801008c:	4ba0      	ldr	r3, [pc, #640]	; (8010310 <_strtod_l+0x938>)
 801008e:	3e01      	subs	r6, #1
 8010090:	429e      	cmp	r6, r3
 8010092:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010096:	f280 80c4 	bge.w	8010222 <_strtod_l+0x84a>
 801009a:	1b9b      	subs	r3, r3, r6
 801009c:	2b1f      	cmp	r3, #31
 801009e:	eba2 0203 	sub.w	r2, r2, r3
 80100a2:	f04f 0101 	mov.w	r1, #1
 80100a6:	f300 80b0 	bgt.w	801020a <_strtod_l+0x832>
 80100aa:	fa01 f303 	lsl.w	r3, r1, r3
 80100ae:	930e      	str	r3, [sp, #56]	; 0x38
 80100b0:	2300      	movs	r3, #0
 80100b2:	930d      	str	r3, [sp, #52]	; 0x34
 80100b4:	eb0a 0602 	add.w	r6, sl, r2
 80100b8:	9b04      	ldr	r3, [sp, #16]
 80100ba:	45b2      	cmp	sl, r6
 80100bc:	4417      	add	r7, r2
 80100be:	441f      	add	r7, r3
 80100c0:	4653      	mov	r3, sl
 80100c2:	bfa8      	it	ge
 80100c4:	4633      	movge	r3, r6
 80100c6:	42bb      	cmp	r3, r7
 80100c8:	bfa8      	it	ge
 80100ca:	463b      	movge	r3, r7
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	bfc2      	ittt	gt
 80100d0:	1af6      	subgt	r6, r6, r3
 80100d2:	1aff      	subgt	r7, r7, r3
 80100d4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80100d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80100da:	2b00      	cmp	r3, #0
 80100dc:	dd17      	ble.n	801010e <_strtod_l+0x736>
 80100de:	4659      	mov	r1, fp
 80100e0:	461a      	mov	r2, r3
 80100e2:	4620      	mov	r0, r4
 80100e4:	f7ff f9ae 	bl	800f444 <__pow5mult>
 80100e8:	4683      	mov	fp, r0
 80100ea:	2800      	cmp	r0, #0
 80100ec:	f43f aeb8 	beq.w	800fe60 <_strtod_l+0x488>
 80100f0:	4601      	mov	r1, r0
 80100f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80100f4:	4620      	mov	r0, r4
 80100f6:	f7ff f8fb 	bl	800f2f0 <__multiply>
 80100fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80100fc:	2800      	cmp	r0, #0
 80100fe:	f43f aeaf 	beq.w	800fe60 <_strtod_l+0x488>
 8010102:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010104:	4620      	mov	r0, r4
 8010106:	f7fe ffdd 	bl	800f0c4 <_Bfree>
 801010a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801010c:	9316      	str	r3, [sp, #88]	; 0x58
 801010e:	2e00      	cmp	r6, #0
 8010110:	f300 808c 	bgt.w	801022c <_strtod_l+0x854>
 8010114:	9b08      	ldr	r3, [sp, #32]
 8010116:	2b00      	cmp	r3, #0
 8010118:	dd08      	ble.n	801012c <_strtod_l+0x754>
 801011a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801011c:	9905      	ldr	r1, [sp, #20]
 801011e:	4620      	mov	r0, r4
 8010120:	f7ff f990 	bl	800f444 <__pow5mult>
 8010124:	9005      	str	r0, [sp, #20]
 8010126:	2800      	cmp	r0, #0
 8010128:	f43f ae9a 	beq.w	800fe60 <_strtod_l+0x488>
 801012c:	2f00      	cmp	r7, #0
 801012e:	dd08      	ble.n	8010142 <_strtod_l+0x76a>
 8010130:	9905      	ldr	r1, [sp, #20]
 8010132:	463a      	mov	r2, r7
 8010134:	4620      	mov	r0, r4
 8010136:	f7ff f9df 	bl	800f4f8 <__lshift>
 801013a:	9005      	str	r0, [sp, #20]
 801013c:	2800      	cmp	r0, #0
 801013e:	f43f ae8f 	beq.w	800fe60 <_strtod_l+0x488>
 8010142:	f1ba 0f00 	cmp.w	sl, #0
 8010146:	dd08      	ble.n	801015a <_strtod_l+0x782>
 8010148:	4659      	mov	r1, fp
 801014a:	4652      	mov	r2, sl
 801014c:	4620      	mov	r0, r4
 801014e:	f7ff f9d3 	bl	800f4f8 <__lshift>
 8010152:	4683      	mov	fp, r0
 8010154:	2800      	cmp	r0, #0
 8010156:	f43f ae83 	beq.w	800fe60 <_strtod_l+0x488>
 801015a:	9a05      	ldr	r2, [sp, #20]
 801015c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801015e:	4620      	mov	r0, r4
 8010160:	f7ff fa52 	bl	800f608 <__mdiff>
 8010164:	4605      	mov	r5, r0
 8010166:	2800      	cmp	r0, #0
 8010168:	f43f ae7a 	beq.w	800fe60 <_strtod_l+0x488>
 801016c:	68c3      	ldr	r3, [r0, #12]
 801016e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010170:	2300      	movs	r3, #0
 8010172:	60c3      	str	r3, [r0, #12]
 8010174:	4659      	mov	r1, fp
 8010176:	f7ff fa2b 	bl	800f5d0 <__mcmp>
 801017a:	2800      	cmp	r0, #0
 801017c:	da60      	bge.n	8010240 <_strtod_l+0x868>
 801017e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010180:	ea53 0308 	orrs.w	r3, r3, r8
 8010184:	f040 8084 	bne.w	8010290 <_strtod_l+0x8b8>
 8010188:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801018c:	2b00      	cmp	r3, #0
 801018e:	d17f      	bne.n	8010290 <_strtod_l+0x8b8>
 8010190:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010194:	0d1b      	lsrs	r3, r3, #20
 8010196:	051b      	lsls	r3, r3, #20
 8010198:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801019c:	d978      	bls.n	8010290 <_strtod_l+0x8b8>
 801019e:	696b      	ldr	r3, [r5, #20]
 80101a0:	b913      	cbnz	r3, 80101a8 <_strtod_l+0x7d0>
 80101a2:	692b      	ldr	r3, [r5, #16]
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	dd73      	ble.n	8010290 <_strtod_l+0x8b8>
 80101a8:	4629      	mov	r1, r5
 80101aa:	2201      	movs	r2, #1
 80101ac:	4620      	mov	r0, r4
 80101ae:	f7ff f9a3 	bl	800f4f8 <__lshift>
 80101b2:	4659      	mov	r1, fp
 80101b4:	4605      	mov	r5, r0
 80101b6:	f7ff fa0b 	bl	800f5d0 <__mcmp>
 80101ba:	2800      	cmp	r0, #0
 80101bc:	dd68      	ble.n	8010290 <_strtod_l+0x8b8>
 80101be:	9904      	ldr	r1, [sp, #16]
 80101c0:	4a54      	ldr	r2, [pc, #336]	; (8010314 <_strtod_l+0x93c>)
 80101c2:	464b      	mov	r3, r9
 80101c4:	2900      	cmp	r1, #0
 80101c6:	f000 8084 	beq.w	80102d2 <_strtod_l+0x8fa>
 80101ca:	ea02 0109 	and.w	r1, r2, r9
 80101ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80101d2:	dc7e      	bgt.n	80102d2 <_strtod_l+0x8fa>
 80101d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80101d8:	f77f aeb3 	ble.w	800ff42 <_strtod_l+0x56a>
 80101dc:	4b4e      	ldr	r3, [pc, #312]	; (8010318 <_strtod_l+0x940>)
 80101de:	4640      	mov	r0, r8
 80101e0:	4649      	mov	r1, r9
 80101e2:	2200      	movs	r2, #0
 80101e4:	f7f0 fa08 	bl	80005f8 <__aeabi_dmul>
 80101e8:	4b4a      	ldr	r3, [pc, #296]	; (8010314 <_strtod_l+0x93c>)
 80101ea:	400b      	ands	r3, r1
 80101ec:	4680      	mov	r8, r0
 80101ee:	4689      	mov	r9, r1
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	f47f ae3f 	bne.w	800fe74 <_strtod_l+0x49c>
 80101f6:	2322      	movs	r3, #34	; 0x22
 80101f8:	6023      	str	r3, [r4, #0]
 80101fa:	e63b      	b.n	800fe74 <_strtod_l+0x49c>
 80101fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010200:	fa02 f303 	lsl.w	r3, r2, r3
 8010204:	ea03 0808 	and.w	r8, r3, r8
 8010208:	e6e8      	b.n	800ffdc <_strtod_l+0x604>
 801020a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801020e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010212:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010216:	36e2      	adds	r6, #226	; 0xe2
 8010218:	fa01 f306 	lsl.w	r3, r1, r6
 801021c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010220:	e748      	b.n	80100b4 <_strtod_l+0x6dc>
 8010222:	2100      	movs	r1, #0
 8010224:	2301      	movs	r3, #1
 8010226:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801022a:	e743      	b.n	80100b4 <_strtod_l+0x6dc>
 801022c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801022e:	4632      	mov	r2, r6
 8010230:	4620      	mov	r0, r4
 8010232:	f7ff f961 	bl	800f4f8 <__lshift>
 8010236:	9016      	str	r0, [sp, #88]	; 0x58
 8010238:	2800      	cmp	r0, #0
 801023a:	f47f af6b 	bne.w	8010114 <_strtod_l+0x73c>
 801023e:	e60f      	b.n	800fe60 <_strtod_l+0x488>
 8010240:	46ca      	mov	sl, r9
 8010242:	d171      	bne.n	8010328 <_strtod_l+0x950>
 8010244:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010246:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801024a:	b352      	cbz	r2, 80102a2 <_strtod_l+0x8ca>
 801024c:	4a33      	ldr	r2, [pc, #204]	; (801031c <_strtod_l+0x944>)
 801024e:	4293      	cmp	r3, r2
 8010250:	d12a      	bne.n	80102a8 <_strtod_l+0x8d0>
 8010252:	9b04      	ldr	r3, [sp, #16]
 8010254:	4641      	mov	r1, r8
 8010256:	b1fb      	cbz	r3, 8010298 <_strtod_l+0x8c0>
 8010258:	4b2e      	ldr	r3, [pc, #184]	; (8010314 <_strtod_l+0x93c>)
 801025a:	ea09 0303 	and.w	r3, r9, r3
 801025e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010262:	f04f 32ff 	mov.w	r2, #4294967295
 8010266:	d81a      	bhi.n	801029e <_strtod_l+0x8c6>
 8010268:	0d1b      	lsrs	r3, r3, #20
 801026a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801026e:	fa02 f303 	lsl.w	r3, r2, r3
 8010272:	4299      	cmp	r1, r3
 8010274:	d118      	bne.n	80102a8 <_strtod_l+0x8d0>
 8010276:	4b2a      	ldr	r3, [pc, #168]	; (8010320 <_strtod_l+0x948>)
 8010278:	459a      	cmp	sl, r3
 801027a:	d102      	bne.n	8010282 <_strtod_l+0x8aa>
 801027c:	3101      	adds	r1, #1
 801027e:	f43f adef 	beq.w	800fe60 <_strtod_l+0x488>
 8010282:	4b24      	ldr	r3, [pc, #144]	; (8010314 <_strtod_l+0x93c>)
 8010284:	ea0a 0303 	and.w	r3, sl, r3
 8010288:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801028c:	f04f 0800 	mov.w	r8, #0
 8010290:	9b04      	ldr	r3, [sp, #16]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d1a2      	bne.n	80101dc <_strtod_l+0x804>
 8010296:	e5ed      	b.n	800fe74 <_strtod_l+0x49c>
 8010298:	f04f 33ff 	mov.w	r3, #4294967295
 801029c:	e7e9      	b.n	8010272 <_strtod_l+0x89a>
 801029e:	4613      	mov	r3, r2
 80102a0:	e7e7      	b.n	8010272 <_strtod_l+0x89a>
 80102a2:	ea53 0308 	orrs.w	r3, r3, r8
 80102a6:	d08a      	beq.n	80101be <_strtod_l+0x7e6>
 80102a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102aa:	b1e3      	cbz	r3, 80102e6 <_strtod_l+0x90e>
 80102ac:	ea13 0f0a 	tst.w	r3, sl
 80102b0:	d0ee      	beq.n	8010290 <_strtod_l+0x8b8>
 80102b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102b4:	9a04      	ldr	r2, [sp, #16]
 80102b6:	4640      	mov	r0, r8
 80102b8:	4649      	mov	r1, r9
 80102ba:	b1c3      	cbz	r3, 80102ee <_strtod_l+0x916>
 80102bc:	f7ff fb6f 	bl	800f99e <sulp>
 80102c0:	4602      	mov	r2, r0
 80102c2:	460b      	mov	r3, r1
 80102c4:	ec51 0b18 	vmov	r0, r1, d8
 80102c8:	f7ef ffe0 	bl	800028c <__adddf3>
 80102cc:	4680      	mov	r8, r0
 80102ce:	4689      	mov	r9, r1
 80102d0:	e7de      	b.n	8010290 <_strtod_l+0x8b8>
 80102d2:	4013      	ands	r3, r2
 80102d4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80102d8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80102dc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80102e0:	f04f 38ff 	mov.w	r8, #4294967295
 80102e4:	e7d4      	b.n	8010290 <_strtod_l+0x8b8>
 80102e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102e8:	ea13 0f08 	tst.w	r3, r8
 80102ec:	e7e0      	b.n	80102b0 <_strtod_l+0x8d8>
 80102ee:	f7ff fb56 	bl	800f99e <sulp>
 80102f2:	4602      	mov	r2, r0
 80102f4:	460b      	mov	r3, r1
 80102f6:	ec51 0b18 	vmov	r0, r1, d8
 80102fa:	f7ef ffc5 	bl	8000288 <__aeabi_dsub>
 80102fe:	2200      	movs	r2, #0
 8010300:	2300      	movs	r3, #0
 8010302:	4680      	mov	r8, r0
 8010304:	4689      	mov	r9, r1
 8010306:	f7f0 fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 801030a:	2800      	cmp	r0, #0
 801030c:	d0c0      	beq.n	8010290 <_strtod_l+0x8b8>
 801030e:	e618      	b.n	800ff42 <_strtod_l+0x56a>
 8010310:	fffffc02 	.word	0xfffffc02
 8010314:	7ff00000 	.word	0x7ff00000
 8010318:	39500000 	.word	0x39500000
 801031c:	000fffff 	.word	0x000fffff
 8010320:	7fefffff 	.word	0x7fefffff
 8010324:	08013ba0 	.word	0x08013ba0
 8010328:	4659      	mov	r1, fp
 801032a:	4628      	mov	r0, r5
 801032c:	f7ff fac0 	bl	800f8b0 <__ratio>
 8010330:	ec57 6b10 	vmov	r6, r7, d0
 8010334:	ee10 0a10 	vmov	r0, s0
 8010338:	2200      	movs	r2, #0
 801033a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801033e:	4639      	mov	r1, r7
 8010340:	f7f0 fbd6 	bl	8000af0 <__aeabi_dcmple>
 8010344:	2800      	cmp	r0, #0
 8010346:	d071      	beq.n	801042c <_strtod_l+0xa54>
 8010348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801034a:	2b00      	cmp	r3, #0
 801034c:	d17c      	bne.n	8010448 <_strtod_l+0xa70>
 801034e:	f1b8 0f00 	cmp.w	r8, #0
 8010352:	d15a      	bne.n	801040a <_strtod_l+0xa32>
 8010354:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010358:	2b00      	cmp	r3, #0
 801035a:	d15d      	bne.n	8010418 <_strtod_l+0xa40>
 801035c:	4b90      	ldr	r3, [pc, #576]	; (80105a0 <_strtod_l+0xbc8>)
 801035e:	2200      	movs	r2, #0
 8010360:	4630      	mov	r0, r6
 8010362:	4639      	mov	r1, r7
 8010364:	f7f0 fbba 	bl	8000adc <__aeabi_dcmplt>
 8010368:	2800      	cmp	r0, #0
 801036a:	d15c      	bne.n	8010426 <_strtod_l+0xa4e>
 801036c:	4630      	mov	r0, r6
 801036e:	4639      	mov	r1, r7
 8010370:	4b8c      	ldr	r3, [pc, #560]	; (80105a4 <_strtod_l+0xbcc>)
 8010372:	2200      	movs	r2, #0
 8010374:	f7f0 f940 	bl	80005f8 <__aeabi_dmul>
 8010378:	4606      	mov	r6, r0
 801037a:	460f      	mov	r7, r1
 801037c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010380:	9606      	str	r6, [sp, #24]
 8010382:	9307      	str	r3, [sp, #28]
 8010384:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010388:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801038c:	4b86      	ldr	r3, [pc, #536]	; (80105a8 <_strtod_l+0xbd0>)
 801038e:	ea0a 0303 	and.w	r3, sl, r3
 8010392:	930d      	str	r3, [sp, #52]	; 0x34
 8010394:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010396:	4b85      	ldr	r3, [pc, #532]	; (80105ac <_strtod_l+0xbd4>)
 8010398:	429a      	cmp	r2, r3
 801039a:	f040 8090 	bne.w	80104be <_strtod_l+0xae6>
 801039e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80103a2:	ec49 8b10 	vmov	d0, r8, r9
 80103a6:	f7ff f9b9 	bl	800f71c <__ulp>
 80103aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80103ae:	ec51 0b10 	vmov	r0, r1, d0
 80103b2:	f7f0 f921 	bl	80005f8 <__aeabi_dmul>
 80103b6:	4642      	mov	r2, r8
 80103b8:	464b      	mov	r3, r9
 80103ba:	f7ef ff67 	bl	800028c <__adddf3>
 80103be:	460b      	mov	r3, r1
 80103c0:	4979      	ldr	r1, [pc, #484]	; (80105a8 <_strtod_l+0xbd0>)
 80103c2:	4a7b      	ldr	r2, [pc, #492]	; (80105b0 <_strtod_l+0xbd8>)
 80103c4:	4019      	ands	r1, r3
 80103c6:	4291      	cmp	r1, r2
 80103c8:	4680      	mov	r8, r0
 80103ca:	d944      	bls.n	8010456 <_strtod_l+0xa7e>
 80103cc:	ee18 2a90 	vmov	r2, s17
 80103d0:	4b78      	ldr	r3, [pc, #480]	; (80105b4 <_strtod_l+0xbdc>)
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d104      	bne.n	80103e0 <_strtod_l+0xa08>
 80103d6:	ee18 3a10 	vmov	r3, s16
 80103da:	3301      	adds	r3, #1
 80103dc:	f43f ad40 	beq.w	800fe60 <_strtod_l+0x488>
 80103e0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80105b4 <_strtod_l+0xbdc>
 80103e4:	f04f 38ff 	mov.w	r8, #4294967295
 80103e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80103ea:	4620      	mov	r0, r4
 80103ec:	f7fe fe6a 	bl	800f0c4 <_Bfree>
 80103f0:	9905      	ldr	r1, [sp, #20]
 80103f2:	4620      	mov	r0, r4
 80103f4:	f7fe fe66 	bl	800f0c4 <_Bfree>
 80103f8:	4659      	mov	r1, fp
 80103fa:	4620      	mov	r0, r4
 80103fc:	f7fe fe62 	bl	800f0c4 <_Bfree>
 8010400:	4629      	mov	r1, r5
 8010402:	4620      	mov	r0, r4
 8010404:	f7fe fe5e 	bl	800f0c4 <_Bfree>
 8010408:	e609      	b.n	801001e <_strtod_l+0x646>
 801040a:	f1b8 0f01 	cmp.w	r8, #1
 801040e:	d103      	bne.n	8010418 <_strtod_l+0xa40>
 8010410:	f1b9 0f00 	cmp.w	r9, #0
 8010414:	f43f ad95 	beq.w	800ff42 <_strtod_l+0x56a>
 8010418:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8010570 <_strtod_l+0xb98>
 801041c:	4f60      	ldr	r7, [pc, #384]	; (80105a0 <_strtod_l+0xbc8>)
 801041e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010422:	2600      	movs	r6, #0
 8010424:	e7ae      	b.n	8010384 <_strtod_l+0x9ac>
 8010426:	4f5f      	ldr	r7, [pc, #380]	; (80105a4 <_strtod_l+0xbcc>)
 8010428:	2600      	movs	r6, #0
 801042a:	e7a7      	b.n	801037c <_strtod_l+0x9a4>
 801042c:	4b5d      	ldr	r3, [pc, #372]	; (80105a4 <_strtod_l+0xbcc>)
 801042e:	4630      	mov	r0, r6
 8010430:	4639      	mov	r1, r7
 8010432:	2200      	movs	r2, #0
 8010434:	f7f0 f8e0 	bl	80005f8 <__aeabi_dmul>
 8010438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801043a:	4606      	mov	r6, r0
 801043c:	460f      	mov	r7, r1
 801043e:	2b00      	cmp	r3, #0
 8010440:	d09c      	beq.n	801037c <_strtod_l+0x9a4>
 8010442:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010446:	e79d      	b.n	8010384 <_strtod_l+0x9ac>
 8010448:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010578 <_strtod_l+0xba0>
 801044c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010450:	ec57 6b17 	vmov	r6, r7, d7
 8010454:	e796      	b.n	8010384 <_strtod_l+0x9ac>
 8010456:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801045a:	9b04      	ldr	r3, [sp, #16]
 801045c:	46ca      	mov	sl, r9
 801045e:	2b00      	cmp	r3, #0
 8010460:	d1c2      	bne.n	80103e8 <_strtod_l+0xa10>
 8010462:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010466:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010468:	0d1b      	lsrs	r3, r3, #20
 801046a:	051b      	lsls	r3, r3, #20
 801046c:	429a      	cmp	r2, r3
 801046e:	d1bb      	bne.n	80103e8 <_strtod_l+0xa10>
 8010470:	4630      	mov	r0, r6
 8010472:	4639      	mov	r1, r7
 8010474:	f7f0 fc20 	bl	8000cb8 <__aeabi_d2lz>
 8010478:	f7f0 f890 	bl	800059c <__aeabi_l2d>
 801047c:	4602      	mov	r2, r0
 801047e:	460b      	mov	r3, r1
 8010480:	4630      	mov	r0, r6
 8010482:	4639      	mov	r1, r7
 8010484:	f7ef ff00 	bl	8000288 <__aeabi_dsub>
 8010488:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801048a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801048e:	ea43 0308 	orr.w	r3, r3, r8
 8010492:	4313      	orrs	r3, r2
 8010494:	4606      	mov	r6, r0
 8010496:	460f      	mov	r7, r1
 8010498:	d054      	beq.n	8010544 <_strtod_l+0xb6c>
 801049a:	a339      	add	r3, pc, #228	; (adr r3, 8010580 <_strtod_l+0xba8>)
 801049c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a0:	f7f0 fb1c 	bl	8000adc <__aeabi_dcmplt>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	f47f ace5 	bne.w	800fe74 <_strtod_l+0x49c>
 80104aa:	a337      	add	r3, pc, #220	; (adr r3, 8010588 <_strtod_l+0xbb0>)
 80104ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b0:	4630      	mov	r0, r6
 80104b2:	4639      	mov	r1, r7
 80104b4:	f7f0 fb30 	bl	8000b18 <__aeabi_dcmpgt>
 80104b8:	2800      	cmp	r0, #0
 80104ba:	d095      	beq.n	80103e8 <_strtod_l+0xa10>
 80104bc:	e4da      	b.n	800fe74 <_strtod_l+0x49c>
 80104be:	9b04      	ldr	r3, [sp, #16]
 80104c0:	b333      	cbz	r3, 8010510 <_strtod_l+0xb38>
 80104c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80104c8:	d822      	bhi.n	8010510 <_strtod_l+0xb38>
 80104ca:	a331      	add	r3, pc, #196	; (adr r3, 8010590 <_strtod_l+0xbb8>)
 80104cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d0:	4630      	mov	r0, r6
 80104d2:	4639      	mov	r1, r7
 80104d4:	f7f0 fb0c 	bl	8000af0 <__aeabi_dcmple>
 80104d8:	b1a0      	cbz	r0, 8010504 <_strtod_l+0xb2c>
 80104da:	4639      	mov	r1, r7
 80104dc:	4630      	mov	r0, r6
 80104de:	f7f0 fb63 	bl	8000ba8 <__aeabi_d2uiz>
 80104e2:	2801      	cmp	r0, #1
 80104e4:	bf38      	it	cc
 80104e6:	2001      	movcc	r0, #1
 80104e8:	f7f0 f80c 	bl	8000504 <__aeabi_ui2d>
 80104ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104ee:	4606      	mov	r6, r0
 80104f0:	460f      	mov	r7, r1
 80104f2:	bb23      	cbnz	r3, 801053e <_strtod_l+0xb66>
 80104f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104f8:	9010      	str	r0, [sp, #64]	; 0x40
 80104fa:	9311      	str	r3, [sp, #68]	; 0x44
 80104fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010500:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010504:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010506:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010508:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801050c:	1a9b      	subs	r3, r3, r2
 801050e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010510:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010514:	eeb0 0a48 	vmov.f32	s0, s16
 8010518:	eef0 0a68 	vmov.f32	s1, s17
 801051c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010520:	f7ff f8fc 	bl	800f71c <__ulp>
 8010524:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010528:	ec53 2b10 	vmov	r2, r3, d0
 801052c:	f7f0 f864 	bl	80005f8 <__aeabi_dmul>
 8010530:	ec53 2b18 	vmov	r2, r3, d8
 8010534:	f7ef feaa 	bl	800028c <__adddf3>
 8010538:	4680      	mov	r8, r0
 801053a:	4689      	mov	r9, r1
 801053c:	e78d      	b.n	801045a <_strtod_l+0xa82>
 801053e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8010542:	e7db      	b.n	80104fc <_strtod_l+0xb24>
 8010544:	a314      	add	r3, pc, #80	; (adr r3, 8010598 <_strtod_l+0xbc0>)
 8010546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054a:	f7f0 fac7 	bl	8000adc <__aeabi_dcmplt>
 801054e:	e7b3      	b.n	80104b8 <_strtod_l+0xae0>
 8010550:	2300      	movs	r3, #0
 8010552:	930a      	str	r3, [sp, #40]	; 0x28
 8010554:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010556:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010558:	6013      	str	r3, [r2, #0]
 801055a:	f7ff ba7c 	b.w	800fa56 <_strtod_l+0x7e>
 801055e:	2a65      	cmp	r2, #101	; 0x65
 8010560:	f43f ab75 	beq.w	800fc4e <_strtod_l+0x276>
 8010564:	2a45      	cmp	r2, #69	; 0x45
 8010566:	f43f ab72 	beq.w	800fc4e <_strtod_l+0x276>
 801056a:	2301      	movs	r3, #1
 801056c:	f7ff bbaa 	b.w	800fcc4 <_strtod_l+0x2ec>
 8010570:	00000000 	.word	0x00000000
 8010574:	bff00000 	.word	0xbff00000
 8010578:	00000000 	.word	0x00000000
 801057c:	3ff00000 	.word	0x3ff00000
 8010580:	94a03595 	.word	0x94a03595
 8010584:	3fdfffff 	.word	0x3fdfffff
 8010588:	35afe535 	.word	0x35afe535
 801058c:	3fe00000 	.word	0x3fe00000
 8010590:	ffc00000 	.word	0xffc00000
 8010594:	41dfffff 	.word	0x41dfffff
 8010598:	94a03595 	.word	0x94a03595
 801059c:	3fcfffff 	.word	0x3fcfffff
 80105a0:	3ff00000 	.word	0x3ff00000
 80105a4:	3fe00000 	.word	0x3fe00000
 80105a8:	7ff00000 	.word	0x7ff00000
 80105ac:	7fe00000 	.word	0x7fe00000
 80105b0:	7c9fffff 	.word	0x7c9fffff
 80105b4:	7fefffff 	.word	0x7fefffff

080105b8 <_strtod_r>:
 80105b8:	4b01      	ldr	r3, [pc, #4]	; (80105c0 <_strtod_r+0x8>)
 80105ba:	f7ff ba0d 	b.w	800f9d8 <_strtod_l>
 80105be:	bf00      	nop
 80105c0:	20000134 	.word	0x20000134

080105c4 <_strtol_l.constprop.0>:
 80105c4:	2b01      	cmp	r3, #1
 80105c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105ca:	d001      	beq.n	80105d0 <_strtol_l.constprop.0+0xc>
 80105cc:	2b24      	cmp	r3, #36	; 0x24
 80105ce:	d906      	bls.n	80105de <_strtol_l.constprop.0+0x1a>
 80105d0:	f7fd fd74 	bl	800e0bc <__errno>
 80105d4:	2316      	movs	r3, #22
 80105d6:	6003      	str	r3, [r0, #0]
 80105d8:	2000      	movs	r0, #0
 80105da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80106c4 <_strtol_l.constprop.0+0x100>
 80105e2:	460d      	mov	r5, r1
 80105e4:	462e      	mov	r6, r5
 80105e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80105ea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80105ee:	f017 0708 	ands.w	r7, r7, #8
 80105f2:	d1f7      	bne.n	80105e4 <_strtol_l.constprop.0+0x20>
 80105f4:	2c2d      	cmp	r4, #45	; 0x2d
 80105f6:	d132      	bne.n	801065e <_strtol_l.constprop.0+0x9a>
 80105f8:	782c      	ldrb	r4, [r5, #0]
 80105fa:	2701      	movs	r7, #1
 80105fc:	1cb5      	adds	r5, r6, #2
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d05b      	beq.n	80106ba <_strtol_l.constprop.0+0xf6>
 8010602:	2b10      	cmp	r3, #16
 8010604:	d109      	bne.n	801061a <_strtol_l.constprop.0+0x56>
 8010606:	2c30      	cmp	r4, #48	; 0x30
 8010608:	d107      	bne.n	801061a <_strtol_l.constprop.0+0x56>
 801060a:	782c      	ldrb	r4, [r5, #0]
 801060c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010610:	2c58      	cmp	r4, #88	; 0x58
 8010612:	d14d      	bne.n	80106b0 <_strtol_l.constprop.0+0xec>
 8010614:	786c      	ldrb	r4, [r5, #1]
 8010616:	2310      	movs	r3, #16
 8010618:	3502      	adds	r5, #2
 801061a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801061e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010622:	f04f 0e00 	mov.w	lr, #0
 8010626:	fbb8 f9f3 	udiv	r9, r8, r3
 801062a:	4676      	mov	r6, lr
 801062c:	fb03 8a19 	mls	sl, r3, r9, r8
 8010630:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010634:	f1bc 0f09 	cmp.w	ip, #9
 8010638:	d816      	bhi.n	8010668 <_strtol_l.constprop.0+0xa4>
 801063a:	4664      	mov	r4, ip
 801063c:	42a3      	cmp	r3, r4
 801063e:	dd24      	ble.n	801068a <_strtol_l.constprop.0+0xc6>
 8010640:	f1be 3fff 	cmp.w	lr, #4294967295
 8010644:	d008      	beq.n	8010658 <_strtol_l.constprop.0+0x94>
 8010646:	45b1      	cmp	r9, r6
 8010648:	d31c      	bcc.n	8010684 <_strtol_l.constprop.0+0xc0>
 801064a:	d101      	bne.n	8010650 <_strtol_l.constprop.0+0x8c>
 801064c:	45a2      	cmp	sl, r4
 801064e:	db19      	blt.n	8010684 <_strtol_l.constprop.0+0xc0>
 8010650:	fb06 4603 	mla	r6, r6, r3, r4
 8010654:	f04f 0e01 	mov.w	lr, #1
 8010658:	f815 4b01 	ldrb.w	r4, [r5], #1
 801065c:	e7e8      	b.n	8010630 <_strtol_l.constprop.0+0x6c>
 801065e:	2c2b      	cmp	r4, #43	; 0x2b
 8010660:	bf04      	itt	eq
 8010662:	782c      	ldrbeq	r4, [r5, #0]
 8010664:	1cb5      	addeq	r5, r6, #2
 8010666:	e7ca      	b.n	80105fe <_strtol_l.constprop.0+0x3a>
 8010668:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801066c:	f1bc 0f19 	cmp.w	ip, #25
 8010670:	d801      	bhi.n	8010676 <_strtol_l.constprop.0+0xb2>
 8010672:	3c37      	subs	r4, #55	; 0x37
 8010674:	e7e2      	b.n	801063c <_strtol_l.constprop.0+0x78>
 8010676:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801067a:	f1bc 0f19 	cmp.w	ip, #25
 801067e:	d804      	bhi.n	801068a <_strtol_l.constprop.0+0xc6>
 8010680:	3c57      	subs	r4, #87	; 0x57
 8010682:	e7db      	b.n	801063c <_strtol_l.constprop.0+0x78>
 8010684:	f04f 3eff 	mov.w	lr, #4294967295
 8010688:	e7e6      	b.n	8010658 <_strtol_l.constprop.0+0x94>
 801068a:	f1be 3fff 	cmp.w	lr, #4294967295
 801068e:	d105      	bne.n	801069c <_strtol_l.constprop.0+0xd8>
 8010690:	2322      	movs	r3, #34	; 0x22
 8010692:	6003      	str	r3, [r0, #0]
 8010694:	4646      	mov	r6, r8
 8010696:	b942      	cbnz	r2, 80106aa <_strtol_l.constprop.0+0xe6>
 8010698:	4630      	mov	r0, r6
 801069a:	e79e      	b.n	80105da <_strtol_l.constprop.0+0x16>
 801069c:	b107      	cbz	r7, 80106a0 <_strtol_l.constprop.0+0xdc>
 801069e:	4276      	negs	r6, r6
 80106a0:	2a00      	cmp	r2, #0
 80106a2:	d0f9      	beq.n	8010698 <_strtol_l.constprop.0+0xd4>
 80106a4:	f1be 0f00 	cmp.w	lr, #0
 80106a8:	d000      	beq.n	80106ac <_strtol_l.constprop.0+0xe8>
 80106aa:	1e69      	subs	r1, r5, #1
 80106ac:	6011      	str	r1, [r2, #0]
 80106ae:	e7f3      	b.n	8010698 <_strtol_l.constprop.0+0xd4>
 80106b0:	2430      	movs	r4, #48	; 0x30
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d1b1      	bne.n	801061a <_strtol_l.constprop.0+0x56>
 80106b6:	2308      	movs	r3, #8
 80106b8:	e7af      	b.n	801061a <_strtol_l.constprop.0+0x56>
 80106ba:	2c30      	cmp	r4, #48	; 0x30
 80106bc:	d0a5      	beq.n	801060a <_strtol_l.constprop.0+0x46>
 80106be:	230a      	movs	r3, #10
 80106c0:	e7ab      	b.n	801061a <_strtol_l.constprop.0+0x56>
 80106c2:	bf00      	nop
 80106c4:	08013bc9 	.word	0x08013bc9

080106c8 <_strtol_r>:
 80106c8:	f7ff bf7c 	b.w	80105c4 <_strtol_l.constprop.0>

080106cc <__ssputs_r>:
 80106cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106d0:	688e      	ldr	r6, [r1, #8]
 80106d2:	461f      	mov	r7, r3
 80106d4:	42be      	cmp	r6, r7
 80106d6:	680b      	ldr	r3, [r1, #0]
 80106d8:	4682      	mov	sl, r0
 80106da:	460c      	mov	r4, r1
 80106dc:	4690      	mov	r8, r2
 80106de:	d82c      	bhi.n	801073a <__ssputs_r+0x6e>
 80106e0:	898a      	ldrh	r2, [r1, #12]
 80106e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80106e6:	d026      	beq.n	8010736 <__ssputs_r+0x6a>
 80106e8:	6965      	ldr	r5, [r4, #20]
 80106ea:	6909      	ldr	r1, [r1, #16]
 80106ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80106f0:	eba3 0901 	sub.w	r9, r3, r1
 80106f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80106f8:	1c7b      	adds	r3, r7, #1
 80106fa:	444b      	add	r3, r9
 80106fc:	106d      	asrs	r5, r5, #1
 80106fe:	429d      	cmp	r5, r3
 8010700:	bf38      	it	cc
 8010702:	461d      	movcc	r5, r3
 8010704:	0553      	lsls	r3, r2, #21
 8010706:	d527      	bpl.n	8010758 <__ssputs_r+0x8c>
 8010708:	4629      	mov	r1, r5
 801070a:	f7fe fc0f 	bl	800ef2c <_malloc_r>
 801070e:	4606      	mov	r6, r0
 8010710:	b360      	cbz	r0, 801076c <__ssputs_r+0xa0>
 8010712:	6921      	ldr	r1, [r4, #16]
 8010714:	464a      	mov	r2, r9
 8010716:	f7fd fd06 	bl	800e126 <memcpy>
 801071a:	89a3      	ldrh	r3, [r4, #12]
 801071c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010724:	81a3      	strh	r3, [r4, #12]
 8010726:	6126      	str	r6, [r4, #16]
 8010728:	6165      	str	r5, [r4, #20]
 801072a:	444e      	add	r6, r9
 801072c:	eba5 0509 	sub.w	r5, r5, r9
 8010730:	6026      	str	r6, [r4, #0]
 8010732:	60a5      	str	r5, [r4, #8]
 8010734:	463e      	mov	r6, r7
 8010736:	42be      	cmp	r6, r7
 8010738:	d900      	bls.n	801073c <__ssputs_r+0x70>
 801073a:	463e      	mov	r6, r7
 801073c:	6820      	ldr	r0, [r4, #0]
 801073e:	4632      	mov	r2, r6
 8010740:	4641      	mov	r1, r8
 8010742:	f000 fd5c 	bl	80111fe <memmove>
 8010746:	68a3      	ldr	r3, [r4, #8]
 8010748:	1b9b      	subs	r3, r3, r6
 801074a:	60a3      	str	r3, [r4, #8]
 801074c:	6823      	ldr	r3, [r4, #0]
 801074e:	4433      	add	r3, r6
 8010750:	6023      	str	r3, [r4, #0]
 8010752:	2000      	movs	r0, #0
 8010754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010758:	462a      	mov	r2, r5
 801075a:	f001 f932 	bl	80119c2 <_realloc_r>
 801075e:	4606      	mov	r6, r0
 8010760:	2800      	cmp	r0, #0
 8010762:	d1e0      	bne.n	8010726 <__ssputs_r+0x5a>
 8010764:	6921      	ldr	r1, [r4, #16]
 8010766:	4650      	mov	r0, sl
 8010768:	f7fe fb6c 	bl	800ee44 <_free_r>
 801076c:	230c      	movs	r3, #12
 801076e:	f8ca 3000 	str.w	r3, [sl]
 8010772:	89a3      	ldrh	r3, [r4, #12]
 8010774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010778:	81a3      	strh	r3, [r4, #12]
 801077a:	f04f 30ff 	mov.w	r0, #4294967295
 801077e:	e7e9      	b.n	8010754 <__ssputs_r+0x88>

08010780 <_svfiprintf_r>:
 8010780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010784:	4698      	mov	r8, r3
 8010786:	898b      	ldrh	r3, [r1, #12]
 8010788:	061b      	lsls	r3, r3, #24
 801078a:	b09d      	sub	sp, #116	; 0x74
 801078c:	4607      	mov	r7, r0
 801078e:	460d      	mov	r5, r1
 8010790:	4614      	mov	r4, r2
 8010792:	d50e      	bpl.n	80107b2 <_svfiprintf_r+0x32>
 8010794:	690b      	ldr	r3, [r1, #16]
 8010796:	b963      	cbnz	r3, 80107b2 <_svfiprintf_r+0x32>
 8010798:	2140      	movs	r1, #64	; 0x40
 801079a:	f7fe fbc7 	bl	800ef2c <_malloc_r>
 801079e:	6028      	str	r0, [r5, #0]
 80107a0:	6128      	str	r0, [r5, #16]
 80107a2:	b920      	cbnz	r0, 80107ae <_svfiprintf_r+0x2e>
 80107a4:	230c      	movs	r3, #12
 80107a6:	603b      	str	r3, [r7, #0]
 80107a8:	f04f 30ff 	mov.w	r0, #4294967295
 80107ac:	e0d0      	b.n	8010950 <_svfiprintf_r+0x1d0>
 80107ae:	2340      	movs	r3, #64	; 0x40
 80107b0:	616b      	str	r3, [r5, #20]
 80107b2:	2300      	movs	r3, #0
 80107b4:	9309      	str	r3, [sp, #36]	; 0x24
 80107b6:	2320      	movs	r3, #32
 80107b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80107bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80107c0:	2330      	movs	r3, #48	; 0x30
 80107c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010968 <_svfiprintf_r+0x1e8>
 80107c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80107ca:	f04f 0901 	mov.w	r9, #1
 80107ce:	4623      	mov	r3, r4
 80107d0:	469a      	mov	sl, r3
 80107d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107d6:	b10a      	cbz	r2, 80107dc <_svfiprintf_r+0x5c>
 80107d8:	2a25      	cmp	r2, #37	; 0x25
 80107da:	d1f9      	bne.n	80107d0 <_svfiprintf_r+0x50>
 80107dc:	ebba 0b04 	subs.w	fp, sl, r4
 80107e0:	d00b      	beq.n	80107fa <_svfiprintf_r+0x7a>
 80107e2:	465b      	mov	r3, fp
 80107e4:	4622      	mov	r2, r4
 80107e6:	4629      	mov	r1, r5
 80107e8:	4638      	mov	r0, r7
 80107ea:	f7ff ff6f 	bl	80106cc <__ssputs_r>
 80107ee:	3001      	adds	r0, #1
 80107f0:	f000 80a9 	beq.w	8010946 <_svfiprintf_r+0x1c6>
 80107f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107f6:	445a      	add	r2, fp
 80107f8:	9209      	str	r2, [sp, #36]	; 0x24
 80107fa:	f89a 3000 	ldrb.w	r3, [sl]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	f000 80a1 	beq.w	8010946 <_svfiprintf_r+0x1c6>
 8010804:	2300      	movs	r3, #0
 8010806:	f04f 32ff 	mov.w	r2, #4294967295
 801080a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801080e:	f10a 0a01 	add.w	sl, sl, #1
 8010812:	9304      	str	r3, [sp, #16]
 8010814:	9307      	str	r3, [sp, #28]
 8010816:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801081a:	931a      	str	r3, [sp, #104]	; 0x68
 801081c:	4654      	mov	r4, sl
 801081e:	2205      	movs	r2, #5
 8010820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010824:	4850      	ldr	r0, [pc, #320]	; (8010968 <_svfiprintf_r+0x1e8>)
 8010826:	f7ef fcd3 	bl	80001d0 <memchr>
 801082a:	9a04      	ldr	r2, [sp, #16]
 801082c:	b9d8      	cbnz	r0, 8010866 <_svfiprintf_r+0xe6>
 801082e:	06d0      	lsls	r0, r2, #27
 8010830:	bf44      	itt	mi
 8010832:	2320      	movmi	r3, #32
 8010834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010838:	0711      	lsls	r1, r2, #28
 801083a:	bf44      	itt	mi
 801083c:	232b      	movmi	r3, #43	; 0x2b
 801083e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010842:	f89a 3000 	ldrb.w	r3, [sl]
 8010846:	2b2a      	cmp	r3, #42	; 0x2a
 8010848:	d015      	beq.n	8010876 <_svfiprintf_r+0xf6>
 801084a:	9a07      	ldr	r2, [sp, #28]
 801084c:	4654      	mov	r4, sl
 801084e:	2000      	movs	r0, #0
 8010850:	f04f 0c0a 	mov.w	ip, #10
 8010854:	4621      	mov	r1, r4
 8010856:	f811 3b01 	ldrb.w	r3, [r1], #1
 801085a:	3b30      	subs	r3, #48	; 0x30
 801085c:	2b09      	cmp	r3, #9
 801085e:	d94d      	bls.n	80108fc <_svfiprintf_r+0x17c>
 8010860:	b1b0      	cbz	r0, 8010890 <_svfiprintf_r+0x110>
 8010862:	9207      	str	r2, [sp, #28]
 8010864:	e014      	b.n	8010890 <_svfiprintf_r+0x110>
 8010866:	eba0 0308 	sub.w	r3, r0, r8
 801086a:	fa09 f303 	lsl.w	r3, r9, r3
 801086e:	4313      	orrs	r3, r2
 8010870:	9304      	str	r3, [sp, #16]
 8010872:	46a2      	mov	sl, r4
 8010874:	e7d2      	b.n	801081c <_svfiprintf_r+0x9c>
 8010876:	9b03      	ldr	r3, [sp, #12]
 8010878:	1d19      	adds	r1, r3, #4
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	9103      	str	r1, [sp, #12]
 801087e:	2b00      	cmp	r3, #0
 8010880:	bfbb      	ittet	lt
 8010882:	425b      	neglt	r3, r3
 8010884:	f042 0202 	orrlt.w	r2, r2, #2
 8010888:	9307      	strge	r3, [sp, #28]
 801088a:	9307      	strlt	r3, [sp, #28]
 801088c:	bfb8      	it	lt
 801088e:	9204      	strlt	r2, [sp, #16]
 8010890:	7823      	ldrb	r3, [r4, #0]
 8010892:	2b2e      	cmp	r3, #46	; 0x2e
 8010894:	d10c      	bne.n	80108b0 <_svfiprintf_r+0x130>
 8010896:	7863      	ldrb	r3, [r4, #1]
 8010898:	2b2a      	cmp	r3, #42	; 0x2a
 801089a:	d134      	bne.n	8010906 <_svfiprintf_r+0x186>
 801089c:	9b03      	ldr	r3, [sp, #12]
 801089e:	1d1a      	adds	r2, r3, #4
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	9203      	str	r2, [sp, #12]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	bfb8      	it	lt
 80108a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80108ac:	3402      	adds	r4, #2
 80108ae:	9305      	str	r3, [sp, #20]
 80108b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010978 <_svfiprintf_r+0x1f8>
 80108b4:	7821      	ldrb	r1, [r4, #0]
 80108b6:	2203      	movs	r2, #3
 80108b8:	4650      	mov	r0, sl
 80108ba:	f7ef fc89 	bl	80001d0 <memchr>
 80108be:	b138      	cbz	r0, 80108d0 <_svfiprintf_r+0x150>
 80108c0:	9b04      	ldr	r3, [sp, #16]
 80108c2:	eba0 000a 	sub.w	r0, r0, sl
 80108c6:	2240      	movs	r2, #64	; 0x40
 80108c8:	4082      	lsls	r2, r0
 80108ca:	4313      	orrs	r3, r2
 80108cc:	3401      	adds	r4, #1
 80108ce:	9304      	str	r3, [sp, #16]
 80108d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108d4:	4825      	ldr	r0, [pc, #148]	; (801096c <_svfiprintf_r+0x1ec>)
 80108d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80108da:	2206      	movs	r2, #6
 80108dc:	f7ef fc78 	bl	80001d0 <memchr>
 80108e0:	2800      	cmp	r0, #0
 80108e2:	d038      	beq.n	8010956 <_svfiprintf_r+0x1d6>
 80108e4:	4b22      	ldr	r3, [pc, #136]	; (8010970 <_svfiprintf_r+0x1f0>)
 80108e6:	bb1b      	cbnz	r3, 8010930 <_svfiprintf_r+0x1b0>
 80108e8:	9b03      	ldr	r3, [sp, #12]
 80108ea:	3307      	adds	r3, #7
 80108ec:	f023 0307 	bic.w	r3, r3, #7
 80108f0:	3308      	adds	r3, #8
 80108f2:	9303      	str	r3, [sp, #12]
 80108f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108f6:	4433      	add	r3, r6
 80108f8:	9309      	str	r3, [sp, #36]	; 0x24
 80108fa:	e768      	b.n	80107ce <_svfiprintf_r+0x4e>
 80108fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8010900:	460c      	mov	r4, r1
 8010902:	2001      	movs	r0, #1
 8010904:	e7a6      	b.n	8010854 <_svfiprintf_r+0xd4>
 8010906:	2300      	movs	r3, #0
 8010908:	3401      	adds	r4, #1
 801090a:	9305      	str	r3, [sp, #20]
 801090c:	4619      	mov	r1, r3
 801090e:	f04f 0c0a 	mov.w	ip, #10
 8010912:	4620      	mov	r0, r4
 8010914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010918:	3a30      	subs	r2, #48	; 0x30
 801091a:	2a09      	cmp	r2, #9
 801091c:	d903      	bls.n	8010926 <_svfiprintf_r+0x1a6>
 801091e:	2b00      	cmp	r3, #0
 8010920:	d0c6      	beq.n	80108b0 <_svfiprintf_r+0x130>
 8010922:	9105      	str	r1, [sp, #20]
 8010924:	e7c4      	b.n	80108b0 <_svfiprintf_r+0x130>
 8010926:	fb0c 2101 	mla	r1, ip, r1, r2
 801092a:	4604      	mov	r4, r0
 801092c:	2301      	movs	r3, #1
 801092e:	e7f0      	b.n	8010912 <_svfiprintf_r+0x192>
 8010930:	ab03      	add	r3, sp, #12
 8010932:	9300      	str	r3, [sp, #0]
 8010934:	462a      	mov	r2, r5
 8010936:	4b0f      	ldr	r3, [pc, #60]	; (8010974 <_svfiprintf_r+0x1f4>)
 8010938:	a904      	add	r1, sp, #16
 801093a:	4638      	mov	r0, r7
 801093c:	f7fc fbd6 	bl	800d0ec <_printf_float>
 8010940:	1c42      	adds	r2, r0, #1
 8010942:	4606      	mov	r6, r0
 8010944:	d1d6      	bne.n	80108f4 <_svfiprintf_r+0x174>
 8010946:	89ab      	ldrh	r3, [r5, #12]
 8010948:	065b      	lsls	r3, r3, #25
 801094a:	f53f af2d 	bmi.w	80107a8 <_svfiprintf_r+0x28>
 801094e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010950:	b01d      	add	sp, #116	; 0x74
 8010952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010956:	ab03      	add	r3, sp, #12
 8010958:	9300      	str	r3, [sp, #0]
 801095a:	462a      	mov	r2, r5
 801095c:	4b05      	ldr	r3, [pc, #20]	; (8010974 <_svfiprintf_r+0x1f4>)
 801095e:	a904      	add	r1, sp, #16
 8010960:	4638      	mov	r0, r7
 8010962:	f7fc fe67 	bl	800d634 <_printf_i>
 8010966:	e7eb      	b.n	8010940 <_svfiprintf_r+0x1c0>
 8010968:	08013cc9 	.word	0x08013cc9
 801096c:	08013cd3 	.word	0x08013cd3
 8010970:	0800d0ed 	.word	0x0800d0ed
 8010974:	080106cd 	.word	0x080106cd
 8010978:	08013ccf 	.word	0x08013ccf

0801097c <_sungetc_r>:
 801097c:	b538      	push	{r3, r4, r5, lr}
 801097e:	1c4b      	adds	r3, r1, #1
 8010980:	4614      	mov	r4, r2
 8010982:	d103      	bne.n	801098c <_sungetc_r+0x10>
 8010984:	f04f 35ff 	mov.w	r5, #4294967295
 8010988:	4628      	mov	r0, r5
 801098a:	bd38      	pop	{r3, r4, r5, pc}
 801098c:	8993      	ldrh	r3, [r2, #12]
 801098e:	f023 0320 	bic.w	r3, r3, #32
 8010992:	8193      	strh	r3, [r2, #12]
 8010994:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010996:	6852      	ldr	r2, [r2, #4]
 8010998:	b2cd      	uxtb	r5, r1
 801099a:	b18b      	cbz	r3, 80109c0 <_sungetc_r+0x44>
 801099c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801099e:	4293      	cmp	r3, r2
 80109a0:	dd08      	ble.n	80109b4 <_sungetc_r+0x38>
 80109a2:	6823      	ldr	r3, [r4, #0]
 80109a4:	1e5a      	subs	r2, r3, #1
 80109a6:	6022      	str	r2, [r4, #0]
 80109a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80109ac:	6863      	ldr	r3, [r4, #4]
 80109ae:	3301      	adds	r3, #1
 80109b0:	6063      	str	r3, [r4, #4]
 80109b2:	e7e9      	b.n	8010988 <_sungetc_r+0xc>
 80109b4:	4621      	mov	r1, r4
 80109b6:	f000 fbe8 	bl	801118a <__submore>
 80109ba:	2800      	cmp	r0, #0
 80109bc:	d0f1      	beq.n	80109a2 <_sungetc_r+0x26>
 80109be:	e7e1      	b.n	8010984 <_sungetc_r+0x8>
 80109c0:	6921      	ldr	r1, [r4, #16]
 80109c2:	6823      	ldr	r3, [r4, #0]
 80109c4:	b151      	cbz	r1, 80109dc <_sungetc_r+0x60>
 80109c6:	4299      	cmp	r1, r3
 80109c8:	d208      	bcs.n	80109dc <_sungetc_r+0x60>
 80109ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80109ce:	42a9      	cmp	r1, r5
 80109d0:	d104      	bne.n	80109dc <_sungetc_r+0x60>
 80109d2:	3b01      	subs	r3, #1
 80109d4:	3201      	adds	r2, #1
 80109d6:	6023      	str	r3, [r4, #0]
 80109d8:	6062      	str	r2, [r4, #4]
 80109da:	e7d5      	b.n	8010988 <_sungetc_r+0xc>
 80109dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80109e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80109e4:	6363      	str	r3, [r4, #52]	; 0x34
 80109e6:	2303      	movs	r3, #3
 80109e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80109ea:	4623      	mov	r3, r4
 80109ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 80109f0:	6023      	str	r3, [r4, #0]
 80109f2:	2301      	movs	r3, #1
 80109f4:	e7dc      	b.n	80109b0 <_sungetc_r+0x34>

080109f6 <__ssrefill_r>:
 80109f6:	b510      	push	{r4, lr}
 80109f8:	460c      	mov	r4, r1
 80109fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80109fc:	b169      	cbz	r1, 8010a1a <__ssrefill_r+0x24>
 80109fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a02:	4299      	cmp	r1, r3
 8010a04:	d001      	beq.n	8010a0a <__ssrefill_r+0x14>
 8010a06:	f7fe fa1d 	bl	800ee44 <_free_r>
 8010a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a0c:	6063      	str	r3, [r4, #4]
 8010a0e:	2000      	movs	r0, #0
 8010a10:	6360      	str	r0, [r4, #52]	; 0x34
 8010a12:	b113      	cbz	r3, 8010a1a <__ssrefill_r+0x24>
 8010a14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010a16:	6023      	str	r3, [r4, #0]
 8010a18:	bd10      	pop	{r4, pc}
 8010a1a:	6923      	ldr	r3, [r4, #16]
 8010a1c:	6023      	str	r3, [r4, #0]
 8010a1e:	2300      	movs	r3, #0
 8010a20:	6063      	str	r3, [r4, #4]
 8010a22:	89a3      	ldrh	r3, [r4, #12]
 8010a24:	f043 0320 	orr.w	r3, r3, #32
 8010a28:	81a3      	strh	r3, [r4, #12]
 8010a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8010a2e:	e7f3      	b.n	8010a18 <__ssrefill_r+0x22>

08010a30 <__ssvfiscanf_r>:
 8010a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a34:	460c      	mov	r4, r1
 8010a36:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010a3a:	2100      	movs	r1, #0
 8010a3c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010a40:	49a6      	ldr	r1, [pc, #664]	; (8010cdc <__ssvfiscanf_r+0x2ac>)
 8010a42:	91a0      	str	r1, [sp, #640]	; 0x280
 8010a44:	f10d 0804 	add.w	r8, sp, #4
 8010a48:	49a5      	ldr	r1, [pc, #660]	; (8010ce0 <__ssvfiscanf_r+0x2b0>)
 8010a4a:	4fa6      	ldr	r7, [pc, #664]	; (8010ce4 <__ssvfiscanf_r+0x2b4>)
 8010a4c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010ce8 <__ssvfiscanf_r+0x2b8>
 8010a50:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010a54:	4606      	mov	r6, r0
 8010a56:	91a1      	str	r1, [sp, #644]	; 0x284
 8010a58:	9300      	str	r3, [sp, #0]
 8010a5a:	7813      	ldrb	r3, [r2, #0]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f000 815a 	beq.w	8010d16 <__ssvfiscanf_r+0x2e6>
 8010a62:	5cf9      	ldrb	r1, [r7, r3]
 8010a64:	f011 0108 	ands.w	r1, r1, #8
 8010a68:	f102 0501 	add.w	r5, r2, #1
 8010a6c:	d019      	beq.n	8010aa2 <__ssvfiscanf_r+0x72>
 8010a6e:	6863      	ldr	r3, [r4, #4]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	dd0f      	ble.n	8010a94 <__ssvfiscanf_r+0x64>
 8010a74:	6823      	ldr	r3, [r4, #0]
 8010a76:	781a      	ldrb	r2, [r3, #0]
 8010a78:	5cba      	ldrb	r2, [r7, r2]
 8010a7a:	0712      	lsls	r2, r2, #28
 8010a7c:	d401      	bmi.n	8010a82 <__ssvfiscanf_r+0x52>
 8010a7e:	462a      	mov	r2, r5
 8010a80:	e7eb      	b.n	8010a5a <__ssvfiscanf_r+0x2a>
 8010a82:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010a84:	3201      	adds	r2, #1
 8010a86:	9245      	str	r2, [sp, #276]	; 0x114
 8010a88:	6862      	ldr	r2, [r4, #4]
 8010a8a:	3301      	adds	r3, #1
 8010a8c:	3a01      	subs	r2, #1
 8010a8e:	6062      	str	r2, [r4, #4]
 8010a90:	6023      	str	r3, [r4, #0]
 8010a92:	e7ec      	b.n	8010a6e <__ssvfiscanf_r+0x3e>
 8010a94:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010a96:	4621      	mov	r1, r4
 8010a98:	4630      	mov	r0, r6
 8010a9a:	4798      	blx	r3
 8010a9c:	2800      	cmp	r0, #0
 8010a9e:	d0e9      	beq.n	8010a74 <__ssvfiscanf_r+0x44>
 8010aa0:	e7ed      	b.n	8010a7e <__ssvfiscanf_r+0x4e>
 8010aa2:	2b25      	cmp	r3, #37	; 0x25
 8010aa4:	d012      	beq.n	8010acc <__ssvfiscanf_r+0x9c>
 8010aa6:	469a      	mov	sl, r3
 8010aa8:	6863      	ldr	r3, [r4, #4]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	f340 8091 	ble.w	8010bd2 <__ssvfiscanf_r+0x1a2>
 8010ab0:	6822      	ldr	r2, [r4, #0]
 8010ab2:	7813      	ldrb	r3, [r2, #0]
 8010ab4:	4553      	cmp	r3, sl
 8010ab6:	f040 812e 	bne.w	8010d16 <__ssvfiscanf_r+0x2e6>
 8010aba:	6863      	ldr	r3, [r4, #4]
 8010abc:	3b01      	subs	r3, #1
 8010abe:	6063      	str	r3, [r4, #4]
 8010ac0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010ac2:	3201      	adds	r2, #1
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	6022      	str	r2, [r4, #0]
 8010ac8:	9345      	str	r3, [sp, #276]	; 0x114
 8010aca:	e7d8      	b.n	8010a7e <__ssvfiscanf_r+0x4e>
 8010acc:	9141      	str	r1, [sp, #260]	; 0x104
 8010ace:	9143      	str	r1, [sp, #268]	; 0x10c
 8010ad0:	7853      	ldrb	r3, [r2, #1]
 8010ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8010ad4:	bf02      	ittt	eq
 8010ad6:	2310      	moveq	r3, #16
 8010ad8:	1c95      	addeq	r5, r2, #2
 8010ada:	9341      	streq	r3, [sp, #260]	; 0x104
 8010adc:	220a      	movs	r2, #10
 8010ade:	46aa      	mov	sl, r5
 8010ae0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010ae4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010ae8:	2b09      	cmp	r3, #9
 8010aea:	d91c      	bls.n	8010b26 <__ssvfiscanf_r+0xf6>
 8010aec:	487e      	ldr	r0, [pc, #504]	; (8010ce8 <__ssvfiscanf_r+0x2b8>)
 8010aee:	2203      	movs	r2, #3
 8010af0:	f7ef fb6e 	bl	80001d0 <memchr>
 8010af4:	b138      	cbz	r0, 8010b06 <__ssvfiscanf_r+0xd6>
 8010af6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010af8:	eba0 0009 	sub.w	r0, r0, r9
 8010afc:	2301      	movs	r3, #1
 8010afe:	4083      	lsls	r3, r0
 8010b00:	4313      	orrs	r3, r2
 8010b02:	9341      	str	r3, [sp, #260]	; 0x104
 8010b04:	4655      	mov	r5, sl
 8010b06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010b0a:	2b78      	cmp	r3, #120	; 0x78
 8010b0c:	d806      	bhi.n	8010b1c <__ssvfiscanf_r+0xec>
 8010b0e:	2b57      	cmp	r3, #87	; 0x57
 8010b10:	d810      	bhi.n	8010b34 <__ssvfiscanf_r+0x104>
 8010b12:	2b25      	cmp	r3, #37	; 0x25
 8010b14:	d0c7      	beq.n	8010aa6 <__ssvfiscanf_r+0x76>
 8010b16:	d857      	bhi.n	8010bc8 <__ssvfiscanf_r+0x198>
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d065      	beq.n	8010be8 <__ssvfiscanf_r+0x1b8>
 8010b1c:	2303      	movs	r3, #3
 8010b1e:	9347      	str	r3, [sp, #284]	; 0x11c
 8010b20:	230a      	movs	r3, #10
 8010b22:	9342      	str	r3, [sp, #264]	; 0x108
 8010b24:	e076      	b.n	8010c14 <__ssvfiscanf_r+0x1e4>
 8010b26:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010b28:	fb02 1103 	mla	r1, r2, r3, r1
 8010b2c:	3930      	subs	r1, #48	; 0x30
 8010b2e:	9143      	str	r1, [sp, #268]	; 0x10c
 8010b30:	4655      	mov	r5, sl
 8010b32:	e7d4      	b.n	8010ade <__ssvfiscanf_r+0xae>
 8010b34:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010b38:	2a20      	cmp	r2, #32
 8010b3a:	d8ef      	bhi.n	8010b1c <__ssvfiscanf_r+0xec>
 8010b3c:	a101      	add	r1, pc, #4	; (adr r1, 8010b44 <__ssvfiscanf_r+0x114>)
 8010b3e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010b42:	bf00      	nop
 8010b44:	08010bf7 	.word	0x08010bf7
 8010b48:	08010b1d 	.word	0x08010b1d
 8010b4c:	08010b1d 	.word	0x08010b1d
 8010b50:	08010c55 	.word	0x08010c55
 8010b54:	08010b1d 	.word	0x08010b1d
 8010b58:	08010b1d 	.word	0x08010b1d
 8010b5c:	08010b1d 	.word	0x08010b1d
 8010b60:	08010b1d 	.word	0x08010b1d
 8010b64:	08010b1d 	.word	0x08010b1d
 8010b68:	08010b1d 	.word	0x08010b1d
 8010b6c:	08010b1d 	.word	0x08010b1d
 8010b70:	08010c6b 	.word	0x08010c6b
 8010b74:	08010c51 	.word	0x08010c51
 8010b78:	08010bcf 	.word	0x08010bcf
 8010b7c:	08010bcf 	.word	0x08010bcf
 8010b80:	08010bcf 	.word	0x08010bcf
 8010b84:	08010b1d 	.word	0x08010b1d
 8010b88:	08010c0d 	.word	0x08010c0d
 8010b8c:	08010b1d 	.word	0x08010b1d
 8010b90:	08010b1d 	.word	0x08010b1d
 8010b94:	08010b1d 	.word	0x08010b1d
 8010b98:	08010b1d 	.word	0x08010b1d
 8010b9c:	08010c7b 	.word	0x08010c7b
 8010ba0:	08010c49 	.word	0x08010c49
 8010ba4:	08010bef 	.word	0x08010bef
 8010ba8:	08010b1d 	.word	0x08010b1d
 8010bac:	08010b1d 	.word	0x08010b1d
 8010bb0:	08010c77 	.word	0x08010c77
 8010bb4:	08010b1d 	.word	0x08010b1d
 8010bb8:	08010c51 	.word	0x08010c51
 8010bbc:	08010b1d 	.word	0x08010b1d
 8010bc0:	08010b1d 	.word	0x08010b1d
 8010bc4:	08010bf7 	.word	0x08010bf7
 8010bc8:	3b45      	subs	r3, #69	; 0x45
 8010bca:	2b02      	cmp	r3, #2
 8010bcc:	d8a6      	bhi.n	8010b1c <__ssvfiscanf_r+0xec>
 8010bce:	2305      	movs	r3, #5
 8010bd0:	e01f      	b.n	8010c12 <__ssvfiscanf_r+0x1e2>
 8010bd2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010bd4:	4621      	mov	r1, r4
 8010bd6:	4630      	mov	r0, r6
 8010bd8:	4798      	blx	r3
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	f43f af68 	beq.w	8010ab0 <__ssvfiscanf_r+0x80>
 8010be0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010be2:	2800      	cmp	r0, #0
 8010be4:	f040 808d 	bne.w	8010d02 <__ssvfiscanf_r+0x2d2>
 8010be8:	f04f 30ff 	mov.w	r0, #4294967295
 8010bec:	e08f      	b.n	8010d0e <__ssvfiscanf_r+0x2de>
 8010bee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010bf0:	f042 0220 	orr.w	r2, r2, #32
 8010bf4:	9241      	str	r2, [sp, #260]	; 0x104
 8010bf6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010bfc:	9241      	str	r2, [sp, #260]	; 0x104
 8010bfe:	2210      	movs	r2, #16
 8010c00:	2b6f      	cmp	r3, #111	; 0x6f
 8010c02:	9242      	str	r2, [sp, #264]	; 0x108
 8010c04:	bf34      	ite	cc
 8010c06:	2303      	movcc	r3, #3
 8010c08:	2304      	movcs	r3, #4
 8010c0a:	e002      	b.n	8010c12 <__ssvfiscanf_r+0x1e2>
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	9342      	str	r3, [sp, #264]	; 0x108
 8010c10:	2303      	movs	r3, #3
 8010c12:	9347      	str	r3, [sp, #284]	; 0x11c
 8010c14:	6863      	ldr	r3, [r4, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	dd3d      	ble.n	8010c96 <__ssvfiscanf_r+0x266>
 8010c1a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010c1c:	0659      	lsls	r1, r3, #25
 8010c1e:	d404      	bmi.n	8010c2a <__ssvfiscanf_r+0x1fa>
 8010c20:	6823      	ldr	r3, [r4, #0]
 8010c22:	781a      	ldrb	r2, [r3, #0]
 8010c24:	5cba      	ldrb	r2, [r7, r2]
 8010c26:	0712      	lsls	r2, r2, #28
 8010c28:	d43c      	bmi.n	8010ca4 <__ssvfiscanf_r+0x274>
 8010c2a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010c2c:	2b02      	cmp	r3, #2
 8010c2e:	dc4b      	bgt.n	8010cc8 <__ssvfiscanf_r+0x298>
 8010c30:	466b      	mov	r3, sp
 8010c32:	4622      	mov	r2, r4
 8010c34:	a941      	add	r1, sp, #260	; 0x104
 8010c36:	4630      	mov	r0, r6
 8010c38:	f000 f872 	bl	8010d20 <_scanf_chars>
 8010c3c:	2801      	cmp	r0, #1
 8010c3e:	d06a      	beq.n	8010d16 <__ssvfiscanf_r+0x2e6>
 8010c40:	2802      	cmp	r0, #2
 8010c42:	f47f af1c 	bne.w	8010a7e <__ssvfiscanf_r+0x4e>
 8010c46:	e7cb      	b.n	8010be0 <__ssvfiscanf_r+0x1b0>
 8010c48:	2308      	movs	r3, #8
 8010c4a:	9342      	str	r3, [sp, #264]	; 0x108
 8010c4c:	2304      	movs	r3, #4
 8010c4e:	e7e0      	b.n	8010c12 <__ssvfiscanf_r+0x1e2>
 8010c50:	220a      	movs	r2, #10
 8010c52:	e7d5      	b.n	8010c00 <__ssvfiscanf_r+0x1d0>
 8010c54:	4629      	mov	r1, r5
 8010c56:	4640      	mov	r0, r8
 8010c58:	f000 fa5e 	bl	8011118 <__sccl>
 8010c5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c62:	9341      	str	r3, [sp, #260]	; 0x104
 8010c64:	4605      	mov	r5, r0
 8010c66:	2301      	movs	r3, #1
 8010c68:	e7d3      	b.n	8010c12 <__ssvfiscanf_r+0x1e2>
 8010c6a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c70:	9341      	str	r3, [sp, #260]	; 0x104
 8010c72:	2300      	movs	r3, #0
 8010c74:	e7cd      	b.n	8010c12 <__ssvfiscanf_r+0x1e2>
 8010c76:	2302      	movs	r3, #2
 8010c78:	e7cb      	b.n	8010c12 <__ssvfiscanf_r+0x1e2>
 8010c7a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010c7c:	06c3      	lsls	r3, r0, #27
 8010c7e:	f53f aefe 	bmi.w	8010a7e <__ssvfiscanf_r+0x4e>
 8010c82:	9b00      	ldr	r3, [sp, #0]
 8010c84:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010c86:	1d19      	adds	r1, r3, #4
 8010c88:	9100      	str	r1, [sp, #0]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	07c0      	lsls	r0, r0, #31
 8010c8e:	bf4c      	ite	mi
 8010c90:	801a      	strhmi	r2, [r3, #0]
 8010c92:	601a      	strpl	r2, [r3, #0]
 8010c94:	e6f3      	b.n	8010a7e <__ssvfiscanf_r+0x4e>
 8010c96:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010c98:	4621      	mov	r1, r4
 8010c9a:	4630      	mov	r0, r6
 8010c9c:	4798      	blx	r3
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	d0bb      	beq.n	8010c1a <__ssvfiscanf_r+0x1ea>
 8010ca2:	e79d      	b.n	8010be0 <__ssvfiscanf_r+0x1b0>
 8010ca4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010ca6:	3201      	adds	r2, #1
 8010ca8:	9245      	str	r2, [sp, #276]	; 0x114
 8010caa:	6862      	ldr	r2, [r4, #4]
 8010cac:	3a01      	subs	r2, #1
 8010cae:	2a00      	cmp	r2, #0
 8010cb0:	6062      	str	r2, [r4, #4]
 8010cb2:	dd02      	ble.n	8010cba <__ssvfiscanf_r+0x28a>
 8010cb4:	3301      	adds	r3, #1
 8010cb6:	6023      	str	r3, [r4, #0]
 8010cb8:	e7b2      	b.n	8010c20 <__ssvfiscanf_r+0x1f0>
 8010cba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010cbc:	4621      	mov	r1, r4
 8010cbe:	4630      	mov	r0, r6
 8010cc0:	4798      	blx	r3
 8010cc2:	2800      	cmp	r0, #0
 8010cc4:	d0ac      	beq.n	8010c20 <__ssvfiscanf_r+0x1f0>
 8010cc6:	e78b      	b.n	8010be0 <__ssvfiscanf_r+0x1b0>
 8010cc8:	2b04      	cmp	r3, #4
 8010cca:	dc0f      	bgt.n	8010cec <__ssvfiscanf_r+0x2bc>
 8010ccc:	466b      	mov	r3, sp
 8010cce:	4622      	mov	r2, r4
 8010cd0:	a941      	add	r1, sp, #260	; 0x104
 8010cd2:	4630      	mov	r0, r6
 8010cd4:	f000 f87e 	bl	8010dd4 <_scanf_i>
 8010cd8:	e7b0      	b.n	8010c3c <__ssvfiscanf_r+0x20c>
 8010cda:	bf00      	nop
 8010cdc:	0801097d 	.word	0x0801097d
 8010ce0:	080109f7 	.word	0x080109f7
 8010ce4:	08013bc9 	.word	0x08013bc9
 8010ce8:	08013ccf 	.word	0x08013ccf
 8010cec:	4b0b      	ldr	r3, [pc, #44]	; (8010d1c <__ssvfiscanf_r+0x2ec>)
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	f43f aec5 	beq.w	8010a7e <__ssvfiscanf_r+0x4e>
 8010cf4:	466b      	mov	r3, sp
 8010cf6:	4622      	mov	r2, r4
 8010cf8:	a941      	add	r1, sp, #260	; 0x104
 8010cfa:	4630      	mov	r0, r6
 8010cfc:	f7fc fdbc 	bl	800d878 <_scanf_float>
 8010d00:	e79c      	b.n	8010c3c <__ssvfiscanf_r+0x20c>
 8010d02:	89a3      	ldrh	r3, [r4, #12]
 8010d04:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010d08:	bf18      	it	ne
 8010d0a:	f04f 30ff 	movne.w	r0, #4294967295
 8010d0e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d16:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010d18:	e7f9      	b.n	8010d0e <__ssvfiscanf_r+0x2de>
 8010d1a:	bf00      	nop
 8010d1c:	0800d879 	.word	0x0800d879

08010d20 <_scanf_chars>:
 8010d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d24:	4615      	mov	r5, r2
 8010d26:	688a      	ldr	r2, [r1, #8]
 8010d28:	4680      	mov	r8, r0
 8010d2a:	460c      	mov	r4, r1
 8010d2c:	b932      	cbnz	r2, 8010d3c <_scanf_chars+0x1c>
 8010d2e:	698a      	ldr	r2, [r1, #24]
 8010d30:	2a00      	cmp	r2, #0
 8010d32:	bf0c      	ite	eq
 8010d34:	2201      	moveq	r2, #1
 8010d36:	f04f 32ff 	movne.w	r2, #4294967295
 8010d3a:	608a      	str	r2, [r1, #8]
 8010d3c:	6822      	ldr	r2, [r4, #0]
 8010d3e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010dd0 <_scanf_chars+0xb0>
 8010d42:	06d1      	lsls	r1, r2, #27
 8010d44:	bf5f      	itttt	pl
 8010d46:	681a      	ldrpl	r2, [r3, #0]
 8010d48:	1d11      	addpl	r1, r2, #4
 8010d4a:	6019      	strpl	r1, [r3, #0]
 8010d4c:	6816      	ldrpl	r6, [r2, #0]
 8010d4e:	2700      	movs	r7, #0
 8010d50:	69a0      	ldr	r0, [r4, #24]
 8010d52:	b188      	cbz	r0, 8010d78 <_scanf_chars+0x58>
 8010d54:	2801      	cmp	r0, #1
 8010d56:	d107      	bne.n	8010d68 <_scanf_chars+0x48>
 8010d58:	682a      	ldr	r2, [r5, #0]
 8010d5a:	7811      	ldrb	r1, [r2, #0]
 8010d5c:	6962      	ldr	r2, [r4, #20]
 8010d5e:	5c52      	ldrb	r2, [r2, r1]
 8010d60:	b952      	cbnz	r2, 8010d78 <_scanf_chars+0x58>
 8010d62:	2f00      	cmp	r7, #0
 8010d64:	d031      	beq.n	8010dca <_scanf_chars+0xaa>
 8010d66:	e022      	b.n	8010dae <_scanf_chars+0x8e>
 8010d68:	2802      	cmp	r0, #2
 8010d6a:	d120      	bne.n	8010dae <_scanf_chars+0x8e>
 8010d6c:	682b      	ldr	r3, [r5, #0]
 8010d6e:	781b      	ldrb	r3, [r3, #0]
 8010d70:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010d74:	071b      	lsls	r3, r3, #28
 8010d76:	d41a      	bmi.n	8010dae <_scanf_chars+0x8e>
 8010d78:	6823      	ldr	r3, [r4, #0]
 8010d7a:	06da      	lsls	r2, r3, #27
 8010d7c:	bf5e      	ittt	pl
 8010d7e:	682b      	ldrpl	r3, [r5, #0]
 8010d80:	781b      	ldrbpl	r3, [r3, #0]
 8010d82:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010d86:	682a      	ldr	r2, [r5, #0]
 8010d88:	686b      	ldr	r3, [r5, #4]
 8010d8a:	3201      	adds	r2, #1
 8010d8c:	602a      	str	r2, [r5, #0]
 8010d8e:	68a2      	ldr	r2, [r4, #8]
 8010d90:	3b01      	subs	r3, #1
 8010d92:	3a01      	subs	r2, #1
 8010d94:	606b      	str	r3, [r5, #4]
 8010d96:	3701      	adds	r7, #1
 8010d98:	60a2      	str	r2, [r4, #8]
 8010d9a:	b142      	cbz	r2, 8010dae <_scanf_chars+0x8e>
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	dcd7      	bgt.n	8010d50 <_scanf_chars+0x30>
 8010da0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010da4:	4629      	mov	r1, r5
 8010da6:	4640      	mov	r0, r8
 8010da8:	4798      	blx	r3
 8010daa:	2800      	cmp	r0, #0
 8010dac:	d0d0      	beq.n	8010d50 <_scanf_chars+0x30>
 8010dae:	6823      	ldr	r3, [r4, #0]
 8010db0:	f013 0310 	ands.w	r3, r3, #16
 8010db4:	d105      	bne.n	8010dc2 <_scanf_chars+0xa2>
 8010db6:	68e2      	ldr	r2, [r4, #12]
 8010db8:	3201      	adds	r2, #1
 8010dba:	60e2      	str	r2, [r4, #12]
 8010dbc:	69a2      	ldr	r2, [r4, #24]
 8010dbe:	b102      	cbz	r2, 8010dc2 <_scanf_chars+0xa2>
 8010dc0:	7033      	strb	r3, [r6, #0]
 8010dc2:	6923      	ldr	r3, [r4, #16]
 8010dc4:	443b      	add	r3, r7
 8010dc6:	6123      	str	r3, [r4, #16]
 8010dc8:	2000      	movs	r0, #0
 8010dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010dce:	bf00      	nop
 8010dd0:	08013bc9 	.word	0x08013bc9

08010dd4 <_scanf_i>:
 8010dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd8:	4698      	mov	r8, r3
 8010dda:	4b74      	ldr	r3, [pc, #464]	; (8010fac <_scanf_i+0x1d8>)
 8010ddc:	460c      	mov	r4, r1
 8010dde:	4682      	mov	sl, r0
 8010de0:	4616      	mov	r6, r2
 8010de2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010de6:	b087      	sub	sp, #28
 8010de8:	ab03      	add	r3, sp, #12
 8010dea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010dee:	4b70      	ldr	r3, [pc, #448]	; (8010fb0 <_scanf_i+0x1dc>)
 8010df0:	69a1      	ldr	r1, [r4, #24]
 8010df2:	4a70      	ldr	r2, [pc, #448]	; (8010fb4 <_scanf_i+0x1e0>)
 8010df4:	2903      	cmp	r1, #3
 8010df6:	bf18      	it	ne
 8010df8:	461a      	movne	r2, r3
 8010dfa:	68a3      	ldr	r3, [r4, #8]
 8010dfc:	9201      	str	r2, [sp, #4]
 8010dfe:	1e5a      	subs	r2, r3, #1
 8010e00:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010e04:	bf88      	it	hi
 8010e06:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010e0a:	4627      	mov	r7, r4
 8010e0c:	bf82      	ittt	hi
 8010e0e:	eb03 0905 	addhi.w	r9, r3, r5
 8010e12:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010e16:	60a3      	strhi	r3, [r4, #8]
 8010e18:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010e1c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010e20:	bf98      	it	ls
 8010e22:	f04f 0900 	movls.w	r9, #0
 8010e26:	6023      	str	r3, [r4, #0]
 8010e28:	463d      	mov	r5, r7
 8010e2a:	f04f 0b00 	mov.w	fp, #0
 8010e2e:	6831      	ldr	r1, [r6, #0]
 8010e30:	ab03      	add	r3, sp, #12
 8010e32:	7809      	ldrb	r1, [r1, #0]
 8010e34:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010e38:	2202      	movs	r2, #2
 8010e3a:	f7ef f9c9 	bl	80001d0 <memchr>
 8010e3e:	b328      	cbz	r0, 8010e8c <_scanf_i+0xb8>
 8010e40:	f1bb 0f01 	cmp.w	fp, #1
 8010e44:	d159      	bne.n	8010efa <_scanf_i+0x126>
 8010e46:	6862      	ldr	r2, [r4, #4]
 8010e48:	b92a      	cbnz	r2, 8010e56 <_scanf_i+0x82>
 8010e4a:	6822      	ldr	r2, [r4, #0]
 8010e4c:	2308      	movs	r3, #8
 8010e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010e52:	6063      	str	r3, [r4, #4]
 8010e54:	6022      	str	r2, [r4, #0]
 8010e56:	6822      	ldr	r2, [r4, #0]
 8010e58:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010e5c:	6022      	str	r2, [r4, #0]
 8010e5e:	68a2      	ldr	r2, [r4, #8]
 8010e60:	1e51      	subs	r1, r2, #1
 8010e62:	60a1      	str	r1, [r4, #8]
 8010e64:	b192      	cbz	r2, 8010e8c <_scanf_i+0xb8>
 8010e66:	6832      	ldr	r2, [r6, #0]
 8010e68:	1c51      	adds	r1, r2, #1
 8010e6a:	6031      	str	r1, [r6, #0]
 8010e6c:	7812      	ldrb	r2, [r2, #0]
 8010e6e:	f805 2b01 	strb.w	r2, [r5], #1
 8010e72:	6872      	ldr	r2, [r6, #4]
 8010e74:	3a01      	subs	r2, #1
 8010e76:	2a00      	cmp	r2, #0
 8010e78:	6072      	str	r2, [r6, #4]
 8010e7a:	dc07      	bgt.n	8010e8c <_scanf_i+0xb8>
 8010e7c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010e80:	4631      	mov	r1, r6
 8010e82:	4650      	mov	r0, sl
 8010e84:	4790      	blx	r2
 8010e86:	2800      	cmp	r0, #0
 8010e88:	f040 8085 	bne.w	8010f96 <_scanf_i+0x1c2>
 8010e8c:	f10b 0b01 	add.w	fp, fp, #1
 8010e90:	f1bb 0f03 	cmp.w	fp, #3
 8010e94:	d1cb      	bne.n	8010e2e <_scanf_i+0x5a>
 8010e96:	6863      	ldr	r3, [r4, #4]
 8010e98:	b90b      	cbnz	r3, 8010e9e <_scanf_i+0xca>
 8010e9a:	230a      	movs	r3, #10
 8010e9c:	6063      	str	r3, [r4, #4]
 8010e9e:	6863      	ldr	r3, [r4, #4]
 8010ea0:	4945      	ldr	r1, [pc, #276]	; (8010fb8 <_scanf_i+0x1e4>)
 8010ea2:	6960      	ldr	r0, [r4, #20]
 8010ea4:	1ac9      	subs	r1, r1, r3
 8010ea6:	f000 f937 	bl	8011118 <__sccl>
 8010eaa:	f04f 0b00 	mov.w	fp, #0
 8010eae:	68a3      	ldr	r3, [r4, #8]
 8010eb0:	6822      	ldr	r2, [r4, #0]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d03d      	beq.n	8010f32 <_scanf_i+0x15e>
 8010eb6:	6831      	ldr	r1, [r6, #0]
 8010eb8:	6960      	ldr	r0, [r4, #20]
 8010eba:	f891 c000 	ldrb.w	ip, [r1]
 8010ebe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	d035      	beq.n	8010f32 <_scanf_i+0x15e>
 8010ec6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010eca:	d124      	bne.n	8010f16 <_scanf_i+0x142>
 8010ecc:	0510      	lsls	r0, r2, #20
 8010ece:	d522      	bpl.n	8010f16 <_scanf_i+0x142>
 8010ed0:	f10b 0b01 	add.w	fp, fp, #1
 8010ed4:	f1b9 0f00 	cmp.w	r9, #0
 8010ed8:	d003      	beq.n	8010ee2 <_scanf_i+0x10e>
 8010eda:	3301      	adds	r3, #1
 8010edc:	f109 39ff 	add.w	r9, r9, #4294967295
 8010ee0:	60a3      	str	r3, [r4, #8]
 8010ee2:	6873      	ldr	r3, [r6, #4]
 8010ee4:	3b01      	subs	r3, #1
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	6073      	str	r3, [r6, #4]
 8010eea:	dd1b      	ble.n	8010f24 <_scanf_i+0x150>
 8010eec:	6833      	ldr	r3, [r6, #0]
 8010eee:	3301      	adds	r3, #1
 8010ef0:	6033      	str	r3, [r6, #0]
 8010ef2:	68a3      	ldr	r3, [r4, #8]
 8010ef4:	3b01      	subs	r3, #1
 8010ef6:	60a3      	str	r3, [r4, #8]
 8010ef8:	e7d9      	b.n	8010eae <_scanf_i+0xda>
 8010efa:	f1bb 0f02 	cmp.w	fp, #2
 8010efe:	d1ae      	bne.n	8010e5e <_scanf_i+0x8a>
 8010f00:	6822      	ldr	r2, [r4, #0]
 8010f02:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010f06:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010f0a:	d1bf      	bne.n	8010e8c <_scanf_i+0xb8>
 8010f0c:	2310      	movs	r3, #16
 8010f0e:	6063      	str	r3, [r4, #4]
 8010f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010f14:	e7a2      	b.n	8010e5c <_scanf_i+0x88>
 8010f16:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010f1a:	6022      	str	r2, [r4, #0]
 8010f1c:	780b      	ldrb	r3, [r1, #0]
 8010f1e:	f805 3b01 	strb.w	r3, [r5], #1
 8010f22:	e7de      	b.n	8010ee2 <_scanf_i+0x10e>
 8010f24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010f28:	4631      	mov	r1, r6
 8010f2a:	4650      	mov	r0, sl
 8010f2c:	4798      	blx	r3
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	d0df      	beq.n	8010ef2 <_scanf_i+0x11e>
 8010f32:	6823      	ldr	r3, [r4, #0]
 8010f34:	05d9      	lsls	r1, r3, #23
 8010f36:	d50d      	bpl.n	8010f54 <_scanf_i+0x180>
 8010f38:	42bd      	cmp	r5, r7
 8010f3a:	d909      	bls.n	8010f50 <_scanf_i+0x17c>
 8010f3c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010f40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f44:	4632      	mov	r2, r6
 8010f46:	4650      	mov	r0, sl
 8010f48:	4798      	blx	r3
 8010f4a:	f105 39ff 	add.w	r9, r5, #4294967295
 8010f4e:	464d      	mov	r5, r9
 8010f50:	42bd      	cmp	r5, r7
 8010f52:	d028      	beq.n	8010fa6 <_scanf_i+0x1d2>
 8010f54:	6822      	ldr	r2, [r4, #0]
 8010f56:	f012 0210 	ands.w	r2, r2, #16
 8010f5a:	d113      	bne.n	8010f84 <_scanf_i+0x1b0>
 8010f5c:	702a      	strb	r2, [r5, #0]
 8010f5e:	6863      	ldr	r3, [r4, #4]
 8010f60:	9e01      	ldr	r6, [sp, #4]
 8010f62:	4639      	mov	r1, r7
 8010f64:	4650      	mov	r0, sl
 8010f66:	47b0      	blx	r6
 8010f68:	f8d8 3000 	ldr.w	r3, [r8]
 8010f6c:	6821      	ldr	r1, [r4, #0]
 8010f6e:	1d1a      	adds	r2, r3, #4
 8010f70:	f8c8 2000 	str.w	r2, [r8]
 8010f74:	f011 0f20 	tst.w	r1, #32
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	d00f      	beq.n	8010f9c <_scanf_i+0x1c8>
 8010f7c:	6018      	str	r0, [r3, #0]
 8010f7e:	68e3      	ldr	r3, [r4, #12]
 8010f80:	3301      	adds	r3, #1
 8010f82:	60e3      	str	r3, [r4, #12]
 8010f84:	6923      	ldr	r3, [r4, #16]
 8010f86:	1bed      	subs	r5, r5, r7
 8010f88:	445d      	add	r5, fp
 8010f8a:	442b      	add	r3, r5
 8010f8c:	6123      	str	r3, [r4, #16]
 8010f8e:	2000      	movs	r0, #0
 8010f90:	b007      	add	sp, #28
 8010f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f96:	f04f 0b00 	mov.w	fp, #0
 8010f9a:	e7ca      	b.n	8010f32 <_scanf_i+0x15e>
 8010f9c:	07ca      	lsls	r2, r1, #31
 8010f9e:	bf4c      	ite	mi
 8010fa0:	8018      	strhmi	r0, [r3, #0]
 8010fa2:	6018      	strpl	r0, [r3, #0]
 8010fa4:	e7eb      	b.n	8010f7e <_scanf_i+0x1aa>
 8010fa6:	2001      	movs	r0, #1
 8010fa8:	e7f2      	b.n	8010f90 <_scanf_i+0x1bc>
 8010faa:	bf00      	nop
 8010fac:	08013904 	.word	0x08013904
 8010fb0:	08011b05 	.word	0x08011b05
 8010fb4:	080106c9 	.word	0x080106c9
 8010fb8:	08013cea 	.word	0x08013cea

08010fbc <__sflush_r>:
 8010fbc:	898a      	ldrh	r2, [r1, #12]
 8010fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fc2:	4605      	mov	r5, r0
 8010fc4:	0710      	lsls	r0, r2, #28
 8010fc6:	460c      	mov	r4, r1
 8010fc8:	d458      	bmi.n	801107c <__sflush_r+0xc0>
 8010fca:	684b      	ldr	r3, [r1, #4]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	dc05      	bgt.n	8010fdc <__sflush_r+0x20>
 8010fd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	dc02      	bgt.n	8010fdc <__sflush_r+0x20>
 8010fd6:	2000      	movs	r0, #0
 8010fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010fde:	2e00      	cmp	r6, #0
 8010fe0:	d0f9      	beq.n	8010fd6 <__sflush_r+0x1a>
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010fe8:	682f      	ldr	r7, [r5, #0]
 8010fea:	6a21      	ldr	r1, [r4, #32]
 8010fec:	602b      	str	r3, [r5, #0]
 8010fee:	d032      	beq.n	8011056 <__sflush_r+0x9a>
 8010ff0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ff2:	89a3      	ldrh	r3, [r4, #12]
 8010ff4:	075a      	lsls	r2, r3, #29
 8010ff6:	d505      	bpl.n	8011004 <__sflush_r+0x48>
 8010ff8:	6863      	ldr	r3, [r4, #4]
 8010ffa:	1ac0      	subs	r0, r0, r3
 8010ffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010ffe:	b10b      	cbz	r3, 8011004 <__sflush_r+0x48>
 8011000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011002:	1ac0      	subs	r0, r0, r3
 8011004:	2300      	movs	r3, #0
 8011006:	4602      	mov	r2, r0
 8011008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801100a:	6a21      	ldr	r1, [r4, #32]
 801100c:	4628      	mov	r0, r5
 801100e:	47b0      	blx	r6
 8011010:	1c43      	adds	r3, r0, #1
 8011012:	89a3      	ldrh	r3, [r4, #12]
 8011014:	d106      	bne.n	8011024 <__sflush_r+0x68>
 8011016:	6829      	ldr	r1, [r5, #0]
 8011018:	291d      	cmp	r1, #29
 801101a:	d82b      	bhi.n	8011074 <__sflush_r+0xb8>
 801101c:	4a29      	ldr	r2, [pc, #164]	; (80110c4 <__sflush_r+0x108>)
 801101e:	410a      	asrs	r2, r1
 8011020:	07d6      	lsls	r6, r2, #31
 8011022:	d427      	bmi.n	8011074 <__sflush_r+0xb8>
 8011024:	2200      	movs	r2, #0
 8011026:	6062      	str	r2, [r4, #4]
 8011028:	04d9      	lsls	r1, r3, #19
 801102a:	6922      	ldr	r2, [r4, #16]
 801102c:	6022      	str	r2, [r4, #0]
 801102e:	d504      	bpl.n	801103a <__sflush_r+0x7e>
 8011030:	1c42      	adds	r2, r0, #1
 8011032:	d101      	bne.n	8011038 <__sflush_r+0x7c>
 8011034:	682b      	ldr	r3, [r5, #0]
 8011036:	b903      	cbnz	r3, 801103a <__sflush_r+0x7e>
 8011038:	6560      	str	r0, [r4, #84]	; 0x54
 801103a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801103c:	602f      	str	r7, [r5, #0]
 801103e:	2900      	cmp	r1, #0
 8011040:	d0c9      	beq.n	8010fd6 <__sflush_r+0x1a>
 8011042:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011046:	4299      	cmp	r1, r3
 8011048:	d002      	beq.n	8011050 <__sflush_r+0x94>
 801104a:	4628      	mov	r0, r5
 801104c:	f7fd fefa 	bl	800ee44 <_free_r>
 8011050:	2000      	movs	r0, #0
 8011052:	6360      	str	r0, [r4, #52]	; 0x34
 8011054:	e7c0      	b.n	8010fd8 <__sflush_r+0x1c>
 8011056:	2301      	movs	r3, #1
 8011058:	4628      	mov	r0, r5
 801105a:	47b0      	blx	r6
 801105c:	1c41      	adds	r1, r0, #1
 801105e:	d1c8      	bne.n	8010ff2 <__sflush_r+0x36>
 8011060:	682b      	ldr	r3, [r5, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d0c5      	beq.n	8010ff2 <__sflush_r+0x36>
 8011066:	2b1d      	cmp	r3, #29
 8011068:	d001      	beq.n	801106e <__sflush_r+0xb2>
 801106a:	2b16      	cmp	r3, #22
 801106c:	d101      	bne.n	8011072 <__sflush_r+0xb6>
 801106e:	602f      	str	r7, [r5, #0]
 8011070:	e7b1      	b.n	8010fd6 <__sflush_r+0x1a>
 8011072:	89a3      	ldrh	r3, [r4, #12]
 8011074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011078:	81a3      	strh	r3, [r4, #12]
 801107a:	e7ad      	b.n	8010fd8 <__sflush_r+0x1c>
 801107c:	690f      	ldr	r7, [r1, #16]
 801107e:	2f00      	cmp	r7, #0
 8011080:	d0a9      	beq.n	8010fd6 <__sflush_r+0x1a>
 8011082:	0793      	lsls	r3, r2, #30
 8011084:	680e      	ldr	r6, [r1, #0]
 8011086:	bf08      	it	eq
 8011088:	694b      	ldreq	r3, [r1, #20]
 801108a:	600f      	str	r7, [r1, #0]
 801108c:	bf18      	it	ne
 801108e:	2300      	movne	r3, #0
 8011090:	eba6 0807 	sub.w	r8, r6, r7
 8011094:	608b      	str	r3, [r1, #8]
 8011096:	f1b8 0f00 	cmp.w	r8, #0
 801109a:	dd9c      	ble.n	8010fd6 <__sflush_r+0x1a>
 801109c:	6a21      	ldr	r1, [r4, #32]
 801109e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80110a0:	4643      	mov	r3, r8
 80110a2:	463a      	mov	r2, r7
 80110a4:	4628      	mov	r0, r5
 80110a6:	47b0      	blx	r6
 80110a8:	2800      	cmp	r0, #0
 80110aa:	dc06      	bgt.n	80110ba <__sflush_r+0xfe>
 80110ac:	89a3      	ldrh	r3, [r4, #12]
 80110ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110b2:	81a3      	strh	r3, [r4, #12]
 80110b4:	f04f 30ff 	mov.w	r0, #4294967295
 80110b8:	e78e      	b.n	8010fd8 <__sflush_r+0x1c>
 80110ba:	4407      	add	r7, r0
 80110bc:	eba8 0800 	sub.w	r8, r8, r0
 80110c0:	e7e9      	b.n	8011096 <__sflush_r+0xda>
 80110c2:	bf00      	nop
 80110c4:	dfbffffe 	.word	0xdfbffffe

080110c8 <_fflush_r>:
 80110c8:	b538      	push	{r3, r4, r5, lr}
 80110ca:	690b      	ldr	r3, [r1, #16]
 80110cc:	4605      	mov	r5, r0
 80110ce:	460c      	mov	r4, r1
 80110d0:	b913      	cbnz	r3, 80110d8 <_fflush_r+0x10>
 80110d2:	2500      	movs	r5, #0
 80110d4:	4628      	mov	r0, r5
 80110d6:	bd38      	pop	{r3, r4, r5, pc}
 80110d8:	b118      	cbz	r0, 80110e2 <_fflush_r+0x1a>
 80110da:	6a03      	ldr	r3, [r0, #32]
 80110dc:	b90b      	cbnz	r3, 80110e2 <_fflush_r+0x1a>
 80110de:	f7fc fe67 	bl	800ddb0 <__sinit>
 80110e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d0f3      	beq.n	80110d2 <_fflush_r+0xa>
 80110ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80110ec:	07d0      	lsls	r0, r2, #31
 80110ee:	d404      	bmi.n	80110fa <_fflush_r+0x32>
 80110f0:	0599      	lsls	r1, r3, #22
 80110f2:	d402      	bmi.n	80110fa <_fflush_r+0x32>
 80110f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80110f6:	f7fd f80c 	bl	800e112 <__retarget_lock_acquire_recursive>
 80110fa:	4628      	mov	r0, r5
 80110fc:	4621      	mov	r1, r4
 80110fe:	f7ff ff5d 	bl	8010fbc <__sflush_r>
 8011102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011104:	07da      	lsls	r2, r3, #31
 8011106:	4605      	mov	r5, r0
 8011108:	d4e4      	bmi.n	80110d4 <_fflush_r+0xc>
 801110a:	89a3      	ldrh	r3, [r4, #12]
 801110c:	059b      	lsls	r3, r3, #22
 801110e:	d4e1      	bmi.n	80110d4 <_fflush_r+0xc>
 8011110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011112:	f7fc ffff 	bl	800e114 <__retarget_lock_release_recursive>
 8011116:	e7dd      	b.n	80110d4 <_fflush_r+0xc>

08011118 <__sccl>:
 8011118:	b570      	push	{r4, r5, r6, lr}
 801111a:	780b      	ldrb	r3, [r1, #0]
 801111c:	4604      	mov	r4, r0
 801111e:	2b5e      	cmp	r3, #94	; 0x5e
 8011120:	bf0b      	itete	eq
 8011122:	784b      	ldrbeq	r3, [r1, #1]
 8011124:	1c4a      	addne	r2, r1, #1
 8011126:	1c8a      	addeq	r2, r1, #2
 8011128:	2100      	movne	r1, #0
 801112a:	bf08      	it	eq
 801112c:	2101      	moveq	r1, #1
 801112e:	3801      	subs	r0, #1
 8011130:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011134:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011138:	42a8      	cmp	r0, r5
 801113a:	d1fb      	bne.n	8011134 <__sccl+0x1c>
 801113c:	b90b      	cbnz	r3, 8011142 <__sccl+0x2a>
 801113e:	1e50      	subs	r0, r2, #1
 8011140:	bd70      	pop	{r4, r5, r6, pc}
 8011142:	f081 0101 	eor.w	r1, r1, #1
 8011146:	54e1      	strb	r1, [r4, r3]
 8011148:	4610      	mov	r0, r2
 801114a:	4602      	mov	r2, r0
 801114c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011150:	2d2d      	cmp	r5, #45	; 0x2d
 8011152:	d005      	beq.n	8011160 <__sccl+0x48>
 8011154:	2d5d      	cmp	r5, #93	; 0x5d
 8011156:	d016      	beq.n	8011186 <__sccl+0x6e>
 8011158:	2d00      	cmp	r5, #0
 801115a:	d0f1      	beq.n	8011140 <__sccl+0x28>
 801115c:	462b      	mov	r3, r5
 801115e:	e7f2      	b.n	8011146 <__sccl+0x2e>
 8011160:	7846      	ldrb	r6, [r0, #1]
 8011162:	2e5d      	cmp	r6, #93	; 0x5d
 8011164:	d0fa      	beq.n	801115c <__sccl+0x44>
 8011166:	42b3      	cmp	r3, r6
 8011168:	dcf8      	bgt.n	801115c <__sccl+0x44>
 801116a:	3002      	adds	r0, #2
 801116c:	461a      	mov	r2, r3
 801116e:	3201      	adds	r2, #1
 8011170:	4296      	cmp	r6, r2
 8011172:	54a1      	strb	r1, [r4, r2]
 8011174:	dcfb      	bgt.n	801116e <__sccl+0x56>
 8011176:	1af2      	subs	r2, r6, r3
 8011178:	3a01      	subs	r2, #1
 801117a:	1c5d      	adds	r5, r3, #1
 801117c:	42b3      	cmp	r3, r6
 801117e:	bfa8      	it	ge
 8011180:	2200      	movge	r2, #0
 8011182:	18ab      	adds	r3, r5, r2
 8011184:	e7e1      	b.n	801114a <__sccl+0x32>
 8011186:	4610      	mov	r0, r2
 8011188:	e7da      	b.n	8011140 <__sccl+0x28>

0801118a <__submore>:
 801118a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801118e:	460c      	mov	r4, r1
 8011190:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011192:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011196:	4299      	cmp	r1, r3
 8011198:	d11d      	bne.n	80111d6 <__submore+0x4c>
 801119a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801119e:	f7fd fec5 	bl	800ef2c <_malloc_r>
 80111a2:	b918      	cbnz	r0, 80111ac <__submore+0x22>
 80111a4:	f04f 30ff 	mov.w	r0, #4294967295
 80111a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80111b2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80111b6:	6360      	str	r0, [r4, #52]	; 0x34
 80111b8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80111bc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80111c0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80111c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80111c8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80111cc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80111d0:	6020      	str	r0, [r4, #0]
 80111d2:	2000      	movs	r0, #0
 80111d4:	e7e8      	b.n	80111a8 <__submore+0x1e>
 80111d6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80111d8:	0077      	lsls	r7, r6, #1
 80111da:	463a      	mov	r2, r7
 80111dc:	f000 fbf1 	bl	80119c2 <_realloc_r>
 80111e0:	4605      	mov	r5, r0
 80111e2:	2800      	cmp	r0, #0
 80111e4:	d0de      	beq.n	80111a4 <__submore+0x1a>
 80111e6:	eb00 0806 	add.w	r8, r0, r6
 80111ea:	4601      	mov	r1, r0
 80111ec:	4632      	mov	r2, r6
 80111ee:	4640      	mov	r0, r8
 80111f0:	f7fc ff99 	bl	800e126 <memcpy>
 80111f4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80111f8:	f8c4 8000 	str.w	r8, [r4]
 80111fc:	e7e9      	b.n	80111d2 <__submore+0x48>

080111fe <memmove>:
 80111fe:	4288      	cmp	r0, r1
 8011200:	b510      	push	{r4, lr}
 8011202:	eb01 0402 	add.w	r4, r1, r2
 8011206:	d902      	bls.n	801120e <memmove+0x10>
 8011208:	4284      	cmp	r4, r0
 801120a:	4623      	mov	r3, r4
 801120c:	d807      	bhi.n	801121e <memmove+0x20>
 801120e:	1e43      	subs	r3, r0, #1
 8011210:	42a1      	cmp	r1, r4
 8011212:	d008      	beq.n	8011226 <memmove+0x28>
 8011214:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011218:	f803 2f01 	strb.w	r2, [r3, #1]!
 801121c:	e7f8      	b.n	8011210 <memmove+0x12>
 801121e:	4402      	add	r2, r0
 8011220:	4601      	mov	r1, r0
 8011222:	428a      	cmp	r2, r1
 8011224:	d100      	bne.n	8011228 <memmove+0x2a>
 8011226:	bd10      	pop	{r4, pc}
 8011228:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801122c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011230:	e7f7      	b.n	8011222 <memmove+0x24>

08011232 <strncmp>:
 8011232:	b510      	push	{r4, lr}
 8011234:	b16a      	cbz	r2, 8011252 <strncmp+0x20>
 8011236:	3901      	subs	r1, #1
 8011238:	1884      	adds	r4, r0, r2
 801123a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801123e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011242:	429a      	cmp	r2, r3
 8011244:	d103      	bne.n	801124e <strncmp+0x1c>
 8011246:	42a0      	cmp	r0, r4
 8011248:	d001      	beq.n	801124e <strncmp+0x1c>
 801124a:	2a00      	cmp	r2, #0
 801124c:	d1f5      	bne.n	801123a <strncmp+0x8>
 801124e:	1ad0      	subs	r0, r2, r3
 8011250:	bd10      	pop	{r4, pc}
 8011252:	4610      	mov	r0, r2
 8011254:	e7fc      	b.n	8011250 <strncmp+0x1e>
	...

08011258 <_sbrk_r>:
 8011258:	b538      	push	{r3, r4, r5, lr}
 801125a:	4d06      	ldr	r5, [pc, #24]	; (8011274 <_sbrk_r+0x1c>)
 801125c:	2300      	movs	r3, #0
 801125e:	4604      	mov	r4, r0
 8011260:	4608      	mov	r0, r1
 8011262:	602b      	str	r3, [r5, #0]
 8011264:	f7f2 fa04 	bl	8003670 <_sbrk>
 8011268:	1c43      	adds	r3, r0, #1
 801126a:	d102      	bne.n	8011272 <_sbrk_r+0x1a>
 801126c:	682b      	ldr	r3, [r5, #0]
 801126e:	b103      	cbz	r3, 8011272 <_sbrk_r+0x1a>
 8011270:	6023      	str	r3, [r4, #0]
 8011272:	bd38      	pop	{r3, r4, r5, pc}
 8011274:	20008c0c 	.word	0x20008c0c

08011278 <nan>:
 8011278:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011280 <nan+0x8>
 801127c:	4770      	bx	lr
 801127e:	bf00      	nop
 8011280:	00000000 	.word	0x00000000
 8011284:	7ff80000 	.word	0x7ff80000

08011288 <__assert_func>:
 8011288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801128a:	4614      	mov	r4, r2
 801128c:	461a      	mov	r2, r3
 801128e:	4b09      	ldr	r3, [pc, #36]	; (80112b4 <__assert_func+0x2c>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	4605      	mov	r5, r0
 8011294:	68d8      	ldr	r0, [r3, #12]
 8011296:	b14c      	cbz	r4, 80112ac <__assert_func+0x24>
 8011298:	4b07      	ldr	r3, [pc, #28]	; (80112b8 <__assert_func+0x30>)
 801129a:	9100      	str	r1, [sp, #0]
 801129c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112a0:	4906      	ldr	r1, [pc, #24]	; (80112bc <__assert_func+0x34>)
 80112a2:	462b      	mov	r3, r5
 80112a4:	f000 fc3e 	bl	8011b24 <fiprintf>
 80112a8:	f000 fc4e 	bl	8011b48 <abort>
 80112ac:	4b04      	ldr	r3, [pc, #16]	; (80112c0 <__assert_func+0x38>)
 80112ae:	461c      	mov	r4, r3
 80112b0:	e7f3      	b.n	801129a <__assert_func+0x12>
 80112b2:	bf00      	nop
 80112b4:	20000130 	.word	0x20000130
 80112b8:	08013cfd 	.word	0x08013cfd
 80112bc:	08013d0a 	.word	0x08013d0a
 80112c0:	08013d38 	.word	0x08013d38

080112c4 <_calloc_r>:
 80112c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112c6:	fba1 2402 	umull	r2, r4, r1, r2
 80112ca:	b94c      	cbnz	r4, 80112e0 <_calloc_r+0x1c>
 80112cc:	4611      	mov	r1, r2
 80112ce:	9201      	str	r2, [sp, #4]
 80112d0:	f7fd fe2c 	bl	800ef2c <_malloc_r>
 80112d4:	9a01      	ldr	r2, [sp, #4]
 80112d6:	4605      	mov	r5, r0
 80112d8:	b930      	cbnz	r0, 80112e8 <_calloc_r+0x24>
 80112da:	4628      	mov	r0, r5
 80112dc:	b003      	add	sp, #12
 80112de:	bd30      	pop	{r4, r5, pc}
 80112e0:	220c      	movs	r2, #12
 80112e2:	6002      	str	r2, [r0, #0]
 80112e4:	2500      	movs	r5, #0
 80112e6:	e7f8      	b.n	80112da <_calloc_r+0x16>
 80112e8:	4621      	mov	r1, r4
 80112ea:	f7fc fe28 	bl	800df3e <memset>
 80112ee:	e7f4      	b.n	80112da <_calloc_r+0x16>

080112f0 <rshift>:
 80112f0:	6903      	ldr	r3, [r0, #16]
 80112f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80112f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80112fe:	f100 0414 	add.w	r4, r0, #20
 8011302:	dd45      	ble.n	8011390 <rshift+0xa0>
 8011304:	f011 011f 	ands.w	r1, r1, #31
 8011308:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801130c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011310:	d10c      	bne.n	801132c <rshift+0x3c>
 8011312:	f100 0710 	add.w	r7, r0, #16
 8011316:	4629      	mov	r1, r5
 8011318:	42b1      	cmp	r1, r6
 801131a:	d334      	bcc.n	8011386 <rshift+0x96>
 801131c:	1a9b      	subs	r3, r3, r2
 801131e:	009b      	lsls	r3, r3, #2
 8011320:	1eea      	subs	r2, r5, #3
 8011322:	4296      	cmp	r6, r2
 8011324:	bf38      	it	cc
 8011326:	2300      	movcc	r3, #0
 8011328:	4423      	add	r3, r4
 801132a:	e015      	b.n	8011358 <rshift+0x68>
 801132c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011330:	f1c1 0820 	rsb	r8, r1, #32
 8011334:	40cf      	lsrs	r7, r1
 8011336:	f105 0e04 	add.w	lr, r5, #4
 801133a:	46a1      	mov	r9, r4
 801133c:	4576      	cmp	r6, lr
 801133e:	46f4      	mov	ip, lr
 8011340:	d815      	bhi.n	801136e <rshift+0x7e>
 8011342:	1a9a      	subs	r2, r3, r2
 8011344:	0092      	lsls	r2, r2, #2
 8011346:	3a04      	subs	r2, #4
 8011348:	3501      	adds	r5, #1
 801134a:	42ae      	cmp	r6, r5
 801134c:	bf38      	it	cc
 801134e:	2200      	movcc	r2, #0
 8011350:	18a3      	adds	r3, r4, r2
 8011352:	50a7      	str	r7, [r4, r2]
 8011354:	b107      	cbz	r7, 8011358 <rshift+0x68>
 8011356:	3304      	adds	r3, #4
 8011358:	1b1a      	subs	r2, r3, r4
 801135a:	42a3      	cmp	r3, r4
 801135c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011360:	bf08      	it	eq
 8011362:	2300      	moveq	r3, #0
 8011364:	6102      	str	r2, [r0, #16]
 8011366:	bf08      	it	eq
 8011368:	6143      	streq	r3, [r0, #20]
 801136a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801136e:	f8dc c000 	ldr.w	ip, [ip]
 8011372:	fa0c fc08 	lsl.w	ip, ip, r8
 8011376:	ea4c 0707 	orr.w	r7, ip, r7
 801137a:	f849 7b04 	str.w	r7, [r9], #4
 801137e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011382:	40cf      	lsrs	r7, r1
 8011384:	e7da      	b.n	801133c <rshift+0x4c>
 8011386:	f851 cb04 	ldr.w	ip, [r1], #4
 801138a:	f847 cf04 	str.w	ip, [r7, #4]!
 801138e:	e7c3      	b.n	8011318 <rshift+0x28>
 8011390:	4623      	mov	r3, r4
 8011392:	e7e1      	b.n	8011358 <rshift+0x68>

08011394 <__hexdig_fun>:
 8011394:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011398:	2b09      	cmp	r3, #9
 801139a:	d802      	bhi.n	80113a2 <__hexdig_fun+0xe>
 801139c:	3820      	subs	r0, #32
 801139e:	b2c0      	uxtb	r0, r0
 80113a0:	4770      	bx	lr
 80113a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80113a6:	2b05      	cmp	r3, #5
 80113a8:	d801      	bhi.n	80113ae <__hexdig_fun+0x1a>
 80113aa:	3847      	subs	r0, #71	; 0x47
 80113ac:	e7f7      	b.n	801139e <__hexdig_fun+0xa>
 80113ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80113b2:	2b05      	cmp	r3, #5
 80113b4:	d801      	bhi.n	80113ba <__hexdig_fun+0x26>
 80113b6:	3827      	subs	r0, #39	; 0x27
 80113b8:	e7f1      	b.n	801139e <__hexdig_fun+0xa>
 80113ba:	2000      	movs	r0, #0
 80113bc:	4770      	bx	lr
	...

080113c0 <__gethex>:
 80113c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c4:	4617      	mov	r7, r2
 80113c6:	680a      	ldr	r2, [r1, #0]
 80113c8:	b085      	sub	sp, #20
 80113ca:	f102 0b02 	add.w	fp, r2, #2
 80113ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80113d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80113d6:	4681      	mov	r9, r0
 80113d8:	468a      	mov	sl, r1
 80113da:	9302      	str	r3, [sp, #8]
 80113dc:	32fe      	adds	r2, #254	; 0xfe
 80113de:	eb02 030b 	add.w	r3, r2, fp
 80113e2:	46d8      	mov	r8, fp
 80113e4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80113e8:	9301      	str	r3, [sp, #4]
 80113ea:	2830      	cmp	r0, #48	; 0x30
 80113ec:	d0f7      	beq.n	80113de <__gethex+0x1e>
 80113ee:	f7ff ffd1 	bl	8011394 <__hexdig_fun>
 80113f2:	4604      	mov	r4, r0
 80113f4:	2800      	cmp	r0, #0
 80113f6:	d138      	bne.n	801146a <__gethex+0xaa>
 80113f8:	49a7      	ldr	r1, [pc, #668]	; (8011698 <__gethex+0x2d8>)
 80113fa:	2201      	movs	r2, #1
 80113fc:	4640      	mov	r0, r8
 80113fe:	f7ff ff18 	bl	8011232 <strncmp>
 8011402:	4606      	mov	r6, r0
 8011404:	2800      	cmp	r0, #0
 8011406:	d169      	bne.n	80114dc <__gethex+0x11c>
 8011408:	f898 0001 	ldrb.w	r0, [r8, #1]
 801140c:	465d      	mov	r5, fp
 801140e:	f7ff ffc1 	bl	8011394 <__hexdig_fun>
 8011412:	2800      	cmp	r0, #0
 8011414:	d064      	beq.n	80114e0 <__gethex+0x120>
 8011416:	465a      	mov	r2, fp
 8011418:	7810      	ldrb	r0, [r2, #0]
 801141a:	2830      	cmp	r0, #48	; 0x30
 801141c:	4690      	mov	r8, r2
 801141e:	f102 0201 	add.w	r2, r2, #1
 8011422:	d0f9      	beq.n	8011418 <__gethex+0x58>
 8011424:	f7ff ffb6 	bl	8011394 <__hexdig_fun>
 8011428:	2301      	movs	r3, #1
 801142a:	fab0 f480 	clz	r4, r0
 801142e:	0964      	lsrs	r4, r4, #5
 8011430:	465e      	mov	r6, fp
 8011432:	9301      	str	r3, [sp, #4]
 8011434:	4642      	mov	r2, r8
 8011436:	4615      	mov	r5, r2
 8011438:	3201      	adds	r2, #1
 801143a:	7828      	ldrb	r0, [r5, #0]
 801143c:	f7ff ffaa 	bl	8011394 <__hexdig_fun>
 8011440:	2800      	cmp	r0, #0
 8011442:	d1f8      	bne.n	8011436 <__gethex+0x76>
 8011444:	4994      	ldr	r1, [pc, #592]	; (8011698 <__gethex+0x2d8>)
 8011446:	2201      	movs	r2, #1
 8011448:	4628      	mov	r0, r5
 801144a:	f7ff fef2 	bl	8011232 <strncmp>
 801144e:	b978      	cbnz	r0, 8011470 <__gethex+0xb0>
 8011450:	b946      	cbnz	r6, 8011464 <__gethex+0xa4>
 8011452:	1c6e      	adds	r6, r5, #1
 8011454:	4632      	mov	r2, r6
 8011456:	4615      	mov	r5, r2
 8011458:	3201      	adds	r2, #1
 801145a:	7828      	ldrb	r0, [r5, #0]
 801145c:	f7ff ff9a 	bl	8011394 <__hexdig_fun>
 8011460:	2800      	cmp	r0, #0
 8011462:	d1f8      	bne.n	8011456 <__gethex+0x96>
 8011464:	1b73      	subs	r3, r6, r5
 8011466:	009e      	lsls	r6, r3, #2
 8011468:	e004      	b.n	8011474 <__gethex+0xb4>
 801146a:	2400      	movs	r4, #0
 801146c:	4626      	mov	r6, r4
 801146e:	e7e1      	b.n	8011434 <__gethex+0x74>
 8011470:	2e00      	cmp	r6, #0
 8011472:	d1f7      	bne.n	8011464 <__gethex+0xa4>
 8011474:	782b      	ldrb	r3, [r5, #0]
 8011476:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801147a:	2b50      	cmp	r3, #80	; 0x50
 801147c:	d13d      	bne.n	80114fa <__gethex+0x13a>
 801147e:	786b      	ldrb	r3, [r5, #1]
 8011480:	2b2b      	cmp	r3, #43	; 0x2b
 8011482:	d02f      	beq.n	80114e4 <__gethex+0x124>
 8011484:	2b2d      	cmp	r3, #45	; 0x2d
 8011486:	d031      	beq.n	80114ec <__gethex+0x12c>
 8011488:	1c69      	adds	r1, r5, #1
 801148a:	f04f 0b00 	mov.w	fp, #0
 801148e:	7808      	ldrb	r0, [r1, #0]
 8011490:	f7ff ff80 	bl	8011394 <__hexdig_fun>
 8011494:	1e42      	subs	r2, r0, #1
 8011496:	b2d2      	uxtb	r2, r2
 8011498:	2a18      	cmp	r2, #24
 801149a:	d82e      	bhi.n	80114fa <__gethex+0x13a>
 801149c:	f1a0 0210 	sub.w	r2, r0, #16
 80114a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80114a4:	f7ff ff76 	bl	8011394 <__hexdig_fun>
 80114a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80114ac:	fa5f fc8c 	uxtb.w	ip, ip
 80114b0:	f1bc 0f18 	cmp.w	ip, #24
 80114b4:	d91d      	bls.n	80114f2 <__gethex+0x132>
 80114b6:	f1bb 0f00 	cmp.w	fp, #0
 80114ba:	d000      	beq.n	80114be <__gethex+0xfe>
 80114bc:	4252      	negs	r2, r2
 80114be:	4416      	add	r6, r2
 80114c0:	f8ca 1000 	str.w	r1, [sl]
 80114c4:	b1dc      	cbz	r4, 80114fe <__gethex+0x13e>
 80114c6:	9b01      	ldr	r3, [sp, #4]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	bf14      	ite	ne
 80114cc:	f04f 0800 	movne.w	r8, #0
 80114d0:	f04f 0806 	moveq.w	r8, #6
 80114d4:	4640      	mov	r0, r8
 80114d6:	b005      	add	sp, #20
 80114d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114dc:	4645      	mov	r5, r8
 80114de:	4626      	mov	r6, r4
 80114e0:	2401      	movs	r4, #1
 80114e2:	e7c7      	b.n	8011474 <__gethex+0xb4>
 80114e4:	f04f 0b00 	mov.w	fp, #0
 80114e8:	1ca9      	adds	r1, r5, #2
 80114ea:	e7d0      	b.n	801148e <__gethex+0xce>
 80114ec:	f04f 0b01 	mov.w	fp, #1
 80114f0:	e7fa      	b.n	80114e8 <__gethex+0x128>
 80114f2:	230a      	movs	r3, #10
 80114f4:	fb03 0002 	mla	r0, r3, r2, r0
 80114f8:	e7d0      	b.n	801149c <__gethex+0xdc>
 80114fa:	4629      	mov	r1, r5
 80114fc:	e7e0      	b.n	80114c0 <__gethex+0x100>
 80114fe:	eba5 0308 	sub.w	r3, r5, r8
 8011502:	3b01      	subs	r3, #1
 8011504:	4621      	mov	r1, r4
 8011506:	2b07      	cmp	r3, #7
 8011508:	dc0a      	bgt.n	8011520 <__gethex+0x160>
 801150a:	4648      	mov	r0, r9
 801150c:	f7fd fd9a 	bl	800f044 <_Balloc>
 8011510:	4604      	mov	r4, r0
 8011512:	b940      	cbnz	r0, 8011526 <__gethex+0x166>
 8011514:	4b61      	ldr	r3, [pc, #388]	; (801169c <__gethex+0x2dc>)
 8011516:	4602      	mov	r2, r0
 8011518:	21e4      	movs	r1, #228	; 0xe4
 801151a:	4861      	ldr	r0, [pc, #388]	; (80116a0 <__gethex+0x2e0>)
 801151c:	f7ff feb4 	bl	8011288 <__assert_func>
 8011520:	3101      	adds	r1, #1
 8011522:	105b      	asrs	r3, r3, #1
 8011524:	e7ef      	b.n	8011506 <__gethex+0x146>
 8011526:	f100 0a14 	add.w	sl, r0, #20
 801152a:	2300      	movs	r3, #0
 801152c:	495a      	ldr	r1, [pc, #360]	; (8011698 <__gethex+0x2d8>)
 801152e:	f8cd a004 	str.w	sl, [sp, #4]
 8011532:	469b      	mov	fp, r3
 8011534:	45a8      	cmp	r8, r5
 8011536:	d342      	bcc.n	80115be <__gethex+0x1fe>
 8011538:	9801      	ldr	r0, [sp, #4]
 801153a:	f840 bb04 	str.w	fp, [r0], #4
 801153e:	eba0 000a 	sub.w	r0, r0, sl
 8011542:	1080      	asrs	r0, r0, #2
 8011544:	6120      	str	r0, [r4, #16]
 8011546:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801154a:	4658      	mov	r0, fp
 801154c:	f7fd fe6c 	bl	800f228 <__hi0bits>
 8011550:	683d      	ldr	r5, [r7, #0]
 8011552:	eba8 0000 	sub.w	r0, r8, r0
 8011556:	42a8      	cmp	r0, r5
 8011558:	dd59      	ble.n	801160e <__gethex+0x24e>
 801155a:	eba0 0805 	sub.w	r8, r0, r5
 801155e:	4641      	mov	r1, r8
 8011560:	4620      	mov	r0, r4
 8011562:	f7fe f9fb 	bl	800f95c <__any_on>
 8011566:	4683      	mov	fp, r0
 8011568:	b1b8      	cbz	r0, 801159a <__gethex+0x1da>
 801156a:	f108 33ff 	add.w	r3, r8, #4294967295
 801156e:	1159      	asrs	r1, r3, #5
 8011570:	f003 021f 	and.w	r2, r3, #31
 8011574:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011578:	f04f 0b01 	mov.w	fp, #1
 801157c:	fa0b f202 	lsl.w	r2, fp, r2
 8011580:	420a      	tst	r2, r1
 8011582:	d00a      	beq.n	801159a <__gethex+0x1da>
 8011584:	455b      	cmp	r3, fp
 8011586:	dd06      	ble.n	8011596 <__gethex+0x1d6>
 8011588:	f1a8 0102 	sub.w	r1, r8, #2
 801158c:	4620      	mov	r0, r4
 801158e:	f7fe f9e5 	bl	800f95c <__any_on>
 8011592:	2800      	cmp	r0, #0
 8011594:	d138      	bne.n	8011608 <__gethex+0x248>
 8011596:	f04f 0b02 	mov.w	fp, #2
 801159a:	4641      	mov	r1, r8
 801159c:	4620      	mov	r0, r4
 801159e:	f7ff fea7 	bl	80112f0 <rshift>
 80115a2:	4446      	add	r6, r8
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	42b3      	cmp	r3, r6
 80115a8:	da41      	bge.n	801162e <__gethex+0x26e>
 80115aa:	4621      	mov	r1, r4
 80115ac:	4648      	mov	r0, r9
 80115ae:	f7fd fd89 	bl	800f0c4 <_Bfree>
 80115b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80115b4:	2300      	movs	r3, #0
 80115b6:	6013      	str	r3, [r2, #0]
 80115b8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80115bc:	e78a      	b.n	80114d4 <__gethex+0x114>
 80115be:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80115c2:	2a2e      	cmp	r2, #46	; 0x2e
 80115c4:	d014      	beq.n	80115f0 <__gethex+0x230>
 80115c6:	2b20      	cmp	r3, #32
 80115c8:	d106      	bne.n	80115d8 <__gethex+0x218>
 80115ca:	9b01      	ldr	r3, [sp, #4]
 80115cc:	f843 bb04 	str.w	fp, [r3], #4
 80115d0:	f04f 0b00 	mov.w	fp, #0
 80115d4:	9301      	str	r3, [sp, #4]
 80115d6:	465b      	mov	r3, fp
 80115d8:	7828      	ldrb	r0, [r5, #0]
 80115da:	9303      	str	r3, [sp, #12]
 80115dc:	f7ff feda 	bl	8011394 <__hexdig_fun>
 80115e0:	9b03      	ldr	r3, [sp, #12]
 80115e2:	f000 000f 	and.w	r0, r0, #15
 80115e6:	4098      	lsls	r0, r3
 80115e8:	ea4b 0b00 	orr.w	fp, fp, r0
 80115ec:	3304      	adds	r3, #4
 80115ee:	e7a1      	b.n	8011534 <__gethex+0x174>
 80115f0:	45a8      	cmp	r8, r5
 80115f2:	d8e8      	bhi.n	80115c6 <__gethex+0x206>
 80115f4:	2201      	movs	r2, #1
 80115f6:	4628      	mov	r0, r5
 80115f8:	9303      	str	r3, [sp, #12]
 80115fa:	f7ff fe1a 	bl	8011232 <strncmp>
 80115fe:	4926      	ldr	r1, [pc, #152]	; (8011698 <__gethex+0x2d8>)
 8011600:	9b03      	ldr	r3, [sp, #12]
 8011602:	2800      	cmp	r0, #0
 8011604:	d1df      	bne.n	80115c6 <__gethex+0x206>
 8011606:	e795      	b.n	8011534 <__gethex+0x174>
 8011608:	f04f 0b03 	mov.w	fp, #3
 801160c:	e7c5      	b.n	801159a <__gethex+0x1da>
 801160e:	da0b      	bge.n	8011628 <__gethex+0x268>
 8011610:	eba5 0800 	sub.w	r8, r5, r0
 8011614:	4621      	mov	r1, r4
 8011616:	4642      	mov	r2, r8
 8011618:	4648      	mov	r0, r9
 801161a:	f7fd ff6d 	bl	800f4f8 <__lshift>
 801161e:	eba6 0608 	sub.w	r6, r6, r8
 8011622:	4604      	mov	r4, r0
 8011624:	f100 0a14 	add.w	sl, r0, #20
 8011628:	f04f 0b00 	mov.w	fp, #0
 801162c:	e7ba      	b.n	80115a4 <__gethex+0x1e4>
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	42b3      	cmp	r3, r6
 8011632:	dd73      	ble.n	801171c <__gethex+0x35c>
 8011634:	1b9e      	subs	r6, r3, r6
 8011636:	42b5      	cmp	r5, r6
 8011638:	dc34      	bgt.n	80116a4 <__gethex+0x2e4>
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	2b02      	cmp	r3, #2
 801163e:	d023      	beq.n	8011688 <__gethex+0x2c8>
 8011640:	2b03      	cmp	r3, #3
 8011642:	d025      	beq.n	8011690 <__gethex+0x2d0>
 8011644:	2b01      	cmp	r3, #1
 8011646:	d115      	bne.n	8011674 <__gethex+0x2b4>
 8011648:	42b5      	cmp	r5, r6
 801164a:	d113      	bne.n	8011674 <__gethex+0x2b4>
 801164c:	2d01      	cmp	r5, #1
 801164e:	d10b      	bne.n	8011668 <__gethex+0x2a8>
 8011650:	9a02      	ldr	r2, [sp, #8]
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6013      	str	r3, [r2, #0]
 8011656:	2301      	movs	r3, #1
 8011658:	6123      	str	r3, [r4, #16]
 801165a:	f8ca 3000 	str.w	r3, [sl]
 801165e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011660:	f04f 0862 	mov.w	r8, #98	; 0x62
 8011664:	601c      	str	r4, [r3, #0]
 8011666:	e735      	b.n	80114d4 <__gethex+0x114>
 8011668:	1e69      	subs	r1, r5, #1
 801166a:	4620      	mov	r0, r4
 801166c:	f7fe f976 	bl	800f95c <__any_on>
 8011670:	2800      	cmp	r0, #0
 8011672:	d1ed      	bne.n	8011650 <__gethex+0x290>
 8011674:	4621      	mov	r1, r4
 8011676:	4648      	mov	r0, r9
 8011678:	f7fd fd24 	bl	800f0c4 <_Bfree>
 801167c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801167e:	2300      	movs	r3, #0
 8011680:	6013      	str	r3, [r2, #0]
 8011682:	f04f 0850 	mov.w	r8, #80	; 0x50
 8011686:	e725      	b.n	80114d4 <__gethex+0x114>
 8011688:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801168a:	2b00      	cmp	r3, #0
 801168c:	d1f2      	bne.n	8011674 <__gethex+0x2b4>
 801168e:	e7df      	b.n	8011650 <__gethex+0x290>
 8011690:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011692:	2b00      	cmp	r3, #0
 8011694:	d1dc      	bne.n	8011650 <__gethex+0x290>
 8011696:	e7ed      	b.n	8011674 <__gethex+0x2b4>
 8011698:	08013b74 	.word	0x08013b74
 801169c:	08013a0b 	.word	0x08013a0b
 80116a0:	08013d39 	.word	0x08013d39
 80116a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80116a8:	f1bb 0f00 	cmp.w	fp, #0
 80116ac:	d133      	bne.n	8011716 <__gethex+0x356>
 80116ae:	f1b8 0f00 	cmp.w	r8, #0
 80116b2:	d004      	beq.n	80116be <__gethex+0x2fe>
 80116b4:	4641      	mov	r1, r8
 80116b6:	4620      	mov	r0, r4
 80116b8:	f7fe f950 	bl	800f95c <__any_on>
 80116bc:	4683      	mov	fp, r0
 80116be:	ea4f 1268 	mov.w	r2, r8, asr #5
 80116c2:	2301      	movs	r3, #1
 80116c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80116c8:	f008 081f 	and.w	r8, r8, #31
 80116cc:	fa03 f308 	lsl.w	r3, r3, r8
 80116d0:	4213      	tst	r3, r2
 80116d2:	4631      	mov	r1, r6
 80116d4:	4620      	mov	r0, r4
 80116d6:	bf18      	it	ne
 80116d8:	f04b 0b02 	orrne.w	fp, fp, #2
 80116dc:	1bad      	subs	r5, r5, r6
 80116de:	f7ff fe07 	bl	80112f0 <rshift>
 80116e2:	687e      	ldr	r6, [r7, #4]
 80116e4:	f04f 0802 	mov.w	r8, #2
 80116e8:	f1bb 0f00 	cmp.w	fp, #0
 80116ec:	d04a      	beq.n	8011784 <__gethex+0x3c4>
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2b02      	cmp	r3, #2
 80116f2:	d016      	beq.n	8011722 <__gethex+0x362>
 80116f4:	2b03      	cmp	r3, #3
 80116f6:	d018      	beq.n	801172a <__gethex+0x36a>
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d109      	bne.n	8011710 <__gethex+0x350>
 80116fc:	f01b 0f02 	tst.w	fp, #2
 8011700:	d006      	beq.n	8011710 <__gethex+0x350>
 8011702:	f8da 3000 	ldr.w	r3, [sl]
 8011706:	ea4b 0b03 	orr.w	fp, fp, r3
 801170a:	f01b 0f01 	tst.w	fp, #1
 801170e:	d10f      	bne.n	8011730 <__gethex+0x370>
 8011710:	f048 0810 	orr.w	r8, r8, #16
 8011714:	e036      	b.n	8011784 <__gethex+0x3c4>
 8011716:	f04f 0b01 	mov.w	fp, #1
 801171a:	e7d0      	b.n	80116be <__gethex+0x2fe>
 801171c:	f04f 0801 	mov.w	r8, #1
 8011720:	e7e2      	b.n	80116e8 <__gethex+0x328>
 8011722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011724:	f1c3 0301 	rsb	r3, r3, #1
 8011728:	930f      	str	r3, [sp, #60]	; 0x3c
 801172a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801172c:	2b00      	cmp	r3, #0
 801172e:	d0ef      	beq.n	8011710 <__gethex+0x350>
 8011730:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011734:	f104 0214 	add.w	r2, r4, #20
 8011738:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801173c:	9301      	str	r3, [sp, #4]
 801173e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8011742:	2300      	movs	r3, #0
 8011744:	4694      	mov	ip, r2
 8011746:	f852 1b04 	ldr.w	r1, [r2], #4
 801174a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801174e:	d01e      	beq.n	801178e <__gethex+0x3ce>
 8011750:	3101      	adds	r1, #1
 8011752:	f8cc 1000 	str.w	r1, [ip]
 8011756:	f1b8 0f02 	cmp.w	r8, #2
 801175a:	f104 0214 	add.w	r2, r4, #20
 801175e:	d13d      	bne.n	80117dc <__gethex+0x41c>
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	3b01      	subs	r3, #1
 8011764:	42ab      	cmp	r3, r5
 8011766:	d10b      	bne.n	8011780 <__gethex+0x3c0>
 8011768:	1169      	asrs	r1, r5, #5
 801176a:	2301      	movs	r3, #1
 801176c:	f005 051f 	and.w	r5, r5, #31
 8011770:	fa03 f505 	lsl.w	r5, r3, r5
 8011774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011778:	421d      	tst	r5, r3
 801177a:	bf18      	it	ne
 801177c:	f04f 0801 	movne.w	r8, #1
 8011780:	f048 0820 	orr.w	r8, r8, #32
 8011784:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011786:	601c      	str	r4, [r3, #0]
 8011788:	9b02      	ldr	r3, [sp, #8]
 801178a:	601e      	str	r6, [r3, #0]
 801178c:	e6a2      	b.n	80114d4 <__gethex+0x114>
 801178e:	4290      	cmp	r0, r2
 8011790:	f842 3c04 	str.w	r3, [r2, #-4]
 8011794:	d8d6      	bhi.n	8011744 <__gethex+0x384>
 8011796:	68a2      	ldr	r2, [r4, #8]
 8011798:	4593      	cmp	fp, r2
 801179a:	db17      	blt.n	80117cc <__gethex+0x40c>
 801179c:	6861      	ldr	r1, [r4, #4]
 801179e:	4648      	mov	r0, r9
 80117a0:	3101      	adds	r1, #1
 80117a2:	f7fd fc4f 	bl	800f044 <_Balloc>
 80117a6:	4682      	mov	sl, r0
 80117a8:	b918      	cbnz	r0, 80117b2 <__gethex+0x3f2>
 80117aa:	4b1b      	ldr	r3, [pc, #108]	; (8011818 <__gethex+0x458>)
 80117ac:	4602      	mov	r2, r0
 80117ae:	2184      	movs	r1, #132	; 0x84
 80117b0:	e6b3      	b.n	801151a <__gethex+0x15a>
 80117b2:	6922      	ldr	r2, [r4, #16]
 80117b4:	3202      	adds	r2, #2
 80117b6:	f104 010c 	add.w	r1, r4, #12
 80117ba:	0092      	lsls	r2, r2, #2
 80117bc:	300c      	adds	r0, #12
 80117be:	f7fc fcb2 	bl	800e126 <memcpy>
 80117c2:	4621      	mov	r1, r4
 80117c4:	4648      	mov	r0, r9
 80117c6:	f7fd fc7d 	bl	800f0c4 <_Bfree>
 80117ca:	4654      	mov	r4, sl
 80117cc:	6922      	ldr	r2, [r4, #16]
 80117ce:	1c51      	adds	r1, r2, #1
 80117d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80117d4:	6121      	str	r1, [r4, #16]
 80117d6:	2101      	movs	r1, #1
 80117d8:	6151      	str	r1, [r2, #20]
 80117da:	e7bc      	b.n	8011756 <__gethex+0x396>
 80117dc:	6921      	ldr	r1, [r4, #16]
 80117de:	4559      	cmp	r1, fp
 80117e0:	dd0b      	ble.n	80117fa <__gethex+0x43a>
 80117e2:	2101      	movs	r1, #1
 80117e4:	4620      	mov	r0, r4
 80117e6:	f7ff fd83 	bl	80112f0 <rshift>
 80117ea:	68bb      	ldr	r3, [r7, #8]
 80117ec:	3601      	adds	r6, #1
 80117ee:	42b3      	cmp	r3, r6
 80117f0:	f6ff aedb 	blt.w	80115aa <__gethex+0x1ea>
 80117f4:	f04f 0801 	mov.w	r8, #1
 80117f8:	e7c2      	b.n	8011780 <__gethex+0x3c0>
 80117fa:	f015 051f 	ands.w	r5, r5, #31
 80117fe:	d0f9      	beq.n	80117f4 <__gethex+0x434>
 8011800:	9b01      	ldr	r3, [sp, #4]
 8011802:	441a      	add	r2, r3
 8011804:	f1c5 0520 	rsb	r5, r5, #32
 8011808:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801180c:	f7fd fd0c 	bl	800f228 <__hi0bits>
 8011810:	42a8      	cmp	r0, r5
 8011812:	dbe6      	blt.n	80117e2 <__gethex+0x422>
 8011814:	e7ee      	b.n	80117f4 <__gethex+0x434>
 8011816:	bf00      	nop
 8011818:	08013a0b 	.word	0x08013a0b

0801181c <L_shift>:
 801181c:	f1c2 0208 	rsb	r2, r2, #8
 8011820:	0092      	lsls	r2, r2, #2
 8011822:	b570      	push	{r4, r5, r6, lr}
 8011824:	f1c2 0620 	rsb	r6, r2, #32
 8011828:	6843      	ldr	r3, [r0, #4]
 801182a:	6804      	ldr	r4, [r0, #0]
 801182c:	fa03 f506 	lsl.w	r5, r3, r6
 8011830:	432c      	orrs	r4, r5
 8011832:	40d3      	lsrs	r3, r2
 8011834:	6004      	str	r4, [r0, #0]
 8011836:	f840 3f04 	str.w	r3, [r0, #4]!
 801183a:	4288      	cmp	r0, r1
 801183c:	d3f4      	bcc.n	8011828 <L_shift+0xc>
 801183e:	bd70      	pop	{r4, r5, r6, pc}

08011840 <__match>:
 8011840:	b530      	push	{r4, r5, lr}
 8011842:	6803      	ldr	r3, [r0, #0]
 8011844:	3301      	adds	r3, #1
 8011846:	f811 4b01 	ldrb.w	r4, [r1], #1
 801184a:	b914      	cbnz	r4, 8011852 <__match+0x12>
 801184c:	6003      	str	r3, [r0, #0]
 801184e:	2001      	movs	r0, #1
 8011850:	bd30      	pop	{r4, r5, pc}
 8011852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011856:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801185a:	2d19      	cmp	r5, #25
 801185c:	bf98      	it	ls
 801185e:	3220      	addls	r2, #32
 8011860:	42a2      	cmp	r2, r4
 8011862:	d0f0      	beq.n	8011846 <__match+0x6>
 8011864:	2000      	movs	r0, #0
 8011866:	e7f3      	b.n	8011850 <__match+0x10>

08011868 <__hexnan>:
 8011868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801186c:	680b      	ldr	r3, [r1, #0]
 801186e:	6801      	ldr	r1, [r0, #0]
 8011870:	115e      	asrs	r6, r3, #5
 8011872:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011876:	f013 031f 	ands.w	r3, r3, #31
 801187a:	b087      	sub	sp, #28
 801187c:	bf18      	it	ne
 801187e:	3604      	addne	r6, #4
 8011880:	2500      	movs	r5, #0
 8011882:	1f37      	subs	r7, r6, #4
 8011884:	4682      	mov	sl, r0
 8011886:	4690      	mov	r8, r2
 8011888:	9301      	str	r3, [sp, #4]
 801188a:	f846 5c04 	str.w	r5, [r6, #-4]
 801188e:	46b9      	mov	r9, r7
 8011890:	463c      	mov	r4, r7
 8011892:	9502      	str	r5, [sp, #8]
 8011894:	46ab      	mov	fp, r5
 8011896:	784a      	ldrb	r2, [r1, #1]
 8011898:	1c4b      	adds	r3, r1, #1
 801189a:	9303      	str	r3, [sp, #12]
 801189c:	b342      	cbz	r2, 80118f0 <__hexnan+0x88>
 801189e:	4610      	mov	r0, r2
 80118a0:	9105      	str	r1, [sp, #20]
 80118a2:	9204      	str	r2, [sp, #16]
 80118a4:	f7ff fd76 	bl	8011394 <__hexdig_fun>
 80118a8:	2800      	cmp	r0, #0
 80118aa:	d14f      	bne.n	801194c <__hexnan+0xe4>
 80118ac:	9a04      	ldr	r2, [sp, #16]
 80118ae:	9905      	ldr	r1, [sp, #20]
 80118b0:	2a20      	cmp	r2, #32
 80118b2:	d818      	bhi.n	80118e6 <__hexnan+0x7e>
 80118b4:	9b02      	ldr	r3, [sp, #8]
 80118b6:	459b      	cmp	fp, r3
 80118b8:	dd13      	ble.n	80118e2 <__hexnan+0x7a>
 80118ba:	454c      	cmp	r4, r9
 80118bc:	d206      	bcs.n	80118cc <__hexnan+0x64>
 80118be:	2d07      	cmp	r5, #7
 80118c0:	dc04      	bgt.n	80118cc <__hexnan+0x64>
 80118c2:	462a      	mov	r2, r5
 80118c4:	4649      	mov	r1, r9
 80118c6:	4620      	mov	r0, r4
 80118c8:	f7ff ffa8 	bl	801181c <L_shift>
 80118cc:	4544      	cmp	r4, r8
 80118ce:	d950      	bls.n	8011972 <__hexnan+0x10a>
 80118d0:	2300      	movs	r3, #0
 80118d2:	f1a4 0904 	sub.w	r9, r4, #4
 80118d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80118da:	f8cd b008 	str.w	fp, [sp, #8]
 80118de:	464c      	mov	r4, r9
 80118e0:	461d      	mov	r5, r3
 80118e2:	9903      	ldr	r1, [sp, #12]
 80118e4:	e7d7      	b.n	8011896 <__hexnan+0x2e>
 80118e6:	2a29      	cmp	r2, #41	; 0x29
 80118e8:	d155      	bne.n	8011996 <__hexnan+0x12e>
 80118ea:	3102      	adds	r1, #2
 80118ec:	f8ca 1000 	str.w	r1, [sl]
 80118f0:	f1bb 0f00 	cmp.w	fp, #0
 80118f4:	d04f      	beq.n	8011996 <__hexnan+0x12e>
 80118f6:	454c      	cmp	r4, r9
 80118f8:	d206      	bcs.n	8011908 <__hexnan+0xa0>
 80118fa:	2d07      	cmp	r5, #7
 80118fc:	dc04      	bgt.n	8011908 <__hexnan+0xa0>
 80118fe:	462a      	mov	r2, r5
 8011900:	4649      	mov	r1, r9
 8011902:	4620      	mov	r0, r4
 8011904:	f7ff ff8a 	bl	801181c <L_shift>
 8011908:	4544      	cmp	r4, r8
 801190a:	d934      	bls.n	8011976 <__hexnan+0x10e>
 801190c:	f1a8 0204 	sub.w	r2, r8, #4
 8011910:	4623      	mov	r3, r4
 8011912:	f853 1b04 	ldr.w	r1, [r3], #4
 8011916:	f842 1f04 	str.w	r1, [r2, #4]!
 801191a:	429f      	cmp	r7, r3
 801191c:	d2f9      	bcs.n	8011912 <__hexnan+0xaa>
 801191e:	1b3b      	subs	r3, r7, r4
 8011920:	f023 0303 	bic.w	r3, r3, #3
 8011924:	3304      	adds	r3, #4
 8011926:	3e03      	subs	r6, #3
 8011928:	3401      	adds	r4, #1
 801192a:	42a6      	cmp	r6, r4
 801192c:	bf38      	it	cc
 801192e:	2304      	movcc	r3, #4
 8011930:	4443      	add	r3, r8
 8011932:	2200      	movs	r2, #0
 8011934:	f843 2b04 	str.w	r2, [r3], #4
 8011938:	429f      	cmp	r7, r3
 801193a:	d2fb      	bcs.n	8011934 <__hexnan+0xcc>
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	b91b      	cbnz	r3, 8011948 <__hexnan+0xe0>
 8011940:	4547      	cmp	r7, r8
 8011942:	d126      	bne.n	8011992 <__hexnan+0x12a>
 8011944:	2301      	movs	r3, #1
 8011946:	603b      	str	r3, [r7, #0]
 8011948:	2005      	movs	r0, #5
 801194a:	e025      	b.n	8011998 <__hexnan+0x130>
 801194c:	3501      	adds	r5, #1
 801194e:	2d08      	cmp	r5, #8
 8011950:	f10b 0b01 	add.w	fp, fp, #1
 8011954:	dd06      	ble.n	8011964 <__hexnan+0xfc>
 8011956:	4544      	cmp	r4, r8
 8011958:	d9c3      	bls.n	80118e2 <__hexnan+0x7a>
 801195a:	2300      	movs	r3, #0
 801195c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011960:	2501      	movs	r5, #1
 8011962:	3c04      	subs	r4, #4
 8011964:	6822      	ldr	r2, [r4, #0]
 8011966:	f000 000f 	and.w	r0, r0, #15
 801196a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801196e:	6020      	str	r0, [r4, #0]
 8011970:	e7b7      	b.n	80118e2 <__hexnan+0x7a>
 8011972:	2508      	movs	r5, #8
 8011974:	e7b5      	b.n	80118e2 <__hexnan+0x7a>
 8011976:	9b01      	ldr	r3, [sp, #4]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d0df      	beq.n	801193c <__hexnan+0xd4>
 801197c:	f1c3 0320 	rsb	r3, r3, #32
 8011980:	f04f 32ff 	mov.w	r2, #4294967295
 8011984:	40da      	lsrs	r2, r3
 8011986:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801198a:	4013      	ands	r3, r2
 801198c:	f846 3c04 	str.w	r3, [r6, #-4]
 8011990:	e7d4      	b.n	801193c <__hexnan+0xd4>
 8011992:	3f04      	subs	r7, #4
 8011994:	e7d2      	b.n	801193c <__hexnan+0xd4>
 8011996:	2004      	movs	r0, #4
 8011998:	b007      	add	sp, #28
 801199a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801199e <__ascii_mbtowc>:
 801199e:	b082      	sub	sp, #8
 80119a0:	b901      	cbnz	r1, 80119a4 <__ascii_mbtowc+0x6>
 80119a2:	a901      	add	r1, sp, #4
 80119a4:	b142      	cbz	r2, 80119b8 <__ascii_mbtowc+0x1a>
 80119a6:	b14b      	cbz	r3, 80119bc <__ascii_mbtowc+0x1e>
 80119a8:	7813      	ldrb	r3, [r2, #0]
 80119aa:	600b      	str	r3, [r1, #0]
 80119ac:	7812      	ldrb	r2, [r2, #0]
 80119ae:	1e10      	subs	r0, r2, #0
 80119b0:	bf18      	it	ne
 80119b2:	2001      	movne	r0, #1
 80119b4:	b002      	add	sp, #8
 80119b6:	4770      	bx	lr
 80119b8:	4610      	mov	r0, r2
 80119ba:	e7fb      	b.n	80119b4 <__ascii_mbtowc+0x16>
 80119bc:	f06f 0001 	mvn.w	r0, #1
 80119c0:	e7f8      	b.n	80119b4 <__ascii_mbtowc+0x16>

080119c2 <_realloc_r>:
 80119c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119c6:	4680      	mov	r8, r0
 80119c8:	4614      	mov	r4, r2
 80119ca:	460e      	mov	r6, r1
 80119cc:	b921      	cbnz	r1, 80119d8 <_realloc_r+0x16>
 80119ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119d2:	4611      	mov	r1, r2
 80119d4:	f7fd baaa 	b.w	800ef2c <_malloc_r>
 80119d8:	b92a      	cbnz	r2, 80119e6 <_realloc_r+0x24>
 80119da:	f7fd fa33 	bl	800ee44 <_free_r>
 80119de:	4625      	mov	r5, r4
 80119e0:	4628      	mov	r0, r5
 80119e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119e6:	f000 f8b6 	bl	8011b56 <_malloc_usable_size_r>
 80119ea:	4284      	cmp	r4, r0
 80119ec:	4607      	mov	r7, r0
 80119ee:	d802      	bhi.n	80119f6 <_realloc_r+0x34>
 80119f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80119f4:	d812      	bhi.n	8011a1c <_realloc_r+0x5a>
 80119f6:	4621      	mov	r1, r4
 80119f8:	4640      	mov	r0, r8
 80119fa:	f7fd fa97 	bl	800ef2c <_malloc_r>
 80119fe:	4605      	mov	r5, r0
 8011a00:	2800      	cmp	r0, #0
 8011a02:	d0ed      	beq.n	80119e0 <_realloc_r+0x1e>
 8011a04:	42bc      	cmp	r4, r7
 8011a06:	4622      	mov	r2, r4
 8011a08:	4631      	mov	r1, r6
 8011a0a:	bf28      	it	cs
 8011a0c:	463a      	movcs	r2, r7
 8011a0e:	f7fc fb8a 	bl	800e126 <memcpy>
 8011a12:	4631      	mov	r1, r6
 8011a14:	4640      	mov	r0, r8
 8011a16:	f7fd fa15 	bl	800ee44 <_free_r>
 8011a1a:	e7e1      	b.n	80119e0 <_realloc_r+0x1e>
 8011a1c:	4635      	mov	r5, r6
 8011a1e:	e7df      	b.n	80119e0 <_realloc_r+0x1e>

08011a20 <_strtoul_l.constprop.0>:
 8011a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a24:	4f36      	ldr	r7, [pc, #216]	; (8011b00 <_strtoul_l.constprop.0+0xe0>)
 8011a26:	4686      	mov	lr, r0
 8011a28:	460d      	mov	r5, r1
 8011a2a:	4628      	mov	r0, r5
 8011a2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011a30:	5d3e      	ldrb	r6, [r7, r4]
 8011a32:	f016 0608 	ands.w	r6, r6, #8
 8011a36:	d1f8      	bne.n	8011a2a <_strtoul_l.constprop.0+0xa>
 8011a38:	2c2d      	cmp	r4, #45	; 0x2d
 8011a3a:	d130      	bne.n	8011a9e <_strtoul_l.constprop.0+0x7e>
 8011a3c:	782c      	ldrb	r4, [r5, #0]
 8011a3e:	2601      	movs	r6, #1
 8011a40:	1c85      	adds	r5, r0, #2
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d057      	beq.n	8011af6 <_strtoul_l.constprop.0+0xd6>
 8011a46:	2b10      	cmp	r3, #16
 8011a48:	d109      	bne.n	8011a5e <_strtoul_l.constprop.0+0x3e>
 8011a4a:	2c30      	cmp	r4, #48	; 0x30
 8011a4c:	d107      	bne.n	8011a5e <_strtoul_l.constprop.0+0x3e>
 8011a4e:	7828      	ldrb	r0, [r5, #0]
 8011a50:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011a54:	2858      	cmp	r0, #88	; 0x58
 8011a56:	d149      	bne.n	8011aec <_strtoul_l.constprop.0+0xcc>
 8011a58:	786c      	ldrb	r4, [r5, #1]
 8011a5a:	2310      	movs	r3, #16
 8011a5c:	3502      	adds	r5, #2
 8011a5e:	f04f 38ff 	mov.w	r8, #4294967295
 8011a62:	2700      	movs	r7, #0
 8011a64:	fbb8 f8f3 	udiv	r8, r8, r3
 8011a68:	fb03 f908 	mul.w	r9, r3, r8
 8011a6c:	ea6f 0909 	mvn.w	r9, r9
 8011a70:	4638      	mov	r0, r7
 8011a72:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011a76:	f1bc 0f09 	cmp.w	ip, #9
 8011a7a:	d815      	bhi.n	8011aa8 <_strtoul_l.constprop.0+0x88>
 8011a7c:	4664      	mov	r4, ip
 8011a7e:	42a3      	cmp	r3, r4
 8011a80:	dd23      	ble.n	8011aca <_strtoul_l.constprop.0+0xaa>
 8011a82:	f1b7 3fff 	cmp.w	r7, #4294967295
 8011a86:	d007      	beq.n	8011a98 <_strtoul_l.constprop.0+0x78>
 8011a88:	4580      	cmp	r8, r0
 8011a8a:	d31b      	bcc.n	8011ac4 <_strtoul_l.constprop.0+0xa4>
 8011a8c:	d101      	bne.n	8011a92 <_strtoul_l.constprop.0+0x72>
 8011a8e:	45a1      	cmp	r9, r4
 8011a90:	db18      	blt.n	8011ac4 <_strtoul_l.constprop.0+0xa4>
 8011a92:	fb00 4003 	mla	r0, r0, r3, r4
 8011a96:	2701      	movs	r7, #1
 8011a98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011a9c:	e7e9      	b.n	8011a72 <_strtoul_l.constprop.0+0x52>
 8011a9e:	2c2b      	cmp	r4, #43	; 0x2b
 8011aa0:	bf04      	itt	eq
 8011aa2:	782c      	ldrbeq	r4, [r5, #0]
 8011aa4:	1c85      	addeq	r5, r0, #2
 8011aa6:	e7cc      	b.n	8011a42 <_strtoul_l.constprop.0+0x22>
 8011aa8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011aac:	f1bc 0f19 	cmp.w	ip, #25
 8011ab0:	d801      	bhi.n	8011ab6 <_strtoul_l.constprop.0+0x96>
 8011ab2:	3c37      	subs	r4, #55	; 0x37
 8011ab4:	e7e3      	b.n	8011a7e <_strtoul_l.constprop.0+0x5e>
 8011ab6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011aba:	f1bc 0f19 	cmp.w	ip, #25
 8011abe:	d804      	bhi.n	8011aca <_strtoul_l.constprop.0+0xaa>
 8011ac0:	3c57      	subs	r4, #87	; 0x57
 8011ac2:	e7dc      	b.n	8011a7e <_strtoul_l.constprop.0+0x5e>
 8011ac4:	f04f 37ff 	mov.w	r7, #4294967295
 8011ac8:	e7e6      	b.n	8011a98 <_strtoul_l.constprop.0+0x78>
 8011aca:	1c7b      	adds	r3, r7, #1
 8011acc:	d106      	bne.n	8011adc <_strtoul_l.constprop.0+0xbc>
 8011ace:	2322      	movs	r3, #34	; 0x22
 8011ad0:	f8ce 3000 	str.w	r3, [lr]
 8011ad4:	4638      	mov	r0, r7
 8011ad6:	b932      	cbnz	r2, 8011ae6 <_strtoul_l.constprop.0+0xc6>
 8011ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011adc:	b106      	cbz	r6, 8011ae0 <_strtoul_l.constprop.0+0xc0>
 8011ade:	4240      	negs	r0, r0
 8011ae0:	2a00      	cmp	r2, #0
 8011ae2:	d0f9      	beq.n	8011ad8 <_strtoul_l.constprop.0+0xb8>
 8011ae4:	b107      	cbz	r7, 8011ae8 <_strtoul_l.constprop.0+0xc8>
 8011ae6:	1e69      	subs	r1, r5, #1
 8011ae8:	6011      	str	r1, [r2, #0]
 8011aea:	e7f5      	b.n	8011ad8 <_strtoul_l.constprop.0+0xb8>
 8011aec:	2430      	movs	r4, #48	; 0x30
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d1b5      	bne.n	8011a5e <_strtoul_l.constprop.0+0x3e>
 8011af2:	2308      	movs	r3, #8
 8011af4:	e7b3      	b.n	8011a5e <_strtoul_l.constprop.0+0x3e>
 8011af6:	2c30      	cmp	r4, #48	; 0x30
 8011af8:	d0a9      	beq.n	8011a4e <_strtoul_l.constprop.0+0x2e>
 8011afa:	230a      	movs	r3, #10
 8011afc:	e7af      	b.n	8011a5e <_strtoul_l.constprop.0+0x3e>
 8011afe:	bf00      	nop
 8011b00:	08013bc9 	.word	0x08013bc9

08011b04 <_strtoul_r>:
 8011b04:	f7ff bf8c 	b.w	8011a20 <_strtoul_l.constprop.0>

08011b08 <__ascii_wctomb>:
 8011b08:	b149      	cbz	r1, 8011b1e <__ascii_wctomb+0x16>
 8011b0a:	2aff      	cmp	r2, #255	; 0xff
 8011b0c:	bf85      	ittet	hi
 8011b0e:	238a      	movhi	r3, #138	; 0x8a
 8011b10:	6003      	strhi	r3, [r0, #0]
 8011b12:	700a      	strbls	r2, [r1, #0]
 8011b14:	f04f 30ff 	movhi.w	r0, #4294967295
 8011b18:	bf98      	it	ls
 8011b1a:	2001      	movls	r0, #1
 8011b1c:	4770      	bx	lr
 8011b1e:	4608      	mov	r0, r1
 8011b20:	4770      	bx	lr
	...

08011b24 <fiprintf>:
 8011b24:	b40e      	push	{r1, r2, r3}
 8011b26:	b503      	push	{r0, r1, lr}
 8011b28:	4601      	mov	r1, r0
 8011b2a:	ab03      	add	r3, sp, #12
 8011b2c:	4805      	ldr	r0, [pc, #20]	; (8011b44 <fiprintf+0x20>)
 8011b2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b32:	6800      	ldr	r0, [r0, #0]
 8011b34:	9301      	str	r3, [sp, #4]
 8011b36:	f000 f83f 	bl	8011bb8 <_vfiprintf_r>
 8011b3a:	b002      	add	sp, #8
 8011b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b40:	b003      	add	sp, #12
 8011b42:	4770      	bx	lr
 8011b44:	20000130 	.word	0x20000130

08011b48 <abort>:
 8011b48:	b508      	push	{r3, lr}
 8011b4a:	2006      	movs	r0, #6
 8011b4c:	f000 fa0c 	bl	8011f68 <raise>
 8011b50:	2001      	movs	r0, #1
 8011b52:	f7f1 fd15 	bl	8003580 <_exit>

08011b56 <_malloc_usable_size_r>:
 8011b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b5a:	1f18      	subs	r0, r3, #4
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	bfbc      	itt	lt
 8011b60:	580b      	ldrlt	r3, [r1, r0]
 8011b62:	18c0      	addlt	r0, r0, r3
 8011b64:	4770      	bx	lr

08011b66 <__sfputc_r>:
 8011b66:	6893      	ldr	r3, [r2, #8]
 8011b68:	3b01      	subs	r3, #1
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	b410      	push	{r4}
 8011b6e:	6093      	str	r3, [r2, #8]
 8011b70:	da08      	bge.n	8011b84 <__sfputc_r+0x1e>
 8011b72:	6994      	ldr	r4, [r2, #24]
 8011b74:	42a3      	cmp	r3, r4
 8011b76:	db01      	blt.n	8011b7c <__sfputc_r+0x16>
 8011b78:	290a      	cmp	r1, #10
 8011b7a:	d103      	bne.n	8011b84 <__sfputc_r+0x1e>
 8011b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b80:	f000 b934 	b.w	8011dec <__swbuf_r>
 8011b84:	6813      	ldr	r3, [r2, #0]
 8011b86:	1c58      	adds	r0, r3, #1
 8011b88:	6010      	str	r0, [r2, #0]
 8011b8a:	7019      	strb	r1, [r3, #0]
 8011b8c:	4608      	mov	r0, r1
 8011b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b92:	4770      	bx	lr

08011b94 <__sfputs_r>:
 8011b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b96:	4606      	mov	r6, r0
 8011b98:	460f      	mov	r7, r1
 8011b9a:	4614      	mov	r4, r2
 8011b9c:	18d5      	adds	r5, r2, r3
 8011b9e:	42ac      	cmp	r4, r5
 8011ba0:	d101      	bne.n	8011ba6 <__sfputs_r+0x12>
 8011ba2:	2000      	movs	r0, #0
 8011ba4:	e007      	b.n	8011bb6 <__sfputs_r+0x22>
 8011ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011baa:	463a      	mov	r2, r7
 8011bac:	4630      	mov	r0, r6
 8011bae:	f7ff ffda 	bl	8011b66 <__sfputc_r>
 8011bb2:	1c43      	adds	r3, r0, #1
 8011bb4:	d1f3      	bne.n	8011b9e <__sfputs_r+0xa>
 8011bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011bb8 <_vfiprintf_r>:
 8011bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bbc:	460d      	mov	r5, r1
 8011bbe:	b09d      	sub	sp, #116	; 0x74
 8011bc0:	4614      	mov	r4, r2
 8011bc2:	4698      	mov	r8, r3
 8011bc4:	4606      	mov	r6, r0
 8011bc6:	b118      	cbz	r0, 8011bd0 <_vfiprintf_r+0x18>
 8011bc8:	6a03      	ldr	r3, [r0, #32]
 8011bca:	b90b      	cbnz	r3, 8011bd0 <_vfiprintf_r+0x18>
 8011bcc:	f7fc f8f0 	bl	800ddb0 <__sinit>
 8011bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bd2:	07d9      	lsls	r1, r3, #31
 8011bd4:	d405      	bmi.n	8011be2 <_vfiprintf_r+0x2a>
 8011bd6:	89ab      	ldrh	r3, [r5, #12]
 8011bd8:	059a      	lsls	r2, r3, #22
 8011bda:	d402      	bmi.n	8011be2 <_vfiprintf_r+0x2a>
 8011bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011bde:	f7fc fa98 	bl	800e112 <__retarget_lock_acquire_recursive>
 8011be2:	89ab      	ldrh	r3, [r5, #12]
 8011be4:	071b      	lsls	r3, r3, #28
 8011be6:	d501      	bpl.n	8011bec <_vfiprintf_r+0x34>
 8011be8:	692b      	ldr	r3, [r5, #16]
 8011bea:	b99b      	cbnz	r3, 8011c14 <_vfiprintf_r+0x5c>
 8011bec:	4629      	mov	r1, r5
 8011bee:	4630      	mov	r0, r6
 8011bf0:	f000 f93a 	bl	8011e68 <__swsetup_r>
 8011bf4:	b170      	cbz	r0, 8011c14 <_vfiprintf_r+0x5c>
 8011bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bf8:	07dc      	lsls	r4, r3, #31
 8011bfa:	d504      	bpl.n	8011c06 <_vfiprintf_r+0x4e>
 8011bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8011c00:	b01d      	add	sp, #116	; 0x74
 8011c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c06:	89ab      	ldrh	r3, [r5, #12]
 8011c08:	0598      	lsls	r0, r3, #22
 8011c0a:	d4f7      	bmi.n	8011bfc <_vfiprintf_r+0x44>
 8011c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c0e:	f7fc fa81 	bl	800e114 <__retarget_lock_release_recursive>
 8011c12:	e7f3      	b.n	8011bfc <_vfiprintf_r+0x44>
 8011c14:	2300      	movs	r3, #0
 8011c16:	9309      	str	r3, [sp, #36]	; 0x24
 8011c18:	2320      	movs	r3, #32
 8011c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c22:	2330      	movs	r3, #48	; 0x30
 8011c24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011dd8 <_vfiprintf_r+0x220>
 8011c28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c2c:	f04f 0901 	mov.w	r9, #1
 8011c30:	4623      	mov	r3, r4
 8011c32:	469a      	mov	sl, r3
 8011c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c38:	b10a      	cbz	r2, 8011c3e <_vfiprintf_r+0x86>
 8011c3a:	2a25      	cmp	r2, #37	; 0x25
 8011c3c:	d1f9      	bne.n	8011c32 <_vfiprintf_r+0x7a>
 8011c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8011c42:	d00b      	beq.n	8011c5c <_vfiprintf_r+0xa4>
 8011c44:	465b      	mov	r3, fp
 8011c46:	4622      	mov	r2, r4
 8011c48:	4629      	mov	r1, r5
 8011c4a:	4630      	mov	r0, r6
 8011c4c:	f7ff ffa2 	bl	8011b94 <__sfputs_r>
 8011c50:	3001      	adds	r0, #1
 8011c52:	f000 80a9 	beq.w	8011da8 <_vfiprintf_r+0x1f0>
 8011c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c58:	445a      	add	r2, fp
 8011c5a:	9209      	str	r2, [sp, #36]	; 0x24
 8011c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	f000 80a1 	beq.w	8011da8 <_vfiprintf_r+0x1f0>
 8011c66:	2300      	movs	r3, #0
 8011c68:	f04f 32ff 	mov.w	r2, #4294967295
 8011c6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c70:	f10a 0a01 	add.w	sl, sl, #1
 8011c74:	9304      	str	r3, [sp, #16]
 8011c76:	9307      	str	r3, [sp, #28]
 8011c78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c7c:	931a      	str	r3, [sp, #104]	; 0x68
 8011c7e:	4654      	mov	r4, sl
 8011c80:	2205      	movs	r2, #5
 8011c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c86:	4854      	ldr	r0, [pc, #336]	; (8011dd8 <_vfiprintf_r+0x220>)
 8011c88:	f7ee faa2 	bl	80001d0 <memchr>
 8011c8c:	9a04      	ldr	r2, [sp, #16]
 8011c8e:	b9d8      	cbnz	r0, 8011cc8 <_vfiprintf_r+0x110>
 8011c90:	06d1      	lsls	r1, r2, #27
 8011c92:	bf44      	itt	mi
 8011c94:	2320      	movmi	r3, #32
 8011c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c9a:	0713      	lsls	r3, r2, #28
 8011c9c:	bf44      	itt	mi
 8011c9e:	232b      	movmi	r3, #43	; 0x2b
 8011ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8011caa:	d015      	beq.n	8011cd8 <_vfiprintf_r+0x120>
 8011cac:	9a07      	ldr	r2, [sp, #28]
 8011cae:	4654      	mov	r4, sl
 8011cb0:	2000      	movs	r0, #0
 8011cb2:	f04f 0c0a 	mov.w	ip, #10
 8011cb6:	4621      	mov	r1, r4
 8011cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cbc:	3b30      	subs	r3, #48	; 0x30
 8011cbe:	2b09      	cmp	r3, #9
 8011cc0:	d94d      	bls.n	8011d5e <_vfiprintf_r+0x1a6>
 8011cc2:	b1b0      	cbz	r0, 8011cf2 <_vfiprintf_r+0x13a>
 8011cc4:	9207      	str	r2, [sp, #28]
 8011cc6:	e014      	b.n	8011cf2 <_vfiprintf_r+0x13a>
 8011cc8:	eba0 0308 	sub.w	r3, r0, r8
 8011ccc:	fa09 f303 	lsl.w	r3, r9, r3
 8011cd0:	4313      	orrs	r3, r2
 8011cd2:	9304      	str	r3, [sp, #16]
 8011cd4:	46a2      	mov	sl, r4
 8011cd6:	e7d2      	b.n	8011c7e <_vfiprintf_r+0xc6>
 8011cd8:	9b03      	ldr	r3, [sp, #12]
 8011cda:	1d19      	adds	r1, r3, #4
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	9103      	str	r1, [sp, #12]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	bfbb      	ittet	lt
 8011ce4:	425b      	neglt	r3, r3
 8011ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8011cea:	9307      	strge	r3, [sp, #28]
 8011cec:	9307      	strlt	r3, [sp, #28]
 8011cee:	bfb8      	it	lt
 8011cf0:	9204      	strlt	r2, [sp, #16]
 8011cf2:	7823      	ldrb	r3, [r4, #0]
 8011cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8011cf6:	d10c      	bne.n	8011d12 <_vfiprintf_r+0x15a>
 8011cf8:	7863      	ldrb	r3, [r4, #1]
 8011cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8011cfc:	d134      	bne.n	8011d68 <_vfiprintf_r+0x1b0>
 8011cfe:	9b03      	ldr	r3, [sp, #12]
 8011d00:	1d1a      	adds	r2, r3, #4
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	9203      	str	r2, [sp, #12]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	bfb8      	it	lt
 8011d0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d0e:	3402      	adds	r4, #2
 8011d10:	9305      	str	r3, [sp, #20]
 8011d12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011de8 <_vfiprintf_r+0x230>
 8011d16:	7821      	ldrb	r1, [r4, #0]
 8011d18:	2203      	movs	r2, #3
 8011d1a:	4650      	mov	r0, sl
 8011d1c:	f7ee fa58 	bl	80001d0 <memchr>
 8011d20:	b138      	cbz	r0, 8011d32 <_vfiprintf_r+0x17a>
 8011d22:	9b04      	ldr	r3, [sp, #16]
 8011d24:	eba0 000a 	sub.w	r0, r0, sl
 8011d28:	2240      	movs	r2, #64	; 0x40
 8011d2a:	4082      	lsls	r2, r0
 8011d2c:	4313      	orrs	r3, r2
 8011d2e:	3401      	adds	r4, #1
 8011d30:	9304      	str	r3, [sp, #16]
 8011d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d36:	4829      	ldr	r0, [pc, #164]	; (8011ddc <_vfiprintf_r+0x224>)
 8011d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d3c:	2206      	movs	r2, #6
 8011d3e:	f7ee fa47 	bl	80001d0 <memchr>
 8011d42:	2800      	cmp	r0, #0
 8011d44:	d03f      	beq.n	8011dc6 <_vfiprintf_r+0x20e>
 8011d46:	4b26      	ldr	r3, [pc, #152]	; (8011de0 <_vfiprintf_r+0x228>)
 8011d48:	bb1b      	cbnz	r3, 8011d92 <_vfiprintf_r+0x1da>
 8011d4a:	9b03      	ldr	r3, [sp, #12]
 8011d4c:	3307      	adds	r3, #7
 8011d4e:	f023 0307 	bic.w	r3, r3, #7
 8011d52:	3308      	adds	r3, #8
 8011d54:	9303      	str	r3, [sp, #12]
 8011d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d58:	443b      	add	r3, r7
 8011d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8011d5c:	e768      	b.n	8011c30 <_vfiprintf_r+0x78>
 8011d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d62:	460c      	mov	r4, r1
 8011d64:	2001      	movs	r0, #1
 8011d66:	e7a6      	b.n	8011cb6 <_vfiprintf_r+0xfe>
 8011d68:	2300      	movs	r3, #0
 8011d6a:	3401      	adds	r4, #1
 8011d6c:	9305      	str	r3, [sp, #20]
 8011d6e:	4619      	mov	r1, r3
 8011d70:	f04f 0c0a 	mov.w	ip, #10
 8011d74:	4620      	mov	r0, r4
 8011d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d7a:	3a30      	subs	r2, #48	; 0x30
 8011d7c:	2a09      	cmp	r2, #9
 8011d7e:	d903      	bls.n	8011d88 <_vfiprintf_r+0x1d0>
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d0c6      	beq.n	8011d12 <_vfiprintf_r+0x15a>
 8011d84:	9105      	str	r1, [sp, #20]
 8011d86:	e7c4      	b.n	8011d12 <_vfiprintf_r+0x15a>
 8011d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d8c:	4604      	mov	r4, r0
 8011d8e:	2301      	movs	r3, #1
 8011d90:	e7f0      	b.n	8011d74 <_vfiprintf_r+0x1bc>
 8011d92:	ab03      	add	r3, sp, #12
 8011d94:	9300      	str	r3, [sp, #0]
 8011d96:	462a      	mov	r2, r5
 8011d98:	4b12      	ldr	r3, [pc, #72]	; (8011de4 <_vfiprintf_r+0x22c>)
 8011d9a:	a904      	add	r1, sp, #16
 8011d9c:	4630      	mov	r0, r6
 8011d9e:	f7fb f9a5 	bl	800d0ec <_printf_float>
 8011da2:	4607      	mov	r7, r0
 8011da4:	1c78      	adds	r0, r7, #1
 8011da6:	d1d6      	bne.n	8011d56 <_vfiprintf_r+0x19e>
 8011da8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011daa:	07d9      	lsls	r1, r3, #31
 8011dac:	d405      	bmi.n	8011dba <_vfiprintf_r+0x202>
 8011dae:	89ab      	ldrh	r3, [r5, #12]
 8011db0:	059a      	lsls	r2, r3, #22
 8011db2:	d402      	bmi.n	8011dba <_vfiprintf_r+0x202>
 8011db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011db6:	f7fc f9ad 	bl	800e114 <__retarget_lock_release_recursive>
 8011dba:	89ab      	ldrh	r3, [r5, #12]
 8011dbc:	065b      	lsls	r3, r3, #25
 8011dbe:	f53f af1d 	bmi.w	8011bfc <_vfiprintf_r+0x44>
 8011dc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011dc4:	e71c      	b.n	8011c00 <_vfiprintf_r+0x48>
 8011dc6:	ab03      	add	r3, sp, #12
 8011dc8:	9300      	str	r3, [sp, #0]
 8011dca:	462a      	mov	r2, r5
 8011dcc:	4b05      	ldr	r3, [pc, #20]	; (8011de4 <_vfiprintf_r+0x22c>)
 8011dce:	a904      	add	r1, sp, #16
 8011dd0:	4630      	mov	r0, r6
 8011dd2:	f7fb fc2f 	bl	800d634 <_printf_i>
 8011dd6:	e7e4      	b.n	8011da2 <_vfiprintf_r+0x1ea>
 8011dd8:	08013cc9 	.word	0x08013cc9
 8011ddc:	08013cd3 	.word	0x08013cd3
 8011de0:	0800d0ed 	.word	0x0800d0ed
 8011de4:	08011b95 	.word	0x08011b95
 8011de8:	08013ccf 	.word	0x08013ccf

08011dec <__swbuf_r>:
 8011dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dee:	460e      	mov	r6, r1
 8011df0:	4614      	mov	r4, r2
 8011df2:	4605      	mov	r5, r0
 8011df4:	b118      	cbz	r0, 8011dfe <__swbuf_r+0x12>
 8011df6:	6a03      	ldr	r3, [r0, #32]
 8011df8:	b90b      	cbnz	r3, 8011dfe <__swbuf_r+0x12>
 8011dfa:	f7fb ffd9 	bl	800ddb0 <__sinit>
 8011dfe:	69a3      	ldr	r3, [r4, #24]
 8011e00:	60a3      	str	r3, [r4, #8]
 8011e02:	89a3      	ldrh	r3, [r4, #12]
 8011e04:	071a      	lsls	r2, r3, #28
 8011e06:	d525      	bpl.n	8011e54 <__swbuf_r+0x68>
 8011e08:	6923      	ldr	r3, [r4, #16]
 8011e0a:	b31b      	cbz	r3, 8011e54 <__swbuf_r+0x68>
 8011e0c:	6823      	ldr	r3, [r4, #0]
 8011e0e:	6922      	ldr	r2, [r4, #16]
 8011e10:	1a98      	subs	r0, r3, r2
 8011e12:	6963      	ldr	r3, [r4, #20]
 8011e14:	b2f6      	uxtb	r6, r6
 8011e16:	4283      	cmp	r3, r0
 8011e18:	4637      	mov	r7, r6
 8011e1a:	dc04      	bgt.n	8011e26 <__swbuf_r+0x3a>
 8011e1c:	4621      	mov	r1, r4
 8011e1e:	4628      	mov	r0, r5
 8011e20:	f7ff f952 	bl	80110c8 <_fflush_r>
 8011e24:	b9e0      	cbnz	r0, 8011e60 <__swbuf_r+0x74>
 8011e26:	68a3      	ldr	r3, [r4, #8]
 8011e28:	3b01      	subs	r3, #1
 8011e2a:	60a3      	str	r3, [r4, #8]
 8011e2c:	6823      	ldr	r3, [r4, #0]
 8011e2e:	1c5a      	adds	r2, r3, #1
 8011e30:	6022      	str	r2, [r4, #0]
 8011e32:	701e      	strb	r6, [r3, #0]
 8011e34:	6962      	ldr	r2, [r4, #20]
 8011e36:	1c43      	adds	r3, r0, #1
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d004      	beq.n	8011e46 <__swbuf_r+0x5a>
 8011e3c:	89a3      	ldrh	r3, [r4, #12]
 8011e3e:	07db      	lsls	r3, r3, #31
 8011e40:	d506      	bpl.n	8011e50 <__swbuf_r+0x64>
 8011e42:	2e0a      	cmp	r6, #10
 8011e44:	d104      	bne.n	8011e50 <__swbuf_r+0x64>
 8011e46:	4621      	mov	r1, r4
 8011e48:	4628      	mov	r0, r5
 8011e4a:	f7ff f93d 	bl	80110c8 <_fflush_r>
 8011e4e:	b938      	cbnz	r0, 8011e60 <__swbuf_r+0x74>
 8011e50:	4638      	mov	r0, r7
 8011e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e54:	4621      	mov	r1, r4
 8011e56:	4628      	mov	r0, r5
 8011e58:	f000 f806 	bl	8011e68 <__swsetup_r>
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	d0d5      	beq.n	8011e0c <__swbuf_r+0x20>
 8011e60:	f04f 37ff 	mov.w	r7, #4294967295
 8011e64:	e7f4      	b.n	8011e50 <__swbuf_r+0x64>
	...

08011e68 <__swsetup_r>:
 8011e68:	b538      	push	{r3, r4, r5, lr}
 8011e6a:	4b2a      	ldr	r3, [pc, #168]	; (8011f14 <__swsetup_r+0xac>)
 8011e6c:	4605      	mov	r5, r0
 8011e6e:	6818      	ldr	r0, [r3, #0]
 8011e70:	460c      	mov	r4, r1
 8011e72:	b118      	cbz	r0, 8011e7c <__swsetup_r+0x14>
 8011e74:	6a03      	ldr	r3, [r0, #32]
 8011e76:	b90b      	cbnz	r3, 8011e7c <__swsetup_r+0x14>
 8011e78:	f7fb ff9a 	bl	800ddb0 <__sinit>
 8011e7c:	89a3      	ldrh	r3, [r4, #12]
 8011e7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011e82:	0718      	lsls	r0, r3, #28
 8011e84:	d422      	bmi.n	8011ecc <__swsetup_r+0x64>
 8011e86:	06d9      	lsls	r1, r3, #27
 8011e88:	d407      	bmi.n	8011e9a <__swsetup_r+0x32>
 8011e8a:	2309      	movs	r3, #9
 8011e8c:	602b      	str	r3, [r5, #0]
 8011e8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011e92:	81a3      	strh	r3, [r4, #12]
 8011e94:	f04f 30ff 	mov.w	r0, #4294967295
 8011e98:	e034      	b.n	8011f04 <__swsetup_r+0x9c>
 8011e9a:	0758      	lsls	r0, r3, #29
 8011e9c:	d512      	bpl.n	8011ec4 <__swsetup_r+0x5c>
 8011e9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ea0:	b141      	cbz	r1, 8011eb4 <__swsetup_r+0x4c>
 8011ea2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ea6:	4299      	cmp	r1, r3
 8011ea8:	d002      	beq.n	8011eb0 <__swsetup_r+0x48>
 8011eaa:	4628      	mov	r0, r5
 8011eac:	f7fc ffca 	bl	800ee44 <_free_r>
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	6363      	str	r3, [r4, #52]	; 0x34
 8011eb4:	89a3      	ldrh	r3, [r4, #12]
 8011eb6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011eba:	81a3      	strh	r3, [r4, #12]
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	6063      	str	r3, [r4, #4]
 8011ec0:	6923      	ldr	r3, [r4, #16]
 8011ec2:	6023      	str	r3, [r4, #0]
 8011ec4:	89a3      	ldrh	r3, [r4, #12]
 8011ec6:	f043 0308 	orr.w	r3, r3, #8
 8011eca:	81a3      	strh	r3, [r4, #12]
 8011ecc:	6923      	ldr	r3, [r4, #16]
 8011ece:	b94b      	cbnz	r3, 8011ee4 <__swsetup_r+0x7c>
 8011ed0:	89a3      	ldrh	r3, [r4, #12]
 8011ed2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011eda:	d003      	beq.n	8011ee4 <__swsetup_r+0x7c>
 8011edc:	4621      	mov	r1, r4
 8011ede:	4628      	mov	r0, r5
 8011ee0:	f000 f884 	bl	8011fec <__smakebuf_r>
 8011ee4:	89a0      	ldrh	r0, [r4, #12]
 8011ee6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011eea:	f010 0301 	ands.w	r3, r0, #1
 8011eee:	d00a      	beq.n	8011f06 <__swsetup_r+0x9e>
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	60a3      	str	r3, [r4, #8]
 8011ef4:	6963      	ldr	r3, [r4, #20]
 8011ef6:	425b      	negs	r3, r3
 8011ef8:	61a3      	str	r3, [r4, #24]
 8011efa:	6923      	ldr	r3, [r4, #16]
 8011efc:	b943      	cbnz	r3, 8011f10 <__swsetup_r+0xa8>
 8011efe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011f02:	d1c4      	bne.n	8011e8e <__swsetup_r+0x26>
 8011f04:	bd38      	pop	{r3, r4, r5, pc}
 8011f06:	0781      	lsls	r1, r0, #30
 8011f08:	bf58      	it	pl
 8011f0a:	6963      	ldrpl	r3, [r4, #20]
 8011f0c:	60a3      	str	r3, [r4, #8]
 8011f0e:	e7f4      	b.n	8011efa <__swsetup_r+0x92>
 8011f10:	2000      	movs	r0, #0
 8011f12:	e7f7      	b.n	8011f04 <__swsetup_r+0x9c>
 8011f14:	20000130 	.word	0x20000130

08011f18 <_raise_r>:
 8011f18:	291f      	cmp	r1, #31
 8011f1a:	b538      	push	{r3, r4, r5, lr}
 8011f1c:	4604      	mov	r4, r0
 8011f1e:	460d      	mov	r5, r1
 8011f20:	d904      	bls.n	8011f2c <_raise_r+0x14>
 8011f22:	2316      	movs	r3, #22
 8011f24:	6003      	str	r3, [r0, #0]
 8011f26:	f04f 30ff 	mov.w	r0, #4294967295
 8011f2a:	bd38      	pop	{r3, r4, r5, pc}
 8011f2c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011f2e:	b112      	cbz	r2, 8011f36 <_raise_r+0x1e>
 8011f30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f34:	b94b      	cbnz	r3, 8011f4a <_raise_r+0x32>
 8011f36:	4620      	mov	r0, r4
 8011f38:	f000 f830 	bl	8011f9c <_getpid_r>
 8011f3c:	462a      	mov	r2, r5
 8011f3e:	4601      	mov	r1, r0
 8011f40:	4620      	mov	r0, r4
 8011f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f46:	f000 b817 	b.w	8011f78 <_kill_r>
 8011f4a:	2b01      	cmp	r3, #1
 8011f4c:	d00a      	beq.n	8011f64 <_raise_r+0x4c>
 8011f4e:	1c59      	adds	r1, r3, #1
 8011f50:	d103      	bne.n	8011f5a <_raise_r+0x42>
 8011f52:	2316      	movs	r3, #22
 8011f54:	6003      	str	r3, [r0, #0]
 8011f56:	2001      	movs	r0, #1
 8011f58:	e7e7      	b.n	8011f2a <_raise_r+0x12>
 8011f5a:	2400      	movs	r4, #0
 8011f5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f60:	4628      	mov	r0, r5
 8011f62:	4798      	blx	r3
 8011f64:	2000      	movs	r0, #0
 8011f66:	e7e0      	b.n	8011f2a <_raise_r+0x12>

08011f68 <raise>:
 8011f68:	4b02      	ldr	r3, [pc, #8]	; (8011f74 <raise+0xc>)
 8011f6a:	4601      	mov	r1, r0
 8011f6c:	6818      	ldr	r0, [r3, #0]
 8011f6e:	f7ff bfd3 	b.w	8011f18 <_raise_r>
 8011f72:	bf00      	nop
 8011f74:	20000130 	.word	0x20000130

08011f78 <_kill_r>:
 8011f78:	b538      	push	{r3, r4, r5, lr}
 8011f7a:	4d07      	ldr	r5, [pc, #28]	; (8011f98 <_kill_r+0x20>)
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	4604      	mov	r4, r0
 8011f80:	4608      	mov	r0, r1
 8011f82:	4611      	mov	r1, r2
 8011f84:	602b      	str	r3, [r5, #0]
 8011f86:	f7f1 faeb 	bl	8003560 <_kill>
 8011f8a:	1c43      	adds	r3, r0, #1
 8011f8c:	d102      	bne.n	8011f94 <_kill_r+0x1c>
 8011f8e:	682b      	ldr	r3, [r5, #0]
 8011f90:	b103      	cbz	r3, 8011f94 <_kill_r+0x1c>
 8011f92:	6023      	str	r3, [r4, #0]
 8011f94:	bd38      	pop	{r3, r4, r5, pc}
 8011f96:	bf00      	nop
 8011f98:	20008c0c 	.word	0x20008c0c

08011f9c <_getpid_r>:
 8011f9c:	f7f1 bad8 	b.w	8003550 <_getpid>

08011fa0 <__swhatbuf_r>:
 8011fa0:	b570      	push	{r4, r5, r6, lr}
 8011fa2:	460c      	mov	r4, r1
 8011fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fa8:	2900      	cmp	r1, #0
 8011faa:	b096      	sub	sp, #88	; 0x58
 8011fac:	4615      	mov	r5, r2
 8011fae:	461e      	mov	r6, r3
 8011fb0:	da0d      	bge.n	8011fce <__swhatbuf_r+0x2e>
 8011fb2:	89a3      	ldrh	r3, [r4, #12]
 8011fb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011fb8:	f04f 0100 	mov.w	r1, #0
 8011fbc:	bf0c      	ite	eq
 8011fbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011fc2:	2340      	movne	r3, #64	; 0x40
 8011fc4:	2000      	movs	r0, #0
 8011fc6:	6031      	str	r1, [r6, #0]
 8011fc8:	602b      	str	r3, [r5, #0]
 8011fca:	b016      	add	sp, #88	; 0x58
 8011fcc:	bd70      	pop	{r4, r5, r6, pc}
 8011fce:	466a      	mov	r2, sp
 8011fd0:	f000 f848 	bl	8012064 <_fstat_r>
 8011fd4:	2800      	cmp	r0, #0
 8011fd6:	dbec      	blt.n	8011fb2 <__swhatbuf_r+0x12>
 8011fd8:	9901      	ldr	r1, [sp, #4]
 8011fda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011fde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011fe2:	4259      	negs	r1, r3
 8011fe4:	4159      	adcs	r1, r3
 8011fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fea:	e7eb      	b.n	8011fc4 <__swhatbuf_r+0x24>

08011fec <__smakebuf_r>:
 8011fec:	898b      	ldrh	r3, [r1, #12]
 8011fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ff0:	079d      	lsls	r5, r3, #30
 8011ff2:	4606      	mov	r6, r0
 8011ff4:	460c      	mov	r4, r1
 8011ff6:	d507      	bpl.n	8012008 <__smakebuf_r+0x1c>
 8011ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011ffc:	6023      	str	r3, [r4, #0]
 8011ffe:	6123      	str	r3, [r4, #16]
 8012000:	2301      	movs	r3, #1
 8012002:	6163      	str	r3, [r4, #20]
 8012004:	b002      	add	sp, #8
 8012006:	bd70      	pop	{r4, r5, r6, pc}
 8012008:	ab01      	add	r3, sp, #4
 801200a:	466a      	mov	r2, sp
 801200c:	f7ff ffc8 	bl	8011fa0 <__swhatbuf_r>
 8012010:	9900      	ldr	r1, [sp, #0]
 8012012:	4605      	mov	r5, r0
 8012014:	4630      	mov	r0, r6
 8012016:	f7fc ff89 	bl	800ef2c <_malloc_r>
 801201a:	b948      	cbnz	r0, 8012030 <__smakebuf_r+0x44>
 801201c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012020:	059a      	lsls	r2, r3, #22
 8012022:	d4ef      	bmi.n	8012004 <__smakebuf_r+0x18>
 8012024:	f023 0303 	bic.w	r3, r3, #3
 8012028:	f043 0302 	orr.w	r3, r3, #2
 801202c:	81a3      	strh	r3, [r4, #12]
 801202e:	e7e3      	b.n	8011ff8 <__smakebuf_r+0xc>
 8012030:	89a3      	ldrh	r3, [r4, #12]
 8012032:	6020      	str	r0, [r4, #0]
 8012034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012038:	81a3      	strh	r3, [r4, #12]
 801203a:	9b00      	ldr	r3, [sp, #0]
 801203c:	6163      	str	r3, [r4, #20]
 801203e:	9b01      	ldr	r3, [sp, #4]
 8012040:	6120      	str	r0, [r4, #16]
 8012042:	b15b      	cbz	r3, 801205c <__smakebuf_r+0x70>
 8012044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012048:	4630      	mov	r0, r6
 801204a:	f000 f81d 	bl	8012088 <_isatty_r>
 801204e:	b128      	cbz	r0, 801205c <__smakebuf_r+0x70>
 8012050:	89a3      	ldrh	r3, [r4, #12]
 8012052:	f023 0303 	bic.w	r3, r3, #3
 8012056:	f043 0301 	orr.w	r3, r3, #1
 801205a:	81a3      	strh	r3, [r4, #12]
 801205c:	89a3      	ldrh	r3, [r4, #12]
 801205e:	431d      	orrs	r5, r3
 8012060:	81a5      	strh	r5, [r4, #12]
 8012062:	e7cf      	b.n	8012004 <__smakebuf_r+0x18>

08012064 <_fstat_r>:
 8012064:	b538      	push	{r3, r4, r5, lr}
 8012066:	4d07      	ldr	r5, [pc, #28]	; (8012084 <_fstat_r+0x20>)
 8012068:	2300      	movs	r3, #0
 801206a:	4604      	mov	r4, r0
 801206c:	4608      	mov	r0, r1
 801206e:	4611      	mov	r1, r2
 8012070:	602b      	str	r3, [r5, #0]
 8012072:	f7f1 fad4 	bl	800361e <_fstat>
 8012076:	1c43      	adds	r3, r0, #1
 8012078:	d102      	bne.n	8012080 <_fstat_r+0x1c>
 801207a:	682b      	ldr	r3, [r5, #0]
 801207c:	b103      	cbz	r3, 8012080 <_fstat_r+0x1c>
 801207e:	6023      	str	r3, [r4, #0]
 8012080:	bd38      	pop	{r3, r4, r5, pc}
 8012082:	bf00      	nop
 8012084:	20008c0c 	.word	0x20008c0c

08012088 <_isatty_r>:
 8012088:	b538      	push	{r3, r4, r5, lr}
 801208a:	4d06      	ldr	r5, [pc, #24]	; (80120a4 <_isatty_r+0x1c>)
 801208c:	2300      	movs	r3, #0
 801208e:	4604      	mov	r4, r0
 8012090:	4608      	mov	r0, r1
 8012092:	602b      	str	r3, [r5, #0]
 8012094:	f7f1 fad3 	bl	800363e <_isatty>
 8012098:	1c43      	adds	r3, r0, #1
 801209a:	d102      	bne.n	80120a2 <_isatty_r+0x1a>
 801209c:	682b      	ldr	r3, [r5, #0]
 801209e:	b103      	cbz	r3, 80120a2 <_isatty_r+0x1a>
 80120a0:	6023      	str	r3, [r4, #0]
 80120a2:	bd38      	pop	{r3, r4, r5, pc}
 80120a4:	20008c0c 	.word	0x20008c0c

080120a8 <atan2>:
 80120a8:	f000 bb6e 	b.w	8012788 <__ieee754_atan2>
 80120ac:	0000      	movs	r0, r0
	...

080120b0 <log>:
 80120b0:	b538      	push	{r3, r4, r5, lr}
 80120b2:	ed2d 8b02 	vpush	{d8}
 80120b6:	ec55 4b10 	vmov	r4, r5, d0
 80120ba:	f000 fc2d 	bl	8012918 <__ieee754_log>
 80120be:	4622      	mov	r2, r4
 80120c0:	462b      	mov	r3, r5
 80120c2:	4620      	mov	r0, r4
 80120c4:	4629      	mov	r1, r5
 80120c6:	eeb0 8a40 	vmov.f32	s16, s0
 80120ca:	eef0 8a60 	vmov.f32	s17, s1
 80120ce:	f7ee fd2d 	bl	8000b2c <__aeabi_dcmpun>
 80120d2:	b998      	cbnz	r0, 80120fc <log+0x4c>
 80120d4:	2200      	movs	r2, #0
 80120d6:	2300      	movs	r3, #0
 80120d8:	4620      	mov	r0, r4
 80120da:	4629      	mov	r1, r5
 80120dc:	f7ee fd1c 	bl	8000b18 <__aeabi_dcmpgt>
 80120e0:	b960      	cbnz	r0, 80120fc <log+0x4c>
 80120e2:	2200      	movs	r2, #0
 80120e4:	2300      	movs	r3, #0
 80120e6:	4620      	mov	r0, r4
 80120e8:	4629      	mov	r1, r5
 80120ea:	f7ee fced 	bl	8000ac8 <__aeabi_dcmpeq>
 80120ee:	b160      	cbz	r0, 801210a <log+0x5a>
 80120f0:	f7fb ffe4 	bl	800e0bc <__errno>
 80120f4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8012120 <log+0x70>
 80120f8:	2322      	movs	r3, #34	; 0x22
 80120fa:	6003      	str	r3, [r0, #0]
 80120fc:	eeb0 0a48 	vmov.f32	s0, s16
 8012100:	eef0 0a68 	vmov.f32	s1, s17
 8012104:	ecbd 8b02 	vpop	{d8}
 8012108:	bd38      	pop	{r3, r4, r5, pc}
 801210a:	f7fb ffd7 	bl	800e0bc <__errno>
 801210e:	ecbd 8b02 	vpop	{d8}
 8012112:	2321      	movs	r3, #33	; 0x21
 8012114:	6003      	str	r3, [r0, #0]
 8012116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801211a:	4803      	ldr	r0, [pc, #12]	; (8012128 <log+0x78>)
 801211c:	f7ff b8ac 	b.w	8011278 <nan>
 8012120:	00000000 	.word	0x00000000
 8012124:	fff00000 	.word	0xfff00000
 8012128:	08013d38 	.word	0x08013d38

0801212c <pow>:
 801212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801212e:	ed2d 8b02 	vpush	{d8}
 8012132:	eeb0 8a40 	vmov.f32	s16, s0
 8012136:	eef0 8a60 	vmov.f32	s17, s1
 801213a:	ec55 4b11 	vmov	r4, r5, d1
 801213e:	f000 fda7 	bl	8012c90 <__ieee754_pow>
 8012142:	4622      	mov	r2, r4
 8012144:	462b      	mov	r3, r5
 8012146:	4620      	mov	r0, r4
 8012148:	4629      	mov	r1, r5
 801214a:	ec57 6b10 	vmov	r6, r7, d0
 801214e:	f7ee fced 	bl	8000b2c <__aeabi_dcmpun>
 8012152:	2800      	cmp	r0, #0
 8012154:	d13b      	bne.n	80121ce <pow+0xa2>
 8012156:	ec51 0b18 	vmov	r0, r1, d8
 801215a:	2200      	movs	r2, #0
 801215c:	2300      	movs	r3, #0
 801215e:	f7ee fcb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8012162:	b1b8      	cbz	r0, 8012194 <pow+0x68>
 8012164:	2200      	movs	r2, #0
 8012166:	2300      	movs	r3, #0
 8012168:	4620      	mov	r0, r4
 801216a:	4629      	mov	r1, r5
 801216c:	f7ee fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 8012170:	2800      	cmp	r0, #0
 8012172:	d146      	bne.n	8012202 <pow+0xd6>
 8012174:	ec45 4b10 	vmov	d0, r4, r5
 8012178:	f000 fa1f 	bl	80125ba <finite>
 801217c:	b338      	cbz	r0, 80121ce <pow+0xa2>
 801217e:	2200      	movs	r2, #0
 8012180:	2300      	movs	r3, #0
 8012182:	4620      	mov	r0, r4
 8012184:	4629      	mov	r1, r5
 8012186:	f7ee fca9 	bl	8000adc <__aeabi_dcmplt>
 801218a:	b300      	cbz	r0, 80121ce <pow+0xa2>
 801218c:	f7fb ff96 	bl	800e0bc <__errno>
 8012190:	2322      	movs	r3, #34	; 0x22
 8012192:	e01b      	b.n	80121cc <pow+0xa0>
 8012194:	ec47 6b10 	vmov	d0, r6, r7
 8012198:	f000 fa0f 	bl	80125ba <finite>
 801219c:	b9e0      	cbnz	r0, 80121d8 <pow+0xac>
 801219e:	eeb0 0a48 	vmov.f32	s0, s16
 80121a2:	eef0 0a68 	vmov.f32	s1, s17
 80121a6:	f000 fa08 	bl	80125ba <finite>
 80121aa:	b1a8      	cbz	r0, 80121d8 <pow+0xac>
 80121ac:	ec45 4b10 	vmov	d0, r4, r5
 80121b0:	f000 fa03 	bl	80125ba <finite>
 80121b4:	b180      	cbz	r0, 80121d8 <pow+0xac>
 80121b6:	4632      	mov	r2, r6
 80121b8:	463b      	mov	r3, r7
 80121ba:	4630      	mov	r0, r6
 80121bc:	4639      	mov	r1, r7
 80121be:	f7ee fcb5 	bl	8000b2c <__aeabi_dcmpun>
 80121c2:	2800      	cmp	r0, #0
 80121c4:	d0e2      	beq.n	801218c <pow+0x60>
 80121c6:	f7fb ff79 	bl	800e0bc <__errno>
 80121ca:	2321      	movs	r3, #33	; 0x21
 80121cc:	6003      	str	r3, [r0, #0]
 80121ce:	ecbd 8b02 	vpop	{d8}
 80121d2:	ec47 6b10 	vmov	d0, r6, r7
 80121d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121d8:	2200      	movs	r2, #0
 80121da:	2300      	movs	r3, #0
 80121dc:	4630      	mov	r0, r6
 80121de:	4639      	mov	r1, r7
 80121e0:	f7ee fc72 	bl	8000ac8 <__aeabi_dcmpeq>
 80121e4:	2800      	cmp	r0, #0
 80121e6:	d0f2      	beq.n	80121ce <pow+0xa2>
 80121e8:	eeb0 0a48 	vmov.f32	s0, s16
 80121ec:	eef0 0a68 	vmov.f32	s1, s17
 80121f0:	f000 f9e3 	bl	80125ba <finite>
 80121f4:	2800      	cmp	r0, #0
 80121f6:	d0ea      	beq.n	80121ce <pow+0xa2>
 80121f8:	ec45 4b10 	vmov	d0, r4, r5
 80121fc:	f000 f9dd 	bl	80125ba <finite>
 8012200:	e7c3      	b.n	801218a <pow+0x5e>
 8012202:	4f01      	ldr	r7, [pc, #4]	; (8012208 <pow+0xdc>)
 8012204:	2600      	movs	r6, #0
 8012206:	e7e2      	b.n	80121ce <pow+0xa2>
 8012208:	3ff00000 	.word	0x3ff00000

0801220c <sqrt>:
 801220c:	b538      	push	{r3, r4, r5, lr}
 801220e:	ed2d 8b02 	vpush	{d8}
 8012212:	ec55 4b10 	vmov	r4, r5, d0
 8012216:	f000 f9db 	bl	80125d0 <__ieee754_sqrt>
 801221a:	4622      	mov	r2, r4
 801221c:	462b      	mov	r3, r5
 801221e:	4620      	mov	r0, r4
 8012220:	4629      	mov	r1, r5
 8012222:	eeb0 8a40 	vmov.f32	s16, s0
 8012226:	eef0 8a60 	vmov.f32	s17, s1
 801222a:	f7ee fc7f 	bl	8000b2c <__aeabi_dcmpun>
 801222e:	b990      	cbnz	r0, 8012256 <sqrt+0x4a>
 8012230:	2200      	movs	r2, #0
 8012232:	2300      	movs	r3, #0
 8012234:	4620      	mov	r0, r4
 8012236:	4629      	mov	r1, r5
 8012238:	f7ee fc50 	bl	8000adc <__aeabi_dcmplt>
 801223c:	b158      	cbz	r0, 8012256 <sqrt+0x4a>
 801223e:	f7fb ff3d 	bl	800e0bc <__errno>
 8012242:	2321      	movs	r3, #33	; 0x21
 8012244:	6003      	str	r3, [r0, #0]
 8012246:	2200      	movs	r2, #0
 8012248:	2300      	movs	r3, #0
 801224a:	4610      	mov	r0, r2
 801224c:	4619      	mov	r1, r3
 801224e:	f7ee fafd 	bl	800084c <__aeabi_ddiv>
 8012252:	ec41 0b18 	vmov	d8, r0, r1
 8012256:	eeb0 0a48 	vmov.f32	s0, s16
 801225a:	eef0 0a68 	vmov.f32	s1, s17
 801225e:	ecbd 8b02 	vpop	{d8}
 8012262:	bd38      	pop	{r3, r4, r5, pc}
 8012264:	0000      	movs	r0, r0
	...

08012268 <atan>:
 8012268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801226c:	ec55 4b10 	vmov	r4, r5, d0
 8012270:	4bc3      	ldr	r3, [pc, #780]	; (8012580 <atan+0x318>)
 8012272:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012276:	429e      	cmp	r6, r3
 8012278:	46ab      	mov	fp, r5
 801227a:	dd18      	ble.n	80122ae <atan+0x46>
 801227c:	4bc1      	ldr	r3, [pc, #772]	; (8012584 <atan+0x31c>)
 801227e:	429e      	cmp	r6, r3
 8012280:	dc01      	bgt.n	8012286 <atan+0x1e>
 8012282:	d109      	bne.n	8012298 <atan+0x30>
 8012284:	b144      	cbz	r4, 8012298 <atan+0x30>
 8012286:	4622      	mov	r2, r4
 8012288:	462b      	mov	r3, r5
 801228a:	4620      	mov	r0, r4
 801228c:	4629      	mov	r1, r5
 801228e:	f7ed fffd 	bl	800028c <__adddf3>
 8012292:	4604      	mov	r4, r0
 8012294:	460d      	mov	r5, r1
 8012296:	e006      	b.n	80122a6 <atan+0x3e>
 8012298:	f1bb 0f00 	cmp.w	fp, #0
 801229c:	f300 8131 	bgt.w	8012502 <atan+0x29a>
 80122a0:	a59b      	add	r5, pc, #620	; (adr r5, 8012510 <atan+0x2a8>)
 80122a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80122a6:	ec45 4b10 	vmov	d0, r4, r5
 80122aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ae:	4bb6      	ldr	r3, [pc, #728]	; (8012588 <atan+0x320>)
 80122b0:	429e      	cmp	r6, r3
 80122b2:	dc14      	bgt.n	80122de <atan+0x76>
 80122b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80122b8:	429e      	cmp	r6, r3
 80122ba:	dc0d      	bgt.n	80122d8 <atan+0x70>
 80122bc:	a396      	add	r3, pc, #600	; (adr r3, 8012518 <atan+0x2b0>)
 80122be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c2:	ee10 0a10 	vmov	r0, s0
 80122c6:	4629      	mov	r1, r5
 80122c8:	f7ed ffe0 	bl	800028c <__adddf3>
 80122cc:	4baf      	ldr	r3, [pc, #700]	; (801258c <atan+0x324>)
 80122ce:	2200      	movs	r2, #0
 80122d0:	f7ee fc22 	bl	8000b18 <__aeabi_dcmpgt>
 80122d4:	2800      	cmp	r0, #0
 80122d6:	d1e6      	bne.n	80122a6 <atan+0x3e>
 80122d8:	f04f 3aff 	mov.w	sl, #4294967295
 80122dc:	e02b      	b.n	8012336 <atan+0xce>
 80122de:	f000 f963 	bl	80125a8 <fabs>
 80122e2:	4bab      	ldr	r3, [pc, #684]	; (8012590 <atan+0x328>)
 80122e4:	429e      	cmp	r6, r3
 80122e6:	ec55 4b10 	vmov	r4, r5, d0
 80122ea:	f300 80bf 	bgt.w	801246c <atan+0x204>
 80122ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80122f2:	429e      	cmp	r6, r3
 80122f4:	f300 80a0 	bgt.w	8012438 <atan+0x1d0>
 80122f8:	ee10 2a10 	vmov	r2, s0
 80122fc:	ee10 0a10 	vmov	r0, s0
 8012300:	462b      	mov	r3, r5
 8012302:	4629      	mov	r1, r5
 8012304:	f7ed ffc2 	bl	800028c <__adddf3>
 8012308:	4ba0      	ldr	r3, [pc, #640]	; (801258c <atan+0x324>)
 801230a:	2200      	movs	r2, #0
 801230c:	f7ed ffbc 	bl	8000288 <__aeabi_dsub>
 8012310:	2200      	movs	r2, #0
 8012312:	4606      	mov	r6, r0
 8012314:	460f      	mov	r7, r1
 8012316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801231a:	4620      	mov	r0, r4
 801231c:	4629      	mov	r1, r5
 801231e:	f7ed ffb5 	bl	800028c <__adddf3>
 8012322:	4602      	mov	r2, r0
 8012324:	460b      	mov	r3, r1
 8012326:	4630      	mov	r0, r6
 8012328:	4639      	mov	r1, r7
 801232a:	f7ee fa8f 	bl	800084c <__aeabi_ddiv>
 801232e:	f04f 0a00 	mov.w	sl, #0
 8012332:	4604      	mov	r4, r0
 8012334:	460d      	mov	r5, r1
 8012336:	4622      	mov	r2, r4
 8012338:	462b      	mov	r3, r5
 801233a:	4620      	mov	r0, r4
 801233c:	4629      	mov	r1, r5
 801233e:	f7ee f95b 	bl	80005f8 <__aeabi_dmul>
 8012342:	4602      	mov	r2, r0
 8012344:	460b      	mov	r3, r1
 8012346:	4680      	mov	r8, r0
 8012348:	4689      	mov	r9, r1
 801234a:	f7ee f955 	bl	80005f8 <__aeabi_dmul>
 801234e:	a374      	add	r3, pc, #464	; (adr r3, 8012520 <atan+0x2b8>)
 8012350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012354:	4606      	mov	r6, r0
 8012356:	460f      	mov	r7, r1
 8012358:	f7ee f94e 	bl	80005f8 <__aeabi_dmul>
 801235c:	a372      	add	r3, pc, #456	; (adr r3, 8012528 <atan+0x2c0>)
 801235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012362:	f7ed ff93 	bl	800028c <__adddf3>
 8012366:	4632      	mov	r2, r6
 8012368:	463b      	mov	r3, r7
 801236a:	f7ee f945 	bl	80005f8 <__aeabi_dmul>
 801236e:	a370      	add	r3, pc, #448	; (adr r3, 8012530 <atan+0x2c8>)
 8012370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012374:	f7ed ff8a 	bl	800028c <__adddf3>
 8012378:	4632      	mov	r2, r6
 801237a:	463b      	mov	r3, r7
 801237c:	f7ee f93c 	bl	80005f8 <__aeabi_dmul>
 8012380:	a36d      	add	r3, pc, #436	; (adr r3, 8012538 <atan+0x2d0>)
 8012382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012386:	f7ed ff81 	bl	800028c <__adddf3>
 801238a:	4632      	mov	r2, r6
 801238c:	463b      	mov	r3, r7
 801238e:	f7ee f933 	bl	80005f8 <__aeabi_dmul>
 8012392:	a36b      	add	r3, pc, #428	; (adr r3, 8012540 <atan+0x2d8>)
 8012394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012398:	f7ed ff78 	bl	800028c <__adddf3>
 801239c:	4632      	mov	r2, r6
 801239e:	463b      	mov	r3, r7
 80123a0:	f7ee f92a 	bl	80005f8 <__aeabi_dmul>
 80123a4:	a368      	add	r3, pc, #416	; (adr r3, 8012548 <atan+0x2e0>)
 80123a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123aa:	f7ed ff6f 	bl	800028c <__adddf3>
 80123ae:	4642      	mov	r2, r8
 80123b0:	464b      	mov	r3, r9
 80123b2:	f7ee f921 	bl	80005f8 <__aeabi_dmul>
 80123b6:	a366      	add	r3, pc, #408	; (adr r3, 8012550 <atan+0x2e8>)
 80123b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123bc:	4680      	mov	r8, r0
 80123be:	4689      	mov	r9, r1
 80123c0:	4630      	mov	r0, r6
 80123c2:	4639      	mov	r1, r7
 80123c4:	f7ee f918 	bl	80005f8 <__aeabi_dmul>
 80123c8:	a363      	add	r3, pc, #396	; (adr r3, 8012558 <atan+0x2f0>)
 80123ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ce:	f7ed ff5b 	bl	8000288 <__aeabi_dsub>
 80123d2:	4632      	mov	r2, r6
 80123d4:	463b      	mov	r3, r7
 80123d6:	f7ee f90f 	bl	80005f8 <__aeabi_dmul>
 80123da:	a361      	add	r3, pc, #388	; (adr r3, 8012560 <atan+0x2f8>)
 80123dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e0:	f7ed ff52 	bl	8000288 <__aeabi_dsub>
 80123e4:	4632      	mov	r2, r6
 80123e6:	463b      	mov	r3, r7
 80123e8:	f7ee f906 	bl	80005f8 <__aeabi_dmul>
 80123ec:	a35e      	add	r3, pc, #376	; (adr r3, 8012568 <atan+0x300>)
 80123ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f2:	f7ed ff49 	bl	8000288 <__aeabi_dsub>
 80123f6:	4632      	mov	r2, r6
 80123f8:	463b      	mov	r3, r7
 80123fa:	f7ee f8fd 	bl	80005f8 <__aeabi_dmul>
 80123fe:	a35c      	add	r3, pc, #368	; (adr r3, 8012570 <atan+0x308>)
 8012400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012404:	f7ed ff40 	bl	8000288 <__aeabi_dsub>
 8012408:	4632      	mov	r2, r6
 801240a:	463b      	mov	r3, r7
 801240c:	f7ee f8f4 	bl	80005f8 <__aeabi_dmul>
 8012410:	4602      	mov	r2, r0
 8012412:	460b      	mov	r3, r1
 8012414:	4640      	mov	r0, r8
 8012416:	4649      	mov	r1, r9
 8012418:	f7ed ff38 	bl	800028c <__adddf3>
 801241c:	4622      	mov	r2, r4
 801241e:	462b      	mov	r3, r5
 8012420:	f7ee f8ea 	bl	80005f8 <__aeabi_dmul>
 8012424:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012428:	4602      	mov	r2, r0
 801242a:	460b      	mov	r3, r1
 801242c:	d14b      	bne.n	80124c6 <atan+0x25e>
 801242e:	4620      	mov	r0, r4
 8012430:	4629      	mov	r1, r5
 8012432:	f7ed ff29 	bl	8000288 <__aeabi_dsub>
 8012436:	e72c      	b.n	8012292 <atan+0x2a>
 8012438:	ee10 0a10 	vmov	r0, s0
 801243c:	4b53      	ldr	r3, [pc, #332]	; (801258c <atan+0x324>)
 801243e:	2200      	movs	r2, #0
 8012440:	4629      	mov	r1, r5
 8012442:	f7ed ff21 	bl	8000288 <__aeabi_dsub>
 8012446:	4b51      	ldr	r3, [pc, #324]	; (801258c <atan+0x324>)
 8012448:	4606      	mov	r6, r0
 801244a:	460f      	mov	r7, r1
 801244c:	2200      	movs	r2, #0
 801244e:	4620      	mov	r0, r4
 8012450:	4629      	mov	r1, r5
 8012452:	f7ed ff1b 	bl	800028c <__adddf3>
 8012456:	4602      	mov	r2, r0
 8012458:	460b      	mov	r3, r1
 801245a:	4630      	mov	r0, r6
 801245c:	4639      	mov	r1, r7
 801245e:	f7ee f9f5 	bl	800084c <__aeabi_ddiv>
 8012462:	f04f 0a01 	mov.w	sl, #1
 8012466:	4604      	mov	r4, r0
 8012468:	460d      	mov	r5, r1
 801246a:	e764      	b.n	8012336 <atan+0xce>
 801246c:	4b49      	ldr	r3, [pc, #292]	; (8012594 <atan+0x32c>)
 801246e:	429e      	cmp	r6, r3
 8012470:	da1d      	bge.n	80124ae <atan+0x246>
 8012472:	ee10 0a10 	vmov	r0, s0
 8012476:	4b48      	ldr	r3, [pc, #288]	; (8012598 <atan+0x330>)
 8012478:	2200      	movs	r2, #0
 801247a:	4629      	mov	r1, r5
 801247c:	f7ed ff04 	bl	8000288 <__aeabi_dsub>
 8012480:	4b45      	ldr	r3, [pc, #276]	; (8012598 <atan+0x330>)
 8012482:	4606      	mov	r6, r0
 8012484:	460f      	mov	r7, r1
 8012486:	2200      	movs	r2, #0
 8012488:	4620      	mov	r0, r4
 801248a:	4629      	mov	r1, r5
 801248c:	f7ee f8b4 	bl	80005f8 <__aeabi_dmul>
 8012490:	4b3e      	ldr	r3, [pc, #248]	; (801258c <atan+0x324>)
 8012492:	2200      	movs	r2, #0
 8012494:	f7ed fefa 	bl	800028c <__adddf3>
 8012498:	4602      	mov	r2, r0
 801249a:	460b      	mov	r3, r1
 801249c:	4630      	mov	r0, r6
 801249e:	4639      	mov	r1, r7
 80124a0:	f7ee f9d4 	bl	800084c <__aeabi_ddiv>
 80124a4:	f04f 0a02 	mov.w	sl, #2
 80124a8:	4604      	mov	r4, r0
 80124aa:	460d      	mov	r5, r1
 80124ac:	e743      	b.n	8012336 <atan+0xce>
 80124ae:	462b      	mov	r3, r5
 80124b0:	ee10 2a10 	vmov	r2, s0
 80124b4:	4939      	ldr	r1, [pc, #228]	; (801259c <atan+0x334>)
 80124b6:	2000      	movs	r0, #0
 80124b8:	f7ee f9c8 	bl	800084c <__aeabi_ddiv>
 80124bc:	f04f 0a03 	mov.w	sl, #3
 80124c0:	4604      	mov	r4, r0
 80124c2:	460d      	mov	r5, r1
 80124c4:	e737      	b.n	8012336 <atan+0xce>
 80124c6:	4b36      	ldr	r3, [pc, #216]	; (80125a0 <atan+0x338>)
 80124c8:	4e36      	ldr	r6, [pc, #216]	; (80125a4 <atan+0x33c>)
 80124ca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80124ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d2:	f7ed fed9 	bl	8000288 <__aeabi_dsub>
 80124d6:	4622      	mov	r2, r4
 80124d8:	462b      	mov	r3, r5
 80124da:	f7ed fed5 	bl	8000288 <__aeabi_dsub>
 80124de:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80124e2:	4602      	mov	r2, r0
 80124e4:	460b      	mov	r3, r1
 80124e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80124ea:	f7ed fecd 	bl	8000288 <__aeabi_dsub>
 80124ee:	f1bb 0f00 	cmp.w	fp, #0
 80124f2:	4604      	mov	r4, r0
 80124f4:	460d      	mov	r5, r1
 80124f6:	f6bf aed6 	bge.w	80122a6 <atan+0x3e>
 80124fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124fe:	461d      	mov	r5, r3
 8012500:	e6d1      	b.n	80122a6 <atan+0x3e>
 8012502:	a51d      	add	r5, pc, #116	; (adr r5, 8012578 <atan+0x310>)
 8012504:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012508:	e6cd      	b.n	80122a6 <atan+0x3e>
 801250a:	bf00      	nop
 801250c:	f3af 8000 	nop.w
 8012510:	54442d18 	.word	0x54442d18
 8012514:	bff921fb 	.word	0xbff921fb
 8012518:	8800759c 	.word	0x8800759c
 801251c:	7e37e43c 	.word	0x7e37e43c
 8012520:	e322da11 	.word	0xe322da11
 8012524:	3f90ad3a 	.word	0x3f90ad3a
 8012528:	24760deb 	.word	0x24760deb
 801252c:	3fa97b4b 	.word	0x3fa97b4b
 8012530:	a0d03d51 	.word	0xa0d03d51
 8012534:	3fb10d66 	.word	0x3fb10d66
 8012538:	c54c206e 	.word	0xc54c206e
 801253c:	3fb745cd 	.word	0x3fb745cd
 8012540:	920083ff 	.word	0x920083ff
 8012544:	3fc24924 	.word	0x3fc24924
 8012548:	5555550d 	.word	0x5555550d
 801254c:	3fd55555 	.word	0x3fd55555
 8012550:	2c6a6c2f 	.word	0x2c6a6c2f
 8012554:	bfa2b444 	.word	0xbfa2b444
 8012558:	52defd9a 	.word	0x52defd9a
 801255c:	3fadde2d 	.word	0x3fadde2d
 8012560:	af749a6d 	.word	0xaf749a6d
 8012564:	3fb3b0f2 	.word	0x3fb3b0f2
 8012568:	fe231671 	.word	0xfe231671
 801256c:	3fbc71c6 	.word	0x3fbc71c6
 8012570:	9998ebc4 	.word	0x9998ebc4
 8012574:	3fc99999 	.word	0x3fc99999
 8012578:	54442d18 	.word	0x54442d18
 801257c:	3ff921fb 	.word	0x3ff921fb
 8012580:	440fffff 	.word	0x440fffff
 8012584:	7ff00000 	.word	0x7ff00000
 8012588:	3fdbffff 	.word	0x3fdbffff
 801258c:	3ff00000 	.word	0x3ff00000
 8012590:	3ff2ffff 	.word	0x3ff2ffff
 8012594:	40038000 	.word	0x40038000
 8012598:	3ff80000 	.word	0x3ff80000
 801259c:	bff00000 	.word	0xbff00000
 80125a0:	08013dc0 	.word	0x08013dc0
 80125a4:	08013da0 	.word	0x08013da0

080125a8 <fabs>:
 80125a8:	ec51 0b10 	vmov	r0, r1, d0
 80125ac:	ee10 2a10 	vmov	r2, s0
 80125b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80125b4:	ec43 2b10 	vmov	d0, r2, r3
 80125b8:	4770      	bx	lr

080125ba <finite>:
 80125ba:	b082      	sub	sp, #8
 80125bc:	ed8d 0b00 	vstr	d0, [sp]
 80125c0:	9801      	ldr	r0, [sp, #4]
 80125c2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80125c6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80125ca:	0fc0      	lsrs	r0, r0, #31
 80125cc:	b002      	add	sp, #8
 80125ce:	4770      	bx	lr

080125d0 <__ieee754_sqrt>:
 80125d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125d4:	ec55 4b10 	vmov	r4, r5, d0
 80125d8:	4e67      	ldr	r6, [pc, #412]	; (8012778 <__ieee754_sqrt+0x1a8>)
 80125da:	43ae      	bics	r6, r5
 80125dc:	ee10 0a10 	vmov	r0, s0
 80125e0:	ee10 2a10 	vmov	r2, s0
 80125e4:	4629      	mov	r1, r5
 80125e6:	462b      	mov	r3, r5
 80125e8:	d10d      	bne.n	8012606 <__ieee754_sqrt+0x36>
 80125ea:	f7ee f805 	bl	80005f8 <__aeabi_dmul>
 80125ee:	4602      	mov	r2, r0
 80125f0:	460b      	mov	r3, r1
 80125f2:	4620      	mov	r0, r4
 80125f4:	4629      	mov	r1, r5
 80125f6:	f7ed fe49 	bl	800028c <__adddf3>
 80125fa:	4604      	mov	r4, r0
 80125fc:	460d      	mov	r5, r1
 80125fe:	ec45 4b10 	vmov	d0, r4, r5
 8012602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012606:	2d00      	cmp	r5, #0
 8012608:	dc0b      	bgt.n	8012622 <__ieee754_sqrt+0x52>
 801260a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801260e:	4326      	orrs	r6, r4
 8012610:	d0f5      	beq.n	80125fe <__ieee754_sqrt+0x2e>
 8012612:	b135      	cbz	r5, 8012622 <__ieee754_sqrt+0x52>
 8012614:	f7ed fe38 	bl	8000288 <__aeabi_dsub>
 8012618:	4602      	mov	r2, r0
 801261a:	460b      	mov	r3, r1
 801261c:	f7ee f916 	bl	800084c <__aeabi_ddiv>
 8012620:	e7eb      	b.n	80125fa <__ieee754_sqrt+0x2a>
 8012622:	1509      	asrs	r1, r1, #20
 8012624:	f000 808d 	beq.w	8012742 <__ieee754_sqrt+0x172>
 8012628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801262c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8012630:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012634:	07c9      	lsls	r1, r1, #31
 8012636:	bf5c      	itt	pl
 8012638:	005b      	lslpl	r3, r3, #1
 801263a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801263e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012642:	bf58      	it	pl
 8012644:	0052      	lslpl	r2, r2, #1
 8012646:	2500      	movs	r5, #0
 8012648:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801264c:	1076      	asrs	r6, r6, #1
 801264e:	0052      	lsls	r2, r2, #1
 8012650:	f04f 0e16 	mov.w	lr, #22
 8012654:	46ac      	mov	ip, r5
 8012656:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801265a:	eb0c 0001 	add.w	r0, ip, r1
 801265e:	4298      	cmp	r0, r3
 8012660:	bfde      	ittt	le
 8012662:	1a1b      	suble	r3, r3, r0
 8012664:	eb00 0c01 	addle.w	ip, r0, r1
 8012668:	186d      	addle	r5, r5, r1
 801266a:	005b      	lsls	r3, r3, #1
 801266c:	f1be 0e01 	subs.w	lr, lr, #1
 8012670:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012674:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012678:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801267c:	d1ed      	bne.n	801265a <__ieee754_sqrt+0x8a>
 801267e:	4674      	mov	r4, lr
 8012680:	2720      	movs	r7, #32
 8012682:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8012686:	4563      	cmp	r3, ip
 8012688:	eb01 000e 	add.w	r0, r1, lr
 801268c:	dc02      	bgt.n	8012694 <__ieee754_sqrt+0xc4>
 801268e:	d113      	bne.n	80126b8 <__ieee754_sqrt+0xe8>
 8012690:	4290      	cmp	r0, r2
 8012692:	d811      	bhi.n	80126b8 <__ieee754_sqrt+0xe8>
 8012694:	2800      	cmp	r0, #0
 8012696:	eb00 0e01 	add.w	lr, r0, r1
 801269a:	da57      	bge.n	801274c <__ieee754_sqrt+0x17c>
 801269c:	f1be 0f00 	cmp.w	lr, #0
 80126a0:	db54      	blt.n	801274c <__ieee754_sqrt+0x17c>
 80126a2:	f10c 0801 	add.w	r8, ip, #1
 80126a6:	eba3 030c 	sub.w	r3, r3, ip
 80126aa:	4290      	cmp	r0, r2
 80126ac:	bf88      	it	hi
 80126ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80126b2:	1a12      	subs	r2, r2, r0
 80126b4:	440c      	add	r4, r1
 80126b6:	46c4      	mov	ip, r8
 80126b8:	005b      	lsls	r3, r3, #1
 80126ba:	3f01      	subs	r7, #1
 80126bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80126c0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80126c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80126c8:	d1dd      	bne.n	8012686 <__ieee754_sqrt+0xb6>
 80126ca:	4313      	orrs	r3, r2
 80126cc:	d01b      	beq.n	8012706 <__ieee754_sqrt+0x136>
 80126ce:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801277c <__ieee754_sqrt+0x1ac>
 80126d2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8012780 <__ieee754_sqrt+0x1b0>
 80126d6:	e9da 0100 	ldrd	r0, r1, [sl]
 80126da:	e9db 2300 	ldrd	r2, r3, [fp]
 80126de:	f7ed fdd3 	bl	8000288 <__aeabi_dsub>
 80126e2:	e9da 8900 	ldrd	r8, r9, [sl]
 80126e6:	4602      	mov	r2, r0
 80126e8:	460b      	mov	r3, r1
 80126ea:	4640      	mov	r0, r8
 80126ec:	4649      	mov	r1, r9
 80126ee:	f7ee f9ff 	bl	8000af0 <__aeabi_dcmple>
 80126f2:	b140      	cbz	r0, 8012706 <__ieee754_sqrt+0x136>
 80126f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80126f8:	e9da 0100 	ldrd	r0, r1, [sl]
 80126fc:	e9db 2300 	ldrd	r2, r3, [fp]
 8012700:	d126      	bne.n	8012750 <__ieee754_sqrt+0x180>
 8012702:	3501      	adds	r5, #1
 8012704:	463c      	mov	r4, r7
 8012706:	106a      	asrs	r2, r5, #1
 8012708:	0863      	lsrs	r3, r4, #1
 801270a:	07e9      	lsls	r1, r5, #31
 801270c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012710:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012714:	bf48      	it	mi
 8012716:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801271a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801271e:	461c      	mov	r4, r3
 8012720:	e76d      	b.n	80125fe <__ieee754_sqrt+0x2e>
 8012722:	0ad3      	lsrs	r3, r2, #11
 8012724:	3815      	subs	r0, #21
 8012726:	0552      	lsls	r2, r2, #21
 8012728:	2b00      	cmp	r3, #0
 801272a:	d0fa      	beq.n	8012722 <__ieee754_sqrt+0x152>
 801272c:	02dc      	lsls	r4, r3, #11
 801272e:	d50a      	bpl.n	8012746 <__ieee754_sqrt+0x176>
 8012730:	f1c1 0420 	rsb	r4, r1, #32
 8012734:	fa22 f404 	lsr.w	r4, r2, r4
 8012738:	1e4d      	subs	r5, r1, #1
 801273a:	408a      	lsls	r2, r1
 801273c:	4323      	orrs	r3, r4
 801273e:	1b41      	subs	r1, r0, r5
 8012740:	e772      	b.n	8012628 <__ieee754_sqrt+0x58>
 8012742:	4608      	mov	r0, r1
 8012744:	e7f0      	b.n	8012728 <__ieee754_sqrt+0x158>
 8012746:	005b      	lsls	r3, r3, #1
 8012748:	3101      	adds	r1, #1
 801274a:	e7ef      	b.n	801272c <__ieee754_sqrt+0x15c>
 801274c:	46e0      	mov	r8, ip
 801274e:	e7aa      	b.n	80126a6 <__ieee754_sqrt+0xd6>
 8012750:	f7ed fd9c 	bl	800028c <__adddf3>
 8012754:	e9da 8900 	ldrd	r8, r9, [sl]
 8012758:	4602      	mov	r2, r0
 801275a:	460b      	mov	r3, r1
 801275c:	4640      	mov	r0, r8
 801275e:	4649      	mov	r1, r9
 8012760:	f7ee f9bc 	bl	8000adc <__aeabi_dcmplt>
 8012764:	b120      	cbz	r0, 8012770 <__ieee754_sqrt+0x1a0>
 8012766:	1ca0      	adds	r0, r4, #2
 8012768:	bf08      	it	eq
 801276a:	3501      	addeq	r5, #1
 801276c:	3402      	adds	r4, #2
 801276e:	e7ca      	b.n	8012706 <__ieee754_sqrt+0x136>
 8012770:	3401      	adds	r4, #1
 8012772:	f024 0401 	bic.w	r4, r4, #1
 8012776:	e7c6      	b.n	8012706 <__ieee754_sqrt+0x136>
 8012778:	7ff00000 	.word	0x7ff00000
 801277c:	200002a0 	.word	0x200002a0
 8012780:	200002a8 	.word	0x200002a8
 8012784:	00000000 	.word	0x00000000

08012788 <__ieee754_atan2>:
 8012788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801278c:	ec57 6b11 	vmov	r6, r7, d1
 8012790:	4273      	negs	r3, r6
 8012792:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8012910 <__ieee754_atan2+0x188>
 8012796:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801279a:	4333      	orrs	r3, r6
 801279c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80127a0:	4543      	cmp	r3, r8
 80127a2:	ec51 0b10 	vmov	r0, r1, d0
 80127a6:	ee11 5a10 	vmov	r5, s2
 80127aa:	d80a      	bhi.n	80127c2 <__ieee754_atan2+0x3a>
 80127ac:	4244      	negs	r4, r0
 80127ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80127b2:	4304      	orrs	r4, r0
 80127b4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80127b8:	4544      	cmp	r4, r8
 80127ba:	ee10 9a10 	vmov	r9, s0
 80127be:	468e      	mov	lr, r1
 80127c0:	d907      	bls.n	80127d2 <__ieee754_atan2+0x4a>
 80127c2:	4632      	mov	r2, r6
 80127c4:	463b      	mov	r3, r7
 80127c6:	f7ed fd61 	bl	800028c <__adddf3>
 80127ca:	ec41 0b10 	vmov	d0, r0, r1
 80127ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127d2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80127d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80127da:	4334      	orrs	r4, r6
 80127dc:	d103      	bne.n	80127e6 <__ieee754_atan2+0x5e>
 80127de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127e2:	f7ff bd41 	b.w	8012268 <atan>
 80127e6:	17bc      	asrs	r4, r7, #30
 80127e8:	f004 0402 	and.w	r4, r4, #2
 80127ec:	ea53 0909 	orrs.w	r9, r3, r9
 80127f0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80127f4:	d107      	bne.n	8012806 <__ieee754_atan2+0x7e>
 80127f6:	2c02      	cmp	r4, #2
 80127f8:	d05f      	beq.n	80128ba <__ieee754_atan2+0x132>
 80127fa:	2c03      	cmp	r4, #3
 80127fc:	d1e5      	bne.n	80127ca <__ieee754_atan2+0x42>
 80127fe:	a140      	add	r1, pc, #256	; (adr r1, 8012900 <__ieee754_atan2+0x178>)
 8012800:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012804:	e7e1      	b.n	80127ca <__ieee754_atan2+0x42>
 8012806:	4315      	orrs	r5, r2
 8012808:	d106      	bne.n	8012818 <__ieee754_atan2+0x90>
 801280a:	f1be 0f00 	cmp.w	lr, #0
 801280e:	da5f      	bge.n	80128d0 <__ieee754_atan2+0x148>
 8012810:	a13d      	add	r1, pc, #244	; (adr r1, 8012908 <__ieee754_atan2+0x180>)
 8012812:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012816:	e7d8      	b.n	80127ca <__ieee754_atan2+0x42>
 8012818:	4542      	cmp	r2, r8
 801281a:	d10f      	bne.n	801283c <__ieee754_atan2+0xb4>
 801281c:	4293      	cmp	r3, r2
 801281e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012822:	d107      	bne.n	8012834 <__ieee754_atan2+0xac>
 8012824:	2c02      	cmp	r4, #2
 8012826:	d84c      	bhi.n	80128c2 <__ieee754_atan2+0x13a>
 8012828:	4b33      	ldr	r3, [pc, #204]	; (80128f8 <__ieee754_atan2+0x170>)
 801282a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801282e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012832:	e7ca      	b.n	80127ca <__ieee754_atan2+0x42>
 8012834:	2c02      	cmp	r4, #2
 8012836:	d848      	bhi.n	80128ca <__ieee754_atan2+0x142>
 8012838:	4b30      	ldr	r3, [pc, #192]	; (80128fc <__ieee754_atan2+0x174>)
 801283a:	e7f6      	b.n	801282a <__ieee754_atan2+0xa2>
 801283c:	4543      	cmp	r3, r8
 801283e:	d0e4      	beq.n	801280a <__ieee754_atan2+0x82>
 8012840:	1a9b      	subs	r3, r3, r2
 8012842:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8012846:	ea4f 5223 	mov.w	r2, r3, asr #20
 801284a:	da1e      	bge.n	801288a <__ieee754_atan2+0x102>
 801284c:	2f00      	cmp	r7, #0
 801284e:	da01      	bge.n	8012854 <__ieee754_atan2+0xcc>
 8012850:	323c      	adds	r2, #60	; 0x3c
 8012852:	db1e      	blt.n	8012892 <__ieee754_atan2+0x10a>
 8012854:	4632      	mov	r2, r6
 8012856:	463b      	mov	r3, r7
 8012858:	f7ed fff8 	bl	800084c <__aeabi_ddiv>
 801285c:	ec41 0b10 	vmov	d0, r0, r1
 8012860:	f7ff fea2 	bl	80125a8 <fabs>
 8012864:	f7ff fd00 	bl	8012268 <atan>
 8012868:	ec51 0b10 	vmov	r0, r1, d0
 801286c:	2c01      	cmp	r4, #1
 801286e:	d013      	beq.n	8012898 <__ieee754_atan2+0x110>
 8012870:	2c02      	cmp	r4, #2
 8012872:	d015      	beq.n	80128a0 <__ieee754_atan2+0x118>
 8012874:	2c00      	cmp	r4, #0
 8012876:	d0a8      	beq.n	80127ca <__ieee754_atan2+0x42>
 8012878:	a317      	add	r3, pc, #92	; (adr r3, 80128d8 <__ieee754_atan2+0x150>)
 801287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801287e:	f7ed fd03 	bl	8000288 <__aeabi_dsub>
 8012882:	a317      	add	r3, pc, #92	; (adr r3, 80128e0 <__ieee754_atan2+0x158>)
 8012884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012888:	e014      	b.n	80128b4 <__ieee754_atan2+0x12c>
 801288a:	a117      	add	r1, pc, #92	; (adr r1, 80128e8 <__ieee754_atan2+0x160>)
 801288c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012890:	e7ec      	b.n	801286c <__ieee754_atan2+0xe4>
 8012892:	2000      	movs	r0, #0
 8012894:	2100      	movs	r1, #0
 8012896:	e7e9      	b.n	801286c <__ieee754_atan2+0xe4>
 8012898:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801289c:	4619      	mov	r1, r3
 801289e:	e794      	b.n	80127ca <__ieee754_atan2+0x42>
 80128a0:	a30d      	add	r3, pc, #52	; (adr r3, 80128d8 <__ieee754_atan2+0x150>)
 80128a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a6:	f7ed fcef 	bl	8000288 <__aeabi_dsub>
 80128aa:	4602      	mov	r2, r0
 80128ac:	460b      	mov	r3, r1
 80128ae:	a10c      	add	r1, pc, #48	; (adr r1, 80128e0 <__ieee754_atan2+0x158>)
 80128b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128b4:	f7ed fce8 	bl	8000288 <__aeabi_dsub>
 80128b8:	e787      	b.n	80127ca <__ieee754_atan2+0x42>
 80128ba:	a109      	add	r1, pc, #36	; (adr r1, 80128e0 <__ieee754_atan2+0x158>)
 80128bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128c0:	e783      	b.n	80127ca <__ieee754_atan2+0x42>
 80128c2:	a10b      	add	r1, pc, #44	; (adr r1, 80128f0 <__ieee754_atan2+0x168>)
 80128c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128c8:	e77f      	b.n	80127ca <__ieee754_atan2+0x42>
 80128ca:	2000      	movs	r0, #0
 80128cc:	2100      	movs	r1, #0
 80128ce:	e77c      	b.n	80127ca <__ieee754_atan2+0x42>
 80128d0:	a105      	add	r1, pc, #20	; (adr r1, 80128e8 <__ieee754_atan2+0x160>)
 80128d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128d6:	e778      	b.n	80127ca <__ieee754_atan2+0x42>
 80128d8:	33145c07 	.word	0x33145c07
 80128dc:	3ca1a626 	.word	0x3ca1a626
 80128e0:	54442d18 	.word	0x54442d18
 80128e4:	400921fb 	.word	0x400921fb
 80128e8:	54442d18 	.word	0x54442d18
 80128ec:	3ff921fb 	.word	0x3ff921fb
 80128f0:	54442d18 	.word	0x54442d18
 80128f4:	3fe921fb 	.word	0x3fe921fb
 80128f8:	08013de0 	.word	0x08013de0
 80128fc:	08013df8 	.word	0x08013df8
 8012900:	54442d18 	.word	0x54442d18
 8012904:	c00921fb 	.word	0xc00921fb
 8012908:	54442d18 	.word	0x54442d18
 801290c:	bff921fb 	.word	0xbff921fb
 8012910:	7ff00000 	.word	0x7ff00000
 8012914:	00000000 	.word	0x00000000

08012918 <__ieee754_log>:
 8012918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801291c:	ec51 0b10 	vmov	r0, r1, d0
 8012920:	ed2d 8b04 	vpush	{d8-d9}
 8012924:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8012928:	b083      	sub	sp, #12
 801292a:	460d      	mov	r5, r1
 801292c:	da29      	bge.n	8012982 <__ieee754_log+0x6a>
 801292e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012932:	4303      	orrs	r3, r0
 8012934:	ee10 2a10 	vmov	r2, s0
 8012938:	d10c      	bne.n	8012954 <__ieee754_log+0x3c>
 801293a:	49cf      	ldr	r1, [pc, #828]	; (8012c78 <__ieee754_log+0x360>)
 801293c:	2200      	movs	r2, #0
 801293e:	2300      	movs	r3, #0
 8012940:	2000      	movs	r0, #0
 8012942:	f7ed ff83 	bl	800084c <__aeabi_ddiv>
 8012946:	ec41 0b10 	vmov	d0, r0, r1
 801294a:	b003      	add	sp, #12
 801294c:	ecbd 8b04 	vpop	{d8-d9}
 8012950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012954:	2900      	cmp	r1, #0
 8012956:	da05      	bge.n	8012964 <__ieee754_log+0x4c>
 8012958:	460b      	mov	r3, r1
 801295a:	f7ed fc95 	bl	8000288 <__aeabi_dsub>
 801295e:	2200      	movs	r2, #0
 8012960:	2300      	movs	r3, #0
 8012962:	e7ee      	b.n	8012942 <__ieee754_log+0x2a>
 8012964:	4bc5      	ldr	r3, [pc, #788]	; (8012c7c <__ieee754_log+0x364>)
 8012966:	2200      	movs	r2, #0
 8012968:	f7ed fe46 	bl	80005f8 <__aeabi_dmul>
 801296c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8012970:	460d      	mov	r5, r1
 8012972:	4ac3      	ldr	r2, [pc, #780]	; (8012c80 <__ieee754_log+0x368>)
 8012974:	4295      	cmp	r5, r2
 8012976:	dd06      	ble.n	8012986 <__ieee754_log+0x6e>
 8012978:	4602      	mov	r2, r0
 801297a:	460b      	mov	r3, r1
 801297c:	f7ed fc86 	bl	800028c <__adddf3>
 8012980:	e7e1      	b.n	8012946 <__ieee754_log+0x2e>
 8012982:	2300      	movs	r3, #0
 8012984:	e7f5      	b.n	8012972 <__ieee754_log+0x5a>
 8012986:	152c      	asrs	r4, r5, #20
 8012988:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801298c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012990:	441c      	add	r4, r3
 8012992:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8012996:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801299a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801299e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80129a2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80129a6:	ea42 0105 	orr.w	r1, r2, r5
 80129aa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80129ae:	2200      	movs	r2, #0
 80129b0:	4bb4      	ldr	r3, [pc, #720]	; (8012c84 <__ieee754_log+0x36c>)
 80129b2:	f7ed fc69 	bl	8000288 <__aeabi_dsub>
 80129b6:	1cab      	adds	r3, r5, #2
 80129b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129bc:	2b02      	cmp	r3, #2
 80129be:	4682      	mov	sl, r0
 80129c0:	468b      	mov	fp, r1
 80129c2:	f04f 0200 	mov.w	r2, #0
 80129c6:	dc53      	bgt.n	8012a70 <__ieee754_log+0x158>
 80129c8:	2300      	movs	r3, #0
 80129ca:	f7ee f87d 	bl	8000ac8 <__aeabi_dcmpeq>
 80129ce:	b1d0      	cbz	r0, 8012a06 <__ieee754_log+0xee>
 80129d0:	2c00      	cmp	r4, #0
 80129d2:	f000 8122 	beq.w	8012c1a <__ieee754_log+0x302>
 80129d6:	4620      	mov	r0, r4
 80129d8:	f7ed fda4 	bl	8000524 <__aeabi_i2d>
 80129dc:	a390      	add	r3, pc, #576	; (adr r3, 8012c20 <__ieee754_log+0x308>)
 80129de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e2:	4606      	mov	r6, r0
 80129e4:	460f      	mov	r7, r1
 80129e6:	f7ed fe07 	bl	80005f8 <__aeabi_dmul>
 80129ea:	a38f      	add	r3, pc, #572	; (adr r3, 8012c28 <__ieee754_log+0x310>)
 80129ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129f0:	4604      	mov	r4, r0
 80129f2:	460d      	mov	r5, r1
 80129f4:	4630      	mov	r0, r6
 80129f6:	4639      	mov	r1, r7
 80129f8:	f7ed fdfe 	bl	80005f8 <__aeabi_dmul>
 80129fc:	4602      	mov	r2, r0
 80129fe:	460b      	mov	r3, r1
 8012a00:	4620      	mov	r0, r4
 8012a02:	4629      	mov	r1, r5
 8012a04:	e7ba      	b.n	801297c <__ieee754_log+0x64>
 8012a06:	a38a      	add	r3, pc, #552	; (adr r3, 8012c30 <__ieee754_log+0x318>)
 8012a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a0c:	4650      	mov	r0, sl
 8012a0e:	4659      	mov	r1, fp
 8012a10:	f7ed fdf2 	bl	80005f8 <__aeabi_dmul>
 8012a14:	4602      	mov	r2, r0
 8012a16:	460b      	mov	r3, r1
 8012a18:	2000      	movs	r0, #0
 8012a1a:	499b      	ldr	r1, [pc, #620]	; (8012c88 <__ieee754_log+0x370>)
 8012a1c:	f7ed fc34 	bl	8000288 <__aeabi_dsub>
 8012a20:	4652      	mov	r2, sl
 8012a22:	4606      	mov	r6, r0
 8012a24:	460f      	mov	r7, r1
 8012a26:	465b      	mov	r3, fp
 8012a28:	4650      	mov	r0, sl
 8012a2a:	4659      	mov	r1, fp
 8012a2c:	f7ed fde4 	bl	80005f8 <__aeabi_dmul>
 8012a30:	4602      	mov	r2, r0
 8012a32:	460b      	mov	r3, r1
 8012a34:	4630      	mov	r0, r6
 8012a36:	4639      	mov	r1, r7
 8012a38:	f7ed fdde 	bl	80005f8 <__aeabi_dmul>
 8012a3c:	4606      	mov	r6, r0
 8012a3e:	460f      	mov	r7, r1
 8012a40:	b914      	cbnz	r4, 8012a48 <__ieee754_log+0x130>
 8012a42:	4632      	mov	r2, r6
 8012a44:	463b      	mov	r3, r7
 8012a46:	e0a2      	b.n	8012b8e <__ieee754_log+0x276>
 8012a48:	4620      	mov	r0, r4
 8012a4a:	f7ed fd6b 	bl	8000524 <__aeabi_i2d>
 8012a4e:	a374      	add	r3, pc, #464	; (adr r3, 8012c20 <__ieee754_log+0x308>)
 8012a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a54:	4680      	mov	r8, r0
 8012a56:	4689      	mov	r9, r1
 8012a58:	f7ed fdce 	bl	80005f8 <__aeabi_dmul>
 8012a5c:	a372      	add	r3, pc, #456	; (adr r3, 8012c28 <__ieee754_log+0x310>)
 8012a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a62:	4604      	mov	r4, r0
 8012a64:	460d      	mov	r5, r1
 8012a66:	4640      	mov	r0, r8
 8012a68:	4649      	mov	r1, r9
 8012a6a:	f7ed fdc5 	bl	80005f8 <__aeabi_dmul>
 8012a6e:	e0a7      	b.n	8012bc0 <__ieee754_log+0x2a8>
 8012a70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012a74:	f7ed fc0a 	bl	800028c <__adddf3>
 8012a78:	4602      	mov	r2, r0
 8012a7a:	460b      	mov	r3, r1
 8012a7c:	4650      	mov	r0, sl
 8012a7e:	4659      	mov	r1, fp
 8012a80:	f7ed fee4 	bl	800084c <__aeabi_ddiv>
 8012a84:	ec41 0b18 	vmov	d8, r0, r1
 8012a88:	4620      	mov	r0, r4
 8012a8a:	f7ed fd4b 	bl	8000524 <__aeabi_i2d>
 8012a8e:	ec53 2b18 	vmov	r2, r3, d8
 8012a92:	ec41 0b19 	vmov	d9, r0, r1
 8012a96:	ec51 0b18 	vmov	r0, r1, d8
 8012a9a:	f7ed fdad 	bl	80005f8 <__aeabi_dmul>
 8012a9e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8012aa2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8012aa6:	9301      	str	r3, [sp, #4]
 8012aa8:	4602      	mov	r2, r0
 8012aaa:	460b      	mov	r3, r1
 8012aac:	4680      	mov	r8, r0
 8012aae:	4689      	mov	r9, r1
 8012ab0:	f7ed fda2 	bl	80005f8 <__aeabi_dmul>
 8012ab4:	a360      	add	r3, pc, #384	; (adr r3, 8012c38 <__ieee754_log+0x320>)
 8012ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aba:	4606      	mov	r6, r0
 8012abc:	460f      	mov	r7, r1
 8012abe:	f7ed fd9b 	bl	80005f8 <__aeabi_dmul>
 8012ac2:	a35f      	add	r3, pc, #380	; (adr r3, 8012c40 <__ieee754_log+0x328>)
 8012ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac8:	f7ed fbe0 	bl	800028c <__adddf3>
 8012acc:	4632      	mov	r2, r6
 8012ace:	463b      	mov	r3, r7
 8012ad0:	f7ed fd92 	bl	80005f8 <__aeabi_dmul>
 8012ad4:	a35c      	add	r3, pc, #368	; (adr r3, 8012c48 <__ieee754_log+0x330>)
 8012ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ada:	f7ed fbd7 	bl	800028c <__adddf3>
 8012ade:	4632      	mov	r2, r6
 8012ae0:	463b      	mov	r3, r7
 8012ae2:	f7ed fd89 	bl	80005f8 <__aeabi_dmul>
 8012ae6:	a35a      	add	r3, pc, #360	; (adr r3, 8012c50 <__ieee754_log+0x338>)
 8012ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aec:	f7ed fbce 	bl	800028c <__adddf3>
 8012af0:	4642      	mov	r2, r8
 8012af2:	464b      	mov	r3, r9
 8012af4:	f7ed fd80 	bl	80005f8 <__aeabi_dmul>
 8012af8:	a357      	add	r3, pc, #348	; (adr r3, 8012c58 <__ieee754_log+0x340>)
 8012afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012afe:	4680      	mov	r8, r0
 8012b00:	4689      	mov	r9, r1
 8012b02:	4630      	mov	r0, r6
 8012b04:	4639      	mov	r1, r7
 8012b06:	f7ed fd77 	bl	80005f8 <__aeabi_dmul>
 8012b0a:	a355      	add	r3, pc, #340	; (adr r3, 8012c60 <__ieee754_log+0x348>)
 8012b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b10:	f7ed fbbc 	bl	800028c <__adddf3>
 8012b14:	4632      	mov	r2, r6
 8012b16:	463b      	mov	r3, r7
 8012b18:	f7ed fd6e 	bl	80005f8 <__aeabi_dmul>
 8012b1c:	a352      	add	r3, pc, #328	; (adr r3, 8012c68 <__ieee754_log+0x350>)
 8012b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b22:	f7ed fbb3 	bl	800028c <__adddf3>
 8012b26:	4632      	mov	r2, r6
 8012b28:	463b      	mov	r3, r7
 8012b2a:	f7ed fd65 	bl	80005f8 <__aeabi_dmul>
 8012b2e:	460b      	mov	r3, r1
 8012b30:	4602      	mov	r2, r0
 8012b32:	4649      	mov	r1, r9
 8012b34:	4640      	mov	r0, r8
 8012b36:	f7ed fba9 	bl	800028c <__adddf3>
 8012b3a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8012b3e:	9b01      	ldr	r3, [sp, #4]
 8012b40:	3551      	adds	r5, #81	; 0x51
 8012b42:	431d      	orrs	r5, r3
 8012b44:	2d00      	cmp	r5, #0
 8012b46:	4680      	mov	r8, r0
 8012b48:	4689      	mov	r9, r1
 8012b4a:	dd48      	ble.n	8012bde <__ieee754_log+0x2c6>
 8012b4c:	4b4e      	ldr	r3, [pc, #312]	; (8012c88 <__ieee754_log+0x370>)
 8012b4e:	2200      	movs	r2, #0
 8012b50:	4650      	mov	r0, sl
 8012b52:	4659      	mov	r1, fp
 8012b54:	f7ed fd50 	bl	80005f8 <__aeabi_dmul>
 8012b58:	4652      	mov	r2, sl
 8012b5a:	465b      	mov	r3, fp
 8012b5c:	f7ed fd4c 	bl	80005f8 <__aeabi_dmul>
 8012b60:	4602      	mov	r2, r0
 8012b62:	460b      	mov	r3, r1
 8012b64:	4606      	mov	r6, r0
 8012b66:	460f      	mov	r7, r1
 8012b68:	4640      	mov	r0, r8
 8012b6a:	4649      	mov	r1, r9
 8012b6c:	f7ed fb8e 	bl	800028c <__adddf3>
 8012b70:	ec53 2b18 	vmov	r2, r3, d8
 8012b74:	f7ed fd40 	bl	80005f8 <__aeabi_dmul>
 8012b78:	4680      	mov	r8, r0
 8012b7a:	4689      	mov	r9, r1
 8012b7c:	b964      	cbnz	r4, 8012b98 <__ieee754_log+0x280>
 8012b7e:	4602      	mov	r2, r0
 8012b80:	460b      	mov	r3, r1
 8012b82:	4630      	mov	r0, r6
 8012b84:	4639      	mov	r1, r7
 8012b86:	f7ed fb7f 	bl	8000288 <__aeabi_dsub>
 8012b8a:	4602      	mov	r2, r0
 8012b8c:	460b      	mov	r3, r1
 8012b8e:	4650      	mov	r0, sl
 8012b90:	4659      	mov	r1, fp
 8012b92:	f7ed fb79 	bl	8000288 <__aeabi_dsub>
 8012b96:	e6d6      	b.n	8012946 <__ieee754_log+0x2e>
 8012b98:	a321      	add	r3, pc, #132	; (adr r3, 8012c20 <__ieee754_log+0x308>)
 8012b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9e:	ec51 0b19 	vmov	r0, r1, d9
 8012ba2:	f7ed fd29 	bl	80005f8 <__aeabi_dmul>
 8012ba6:	a320      	add	r3, pc, #128	; (adr r3, 8012c28 <__ieee754_log+0x310>)
 8012ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bac:	4604      	mov	r4, r0
 8012bae:	460d      	mov	r5, r1
 8012bb0:	ec51 0b19 	vmov	r0, r1, d9
 8012bb4:	f7ed fd20 	bl	80005f8 <__aeabi_dmul>
 8012bb8:	4642      	mov	r2, r8
 8012bba:	464b      	mov	r3, r9
 8012bbc:	f7ed fb66 	bl	800028c <__adddf3>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	460b      	mov	r3, r1
 8012bc4:	4630      	mov	r0, r6
 8012bc6:	4639      	mov	r1, r7
 8012bc8:	f7ed fb5e 	bl	8000288 <__aeabi_dsub>
 8012bcc:	4652      	mov	r2, sl
 8012bce:	465b      	mov	r3, fp
 8012bd0:	f7ed fb5a 	bl	8000288 <__aeabi_dsub>
 8012bd4:	4602      	mov	r2, r0
 8012bd6:	460b      	mov	r3, r1
 8012bd8:	4620      	mov	r0, r4
 8012bda:	4629      	mov	r1, r5
 8012bdc:	e7d9      	b.n	8012b92 <__ieee754_log+0x27a>
 8012bde:	4602      	mov	r2, r0
 8012be0:	460b      	mov	r3, r1
 8012be2:	4650      	mov	r0, sl
 8012be4:	4659      	mov	r1, fp
 8012be6:	f7ed fb4f 	bl	8000288 <__aeabi_dsub>
 8012bea:	ec53 2b18 	vmov	r2, r3, d8
 8012bee:	f7ed fd03 	bl	80005f8 <__aeabi_dmul>
 8012bf2:	4606      	mov	r6, r0
 8012bf4:	460f      	mov	r7, r1
 8012bf6:	2c00      	cmp	r4, #0
 8012bf8:	f43f af23 	beq.w	8012a42 <__ieee754_log+0x12a>
 8012bfc:	a308      	add	r3, pc, #32	; (adr r3, 8012c20 <__ieee754_log+0x308>)
 8012bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c02:	ec51 0b19 	vmov	r0, r1, d9
 8012c06:	f7ed fcf7 	bl	80005f8 <__aeabi_dmul>
 8012c0a:	a307      	add	r3, pc, #28	; (adr r3, 8012c28 <__ieee754_log+0x310>)
 8012c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c10:	4604      	mov	r4, r0
 8012c12:	460d      	mov	r5, r1
 8012c14:	ec51 0b19 	vmov	r0, r1, d9
 8012c18:	e727      	b.n	8012a6a <__ieee754_log+0x152>
 8012c1a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8012c70 <__ieee754_log+0x358>
 8012c1e:	e694      	b.n	801294a <__ieee754_log+0x32>
 8012c20:	fee00000 	.word	0xfee00000
 8012c24:	3fe62e42 	.word	0x3fe62e42
 8012c28:	35793c76 	.word	0x35793c76
 8012c2c:	3dea39ef 	.word	0x3dea39ef
 8012c30:	55555555 	.word	0x55555555
 8012c34:	3fd55555 	.word	0x3fd55555
 8012c38:	df3e5244 	.word	0xdf3e5244
 8012c3c:	3fc2f112 	.word	0x3fc2f112
 8012c40:	96cb03de 	.word	0x96cb03de
 8012c44:	3fc74664 	.word	0x3fc74664
 8012c48:	94229359 	.word	0x94229359
 8012c4c:	3fd24924 	.word	0x3fd24924
 8012c50:	55555593 	.word	0x55555593
 8012c54:	3fe55555 	.word	0x3fe55555
 8012c58:	d078c69f 	.word	0xd078c69f
 8012c5c:	3fc39a09 	.word	0x3fc39a09
 8012c60:	1d8e78af 	.word	0x1d8e78af
 8012c64:	3fcc71c5 	.word	0x3fcc71c5
 8012c68:	9997fa04 	.word	0x9997fa04
 8012c6c:	3fd99999 	.word	0x3fd99999
	...
 8012c78:	c3500000 	.word	0xc3500000
 8012c7c:	43500000 	.word	0x43500000
 8012c80:	7fefffff 	.word	0x7fefffff
 8012c84:	3ff00000 	.word	0x3ff00000
 8012c88:	3fe00000 	.word	0x3fe00000
 8012c8c:	00000000 	.word	0x00000000

08012c90 <__ieee754_pow>:
 8012c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c94:	ed2d 8b06 	vpush	{d8-d10}
 8012c98:	b089      	sub	sp, #36	; 0x24
 8012c9a:	ed8d 1b00 	vstr	d1, [sp]
 8012c9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012ca2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012ca6:	ea58 0102 	orrs.w	r1, r8, r2
 8012caa:	ec57 6b10 	vmov	r6, r7, d0
 8012cae:	d115      	bne.n	8012cdc <__ieee754_pow+0x4c>
 8012cb0:	19b3      	adds	r3, r6, r6
 8012cb2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8012cb6:	4152      	adcs	r2, r2
 8012cb8:	4299      	cmp	r1, r3
 8012cba:	4b89      	ldr	r3, [pc, #548]	; (8012ee0 <__ieee754_pow+0x250>)
 8012cbc:	4193      	sbcs	r3, r2
 8012cbe:	f080 84d1 	bcs.w	8013664 <__ieee754_pow+0x9d4>
 8012cc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012cc6:	4630      	mov	r0, r6
 8012cc8:	4639      	mov	r1, r7
 8012cca:	f7ed fadf 	bl	800028c <__adddf3>
 8012cce:	ec41 0b10 	vmov	d0, r0, r1
 8012cd2:	b009      	add	sp, #36	; 0x24
 8012cd4:	ecbd 8b06 	vpop	{d8-d10}
 8012cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cdc:	4b81      	ldr	r3, [pc, #516]	; (8012ee4 <__ieee754_pow+0x254>)
 8012cde:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8012ce2:	429c      	cmp	r4, r3
 8012ce4:	ee10 aa10 	vmov	sl, s0
 8012ce8:	463d      	mov	r5, r7
 8012cea:	dc06      	bgt.n	8012cfa <__ieee754_pow+0x6a>
 8012cec:	d101      	bne.n	8012cf2 <__ieee754_pow+0x62>
 8012cee:	2e00      	cmp	r6, #0
 8012cf0:	d1e7      	bne.n	8012cc2 <__ieee754_pow+0x32>
 8012cf2:	4598      	cmp	r8, r3
 8012cf4:	dc01      	bgt.n	8012cfa <__ieee754_pow+0x6a>
 8012cf6:	d10f      	bne.n	8012d18 <__ieee754_pow+0x88>
 8012cf8:	b172      	cbz	r2, 8012d18 <__ieee754_pow+0x88>
 8012cfa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012cfe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8012d02:	ea55 050a 	orrs.w	r5, r5, sl
 8012d06:	d1dc      	bne.n	8012cc2 <__ieee754_pow+0x32>
 8012d08:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012d0c:	18db      	adds	r3, r3, r3
 8012d0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8012d12:	4152      	adcs	r2, r2
 8012d14:	429d      	cmp	r5, r3
 8012d16:	e7d0      	b.n	8012cba <__ieee754_pow+0x2a>
 8012d18:	2d00      	cmp	r5, #0
 8012d1a:	da3b      	bge.n	8012d94 <__ieee754_pow+0x104>
 8012d1c:	4b72      	ldr	r3, [pc, #456]	; (8012ee8 <__ieee754_pow+0x258>)
 8012d1e:	4598      	cmp	r8, r3
 8012d20:	dc51      	bgt.n	8012dc6 <__ieee754_pow+0x136>
 8012d22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012d26:	4598      	cmp	r8, r3
 8012d28:	f340 84ab 	ble.w	8013682 <__ieee754_pow+0x9f2>
 8012d2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012d30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012d34:	2b14      	cmp	r3, #20
 8012d36:	dd0f      	ble.n	8012d58 <__ieee754_pow+0xc8>
 8012d38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012d3c:	fa22 f103 	lsr.w	r1, r2, r3
 8012d40:	fa01 f303 	lsl.w	r3, r1, r3
 8012d44:	4293      	cmp	r3, r2
 8012d46:	f040 849c 	bne.w	8013682 <__ieee754_pow+0x9f2>
 8012d4a:	f001 0101 	and.w	r1, r1, #1
 8012d4e:	f1c1 0302 	rsb	r3, r1, #2
 8012d52:	9304      	str	r3, [sp, #16]
 8012d54:	b182      	cbz	r2, 8012d78 <__ieee754_pow+0xe8>
 8012d56:	e05f      	b.n	8012e18 <__ieee754_pow+0x188>
 8012d58:	2a00      	cmp	r2, #0
 8012d5a:	d15b      	bne.n	8012e14 <__ieee754_pow+0x184>
 8012d5c:	f1c3 0314 	rsb	r3, r3, #20
 8012d60:	fa48 f103 	asr.w	r1, r8, r3
 8012d64:	fa01 f303 	lsl.w	r3, r1, r3
 8012d68:	4543      	cmp	r3, r8
 8012d6a:	f040 8487 	bne.w	801367c <__ieee754_pow+0x9ec>
 8012d6e:	f001 0101 	and.w	r1, r1, #1
 8012d72:	f1c1 0302 	rsb	r3, r1, #2
 8012d76:	9304      	str	r3, [sp, #16]
 8012d78:	4b5c      	ldr	r3, [pc, #368]	; (8012eec <__ieee754_pow+0x25c>)
 8012d7a:	4598      	cmp	r8, r3
 8012d7c:	d132      	bne.n	8012de4 <__ieee754_pow+0x154>
 8012d7e:	f1b9 0f00 	cmp.w	r9, #0
 8012d82:	f280 8477 	bge.w	8013674 <__ieee754_pow+0x9e4>
 8012d86:	4959      	ldr	r1, [pc, #356]	; (8012eec <__ieee754_pow+0x25c>)
 8012d88:	4632      	mov	r2, r6
 8012d8a:	463b      	mov	r3, r7
 8012d8c:	2000      	movs	r0, #0
 8012d8e:	f7ed fd5d 	bl	800084c <__aeabi_ddiv>
 8012d92:	e79c      	b.n	8012cce <__ieee754_pow+0x3e>
 8012d94:	2300      	movs	r3, #0
 8012d96:	9304      	str	r3, [sp, #16]
 8012d98:	2a00      	cmp	r2, #0
 8012d9a:	d13d      	bne.n	8012e18 <__ieee754_pow+0x188>
 8012d9c:	4b51      	ldr	r3, [pc, #324]	; (8012ee4 <__ieee754_pow+0x254>)
 8012d9e:	4598      	cmp	r8, r3
 8012da0:	d1ea      	bne.n	8012d78 <__ieee754_pow+0xe8>
 8012da2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012da6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012daa:	ea53 030a 	orrs.w	r3, r3, sl
 8012dae:	f000 8459 	beq.w	8013664 <__ieee754_pow+0x9d4>
 8012db2:	4b4f      	ldr	r3, [pc, #316]	; (8012ef0 <__ieee754_pow+0x260>)
 8012db4:	429c      	cmp	r4, r3
 8012db6:	dd08      	ble.n	8012dca <__ieee754_pow+0x13a>
 8012db8:	f1b9 0f00 	cmp.w	r9, #0
 8012dbc:	f2c0 8456 	blt.w	801366c <__ieee754_pow+0x9dc>
 8012dc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012dc4:	e783      	b.n	8012cce <__ieee754_pow+0x3e>
 8012dc6:	2302      	movs	r3, #2
 8012dc8:	e7e5      	b.n	8012d96 <__ieee754_pow+0x106>
 8012dca:	f1b9 0f00 	cmp.w	r9, #0
 8012dce:	f04f 0000 	mov.w	r0, #0
 8012dd2:	f04f 0100 	mov.w	r1, #0
 8012dd6:	f6bf af7a 	bge.w	8012cce <__ieee754_pow+0x3e>
 8012dda:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012dde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012de2:	e774      	b.n	8012cce <__ieee754_pow+0x3e>
 8012de4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012de8:	d106      	bne.n	8012df8 <__ieee754_pow+0x168>
 8012dea:	4632      	mov	r2, r6
 8012dec:	463b      	mov	r3, r7
 8012dee:	4630      	mov	r0, r6
 8012df0:	4639      	mov	r1, r7
 8012df2:	f7ed fc01 	bl	80005f8 <__aeabi_dmul>
 8012df6:	e76a      	b.n	8012cce <__ieee754_pow+0x3e>
 8012df8:	4b3e      	ldr	r3, [pc, #248]	; (8012ef4 <__ieee754_pow+0x264>)
 8012dfa:	4599      	cmp	r9, r3
 8012dfc:	d10c      	bne.n	8012e18 <__ieee754_pow+0x188>
 8012dfe:	2d00      	cmp	r5, #0
 8012e00:	db0a      	blt.n	8012e18 <__ieee754_pow+0x188>
 8012e02:	ec47 6b10 	vmov	d0, r6, r7
 8012e06:	b009      	add	sp, #36	; 0x24
 8012e08:	ecbd 8b06 	vpop	{d8-d10}
 8012e0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e10:	f7ff bbde 	b.w	80125d0 <__ieee754_sqrt>
 8012e14:	2300      	movs	r3, #0
 8012e16:	9304      	str	r3, [sp, #16]
 8012e18:	ec47 6b10 	vmov	d0, r6, r7
 8012e1c:	f7ff fbc4 	bl	80125a8 <fabs>
 8012e20:	ec51 0b10 	vmov	r0, r1, d0
 8012e24:	f1ba 0f00 	cmp.w	sl, #0
 8012e28:	d129      	bne.n	8012e7e <__ieee754_pow+0x1ee>
 8012e2a:	b124      	cbz	r4, 8012e36 <__ieee754_pow+0x1a6>
 8012e2c:	4b2f      	ldr	r3, [pc, #188]	; (8012eec <__ieee754_pow+0x25c>)
 8012e2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012e32:	429a      	cmp	r2, r3
 8012e34:	d123      	bne.n	8012e7e <__ieee754_pow+0x1ee>
 8012e36:	f1b9 0f00 	cmp.w	r9, #0
 8012e3a:	da05      	bge.n	8012e48 <__ieee754_pow+0x1b8>
 8012e3c:	4602      	mov	r2, r0
 8012e3e:	460b      	mov	r3, r1
 8012e40:	2000      	movs	r0, #0
 8012e42:	492a      	ldr	r1, [pc, #168]	; (8012eec <__ieee754_pow+0x25c>)
 8012e44:	f7ed fd02 	bl	800084c <__aeabi_ddiv>
 8012e48:	2d00      	cmp	r5, #0
 8012e4a:	f6bf af40 	bge.w	8012cce <__ieee754_pow+0x3e>
 8012e4e:	9b04      	ldr	r3, [sp, #16]
 8012e50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012e54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012e58:	431c      	orrs	r4, r3
 8012e5a:	d108      	bne.n	8012e6e <__ieee754_pow+0x1de>
 8012e5c:	4602      	mov	r2, r0
 8012e5e:	460b      	mov	r3, r1
 8012e60:	4610      	mov	r0, r2
 8012e62:	4619      	mov	r1, r3
 8012e64:	f7ed fa10 	bl	8000288 <__aeabi_dsub>
 8012e68:	4602      	mov	r2, r0
 8012e6a:	460b      	mov	r3, r1
 8012e6c:	e78f      	b.n	8012d8e <__ieee754_pow+0xfe>
 8012e6e:	9b04      	ldr	r3, [sp, #16]
 8012e70:	2b01      	cmp	r3, #1
 8012e72:	f47f af2c 	bne.w	8012cce <__ieee754_pow+0x3e>
 8012e76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e7a:	4619      	mov	r1, r3
 8012e7c:	e727      	b.n	8012cce <__ieee754_pow+0x3e>
 8012e7e:	0feb      	lsrs	r3, r5, #31
 8012e80:	3b01      	subs	r3, #1
 8012e82:	9306      	str	r3, [sp, #24]
 8012e84:	9a06      	ldr	r2, [sp, #24]
 8012e86:	9b04      	ldr	r3, [sp, #16]
 8012e88:	4313      	orrs	r3, r2
 8012e8a:	d102      	bne.n	8012e92 <__ieee754_pow+0x202>
 8012e8c:	4632      	mov	r2, r6
 8012e8e:	463b      	mov	r3, r7
 8012e90:	e7e6      	b.n	8012e60 <__ieee754_pow+0x1d0>
 8012e92:	4b19      	ldr	r3, [pc, #100]	; (8012ef8 <__ieee754_pow+0x268>)
 8012e94:	4598      	cmp	r8, r3
 8012e96:	f340 80fb 	ble.w	8013090 <__ieee754_pow+0x400>
 8012e9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012e9e:	4598      	cmp	r8, r3
 8012ea0:	4b13      	ldr	r3, [pc, #76]	; (8012ef0 <__ieee754_pow+0x260>)
 8012ea2:	dd0c      	ble.n	8012ebe <__ieee754_pow+0x22e>
 8012ea4:	429c      	cmp	r4, r3
 8012ea6:	dc0f      	bgt.n	8012ec8 <__ieee754_pow+0x238>
 8012ea8:	f1b9 0f00 	cmp.w	r9, #0
 8012eac:	da0f      	bge.n	8012ece <__ieee754_pow+0x23e>
 8012eae:	2000      	movs	r0, #0
 8012eb0:	b009      	add	sp, #36	; 0x24
 8012eb2:	ecbd 8b06 	vpop	{d8-d10}
 8012eb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eba:	f000 bcba 	b.w	8013832 <__math_oflow>
 8012ebe:	429c      	cmp	r4, r3
 8012ec0:	dbf2      	blt.n	8012ea8 <__ieee754_pow+0x218>
 8012ec2:	4b0a      	ldr	r3, [pc, #40]	; (8012eec <__ieee754_pow+0x25c>)
 8012ec4:	429c      	cmp	r4, r3
 8012ec6:	dd19      	ble.n	8012efc <__ieee754_pow+0x26c>
 8012ec8:	f1b9 0f00 	cmp.w	r9, #0
 8012ecc:	dcef      	bgt.n	8012eae <__ieee754_pow+0x21e>
 8012ece:	2000      	movs	r0, #0
 8012ed0:	b009      	add	sp, #36	; 0x24
 8012ed2:	ecbd 8b06 	vpop	{d8-d10}
 8012ed6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eda:	f000 bca1 	b.w	8013820 <__math_uflow>
 8012ede:	bf00      	nop
 8012ee0:	fff00000 	.word	0xfff00000
 8012ee4:	7ff00000 	.word	0x7ff00000
 8012ee8:	433fffff 	.word	0x433fffff
 8012eec:	3ff00000 	.word	0x3ff00000
 8012ef0:	3fefffff 	.word	0x3fefffff
 8012ef4:	3fe00000 	.word	0x3fe00000
 8012ef8:	41e00000 	.word	0x41e00000
 8012efc:	4b60      	ldr	r3, [pc, #384]	; (8013080 <__ieee754_pow+0x3f0>)
 8012efe:	2200      	movs	r2, #0
 8012f00:	f7ed f9c2 	bl	8000288 <__aeabi_dsub>
 8012f04:	a354      	add	r3, pc, #336	; (adr r3, 8013058 <__ieee754_pow+0x3c8>)
 8012f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f0a:	4604      	mov	r4, r0
 8012f0c:	460d      	mov	r5, r1
 8012f0e:	f7ed fb73 	bl	80005f8 <__aeabi_dmul>
 8012f12:	a353      	add	r3, pc, #332	; (adr r3, 8013060 <__ieee754_pow+0x3d0>)
 8012f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f18:	4606      	mov	r6, r0
 8012f1a:	460f      	mov	r7, r1
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	4629      	mov	r1, r5
 8012f20:	f7ed fb6a 	bl	80005f8 <__aeabi_dmul>
 8012f24:	4b57      	ldr	r3, [pc, #348]	; (8013084 <__ieee754_pow+0x3f4>)
 8012f26:	4682      	mov	sl, r0
 8012f28:	468b      	mov	fp, r1
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	4620      	mov	r0, r4
 8012f2e:	4629      	mov	r1, r5
 8012f30:	f7ed fb62 	bl	80005f8 <__aeabi_dmul>
 8012f34:	4602      	mov	r2, r0
 8012f36:	460b      	mov	r3, r1
 8012f38:	a14b      	add	r1, pc, #300	; (adr r1, 8013068 <__ieee754_pow+0x3d8>)
 8012f3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f3e:	f7ed f9a3 	bl	8000288 <__aeabi_dsub>
 8012f42:	4622      	mov	r2, r4
 8012f44:	462b      	mov	r3, r5
 8012f46:	f7ed fb57 	bl	80005f8 <__aeabi_dmul>
 8012f4a:	4602      	mov	r2, r0
 8012f4c:	460b      	mov	r3, r1
 8012f4e:	2000      	movs	r0, #0
 8012f50:	494d      	ldr	r1, [pc, #308]	; (8013088 <__ieee754_pow+0x3f8>)
 8012f52:	f7ed f999 	bl	8000288 <__aeabi_dsub>
 8012f56:	4622      	mov	r2, r4
 8012f58:	4680      	mov	r8, r0
 8012f5a:	4689      	mov	r9, r1
 8012f5c:	462b      	mov	r3, r5
 8012f5e:	4620      	mov	r0, r4
 8012f60:	4629      	mov	r1, r5
 8012f62:	f7ed fb49 	bl	80005f8 <__aeabi_dmul>
 8012f66:	4602      	mov	r2, r0
 8012f68:	460b      	mov	r3, r1
 8012f6a:	4640      	mov	r0, r8
 8012f6c:	4649      	mov	r1, r9
 8012f6e:	f7ed fb43 	bl	80005f8 <__aeabi_dmul>
 8012f72:	a33f      	add	r3, pc, #252	; (adr r3, 8013070 <__ieee754_pow+0x3e0>)
 8012f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f78:	f7ed fb3e 	bl	80005f8 <__aeabi_dmul>
 8012f7c:	4602      	mov	r2, r0
 8012f7e:	460b      	mov	r3, r1
 8012f80:	4650      	mov	r0, sl
 8012f82:	4659      	mov	r1, fp
 8012f84:	f7ed f980 	bl	8000288 <__aeabi_dsub>
 8012f88:	4602      	mov	r2, r0
 8012f8a:	460b      	mov	r3, r1
 8012f8c:	4680      	mov	r8, r0
 8012f8e:	4689      	mov	r9, r1
 8012f90:	4630      	mov	r0, r6
 8012f92:	4639      	mov	r1, r7
 8012f94:	f7ed f97a 	bl	800028c <__adddf3>
 8012f98:	2000      	movs	r0, #0
 8012f9a:	4632      	mov	r2, r6
 8012f9c:	463b      	mov	r3, r7
 8012f9e:	4604      	mov	r4, r0
 8012fa0:	460d      	mov	r5, r1
 8012fa2:	f7ed f971 	bl	8000288 <__aeabi_dsub>
 8012fa6:	4602      	mov	r2, r0
 8012fa8:	460b      	mov	r3, r1
 8012faa:	4640      	mov	r0, r8
 8012fac:	4649      	mov	r1, r9
 8012fae:	f7ed f96b 	bl	8000288 <__aeabi_dsub>
 8012fb2:	9b04      	ldr	r3, [sp, #16]
 8012fb4:	9a06      	ldr	r2, [sp, #24]
 8012fb6:	3b01      	subs	r3, #1
 8012fb8:	4313      	orrs	r3, r2
 8012fba:	4682      	mov	sl, r0
 8012fbc:	468b      	mov	fp, r1
 8012fbe:	f040 81e7 	bne.w	8013390 <__ieee754_pow+0x700>
 8012fc2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013078 <__ieee754_pow+0x3e8>
 8012fc6:	eeb0 8a47 	vmov.f32	s16, s14
 8012fca:	eef0 8a67 	vmov.f32	s17, s15
 8012fce:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012fd2:	2600      	movs	r6, #0
 8012fd4:	4632      	mov	r2, r6
 8012fd6:	463b      	mov	r3, r7
 8012fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fdc:	f7ed f954 	bl	8000288 <__aeabi_dsub>
 8012fe0:	4622      	mov	r2, r4
 8012fe2:	462b      	mov	r3, r5
 8012fe4:	f7ed fb08 	bl	80005f8 <__aeabi_dmul>
 8012fe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012fec:	4680      	mov	r8, r0
 8012fee:	4689      	mov	r9, r1
 8012ff0:	4650      	mov	r0, sl
 8012ff2:	4659      	mov	r1, fp
 8012ff4:	f7ed fb00 	bl	80005f8 <__aeabi_dmul>
 8012ff8:	4602      	mov	r2, r0
 8012ffa:	460b      	mov	r3, r1
 8012ffc:	4640      	mov	r0, r8
 8012ffe:	4649      	mov	r1, r9
 8013000:	f7ed f944 	bl	800028c <__adddf3>
 8013004:	4632      	mov	r2, r6
 8013006:	463b      	mov	r3, r7
 8013008:	4680      	mov	r8, r0
 801300a:	4689      	mov	r9, r1
 801300c:	4620      	mov	r0, r4
 801300e:	4629      	mov	r1, r5
 8013010:	f7ed faf2 	bl	80005f8 <__aeabi_dmul>
 8013014:	460b      	mov	r3, r1
 8013016:	4604      	mov	r4, r0
 8013018:	460d      	mov	r5, r1
 801301a:	4602      	mov	r2, r0
 801301c:	4649      	mov	r1, r9
 801301e:	4640      	mov	r0, r8
 8013020:	f7ed f934 	bl	800028c <__adddf3>
 8013024:	4b19      	ldr	r3, [pc, #100]	; (801308c <__ieee754_pow+0x3fc>)
 8013026:	4299      	cmp	r1, r3
 8013028:	ec45 4b19 	vmov	d9, r4, r5
 801302c:	4606      	mov	r6, r0
 801302e:	460f      	mov	r7, r1
 8013030:	468b      	mov	fp, r1
 8013032:	f340 82f0 	ble.w	8013616 <__ieee754_pow+0x986>
 8013036:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801303a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801303e:	4303      	orrs	r3, r0
 8013040:	f000 81e4 	beq.w	801340c <__ieee754_pow+0x77c>
 8013044:	ec51 0b18 	vmov	r0, r1, d8
 8013048:	2200      	movs	r2, #0
 801304a:	2300      	movs	r3, #0
 801304c:	f7ed fd46 	bl	8000adc <__aeabi_dcmplt>
 8013050:	3800      	subs	r0, #0
 8013052:	bf18      	it	ne
 8013054:	2001      	movne	r0, #1
 8013056:	e72b      	b.n	8012eb0 <__ieee754_pow+0x220>
 8013058:	60000000 	.word	0x60000000
 801305c:	3ff71547 	.word	0x3ff71547
 8013060:	f85ddf44 	.word	0xf85ddf44
 8013064:	3e54ae0b 	.word	0x3e54ae0b
 8013068:	55555555 	.word	0x55555555
 801306c:	3fd55555 	.word	0x3fd55555
 8013070:	652b82fe 	.word	0x652b82fe
 8013074:	3ff71547 	.word	0x3ff71547
 8013078:	00000000 	.word	0x00000000
 801307c:	bff00000 	.word	0xbff00000
 8013080:	3ff00000 	.word	0x3ff00000
 8013084:	3fd00000 	.word	0x3fd00000
 8013088:	3fe00000 	.word	0x3fe00000
 801308c:	408fffff 	.word	0x408fffff
 8013090:	4bd5      	ldr	r3, [pc, #852]	; (80133e8 <__ieee754_pow+0x758>)
 8013092:	402b      	ands	r3, r5
 8013094:	2200      	movs	r2, #0
 8013096:	b92b      	cbnz	r3, 80130a4 <__ieee754_pow+0x414>
 8013098:	4bd4      	ldr	r3, [pc, #848]	; (80133ec <__ieee754_pow+0x75c>)
 801309a:	f7ed faad 	bl	80005f8 <__aeabi_dmul>
 801309e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80130a2:	460c      	mov	r4, r1
 80130a4:	1523      	asrs	r3, r4, #20
 80130a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80130aa:	4413      	add	r3, r2
 80130ac:	9305      	str	r3, [sp, #20]
 80130ae:	4bd0      	ldr	r3, [pc, #832]	; (80133f0 <__ieee754_pow+0x760>)
 80130b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80130b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80130b8:	429c      	cmp	r4, r3
 80130ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80130be:	dd08      	ble.n	80130d2 <__ieee754_pow+0x442>
 80130c0:	4bcc      	ldr	r3, [pc, #816]	; (80133f4 <__ieee754_pow+0x764>)
 80130c2:	429c      	cmp	r4, r3
 80130c4:	f340 8162 	ble.w	801338c <__ieee754_pow+0x6fc>
 80130c8:	9b05      	ldr	r3, [sp, #20]
 80130ca:	3301      	adds	r3, #1
 80130cc:	9305      	str	r3, [sp, #20]
 80130ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80130d2:	2400      	movs	r4, #0
 80130d4:	00e3      	lsls	r3, r4, #3
 80130d6:	9307      	str	r3, [sp, #28]
 80130d8:	4bc7      	ldr	r3, [pc, #796]	; (80133f8 <__ieee754_pow+0x768>)
 80130da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80130de:	ed93 7b00 	vldr	d7, [r3]
 80130e2:	4629      	mov	r1, r5
 80130e4:	ec53 2b17 	vmov	r2, r3, d7
 80130e8:	eeb0 9a47 	vmov.f32	s18, s14
 80130ec:	eef0 9a67 	vmov.f32	s19, s15
 80130f0:	4682      	mov	sl, r0
 80130f2:	f7ed f8c9 	bl	8000288 <__aeabi_dsub>
 80130f6:	4652      	mov	r2, sl
 80130f8:	4606      	mov	r6, r0
 80130fa:	460f      	mov	r7, r1
 80130fc:	462b      	mov	r3, r5
 80130fe:	ec51 0b19 	vmov	r0, r1, d9
 8013102:	f7ed f8c3 	bl	800028c <__adddf3>
 8013106:	4602      	mov	r2, r0
 8013108:	460b      	mov	r3, r1
 801310a:	2000      	movs	r0, #0
 801310c:	49bb      	ldr	r1, [pc, #748]	; (80133fc <__ieee754_pow+0x76c>)
 801310e:	f7ed fb9d 	bl	800084c <__aeabi_ddiv>
 8013112:	ec41 0b1a 	vmov	d10, r0, r1
 8013116:	4602      	mov	r2, r0
 8013118:	460b      	mov	r3, r1
 801311a:	4630      	mov	r0, r6
 801311c:	4639      	mov	r1, r7
 801311e:	f7ed fa6b 	bl	80005f8 <__aeabi_dmul>
 8013122:	2300      	movs	r3, #0
 8013124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013128:	9302      	str	r3, [sp, #8]
 801312a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801312e:	46ab      	mov	fp, r5
 8013130:	106d      	asrs	r5, r5, #1
 8013132:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013136:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801313a:	ec41 0b18 	vmov	d8, r0, r1
 801313e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8013142:	2200      	movs	r2, #0
 8013144:	4640      	mov	r0, r8
 8013146:	4649      	mov	r1, r9
 8013148:	4614      	mov	r4, r2
 801314a:	461d      	mov	r5, r3
 801314c:	f7ed fa54 	bl	80005f8 <__aeabi_dmul>
 8013150:	4602      	mov	r2, r0
 8013152:	460b      	mov	r3, r1
 8013154:	4630      	mov	r0, r6
 8013156:	4639      	mov	r1, r7
 8013158:	f7ed f896 	bl	8000288 <__aeabi_dsub>
 801315c:	ec53 2b19 	vmov	r2, r3, d9
 8013160:	4606      	mov	r6, r0
 8013162:	460f      	mov	r7, r1
 8013164:	4620      	mov	r0, r4
 8013166:	4629      	mov	r1, r5
 8013168:	f7ed f88e 	bl	8000288 <__aeabi_dsub>
 801316c:	4602      	mov	r2, r0
 801316e:	460b      	mov	r3, r1
 8013170:	4650      	mov	r0, sl
 8013172:	4659      	mov	r1, fp
 8013174:	f7ed f888 	bl	8000288 <__aeabi_dsub>
 8013178:	4642      	mov	r2, r8
 801317a:	464b      	mov	r3, r9
 801317c:	f7ed fa3c 	bl	80005f8 <__aeabi_dmul>
 8013180:	4602      	mov	r2, r0
 8013182:	460b      	mov	r3, r1
 8013184:	4630      	mov	r0, r6
 8013186:	4639      	mov	r1, r7
 8013188:	f7ed f87e 	bl	8000288 <__aeabi_dsub>
 801318c:	ec53 2b1a 	vmov	r2, r3, d10
 8013190:	f7ed fa32 	bl	80005f8 <__aeabi_dmul>
 8013194:	ec53 2b18 	vmov	r2, r3, d8
 8013198:	ec41 0b19 	vmov	d9, r0, r1
 801319c:	ec51 0b18 	vmov	r0, r1, d8
 80131a0:	f7ed fa2a 	bl	80005f8 <__aeabi_dmul>
 80131a4:	a37c      	add	r3, pc, #496	; (adr r3, 8013398 <__ieee754_pow+0x708>)
 80131a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131aa:	4604      	mov	r4, r0
 80131ac:	460d      	mov	r5, r1
 80131ae:	f7ed fa23 	bl	80005f8 <__aeabi_dmul>
 80131b2:	a37b      	add	r3, pc, #492	; (adr r3, 80133a0 <__ieee754_pow+0x710>)
 80131b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131b8:	f7ed f868 	bl	800028c <__adddf3>
 80131bc:	4622      	mov	r2, r4
 80131be:	462b      	mov	r3, r5
 80131c0:	f7ed fa1a 	bl	80005f8 <__aeabi_dmul>
 80131c4:	a378      	add	r3, pc, #480	; (adr r3, 80133a8 <__ieee754_pow+0x718>)
 80131c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ca:	f7ed f85f 	bl	800028c <__adddf3>
 80131ce:	4622      	mov	r2, r4
 80131d0:	462b      	mov	r3, r5
 80131d2:	f7ed fa11 	bl	80005f8 <__aeabi_dmul>
 80131d6:	a376      	add	r3, pc, #472	; (adr r3, 80133b0 <__ieee754_pow+0x720>)
 80131d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131dc:	f7ed f856 	bl	800028c <__adddf3>
 80131e0:	4622      	mov	r2, r4
 80131e2:	462b      	mov	r3, r5
 80131e4:	f7ed fa08 	bl	80005f8 <__aeabi_dmul>
 80131e8:	a373      	add	r3, pc, #460	; (adr r3, 80133b8 <__ieee754_pow+0x728>)
 80131ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ee:	f7ed f84d 	bl	800028c <__adddf3>
 80131f2:	4622      	mov	r2, r4
 80131f4:	462b      	mov	r3, r5
 80131f6:	f7ed f9ff 	bl	80005f8 <__aeabi_dmul>
 80131fa:	a371      	add	r3, pc, #452	; (adr r3, 80133c0 <__ieee754_pow+0x730>)
 80131fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013200:	f7ed f844 	bl	800028c <__adddf3>
 8013204:	4622      	mov	r2, r4
 8013206:	4606      	mov	r6, r0
 8013208:	460f      	mov	r7, r1
 801320a:	462b      	mov	r3, r5
 801320c:	4620      	mov	r0, r4
 801320e:	4629      	mov	r1, r5
 8013210:	f7ed f9f2 	bl	80005f8 <__aeabi_dmul>
 8013214:	4602      	mov	r2, r0
 8013216:	460b      	mov	r3, r1
 8013218:	4630      	mov	r0, r6
 801321a:	4639      	mov	r1, r7
 801321c:	f7ed f9ec 	bl	80005f8 <__aeabi_dmul>
 8013220:	4642      	mov	r2, r8
 8013222:	4604      	mov	r4, r0
 8013224:	460d      	mov	r5, r1
 8013226:	464b      	mov	r3, r9
 8013228:	ec51 0b18 	vmov	r0, r1, d8
 801322c:	f7ed f82e 	bl	800028c <__adddf3>
 8013230:	ec53 2b19 	vmov	r2, r3, d9
 8013234:	f7ed f9e0 	bl	80005f8 <__aeabi_dmul>
 8013238:	4622      	mov	r2, r4
 801323a:	462b      	mov	r3, r5
 801323c:	f7ed f826 	bl	800028c <__adddf3>
 8013240:	4642      	mov	r2, r8
 8013242:	4682      	mov	sl, r0
 8013244:	468b      	mov	fp, r1
 8013246:	464b      	mov	r3, r9
 8013248:	4640      	mov	r0, r8
 801324a:	4649      	mov	r1, r9
 801324c:	f7ed f9d4 	bl	80005f8 <__aeabi_dmul>
 8013250:	4b6b      	ldr	r3, [pc, #428]	; (8013400 <__ieee754_pow+0x770>)
 8013252:	2200      	movs	r2, #0
 8013254:	4606      	mov	r6, r0
 8013256:	460f      	mov	r7, r1
 8013258:	f7ed f818 	bl	800028c <__adddf3>
 801325c:	4652      	mov	r2, sl
 801325e:	465b      	mov	r3, fp
 8013260:	f7ed f814 	bl	800028c <__adddf3>
 8013264:	2000      	movs	r0, #0
 8013266:	4604      	mov	r4, r0
 8013268:	460d      	mov	r5, r1
 801326a:	4602      	mov	r2, r0
 801326c:	460b      	mov	r3, r1
 801326e:	4640      	mov	r0, r8
 8013270:	4649      	mov	r1, r9
 8013272:	f7ed f9c1 	bl	80005f8 <__aeabi_dmul>
 8013276:	4b62      	ldr	r3, [pc, #392]	; (8013400 <__ieee754_pow+0x770>)
 8013278:	4680      	mov	r8, r0
 801327a:	4689      	mov	r9, r1
 801327c:	2200      	movs	r2, #0
 801327e:	4620      	mov	r0, r4
 8013280:	4629      	mov	r1, r5
 8013282:	f7ed f801 	bl	8000288 <__aeabi_dsub>
 8013286:	4632      	mov	r2, r6
 8013288:	463b      	mov	r3, r7
 801328a:	f7ec fffd 	bl	8000288 <__aeabi_dsub>
 801328e:	4602      	mov	r2, r0
 8013290:	460b      	mov	r3, r1
 8013292:	4650      	mov	r0, sl
 8013294:	4659      	mov	r1, fp
 8013296:	f7ec fff7 	bl	8000288 <__aeabi_dsub>
 801329a:	ec53 2b18 	vmov	r2, r3, d8
 801329e:	f7ed f9ab 	bl	80005f8 <__aeabi_dmul>
 80132a2:	4622      	mov	r2, r4
 80132a4:	4606      	mov	r6, r0
 80132a6:	460f      	mov	r7, r1
 80132a8:	462b      	mov	r3, r5
 80132aa:	ec51 0b19 	vmov	r0, r1, d9
 80132ae:	f7ed f9a3 	bl	80005f8 <__aeabi_dmul>
 80132b2:	4602      	mov	r2, r0
 80132b4:	460b      	mov	r3, r1
 80132b6:	4630      	mov	r0, r6
 80132b8:	4639      	mov	r1, r7
 80132ba:	f7ec ffe7 	bl	800028c <__adddf3>
 80132be:	4606      	mov	r6, r0
 80132c0:	460f      	mov	r7, r1
 80132c2:	4602      	mov	r2, r0
 80132c4:	460b      	mov	r3, r1
 80132c6:	4640      	mov	r0, r8
 80132c8:	4649      	mov	r1, r9
 80132ca:	f7ec ffdf 	bl	800028c <__adddf3>
 80132ce:	a33e      	add	r3, pc, #248	; (adr r3, 80133c8 <__ieee754_pow+0x738>)
 80132d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d4:	2000      	movs	r0, #0
 80132d6:	4604      	mov	r4, r0
 80132d8:	460d      	mov	r5, r1
 80132da:	f7ed f98d 	bl	80005f8 <__aeabi_dmul>
 80132de:	4642      	mov	r2, r8
 80132e0:	ec41 0b18 	vmov	d8, r0, r1
 80132e4:	464b      	mov	r3, r9
 80132e6:	4620      	mov	r0, r4
 80132e8:	4629      	mov	r1, r5
 80132ea:	f7ec ffcd 	bl	8000288 <__aeabi_dsub>
 80132ee:	4602      	mov	r2, r0
 80132f0:	460b      	mov	r3, r1
 80132f2:	4630      	mov	r0, r6
 80132f4:	4639      	mov	r1, r7
 80132f6:	f7ec ffc7 	bl	8000288 <__aeabi_dsub>
 80132fa:	a335      	add	r3, pc, #212	; (adr r3, 80133d0 <__ieee754_pow+0x740>)
 80132fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013300:	f7ed f97a 	bl	80005f8 <__aeabi_dmul>
 8013304:	a334      	add	r3, pc, #208	; (adr r3, 80133d8 <__ieee754_pow+0x748>)
 8013306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330a:	4606      	mov	r6, r0
 801330c:	460f      	mov	r7, r1
 801330e:	4620      	mov	r0, r4
 8013310:	4629      	mov	r1, r5
 8013312:	f7ed f971 	bl	80005f8 <__aeabi_dmul>
 8013316:	4602      	mov	r2, r0
 8013318:	460b      	mov	r3, r1
 801331a:	4630      	mov	r0, r6
 801331c:	4639      	mov	r1, r7
 801331e:	f7ec ffb5 	bl	800028c <__adddf3>
 8013322:	9a07      	ldr	r2, [sp, #28]
 8013324:	4b37      	ldr	r3, [pc, #220]	; (8013404 <__ieee754_pow+0x774>)
 8013326:	4413      	add	r3, r2
 8013328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801332c:	f7ec ffae 	bl	800028c <__adddf3>
 8013330:	4682      	mov	sl, r0
 8013332:	9805      	ldr	r0, [sp, #20]
 8013334:	468b      	mov	fp, r1
 8013336:	f7ed f8f5 	bl	8000524 <__aeabi_i2d>
 801333a:	9a07      	ldr	r2, [sp, #28]
 801333c:	4b32      	ldr	r3, [pc, #200]	; (8013408 <__ieee754_pow+0x778>)
 801333e:	4413      	add	r3, r2
 8013340:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013344:	4606      	mov	r6, r0
 8013346:	460f      	mov	r7, r1
 8013348:	4652      	mov	r2, sl
 801334a:	465b      	mov	r3, fp
 801334c:	ec51 0b18 	vmov	r0, r1, d8
 8013350:	f7ec ff9c 	bl	800028c <__adddf3>
 8013354:	4642      	mov	r2, r8
 8013356:	464b      	mov	r3, r9
 8013358:	f7ec ff98 	bl	800028c <__adddf3>
 801335c:	4632      	mov	r2, r6
 801335e:	463b      	mov	r3, r7
 8013360:	f7ec ff94 	bl	800028c <__adddf3>
 8013364:	2000      	movs	r0, #0
 8013366:	4632      	mov	r2, r6
 8013368:	463b      	mov	r3, r7
 801336a:	4604      	mov	r4, r0
 801336c:	460d      	mov	r5, r1
 801336e:	f7ec ff8b 	bl	8000288 <__aeabi_dsub>
 8013372:	4642      	mov	r2, r8
 8013374:	464b      	mov	r3, r9
 8013376:	f7ec ff87 	bl	8000288 <__aeabi_dsub>
 801337a:	ec53 2b18 	vmov	r2, r3, d8
 801337e:	f7ec ff83 	bl	8000288 <__aeabi_dsub>
 8013382:	4602      	mov	r2, r0
 8013384:	460b      	mov	r3, r1
 8013386:	4650      	mov	r0, sl
 8013388:	4659      	mov	r1, fp
 801338a:	e610      	b.n	8012fae <__ieee754_pow+0x31e>
 801338c:	2401      	movs	r4, #1
 801338e:	e6a1      	b.n	80130d4 <__ieee754_pow+0x444>
 8013390:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80133e0 <__ieee754_pow+0x750>
 8013394:	e617      	b.n	8012fc6 <__ieee754_pow+0x336>
 8013396:	bf00      	nop
 8013398:	4a454eef 	.word	0x4a454eef
 801339c:	3fca7e28 	.word	0x3fca7e28
 80133a0:	93c9db65 	.word	0x93c9db65
 80133a4:	3fcd864a 	.word	0x3fcd864a
 80133a8:	a91d4101 	.word	0xa91d4101
 80133ac:	3fd17460 	.word	0x3fd17460
 80133b0:	518f264d 	.word	0x518f264d
 80133b4:	3fd55555 	.word	0x3fd55555
 80133b8:	db6fabff 	.word	0xdb6fabff
 80133bc:	3fdb6db6 	.word	0x3fdb6db6
 80133c0:	33333303 	.word	0x33333303
 80133c4:	3fe33333 	.word	0x3fe33333
 80133c8:	e0000000 	.word	0xe0000000
 80133cc:	3feec709 	.word	0x3feec709
 80133d0:	dc3a03fd 	.word	0xdc3a03fd
 80133d4:	3feec709 	.word	0x3feec709
 80133d8:	145b01f5 	.word	0x145b01f5
 80133dc:	be3e2fe0 	.word	0xbe3e2fe0
 80133e0:	00000000 	.word	0x00000000
 80133e4:	3ff00000 	.word	0x3ff00000
 80133e8:	7ff00000 	.word	0x7ff00000
 80133ec:	43400000 	.word	0x43400000
 80133f0:	0003988e 	.word	0x0003988e
 80133f4:	000bb679 	.word	0x000bb679
 80133f8:	08013e10 	.word	0x08013e10
 80133fc:	3ff00000 	.word	0x3ff00000
 8013400:	40080000 	.word	0x40080000
 8013404:	08013e30 	.word	0x08013e30
 8013408:	08013e20 	.word	0x08013e20
 801340c:	a3b3      	add	r3, pc, #716	; (adr r3, 80136dc <__ieee754_pow+0xa4c>)
 801340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013412:	4640      	mov	r0, r8
 8013414:	4649      	mov	r1, r9
 8013416:	f7ec ff39 	bl	800028c <__adddf3>
 801341a:	4622      	mov	r2, r4
 801341c:	ec41 0b1a 	vmov	d10, r0, r1
 8013420:	462b      	mov	r3, r5
 8013422:	4630      	mov	r0, r6
 8013424:	4639      	mov	r1, r7
 8013426:	f7ec ff2f 	bl	8000288 <__aeabi_dsub>
 801342a:	4602      	mov	r2, r0
 801342c:	460b      	mov	r3, r1
 801342e:	ec51 0b1a 	vmov	r0, r1, d10
 8013432:	f7ed fb71 	bl	8000b18 <__aeabi_dcmpgt>
 8013436:	2800      	cmp	r0, #0
 8013438:	f47f ae04 	bne.w	8013044 <__ieee754_pow+0x3b4>
 801343c:	4aa2      	ldr	r2, [pc, #648]	; (80136c8 <__ieee754_pow+0xa38>)
 801343e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013442:	4293      	cmp	r3, r2
 8013444:	f340 8107 	ble.w	8013656 <__ieee754_pow+0x9c6>
 8013448:	151b      	asrs	r3, r3, #20
 801344a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801344e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013452:	fa4a fa03 	asr.w	sl, sl, r3
 8013456:	44da      	add	sl, fp
 8013458:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801345c:	489b      	ldr	r0, [pc, #620]	; (80136cc <__ieee754_pow+0xa3c>)
 801345e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013462:	4108      	asrs	r0, r1
 8013464:	ea00 030a 	and.w	r3, r0, sl
 8013468:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801346c:	f1c1 0114 	rsb	r1, r1, #20
 8013470:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013474:	fa4a fa01 	asr.w	sl, sl, r1
 8013478:	f1bb 0f00 	cmp.w	fp, #0
 801347c:	f04f 0200 	mov.w	r2, #0
 8013480:	4620      	mov	r0, r4
 8013482:	4629      	mov	r1, r5
 8013484:	bfb8      	it	lt
 8013486:	f1ca 0a00 	rsblt	sl, sl, #0
 801348a:	f7ec fefd 	bl	8000288 <__aeabi_dsub>
 801348e:	ec41 0b19 	vmov	d9, r0, r1
 8013492:	4642      	mov	r2, r8
 8013494:	464b      	mov	r3, r9
 8013496:	ec51 0b19 	vmov	r0, r1, d9
 801349a:	f7ec fef7 	bl	800028c <__adddf3>
 801349e:	a37a      	add	r3, pc, #488	; (adr r3, 8013688 <__ieee754_pow+0x9f8>)
 80134a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a4:	2000      	movs	r0, #0
 80134a6:	4604      	mov	r4, r0
 80134a8:	460d      	mov	r5, r1
 80134aa:	f7ed f8a5 	bl	80005f8 <__aeabi_dmul>
 80134ae:	ec53 2b19 	vmov	r2, r3, d9
 80134b2:	4606      	mov	r6, r0
 80134b4:	460f      	mov	r7, r1
 80134b6:	4620      	mov	r0, r4
 80134b8:	4629      	mov	r1, r5
 80134ba:	f7ec fee5 	bl	8000288 <__aeabi_dsub>
 80134be:	4602      	mov	r2, r0
 80134c0:	460b      	mov	r3, r1
 80134c2:	4640      	mov	r0, r8
 80134c4:	4649      	mov	r1, r9
 80134c6:	f7ec fedf 	bl	8000288 <__aeabi_dsub>
 80134ca:	a371      	add	r3, pc, #452	; (adr r3, 8013690 <__ieee754_pow+0xa00>)
 80134cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d0:	f7ed f892 	bl	80005f8 <__aeabi_dmul>
 80134d4:	a370      	add	r3, pc, #448	; (adr r3, 8013698 <__ieee754_pow+0xa08>)
 80134d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134da:	4680      	mov	r8, r0
 80134dc:	4689      	mov	r9, r1
 80134de:	4620      	mov	r0, r4
 80134e0:	4629      	mov	r1, r5
 80134e2:	f7ed f889 	bl	80005f8 <__aeabi_dmul>
 80134e6:	4602      	mov	r2, r0
 80134e8:	460b      	mov	r3, r1
 80134ea:	4640      	mov	r0, r8
 80134ec:	4649      	mov	r1, r9
 80134ee:	f7ec fecd 	bl	800028c <__adddf3>
 80134f2:	4604      	mov	r4, r0
 80134f4:	460d      	mov	r5, r1
 80134f6:	4602      	mov	r2, r0
 80134f8:	460b      	mov	r3, r1
 80134fa:	4630      	mov	r0, r6
 80134fc:	4639      	mov	r1, r7
 80134fe:	f7ec fec5 	bl	800028c <__adddf3>
 8013502:	4632      	mov	r2, r6
 8013504:	463b      	mov	r3, r7
 8013506:	4680      	mov	r8, r0
 8013508:	4689      	mov	r9, r1
 801350a:	f7ec febd 	bl	8000288 <__aeabi_dsub>
 801350e:	4602      	mov	r2, r0
 8013510:	460b      	mov	r3, r1
 8013512:	4620      	mov	r0, r4
 8013514:	4629      	mov	r1, r5
 8013516:	f7ec feb7 	bl	8000288 <__aeabi_dsub>
 801351a:	4642      	mov	r2, r8
 801351c:	4606      	mov	r6, r0
 801351e:	460f      	mov	r7, r1
 8013520:	464b      	mov	r3, r9
 8013522:	4640      	mov	r0, r8
 8013524:	4649      	mov	r1, r9
 8013526:	f7ed f867 	bl	80005f8 <__aeabi_dmul>
 801352a:	a35d      	add	r3, pc, #372	; (adr r3, 80136a0 <__ieee754_pow+0xa10>)
 801352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013530:	4604      	mov	r4, r0
 8013532:	460d      	mov	r5, r1
 8013534:	f7ed f860 	bl	80005f8 <__aeabi_dmul>
 8013538:	a35b      	add	r3, pc, #364	; (adr r3, 80136a8 <__ieee754_pow+0xa18>)
 801353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801353e:	f7ec fea3 	bl	8000288 <__aeabi_dsub>
 8013542:	4622      	mov	r2, r4
 8013544:	462b      	mov	r3, r5
 8013546:	f7ed f857 	bl	80005f8 <__aeabi_dmul>
 801354a:	a359      	add	r3, pc, #356	; (adr r3, 80136b0 <__ieee754_pow+0xa20>)
 801354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013550:	f7ec fe9c 	bl	800028c <__adddf3>
 8013554:	4622      	mov	r2, r4
 8013556:	462b      	mov	r3, r5
 8013558:	f7ed f84e 	bl	80005f8 <__aeabi_dmul>
 801355c:	a356      	add	r3, pc, #344	; (adr r3, 80136b8 <__ieee754_pow+0xa28>)
 801355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013562:	f7ec fe91 	bl	8000288 <__aeabi_dsub>
 8013566:	4622      	mov	r2, r4
 8013568:	462b      	mov	r3, r5
 801356a:	f7ed f845 	bl	80005f8 <__aeabi_dmul>
 801356e:	a354      	add	r3, pc, #336	; (adr r3, 80136c0 <__ieee754_pow+0xa30>)
 8013570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013574:	f7ec fe8a 	bl	800028c <__adddf3>
 8013578:	4622      	mov	r2, r4
 801357a:	462b      	mov	r3, r5
 801357c:	f7ed f83c 	bl	80005f8 <__aeabi_dmul>
 8013580:	4602      	mov	r2, r0
 8013582:	460b      	mov	r3, r1
 8013584:	4640      	mov	r0, r8
 8013586:	4649      	mov	r1, r9
 8013588:	f7ec fe7e 	bl	8000288 <__aeabi_dsub>
 801358c:	4604      	mov	r4, r0
 801358e:	460d      	mov	r5, r1
 8013590:	4602      	mov	r2, r0
 8013592:	460b      	mov	r3, r1
 8013594:	4640      	mov	r0, r8
 8013596:	4649      	mov	r1, r9
 8013598:	f7ed f82e 	bl	80005f8 <__aeabi_dmul>
 801359c:	2200      	movs	r2, #0
 801359e:	ec41 0b19 	vmov	d9, r0, r1
 80135a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80135a6:	4620      	mov	r0, r4
 80135a8:	4629      	mov	r1, r5
 80135aa:	f7ec fe6d 	bl	8000288 <__aeabi_dsub>
 80135ae:	4602      	mov	r2, r0
 80135b0:	460b      	mov	r3, r1
 80135b2:	ec51 0b19 	vmov	r0, r1, d9
 80135b6:	f7ed f949 	bl	800084c <__aeabi_ddiv>
 80135ba:	4632      	mov	r2, r6
 80135bc:	4604      	mov	r4, r0
 80135be:	460d      	mov	r5, r1
 80135c0:	463b      	mov	r3, r7
 80135c2:	4640      	mov	r0, r8
 80135c4:	4649      	mov	r1, r9
 80135c6:	f7ed f817 	bl	80005f8 <__aeabi_dmul>
 80135ca:	4632      	mov	r2, r6
 80135cc:	463b      	mov	r3, r7
 80135ce:	f7ec fe5d 	bl	800028c <__adddf3>
 80135d2:	4602      	mov	r2, r0
 80135d4:	460b      	mov	r3, r1
 80135d6:	4620      	mov	r0, r4
 80135d8:	4629      	mov	r1, r5
 80135da:	f7ec fe55 	bl	8000288 <__aeabi_dsub>
 80135de:	4642      	mov	r2, r8
 80135e0:	464b      	mov	r3, r9
 80135e2:	f7ec fe51 	bl	8000288 <__aeabi_dsub>
 80135e6:	460b      	mov	r3, r1
 80135e8:	4602      	mov	r2, r0
 80135ea:	4939      	ldr	r1, [pc, #228]	; (80136d0 <__ieee754_pow+0xa40>)
 80135ec:	2000      	movs	r0, #0
 80135ee:	f7ec fe4b 	bl	8000288 <__aeabi_dsub>
 80135f2:	ec41 0b10 	vmov	d0, r0, r1
 80135f6:	ee10 3a90 	vmov	r3, s1
 80135fa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80135fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013602:	da2b      	bge.n	801365c <__ieee754_pow+0x9cc>
 8013604:	4650      	mov	r0, sl
 8013606:	f000 f86f 	bl	80136e8 <scalbn>
 801360a:	ec51 0b10 	vmov	r0, r1, d0
 801360e:	ec53 2b18 	vmov	r2, r3, d8
 8013612:	f7ff bbee 	b.w	8012df2 <__ieee754_pow+0x162>
 8013616:	4b2f      	ldr	r3, [pc, #188]	; (80136d4 <__ieee754_pow+0xa44>)
 8013618:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801361c:	429e      	cmp	r6, r3
 801361e:	f77f af0d 	ble.w	801343c <__ieee754_pow+0x7ac>
 8013622:	4b2d      	ldr	r3, [pc, #180]	; (80136d8 <__ieee754_pow+0xa48>)
 8013624:	440b      	add	r3, r1
 8013626:	4303      	orrs	r3, r0
 8013628:	d009      	beq.n	801363e <__ieee754_pow+0x9ae>
 801362a:	ec51 0b18 	vmov	r0, r1, d8
 801362e:	2200      	movs	r2, #0
 8013630:	2300      	movs	r3, #0
 8013632:	f7ed fa53 	bl	8000adc <__aeabi_dcmplt>
 8013636:	3800      	subs	r0, #0
 8013638:	bf18      	it	ne
 801363a:	2001      	movne	r0, #1
 801363c:	e448      	b.n	8012ed0 <__ieee754_pow+0x240>
 801363e:	4622      	mov	r2, r4
 8013640:	462b      	mov	r3, r5
 8013642:	f7ec fe21 	bl	8000288 <__aeabi_dsub>
 8013646:	4642      	mov	r2, r8
 8013648:	464b      	mov	r3, r9
 801364a:	f7ed fa5b 	bl	8000b04 <__aeabi_dcmpge>
 801364e:	2800      	cmp	r0, #0
 8013650:	f43f aef4 	beq.w	801343c <__ieee754_pow+0x7ac>
 8013654:	e7e9      	b.n	801362a <__ieee754_pow+0x99a>
 8013656:	f04f 0a00 	mov.w	sl, #0
 801365a:	e71a      	b.n	8013492 <__ieee754_pow+0x802>
 801365c:	ec51 0b10 	vmov	r0, r1, d0
 8013660:	4619      	mov	r1, r3
 8013662:	e7d4      	b.n	801360e <__ieee754_pow+0x97e>
 8013664:	491a      	ldr	r1, [pc, #104]	; (80136d0 <__ieee754_pow+0xa40>)
 8013666:	2000      	movs	r0, #0
 8013668:	f7ff bb31 	b.w	8012cce <__ieee754_pow+0x3e>
 801366c:	2000      	movs	r0, #0
 801366e:	2100      	movs	r1, #0
 8013670:	f7ff bb2d 	b.w	8012cce <__ieee754_pow+0x3e>
 8013674:	4630      	mov	r0, r6
 8013676:	4639      	mov	r1, r7
 8013678:	f7ff bb29 	b.w	8012cce <__ieee754_pow+0x3e>
 801367c:	9204      	str	r2, [sp, #16]
 801367e:	f7ff bb7b 	b.w	8012d78 <__ieee754_pow+0xe8>
 8013682:	2300      	movs	r3, #0
 8013684:	f7ff bb65 	b.w	8012d52 <__ieee754_pow+0xc2>
 8013688:	00000000 	.word	0x00000000
 801368c:	3fe62e43 	.word	0x3fe62e43
 8013690:	fefa39ef 	.word	0xfefa39ef
 8013694:	3fe62e42 	.word	0x3fe62e42
 8013698:	0ca86c39 	.word	0x0ca86c39
 801369c:	be205c61 	.word	0xbe205c61
 80136a0:	72bea4d0 	.word	0x72bea4d0
 80136a4:	3e663769 	.word	0x3e663769
 80136a8:	c5d26bf1 	.word	0xc5d26bf1
 80136ac:	3ebbbd41 	.word	0x3ebbbd41
 80136b0:	af25de2c 	.word	0xaf25de2c
 80136b4:	3f11566a 	.word	0x3f11566a
 80136b8:	16bebd93 	.word	0x16bebd93
 80136bc:	3f66c16c 	.word	0x3f66c16c
 80136c0:	5555553e 	.word	0x5555553e
 80136c4:	3fc55555 	.word	0x3fc55555
 80136c8:	3fe00000 	.word	0x3fe00000
 80136cc:	fff00000 	.word	0xfff00000
 80136d0:	3ff00000 	.word	0x3ff00000
 80136d4:	4090cbff 	.word	0x4090cbff
 80136d8:	3f6f3400 	.word	0x3f6f3400
 80136dc:	652b82fe 	.word	0x652b82fe
 80136e0:	3c971547 	.word	0x3c971547
 80136e4:	00000000 	.word	0x00000000

080136e8 <scalbn>:
 80136e8:	b570      	push	{r4, r5, r6, lr}
 80136ea:	ec55 4b10 	vmov	r4, r5, d0
 80136ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80136f2:	4606      	mov	r6, r0
 80136f4:	462b      	mov	r3, r5
 80136f6:	b999      	cbnz	r1, 8013720 <scalbn+0x38>
 80136f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80136fc:	4323      	orrs	r3, r4
 80136fe:	d03f      	beq.n	8013780 <scalbn+0x98>
 8013700:	4b35      	ldr	r3, [pc, #212]	; (80137d8 <scalbn+0xf0>)
 8013702:	4629      	mov	r1, r5
 8013704:	ee10 0a10 	vmov	r0, s0
 8013708:	2200      	movs	r2, #0
 801370a:	f7ec ff75 	bl	80005f8 <__aeabi_dmul>
 801370e:	4b33      	ldr	r3, [pc, #204]	; (80137dc <scalbn+0xf4>)
 8013710:	429e      	cmp	r6, r3
 8013712:	4604      	mov	r4, r0
 8013714:	460d      	mov	r5, r1
 8013716:	da10      	bge.n	801373a <scalbn+0x52>
 8013718:	a327      	add	r3, pc, #156	; (adr r3, 80137b8 <scalbn+0xd0>)
 801371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801371e:	e01f      	b.n	8013760 <scalbn+0x78>
 8013720:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013724:	4291      	cmp	r1, r2
 8013726:	d10c      	bne.n	8013742 <scalbn+0x5a>
 8013728:	ee10 2a10 	vmov	r2, s0
 801372c:	4620      	mov	r0, r4
 801372e:	4629      	mov	r1, r5
 8013730:	f7ec fdac 	bl	800028c <__adddf3>
 8013734:	4604      	mov	r4, r0
 8013736:	460d      	mov	r5, r1
 8013738:	e022      	b.n	8013780 <scalbn+0x98>
 801373a:	460b      	mov	r3, r1
 801373c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013740:	3936      	subs	r1, #54	; 0x36
 8013742:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013746:	4296      	cmp	r6, r2
 8013748:	dd0d      	ble.n	8013766 <scalbn+0x7e>
 801374a:	2d00      	cmp	r5, #0
 801374c:	a11c      	add	r1, pc, #112	; (adr r1, 80137c0 <scalbn+0xd8>)
 801374e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013752:	da02      	bge.n	801375a <scalbn+0x72>
 8013754:	a11c      	add	r1, pc, #112	; (adr r1, 80137c8 <scalbn+0xe0>)
 8013756:	e9d1 0100 	ldrd	r0, r1, [r1]
 801375a:	a319      	add	r3, pc, #100	; (adr r3, 80137c0 <scalbn+0xd8>)
 801375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013760:	f7ec ff4a 	bl	80005f8 <__aeabi_dmul>
 8013764:	e7e6      	b.n	8013734 <scalbn+0x4c>
 8013766:	1872      	adds	r2, r6, r1
 8013768:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801376c:	428a      	cmp	r2, r1
 801376e:	dcec      	bgt.n	801374a <scalbn+0x62>
 8013770:	2a00      	cmp	r2, #0
 8013772:	dd08      	ble.n	8013786 <scalbn+0x9e>
 8013774:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013778:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801377c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013780:	ec45 4b10 	vmov	d0, r4, r5
 8013784:	bd70      	pop	{r4, r5, r6, pc}
 8013786:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801378a:	da08      	bge.n	801379e <scalbn+0xb6>
 801378c:	2d00      	cmp	r5, #0
 801378e:	a10a      	add	r1, pc, #40	; (adr r1, 80137b8 <scalbn+0xd0>)
 8013790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013794:	dac0      	bge.n	8013718 <scalbn+0x30>
 8013796:	a10e      	add	r1, pc, #56	; (adr r1, 80137d0 <scalbn+0xe8>)
 8013798:	e9d1 0100 	ldrd	r0, r1, [r1]
 801379c:	e7bc      	b.n	8013718 <scalbn+0x30>
 801379e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80137a2:	3236      	adds	r2, #54	; 0x36
 80137a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80137a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80137ac:	4620      	mov	r0, r4
 80137ae:	4b0c      	ldr	r3, [pc, #48]	; (80137e0 <scalbn+0xf8>)
 80137b0:	2200      	movs	r2, #0
 80137b2:	e7d5      	b.n	8013760 <scalbn+0x78>
 80137b4:	f3af 8000 	nop.w
 80137b8:	c2f8f359 	.word	0xc2f8f359
 80137bc:	01a56e1f 	.word	0x01a56e1f
 80137c0:	8800759c 	.word	0x8800759c
 80137c4:	7e37e43c 	.word	0x7e37e43c
 80137c8:	8800759c 	.word	0x8800759c
 80137cc:	fe37e43c 	.word	0xfe37e43c
 80137d0:	c2f8f359 	.word	0xc2f8f359
 80137d4:	81a56e1f 	.word	0x81a56e1f
 80137d8:	43500000 	.word	0x43500000
 80137dc:	ffff3cb0 	.word	0xffff3cb0
 80137e0:	3c900000 	.word	0x3c900000

080137e4 <with_errno>:
 80137e4:	b570      	push	{r4, r5, r6, lr}
 80137e6:	4604      	mov	r4, r0
 80137e8:	460d      	mov	r5, r1
 80137ea:	4616      	mov	r6, r2
 80137ec:	f7fa fc66 	bl	800e0bc <__errno>
 80137f0:	4629      	mov	r1, r5
 80137f2:	6006      	str	r6, [r0, #0]
 80137f4:	4620      	mov	r0, r4
 80137f6:	bd70      	pop	{r4, r5, r6, pc}

080137f8 <xflow>:
 80137f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80137fa:	4614      	mov	r4, r2
 80137fc:	461d      	mov	r5, r3
 80137fe:	b108      	cbz	r0, 8013804 <xflow+0xc>
 8013800:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013804:	e9cd 2300 	strd	r2, r3, [sp]
 8013808:	e9dd 2300 	ldrd	r2, r3, [sp]
 801380c:	4620      	mov	r0, r4
 801380e:	4629      	mov	r1, r5
 8013810:	f7ec fef2 	bl	80005f8 <__aeabi_dmul>
 8013814:	2222      	movs	r2, #34	; 0x22
 8013816:	b003      	add	sp, #12
 8013818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801381c:	f7ff bfe2 	b.w	80137e4 <with_errno>

08013820 <__math_uflow>:
 8013820:	b508      	push	{r3, lr}
 8013822:	2200      	movs	r2, #0
 8013824:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013828:	f7ff ffe6 	bl	80137f8 <xflow>
 801382c:	ec41 0b10 	vmov	d0, r0, r1
 8013830:	bd08      	pop	{r3, pc}

08013832 <__math_oflow>:
 8013832:	b508      	push	{r3, lr}
 8013834:	2200      	movs	r2, #0
 8013836:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801383a:	f7ff ffdd 	bl	80137f8 <xflow>
 801383e:	ec41 0b10 	vmov	d0, r0, r1
 8013842:	bd08      	pop	{r3, pc}

08013844 <_init>:
 8013844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013846:	bf00      	nop
 8013848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801384a:	bc08      	pop	{r3}
 801384c:	469e      	mov	lr, r3
 801384e:	4770      	bx	lr

08013850 <_fini>:
 8013850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013852:	bf00      	nop
 8013854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013856:	bc08      	pop	{r3}
 8013858:	469e      	mov	lr, r3
 801385a:	4770      	bx	lr
