
LUMEN_STM_Micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08013d00  08013d00  00023d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080142d8  080142d8  000302b0  2**0
                  CONTENTS
  4 .ARM          00000008  080142d8  080142d8  000242d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080142e0  080142e0  000302b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080142e0  080142e0  000242e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080142e4  080142e4  000242e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  080142e8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000089bc  200002b0  08014598  000302b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20008c6c  08014598  00038c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002221d  00000000  00000000  00030323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048c3  00000000  00000000  00052540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ce0  00000000  00000000  00056e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001684  00000000  00000000  00058ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d300  00000000  00000000  0005a16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024d09  00000000  00000000  0008746c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001149d1  00000000  00000000  000ac175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009614  00000000  00000000  001c0b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001ca15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b0 	.word	0x200002b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013ce4 	.word	0x08013ce4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b4 	.word	0x200002b4
 80001cc:	08013ce4 	.word	0x08013ce4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <checkCalibration>:
	values[0] = 0.0;
	values[1] = 0.0;
	values[2] = 0.0;
}

bool checkCalibration(){
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	if (Ro < 0.0) {
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <checkCalibration+0x24>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	d501      	bpl.n	8001008 <checkCalibration+0x18>
			//Serial.println("Device not calibrated, call MQ2::begin before reading any value.");
			return false;
 8001004:	2300      	movs	r3, #0
 8001006:	e000      	b.n	800100a <checkCalibration+0x1a>
		}

		return true;
 8001008:	2301      	movs	r3, #1
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	20000024 	.word	0x20000024

08001018 <readLPG>:

		//lastReadTime = millis();
	    return values;
}

float readLPG(ADC_HandleTypeDef *hadc){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	if (!checkCalibration()) return 0.0;
 8001020:	f7ff ffe6 	bl	8000ff0 <checkCalibration>
 8001024:	4603      	mov	r3, r0
 8001026:	f083 0301 	eor.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <readLPG+0x1e>
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e00a      	b.n	800104c <readLPG+0x34>

	/*if (millis() < (lastReadTime + READ_DELAY) && values[0] > 0)
	        return values[0];
	else*/
	return (values[0] = MQGetPercentage(LPGCurve, hadc));
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <readLPG+0x44>)
 800103a:	f000 f8dd 	bl	80011f8 <MQGetPercentage>
 800103e:	eef0 7a40 	vmov.f32	s15, s0
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <readLPG+0x48>)
 8001044:	edc3 7a00 	vstr	s15, [r3]
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <readLPG+0x48>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eeb0 0a67 	vmov.f32	s0, s15
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000000 	.word	0x20000000
 8001060:	200002cc 	.word	0x200002cc

08001064 <readCO>:

float readCO(ADC_HandleTypeDef *hadc){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	if (!checkCalibration()) return 0.0;
 800106c:	f7ff ffc0 	bl	8000ff0 <checkCalibration>
 8001070:	4603      	mov	r3, r0
 8001072:	f083 0301 	eor.w	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <readCO+0x1e>
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	e00a      	b.n	8001098 <readCO+0x34>

	/*if (millis() < (lastReadTime + READ_DELAY) && values[1] > 0)
	        return values[1];
	else*/
	return (values[1] = MQGetPercentage(COCurve, hadc));
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4808      	ldr	r0, [pc, #32]	; (80010a8 <readCO+0x44>)
 8001086:	f000 f8b7 	bl	80011f8 <MQGetPercentage>
 800108a:	eef0 7a40 	vmov.f32	s15, s0
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <readCO+0x48>)
 8001090:	edc3 7a01 	vstr	s15, [r3, #4]
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <readCO+0x48>)
 8001096:	685b      	ldr	r3, [r3, #4]
}
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eeb0 0a67 	vmov.f32	s0, s15
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000000c 	.word	0x2000000c
 80010ac:	200002cc 	.word	0x200002cc

080010b0 <readSmoke>:

float readSmoke(ADC_HandleTypeDef *hadc){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if (!checkCalibration()) return 0.0;
 80010b8:	f7ff ff9a 	bl	8000ff0 <checkCalibration>
 80010bc:	4603      	mov	r3, r0
 80010be:	f083 0301 	eor.w	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <readSmoke+0x1e>
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e00a      	b.n	80010e4 <readSmoke+0x34>

	/*if (millis() < (lastReadTime + READ_DELAY) && values[2] > 0)
	        return values[2];
	else*/
	return (values[2] = MQGetPercentage(SmokeCurve, hadc));
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <readSmoke+0x44>)
 80010d2:	f000 f891 	bl	80011f8 <MQGetPercentage>
 80010d6:	eef0 7a40 	vmov.f32	s15, s0
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <readSmoke+0x48>)
 80010dc:	edc3 7a02 	vstr	s15, [r3, #8]
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <readSmoke+0x48>)
 80010e2:	689b      	ldr	r3, [r3, #8]
}
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000018 	.word	0x20000018
 80010f8:	200002cc 	.word	0x200002cc
 80010fc:	00000000 	.word	0x00000000

08001100 <MQResistanceCalculation>:

float MQResistanceCalculation(int raw_adc){
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	float flt_adc = (float) raw_adc;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001112:	edc7 7a03 	vstr	s15, [r7, #12]
    return RL_VALUE * (1023.0 - flt_adc) / flt_adc;
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff fa16 	bl	8000548 <__aeabi_f2d>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	a116      	add	r1, pc, #88	; (adr r1, 800117c <MQResistanceCalculation+0x7c>)
 8001122:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001126:	f7ff f8af 	bl	8000288 <__aeabi_dsub>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MQResistanceCalculation+0x78>)
 8001138:	f7ff fa5e 	bl	80005f8 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4614      	mov	r4, r2
 8001142:	461d      	mov	r5, r3
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f7ff f9ff 	bl	8000548 <__aeabi_f2d>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff fb7b 	bl	800084c <__aeabi_ddiv>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fd43 	bl	8000be8 <__aeabi_d2f>
 8001162:	4603      	mov	r3, r0
 8001164:	ee07 3a90 	vmov	s15, r3
}
 8001168:	eeb0 0a67 	vmov.f32	s0, s15
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bdb0      	pop	{r4, r5, r7, pc}
 8001172:	bf00      	nop
 8001174:	f3af 8000 	nop.w
 8001178:	40140000 	.word	0x40140000
 800117c:	00000000 	.word	0x00000000
 8001180:	408ff800 	.word	0x408ff800

08001184 <MQRead>:
	val = val / RO_CLEAN_AIR_FACTOR;

	return val;
}

float MQRead(ADC_HandleTypeDef *hadc){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	float rs = 0.0;
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < READ_SAMPLE_TIMES; i++) {
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	e01e      	b.n	80011d6 <MQRead+0x52>
		HAL_ADC_Start(hadc);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f002 ffdf 	bl	800415c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, 100);
 800119e:	2164      	movs	r1, #100	; 0x64
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f003 f8c9 	bl	8004338 <HAL_ADC_PollForConversion>
		rs += MQResistanceCalculation(HAL_ADC_GetValue(hadc));
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f003 f99e 	bl	80044e8 <HAL_ADC_GetValue>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ffa6 	bl	8001100 <MQResistanceCalculation>
 80011b4:	eeb0 7a40 	vmov.f32	s14, s0
 80011b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011c0:	edc7 7a03 	vstr	s15, [r7, #12]
		HAL_ADC_Stop(hadc);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f003 f883 	bl	80042d0 <HAL_ADC_Stop>
		HAL_Delay(READ_SAMPLE_INTERVAL);
 80011ca:	2032      	movs	r0, #50	; 0x32
 80011cc:	f002 fc20 	bl	8003a10 <HAL_Delay>
	for (int i = 0; i < READ_SAMPLE_TIMES; i++) {
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3301      	adds	r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b04      	cmp	r3, #4
 80011da:	dddd      	ble.n	8001198 <MQRead+0x14>

	}

	return rs / ((float) READ_SAMPLE_TIMES);  // return the average
 80011dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80011e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011e8:	eef0 7a66 	vmov.f32	s15, s13
}
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <MQGetPercentage>:

float MQGetPercentage(float *pcurve, ADC_HandleTypeDef *hadc){
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	float rs_ro_ratio = MQRead(hadc) / Ro;
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f7ff ffbe 	bl	8001184 <MQRead>
 8001208:	eef0 6a40 	vmov.f32	s13, s0
 800120c:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <MQGetPercentage+0xd0>)
 800120e:	ed93 7a00 	vldr	s14, [r3]
 8001212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001216:	edc7 7a03 	vstr	s15, [r7, #12]
    return pow(10.0, ((log(rs_ro_ratio) - pcurve[1]) / pcurve[2]) + pcurve[0]);
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f7ff f994 	bl	8000548 <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	ec43 2b10 	vmov	d0, r2, r3
 8001228:	f011 f992 	bl	8012550 <log>
 800122c:	ec55 4b10 	vmov	r4, r5, d0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3304      	adds	r3, #4
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f986 	bl	8000548 <__aeabi_f2d>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	f7ff f820 	bl	8000288 <__aeabi_dsub>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4614      	mov	r4, r2
 800124e:	461d      	mov	r5, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3308      	adds	r3, #8
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f976 	bl	8000548 <__aeabi_f2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff faf2 	bl	800084c <__aeabi_ddiv>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4614      	mov	r4, r2
 800126e:	461d      	mov	r5, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f967 	bl	8000548 <__aeabi_f2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4620      	mov	r0, r4
 8001280:	4629      	mov	r1, r5
 8001282:	f7ff f803 	bl	800028c <__adddf3>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	ec43 2b17 	vmov	d7, r2, r3
 800128e:	eeb0 1a47 	vmov.f32	s2, s14
 8001292:	eef0 1a67 	vmov.f32	s3, s15
 8001296:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80012c0 <MQGetPercentage+0xc8>
 800129a:	f011 f997 	bl	80125cc <pow>
 800129e:	ec53 2b10 	vmov	r2, r3, d0
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fc9f 	bl	8000be8 <__aeabi_d2f>
 80012aa:	4603      	mov	r3, r0
 80012ac:	ee07 3a90 	vmov	s15, r3
}
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	f3af 8000 	nop.w
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40240000 	.word	0x40240000
 80012c8:	20000024 	.word	0x20000024

080012cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80012dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4a06      	ldr	r2, [pc, #24]	; (80012fc <vApplicationGetIdleTaskMemory+0x30>)
 80012e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200002d8 	.word	0x200002d8
 80012fc:	20000378 	.word	0x20000378

08001300 <HAL_UART_RxCpltCallback>:
ErrorCode error = NO_ERROR_STATE; // UU

//============================= Callback section

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
    if (huart == &huart5)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <HAL_UART_RxCpltCallback+0x48>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d116      	bne.n	800133e <HAL_UART_RxCpltCallback+0x3e>
    {
        g_GnssRx_Flag = true;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_UART_RxCpltCallback+0x4c>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
        g_openFixedDataTransmition = true;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_UART_RxCpltCallback+0x50>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_DMA(&huart5, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 800131c:	f240 228a 	movw	r2, #650	; 0x28a
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <HAL_UART_RxCpltCallback+0x54>)
 8001322:	4809      	ldr	r0, [pc, #36]	; (8001348 <HAL_UART_RxCpltCallback+0x48>)
 8001324:	f008 fb8c 	bl	8009a40 <HAL_UART_Receive_DMA>
        if (__HAL_UART_GET_FLAG(&huart5, UART_FLAG_ORE))
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <HAL_UART_RxCpltCallback+0x48>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b08      	cmp	r3, #8
 8001334:	d103      	bne.n	800133e <HAL_UART_RxCpltCallback+0x3e>
                {
                    __HAL_UART_CLEAR_OREFLAG(&huart5); // Clear overrun
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <HAL_UART_RxCpltCallback+0x48>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2208      	movs	r2, #8
 800133c:	621a      	str	r2, [r3, #32]
    /*if (huart == &huart4)
    {
        HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
    }*/
    // HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20001094 	.word	0x20001094
 800134c:	20000578 	.word	0x20000578
 8001350:	20000579 	.word	0x20000579
 8001354:	20000a58 	.word	0x20000a58

08001358 <UsrGpsL86Init>:

//============================= Initial section

void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 8001360:	f240 228a 	movw	r2, #650	; 0x28a
 8001364:	4903      	ldr	r1, [pc, #12]	; (8001374 <UsrGpsL86Init+0x1c>)
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f008 fb6a 	bl	8009a40 <HAL_UART_Receive_DMA>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000a58 	.word	0x20000a58

08001378 <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    getRmc();
 8001380:	f000 f83e 	bl	8001400 <getRmc>
    getGGA();
 8001384:	f000 f96a 	bl	800165c <getGGA>
    if (rmcValidFlag)
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <Usr_GpsL86GetValues+0x7c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <Usr_GpsL86GetValues+0x20>
    {
        rmcValidFlag = false;
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <Usr_GpsL86GetValues+0x7c>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 8001398:	f000 f8f2 	bl	8001580 <formatLatLong>

    gpsData_->lat = gpsData.lat;
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <Usr_GpsL86GetValues+0x80>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <Usr_GpsL86GetValues+0x80>)
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <Usr_GpsL86GetValues+0x80>)
 80013ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24
    gpsData_->speedKN = gpsData.speedKN;
 80013b4:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <Usr_GpsL86GetValues+0x80>)
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <Usr_GpsL86GetValues+0x80>)
 80013be:	6a1a      	ldr	r2, [r3, #32]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <Usr_GpsL86GetValues+0x80>)
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <Usr_GpsL86GetValues+0x80>)
 80013ce:	69da      	ldr	r2, [r3, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <Usr_GpsL86GetValues+0x80>)
 80013d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
    gpsData_->fixedTime = gpsData.fixedTime;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <Usr_GpsL86GetValues+0x80>)
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	611a      	str	r2, [r3, #16]
    UsrGpsL86Init(&huart5);
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <Usr_GpsL86GetValues+0x84>)
 80013e6:	f7ff ffb7 	bl	8001358 <UsrGpsL86Init>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000057a 	.word	0x2000057a
 80013f8:	20000e5c 	.word	0x20000e5c
 80013fc:	20001094 	.word	0x20001094

08001400 <getRmc>:

//============================= Statics

_io void getRmc(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af02      	add	r7, sp, #8
    if (g_GnssRx_Flag)
 8001406:	4b4d      	ldr	r3, [pc, #308]	; (800153c <getRmc+0x13c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 8091 	beq.w	8001534 <getRmc+0x134>
    {
        MsgIndex = 0;
 8001412:	4b4b      	ldr	r3, [pc, #300]	; (8001540 <getRmc+0x140>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8001418:	494a      	ldr	r1, [pc, #296]	; (8001544 <getRmc+0x144>)
 800141a:	484b      	ldr	r0, [pc, #300]	; (8001548 <getRmc+0x148>)
 800141c:	f00d f8cb 	bl	800e5b6 <strcpy>
        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 8001420:	494a      	ldr	r1, [pc, #296]	; (800154c <getRmc+0x14c>)
 8001422:	4849      	ldr	r0, [pc, #292]	; (8001548 <getRmc+0x148>)
 8001424:	f00c ffe3 	bl	800e3ee <strstr>
 8001428:	4603      	mov	r3, r0
 800142a:	4a49      	ldr	r2, [pc, #292]	; (8001550 <getRmc+0x150>)
 800142c:	6013      	str	r3, [r2, #0]
        if (ptr == NULL) {
 800142e:	4b48      	ldr	r3, [pc, #288]	; (8001550 <getRmc+0x150>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d107      	bne.n	8001446 <getRmc+0x46>
            ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 8001436:	4947      	ldr	r1, [pc, #284]	; (8001554 <getRmc+0x154>)
 8001438:	4843      	ldr	r0, [pc, #268]	; (8001548 <getRmc+0x148>)
 800143a:	f00c ffd8 	bl	800e3ee <strstr>
 800143e:	4603      	mov	r3, r0
 8001440:	4a43      	ldr	r2, [pc, #268]	; (8001550 <getRmc+0x150>)
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	e002      	b.n	800144c <getRmc+0x4c>
        } else {
        	naso = 1;
 8001446:	4b44      	ldr	r3, [pc, #272]	; (8001558 <getRmc+0x158>)
 8001448:	2201      	movs	r2, #1
 800144a:	601a      	str	r2, [r3, #0]
        }
        if (*ptr == 'G' && ptr != NULL)
 800144c:	4b40      	ldr	r3, [pc, #256]	; (8001550 <getRmc+0x150>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b47      	cmp	r3, #71	; 0x47
 8001454:	d16b      	bne.n	800152e <getRmc+0x12e>
 8001456:	4b3e      	ldr	r3, [pc, #248]	; (8001550 <getRmc+0x150>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d067      	beq.n	800152e <getRmc+0x12e>
        {
            while (1)
            {
                gpsPayload[MsgIndex] = *ptr;
 800145e:	4b3c      	ldr	r3, [pc, #240]	; (8001550 <getRmc+0x150>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b37      	ldr	r3, [pc, #220]	; (8001540 <getRmc+0x140>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	7811      	ldrb	r1, [r2, #0]
 8001468:	4a3c      	ldr	r2, [pc, #240]	; (800155c <getRmc+0x15c>)
 800146a:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 800146c:	4b34      	ldr	r3, [pc, #208]	; (8001540 <getRmc+0x140>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	4a33      	ldr	r2, [pc, #204]	; (8001540 <getRmc+0x140>)
 8001474:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 8001476:	4b36      	ldr	r3, [pc, #216]	; (8001550 <getRmc+0x150>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a31      	ldr	r2, [pc, #196]	; (8001540 <getRmc+0x140>)
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	441a      	add	r2, r3
 8001480:	4b33      	ldr	r3, [pc, #204]	; (8001550 <getRmc+0x150>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	7812      	ldrb	r2, [r2, #0]
 8001486:	701a      	strb	r2, [r3, #0]

                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8001488:	4b31      	ldr	r3, [pc, #196]	; (8001550 <getRmc+0x150>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b0a      	cmp	r3, #10
 8001490:	d003      	beq.n	800149a <getRmc+0x9a>
 8001492:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <getRmc+0x140>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b5a      	cmp	r3, #90	; 0x5a
 8001498:	dde1      	ble.n	800145e <getRmc+0x5e>
                {
                    MsgIndex = 0;
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <getRmc+0x140>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
                    // memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
                    //  memset(m_rxData, 0, sizeof(m_rxData));

                    for (int i = 0; i < 100; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	e014      	b.n	80014d0 <getRmc+0xd0>
                    {
                        if (gpsPayload[i] == 'N')
 80014a6:	4a2d      	ldr	r2, [pc, #180]	; (800155c <getRmc+0x15c>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b4e      	cmp	r3, #78	; 0x4e
 80014b0:	d102      	bne.n	80014b8 <getRmc+0xb8>
                            f_northFlag = true;
 80014b2:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <getRmc+0x160>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
                        if (gpsPayload[i] == 'E')
 80014b8:	4a28      	ldr	r2, [pc, #160]	; (800155c <getRmc+0x15c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b45      	cmp	r3, #69	; 0x45
 80014c2:	d102      	bne.n	80014ca <getRmc+0xca>
                            f_eastFlag = true;
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <getRmc+0x164>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
                    for (int i = 0; i < 100; i++)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3301      	adds	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b63      	cmp	r3, #99	; 0x63
 80014d4:	dde7      	ble.n	80014a6 <getRmc+0xa6>
                    }
                    if (strlen(gpsPayload) > 10)
 80014d6:	4821      	ldr	r0, [pc, #132]	; (800155c <getRmc+0x15c>)
 80014d8:	f7fe feca 	bl	8000270 <strlen>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b0a      	cmp	r3, #10
 80014e0:	d91f      	bls.n	8001522 <getRmc+0x122>
                    {
                        if (f_eastFlag && f_northFlag)
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <getRmc+0x164>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d01f      	beq.n	800152c <getRmc+0x12c>
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <getRmc+0x160>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d01a      	beq.n	800152c <getRmc+0x12c>
                        {
                            f_northFlag = false;
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <getRmc+0x160>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
                            f_eastFlag = false;
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <getRmc+0x164>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <getRmc+0x168>)
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <getRmc+0x16c>)
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <getRmc+0x170>)
 800150c:	4a19      	ldr	r2, [pc, #100]	; (8001574 <getRmc+0x174>)
 800150e:	491a      	ldr	r1, [pc, #104]	; (8001578 <getRmc+0x178>)
 8001510:	4812      	ldr	r0, [pc, #72]	; (800155c <getRmc+0x15c>)
 8001512:	f00c fef3 	bl	800e2fc <siscanf>
                            rmcValidFlag = true;
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <getRmc+0x17c>)
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
                            formatLatLong();
 800151c:	f000 f830 	bl	8001580 <formatLatLong>
                    else
                    {
                        // dataErr Log
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 8001520:	e004      	b.n	800152c <getRmc+0x12c>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8001522:	2264      	movs	r2, #100	; 0x64
 8001524:	2100      	movs	r1, #0
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <getRmc+0x15c>)
 8001528:	f00c ff59 	bl	800e3de <memset>
                    break;
 800152c:	bf00      	nop
                }
            }
        }
        g_GnssRx_Flag = false;
 800152e:	4b03      	ldr	r3, [pc, #12]	; (800153c <getRmc+0x13c>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
    }
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000578 	.word	0x20000578
 8001540:	20000580 	.word	0x20000580
 8001544:	20000a58 	.word	0x20000a58
 8001548:	20000650 	.word	0x20000650
 800154c:	08013d00 	.word	0x08013d00
 8001550:	20000584 	.word	0x20000584
 8001554:	08013d08 	.word	0x08013d08
 8001558:	20000e58 	.word	0x20000e58
 800155c:	20000588 	.word	0x20000588
 8001560:	2000057b 	.word	0x2000057b
 8001564:	2000057c 	.word	0x2000057c
 8001568:	20000e64 	.word	0x20000e64
 800156c:	20000a54 	.word	0x20000a54
 8001570:	20000a50 	.word	0x20000a50
 8001574:	20000e68 	.word	0x20000e68
 8001578:	08013d10 	.word	0x08013d10
 800157c:	2000057a 	.word	0x2000057a

08001580 <formatLatLong>:

_io void formatLatLong(void)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 8001586:	4b30      	ldr	r3, [pc, #192]	; (8001648 <formatLatLong+0xc8>)
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001590:	ee17 1a90 	vmov	r1, s15
 8001594:	4b2d      	ldr	r3, [pc, #180]	; (800164c <formatLatLong+0xcc>)
 8001596:	fb83 2301 	smull	r2, r3, r3, r1
 800159a:	115a      	asrs	r2, r3, #5
 800159c:	17cb      	asrs	r3, r1, #31
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 80015a2:	4b29      	ldr	r3, [pc, #164]	; (8001648 <formatLatLong+0xc8>)
 80015a4:	ed93 7a00 	vldr	s14, [r3]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2264      	movs	r2, #100	; 0x64
 80015ac:	fb02 f303 	mul.w	r3, r2, r3
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015bc:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ca:	edd7 6a00 	vldr	s13, [r7]
 80015ce:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8001650 <formatLatLong+0xd0>
 80015d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80015d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <formatLatLong+0xd4>)
 80015dc:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <formatLatLong+0xd8>)
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ea:	ee17 1a90 	vmov	r1, s15
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <formatLatLong+0xcc>)
 80015f0:	fb83 2301 	smull	r2, r3, r3, r1
 80015f4:	115a      	asrs	r2, r3, #5
 80015f6:	17cb      	asrs	r3, r1, #31
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <formatLatLong+0xd8>)
 80015fe:	ed93 7a00 	vldr	s14, [r3]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2264      	movs	r2, #100	; 0x64
 8001606:	fb02 f303 	mul.w	r3, r2, r3
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001616:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	ee07 3a90 	vmov	s15, r3
 8001620:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001624:	edd7 6a00 	vldr	s13, [r7]
 8001628:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8001650 <formatLatLong+0xd0>
 800162c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <formatLatLong+0xd4>)
 8001636:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000a50 	.word	0x20000a50
 800164c:	51eb851f 	.word	0x51eb851f
 8001650:	42700000 	.word	0x42700000
 8001654:	20000e5c 	.word	0x20000e5c
 8001658:	20000a54 	.word	0x20000a54

0800165c <getGGA>:

_io void getGGA(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af06      	add	r7, sp, #24
    if (g_openFixedDataTransmition)
 8001662:	4b3a      	ldr	r3, [pc, #232]	; (800174c <getGGA+0xf0>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d06c      	beq.n	8001746 <getGGA+0xea>
    {
        MsgIndex = 0;
 800166c:	4b38      	ldr	r3, [pc, #224]	; (8001750 <getGGA+0xf4>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8001672:	4938      	ldr	r1, [pc, #224]	; (8001754 <getGGA+0xf8>)
 8001674:	4838      	ldr	r0, [pc, #224]	; (8001758 <getGGA+0xfc>)
 8001676:	f00c ff9e 	bl	800e5b6 <strcpy>
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 800167a:	4938      	ldr	r1, [pc, #224]	; (800175c <getGGA+0x100>)
 800167c:	4836      	ldr	r0, [pc, #216]	; (8001758 <getGGA+0xfc>)
 800167e:	f00c feb6 	bl	800e3ee <strstr>
 8001682:	4603      	mov	r3, r0
 8001684:	4a36      	ldr	r2, [pc, #216]	; (8001760 <getGGA+0x104>)
 8001686:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 8001688:	4b35      	ldr	r3, [pc, #212]	; (8001760 <getGGA+0x104>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b47      	cmp	r3, #71	; 0x47
 8001690:	d14a      	bne.n	8001728 <getGGA+0xcc>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 8001692:	4b33      	ldr	r3, [pc, #204]	; (8001760 <getGGA+0x104>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <getGGA+0xf4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	7811      	ldrb	r1, [r2, #0]
 800169c:	4a31      	ldr	r2, [pc, #196]	; (8001764 <getGGA+0x108>)
 800169e:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <getGGA+0xf4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	4a2a      	ldr	r2, [pc, #168]	; (8001750 <getGGA+0xf4>)
 80016a8:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <getGGA+0x104>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a28      	ldr	r2, [pc, #160]	; (8001750 <getGGA+0xf4>)
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	441a      	add	r2, r3
 80016b4:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <getGGA+0x104>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 80016bc:	4b28      	ldr	r3, [pc, #160]	; (8001760 <getGGA+0x104>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b0a      	cmp	r3, #10
 80016c4:	d003      	beq.n	80016ce <getGGA+0x72>
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <getGGA+0xf4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b5a      	cmp	r3, #90	; 0x5a
 80016cc:	dde1      	ble.n	8001692 <getGGA+0x36>
                {
                    MsgIndex = 0;
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <getGGA+0xf4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 80016d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d8:	2100      	movs	r1, #0
 80016da:	481f      	ldr	r0, [pc, #124]	; (8001758 <getGGA+0xfc>)
 80016dc:	f00c fe7f 	bl	800e3de <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 80016e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e4:	2100      	movs	r1, #0
 80016e6:	481b      	ldr	r0, [pc, #108]	; (8001754 <getGGA+0xf8>)
 80016e8:	f00c fe79 	bl	800e3de <memset>

                    if (strlen(gpsGGAPayload) > 10)
 80016ec:	481d      	ldr	r0, [pc, #116]	; (8001764 <getGGA+0x108>)
 80016ee:	f7fe fdbf 	bl	8000270 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b0a      	cmp	r3, #10
 80016f6:	d912      	bls.n	800171e <getGGA+0xc2>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <getGGA+0x10c>)
 80016fa:	9305      	str	r3, [sp, #20]
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <getGGA+0x110>)
 80016fe:	9304      	str	r3, [sp, #16]
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <getGGA+0x114>)
 8001702:	9303      	str	r3, [sp, #12]
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <getGGA+0x118>)
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <getGGA+0x11c>)
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <getGGA+0x120>)
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <getGGA+0x124>)
 8001712:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <getGGA+0x128>)
 8001714:	491c      	ldr	r1, [pc, #112]	; (8001788 <getGGA+0x12c>)
 8001716:	4813      	ldr	r0, [pc, #76]	; (8001764 <getGGA+0x108>)
 8001718:	f00c fdf0 	bl	800e2fc <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 800171c:	e004      	b.n	8001728 <getGGA+0xcc>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 800171e:	2264      	movs	r2, #100	; 0x64
 8001720:	2100      	movs	r1, #0
 8001722:	481a      	ldr	r0, [pc, #104]	; (800178c <getGGA+0x130>)
 8001724:	f00c fe5b 	bl	800e3de <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <getGGA+0xf0>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
        memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 800172e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001732:	2100      	movs	r1, #0
 8001734:	4808      	ldr	r0, [pc, #32]	; (8001758 <getGGA+0xfc>)
 8001736:	f00c fe52 	bl	800e3de <memset>
        memset(m_rxData, 0, sizeof(m_rxData));
 800173a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800173e:	2100      	movs	r1, #0
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <getGGA+0xf8>)
 8001742:	f00c fe4c 	bl	800e3de <memset>
        // UsrGpsL86Init(&huart2);
    }
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000579 	.word	0x20000579
 8001750:	20000580 	.word	0x20000580
 8001754:	20000a58 	.word	0x20000a58
 8001758:	20000650 	.word	0x20000650
 800175c:	08013d08 	.word	0x08013d08
 8001760:	20000584 	.word	0x20000584
 8001764:	200005ec 	.word	0x200005ec
 8001768:	20000e88 	.word	0x20000e88
 800176c:	20000e84 	.word	0x20000e84
 8001770:	20000e80 	.word	0x20000e80
 8001774:	20000e7c 	.word	0x20000e7c
 8001778:	20000e78 	.word	0x20000e78
 800177c:	20000e74 	.word	0x20000e74
 8001780:	20000e70 	.word	0x20000e70
 8001784:	20000e6c 	.word	0x20000e6c
 8001788:	08013d2c 	.word	0x08013d2c
 800178c:	20000588 	.word	0x20000588

08001790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001796:	f002 f8fb 	bl	8003990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800179a:	f000 f881 	bl	80018a0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800179e:	f000 f8d0 	bl	8001942 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a2:	f000 fc23 	bl	8001fec <MX_GPIO_Init>
  MX_DMA_Init();
 80017a6:	f000 fc03 	bl	8001fb0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017aa:	f000 fba1 	bl	8001ef0 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80017ae:	f000 f9cd 	bl	8001b4c <MX_I2C2_Init>
  MX_ADC1_Init();
 80017b2:	f000 f8f1 	bl	8001998 <MX_ADC1_Init>
  MX_I2C3_Init();
 80017b6:	f000 fa09 	bl	8001bcc <MX_I2C3_Init>
  MX_UART5_Init();
 80017ba:	f000 fb39 	bl	8001e30 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80017be:	f000 fbc7 	bl	8001f50 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80017c2:	f000 fa43 	bl	8001c4c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80017c6:	f000 fb63 	bl	8001e90 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 80017ca:	f000 f95b 	bl	8001a84 <MX_ADC2_Init>
  MX_TIM3_Init();
 80017ce:	f000 fad1 	bl	8001d74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017d8:	4823      	ldr	r0, [pc, #140]	; (8001868 <main+0xd8>)
 80017da:	f004 f9ff 	bl	8005bdc <HAL_GPIO_WritePin>
  MPU6050_Init(&hi2c3);
 80017de:	4823      	ldr	r0, [pc, #140]	; (800186c <main+0xdc>)
 80017e0:	f000 ff2d 	bl	800263e <MPU6050_Init>
  UsrGpsL86Init(&huart5);
 80017e4:	4822      	ldr	r0, [pc, #136]	; (8001870 <main+0xe0>)
 80017e6:	f7ff fdb7 	bl	8001358 <UsrGpsL86Init>
  //begin(&hadc1);
  /* ------ QUEUE RELATED ------ */
  Queue_Handler = xQueueCreate(2,sizeof(data));
 80017ea:	2200      	movs	r2, #0
 80017ec:	2140      	movs	r1, #64	; 0x40
 80017ee:	2002      	movs	r0, #2
 80017f0:	f009 fc96 	bl	800b120 <xQueueGenericCreate>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <main+0xe4>)
 80017f8:	6013      	str	r3, [r2, #0]
  if (Queue_Handler == NULL) {
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <main+0xe4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <main+0x76>

      Error_Handler();
 8001802:	f000 ff17 	bl	8002634 <Error_Handler>
  }

  /* ------ TASK RELATED ------ */
  xTaskCreate(measurements_task, "measure", 1024, NULL, 3, &Measurements_Handler);
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <main+0xe8>)
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	2303      	movs	r3, #3
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2300      	movs	r3, #0
 8001810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001814:	4919      	ldr	r1, [pc, #100]	; (800187c <main+0xec>)
 8001816:	481a      	ldr	r0, [pc, #104]	; (8001880 <main+0xf0>)
 8001818:	f00a f9d9 	bl	800bbce <xTaskCreate>
  xTaskCreate(sender_task, "send data", 1024, NULL, 2, &Sender_Handler);
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <main+0xf4>)
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	2302      	movs	r3, #2
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2300      	movs	r3, #0
 8001826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182a:	4917      	ldr	r1, [pc, #92]	; (8001888 <main+0xf8>)
 800182c:	4817      	ldr	r0, [pc, #92]	; (800188c <main+0xfc>)
 800182e:	f00a f9ce 	bl	800bbce <xTaskCreate>
  xTaskCreate(LED_task, "toggle LED", 128, NULL, 1, &LED_Handler);
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <main+0x100>)
 8001834:	9301      	str	r3, [sp, #4]
 8001836:	2301      	movs	r3, #1
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2300      	movs	r3, #0
 800183c:	2280      	movs	r2, #128	; 0x80
 800183e:	4915      	ldr	r1, [pc, #84]	; (8001894 <main+0x104>)
 8001840:	4815      	ldr	r0, [pc, #84]	; (8001898 <main+0x108>)
 8001842:	f00a f9c4 	bl	800bbce <xTaskCreate>


  /* ------ SEMAPHORE/MUTEX RELATED ------ */
  PWM_Sem_Handler = xSemaphoreCreateBinary();
 8001846:	2203      	movs	r2, #3
 8001848:	2100      	movs	r1, #0
 800184a:	2001      	movs	r0, #1
 800184c:	f009 fc68 	bl	800b120 <xQueueGenericCreate>
 8001850:	4603      	mov	r3, r0
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <main+0x10c>)
 8001854:	6013      	str	r3, [r2, #0]
  if (PWM_Sem_Handler == NULL) {
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <main+0x10c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <main+0xd2>

        Error_Handler();
 800185e:	f000 fee9 	bl	8002634 <Error_Handler>
    }

  vTaskStartScheduler();
 8001862:	f00a fb3d 	bl	800bee0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001866:	e7fe      	b.n	8001866 <main+0xd6>
 8001868:	48000400 	.word	0x48000400
 800186c:	20000fa8 	.word	0x20000fa8
 8001870:	20001094 	.word	0x20001094
 8001874:	20001438 	.word	0x20001438
 8001878:	2000142c 	.word	0x2000142c
 800187c:	08013d54 	.word	0x08013d54
 8001880:	0800217d 	.word	0x0800217d
 8001884:	20001430 	.word	0x20001430
 8001888:	08013d5c 	.word	0x08013d5c
 800188c:	08002411 	.word	0x08002411
 8001890:	20001434 	.word	0x20001434
 8001894:	08013d68 	.word	0x08013d68
 8001898:	0800246d 	.word	0x0800246d
 800189c:	2000143c 	.word	0x2000143c

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b096      	sub	sp, #88	; 0x58
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	2244      	movs	r2, #68	; 0x44
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f00c fd95 	bl	800e3de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	463b      	mov	r3, r7
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018c6:	f005 fa85 	bl	8006dd4 <HAL_PWREx_ControlVoltageScaling>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018d0:	f000 feb0 	bl	8002634 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d4:	2302      	movs	r3, #2
 80018d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018de:	2310      	movs	r3, #16
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e2:	2302      	movs	r3, #2
 80018e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018e6:	2302      	movs	r3, #2
 80018e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80018ee:	230a      	movs	r3, #10
 80018f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80018f2:	2307      	movs	r3, #7
 80018f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018f6:	2302      	movs	r3, #2
 80018f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018fa:	2302      	movs	r3, #2
 80018fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4618      	mov	r0, r3
 8001904:	f005 fabc 	bl	8006e80 <HAL_RCC_OscConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800190e:	f000 fe91 	bl	8002634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001912:	230f      	movs	r3, #15
 8001914:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001916:	2303      	movs	r3, #3
 8001918:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001926:	463b      	mov	r3, r7
 8001928:	2104      	movs	r1, #4
 800192a:	4618      	mov	r0, r3
 800192c:	f005 fe84 	bl	8007638 <HAL_RCC_ClockConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001936:	f000 fe7d 	bl	8002634 <Error_Handler>
  }
}
 800193a:	bf00      	nop
 800193c:	3758      	adds	r7, #88	; 0x58
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b0a2      	sub	sp, #136	; 0x88
 8001946:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001948:	463b      	mov	r3, r7
 800194a:	2288      	movs	r2, #136	; 0x88
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f00c fd45 	bl	800e3de <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001954:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001958:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800195a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800195e:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001960:	2302      	movs	r3, #2
 8001962:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001964:	2301      	movs	r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001968:	2308      	movs	r3, #8
 800196a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800196c:	2307      	movs	r3, #7
 800196e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001970:	2302      	movs	r3, #2
 8001972:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001974:	2302      	movs	r3, #2
 8001976:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800197c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800197e:	463b      	mov	r3, r7
 8001980:	4618      	mov	r0, r3
 8001982:	f006 f8af 	bl	8007ae4 <HAL_RCCEx_PeriphCLKConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800198c:	f000 fe52 	bl	8002634 <Error_Handler>
  }
}
 8001990:	bf00      	nop
 8001992:	3788      	adds	r7, #136	; 0x88
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
 80019b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019ba:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <MX_ADC1_Init+0xe0>)
 80019bc:	4a2f      	ldr	r2, [pc, #188]	; (8001a7c <MX_ADC1_Init+0xe4>)
 80019be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <MX_ADC1_Init+0xe0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019c6:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <MX_ADC1_Init+0xe0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019cc:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <MX_ADC1_Init+0xe0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019d2:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <MX_ADC1_Init+0xe0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019d8:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <MX_ADC1_Init+0xe0>)
 80019da:	2204      	movs	r2, #4
 80019dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <MX_ADC1_Init+0xe0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <MX_ADC1_Init+0xe0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019ea:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <MX_ADC1_Init+0xe0>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <MX_ADC1_Init+0xe0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <MX_ADC1_Init+0xe0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <MX_ADC1_Init+0xe0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <MX_ADC1_Init+0xe0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <MX_ADC1_Init+0xe0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001a12:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <MX_ADC1_Init+0xe0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a1a:	4817      	ldr	r0, [pc, #92]	; (8001a78 <MX_ADC1_Init+0xe0>)
 8001a1c:	f002 fa4e 	bl	8003ebc <HAL_ADC_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001a26:	f000 fe05 	bl	8002634 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	4810      	ldr	r0, [pc, #64]	; (8001a78 <MX_ADC1_Init+0xe0>)
 8001a36:	f003 fb1f 	bl	8005078 <HAL_ADCEx_MultiModeConfigChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001a40:	f000 fdf8 	bl	8002634 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_ADC1_Init+0xe8>)
 8001a46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a48:	2306      	movs	r3, #6
 8001a4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a50:	237f      	movs	r3, #127	; 0x7f
 8001a52:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a54:	2304      	movs	r3, #4
 8001a56:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_ADC1_Init+0xe0>)
 8001a62:	f002 fd4f 	bl	8004504 <HAL_ADC_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001a6c:	f000 fde2 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	3728      	adds	r7, #40	; 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000e8c 	.word	0x20000e8c
 8001a7c:	50040000 	.word	0x50040000
 8001a80:	43210000 	.word	0x43210000

08001a84 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
 8001a98:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001a9c:	4a29      	ldr	r2, [pc, #164]	; (8001b44 <MX_ADC2_Init+0xc0>)
 8001a9e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001aa0:	4b27      	ldr	r3, [pc, #156]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aac:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001aba:	2204      	movs	r2, #4
 8001abc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001afa:	4811      	ldr	r0, [pc, #68]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001afc:	f002 f9de 	bl	8003ebc <HAL_ADC_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001b06:	f000 fd95 	bl	8002634 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <MX_ADC2_Init+0xc4>)
 8001b0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b0e:	2306      	movs	r3, #6
 8001b10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b16:	237f      	movs	r3, #127	; 0x7f
 8001b18:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b22:	463b      	mov	r3, r7
 8001b24:	4619      	mov	r1, r3
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <MX_ADC2_Init+0xbc>)
 8001b28:	f002 fcec 	bl	8004504 <HAL_ADC_ConfigChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8001b32:	f000 fd7f 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000ef0 	.word	0x20000ef0
 8001b44:	50040100 	.word	0x50040100
 8001b48:	3ac04000 	.word	0x3ac04000

08001b4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b52:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <MX_I2C2_Init+0x78>)
 8001b54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b58:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <MX_I2C2_Init+0x7c>)
 8001b5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b86:	480e      	ldr	r0, [pc, #56]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b88:	f004 f858 	bl	8005c3c <HAL_I2C_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b92:	f000 fd4f 	bl	8002634 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b96:	2100      	movs	r1, #0
 8001b98:	4809      	ldr	r0, [pc, #36]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001b9a:	f005 f875 	bl	8006c88 <HAL_I2CEx_ConfigAnalogFilter>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ba4:	f000 fd46 	bl	8002634 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_I2C2_Init+0x74>)
 8001bac:	f005 f8b7 	bl	8006d1e <HAL_I2CEx_ConfigDigitalFilter>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001bb6:	f000 fd3d 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000f54 	.word	0x20000f54
 8001bc4:	40005800 	.word	0x40005800
 8001bc8:	10909cec 	.word	0x10909cec

08001bcc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <MX_I2C3_Init+0x74>)
 8001bd2:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <MX_I2C3_Init+0x78>)
 8001bd4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00702991;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <MX_I2C3_Init+0x74>)
 8001bd8:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <MX_I2C3_Init+0x7c>)
 8001bda:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001bdc:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <MX_I2C3_Init+0x74>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <MX_I2C3_Init+0x74>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001be8:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <MX_I2C3_Init+0x74>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001bee:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <MX_I2C3_Init+0x74>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <MX_I2C3_Init+0x74>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_I2C3_Init+0x74>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <MX_I2C3_Init+0x74>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c06:	480e      	ldr	r0, [pc, #56]	; (8001c40 <MX_I2C3_Init+0x74>)
 8001c08:	f004 f818 	bl	8005c3c <HAL_I2C_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001c12:	f000 fd0f 	bl	8002634 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c16:	2100      	movs	r1, #0
 8001c18:	4809      	ldr	r0, [pc, #36]	; (8001c40 <MX_I2C3_Init+0x74>)
 8001c1a:	f005 f835 	bl	8006c88 <HAL_I2CEx_ConfigAnalogFilter>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001c24:	f000 fd06 	bl	8002634 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_I2C3_Init+0x74>)
 8001c2c:	f005 f877 	bl	8006d1e <HAL_I2CEx_ConfigDigitalFilter>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001c36:	f000 fcfd 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000fa8 	.word	0x20000fa8
 8001c44:	40005c00 	.word	0x40005c00
 8001c48:	00702991 	.word	0x00702991

08001c4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b096      	sub	sp, #88	; 0x58
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	611a      	str	r2, [r3, #16]
 8001c6e:	615a      	str	r2, [r3, #20]
 8001c70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	222c      	movs	r2, #44	; 0x2c
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f00c fbb0 	bl	800e3de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	; (8001d6c <MX_TIM1_Init+0x120>)
 8001c80:	4a3b      	ldr	r2, [pc, #236]	; (8001d70 <MX_TIM1_Init+0x124>)
 8001c82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c84:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <MX_TIM1_Init+0x120>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8a:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <MX_TIM1_Init+0x120>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c90:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <MX_TIM1_Init+0x120>)
 8001c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c98:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <MX_TIM1_Init+0x120>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c9e:	4b33      	ldr	r3, [pc, #204]	; (8001d6c <MX_TIM1_Init+0x120>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca4:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <MX_TIM1_Init+0x120>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001caa:	4830      	ldr	r0, [pc, #192]	; (8001d6c <MX_TIM1_Init+0x120>)
 8001cac:	f006 fca8 	bl	8008600 <HAL_TIM_PWM_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001cb6:	f000 fcbd 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cc6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4827      	ldr	r0, [pc, #156]	; (8001d6c <MX_TIM1_Init+0x120>)
 8001cce:	f007 fc95 	bl	80095fc <HAL_TIMEx_MasterConfigSynchronization>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001cd8:	f000 fcac 	bl	8002634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cdc:	2360      	movs	r3, #96	; 0x60
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	481a      	ldr	r0, [pc, #104]	; (8001d6c <MX_TIM1_Init+0x120>)
 8001d02:	f006 fee3 	bl	8008acc <HAL_TIM_PWM_ConfigChannel>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d0c:	f000 fc92 	bl	8002634 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	4619      	mov	r1, r3
 8001d44:	4809      	ldr	r0, [pc, #36]	; (8001d6c <MX_TIM1_Init+0x120>)
 8001d46:	f007 fce1 	bl	800970c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001d50:	f000 fc70 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001d54:	2100      	movs	r1, #0
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_TIM1_Init+0x120>)
 8001d58:	f007 fb96 	bl	8009488 <HAL_TIMEx_PWMN_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d5c:	4803      	ldr	r0, [pc, #12]	; (8001d6c <MX_TIM1_Init+0x120>)
 8001d5e:	f001 fa75 	bl	800324c <HAL_TIM_MspPostInit>

}
 8001d62:	bf00      	nop
 8001d64:	3758      	adds	r7, #88	; 0x58
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000ffc 	.word	0x20000ffc
 8001d70:	40012c00 	.word	0x40012c00

08001d74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d86:	463b      	mov	r3, r7
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
 8001d94:	615a      	str	r2, [r3, #20]
 8001d96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d98:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <MX_TIM3_Init+0xb4>)
 8001d9a:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <MX_TIM3_Init+0xb8>)
 8001d9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <MX_TIM3_Init+0xb4>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da4:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <MX_TIM3_Init+0xb4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8001daa:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <MX_TIM3_Init+0xb4>)
 8001dac:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001db0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <MX_TIM3_Init+0xb4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <MX_TIM3_Init+0xb4>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dbe:	481a      	ldr	r0, [pc, #104]	; (8001e28 <MX_TIM3_Init+0xb4>)
 8001dc0:	f006 fc1e 	bl	8008600 <HAL_TIM_PWM_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001dca:	f000 fc33 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4812      	ldr	r0, [pc, #72]	; (8001e28 <MX_TIM3_Init+0xb4>)
 8001dde:	f007 fc0d 	bl	80095fc <HAL_TIMEx_MasterConfigSynchronization>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001de8:	f000 fc24 	bl	8002634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dec:	2360      	movs	r3, #96	; 0x60
 8001dee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	2200      	movs	r2, #0
 8001e00:	4619      	mov	r1, r3
 8001e02:	4809      	ldr	r0, [pc, #36]	; (8001e28 <MX_TIM3_Init+0xb4>)
 8001e04:	f006 fe62 	bl	8008acc <HAL_TIM_PWM_ConfigChannel>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001e0e:	f000 fc11 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001e12:	2100      	movs	r1, #0
 8001e14:	4804      	ldr	r0, [pc, #16]	; (8001e28 <MX_TIM3_Init+0xb4>)
 8001e16:	f006 fc4b 	bl	80086b0 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e1a:	4803      	ldr	r0, [pc, #12]	; (8001e28 <MX_TIM3_Init+0xb4>)
 8001e1c:	f001 fa16 	bl	800324c <HAL_TIM_MspPostInit>

}
 8001e20:	bf00      	nop
 8001e22:	3728      	adds	r7, #40	; 0x28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20001048 	.word	0x20001048
 8001e2c:	40000400 	.word	0x40000400

08001e30 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <MX_UART5_Init+0x58>)
 8001e36:	4a15      	ldr	r2, [pc, #84]	; (8001e8c <MX_UART5_Init+0x5c>)
 8001e38:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <MX_UART5_Init+0x58>)
 8001e3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e40:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_UART5_Init+0x58>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <MX_UART5_Init+0x58>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_UART5_Init+0x58>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_UART5_Init+0x58>)
 8001e56:	220c      	movs	r2, #12
 8001e58:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <MX_UART5_Init+0x58>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_UART5_Init+0x58>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <MX_UART5_Init+0x58>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_UART5_Init+0x58>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_UART5_Init+0x58>)
 8001e74:	f007 fd0b 	bl	800988e <HAL_UART_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001e7e:	f000 fbd9 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20001094 	.word	0x20001094
 8001e8c:	40005000 	.word	0x40005000

08001e90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_USART1_UART_Init+0x58>)
 8001e96:	4a15      	ldr	r2, [pc, #84]	; (8001eec <MX_USART1_UART_Init+0x5c>)
 8001e98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <MX_USART1_UART_Init+0x58>)
 8001e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_USART1_UART_Init+0x58>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_USART1_UART_Init+0x58>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_USART1_UART_Init+0x58>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_USART1_UART_Init+0x58>)
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_USART1_UART_Init+0x58>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_USART1_UART_Init+0x58>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_USART1_UART_Init+0x58>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_USART1_UART_Init+0x58>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_USART1_UART_Init+0x58>)
 8001ed4:	f007 fcdb 	bl	800988e <HAL_UART_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ede:	f000 fba9 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000111c 	.word	0x2000111c
 8001eec:	40013800 	.word	0x40013800

08001ef0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_USART2_UART_Init+0x58>)
 8001ef6:	4a15      	ldr	r2, [pc, #84]	; (8001f4c <MX_USART2_UART_Init+0x5c>)
 8001ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <MX_USART2_UART_Init+0x58>)
 8001efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_USART2_UART_Init+0x58>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_USART2_UART_Init+0x58>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_USART2_UART_Init+0x58>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_USART2_UART_Init+0x58>)
 8001f16:	220c      	movs	r2, #12
 8001f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <MX_USART2_UART_Init+0x58>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_USART2_UART_Init+0x58>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <MX_USART2_UART_Init+0x58>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_USART2_UART_Init+0x58>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_USART2_UART_Init+0x58>)
 8001f34:	f007 fcab 	bl	800988e <HAL_UART_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f3e:	f000 fb79 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200011a4 	.word	0x200011a4
 8001f4c:	40004400 	.word	0x40004400

08001f50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f54:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f56:	4a15      	ldr	r2, [pc, #84]	; (8001fac <MX_USART3_UART_Init+0x5c>)
 8001f58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f76:	220c      	movs	r2, #12
 8001f78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <MX_USART3_UART_Init+0x58>)
 8001f94:	f007 fc7b 	bl	800988e <HAL_UART_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f9e:	f000 fb49 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2000122c 	.word	0x2000122c
 8001fac:	40004800 	.word	0x40004800

08001fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <MX_DMA_Init+0x38>)
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fba:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <MX_DMA_Init+0x38>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6493      	str	r3, [r2, #72]	; 0x48
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <MX_DMA_Init+0x38>)
 8001fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2105      	movs	r1, #5
 8001fd2:	2039      	movs	r0, #57	; 0x39
 8001fd4:	f003 f9b8 	bl	8005348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001fd8:	2039      	movs	r0, #57	; 0x39
 8001fda:	f003 f9d1 	bl	8005380 <HAL_NVIC_EnableIRQ>

}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000

08001fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
 8002000:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	4b5b      	ldr	r3, [pc, #364]	; (8002170 <MX_GPIO_Init+0x184>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002006:	4a5a      	ldr	r2, [pc, #360]	; (8002170 <MX_GPIO_Init+0x184>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800200e:	4b58      	ldr	r3, [pc, #352]	; (8002170 <MX_GPIO_Init+0x184>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800201a:	4b55      	ldr	r3, [pc, #340]	; (8002170 <MX_GPIO_Init+0x184>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201e:	4a54      	ldr	r2, [pc, #336]	; (8002170 <MX_GPIO_Init+0x184>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002026:	4b52      	ldr	r3, [pc, #328]	; (8002170 <MX_GPIO_Init+0x184>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	4b4f      	ldr	r3, [pc, #316]	; (8002170 <MX_GPIO_Init+0x184>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	4a4e      	ldr	r2, [pc, #312]	; (8002170 <MX_GPIO_Init+0x184>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203e:	4b4c      	ldr	r3, [pc, #304]	; (8002170 <MX_GPIO_Init+0x184>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	4b49      	ldr	r3, [pc, #292]	; (8002170 <MX_GPIO_Init+0x184>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	4a48      	ldr	r2, [pc, #288]	; (8002170 <MX_GPIO_Init+0x184>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002056:	4b46      	ldr	r3, [pc, #280]	; (8002170 <MX_GPIO_Init+0x184>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002062:	4b43      	ldr	r3, [pc, #268]	; (8002170 <MX_GPIO_Init+0x184>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	4a42      	ldr	r2, [pc, #264]	; (8002170 <MX_GPIO_Init+0x184>)
 8002068:	f043 0308 	orr.w	r3, r3, #8
 800206c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800206e:	4b40      	ldr	r3, [pc, #256]	; (8002170 <MX_GPIO_Init+0x184>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAT_FULL_GPIO_Port, BAT_FULL_Pin, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	2104      	movs	r1, #4
 800207e:	483d      	ldr	r0, [pc, #244]	; (8002174 <MX_GPIO_Init+0x188>)
 8002080:	f003 fdac 	bl	8005bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_12|BAT_LOW_Pin, GPIO_PIN_RESET);
 8002084:	2200      	movs	r2, #0
 8002086:	f249 0120 	movw	r1, #36896	; 0x9020
 800208a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208e:	f003 fda5 	bl	8005bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOST_ENABLE_GPIO_Port, BOOST_ENABLE_Pin, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002098:	4837      	ldr	r0, [pc, #220]	; (8002178 <MX_GPIO_Init+0x18c>)
 800209a:	f003 fd9f 	bl	8005bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800209e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	482f      	ldr	r0, [pc, #188]	; (8002174 <MX_GPIO_Init+0x188>)
 80020b6:	f003 fbe7 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_FULL_Pin */
  GPIO_InitStruct.Pin = BAT_FULL_Pin;
 80020ba:	2304      	movs	r3, #4
 80020bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020be:	2301      	movs	r3, #1
 80020c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BAT_FULL_GPIO_Port, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4828      	ldr	r0, [pc, #160]	; (8002174 <MX_GPIO_Init+0x188>)
 80020d2:	f003 fbd9 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020d6:	2310      	movs	r3, #16
 80020d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ee:	f003 fbcb 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA12 BAT_LOW_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_12|BAT_LOW_Pin;
 80020f2:	f249 0320 	movw	r3, #36896	; 0x9020
 80020f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f8:	2301      	movs	r3, #1
 80020fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	4619      	mov	r1, r3
 800210a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210e:	f003 fbbb 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pin : GAS_D_Pin */
  GPIO_InitStruct.Pin = GAS_D_Pin;
 8002112:	2304      	movs	r3, #4
 8002114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GAS_D_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	4814      	ldr	r0, [pc, #80]	; (8002178 <MX_GPIO_Init+0x18c>)
 8002126:	f003 fbaf 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOST_ENABLE_Pin */
  GPIO_InitStruct.Pin = BOOST_ENABLE_Pin;
 800212a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800212e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002130:	2301      	movs	r3, #1
 8002132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BOOST_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4619      	mov	r1, r3
 8002142:	480d      	ldr	r0, [pc, #52]	; (8002178 <MX_GPIO_Init+0x18c>)
 8002144:	f003 fba0 	bl	8005888 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002148:	2200      	movs	r2, #0
 800214a:	2105      	movs	r1, #5
 800214c:	200a      	movs	r0, #10
 800214e:	f003 f8fb 	bl	8005348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002152:	200a      	movs	r0, #10
 8002154:	f003 f914 	bl	8005380 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002158:	2200      	movs	r2, #0
 800215a:	2105      	movs	r1, #5
 800215c:	2028      	movs	r0, #40	; 0x28
 800215e:	f003 f8f3 	bl	8005348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002162:	2028      	movs	r0, #40	; 0x28
 8002164:	f003 f90c 	bl	8005380 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002168:	bf00      	nop
 800216a:	3728      	adds	r7, #40	; 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	48000800 	.word	0x48000800
 8002178:	48000400 	.word	0x48000400

0800217c <measurements_task>:

/* USER CODE BEGIN 4 */
	void measurements_task(void *pvParameters){
 800217c:	b580      	push	{r7, lr}
 800217e:	ed2d 8b02 	vpush	{d8}
 8002182:	b09c      	sub	sp, #112	; 0x70
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
		while(1)
		{
			shtc3_perform_measurements(&hi2c2, &temp, &hum);
 8002188:	4a8b      	ldr	r2, [pc, #556]	; (80023b8 <measurements_task+0x23c>)
 800218a:	498c      	ldr	r1, [pc, #560]	; (80023bc <measurements_task+0x240>)
 800218c:	488c      	ldr	r0, [pc, #560]	; (80023c0 <measurements_task+0x244>)
 800218e:	f000 fec9 	bl	8002f24 <shtc3_perform_measurements>

			MPU6050_Read_All(&hi2c3, &imuData);
 8002192:	498c      	ldr	r1, [pc, #560]	; (80023c4 <measurements_task+0x248>)
 8002194:	488c      	ldr	r0, [pc, #560]	; (80023c8 <measurements_task+0x24c>)
 8002196:	f000 faab 	bl	80026f0 <MPU6050_Read_All>

			Usr_GpsL86GetValues(&gpsData);
 800219a:	488c      	ldr	r0, [pc, #560]	; (80023cc <measurements_task+0x250>)
 800219c:	f7ff f8ec 	bl	8001378 <Usr_GpsL86GetValues>
			//begin(&hadc1);


			measuredData.lpg = readLPG(&hadc1);
 80021a0:	488b      	ldr	r0, [pc, #556]	; (80023d0 <measurements_task+0x254>)
 80021a2:	f7fe ff39 	bl	8001018 <readLPG>
 80021a6:	eef0 7a40 	vmov.f32	s15, s0
 80021aa:	4b8a      	ldr	r3, [pc, #552]	; (80023d4 <measurements_task+0x258>)
 80021ac:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			measuredData.smoke = readSmoke(&hadc1);
 80021b0:	4887      	ldr	r0, [pc, #540]	; (80023d0 <measurements_task+0x254>)
 80021b2:	f7fe ff7d 	bl	80010b0 <readSmoke>
 80021b6:	eef0 7a40 	vmov.f32	s15, s0
 80021ba:	4b86      	ldr	r3, [pc, #536]	; (80023d4 <measurements_task+0x258>)
 80021bc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			measuredData.co = readCO(&hadc1);
 80021c0:	4883      	ldr	r0, [pc, #524]	; (80023d0 <measurements_task+0x254>)
 80021c2:	f7fe ff4f 	bl	8001064 <readCO>
 80021c6:	eef0 7a40 	vmov.f32	s15, s0
 80021ca:	4b82      	ldr	r3, [pc, #520]	; (80023d4 <measurements_task+0x258>)
 80021cc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			measuredData.humidity = hum;
 80021d0:	4b79      	ldr	r3, [pc, #484]	; (80023b8 <measurements_task+0x23c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a7f      	ldr	r2, [pc, #508]	; (80023d4 <measurements_task+0x258>)
 80021d6:	6053      	str	r3, [r2, #4]
			measuredData.temperature = temp;
 80021d8:	4b78      	ldr	r3, [pc, #480]	; (80023bc <measurements_task+0x240>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a7d      	ldr	r2, [pc, #500]	; (80023d4 <measurements_task+0x258>)
 80021de:	6013      	str	r3, [r2, #0]
			measuredData.accelX = imuData.Ax;
 80021e0:	4b78      	ldr	r3, [pc, #480]	; (80023c4 <measurements_task+0x248>)
 80021e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021e6:	497b      	ldr	r1, [pc, #492]	; (80023d4 <measurements_task+0x258>)
 80021e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
			measuredData.accelY = imuData.Ay;
 80021ec:	4b75      	ldr	r3, [pc, #468]	; (80023c4 <measurements_task+0x248>)
 80021ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80021f2:	4978      	ldr	r1, [pc, #480]	; (80023d4 <measurements_task+0x258>)
 80021f4:	e9c1 2308 	strd	r2, r3, [r1, #32]
			measuredData.accelZ = imuData.Az;
 80021f8:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <measurements_task+0x248>)
 80021fa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021fe:	4975      	ldr	r1, [pc, #468]	; (80023d4 <measurements_task+0x258>)
 8002200:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			measuredData.latitude = gpsData.lat;
 8002204:	4b71      	ldr	r3, [pc, #452]	; (80023cc <measurements_task+0x250>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a72      	ldr	r2, [pc, #456]	; (80023d4 <measurements_task+0x258>)
 800220a:	6093      	str	r3, [r2, #8]
			measuredData.longitude = gpsData.lon;
 800220c:	4b6f      	ldr	r3, [pc, #444]	; (80023cc <measurements_task+0x250>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a70      	ldr	r2, [pc, #448]	; (80023d4 <measurements_task+0x258>)
 8002212:	60d3      	str	r3, [r2, #12]
			measuredData.altitude = gpsData.altitudeInMeter;
 8002214:	4b6d      	ldr	r3, [pc, #436]	; (80023cc <measurements_task+0x250>)
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	4a6e      	ldr	r2, [pc, #440]	; (80023d4 <measurements_task+0x258>)
 800221a:	6113      	str	r3, [r2, #16]
			//float gpsTimeSnapshot = gpsData.fixedTime;
			//measuredData.time = gpsTimeSnapshot;
			measuredData.time = gpsData.fixedTime;
 800221c:	4b6b      	ldr	r3, [pc, #428]	; (80023cc <measurements_task+0x250>)
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	4a6c      	ldr	r2, [pc, #432]	; (80023d4 <measurements_task+0x258>)
 8002222:	6153      	str	r3, [r2, #20]
			accx = measuredData.accelZ;
 8002224:	4b6b      	ldr	r3, [pc, #428]	; (80023d4 <measurements_task+0x258>)
 8002226:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800222a:	4610      	mov	r0, r2
 800222c:	4619      	mov	r1, r3
 800222e:	f7fe fcdb 	bl	8000be8 <__aeabi_d2f>
 8002232:	4603      	mov	r3, r0
 8002234:	4a68      	ldr	r2, [pc, #416]	; (80023d8 <measurements_task+0x25c>)
 8002236:	6013      	str	r3, [r2, #0]
			/*HAL_ADC_Start(&hadc2);
			HAL_ADC_PollForConversion(&hadc2, 100);
			measuredData.batStatus = (HAL_ADC_GetValue(&hadc2)*batMaxVoltage)/4095;
			HAL_ADC_Stop(&hadc2);*/

			accel = sqrt(square(imuData.Ax) + square(imuData.Ay) + square(imuData.Az));
 8002238:	4b62      	ldr	r3, [pc, #392]	; (80023c4 <measurements_task+0x248>)
 800223a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	f7fe fcd1 	bl	8000be8 <__aeabi_d2f>
 8002246:	4603      	mov	r3, r0
 8002248:	ee00 3a10 	vmov	s0, r3
 800224c:	f000 f9d0 	bl	80025f0 <square>
 8002250:	eeb0 8a40 	vmov.f32	s16, s0
 8002254:	4b5b      	ldr	r3, [pc, #364]	; (80023c4 <measurements_task+0x248>)
 8002256:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f7fe fcc3 	bl	8000be8 <__aeabi_d2f>
 8002262:	4603      	mov	r3, r0
 8002264:	ee00 3a10 	vmov	s0, r3
 8002268:	f000 f9c2 	bl	80025f0 <square>
 800226c:	eef0 7a40 	vmov.f32	s15, s0
 8002270:	ee38 8a27 	vadd.f32	s16, s16, s15
 8002274:	4b53      	ldr	r3, [pc, #332]	; (80023c4 <measurements_task+0x248>)
 8002276:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	f7fe fcb3 	bl	8000be8 <__aeabi_d2f>
 8002282:	4603      	mov	r3, r0
 8002284:	ee00 3a10 	vmov	s0, r3
 8002288:	f000 f9b2 	bl	80025f0 <square>
 800228c:	eef0 7a40 	vmov.f32	s15, s0
 8002290:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002294:	ee17 0a90 	vmov	r0, s15
 8002298:	f7fe f956 	bl	8000548 <__aeabi_f2d>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	ec43 2b10 	vmov	d0, r2, r3
 80022a4:	f010 fa02 	bl	80126ac <sqrt>
 80022a8:	ec53 2b10 	vmov	r2, r3, d0
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	f7fe fc9a 	bl	8000be8 <__aeabi_d2f>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4a49      	ldr	r2, [pc, #292]	; (80023dc <measurements_task+0x260>)
 80022b8:	6013      	str	r3, [r2, #0]
			if (accel >= 2.0){
 80022ba:	4b48      	ldr	r3, [pc, #288]	; (80023dc <measurements_task+0x260>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80022c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022cc:	db12      	blt.n	80022f4 <measurements_task+0x178>
				char buffer[100];
				sprintf(buffer, "30 \n");
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	4943      	ldr	r1, [pc, #268]	; (80023e0 <measurements_task+0x264>)
 80022d4:	4618      	mov	r0, r3
 80022d6:	f00b fff1 	bl	800e2bc <siprintf>
				HAL_UART_Transmit(&huart3,(uint8_t*)buffer, strlen(buffer), 50);
 80022da:	f107 0308 	add.w	r3, r7, #8
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fd ffc6 	bl	8000270 <strlen>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	f107 0108 	add.w	r1, r7, #8
 80022ec:	2332      	movs	r3, #50	; 0x32
 80022ee:	483d      	ldr	r0, [pc, #244]	; (80023e4 <measurements_task+0x268>)
 80022f0:	f007 fb1b 	bl	800992a <HAL_UART_Transmit>
			}

			if (measuredData.batStatus <= voltageThreshold){
 80022f4:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <measurements_task+0x258>)
 80022f6:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80022fa:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <measurements_task+0x26c>)
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	d812      	bhi.n	8002330 <measurements_task+0x1b4>
				char buffer[100];
				sprintf(buffer,"10 \n");
 800230a:	f107 0308 	add.w	r3, r7, #8
 800230e:	4937      	ldr	r1, [pc, #220]	; (80023ec <measurements_task+0x270>)
 8002310:	4618      	mov	r0, r3
 8002312:	f00b ffd3 	bl	800e2bc <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer), 50);
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	4618      	mov	r0, r3
 800231c:	f7fd ffa8 	bl	8000270 <strlen>
 8002320:	4603      	mov	r3, r0
 8002322:	b29a      	uxth	r2, r3
 8002324:	f107 0108 	add.w	r1, r7, #8
 8002328:	2332      	movs	r3, #50	; 0x32
 800232a:	4831      	ldr	r0, [pc, #196]	; (80023f0 <measurements_task+0x274>)
 800232c:	f007 fafd 	bl	800992a <HAL_UART_Transmit>
				//HAL_UART_Transmit(&huart3,(uint8_t*)buffer,strlen(buffer), 50);
			}

			if (measuredData.batStatus >= batMaxVoltage){
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <measurements_task+0x258>)
 8002332:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002336:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <measurements_task+0x278>)
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002344:	db12      	blt.n	800236c <measurements_task+0x1f0>
				char buffer[100];
				sprintf(buffer,"20 \n");
 8002346:	f107 0308 	add.w	r3, r7, #8
 800234a:	492b      	ldr	r1, [pc, #172]	; (80023f8 <measurements_task+0x27c>)
 800234c:	4618      	mov	r0, r3
 800234e:	f00b ffb5 	bl	800e2bc <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer), 50);
 8002352:	f107 0308 	add.w	r3, r7, #8
 8002356:	4618      	mov	r0, r3
 8002358:	f7fd ff8a 	bl	8000270 <strlen>
 800235c:	4603      	mov	r3, r0
 800235e:	b29a      	uxth	r2, r3
 8002360:	f107 0108 	add.w	r1, r7, #8
 8002364:	2332      	movs	r3, #50	; 0x32
 8002366:	4822      	ldr	r0, [pc, #136]	; (80023f0 <measurements_task+0x274>)
 8002368:	f007 fadf 	bl	800992a <HAL_UART_Transmit>
			}

			unsigned long currentTime =  xTaskGetTickCount();
 800236c:	f009 fecc 	bl	800c108 <xTaskGetTickCount>
 8002370:	66f8      	str	r0, [r7, #108]	; 0x6c

			if( currentTime - lastSendTime >= sendInterval){
 8002372:	4b22      	ldr	r3, [pc, #136]	; (80023fc <measurements_task+0x280>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002378:	1ad2      	subs	r2, r2, r3
 800237a:	4b21      	ldr	r3, [pc, #132]	; (8002400 <measurements_task+0x284>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d310      	bcc.n	80023a4 <measurements_task+0x228>
			if(xQueueSend(Queue_Handler,&measuredData,portMAX_DELAY) == pdPASS){
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <measurements_task+0x288>)
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	2300      	movs	r3, #0
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	4911      	ldr	r1, [pc, #68]	; (80023d4 <measurements_task+0x258>)
 800238e:	f008 ff21 	bl	800b1d4 <xQueueGenericSend>
 8002392:	4603      	mov	r3, r0
 8002394:	2b01      	cmp	r3, #1
 8002396:	d102      	bne.n	800239e <measurements_task+0x222>
				flag = 1;
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <measurements_task+0x28c>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]
			}
			lastSendTime = currentTime;
 800239e:	4a17      	ldr	r2, [pc, #92]	; (80023fc <measurements_task+0x280>)
 80023a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a2:	6013      	str	r3, [r2, #0]
			}
			watermark = uxTaskGetStackHighWaterMark(NULL);
 80023a4:	2000      	movs	r0, #0
 80023a6:	f00a f985 	bl	800c6b4 <uxTaskGetStackHighWaterMark>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4a17      	ldr	r2, [pc, #92]	; (800240c <measurements_task+0x290>)
 80023ae:	6013      	str	r3, [r2, #0]
			vTaskDelay(pdMS_TO_TICKS(10));
 80023b0:	200a      	movs	r0, #10
 80023b2:	f009 fd61 	bl	800be78 <vTaskDelay>
		{
 80023b6:	e6e7      	b.n	8002188 <measurements_task+0xc>
 80023b8:	20001300 	.word	0x20001300
 80023bc:	200012fc 	.word	0x200012fc
 80023c0:	20000f54 	.word	0x20000f54
 80023c4:	20001398 	.word	0x20001398
 80023c8:	20000fa8 	.word	0x20000fa8
 80023cc:	200013f0 	.word	0x200013f0
 80023d0:	20000e8c 	.word	0x20000e8c
 80023d4:	20001350 	.word	0x20001350
 80023d8:	20001420 	.word	0x20001420
 80023dc:	20001428 	.word	0x20001428
 80023e0:	08013d74 	.word	0x08013d74
 80023e4:	2000122c 	.word	0x2000122c
 80023e8:	2000002c 	.word	0x2000002c
 80023ec:	08013d7c 	.word	0x08013d7c
 80023f0:	2000111c 	.word	0x2000111c
 80023f4:	20000028 	.word	0x20000028
 80023f8:	08013d84 	.word	0x08013d84
 80023fc:	20001424 	.word	0x20001424
 8002400:	20000030 	.word	0x20000030
 8002404:	20001438 	.word	0x20001438
 8002408:	20001304 	.word	0x20001304
 800240c:	20001394 	.word	0x20001394

08002410 <sender_task>:
		}
	}

	void sender_task(void *pvParameters){
 8002410:	b580      	push	{r7, lr}
 8002412:	b09c      	sub	sp, #112	; 0x70
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

		while(1){
			if(xQueueReceive(Queue_Handler, &sendData, portMAX_DELAY) == pdPASS){
 8002418:	4b10      	ldr	r3, [pc, #64]	; (800245c <sender_task+0x4c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	490f      	ldr	r1, [pc, #60]	; (8002460 <sender_task+0x50>)
 8002422:	4618      	mov	r0, r3
 8002424:	f009 f862 	bl	800b4ec <xQueueReceive>
 8002428:	4603      	mov	r3, r0
 800242a:	2b01      	cmp	r3, #1
 800242c:	d1f4      	bne.n	8002418 <sender_task+0x8>
				char buffer[100];
				sprintf(buffer,"%d %d \n", sendData.humidity, sendData.temperature);
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <sender_task+0x50>)
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <sender_task+0x50>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f107 000c 	add.w	r0, r7, #12
 800243a:	490a      	ldr	r1, [pc, #40]	; (8002464 <sender_task+0x54>)
 800243c:	f00b ff3e 	bl	800e2bc <siprintf>
				//xSemaphoreTake(AlarmMutex_Handler,portMAX_DELAY);
				HAL_UART_Transmit(&huart3,(uint8_t*)buffer, strlen(buffer), 50);
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	4618      	mov	r0, r3
 8002446:	f7fd ff13 	bl	8000270 <strlen>
 800244a:	4603      	mov	r3, r0
 800244c:	b29a      	uxth	r2, r3
 800244e:	f107 010c 	add.w	r1, r7, #12
 8002452:	2332      	movs	r3, #50	; 0x32
 8002454:	4804      	ldr	r0, [pc, #16]	; (8002468 <sender_task+0x58>)
 8002456:	f007 fa68 	bl	800992a <HAL_UART_Transmit>
			if(xQueueReceive(Queue_Handler, &sendData, portMAX_DELAY) == pdPASS){
 800245a:	e7dd      	b.n	8002418 <sender_task+0x8>
 800245c:	20001438 	.word	0x20001438
 8002460:	20001310 	.word	0x20001310
 8002464:	08013d8c 	.word	0x08013d8c
 8002468:	2000122c 	.word	0x2000122c

0800246c <LED_task>:
			//vTaskDelay(pdMS_TO_TICKS(0.5));
		}
	}


	void LED_task(void *pvParameters){
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

		while(1){
			if(xSemaphoreTake(PWM_Sem_Handler,portMAX_DELAY) == pdTRUE){
 8002474:	4b43      	ldr	r3, [pc, #268]	; (8002584 <LED_task+0x118>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f04f 31ff 	mov.w	r1, #4294967295
 800247c:	4618      	mov	r0, r3
 800247e:	f009 f915 	bl	800b6ac <xQueueSemaphoreTake>
 8002482:	4603      	mov	r3, r0
 8002484:	2b01      	cmp	r3, #1
 8002486:	d1f5      	bne.n	8002474 <LED_task+0x8>

				if (state < 4){
 8002488:	4b3f      	ldr	r3, [pc, #252]	; (8002588 <LED_task+0x11c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b03      	cmp	r3, #3
 800248e:	dc05      	bgt.n	800249c <LED_task+0x30>
							state++;
 8002490:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <LED_task+0x11c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3301      	adds	r3, #1
 8002496:	4a3c      	ldr	r2, [pc, #240]	; (8002588 <LED_task+0x11c>)
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e002      	b.n	80024a2 <LED_task+0x36>
						}else state = 0;
 800249c:	4b3a      	ldr	r3, [pc, #232]	; (8002588 <LED_task+0x11c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
					switch(state){
 80024a2:	4b39      	ldr	r3, [pc, #228]	; (8002588 <LED_task+0x11c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d8e4      	bhi.n	8002474 <LED_task+0x8>
 80024aa:	a201      	add	r2, pc, #4	; (adr r2, 80024b0 <LED_task+0x44>)
 80024ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b0:	080024c5 	.word	0x080024c5
 80024b4:	080024d7 	.word	0x080024d7
 80024b8:	08002509 	.word	0x08002509
 80024bc:	0800253b 	.word	0x0800253b
 80024c0:	0800256d 	.word	0x0800256d
							  case 0:
								  cmp_reg = 0;
 80024c4:	4b31      	ldr	r3, [pc, #196]	; (800258c <LED_task+0x120>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
								  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,cmp_reg);
 80024ca:	4b31      	ldr	r3, [pc, #196]	; (8002590 <LED_task+0x124>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a2f      	ldr	r2, [pc, #188]	; (800258c <LED_task+0x120>)
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	635a      	str	r2, [r3, #52]	; 0x34
								  break;
 80024d4:	e055      	b.n	8002582 <LED_task+0x116>
							  case 1:
								  cmp_reg = 0.25 * htim3.Init.Period;
 80024d6:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <LED_task+0x124>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe f812 	bl	8000504 <__aeabi_ui2d>
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <LED_task+0x128>)
 80024e6:	f7fe f887 	bl	80005f8 <__aeabi_dmul>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4610      	mov	r0, r2
 80024f0:	4619      	mov	r1, r3
 80024f2:	f7fe fb59 	bl	8000ba8 <__aeabi_d2uiz>
 80024f6:	4603      	mov	r3, r0
 80024f8:	4a24      	ldr	r2, [pc, #144]	; (800258c <LED_task+0x120>)
 80024fa:	6013      	str	r3, [r2, #0]
								  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,cmp_reg);
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <LED_task+0x124>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a22      	ldr	r2, [pc, #136]	; (800258c <LED_task+0x120>)
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	635a      	str	r2, [r3, #52]	; 0x34
								  break;
 8002506:	e03c      	b.n	8002582 <LED_task+0x116>
							  case 2:
								  cmp_reg = 0.5 * htim3.Init.Period;
 8002508:	4b21      	ldr	r3, [pc, #132]	; (8002590 <LED_task+0x124>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fd fff9 	bl	8000504 <__aeabi_ui2d>
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	4b20      	ldr	r3, [pc, #128]	; (8002598 <LED_task+0x12c>)
 8002518:	f7fe f86e 	bl	80005f8 <__aeabi_dmul>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	f7fe fb40 	bl	8000ba8 <__aeabi_d2uiz>
 8002528:	4603      	mov	r3, r0
 800252a:	4a18      	ldr	r2, [pc, #96]	; (800258c <LED_task+0x120>)
 800252c:	6013      	str	r3, [r2, #0]
								  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,cmp_reg);
 800252e:	4b18      	ldr	r3, [pc, #96]	; (8002590 <LED_task+0x124>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a16      	ldr	r2, [pc, #88]	; (800258c <LED_task+0x120>)
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	635a      	str	r2, [r3, #52]	; 0x34
								  break;
 8002538:	e023      	b.n	8002582 <LED_task+0x116>
							  case 3:
								  cmp_reg = 0.75 * htim3.Init.Period;
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <LED_task+0x124>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fd ffe0 	bl	8000504 <__aeabi_ui2d>
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <LED_task+0x130>)
 800254a:	f7fe f855 	bl	80005f8 <__aeabi_dmul>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	f7fe fb27 	bl	8000ba8 <__aeabi_d2uiz>
 800255a:	4603      	mov	r3, r0
 800255c:	4a0b      	ldr	r2, [pc, #44]	; (800258c <LED_task+0x120>)
 800255e:	6013      	str	r3, [r2, #0]
								  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,cmp_reg);
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <LED_task+0x124>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a09      	ldr	r2, [pc, #36]	; (800258c <LED_task+0x120>)
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	635a      	str	r2, [r3, #52]	; 0x34
								  break;
 800256a:	e00a      	b.n	8002582 <LED_task+0x116>
							  case 4:
								  cmp_reg = 1 * htim3.Init.Period;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <LED_task+0x124>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <LED_task+0x120>)
 8002572:	6013      	str	r3, [r2, #0]
								  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,cmp_reg);
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <LED_task+0x124>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a04      	ldr	r2, [pc, #16]	; (800258c <LED_task+0x120>)
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	635a      	str	r2, [r3, #52]	; 0x34
								  break;
 800257e:	bf00      	nop
 8002580:	e778      	b.n	8002474 <LED_task+0x8>
			if(xSemaphoreTake(PWM_Sem_Handler,portMAX_DELAY) == pdTRUE){
 8002582:	e777      	b.n	8002474 <LED_task+0x8>
 8002584:	2000143c 	.word	0x2000143c
 8002588:	20001308 	.word	0x20001308
 800258c:	20001390 	.word	0x20001390
 8002590:	20001048 	.word	0x20001048
 8002594:	3fd00000 	.word	0x3fd00000
 8002598:	3fe00000 	.word	0x3fe00000
 800259c:	3fe80000 	.word	0x3fe80000

080025a0 <HAL_GPIO_EXTI_Callback>:
					}
		}
	}
	}

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == GPIO_PIN_4){
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	d117      	bne.n	80025e0 <HAL_GPIO_EXTI_Callback+0x40>
		  BaseType_t task_woken = pdFALSE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
		  xSemaphoreGiveFromISR(PWM_Sem_Handler,&task_woken);
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_GPIO_EXTI_Callback+0x48>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f107 020c 	add.w	r2, r7, #12
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f008 ff06 	bl	800b3d0 <xQueueGiveFromISR>

		  if(task_woken){
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_GPIO_EXTI_Callback+0x40>
			  portYIELD_FROM_ISR(task_woken);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_GPIO_EXTI_Callback+0x40>
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_GPIO_EXTI_Callback+0x4c>)
 80025d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	f3bf 8f4f 	dsb	sy
 80025dc:	f3bf 8f6f 	isb	sy

		  }
		}
	  }
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	2000143c 	.word	0x2000143c
 80025ec:	e000ed04 	.word	0xe000ed04

080025f0 <square>:

	/* ------- HELPING FUNCTIONS ------- */
	float square(float number){
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	ed87 0a01 	vstr	s0, [r7, #4]
		return number*number;
 80025fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80025fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
	}
 8002602:	eeb0 0a67 	vmov.f32	s0, s15
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002622:	f001 f9d5 	bl	80039d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40001000 	.word	0x40001000

08002634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002638:	b672      	cpsid	i
}
 800263a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800263c:	e7fe      	b.n	800263c <Error_Handler+0x8>

0800263e <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b088      	sub	sp, #32
 8002642:	af04      	add	r7, sp, #16
 8002644:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002646:	2364      	movs	r3, #100	; 0x64
 8002648:	9302      	str	r3, [sp, #8]
 800264a:	2301      	movs	r3, #1
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	f107 030f 	add.w	r3, r7, #15
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	2301      	movs	r3, #1
 8002656:	2275      	movs	r2, #117	; 0x75
 8002658:	21d0      	movs	r1, #208	; 0xd0
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f003 feac 	bl	80063b8 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	2b68      	cmp	r3, #104	; 0x68
 8002664:	d13d      	bne.n	80026e2 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800266a:	2364      	movs	r3, #100	; 0x64
 800266c:	9302      	str	r3, [sp, #8]
 800266e:	2301      	movs	r3, #1
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	f107 030e 	add.w	r3, r7, #14
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2301      	movs	r3, #1
 800267a:	226b      	movs	r2, #107	; 0x6b
 800267c:	21d0      	movs	r1, #208	; 0xd0
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f003 fd86 	bl	8006190 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002684:	2307      	movs	r3, #7
 8002686:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002688:	2364      	movs	r3, #100	; 0x64
 800268a:	9302      	str	r3, [sp, #8]
 800268c:	2301      	movs	r3, #1
 800268e:	9301      	str	r3, [sp, #4]
 8002690:	f107 030e 	add.w	r3, r7, #14
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	2301      	movs	r3, #1
 8002698:	2219      	movs	r2, #25
 800269a:	21d0      	movs	r1, #208	; 0xd0
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f003 fd77 	bl	8006190 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80026a6:	2364      	movs	r3, #100	; 0x64
 80026a8:	9302      	str	r3, [sp, #8]
 80026aa:	2301      	movs	r3, #1
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	f107 030e 	add.w	r3, r7, #14
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	2301      	movs	r3, #1
 80026b6:	221c      	movs	r2, #28
 80026b8:	21d0      	movs	r1, #208	; 0xd0
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f003 fd68 	bl	8006190 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80026c4:	2364      	movs	r3, #100	; 0x64
 80026c6:	9302      	str	r3, [sp, #8]
 80026c8:	2301      	movs	r3, #1
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	f107 030e 	add.w	r3, r7, #14
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	2301      	movs	r3, #1
 80026d4:	221b      	movs	r2, #27
 80026d6:	21d0      	movs	r1, #208	; 0xd0
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f003 fd59 	bl	8006190 <HAL_I2C_Mem_Write>
        return 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <MPU6050_Init+0xa6>
    }
    return 1;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	0000      	movs	r0, r0
	...

080026f0 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80026f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f4:	b094      	sub	sp, #80	; 0x50
 80026f6:	af04      	add	r7, sp, #16
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80026fc:	2364      	movs	r3, #100	; 0x64
 80026fe:	9302      	str	r3, [sp, #8]
 8002700:	230e      	movs	r3, #14
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	f107 0308 	add.w	r3, r7, #8
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2301      	movs	r3, #1
 800270c:	223b      	movs	r2, #59	; 0x3b
 800270e:	21d0      	movs	r1, #208	; 0xd0
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f003 fe51 	bl	80063b8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002716:	7a3b      	ldrb	r3, [r7, #8]
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	b21a      	sxth	r2, r3
 800271c:	7a7b      	ldrb	r3, [r7, #9]
 800271e:	b21b      	sxth	r3, r3
 8002720:	4313      	orrs	r3, r2
 8002722:	b21a      	sxth	r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002728:	7abb      	ldrb	r3, [r7, #10]
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	b21a      	sxth	r2, r3
 800272e:	7afb      	ldrb	r3, [r7, #11]
 8002730:	b21b      	sxth	r3, r3
 8002732:	4313      	orrs	r3, r2
 8002734:	b21a      	sxth	r2, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800273a:	7b3b      	ldrb	r3, [r7, #12]
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	b21a      	sxth	r2, r3
 8002740:	7b7b      	ldrb	r3, [r7, #13]
 8002742:	b21b      	sxth	r3, r3
 8002744:	4313      	orrs	r3, r2
 8002746:	b21a      	sxth	r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800274c:	7bbb      	ldrb	r3, [r7, #14]
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	b21a      	sxth	r2, r3
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	b21b      	sxth	r3, r3
 8002756:	4313      	orrs	r3, r2
 8002758:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800275a:	7c3b      	ldrb	r3, [r7, #16]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	b21a      	sxth	r2, r3
 8002760:	7c7b      	ldrb	r3, [r7, #17]
 8002762:	b21b      	sxth	r3, r3
 8002764:	4313      	orrs	r3, r2
 8002766:	b21a      	sxth	r2, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800276c:	7cbb      	ldrb	r3, [r7, #18]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	b21a      	sxth	r2, r3
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	b21b      	sxth	r3, r3
 8002776:	4313      	orrs	r3, r2
 8002778:	b21a      	sxth	r2, r3
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800277e:	7d3b      	ldrb	r3, [r7, #20]
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	b21a      	sxth	r2, r3
 8002784:	7d7b      	ldrb	r3, [r7, #21]
 8002786:	b21b      	sxth	r3, r3
 8002788:	4313      	orrs	r3, r2
 800278a:	b21a      	sxth	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fd fec4 	bl	8000524 <__aeabi_i2d>
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	4bbd      	ldr	r3, [pc, #756]	; (8002a98 <MPU6050_Read_All+0x3a8>)
 80027a2:	f7fe f853 	bl	800084c <__aeabi_ddiv>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	6839      	ldr	r1, [r7, #0]
 80027ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd feb4 	bl	8000524 <__aeabi_i2d>
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	4bb5      	ldr	r3, [pc, #724]	; (8002a98 <MPU6050_Read_All+0x3a8>)
 80027c2:	f7fe f843 	bl	800084c <__aeabi_ddiv>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	6839      	ldr	r1, [r7, #0]
 80027cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fea4 	bl	8000524 <__aeabi_i2d>
 80027dc:	a3a8      	add	r3, pc, #672	; (adr r3, 8002a80 <MPU6050_Read_All+0x390>)
 80027de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e2:	f7fe f833 	bl	800084c <__aeabi_ddiv>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	6839      	ldr	r1, [r7, #0]
 80027ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80027f0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80027f4:	ee07 3a90 	vmov	s15, r3
 80027f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027fc:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8002a9c <MPU6050_Read_All+0x3ac>
 8002800:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002804:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002aa0 <MPU6050_Read_All+0x3b0>
 8002808:	ee77 7a87 	vadd.f32	s15, s15, s14
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd fe83 	bl	8000524 <__aeabi_i2d>
 800281e:	a39a      	add	r3, pc, #616	; (adr r3, 8002a88 <MPU6050_Read_All+0x398>)
 8002820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002824:	f7fe f812 	bl	800084c <__aeabi_ddiv>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	6839      	ldr	r1, [r7, #0]
 800282e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fe73 	bl	8000524 <__aeabi_i2d>
 800283e:	a392      	add	r3, pc, #584	; (adr r3, 8002a88 <MPU6050_Read_All+0x398>)
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	f7fe f802 	bl	800084c <__aeabi_ddiv>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	6839      	ldr	r1, [r7, #0]
 800284e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe63 	bl	8000524 <__aeabi_i2d>
 800285e:	a38a      	add	r3, pc, #552	; (adr r3, 8002a88 <MPU6050_Read_All+0x398>)
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	f7fd fff2 	bl	800084c <__aeabi_ddiv>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	6839      	ldr	r1, [r7, #0]
 800286e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002872:	f001 f8c1 	bl	80039f8 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	4b8a      	ldr	r3, [pc, #552]	; (8002aa4 <MPU6050_Read_All+0x3b4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	4618      	mov	r0, r3
 8002880:	f7fd fe40 	bl	8000504 <__aeabi_ui2d>
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	4b87      	ldr	r3, [pc, #540]	; (8002aa8 <MPU6050_Read_All+0x3b8>)
 800288a:	f7fd ffdf 	bl	800084c <__aeabi_ddiv>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002896:	f001 f8af 	bl	80039f8 <HAL_GetTick>
 800289a:	4603      	mov	r3, r0
 800289c:	4a81      	ldr	r2, [pc, #516]	; (8002aa4 <MPU6050_Read_All+0x3b4>)
 800289e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a6:	461a      	mov	r2, r3
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ae:	fb03 f202 	mul.w	r2, r3, r2
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028b8:	4619      	mov	r1, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fe2c 	bl	8000524 <__aeabi_i2d>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	ec43 2b10 	vmov	d0, r2, r3
 80028d4:	f00f feea 	bl	80126ac <sqrt>
 80028d8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80028e8:	f7fe f8ee 	bl	8000ac8 <__aeabi_dcmpeq>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d11f      	bne.n	8002932 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fe13 	bl	8000524 <__aeabi_i2d>
 80028fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002902:	f7fd ffa3 	bl	800084c <__aeabi_ddiv>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	ec43 2b17 	vmov	d7, r2, r3
 800290e:	eeb0 0a47 	vmov.f32	s0, s14
 8002912:	eef0 0a67 	vmov.f32	s1, s15
 8002916:	f00f fef7 	bl	8012708 <atan>
 800291a:	ec51 0b10 	vmov	r0, r1, d0
 800291e:	a35c      	add	r3, pc, #368	; (adr r3, 8002a90 <MPU6050_Read_All+0x3a0>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	f7fd fe68 	bl	80005f8 <__aeabi_dmul>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002930:	e005      	b.n	800293e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002944:	425b      	negs	r3, r3
 8002946:	4618      	mov	r0, r3
 8002948:	f7fd fdec 	bl	8000524 <__aeabi_i2d>
 800294c:	4682      	mov	sl, r0
 800294e:	468b      	mov	fp, r1
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fde4 	bl	8000524 <__aeabi_i2d>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	ec43 2b11 	vmov	d1, r2, r3
 8002964:	ec4b ab10 	vmov	d0, sl, fp
 8002968:	f00f fdee 	bl	8012548 <atan2>
 800296c:	ec51 0b10 	vmov	r0, r1, d0
 8002970:	a347      	add	r3, pc, #284	; (adr r3, 8002a90 <MPU6050_Read_All+0x3a0>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	f7fd fe3f 	bl	80005f8 <__aeabi_dmul>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	4b49      	ldr	r3, [pc, #292]	; (8002aac <MPU6050_Read_All+0x3bc>)
 8002988:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800298c:	f7fe f8a6 	bl	8000adc <__aeabi_dcmplt>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <MPU6050_Read_All+0x2bc>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <MPU6050_Read_All+0x3c0>)
 80029a2:	f7fe f8b9 	bl	8000b18 <__aeabi_dcmpgt>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d114      	bne.n	80029d6 <MPU6050_Read_All+0x2e6>
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	4b3f      	ldr	r3, [pc, #252]	; (8002ab0 <MPU6050_Read_All+0x3c0>)
 80029b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029b6:	f7fe f8af 	bl	8000b18 <__aeabi_dcmpgt>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d015      	beq.n	80029ec <MPU6050_Read_All+0x2fc>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	4b38      	ldr	r3, [pc, #224]	; (8002aac <MPU6050_Read_All+0x3bc>)
 80029cc:	f7fe f886 	bl	8000adc <__aeabi_dcmplt>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 80029d6:	4937      	ldr	r1, [pc, #220]	; (8002ab4 <MPU6050_Read_All+0x3c4>)
 80029d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80029e0:	6839      	ldr	r1, [r7, #0]
 80029e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80029ea:	e014      	b.n	8002a16 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80029f2:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80029f6:	eeb0 1a47 	vmov.f32	s2, s14
 80029fa:	eef0 1a67 	vmov.f32	s3, s15
 80029fe:	ed97 0b06 	vldr	d0, [r7, #24]
 8002a02:	482c      	ldr	r0, [pc, #176]	; (8002ab4 <MPU6050_Read_All+0x3c4>)
 8002a04:	f000 f85a 	bl	8002abc <Kalman_getAngle>
 8002a08:	eeb0 7a40 	vmov.f32	s14, s0
 8002a0c:	eef0 7a60 	vmov.f32	s15, s1
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002a1c:	4690      	mov	r8, r2
 8002a1e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <MPU6050_Read_All+0x3c0>)
 8002a28:	4640      	mov	r0, r8
 8002a2a:	4649      	mov	r1, r9
 8002a2c:	f7fe f874 	bl	8000b18 <__aeabi_dcmpgt>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002a3c:	4614      	mov	r4, r2
 8002a3e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002a4e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002a52:	eeb0 1a47 	vmov.f32	s2, s14
 8002a56:	eef0 1a67 	vmov.f32	s3, s15
 8002a5a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002a5e:	4816      	ldr	r0, [pc, #88]	; (8002ab8 <MPU6050_Read_All+0x3c8>)
 8002a60:	f000 f82c 	bl	8002abc <Kalman_getAngle>
 8002a64:	eeb0 7a40 	vmov.f32	s14, s0
 8002a68:	eef0 7a60 	vmov.f32	s15, s1
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8002a72:	bf00      	nop
 8002a74:	3740      	adds	r7, #64	; 0x40
 8002a76:	46bd      	mov	sp, r7
 8002a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a7c:	f3af 8000 	nop.w
 8002a80:	00000000 	.word	0x00000000
 8002a84:	40cc2900 	.word	0x40cc2900
 8002a88:	00000000 	.word	0x00000000
 8002a8c:	40606000 	.word	0x40606000
 8002a90:	1a63c1f8 	.word	0x1a63c1f8
 8002a94:	404ca5dc 	.word	0x404ca5dc
 8002a98:	40d00000 	.word	0x40d00000
 8002a9c:	43aa0000 	.word	0x43aa0000
 8002aa0:	42121eb8 	.word	0x42121eb8
 8002aa4:	20001440 	.word	0x20001440
 8002aa8:	408f4000 	.word	0x408f4000
 8002aac:	c0568000 	.word	0xc0568000
 8002ab0:	40568000 	.word	0x40568000
 8002ab4:	20000080 	.word	0x20000080
 8002ab8:	20000038 	.word	0x20000038

08002abc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002abc:	b5b0      	push	{r4, r5, r7, lr}
 8002abe:	b096      	sub	sp, #88	; 0x58
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	61f8      	str	r0, [r7, #28]
 8002ac4:	ed87 0b04 	vstr	d0, [r7, #16]
 8002ac8:	ed87 1b02 	vstr	d1, [r7, #8]
 8002acc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002ad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ada:	f7fd fbd5 	bl	8000288 <__aeabi_dsub>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002aec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002af0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002af4:	f7fd fd80 	bl	80005f8 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4620      	mov	r0, r4
 8002afe:	4629      	mov	r1, r5
 8002b00:	f7fd fbc4 	bl	800028c <__adddf3>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	69f9      	ldr	r1, [r7, #28]
 8002b0a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002b1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b1e:	f7fd fd6b 	bl	80005f8 <__aeabi_dmul>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002b30:	f7fd fbaa 	bl	8000288 <__aeabi_dsub>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002b42:	f7fd fba1 	bl	8000288 <__aeabi_dsub>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f7fd fb9a 	bl	800028c <__adddf3>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b64:	f7fd fd48 	bl	80005f8 <__aeabi_dmul>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	4629      	mov	r1, r5
 8002b70:	f7fd fb8c 	bl	800028c <__adddf3>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	69f9      	ldr	r1, [r7, #28]
 8002b7a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b8e:	f7fd fd33 	bl	80005f8 <__aeabi_dmul>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4620      	mov	r0, r4
 8002b98:	4629      	mov	r1, r5
 8002b9a:	f7fd fb75 	bl	8000288 <__aeabi_dsub>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	69f9      	ldr	r1, [r7, #28]
 8002ba4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bb8:	f7fd fd1e 	bl	80005f8 <__aeabi_dmul>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	f7fd fb60 	bl	8000288 <__aeabi_dsub>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	69f9      	ldr	r1, [r7, #28]
 8002bce:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002be2:	f7fd fd09 	bl	80005f8 <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4620      	mov	r0, r4
 8002bec:	4629      	mov	r1, r5
 8002bee:	f7fd fb4d 	bl	800028c <__adddf3>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	69f9      	ldr	r1, [r7, #28]
 8002bf8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c08:	f7fd fb40 	bl	800028c <__adddf3>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002c1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c1e:	f7fd fe15 	bl	800084c <__aeabi_ddiv>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002c30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c34:	f7fd fe0a 	bl	800084c <__aeabi_ddiv>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002c46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c4a:	f7fd fb1d 	bl	8000288 <__aeabi_dsub>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002c5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c64:	f7fd fcc8 	bl	80005f8 <__aeabi_dmul>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	4629      	mov	r1, r5
 8002c70:	f7fd fb0c 	bl	800028c <__adddf3>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	69f9      	ldr	r1, [r7, #28]
 8002c7a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002c84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c8c:	f7fd fcb4 	bl	80005f8 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4620      	mov	r0, r4
 8002c96:	4629      	mov	r1, r5
 8002c98:	f7fd faf8 	bl	800028c <__adddf3>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	69f9      	ldr	r1, [r7, #28]
 8002ca2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002cac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002cb6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002cc0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002cc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cc8:	f7fd fc96 	bl	80005f8 <__aeabi_dmul>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	f7fd fad8 	bl	8000288 <__aeabi_dsub>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	69f9      	ldr	r1, [r7, #28]
 8002cde:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002ce8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002cec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cf0:	f7fd fc82 	bl	80005f8 <__aeabi_dmul>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	f7fd fac4 	bl	8000288 <__aeabi_dsub>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	69f9      	ldr	r1, [r7, #28]
 8002d06:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002d10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d18:	f7fd fc6e 	bl	80005f8 <__aeabi_dmul>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4620      	mov	r0, r4
 8002d22:	4629      	mov	r1, r5
 8002d24:	f7fd fab0 	bl	8000288 <__aeabi_dsub>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	69f9      	ldr	r1, [r7, #28]
 8002d2e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002d38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d40:	f7fd fc5a 	bl	80005f8 <__aeabi_dmul>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4620      	mov	r0, r4
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	f7fd fa9c 	bl	8000288 <__aeabi_dsub>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	69f9      	ldr	r1, [r7, #28]
 8002d56:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d60:	ec43 2b17 	vmov	d7, r2, r3
};
 8002d64:	eeb0 0a47 	vmov.f32	s0, s14
 8002d68:	eef0 0a67 	vmov.f32	s1, s15
 8002d6c:	3758      	adds	r7, #88	; 0x58
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bdb0      	pop	{r4, r5, r7, pc}

08002d72 <checkCRC>:
  return res == HAL_OK;
}


static uint32_t checkCRC(uint16_t value, uint8_t expected)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b085      	sub	sp, #20
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	460a      	mov	r2, r1
 8002d7c:	80fb      	strh	r3, [r7, #6]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	717b      	strb	r3, [r7, #5]
	uint8_t data[2] = {value >> 8, value & 0xFF};
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	0a1b      	lsrs	r3, r3, #8
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	723b      	strb	r3, [r7, #8]
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	727b      	strb	r3, [r7, #9]
	uint8_t crc = 0xFF;
 8002d92:	23ff      	movs	r3, #255	; 0xff
 8002d94:	73fb      	strb	r3, [r7, #15]
	uint8_t poly = 0x31;
 8002d96:	2331      	movs	r3, #49	; 0x31
 8002d98:	733b      	strb	r3, [r7, #12]

	for (uint8_t indi = 0; indi < 2; indi++) {
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73bb      	strb	r3, [r7, #14]
 8002d9e:	e023      	b.n	8002de8 <checkCRC+0x76>
		crc ^= data[indi];
 8002da0:	7bbb      	ldrb	r3, [r7, #14]
 8002da2:	3310      	adds	r3, #16
 8002da4:	443b      	add	r3, r7
 8002da6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	4053      	eors	r3, r2
 8002dae:	73fb      	strb	r3, [r7, #15]
		for (uint8_t indj = 0; indj < 8; indj++) {
 8002db0:	2300      	movs	r3, #0
 8002db2:	737b      	strb	r3, [r7, #13]
 8002db4:	e012      	b.n	8002ddc <checkCRC+0x6a>
			if (crc & 0x80) {
 8002db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	da08      	bge.n	8002dd0 <checkCRC+0x5e>
				crc = (uint8_t)((crc << 1) ^ poly);
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	b25a      	sxtb	r2, r3
 8002dc4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002dc8:	4053      	eors	r3, r2
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	73fb      	strb	r3, [r7, #15]
 8002dce:	e002      	b.n	8002dd6 <checkCRC+0x64>
			} else {
				crc <<= 1;
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
		for (uint8_t indj = 0; indj < 8; indj++) {
 8002dd6:	7b7b      	ldrb	r3, [r7, #13]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	737b      	strb	r3, [r7, #13]
 8002ddc:	7b7b      	ldrb	r3, [r7, #13]
 8002dde:	2b07      	cmp	r3, #7
 8002de0:	d9e9      	bls.n	8002db6 <checkCRC+0x44>
	for (uint8_t indi = 0; indi < 2; indi++) {
 8002de2:	7bbb      	ldrb	r3, [r7, #14]
 8002de4:	3301      	adds	r3, #1
 8002de6:	73bb      	strb	r3, [r7, #14]
 8002de8:	7bbb      	ldrb	r3, [r7, #14]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d9d8      	bls.n	8002da0 <checkCRC+0x2e>
			}
		}
	}

	if (expected ^ crc)	{
 8002dee:	797a      	ldrb	r2, [r7, #5]
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d001      	beq.n	8002dfa <checkCRC+0x88>
    return 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e000      	b.n	8002dfc <checkCRC+0x8a>
	}
  return 1;
 8002dfa:	2301      	movs	r3, #1
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <_read_values>:

static uint32_t _read_values(uint8_t* data, int32_t* out_temp, int32_t* out_hum)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  // Check CRC
  uint32_t raw_hum = data[0] << 8 | data[1];
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	3201      	adds	r2, #1
 8002e1e:	7812      	ldrb	r2, [r2, #0]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
  uint32_t raw_temp = data[3] << 8 | data[4];
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3303      	adds	r3, #3
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	3204      	adds	r2, #4
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]

  if (!checkCRC(raw_hum, data[2])) {
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	4619      	mov	r1, r3
 8002e42:	4610      	mov	r0, r2
 8002e44:	f7ff ff95 	bl	8002d72 <checkCRC>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <_read_values+0x4a>
    return 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e02e      	b.n	8002eb0 <_read_values+0xa8>
  }
  if (!checkCRC(raw_temp, data[5])) {
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	3305      	adds	r3, #5
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f7ff ff87 	bl	8002d72 <checkCRC>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <_read_values+0x66>
    return 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e020      	b.n	8002eb0 <_read_values+0xa8>
  }

  // Convert values
  if (out_hum) {
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <_read_values+0x82>
    *out_hum = raw_hum * 100 / 65535;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2264      	movs	r2, #100	; 0x64
 8002e78:	fb02 f303 	mul.w	r3, r2, r3
 8002e7c:	4a0e      	ldr	r2, [pc, #56]	; (8002eb8 <_read_values+0xb0>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	0bdb      	lsrs	r3, r3, #15
 8002e84:	461a      	mov	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	601a      	str	r2, [r3, #0]
  }
  if (out_temp) {
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <_read_values+0xa6>
    *out_temp = raw_temp * 17500 / 65535 - 4500;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f244 425c 	movw	r2, #17500	; 0x445c
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	4a07      	ldr	r2, [pc, #28]	; (8002eb8 <_read_values+0xb0>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	0bdb      	lsrs	r3, r3, #15
 8002ea2:	f5a3 538c 	sub.w	r3, r3, #4480	; 0x1180
 8002ea6:	3b14      	subs	r3, #20
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	601a      	str	r2, [r3, #0]
  }

  return 1;
 8002eae:	2301      	movs	r3, #1
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	80008001 	.word	0x80008001

08002ebc <_perform_measurements>:

static uint32_t _perform_measurements(I2C_HandleTypeDef *hi2c, uint16_t command, int32_t* out_temp, int32_t* out_hum)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	817b      	strh	r3, [r7, #10]
  uint8_t result[6];

  uint32_t res = HAL_I2C_Master_Transmit(hi2c, SHTC3_ADDRESS_WRITE, (uint8_t*)&command, 2, 100);
 8002ecc:	f107 020a 	add.w	r2, r7, #10
 8002ed0:	2364      	movs	r3, #100	; 0x64
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	21e0      	movs	r1, #224	; 0xe0
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f002 ff4b 	bl	8005d74 <HAL_I2C_Master_Transmit>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	61fb      	str	r3, [r7, #28]
  if (res != HAL_OK) {
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <_perform_measurements+0x30>
    return 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e017      	b.n	8002f1c <_perform_measurements+0x60>
  }

  res = HAL_I2C_Master_Receive(hi2c, SHTC3_ADDRESS_READ, result, 6, 100);
 8002eec:	f107 0214 	add.w	r2, r7, #20
 8002ef0:	2364      	movs	r3, #100	; 0x64
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	2306      	movs	r3, #6
 8002ef6:	21e1      	movs	r1, #225	; 0xe1
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f003 f853 	bl	8005fa4 <HAL_I2C_Master_Receive>
 8002efe:	4603      	mov	r3, r0
 8002f00:	61fb      	str	r3, [r7, #28]
  if (res != HAL_OK) {
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <_perform_measurements+0x50>
    return 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e007      	b.n	8002f1c <_perform_measurements+0x60>
  }

  return _read_values(result, out_temp, out_hum);
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff77 	bl	8002e08 <_read_values>
 8002f1a:	4603      	mov	r3, r0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <shtc3_perform_measurements>:

uint32_t shtc3_perform_measurements(I2C_HandleTypeDef *hi2c, int32_t* out_temp, int32_t* out_hum)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  return _perform_measurements(hi2c, SHTC3_CMD_CLK_STRETCH_READ_HUM_FIRST, out_temp, out_hum);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	f242 415c 	movw	r1, #9308	; 0x245c
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff ffbf 	bl	8002ebc <_perform_measurements>
 8002f3e:	4603      	mov	r3, r0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f52:	4a10      	ldr	r2, [pc, #64]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6613      	str	r3, [r2, #96]	; 0x60
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f70:	6593      	str	r3, [r2, #88]	; 0x58
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	210f      	movs	r1, #15
 8002f82:	f06f 0001 	mvn.w	r0, #1
 8002f86:	f002 f9df 	bl	8005348 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08c      	sub	sp, #48	; 0x30
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	f107 031c 	add.w	r3, r7, #28
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a33      	ldr	r2, [pc, #204]	; (8003084 <HAL_ADC_MspInit+0xec>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d12d      	bne.n	8003016 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002fba:	4b33      	ldr	r3, [pc, #204]	; (8003088 <HAL_ADC_MspInit+0xf0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	4a31      	ldr	r2, [pc, #196]	; (8003088 <HAL_ADC_MspInit+0xf0>)
 8002fc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002fc4:	4b30      	ldr	r3, [pc, #192]	; (8003088 <HAL_ADC_MspInit+0xf0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d10b      	bne.n	8002fe4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002fcc:	4b2f      	ldr	r3, [pc, #188]	; (800308c <HAL_ADC_MspInit+0xf4>)
 8002fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd0:	4a2e      	ldr	r2, [pc, #184]	; (800308c <HAL_ADC_MspInit+0xf4>)
 8002fd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fd8:	4b2c      	ldr	r3, [pc, #176]	; (800308c <HAL_ADC_MspInit+0xf4>)
 8002fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe4:	4b29      	ldr	r3, [pc, #164]	; (800308c <HAL_ADC_MspInit+0xf4>)
 8002fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe8:	4a28      	ldr	r2, [pc, #160]	; (800308c <HAL_ADC_MspInit+0xf4>)
 8002fea:	f043 0302 	orr.w	r3, r3, #2
 8002fee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ff0:	4b26      	ldr	r3, [pc, #152]	; (800308c <HAL_ADC_MspInit+0xf4>)
 8002ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GAS_ADC_Pin;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003000:	230b      	movs	r3, #11
 8003002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GAS_ADC_GPIO_Port, &GPIO_InitStruct);
 8003008:	f107 031c 	add.w	r3, r7, #28
 800300c:	4619      	mov	r1, r3
 800300e:	4820      	ldr	r0, [pc, #128]	; (8003090 <HAL_ADC_MspInit+0xf8>)
 8003010:	f002 fc3a 	bl	8005888 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003014:	e031      	b.n	800307a <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <HAL_ADC_MspInit+0xfc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d12c      	bne.n	800307a <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_ADC_MspInit+0xf0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	4a18      	ldr	r2, [pc, #96]	; (8003088 <HAL_ADC_MspInit+0xf0>)
 8003028:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800302a:	4b17      	ldr	r3, [pc, #92]	; (8003088 <HAL_ADC_MspInit+0xf0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d10b      	bne.n	800304a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <HAL_ADC_MspInit+0xf4>)
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	4a15      	ldr	r2, [pc, #84]	; (800308c <HAL_ADC_MspInit+0xf4>)
 8003038:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800303c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800303e:	4b13      	ldr	r3, [pc, #76]	; (800308c <HAL_ADC_MspInit+0xf4>)
 8003040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <HAL_ADC_MspInit+0xf4>)
 800304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304e:	4a0f      	ldr	r2, [pc, #60]	; (800308c <HAL_ADC_MspInit+0xf4>)
 8003050:	f043 0304 	orr.w	r3, r3, #4
 8003054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <HAL_ADC_MspInit+0xf4>)
 8003058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BAT_SENSE_Pin;
 8003062:	2320      	movs	r3, #32
 8003064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003066:	230b      	movs	r3, #11
 8003068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 800306e:	f107 031c 	add.w	r3, r7, #28
 8003072:	4619      	mov	r1, r3
 8003074:	4808      	ldr	r0, [pc, #32]	; (8003098 <HAL_ADC_MspInit+0x100>)
 8003076:	f002 fc07 	bl	8005888 <HAL_GPIO_Init>
}
 800307a:	bf00      	nop
 800307c:	3730      	adds	r7, #48	; 0x30
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	50040000 	.word	0x50040000
 8003088:	20001444 	.word	0x20001444
 800308c:	40021000 	.word	0x40021000
 8003090:	48000400 	.word	0x48000400
 8003094:	50040100 	.word	0x50040100
 8003098:	48000800 	.word	0x48000800

0800309c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b0ae      	sub	sp, #184	; 0xb8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030b4:	f107 031c 	add.w	r3, r7, #28
 80030b8:	2288      	movs	r2, #136	; 0x88
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f00b f98e 	bl	800e3de <memset>
  if(hi2c->Instance==I2C2)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a42      	ldr	r2, [pc, #264]	; (80031d0 <HAL_I2C_MspInit+0x134>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d13c      	bne.n	8003146 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80030d0:	2300      	movs	r3, #0
 80030d2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030d4:	f107 031c 	add.w	r3, r7, #28
 80030d8:	4618      	mov	r0, r3
 80030da:	f004 fd03 	bl	8007ae4 <HAL_RCCEx_PeriphCLKConfig>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80030e4:	f7ff faa6 	bl	8002634 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e8:	4b3a      	ldr	r3, [pc, #232]	; (80031d4 <HAL_I2C_MspInit+0x138>)
 80030ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ec:	4a39      	ldr	r2, [pc, #228]	; (80031d4 <HAL_I2C_MspInit+0x138>)
 80030ee:	f043 0302 	orr.w	r3, r3, #2
 80030f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030f4:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <HAL_I2C_MspInit+0x138>)
 80030f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = TEMP_SCL_Pin|TEMP_SDA_Pin;
 8003100:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003104:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003108:	2312      	movs	r3, #18
 800310a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003114:	2303      	movs	r3, #3
 8003116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800311a:	2304      	movs	r3, #4
 800311c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003120:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003124:	4619      	mov	r1, r3
 8003126:	482c      	ldr	r0, [pc, #176]	; (80031d8 <HAL_I2C_MspInit+0x13c>)
 8003128:	f002 fbae 	bl	8005888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800312c:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <HAL_I2C_MspInit+0x138>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	4a28      	ldr	r2, [pc, #160]	; (80031d4 <HAL_I2C_MspInit+0x138>)
 8003132:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003136:	6593      	str	r3, [r2, #88]	; 0x58
 8003138:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <HAL_I2C_MspInit+0x138>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003144:	e040      	b.n	80031c8 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C3)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a24      	ldr	r2, [pc, #144]	; (80031dc <HAL_I2C_MspInit+0x140>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d13b      	bne.n	80031c8 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003154:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003156:	2300      	movs	r3, #0
 8003158:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800315a:	f107 031c 	add.w	r3, r7, #28
 800315e:	4618      	mov	r0, r3
 8003160:	f004 fcc0 	bl	8007ae4 <HAL_RCCEx_PeriphCLKConfig>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 800316a:	f7ff fa63 	bl	8002634 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800316e:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <HAL_I2C_MspInit+0x138>)
 8003170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003172:	4a18      	ldr	r2, [pc, #96]	; (80031d4 <HAL_I2C_MspInit+0x138>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <HAL_I2C_MspInit+0x138>)
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8003186:	2303      	movs	r3, #3
 8003188:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800318c:	2312      	movs	r3, #18
 800318e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003198:	2303      	movs	r3, #3
 800319a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800319e:	2304      	movs	r3, #4
 80031a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80031a8:	4619      	mov	r1, r3
 80031aa:	480d      	ldr	r0, [pc, #52]	; (80031e0 <HAL_I2C_MspInit+0x144>)
 80031ac:	f002 fb6c 	bl	8005888 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_I2C_MspInit+0x138>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b4:	4a07      	ldr	r2, [pc, #28]	; (80031d4 <HAL_I2C_MspInit+0x138>)
 80031b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031ba:	6593      	str	r3, [r2, #88]	; 0x58
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_I2C_MspInit+0x138>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
}
 80031c8:	bf00      	nop
 80031ca:	37b8      	adds	r7, #184	; 0xb8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40005800 	.word	0x40005800
 80031d4:	40021000 	.word	0x40021000
 80031d8:	48000400 	.word	0x48000400
 80031dc:	40005c00 	.word	0x40005c00
 80031e0:	48000800 	.word	0x48000800

080031e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a13      	ldr	r2, [pc, #76]	; (8003240 <HAL_TIM_PWM_MspInit+0x5c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d10c      	bne.n	8003210 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <HAL_TIM_PWM_MspInit+0x60>)
 80031f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fa:	4a12      	ldr	r2, [pc, #72]	; (8003244 <HAL_TIM_PWM_MspInit+0x60>)
 80031fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003200:	6613      	str	r3, [r2, #96]	; 0x60
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_TIM_PWM_MspInit+0x60>)
 8003204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800320e:	e010      	b.n	8003232 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0c      	ldr	r2, [pc, #48]	; (8003248 <HAL_TIM_PWM_MspInit+0x64>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d10b      	bne.n	8003232 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <HAL_TIM_PWM_MspInit+0x60>)
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	4a09      	ldr	r2, [pc, #36]	; (8003244 <HAL_TIM_PWM_MspInit+0x60>)
 8003220:	f043 0302 	orr.w	r3, r3, #2
 8003224:	6593      	str	r3, [r2, #88]	; 0x58
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <HAL_TIM_PWM_MspInit+0x60>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40012c00 	.word	0x40012c00
 8003244:	40021000 	.word	0x40021000
 8003248:	40000400 	.word	0x40000400

0800324c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	; 0x28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003254:	f107 0314 	add.w	r3, r7, #20
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a23      	ldr	r2, [pc, #140]	; (80032f8 <HAL_TIM_MspPostInit+0xac>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d11d      	bne.n	80032aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800326e:	4b23      	ldr	r3, [pc, #140]	; (80032fc <HAL_TIM_MspPostInit+0xb0>)
 8003270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003272:	4a22      	ldr	r2, [pc, #136]	; (80032fc <HAL_TIM_MspPostInit+0xb0>)
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800327a:	4b20      	ldr	r3, [pc, #128]	; (80032fc <HAL_TIM_MspPostInit+0xb0>)
 800327c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8003286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800328a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328c:	2302      	movs	r3, #2
 800328e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003294:	2300      	movs	r3, #0
 8003296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003298:	2301      	movs	r3, #1
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 800329c:	f107 0314 	add.w	r3, r7, #20
 80032a0:	4619      	mov	r1, r3
 80032a2:	4817      	ldr	r0, [pc, #92]	; (8003300 <HAL_TIM_MspPostInit+0xb4>)
 80032a4:	f002 faf0 	bl	8005888 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80032a8:	e021      	b.n	80032ee <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a15      	ldr	r2, [pc, #84]	; (8003304 <HAL_TIM_MspPostInit+0xb8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d11c      	bne.n	80032ee <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_TIM_MspPostInit+0xb0>)
 80032b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b8:	4a10      	ldr	r2, [pc, #64]	; (80032fc <HAL_TIM_MspPostInit+0xb0>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032c0:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <HAL_TIM_MspPostInit+0xb0>)
 80032c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032cc:	2340      	movs	r3, #64	; 0x40
 80032ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	2300      	movs	r3, #0
 80032da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032dc:	2302      	movs	r3, #2
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 0314 	add.w	r3, r7, #20
 80032e4:	4619      	mov	r1, r3
 80032e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032ea:	f002 facd 	bl	8005888 <HAL_GPIO_Init>
}
 80032ee:	bf00      	nop
 80032f0:	3728      	adds	r7, #40	; 0x28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40021000 	.word	0x40021000
 8003300:	48000400 	.word	0x48000400
 8003304:	40000400 	.word	0x40000400

08003308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b0b2      	sub	sp, #200	; 0xc8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003310:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	60da      	str	r2, [r3, #12]
 800331e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003320:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003324:	2288      	movs	r2, #136	; 0x88
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f00b f858 	bl	800e3de <memset>
  if(huart->Instance==UART5)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4aae      	ldr	r2, [pc, #696]	; (80035ec <HAL_UART_MspInit+0x2e4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	f040 808f 	bne.w	8003458 <HAL_UART_MspInit+0x150>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800333a:	2310      	movs	r3, #16
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800333e:	2300      	movs	r3, #0
 8003340:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003346:	4618      	mov	r0, r3
 8003348:	f004 fbcc 	bl	8007ae4 <HAL_RCCEx_PeriphCLKConfig>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003352:	f7ff f96f 	bl	8002634 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003356:	4ba6      	ldr	r3, [pc, #664]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	4aa5      	ldr	r2, [pc, #660]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 800335c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003360:	6593      	str	r3, [r2, #88]	; 0x58
 8003362:	4ba3      	ldr	r3, [pc, #652]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
 800336c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800336e:	4ba0      	ldr	r3, [pc, #640]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 8003370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003372:	4a9f      	ldr	r2, [pc, #636]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 8003374:	f043 0304 	orr.w	r3, r3, #4
 8003378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800337a:	4b9d      	ldr	r3, [pc, #628]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003386:	4b9a      	ldr	r3, [pc, #616]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338a:	4a99      	ldr	r2, [pc, #612]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 800338c:	f043 0308 	orr.w	r3, r3, #8
 8003390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003392:	4b97      	ldr	r3, [pc, #604]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 8003394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	623b      	str	r3, [r7, #32]
 800339c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 800339e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	2302      	movs	r3, #2
 80033a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b2:	2303      	movs	r3, #3
 80033b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80033b8:	2308      	movs	r3, #8
 80033ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 80033be:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80033c2:	4619      	mov	r1, r3
 80033c4:	488b      	ldr	r0, [pc, #556]	; (80035f4 <HAL_UART_MspInit+0x2ec>)
 80033c6:	f002 fa5f 	bl	8005888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 80033ca:	2304      	movs	r3, #4
 80033cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033dc:	2303      	movs	r3, #3
 80033de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80033e2:	2308      	movs	r3, #8
 80033e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 80033e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80033ec:	4619      	mov	r1, r3
 80033ee:	4882      	ldr	r0, [pc, #520]	; (80035f8 <HAL_UART_MspInit+0x2f0>)
 80033f0:	f002 fa4a 	bl	8005888 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA2_Channel2;
 80033f4:	4b81      	ldr	r3, [pc, #516]	; (80035fc <HAL_UART_MspInit+0x2f4>)
 80033f6:	4a82      	ldr	r2, [pc, #520]	; (8003600 <HAL_UART_MspInit+0x2f8>)
 80033f8:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 80033fa:	4b80      	ldr	r3, [pc, #512]	; (80035fc <HAL_UART_MspInit+0x2f4>)
 80033fc:	2202      	movs	r2, #2
 80033fe:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003400:	4b7e      	ldr	r3, [pc, #504]	; (80035fc <HAL_UART_MspInit+0x2f4>)
 8003402:	2200      	movs	r2, #0
 8003404:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003406:	4b7d      	ldr	r3, [pc, #500]	; (80035fc <HAL_UART_MspInit+0x2f4>)
 8003408:	2200      	movs	r2, #0
 800340a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800340c:	4b7b      	ldr	r3, [pc, #492]	; (80035fc <HAL_UART_MspInit+0x2f4>)
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003412:	4b7a      	ldr	r3, [pc, #488]	; (80035fc <HAL_UART_MspInit+0x2f4>)
 8003414:	2200      	movs	r2, #0
 8003416:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003418:	4b78      	ldr	r3, [pc, #480]	; (80035fc <HAL_UART_MspInit+0x2f4>)
 800341a:	2200      	movs	r2, #0
 800341c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800341e:	4b77      	ldr	r3, [pc, #476]	; (80035fc <HAL_UART_MspInit+0x2f4>)
 8003420:	2200      	movs	r2, #0
 8003422:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003424:	4b75      	ldr	r3, [pc, #468]	; (80035fc <HAL_UART_MspInit+0x2f4>)
 8003426:	2200      	movs	r2, #0
 8003428:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800342a:	4874      	ldr	r0, [pc, #464]	; (80035fc <HAL_UART_MspInit+0x2f4>)
 800342c:	f001 ffb6 	bl	800539c <HAL_DMA_Init>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8003436:	f7ff f8fd 	bl	8002634 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a6f      	ldr	r2, [pc, #444]	; (80035fc <HAL_UART_MspInit+0x2f4>)
 800343e:	675a      	str	r2, [r3, #116]	; 0x74
 8003440:	4a6e      	ldr	r2, [pc, #440]	; (80035fc <HAL_UART_MspInit+0x2f4>)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8003446:	2200      	movs	r2, #0
 8003448:	2105      	movs	r1, #5
 800344a:	2035      	movs	r0, #53	; 0x35
 800344c:	f001 ff7c 	bl	8005348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003450:	2035      	movs	r0, #53	; 0x35
 8003452:	f001 ff95 	bl	8005380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003456:	e0c5      	b.n	80035e4 <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a69      	ldr	r2, [pc, #420]	; (8003604 <HAL_UART_MspInit+0x2fc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d13d      	bne.n	80034de <HAL_UART_MspInit+0x1d6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003462:	2301      	movs	r3, #1
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003466:	2300      	movs	r3, #0
 8003468:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800346a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800346e:	4618      	mov	r0, r3
 8003470:	f004 fb38 	bl	8007ae4 <HAL_RCCEx_PeriphCLKConfig>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_UART_MspInit+0x176>
      Error_Handler();
 800347a:	f7ff f8db 	bl	8002634 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800347e:	4b5c      	ldr	r3, [pc, #368]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 8003480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003482:	4a5b      	ldr	r2, [pc, #364]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 8003484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003488:	6613      	str	r3, [r2, #96]	; 0x60
 800348a:	4b59      	ldr	r3, [pc, #356]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 800348c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003496:	4b56      	ldr	r3, [pc, #344]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	4a55      	ldr	r2, [pc, #340]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034a2:	4b53      	ldr	r3, [pc, #332]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 80034a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	61bb      	str	r3, [r7, #24]
 80034ac:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = WK_RX_Pin|WK_TX_Pin;
 80034ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80034b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b6:	2302      	movs	r3, #2
 80034b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c2:	2303      	movs	r3, #3
 80034c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034c8:	2307      	movs	r3, #7
 80034ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034d2:	4619      	mov	r1, r3
 80034d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d8:	f002 f9d6 	bl	8005888 <HAL_GPIO_Init>
}
 80034dc:	e082      	b.n	80035e4 <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART2)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a49      	ldr	r2, [pc, #292]	; (8003608 <HAL_UART_MspInit+0x300>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d13c      	bne.n	8003562 <HAL_UART_MspInit+0x25a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80034e8:	2302      	movs	r3, #2
 80034ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80034ec:	2300      	movs	r3, #0
 80034ee:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034f4:	4618      	mov	r0, r3
 80034f6:	f004 faf5 	bl	8007ae4 <HAL_RCCEx_PeriphCLKConfig>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8003500:	f7ff f898 	bl	8002634 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003504:	4b3a      	ldr	r3, [pc, #232]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 8003506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003508:	4a39      	ldr	r2, [pc, #228]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 800350a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800350e:	6593      	str	r3, [r2, #88]	; 0x58
 8003510:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800351c:	4b34      	ldr	r3, [pc, #208]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 800351e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003520:	4a33      	ldr	r2, [pc, #204]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003528:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 800352a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003534:	230c      	movs	r3, #12
 8003536:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353a:	2302      	movs	r3, #2
 800353c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	2300      	movs	r3, #0
 8003542:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003546:	2303      	movs	r3, #3
 8003548:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800354c:	2307      	movs	r3, #7
 800354e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003552:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003556:	4619      	mov	r1, r3
 8003558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800355c:	f002 f994 	bl	8005888 <HAL_GPIO_Init>
}
 8003560:	e040      	b.n	80035e4 <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART3)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a29      	ldr	r2, [pc, #164]	; (800360c <HAL_UART_MspInit+0x304>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d13b      	bne.n	80035e4 <HAL_UART_MspInit+0x2dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800356c:	2304      	movs	r3, #4
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003570:	2300      	movs	r3, #0
 8003572:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003578:	4618      	mov	r0, r3
 800357a:	f004 fab3 	bl	8007ae4 <HAL_RCCEx_PeriphCLKConfig>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_UART_MspInit+0x280>
      Error_Handler();
 8003584:	f7ff f856 	bl	8002634 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003588:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 800358e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003592:	6593      	str	r3, [r2, #88]	; 0x58
 8003594:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a0:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 80035a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a4:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 80035a6:	f043 0304 	orr.w	r3, r3, #4
 80035aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035ac:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <HAL_UART_MspInit+0x2e8>)
 80035ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NET_ESP_RX_Pin|NET_ESP_TX_Pin;
 80035b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80035bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c0:	2302      	movs	r3, #2
 80035c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035cc:	2303      	movs	r3, #3
 80035ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035d2:	2307      	movs	r3, #7
 80035d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80035dc:	4619      	mov	r1, r3
 80035de:	4805      	ldr	r0, [pc, #20]	; (80035f4 <HAL_UART_MspInit+0x2ec>)
 80035e0:	f002 f952 	bl	8005888 <HAL_GPIO_Init>
}
 80035e4:	bf00      	nop
 80035e6:	37c8      	adds	r7, #200	; 0xc8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40005000 	.word	0x40005000
 80035f0:	40021000 	.word	0x40021000
 80035f4:	48000800 	.word	0x48000800
 80035f8:	48000c00 	.word	0x48000c00
 80035fc:	200012b4 	.word	0x200012b4
 8003600:	4002041c 	.word	0x4002041c
 8003604:	40013800 	.word	0x40013800
 8003608:	40004400 	.word	0x40004400
 800360c:	40004800 	.word	0x40004800

08003610 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08e      	sub	sp, #56	; 0x38
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800361e:	4b34      	ldr	r3, [pc, #208]	; (80036f0 <HAL_InitTick+0xe0>)
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	4a33      	ldr	r2, [pc, #204]	; (80036f0 <HAL_InitTick+0xe0>)
 8003624:	f043 0310 	orr.w	r3, r3, #16
 8003628:	6593      	str	r3, [r2, #88]	; 0x58
 800362a:	4b31      	ldr	r3, [pc, #196]	; (80036f0 <HAL_InitTick+0xe0>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003636:	f107 0210 	add.w	r2, r7, #16
 800363a:	f107 0314 	add.w	r3, r7, #20
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f004 f9bd 	bl	80079c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800364a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d103      	bne.n	8003658 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003650:	f004 f98a 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 8003654:	6378      	str	r0, [r7, #52]	; 0x34
 8003656:	e004      	b.n	8003662 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003658:	f004 f986 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 800365c:	4603      	mov	r3, r0
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003664:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <HAL_InitTick+0xe4>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	0c9b      	lsrs	r3, r3, #18
 800366c:	3b01      	subs	r3, #1
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003670:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <HAL_InitTick+0xe8>)
 8003672:	4a22      	ldr	r2, [pc, #136]	; (80036fc <HAL_InitTick+0xec>)
 8003674:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_InitTick+0xe8>)
 8003678:	f240 32e7 	movw	r2, #999	; 0x3e7
 800367c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800367e:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <HAL_InitTick+0xe8>)
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003684:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <HAL_InitTick+0xe8>)
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800368a:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_InitTick+0xe8>)
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003690:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <HAL_InitTick+0xe8>)
 8003692:	2200      	movs	r2, #0
 8003694:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003696:	4818      	ldr	r0, [pc, #96]	; (80036f8 <HAL_InitTick+0xe8>)
 8003698:	f004 fee0 	bl	800845c <HAL_TIM_Base_Init>
 800369c:	4603      	mov	r3, r0
 800369e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80036a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d11b      	bne.n	80036e2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80036aa:	4813      	ldr	r0, [pc, #76]	; (80036f8 <HAL_InitTick+0xe8>)
 80036ac:	f004 ff38 	bl	8008520 <HAL_TIM_Base_Start_IT>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80036b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d111      	bne.n	80036e2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036be:	2036      	movs	r0, #54	; 0x36
 80036c0:	f001 fe5e 	bl	8005380 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b0f      	cmp	r3, #15
 80036c8:	d808      	bhi.n	80036dc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80036ca:	2200      	movs	r2, #0
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	2036      	movs	r0, #54	; 0x36
 80036d0:	f001 fe3a 	bl	8005348 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036d4:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <HAL_InitTick+0xf0>)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e002      	b.n	80036e2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80036e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3738      	adds	r7, #56	; 0x38
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000
 80036f4:	431bde83 	.word	0x431bde83
 80036f8:	20001448 	.word	0x20001448
 80036fc:	40001000 	.word	0x40001000
 8003700:	200000cc 	.word	0x200000cc

08003704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003708:	e7fe      	b.n	8003708 <NMI_Handler+0x4>

0800370a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800370a:	b480      	push	{r7}
 800370c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800370e:	e7fe      	b.n	800370e <HardFault_Handler+0x4>

08003710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003714:	e7fe      	b.n	8003714 <MemManage_Handler+0x4>

08003716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003716:	b480      	push	{r7}
 8003718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800371a:	e7fe      	b.n	800371a <BusFault_Handler+0x4>

0800371c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003720:	e7fe      	b.n	8003720 <UsageFault_Handler+0x4>

08003722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003722:	b480      	push	{r7}
 8003724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003734:	2010      	movs	r0, #16
 8003736:	f002 fa69 	bl	8005c0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}

0800373e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003742:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003746:	f002 fa61 	bl	8005c0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003754:	4802      	ldr	r0, [pc, #8]	; (8003760 <UART5_IRQHandler+0x10>)
 8003756:	f006 f9bf 	bl	8009ad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800375a:	bf00      	nop
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20001094 	.word	0x20001094

08003764 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003768:	4802      	ldr	r0, [pc, #8]	; (8003774 <TIM6_DAC_IRQHandler+0x10>)
 800376a:	f005 f8a7 	bl	80088bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20001448 	.word	0x20001448

08003778 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800377c:	4802      	ldr	r0, [pc, #8]	; (8003788 <DMA2_Channel2_IRQHandler+0x10>)
 800377e:	f001 ffa4 	bl	80056ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200012b4 	.word	0x200012b4

0800378c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return 1;
 8003790:	2301      	movs	r3, #1
}
 8003792:	4618      	mov	r0, r3
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <_kill>:

int _kill(int pid, int sig)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037a6:	f00a fed9 	bl	800e55c <__errno>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2216      	movs	r2, #22
 80037ae:	601a      	str	r2, [r3, #0]
  return -1;
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <_exit>:

void _exit (int status)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037c4:	f04f 31ff 	mov.w	r1, #4294967295
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ffe7 	bl	800379c <_kill>
  while (1) {}    /* Make sure we hang here */
 80037ce:	e7fe      	b.n	80037ce <_exit+0x12>

080037d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	e00a      	b.n	80037f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037e2:	f3af 8000 	nop.w
 80037e6:	4601      	mov	r1, r0
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	60ba      	str	r2, [r7, #8]
 80037ee:	b2ca      	uxtb	r2, r1
 80037f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	3301      	adds	r3, #1
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	dbf0      	blt.n	80037e2 <_read+0x12>
  }

  return len;
 8003800:	687b      	ldr	r3, [r7, #4]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b086      	sub	sp, #24
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	e009      	b.n	8003830 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	60ba      	str	r2, [r7, #8]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	3301      	adds	r3, #1
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	429a      	cmp	r2, r3
 8003836:	dbf1      	blt.n	800381c <_write+0x12>
  }
  return len;
 8003838:	687b      	ldr	r3, [r7, #4]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <_close>:

int _close(int file)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800386a:	605a      	str	r2, [r3, #4]
  return 0;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <_isatty>:

int _isatty(int file)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003882:	2301      	movs	r3, #1
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038b4:	4a14      	ldr	r2, [pc, #80]	; (8003908 <_sbrk+0x5c>)
 80038b6:	4b15      	ldr	r3, [pc, #84]	; (800390c <_sbrk+0x60>)
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038c0:	4b13      	ldr	r3, [pc, #76]	; (8003910 <_sbrk+0x64>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d102      	bne.n	80038ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <_sbrk+0x64>)
 80038ca:	4a12      	ldr	r2, [pc, #72]	; (8003914 <_sbrk+0x68>)
 80038cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <_sbrk+0x64>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d207      	bcs.n	80038ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038dc:	f00a fe3e 	bl	800e55c <__errno>
 80038e0:	4603      	mov	r3, r0
 80038e2:	220c      	movs	r2, #12
 80038e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038e6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ea:	e009      	b.n	8003900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038ec:	4b08      	ldr	r3, [pc, #32]	; (8003910 <_sbrk+0x64>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038f2:	4b07      	ldr	r3, [pc, #28]	; (8003910 <_sbrk+0x64>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4413      	add	r3, r2
 80038fa:	4a05      	ldr	r2, [pc, #20]	; (8003910 <_sbrk+0x64>)
 80038fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038fe:	68fb      	ldr	r3, [r7, #12]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20018000 	.word	0x20018000
 800390c:	00000400 	.word	0x00000400
 8003910:	20001494 	.word	0x20001494
 8003914:	20008c70 	.word	0x20008c70

08003918 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <SystemInit+0x20>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	4a05      	ldr	r2, [pc, #20]	; (8003938 <SystemInit+0x20>)
 8003924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800393c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003974 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003940:	f7ff ffea 	bl	8003918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003944:	480c      	ldr	r0, [pc, #48]	; (8003978 <LoopForever+0x6>)
  ldr r1, =_edata
 8003946:	490d      	ldr	r1, [pc, #52]	; (800397c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003948:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <LoopForever+0xe>)
  movs r3, #0
 800394a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800394c:	e002      	b.n	8003954 <LoopCopyDataInit>

0800394e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800394e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003952:	3304      	adds	r3, #4

08003954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003958:	d3f9      	bcc.n	800394e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800395a:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <LoopForever+0x12>)
  ldr r4, =_ebss
 800395c:	4c0a      	ldr	r4, [pc, #40]	; (8003988 <LoopForever+0x16>)
  movs r3, #0
 800395e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003960:	e001      	b.n	8003966 <LoopFillZerobss>

08003962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003964:	3204      	adds	r2, #4

08003966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003968:	d3fb      	bcc.n	8003962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800396a:	f00a fdfd 	bl	800e568 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800396e:	f7fd ff0f 	bl	8001790 <main>

08003972 <LoopForever>:

LoopForever:
    b LoopForever
 8003972:	e7fe      	b.n	8003972 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003974:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800397c:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8003980:	080142e8 	.word	0x080142e8
  ldr r2, =_sbss
 8003984:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8003988:	20008c6c 	.word	0x20008c6c

0800398c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800398c:	e7fe      	b.n	800398c <ADC1_2_IRQHandler>
	...

08003990 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800399a:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <HAL_Init+0x3c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a0b      	ldr	r2, [pc, #44]	; (80039cc <HAL_Init+0x3c>)
 80039a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039a6:	2003      	movs	r0, #3
 80039a8:	f001 fcc3 	bl	8005332 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039ac:	200f      	movs	r0, #15
 80039ae:	f7ff fe2f 	bl	8003610 <HAL_InitTick>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	71fb      	strb	r3, [r7, #7]
 80039bc:	e001      	b.n	80039c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039be:	f7ff fac3 	bl	8002f48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039c2:	79fb      	ldrb	r3, [r7, #7]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40022000 	.word	0x40022000

080039d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_IncTick+0x20>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_IncTick+0x24>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4413      	add	r3, r2
 80039e0:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <HAL_IncTick+0x24>)
 80039e2:	6013      	str	r3, [r2, #0]
}
 80039e4:	bf00      	nop
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	200000d0 	.word	0x200000d0
 80039f4:	20001498 	.word	0x20001498

080039f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return uwTick;
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <HAL_GetTick+0x14>)
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20001498 	.word	0x20001498

08003a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a18:	f7ff ffee 	bl	80039f8 <HAL_GetTick>
 8003a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d005      	beq.n	8003a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <HAL_Delay+0x44>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4413      	add	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a36:	bf00      	nop
 8003a38:	f7ff ffde 	bl	80039f8 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d8f7      	bhi.n	8003a38 <HAL_Delay+0x28>
  {
  }
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	200000d0 	.word	0x200000d0

08003a58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	609a      	str	r2, [r3, #8]
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	609a      	str	r2, [r3, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3360      	adds	r3, #96	; 0x60
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <LL_ADC_SetOffset+0x44>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	03fff000 	.word	0x03fff000

08003b08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3360      	adds	r3, #96	; 0x60
 8003b16:	461a      	mov	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3360      	adds	r3, #96	; 0x60
 8003b44:	461a      	mov	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3330      	adds	r3, #48	; 0x30
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	4413      	add	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	211f      	movs	r1, #31
 8003bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	0e9b      	lsrs	r3, r3, #26
 8003bc8:	f003 011f 	and.w	r1, r3, #31
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003bdc:	bf00      	nop
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3314      	adds	r3, #20
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	0e5b      	lsrs	r3, r3, #25
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	4413      	add	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	0d1b      	lsrs	r3, r3, #20
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	2107      	movs	r1, #7
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	401a      	ands	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	0d1b      	lsrs	r3, r3, #20
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f003 0318 	and.w	r3, r3, #24
 8003c62:	4908      	ldr	r1, [pc, #32]	; (8003c84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c64:	40d9      	lsrs	r1, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	400b      	ands	r3, r1
 8003c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	0007ffff 	.word	0x0007ffff

08003c88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 031f 	and.w	r3, r3, #31
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003cd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6093      	str	r3, [r2, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf8:	d101      	bne.n	8003cfe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d48:	d101      	bne.n	8003d4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d70:	f043 0201 	orr.w	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d98:	f043 0202 	orr.w	r2, r3, #2
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <LL_ADC_IsEnabled+0x18>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <LL_ADC_IsEnabled+0x1a>
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d101      	bne.n	8003dea <LL_ADC_IsDisableOngoing+0x18>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <LL_ADC_IsDisableOngoing+0x1a>
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e0c:	f043 0204 	orr.w	r2, r3, #4
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e34:	f043 0210 	orr.w	r2, r3, #16
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d101      	bne.n	8003e60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d101      	bne.n	8003eae <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ebc:	b590      	push	{r4, r7, lr}
 8003ebe:	b089      	sub	sp, #36	; 0x24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e130      	b.n	8004138 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d109      	bne.n	8003ef8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff f857 	bl	8002f98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff fef1 	bl	8003ce4 <LL_ADC_IsDeepPowerDownEnabled>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d004      	beq.n	8003f12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff fed7 	bl	8003cc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff ff0c 	bl	8003d34 <LL_ADC_IsInternalRegulatorEnabled>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d115      	bne.n	8003f4e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fef0 	bl	8003d0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f2c:	4b84      	ldr	r3, [pc, #528]	; (8004140 <HAL_ADC_Init+0x284>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	099b      	lsrs	r3, r3, #6
 8003f32:	4a84      	ldr	r2, [pc, #528]	; (8004144 <HAL_ADC_Init+0x288>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	099b      	lsrs	r3, r3, #6
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f40:	e002      	b.n	8003f48 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f9      	bne.n	8003f42 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff feee 	bl	8003d34 <LL_ADC_IsInternalRegulatorEnabled>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10d      	bne.n	8003f7a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	f043 0210 	orr.w	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6e:	f043 0201 	orr.w	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff ff62 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 8003f84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f040 80c9 	bne.w	8004126 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 80c5 	bne.w	8004126 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003fa4:	f043 0202 	orr.w	r2, r3, #2
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fefb 	bl	8003dac <LL_ADC_IsEnabled>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d115      	bne.n	8003fe8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fbc:	4862      	ldr	r0, [pc, #392]	; (8004148 <HAL_ADC_Init+0x28c>)
 8003fbe:	f7ff fef5 	bl	8003dac <LL_ADC_IsEnabled>
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	4861      	ldr	r0, [pc, #388]	; (800414c <HAL_ADC_Init+0x290>)
 8003fc6:	f7ff fef1 	bl	8003dac <LL_ADC_IsEnabled>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	431c      	orrs	r4, r3
 8003fce:	4860      	ldr	r0, [pc, #384]	; (8004150 <HAL_ADC_Init+0x294>)
 8003fd0:	f7ff feec 	bl	8003dac <LL_ADC_IsEnabled>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	4323      	orrs	r3, r4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	485c      	ldr	r0, [pc, #368]	; (8004154 <HAL_ADC_Init+0x298>)
 8003fe4:	f7ff fd38 	bl	8003a58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	7e5b      	ldrb	r3, [r3, #25]
 8003fec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ff2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003ff8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003ffe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004006:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d106      	bne.n	8004024 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	3b01      	subs	r3, #1
 800401c:	045b      	lsls	r3, r3, #17
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	2b00      	cmp	r3, #0
 800402a:	d009      	beq.n	8004040 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	4b44      	ldr	r3, [pc, #272]	; (8004158 <HAL_ADC_Init+0x29c>)
 8004048:	4013      	ands	r3, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	69b9      	ldr	r1, [r7, #24]
 8004050:	430b      	orrs	r3, r1
 8004052:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff ff1c 	bl	8003e96 <LL_ADC_INJ_IsConversionOngoing>
 800405e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d13d      	bne.n	80040e2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d13a      	bne.n	80040e2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004070:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004078:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004088:	f023 0302 	bic.w	r3, r3, #2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	69b9      	ldr	r1, [r7, #24]
 8004092:	430b      	orrs	r3, r1
 8004094:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800409c:	2b01      	cmp	r3, #1
 800409e:	d118      	bne.n	80040d2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040aa:	f023 0304 	bic.w	r3, r3, #4
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040b6:	4311      	orrs	r1, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80040bc:	4311      	orrs	r1, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040c2:	430a      	orrs	r2, r1
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	611a      	str	r2, [r3, #16]
 80040d0:	e007      	b.n	80040e2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d10c      	bne.n	8004104 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	f023 010f 	bic.w	r1, r3, #15
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	1e5a      	subs	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
 8004102:	e007      	b.n	8004114 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 020f 	bic.w	r2, r2, #15
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004118:	f023 0303 	bic.w	r3, r3, #3
 800411c:	f043 0201 	orr.w	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	655a      	str	r2, [r3, #84]	; 0x54
 8004124:	e007      	b.n	8004136 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412a:	f043 0210 	orr.w	r2, r3, #16
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004136:	7ffb      	ldrb	r3, [r7, #31]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3724      	adds	r7, #36	; 0x24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd90      	pop	{r4, r7, pc}
 8004140:	200000c8 	.word	0x200000c8
 8004144:	053e2d63 	.word	0x053e2d63
 8004148:	50040000 	.word	0x50040000
 800414c:	50040100 	.word	0x50040100
 8004150:	50040200 	.word	0x50040200
 8004154:	50040300 	.word	0x50040300
 8004158:	fff0c007 	.word	0xfff0c007

0800415c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004164:	4857      	ldr	r0, [pc, #348]	; (80042c4 <HAL_ADC_Start+0x168>)
 8004166:	f7ff fd8f 	bl	8003c88 <LL_ADC_GetMultimode>
 800416a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff fe69 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	f040 809c 	bne.w	80042b6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_ADC_Start+0x30>
 8004188:	2302      	movs	r3, #2
 800418a:	e097      	b.n	80042bc <HAL_ADC_Start+0x160>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fe63 	bl	8004e60 <ADC_Enable>
 800419a:	4603      	mov	r3, r0
 800419c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800419e:	7dfb      	ldrb	r3, [r7, #23]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f040 8083 	bne.w	80042ac <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a42      	ldr	r2, [pc, #264]	; (80042c8 <HAL_ADC_Start+0x16c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d002      	beq.n	80041ca <HAL_ADC_Start+0x6e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	e000      	b.n	80041cc <HAL_ADC_Start+0x70>
 80041ca:	4b40      	ldr	r3, [pc, #256]	; (80042cc <HAL_ADC_Start+0x170>)
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d002      	beq.n	80041da <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d105      	bne.n	80041e6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f2:	d106      	bne.n	8004202 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f8:	f023 0206 	bic.w	r2, r3, #6
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	659a      	str	r2, [r3, #88]	; 0x58
 8004200:	e002      	b.n	8004208 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	221c      	movs	r2, #28
 800420e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a2a      	ldr	r2, [pc, #168]	; (80042c8 <HAL_ADC_Start+0x16c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d002      	beq.n	8004228 <HAL_ADC_Start+0xcc>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	e000      	b.n	800422a <HAL_ADC_Start+0xce>
 8004228:	4b28      	ldr	r3, [pc, #160]	; (80042cc <HAL_ADC_Start+0x170>)
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	4293      	cmp	r3, r2
 8004230:	d008      	beq.n	8004244 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b05      	cmp	r3, #5
 800423c:	d002      	beq.n	8004244 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b09      	cmp	r3, #9
 8004242:	d114      	bne.n	800426e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800425a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff fdc6 	bl	8003df8 <LL_ADC_REG_StartConversion>
 800426c:	e025      	b.n	80042ba <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004272:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a12      	ldr	r2, [pc, #72]	; (80042c8 <HAL_ADC_Start+0x16c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d002      	beq.n	800428a <HAL_ADC_Start+0x12e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	e000      	b.n	800428c <HAL_ADC_Start+0x130>
 800428a:	4b10      	ldr	r3, [pc, #64]	; (80042cc <HAL_ADC_Start+0x170>)
 800428c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00f      	beq.n	80042ba <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80042a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	655a      	str	r2, [r3, #84]	; 0x54
 80042aa:	e006      	b.n	80042ba <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80042b4:	e001      	b.n	80042ba <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
 80042b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	50040300 	.word	0x50040300
 80042c8:	50040100 	.word	0x50040100
 80042cc:	50040000 	.word	0x50040000

080042d0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_ADC_Stop+0x16>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e023      	b.n	800432e <HAL_ADC_Stop+0x5e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80042ee:	2103      	movs	r1, #3
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fcf9 	bl	8004ce8 <ADC_ConversionStop>
 80042f6:	4603      	mov	r3, r0
 80042f8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d111      	bne.n	8004324 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fe33 	bl	8004f6c <ADC_Disable>
 8004306:	4603      	mov	r3, r0
 8004308:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d109      	bne.n	8004324 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004314:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004318:	f023 0301 	bic.w	r3, r3, #1
 800431c:	f043 0201 	orr.w	r2, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004342:	4866      	ldr	r0, [pc, #408]	; (80044dc <HAL_ADC_PollForConversion+0x1a4>)
 8004344:	f7ff fca0 	bl	8003c88 <LL_ADC_GetMultimode>
 8004348:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	2b08      	cmp	r3, #8
 8004350:	d102      	bne.n	8004358 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004352:	2308      	movs	r3, #8
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	e02a      	b.n	80043ae <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2b05      	cmp	r3, #5
 8004362:	d002      	beq.n	800436a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2b09      	cmp	r3, #9
 8004368:	d111      	bne.n	800438e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437c:	f043 0220 	orr.w	r2, r3, #32
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e0a4      	b.n	80044d2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004388:	2304      	movs	r3, #4
 800438a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800438c:	e00f      	b.n	80043ae <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800438e:	4853      	ldr	r0, [pc, #332]	; (80044dc <HAL_ADC_PollForConversion+0x1a4>)
 8004390:	f7ff fc88 	bl	8003ca4 <LL_ADC_GetMultiDMATransfer>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d007      	beq.n	80043aa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	f043 0220 	orr.w	r2, r3, #32
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e093      	b.n	80044d2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80043aa:	2304      	movs	r3, #4
 80043ac:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80043ae:	f7ff fb23 	bl	80039f8 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80043b4:	e021      	b.n	80043fa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d01d      	beq.n	80043fa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80043be:	f7ff fb1b 	bl	80039f8 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d302      	bcc.n	80043d4 <HAL_ADC_PollForConversion+0x9c>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d112      	bne.n	80043fa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10b      	bne.n	80043fa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e6:	f043 0204 	orr.w	r2, r3, #4
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e06b      	b.n	80044d2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	4013      	ands	r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0d6      	beq.n	80043b6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fba6 	bl	8003b6a <LL_ADC_REG_IsTriggerSourceSWStart>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01c      	beq.n	800445e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	7e5b      	ldrb	r3, [r3, #25]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d118      	bne.n	800445e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b08      	cmp	r3, #8
 8004438:	d111      	bne.n	800445e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004456:	f043 0201 	orr.w	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <HAL_ADC_PollForConversion+0x1a8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d002      	beq.n	800446e <HAL_ADC_PollForConversion+0x136>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	e000      	b.n	8004470 <HAL_ADC_PollForConversion+0x138>
 800446e:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <HAL_ADC_PollForConversion+0x1ac>)
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	4293      	cmp	r3, r2
 8004476:	d008      	beq.n	800448a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b05      	cmp	r3, #5
 8004482:	d002      	beq.n	800448a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2b09      	cmp	r3, #9
 8004488:	d104      	bne.n	8004494 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	e00c      	b.n	80044ae <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a11      	ldr	r2, [pc, #68]	; (80044e0 <HAL_ADC_PollForConversion+0x1a8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d002      	beq.n	80044a4 <HAL_ADC_PollForConversion+0x16c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	e000      	b.n	80044a6 <HAL_ADC_PollForConversion+0x16e>
 80044a4:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <HAL_ADC_PollForConversion+0x1ac>)
 80044a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d104      	bne.n	80044be <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2208      	movs	r2, #8
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e008      	b.n	80044d0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d103      	bne.n	80044d0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	220c      	movs	r2, #12
 80044ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	50040300 	.word	0x50040300
 80044e0:	50040100 	.word	0x50040100
 80044e4:	50040000 	.word	0x50040000

080044e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b0b6      	sub	sp, #216	; 0xd8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004514:	2300      	movs	r3, #0
 8004516:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x22>
 8004522:	2302      	movs	r3, #2
 8004524:	e3c9      	b.n	8004cba <HAL_ADC_ConfigChannel+0x7b6>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff fc88 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	f040 83aa 	bne.w	8004c94 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b05      	cmp	r3, #5
 800454e:	d824      	bhi.n	800459a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	3b02      	subs	r3, #2
 8004556:	2b03      	cmp	r3, #3
 8004558:	d81b      	bhi.n	8004592 <HAL_ADC_ConfigChannel+0x8e>
 800455a:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <HAL_ADC_ConfigChannel+0x5c>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004571 	.word	0x08004571
 8004564:	08004579 	.word	0x08004579
 8004568:	08004581 	.word	0x08004581
 800456c:	08004589 	.word	0x08004589
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004570:	230c      	movs	r3, #12
 8004572:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004576:	e010      	b.n	800459a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004578:	2312      	movs	r3, #18
 800457a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800457e:	e00c      	b.n	800459a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004580:	2318      	movs	r3, #24
 8004582:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004586:	e008      	b.n	800459a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800458c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004590:	e003      	b.n	800459a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004592:	2306      	movs	r3, #6
 8004594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004598:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80045a8:	f7ff faf2 	bl	8003b90 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fc49 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 80045b6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fc69 	bl	8003e96 <LL_ADC_INJ_IsConversionOngoing>
 80045c4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f040 81a4 	bne.w	800491a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f040 819f 	bne.w	800491a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	461a      	mov	r2, r3
 80045ea:	f7ff fafd 	bl	8003be8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	08db      	lsrs	r3, r3, #3
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b04      	cmp	r3, #4
 800460e:	d00a      	beq.n	8004626 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	6919      	ldr	r1, [r3, #16]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004620:	f7ff fa4e 	bl	8003ac0 <LL_ADC_SetOffset>
 8004624:	e179      	b.n	800491a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fa6b 	bl	8003b08 <LL_ADC_GetOffsetChannel>
 8004632:	4603      	mov	r3, r0
 8004634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10a      	bne.n	8004652 <HAL_ADC_ConfigChannel+0x14e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2100      	movs	r1, #0
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fa60 	bl	8003b08 <LL_ADC_GetOffsetChannel>
 8004648:	4603      	mov	r3, r0
 800464a:	0e9b      	lsrs	r3, r3, #26
 800464c:	f003 021f 	and.w	r2, r3, #31
 8004650:	e01e      	b.n	8004690 <HAL_ADC_ConfigChannel+0x18c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2100      	movs	r1, #0
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fa55 	bl	8003b08 <LL_ADC_GetOffsetChannel>
 800465e:	4603      	mov	r3, r0
 8004660:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004664:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004674:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004678:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004680:	2320      	movs	r3, #32
 8004682:	e004      	b.n	800468e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004684:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004688:	fab3 f383 	clz	r3, r3
 800468c:	b2db      	uxtb	r3, r3
 800468e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x1a4>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	0e9b      	lsrs	r3, r3, #26
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	e018      	b.n	80046da <HAL_ADC_ConfigChannel+0x1d6>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046b4:	fa93 f3a3 	rbit	r3, r3
 80046b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80046bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80046c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80046cc:	2320      	movs	r3, #32
 80046ce:	e004      	b.n	80046da <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80046d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046d4:	fab3 f383 	clz	r3, r3
 80046d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80046da:	429a      	cmp	r2, r3
 80046dc:	d106      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2200      	movs	r2, #0
 80046e4:	2100      	movs	r1, #0
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fa24 	bl	8003b34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2101      	movs	r1, #1
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff fa08 	bl	8003b08 <LL_ADC_GetOffsetChannel>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x214>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2101      	movs	r1, #1
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff f9fd 	bl	8003b08 <LL_ADC_GetOffsetChannel>
 800470e:	4603      	mov	r3, r0
 8004710:	0e9b      	lsrs	r3, r3, #26
 8004712:	f003 021f 	and.w	r2, r3, #31
 8004716:	e01e      	b.n	8004756 <HAL_ADC_ConfigChannel+0x252>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2101      	movs	r1, #1
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff f9f2 	bl	8003b08 <LL_ADC_GetOffsetChannel>
 8004724:	4603      	mov	r3, r0
 8004726:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004736:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800473a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800473e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004746:	2320      	movs	r3, #32
 8004748:	e004      	b.n	8004754 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800474a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
 8004754:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475e:	2b00      	cmp	r3, #0
 8004760:	d105      	bne.n	800476e <HAL_ADC_ConfigChannel+0x26a>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	0e9b      	lsrs	r3, r3, #26
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	e018      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x29c>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004776:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004786:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800478a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004792:	2320      	movs	r3, #32
 8004794:	e004      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004796:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d106      	bne.n	80047b2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2200      	movs	r2, #0
 80047aa:	2101      	movs	r1, #1
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff f9c1 	bl	8003b34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2102      	movs	r1, #2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff f9a5 	bl	8003b08 <LL_ADC_GetOffsetChannel>
 80047be:	4603      	mov	r3, r0
 80047c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <HAL_ADC_ConfigChannel+0x2da>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2102      	movs	r1, #2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff f99a 	bl	8003b08 <LL_ADC_GetOffsetChannel>
 80047d4:	4603      	mov	r3, r0
 80047d6:	0e9b      	lsrs	r3, r3, #26
 80047d8:	f003 021f 	and.w	r2, r3, #31
 80047dc:	e01e      	b.n	800481c <HAL_ADC_ConfigChannel+0x318>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2102      	movs	r1, #2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff f98f 	bl	8003b08 <LL_ADC_GetOffsetChannel>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047f4:	fa93 f3a3 	rbit	r3, r3
 80047f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80047fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004800:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800480c:	2320      	movs	r3, #32
 800480e:	e004      	b.n	800481a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004810:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004814:	fab3 f383 	clz	r3, r3
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004824:	2b00      	cmp	r3, #0
 8004826:	d105      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x330>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	0e9b      	lsrs	r3, r3, #26
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	e014      	b.n	800485e <HAL_ADC_ConfigChannel+0x35a>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004842:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004844:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004848:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004850:	2320      	movs	r3, #32
 8004852:	e004      	b.n	800485e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004854:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004858:	fab3 f383 	clz	r3, r3
 800485c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800485e:	429a      	cmp	r2, r3
 8004860:	d106      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2200      	movs	r2, #0
 8004868:	2102      	movs	r1, #2
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff f962 	bl	8003b34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2103      	movs	r1, #3
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff f946 	bl	8003b08 <LL_ADC_GetOffsetChannel>
 800487c:	4603      	mov	r3, r0
 800487e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10a      	bne.n	800489c <HAL_ADC_ConfigChannel+0x398>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2103      	movs	r1, #3
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff f93b 	bl	8003b08 <LL_ADC_GetOffsetChannel>
 8004892:	4603      	mov	r3, r0
 8004894:	0e9b      	lsrs	r3, r3, #26
 8004896:	f003 021f 	and.w	r2, r3, #31
 800489a:	e017      	b.n	80048cc <HAL_ADC_ConfigChannel+0x3c8>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2103      	movs	r1, #3
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff f930 	bl	8003b08 <LL_ADC_GetOffsetChannel>
 80048a8:	4603      	mov	r3, r0
 80048aa:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048ae:	fa93 f3a3 	rbit	r3, r3
 80048b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80048b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80048b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80048be:	2320      	movs	r3, #32
 80048c0:	e003      	b.n	80048ca <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80048c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048c4:	fab3 f383 	clz	r3, r3
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x3e0>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	0e9b      	lsrs	r3, r3, #26
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	e011      	b.n	8004908 <HAL_ADC_ConfigChannel+0x404>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ec:	fa93 f3a3 	rbit	r3, r3
 80048f0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80048f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048f4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80048f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80048fc:	2320      	movs	r3, #32
 80048fe:	e003      	b.n	8004908 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004902:	fab3 f383 	clz	r3, r3
 8004906:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004908:	429a      	cmp	r2, r3
 800490a:	d106      	bne.n	800491a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2200      	movs	r2, #0
 8004912:	2103      	movs	r1, #3
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff f90d 	bl	8003b34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff fa44 	bl	8003dac <LL_ADC_IsEnabled>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	f040 8140 	bne.w	8004bac <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	461a      	mov	r2, r3
 800493a:	f7ff f981 	bl	8003c40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	4a8f      	ldr	r2, [pc, #572]	; (8004b80 <HAL_ADC_ConfigChannel+0x67c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	f040 8131 	bne.w	8004bac <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10b      	bne.n	8004972 <HAL_ADC_ConfigChannel+0x46e>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	0e9b      	lsrs	r3, r3, #26
 8004960:	3301      	adds	r3, #1
 8004962:	f003 031f 	and.w	r3, r3, #31
 8004966:	2b09      	cmp	r3, #9
 8004968:	bf94      	ite	ls
 800496a:	2301      	movls	r3, #1
 800496c:	2300      	movhi	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	e019      	b.n	80049a6 <HAL_ADC_ConfigChannel+0x4a2>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800497a:	fa93 f3a3 	rbit	r3, r3
 800497e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004982:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800498a:	2320      	movs	r3, #32
 800498c:	e003      	b.n	8004996 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800498e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004990:	fab3 f383 	clz	r3, r3
 8004994:	b2db      	uxtb	r3, r3
 8004996:	3301      	adds	r3, #1
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2b09      	cmp	r3, #9
 800499e:	bf94      	ite	ls
 80049a0:	2301      	movls	r3, #1
 80049a2:	2300      	movhi	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d079      	beq.n	8004a9e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d107      	bne.n	80049c6 <HAL_ADC_ConfigChannel+0x4c2>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	0e9b      	lsrs	r3, r3, #26
 80049bc:	3301      	adds	r3, #1
 80049be:	069b      	lsls	r3, r3, #26
 80049c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049c4:	e015      	b.n	80049f2 <HAL_ADC_ConfigChannel+0x4ee>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ce:	fa93 f3a3 	rbit	r3, r3
 80049d2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80049d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80049d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80049de:	2320      	movs	r3, #32
 80049e0:	e003      	b.n	80049ea <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80049e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e4:	fab3 f383 	clz	r3, r3
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	3301      	adds	r3, #1
 80049ec:	069b      	lsls	r3, r3, #26
 80049ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d109      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x50e>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	0e9b      	lsrs	r3, r3, #26
 8004a04:	3301      	adds	r3, #1
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a10:	e017      	b.n	8004a42 <HAL_ADC_ConfigChannel+0x53e>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1a:	fa93 f3a3 	rbit	r3, r3
 8004a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a22:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004a2a:	2320      	movs	r3, #32
 8004a2c:	e003      	b.n	8004a36 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a30:	fab3 f383 	clz	r3, r3
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	3301      	adds	r3, #1
 8004a38:	f003 031f 	and.w	r3, r3, #31
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a42:	ea42 0103 	orr.w	r1, r2, r3
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10a      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x564>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	0e9b      	lsrs	r3, r3, #26
 8004a58:	3301      	adds	r3, #1
 8004a5a:	f003 021f 	and.w	r2, r3, #31
 8004a5e:	4613      	mov	r3, r2
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	4413      	add	r3, r2
 8004a64:	051b      	lsls	r3, r3, #20
 8004a66:	e018      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x596>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a70:	fa93 f3a3 	rbit	r3, r3
 8004a74:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004a80:	2320      	movs	r3, #32
 8004a82:	e003      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a86:	fab3 f383 	clz	r3, r3
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	f003 021f 	and.w	r2, r3, #31
 8004a92:	4613      	mov	r3, r2
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	4413      	add	r3, r2
 8004a98:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a9a:	430b      	orrs	r3, r1
 8004a9c:	e081      	b.n	8004ba2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d107      	bne.n	8004aba <HAL_ADC_ConfigChannel+0x5b6>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	0e9b      	lsrs	r3, r3, #26
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	069b      	lsls	r3, r3, #26
 8004ab4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ab8:	e015      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x5e2>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	fa93 f3a3 	rbit	r3, r3
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004ad2:	2320      	movs	r3, #32
 8004ad4:	e003      	b.n	8004ade <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	fab3 f383 	clz	r3, r3
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	3301      	adds	r3, #1
 8004ae0:	069b      	lsls	r3, r3, #26
 8004ae2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <HAL_ADC_ConfigChannel+0x602>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	0e9b      	lsrs	r3, r3, #26
 8004af8:	3301      	adds	r3, #1
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2101      	movs	r1, #1
 8004b00:	fa01 f303 	lsl.w	r3, r1, r3
 8004b04:	e017      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x632>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	fa93 f3a3 	rbit	r3, r3
 8004b12:	61bb      	str	r3, [r7, #24]
  return result;
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004b1e:	2320      	movs	r3, #32
 8004b20:	e003      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	fab3 f383 	clz	r3, r3
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	2101      	movs	r1, #1
 8004b32:	fa01 f303 	lsl.w	r3, r1, r3
 8004b36:	ea42 0103 	orr.w	r1, r2, r3
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10d      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x65e>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	0e9b      	lsrs	r3, r3, #26
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	f003 021f 	and.w	r2, r3, #31
 8004b52:	4613      	mov	r3, r2
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	4413      	add	r3, r2
 8004b58:	3b1e      	subs	r3, #30
 8004b5a:	051b      	lsls	r3, r3, #20
 8004b5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b60:	e01e      	b.n	8004ba0 <HAL_ADC_ConfigChannel+0x69c>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	fa93 f3a3 	rbit	r3, r3
 8004b6e:	60fb      	str	r3, [r7, #12]
  return result;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d104      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004b7a:	2320      	movs	r3, #32
 8004b7c:	e006      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x688>
 8004b7e:	bf00      	nop
 8004b80:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	fab3 f383 	clz	r3, r3
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	f003 021f 	and.w	r2, r3, #31
 8004b92:	4613      	mov	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	4413      	add	r3, r2
 8004b98:	3b1e      	subs	r3, #30
 8004b9a:	051b      	lsls	r3, r3, #20
 8004b9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ba0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	f7ff f81e 	bl	8003be8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	4b44      	ldr	r3, [pc, #272]	; (8004cc4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d07a      	beq.n	8004cae <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bb8:	4843      	ldr	r0, [pc, #268]	; (8004cc8 <HAL_ADC_ConfigChannel+0x7c4>)
 8004bba:	f7fe ff73 	bl	8003aa4 <LL_ADC_GetCommonPathInternalCh>
 8004bbe:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a41      	ldr	r2, [pc, #260]	; (8004ccc <HAL_ADC_ConfigChannel+0x7c8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d12c      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d126      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a3c      	ldr	r2, [pc, #240]	; (8004cd0 <HAL_ADC_ConfigChannel+0x7cc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_ADC_ConfigChannel+0x6e8>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a3b      	ldr	r2, [pc, #236]	; (8004cd4 <HAL_ADC_ConfigChannel+0x7d0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d15d      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4834      	ldr	r0, [pc, #208]	; (8004cc8 <HAL_ADC_ConfigChannel+0x7c4>)
 8004bf8:	f7fe ff41 	bl	8003a7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bfc:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <HAL_ADC_ConfigChannel+0x7d4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	099b      	lsrs	r3, r3, #6
 8004c02:	4a36      	ldr	r2, [pc, #216]	; (8004cdc <HAL_ADC_ConfigChannel+0x7d8>)
 8004c04:	fba2 2303 	umull	r2, r3, r2, r3
 8004c08:	099b      	lsrs	r3, r3, #6
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004c16:	e002      	b.n	8004c1e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f9      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c24:	e040      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a2d      	ldr	r2, [pc, #180]	; (8004ce0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d118      	bne.n	8004c62 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d112      	bne.n	8004c62 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a23      	ldr	r2, [pc, #140]	; (8004cd0 <HAL_ADC_ConfigChannel+0x7cc>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d004      	beq.n	8004c50 <HAL_ADC_ConfigChannel+0x74c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a22      	ldr	r2, [pc, #136]	; (8004cd4 <HAL_ADC_ConfigChannel+0x7d0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d12d      	bne.n	8004cac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c58:	4619      	mov	r1, r3
 8004c5a:	481b      	ldr	r0, [pc, #108]	; (8004cc8 <HAL_ADC_ConfigChannel+0x7c4>)
 8004c5c:	f7fe ff0f 	bl	8003a7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c60:	e024      	b.n	8004cac <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1f      	ldr	r2, [pc, #124]	; (8004ce4 <HAL_ADC_ConfigChannel+0x7e0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d120      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d11a      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a14      	ldr	r2, [pc, #80]	; (8004cd0 <HAL_ADC_ConfigChannel+0x7cc>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d115      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	480e      	ldr	r0, [pc, #56]	; (8004cc8 <HAL_ADC_ConfigChannel+0x7c4>)
 8004c8e:	f7fe fef6 	bl	8003a7e <LL_ADC_SetCommonPathInternalCh>
 8004c92:	e00c      	b.n	8004cae <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c98:	f043 0220 	orr.w	r2, r3, #32
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004ca6:	e002      	b.n	8004cae <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ca8:	bf00      	nop
 8004caa:	e000      	b.n	8004cae <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004cb6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	37d8      	adds	r7, #216	; 0xd8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	80080000 	.word	0x80080000
 8004cc8:	50040300 	.word	0x50040300
 8004ccc:	c7520000 	.word	0xc7520000
 8004cd0:	50040000 	.word	0x50040000
 8004cd4:	50040200 	.word	0x50040200
 8004cd8:	200000c8 	.word	0x200000c8
 8004cdc:	053e2d63 	.word	0x053e2d63
 8004ce0:	cb840000 	.word	0xcb840000
 8004ce4:	80000001 	.word	0x80000001

08004ce8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff f8a2 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 8004d04:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff f8c3 	bl	8003e96 <LL_ADC_INJ_IsConversionOngoing>
 8004d10:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d103      	bne.n	8004d20 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 8098 	beq.w	8004e50 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d02a      	beq.n	8004d84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	7e5b      	ldrb	r3, [r3, #25]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d126      	bne.n	8004d84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	7e1b      	ldrb	r3, [r3, #24]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d122      	bne.n	8004d84 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004d42:	e014      	b.n	8004d6e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4a45      	ldr	r2, [pc, #276]	; (8004e5c <ADC_ConversionStop+0x174>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d90d      	bls.n	8004d68 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	f043 0210 	orr.w	r2, r3, #16
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5c:	f043 0201 	orr.w	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e074      	b.n	8004e52 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d78:	2b40      	cmp	r3, #64	; 0x40
 8004d7a:	d1e3      	bne.n	8004d44 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2240      	movs	r2, #64	; 0x40
 8004d82:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d014      	beq.n	8004db4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff f85a 	bl	8003e48 <LL_ADC_REG_IsConversionOngoing>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00c      	beq.n	8004db4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff f817 	bl	8003dd2 <LL_ADC_IsDisableOngoing>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d104      	bne.n	8004db4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff f836 	bl	8003e20 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d014      	beq.n	8004de4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff f869 	bl	8003e96 <LL_ADC_INJ_IsConversionOngoing>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00c      	beq.n	8004de4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe ffff 	bl	8003dd2 <LL_ADC_IsDisableOngoing>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff f845 	bl	8003e6e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d005      	beq.n	8004df6 <ADC_ConversionStop+0x10e>
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d105      	bne.n	8004dfc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004df0:	230c      	movs	r3, #12
 8004df2:	617b      	str	r3, [r7, #20]
        break;
 8004df4:	e005      	b.n	8004e02 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004df6:	2308      	movs	r3, #8
 8004df8:	617b      	str	r3, [r7, #20]
        break;
 8004dfa:	e002      	b.n	8004e02 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	617b      	str	r3, [r7, #20]
        break;
 8004e00:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004e02:	f7fe fdf9 	bl	80039f8 <HAL_GetTick>
 8004e06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004e08:	e01b      	b.n	8004e42 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004e0a:	f7fe fdf5 	bl	80039f8 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b05      	cmp	r3, #5
 8004e16:	d914      	bls.n	8004e42 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00d      	beq.n	8004e42 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2a:	f043 0210 	orr.w	r2, r3, #16
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e36:	f043 0201 	orr.w	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e007      	b.n	8004e52 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1dc      	bne.n	8004e0a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	a33fffff 	.word	0xa33fffff

08004e60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fe ff9b 	bl	8003dac <LL_ADC_IsEnabled>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d169      	bne.n	8004f50 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	4b36      	ldr	r3, [pc, #216]	; (8004f5c <ADC_Enable+0xfc>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00d      	beq.n	8004ea6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8e:	f043 0210 	orr.w	r2, r3, #16
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9a:	f043 0201 	orr.w	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e055      	b.n	8004f52 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fe ff56 	bl	8003d5c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004eb0:	482b      	ldr	r0, [pc, #172]	; (8004f60 <ADC_Enable+0x100>)
 8004eb2:	f7fe fdf7 	bl	8003aa4 <LL_ADC_GetCommonPathInternalCh>
 8004eb6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d013      	beq.n	8004ee8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ec0:	4b28      	ldr	r3, [pc, #160]	; (8004f64 <ADC_Enable+0x104>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	099b      	lsrs	r3, r3, #6
 8004ec6:	4a28      	ldr	r2, [pc, #160]	; (8004f68 <ADC_Enable+0x108>)
 8004ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ecc:	099b      	lsrs	r3, r3, #6
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004eda:	e002      	b.n	8004ee2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f9      	bne.n	8004edc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ee8:	f7fe fd86 	bl	80039f8 <HAL_GetTick>
 8004eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004eee:	e028      	b.n	8004f42 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fe ff59 	bl	8003dac <LL_ADC_IsEnabled>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d104      	bne.n	8004f0a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe ff29 	bl	8003d5c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f0a:	f7fe fd75 	bl	80039f8 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d914      	bls.n	8004f42 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d00d      	beq.n	8004f42 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2a:	f043 0210 	orr.w	r2, r3, #16
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f36:	f043 0201 	orr.w	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e007      	b.n	8004f52 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d1cf      	bne.n	8004ef0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	8000003f 	.word	0x8000003f
 8004f60:	50040300 	.word	0x50040300
 8004f64:	200000c8 	.word	0x200000c8
 8004f68:	053e2d63 	.word	0x053e2d63

08004f6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fe ff2a 	bl	8003dd2 <LL_ADC_IsDisableOngoing>
 8004f7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fe ff11 	bl	8003dac <LL_ADC_IsEnabled>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d047      	beq.n	8005020 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d144      	bne.n	8005020 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 030d 	and.w	r3, r3, #13
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d10c      	bne.n	8004fbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fe feeb 	bl	8003d84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004fb6:	f7fe fd1f 	bl	80039f8 <HAL_GetTick>
 8004fba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fbc:	e029      	b.n	8005012 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	f043 0210 	orr.w	r2, r3, #16
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fce:	f043 0201 	orr.w	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e023      	b.n	8005022 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004fda:	f7fe fd0d 	bl	80039f8 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d914      	bls.n	8005012 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00d      	beq.n	8005012 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffa:	f043 0210 	orr.w	r2, r3, #16
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005006:	f043 0201 	orr.w	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e007      	b.n	8005022 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1dc      	bne.n	8004fda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <LL_ADC_IsEnabled>:
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <LL_ADC_IsEnabled+0x18>
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <LL_ADC_IsEnabled+0x1a>
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <LL_ADC_REG_IsConversionOngoing>:
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b04      	cmp	r3, #4
 8005062:	d101      	bne.n	8005068 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005078:	b590      	push	{r4, r7, lr}
 800507a:	b09f      	sub	sp, #124	; 0x7c
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005092:	2302      	movs	r3, #2
 8005094:	e093      	b.n	80051be <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800509e:	2300      	movs	r3, #0
 80050a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80050a2:	2300      	movs	r3, #0
 80050a4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a47      	ldr	r2, [pc, #284]	; (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d102      	bne.n	80050b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050b0:	4b46      	ldr	r3, [pc, #280]	; (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	e001      	b.n	80050ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10b      	bne.n	80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c4:	f043 0220 	orr.w	r2, r3, #32
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e072      	b.n	80051be <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff ffb8 	bl	8005050 <LL_ADC_REG_IsConversionOngoing>
 80050e0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff ffb2 	bl	8005050 <LL_ADC_REG_IsConversionOngoing>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d154      	bne.n	800519c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80050f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d151      	bne.n	800519c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050f8:	4b35      	ldr	r3, [pc, #212]	; (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80050fa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d02c      	beq.n	800515e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	6859      	ldr	r1, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005116:	035b      	lsls	r3, r3, #13
 8005118:	430b      	orrs	r3, r1
 800511a:	431a      	orrs	r2, r3
 800511c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005120:	4829      	ldr	r0, [pc, #164]	; (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005122:	f7ff ff82 	bl	800502a <LL_ADC_IsEnabled>
 8005126:	4604      	mov	r4, r0
 8005128:	4828      	ldr	r0, [pc, #160]	; (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800512a:	f7ff ff7e 	bl	800502a <LL_ADC_IsEnabled>
 800512e:	4603      	mov	r3, r0
 8005130:	431c      	orrs	r4, r3
 8005132:	4828      	ldr	r0, [pc, #160]	; (80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005134:	f7ff ff79 	bl	800502a <LL_ADC_IsEnabled>
 8005138:	4603      	mov	r3, r0
 800513a:	4323      	orrs	r3, r4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d137      	bne.n	80051b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005148:	f023 030f 	bic.w	r3, r3, #15
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	6811      	ldr	r1, [r2, #0]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	6892      	ldr	r2, [r2, #8]
 8005154:	430a      	orrs	r2, r1
 8005156:	431a      	orrs	r2, r3
 8005158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800515c:	e028      	b.n	80051b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800515e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005168:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800516a:	4817      	ldr	r0, [pc, #92]	; (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800516c:	f7ff ff5d 	bl	800502a <LL_ADC_IsEnabled>
 8005170:	4604      	mov	r4, r0
 8005172:	4816      	ldr	r0, [pc, #88]	; (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005174:	f7ff ff59 	bl	800502a <LL_ADC_IsEnabled>
 8005178:	4603      	mov	r3, r0
 800517a:	431c      	orrs	r4, r3
 800517c:	4815      	ldr	r0, [pc, #84]	; (80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800517e:	f7ff ff54 	bl	800502a <LL_ADC_IsEnabled>
 8005182:	4603      	mov	r3, r0
 8005184:	4323      	orrs	r3, r4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d112      	bne.n	80051b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800518a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005192:	f023 030f 	bic.w	r3, r3, #15
 8005196:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005198:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800519a:	e009      	b.n	80051b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a0:	f043 0220 	orr.w	r2, r3, #32
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80051ae:	e000      	b.n	80051b2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80051ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80051be:	4618      	mov	r0, r3
 80051c0:	377c      	adds	r7, #124	; 0x7c
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd90      	pop	{r4, r7, pc}
 80051c6:	bf00      	nop
 80051c8:	50040000 	.word	0x50040000
 80051cc:	50040100 	.word	0x50040100
 80051d0:	50040300 	.word	0x50040300
 80051d4:	50040200 	.word	0x50040200

080051d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051e8:	4b0c      	ldr	r3, [pc, #48]	; (800521c <__NVIC_SetPriorityGrouping+0x44>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051f4:	4013      	ands	r3, r2
 80051f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800520a:	4a04      	ldr	r2, [pc, #16]	; (800521c <__NVIC_SetPriorityGrouping+0x44>)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	60d3      	str	r3, [r2, #12]
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	e000ed00 	.word	0xe000ed00

08005220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005224:	4b04      	ldr	r3, [pc, #16]	; (8005238 <__NVIC_GetPriorityGrouping+0x18>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	0a1b      	lsrs	r3, r3, #8
 800522a:	f003 0307 	and.w	r3, r3, #7
}
 800522e:	4618      	mov	r0, r3
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	e000ed00 	.word	0xe000ed00

0800523c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	4603      	mov	r3, r0
 8005244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524a:	2b00      	cmp	r3, #0
 800524c:	db0b      	blt.n	8005266 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	f003 021f 	and.w	r2, r3, #31
 8005254:	4907      	ldr	r1, [pc, #28]	; (8005274 <__NVIC_EnableIRQ+0x38>)
 8005256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525a:	095b      	lsrs	r3, r3, #5
 800525c:	2001      	movs	r0, #1
 800525e:	fa00 f202 	lsl.w	r2, r0, r2
 8005262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	e000e100 	.word	0xe000e100

08005278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	4603      	mov	r3, r0
 8005280:	6039      	str	r1, [r7, #0]
 8005282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005288:	2b00      	cmp	r3, #0
 800528a:	db0a      	blt.n	80052a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	b2da      	uxtb	r2, r3
 8005290:	490c      	ldr	r1, [pc, #48]	; (80052c4 <__NVIC_SetPriority+0x4c>)
 8005292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005296:	0112      	lsls	r2, r2, #4
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	440b      	add	r3, r1
 800529c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052a0:	e00a      	b.n	80052b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	4908      	ldr	r1, [pc, #32]	; (80052c8 <__NVIC_SetPriority+0x50>)
 80052a8:	79fb      	ldrb	r3, [r7, #7]
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	3b04      	subs	r3, #4
 80052b0:	0112      	lsls	r2, r2, #4
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	440b      	add	r3, r1
 80052b6:	761a      	strb	r2, [r3, #24]
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	e000e100 	.word	0xe000e100
 80052c8:	e000ed00 	.word	0xe000ed00

080052cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b089      	sub	sp, #36	; 0x24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f1c3 0307 	rsb	r3, r3, #7
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	bf28      	it	cs
 80052ea:	2304      	movcs	r3, #4
 80052ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	3304      	adds	r3, #4
 80052f2:	2b06      	cmp	r3, #6
 80052f4:	d902      	bls.n	80052fc <NVIC_EncodePriority+0x30>
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	3b03      	subs	r3, #3
 80052fa:	e000      	b.n	80052fe <NVIC_EncodePriority+0x32>
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005300:	f04f 32ff 	mov.w	r2, #4294967295
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	43da      	mvns	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	401a      	ands	r2, r3
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005314:	f04f 31ff 	mov.w	r1, #4294967295
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	fa01 f303 	lsl.w	r3, r1, r3
 800531e:	43d9      	mvns	r1, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005324:	4313      	orrs	r3, r2
         );
}
 8005326:	4618      	mov	r0, r3
 8005328:	3724      	adds	r7, #36	; 0x24
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b082      	sub	sp, #8
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff ff4c 	bl	80051d8 <__NVIC_SetPriorityGrouping>
}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800535a:	f7ff ff61 	bl	8005220 <__NVIC_GetPriorityGrouping>
 800535e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	68b9      	ldr	r1, [r7, #8]
 8005364:	6978      	ldr	r0, [r7, #20]
 8005366:	f7ff ffb1 	bl	80052cc <NVIC_EncodePriority>
 800536a:	4602      	mov	r2, r0
 800536c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005370:	4611      	mov	r1, r2
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff ff80 	bl	8005278 <__NVIC_SetPriority>
}
 8005378:	bf00      	nop
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800538a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff ff54 	bl	800523c <__NVIC_EnableIRQ>
}
 8005394:	bf00      	nop
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e098      	b.n	80054e0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	4b4d      	ldr	r3, [pc, #308]	; (80054ec <HAL_DMA_Init+0x150>)
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d80f      	bhi.n	80053da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	4b4b      	ldr	r3, [pc, #300]	; (80054f0 <HAL_DMA_Init+0x154>)
 80053c2:	4413      	add	r3, r2
 80053c4:	4a4b      	ldr	r2, [pc, #300]	; (80054f4 <HAL_DMA_Init+0x158>)
 80053c6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ca:	091b      	lsrs	r3, r3, #4
 80053cc:	009a      	lsls	r2, r3, #2
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a48      	ldr	r2, [pc, #288]	; (80054f8 <HAL_DMA_Init+0x15c>)
 80053d6:	641a      	str	r2, [r3, #64]	; 0x40
 80053d8:	e00e      	b.n	80053f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	4b46      	ldr	r3, [pc, #280]	; (80054fc <HAL_DMA_Init+0x160>)
 80053e2:	4413      	add	r3, r2
 80053e4:	4a43      	ldr	r2, [pc, #268]	; (80054f4 <HAL_DMA_Init+0x158>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	091b      	lsrs	r3, r3, #4
 80053ec:	009a      	lsls	r2, r3, #2
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a42      	ldr	r2, [pc, #264]	; (8005500 <HAL_DMA_Init+0x164>)
 80053f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800541c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005428:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005434:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005452:	d039      	beq.n	80054c8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	4a27      	ldr	r2, [pc, #156]	; (80054f8 <HAL_DMA_Init+0x15c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d11a      	bne.n	8005494 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800545e:	4b29      	ldr	r3, [pc, #164]	; (8005504 <HAL_DMA_Init+0x168>)
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	f003 031c 	and.w	r3, r3, #28
 800546a:	210f      	movs	r1, #15
 800546c:	fa01 f303 	lsl.w	r3, r1, r3
 8005470:	43db      	mvns	r3, r3
 8005472:	4924      	ldr	r1, [pc, #144]	; (8005504 <HAL_DMA_Init+0x168>)
 8005474:	4013      	ands	r3, r2
 8005476:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005478:	4b22      	ldr	r3, [pc, #136]	; (8005504 <HAL_DMA_Init+0x168>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6859      	ldr	r1, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005484:	f003 031c 	and.w	r3, r3, #28
 8005488:	fa01 f303 	lsl.w	r3, r1, r3
 800548c:	491d      	ldr	r1, [pc, #116]	; (8005504 <HAL_DMA_Init+0x168>)
 800548e:	4313      	orrs	r3, r2
 8005490:	600b      	str	r3, [r1, #0]
 8005492:	e019      	b.n	80054c8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005494:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <HAL_DMA_Init+0x16c>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549c:	f003 031c 	and.w	r3, r3, #28
 80054a0:	210f      	movs	r1, #15
 80054a2:	fa01 f303 	lsl.w	r3, r1, r3
 80054a6:	43db      	mvns	r3, r3
 80054a8:	4917      	ldr	r1, [pc, #92]	; (8005508 <HAL_DMA_Init+0x16c>)
 80054aa:	4013      	ands	r3, r2
 80054ac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80054ae:	4b16      	ldr	r3, [pc, #88]	; (8005508 <HAL_DMA_Init+0x16c>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6859      	ldr	r1, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	f003 031c 	and.w	r3, r3, #28
 80054be:	fa01 f303 	lsl.w	r3, r1, r3
 80054c2:	4911      	ldr	r1, [pc, #68]	; (8005508 <HAL_DMA_Init+0x16c>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	40020407 	.word	0x40020407
 80054f0:	bffdfff8 	.word	0xbffdfff8
 80054f4:	cccccccd 	.word	0xcccccccd
 80054f8:	40020000 	.word	0x40020000
 80054fc:	bffdfbf8 	.word	0xbffdfbf8
 8005500:	40020400 	.word	0x40020400
 8005504:	400200a8 	.word	0x400200a8
 8005508:	400204a8 	.word	0x400204a8

0800550c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_DMA_Start_IT+0x20>
 8005528:	2302      	movs	r3, #2
 800552a:	e04b      	b.n	80055c4 <HAL_DMA_Start_IT+0xb8>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	d13a      	bne.n	80055b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0201 	bic.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f95f 	bl	8005828 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 020e 	orr.w	r2, r2, #14
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	e00f      	b.n	80055a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0204 	bic.w	r2, r2, #4
 8005592:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 020a 	orr.w	r2, r2, #10
 80055a2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	e005      	b.n	80055c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80055be:	2302      	movs	r3, #2
 80055c0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d008      	beq.n	80055f6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2204      	movs	r2, #4
 80055e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e022      	b.n	800563c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 020e 	bic.w	r2, r2, #14
 8005604:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0201 	bic.w	r2, r2, #1
 8005614:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	f003 021c 	and.w	r2, r3, #28
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	2101      	movs	r1, #1
 8005624:	fa01 f202 	lsl.w	r2, r1, r2
 8005628:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800563a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800563c:	4618      	mov	r0, r3
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d005      	beq.n	800566c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2204      	movs	r2, #4
 8005664:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	73fb      	strb	r3, [r7, #15]
 800566a:	e029      	b.n	80056c0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 020e 	bic.w	r2, r2, #14
 800567a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005690:	f003 021c 	and.w	r2, r3, #28
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	2101      	movs	r1, #1
 800569a:	fa01 f202 	lsl.w	r2, r1, r2
 800569e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	4798      	blx	r3
    }
  }
  return status;
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e6:	f003 031c 	and.w	r3, r3, #28
 80056ea:	2204      	movs	r2, #4
 80056ec:	409a      	lsls	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4013      	ands	r3, r2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d026      	beq.n	8005744 <HAL_DMA_IRQHandler+0x7a>
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d021      	beq.n	8005744 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b00      	cmp	r3, #0
 800570c:	d107      	bne.n	800571e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0204 	bic.w	r2, r2, #4
 800571c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	f003 021c 	and.w	r2, r3, #28
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	2104      	movs	r1, #4
 800572c:	fa01 f202 	lsl.w	r2, r1, r2
 8005730:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005736:	2b00      	cmp	r3, #0
 8005738:	d071      	beq.n	800581e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005742:	e06c      	b.n	800581e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005748:	f003 031c 	and.w	r3, r3, #28
 800574c:	2202      	movs	r2, #2
 800574e:	409a      	lsls	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4013      	ands	r3, r2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d02e      	beq.n	80057b6 <HAL_DMA_IRQHandler+0xec>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d029      	beq.n	80057b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10b      	bne.n	8005788 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 020a 	bic.w	r2, r2, #10
 800577e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578c:	f003 021c 	and.w	r2, r3, #28
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005794:	2102      	movs	r1, #2
 8005796:	fa01 f202 	lsl.w	r2, r1, r2
 800579a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d038      	beq.n	800581e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80057b4:	e033      	b.n	800581e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ba:	f003 031c 	and.w	r3, r3, #28
 80057be:	2208      	movs	r2, #8
 80057c0:	409a      	lsls	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4013      	ands	r3, r2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d02a      	beq.n	8005820 <HAL_DMA_IRQHandler+0x156>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d025      	beq.n	8005820 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 020e 	bic.w	r2, r2, #14
 80057e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e8:	f003 021c 	and.w	r2, r3, #28
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	2101      	movs	r1, #1
 80057f2:	fa01 f202 	lsl.w	r2, r1, r2
 80057f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005812:	2b00      	cmp	r3, #0
 8005814:	d004      	beq.n	8005820 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800581e:	bf00      	nop
 8005820:	bf00      	nop
}
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583a:	f003 021c 	and.w	r2, r3, #28
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	2101      	movs	r1, #1
 8005844:	fa01 f202 	lsl.w	r2, r1, r2
 8005848:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b10      	cmp	r3, #16
 8005858:	d108      	bne.n	800586c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800586a:	e007      	b.n	800587c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	60da      	str	r2, [r3, #12]
}
 800587c:	bf00      	nop
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005896:	e17f      	b.n	8005b98 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	2101      	movs	r1, #1
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	fa01 f303 	lsl.w	r3, r1, r3
 80058a4:	4013      	ands	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 8171 	beq.w	8005b92 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d005      	beq.n	80058c8 <HAL_GPIO_Init+0x40>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d130      	bne.n	800592a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	2203      	movs	r2, #3
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	43db      	mvns	r3, r3
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4013      	ands	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68da      	ldr	r2, [r3, #12]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058fe:	2201      	movs	r2, #1
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	43db      	mvns	r3, r3
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4013      	ands	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	091b      	lsrs	r3, r3, #4
 8005914:	f003 0201 	and.w	r2, r3, #1
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	fa02 f303 	lsl.w	r3, r2, r3
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	2b03      	cmp	r3, #3
 8005934:	d118      	bne.n	8005968 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800593c:	2201      	movs	r2, #1
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	43db      	mvns	r3, r3
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4013      	ands	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	08db      	lsrs	r3, r3, #3
 8005952:	f003 0201 	and.w	r2, r3, #1
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	fa02 f303 	lsl.w	r3, r2, r3
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f003 0303 	and.w	r3, r3, #3
 8005970:	2b03      	cmp	r3, #3
 8005972:	d017      	beq.n	80059a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	2203      	movs	r2, #3
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	43db      	mvns	r3, r3
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4013      	ands	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d123      	bne.n	80059f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	08da      	lsrs	r2, r3, #3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3208      	adds	r2, #8
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	220f      	movs	r2, #15
 80059c8:	fa02 f303 	lsl.w	r3, r2, r3
 80059cc:	43db      	mvns	r3, r3
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4013      	ands	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	08da      	lsrs	r2, r3, #3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3208      	adds	r2, #8
 80059f2:	6939      	ldr	r1, [r7, #16]
 80059f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	2203      	movs	r2, #3
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f003 0203 	and.w	r2, r3, #3
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80ac 	beq.w	8005b92 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a3a:	4b5f      	ldr	r3, [pc, #380]	; (8005bb8 <HAL_GPIO_Init+0x330>)
 8005a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a3e:	4a5e      	ldr	r2, [pc, #376]	; (8005bb8 <HAL_GPIO_Init+0x330>)
 8005a40:	f043 0301 	orr.w	r3, r3, #1
 8005a44:	6613      	str	r3, [r2, #96]	; 0x60
 8005a46:	4b5c      	ldr	r3, [pc, #368]	; (8005bb8 <HAL_GPIO_Init+0x330>)
 8005a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	60bb      	str	r3, [r7, #8]
 8005a50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005a52:	4a5a      	ldr	r2, [pc, #360]	; (8005bbc <HAL_GPIO_Init+0x334>)
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	089b      	lsrs	r3, r3, #2
 8005a58:	3302      	adds	r3, #2
 8005a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	220f      	movs	r2, #15
 8005a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4013      	ands	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005a7c:	d025      	beq.n	8005aca <HAL_GPIO_Init+0x242>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a4f      	ldr	r2, [pc, #316]	; (8005bc0 <HAL_GPIO_Init+0x338>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d01f      	beq.n	8005ac6 <HAL_GPIO_Init+0x23e>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a4e      	ldr	r2, [pc, #312]	; (8005bc4 <HAL_GPIO_Init+0x33c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d019      	beq.n	8005ac2 <HAL_GPIO_Init+0x23a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a4d      	ldr	r2, [pc, #308]	; (8005bc8 <HAL_GPIO_Init+0x340>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d013      	beq.n	8005abe <HAL_GPIO_Init+0x236>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a4c      	ldr	r2, [pc, #304]	; (8005bcc <HAL_GPIO_Init+0x344>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00d      	beq.n	8005aba <HAL_GPIO_Init+0x232>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a4b      	ldr	r2, [pc, #300]	; (8005bd0 <HAL_GPIO_Init+0x348>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d007      	beq.n	8005ab6 <HAL_GPIO_Init+0x22e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a4a      	ldr	r2, [pc, #296]	; (8005bd4 <HAL_GPIO_Init+0x34c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d101      	bne.n	8005ab2 <HAL_GPIO_Init+0x22a>
 8005aae:	2306      	movs	r3, #6
 8005ab0:	e00c      	b.n	8005acc <HAL_GPIO_Init+0x244>
 8005ab2:	2307      	movs	r3, #7
 8005ab4:	e00a      	b.n	8005acc <HAL_GPIO_Init+0x244>
 8005ab6:	2305      	movs	r3, #5
 8005ab8:	e008      	b.n	8005acc <HAL_GPIO_Init+0x244>
 8005aba:	2304      	movs	r3, #4
 8005abc:	e006      	b.n	8005acc <HAL_GPIO_Init+0x244>
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e004      	b.n	8005acc <HAL_GPIO_Init+0x244>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e002      	b.n	8005acc <HAL_GPIO_Init+0x244>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e000      	b.n	8005acc <HAL_GPIO_Init+0x244>
 8005aca:	2300      	movs	r3, #0
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	f002 0203 	and.w	r2, r2, #3
 8005ad2:	0092      	lsls	r2, r2, #2
 8005ad4:	4093      	lsls	r3, r2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005adc:	4937      	ldr	r1, [pc, #220]	; (8005bbc <HAL_GPIO_Init+0x334>)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	089b      	lsrs	r3, r3, #2
 8005ae2:	3302      	adds	r3, #2
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005aea:	4b3b      	ldr	r3, [pc, #236]	; (8005bd8 <HAL_GPIO_Init+0x350>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	43db      	mvns	r3, r3
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4013      	ands	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b0e:	4a32      	ldr	r2, [pc, #200]	; (8005bd8 <HAL_GPIO_Init+0x350>)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b14:	4b30      	ldr	r3, [pc, #192]	; (8005bd8 <HAL_GPIO_Init+0x350>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	4013      	ands	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b38:	4a27      	ldr	r2, [pc, #156]	; (8005bd8 <HAL_GPIO_Init+0x350>)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005b3e:	4b26      	ldr	r3, [pc, #152]	; (8005bd8 <HAL_GPIO_Init+0x350>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	43db      	mvns	r3, r3
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b62:	4a1d      	ldr	r2, [pc, #116]	; (8005bd8 <HAL_GPIO_Init+0x350>)
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005b68:	4b1b      	ldr	r3, [pc, #108]	; (8005bd8 <HAL_GPIO_Init+0x350>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	43db      	mvns	r3, r3
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4013      	ands	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005b8c:	4a12      	ldr	r2, [pc, #72]	; (8005bd8 <HAL_GPIO_Init+0x350>)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	3301      	adds	r3, #1
 8005b96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f47f ae78 	bne.w	8005898 <HAL_GPIO_Init+0x10>
  }
}
 8005ba8:	bf00      	nop
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	40010000 	.word	0x40010000
 8005bc0:	48000400 	.word	0x48000400
 8005bc4:	48000800 	.word	0x48000800
 8005bc8:	48000c00 	.word	0x48000c00
 8005bcc:	48001000 	.word	0x48001000
 8005bd0:	48001400 	.word	0x48001400
 8005bd4:	48001800 	.word	0x48001800
 8005bd8:	40010400 	.word	0x40010400

08005bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	807b      	strh	r3, [r7, #2]
 8005be8:	4613      	mov	r3, r2
 8005bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bec:	787b      	ldrb	r3, [r7, #1]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bf2:	887a      	ldrh	r2, [r7, #2]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005bf8:	e002      	b.n	8005c00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005bfa:	887a      	ldrh	r2, [r7, #2]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c16:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c18:	695a      	ldr	r2, [r3, #20]
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d006      	beq.n	8005c30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c22:	4a05      	ldr	r2, [pc, #20]	; (8005c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fc fcb8 	bl	80025a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40010400 	.word	0x40010400

08005c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e08d      	b.n	8005d6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fd fa1a 	bl	800309c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2224      	movs	r2, #36	; 0x24
 8005c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d107      	bne.n	8005cb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689a      	ldr	r2, [r3, #8]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cb2:	609a      	str	r2, [r3, #8]
 8005cb4:	e006      	b.n	8005cc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005cc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d108      	bne.n	8005cde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cda:	605a      	str	r2, [r3, #4]
 8005cdc:	e007      	b.n	8005cee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	69d9      	ldr	r1, [r3, #28]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1a      	ldr	r2, [r3, #32]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
	...

08005d74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	607a      	str	r2, [r7, #4]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	460b      	mov	r3, r1
 8005d82:	817b      	strh	r3, [r7, #10]
 8005d84:	4613      	mov	r3, r2
 8005d86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b20      	cmp	r3, #32
 8005d92:	f040 80fd 	bne.w	8005f90 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_I2C_Master_Transmit+0x30>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e0f6      	b.n	8005f92 <HAL_I2C_Master_Transmit+0x21e>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dac:	f7fd fe24 	bl	80039f8 <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	2319      	movs	r3, #25
 8005db8:	2201      	movs	r2, #1
 8005dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 fce0 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e0e1      	b.n	8005f92 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2221      	movs	r2, #33	; 0x21
 8005dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2210      	movs	r2, #16
 8005dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	893a      	ldrh	r2, [r7, #8]
 8005dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	2bff      	cmp	r3, #255	; 0xff
 8005dfe:	d906      	bls.n	8005e0e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	22ff      	movs	r2, #255	; 0xff
 8005e04:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005e06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	e007      	b.n	8005e1e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005e18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e1c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d024      	beq.n	8005e70 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	781a      	ldrb	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	8979      	ldrh	r1, [r7, #10]
 8005e62:	4b4e      	ldr	r3, [pc, #312]	; (8005f9c <HAL_I2C_Master_Transmit+0x228>)
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 fedb 	bl	8006c24 <I2C_TransferConfig>
 8005e6e:	e066      	b.n	8005f3e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	8979      	ldrh	r1, [r7, #10]
 8005e78:	4b48      	ldr	r3, [pc, #288]	; (8005f9c <HAL_I2C_Master_Transmit+0x228>)
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 fed0 	bl	8006c24 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005e84:	e05b      	b.n	8005f3e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	6a39      	ldr	r1, [r7, #32]
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fcd3 	bl	8006836 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e07b      	b.n	8005f92 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	781a      	ldrb	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d034      	beq.n	8005f3e <HAL_I2C_Master_Transmit+0x1ca>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d130      	bne.n	8005f3e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2180      	movs	r1, #128	; 0x80
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fc4c 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e04d      	b.n	8005f92 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2bff      	cmp	r3, #255	; 0xff
 8005efe:	d90e      	bls.n	8005f1e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	22ff      	movs	r2, #255	; 0xff
 8005f04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	8979      	ldrh	r1, [r7, #10]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 fe84 	bl	8006c24 <I2C_TransferConfig>
 8005f1c:	e00f      	b.n	8005f3e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	8979      	ldrh	r1, [r7, #10]
 8005f30:	2300      	movs	r3, #0
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 fe73 	bl	8006c24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d19e      	bne.n	8005e86 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	6a39      	ldr	r1, [r7, #32]
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fcb9 	bl	80068c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e01a      	b.n	8005f92 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2220      	movs	r2, #32
 8005f62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6859      	ldr	r1, [r3, #4]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <HAL_I2C_Master_Transmit+0x22c>)
 8005f70:	400b      	ands	r3, r1
 8005f72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e000      	b.n	8005f92 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005f90:	2302      	movs	r3, #2
  }
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	80002000 	.word	0x80002000
 8005fa0:	fe00e800 	.word	0xfe00e800

08005fa4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	607a      	str	r2, [r7, #4]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	817b      	strh	r3, [r7, #10]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	f040 80db 	bne.w	800617c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_I2C_Master_Receive+0x30>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e0d4      	b.n	800617e <HAL_I2C_Master_Receive+0x1da>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fdc:	f7fd fd0c 	bl	80039f8 <HAL_GetTick>
 8005fe0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	2319      	movs	r3, #25
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fbc8 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e0bf      	b.n	800617e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2222      	movs	r2, #34	; 0x22
 8006002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2210      	movs	r2, #16
 800600a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	893a      	ldrh	r2, [r7, #8]
 800601e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602a:	b29b      	uxth	r3, r3
 800602c:	2bff      	cmp	r3, #255	; 0xff
 800602e:	d90e      	bls.n	800604e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603a:	b2da      	uxtb	r2, r3
 800603c:	8979      	ldrh	r1, [r7, #10]
 800603e:	4b52      	ldr	r3, [pc, #328]	; (8006188 <HAL_I2C_Master_Receive+0x1e4>)
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 fdec 	bl	8006c24 <I2C_TransferConfig>
 800604c:	e06d      	b.n	800612a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605c:	b2da      	uxtb	r2, r3
 800605e:	8979      	ldrh	r1, [r7, #10]
 8006060:	4b49      	ldr	r3, [pc, #292]	; (8006188 <HAL_I2C_Master_Receive+0x1e4>)
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 fddb 	bl	8006c24 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800606e:	e05c      	b.n	800612a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	6a39      	ldr	r1, [r7, #32]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 fc69 	bl	800694c <I2C_WaitOnRXNEFlagUntilTimeout>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e07c      	b.n	800617e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d034      	beq.n	800612a <HAL_I2C_Master_Receive+0x186>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d130      	bne.n	800612a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	2200      	movs	r2, #0
 80060d0:	2180      	movs	r1, #128	; 0x80
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fb56 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e04d      	b.n	800617e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2bff      	cmp	r3, #255	; 0xff
 80060ea:	d90e      	bls.n	800610a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	22ff      	movs	r2, #255	; 0xff
 80060f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	8979      	ldrh	r1, [r7, #10]
 80060fa:	2300      	movs	r3, #0
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fd8e 	bl	8006c24 <I2C_TransferConfig>
 8006108:	e00f      	b.n	800612a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006118:	b2da      	uxtb	r2, r3
 800611a:	8979      	ldrh	r1, [r7, #10]
 800611c:	2300      	movs	r3, #0
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 fd7d 	bl	8006c24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d19d      	bne.n	8006070 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	6a39      	ldr	r1, [r7, #32]
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 fbc3 	bl	80068c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e01a      	b.n	800617e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2220      	movs	r2, #32
 800614e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6859      	ldr	r1, [r3, #4]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	4b0c      	ldr	r3, [pc, #48]	; (800618c <HAL_I2C_Master_Receive+0x1e8>)
 800615c:	400b      	ands	r3, r1
 800615e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	e000      	b.n	800617e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800617c:	2302      	movs	r3, #2
  }
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	80002400 	.word	0x80002400
 800618c:	fe00e800 	.word	0xfe00e800

08006190 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	4608      	mov	r0, r1
 800619a:	4611      	mov	r1, r2
 800619c:	461a      	mov	r2, r3
 800619e:	4603      	mov	r3, r0
 80061a0:	817b      	strh	r3, [r7, #10]
 80061a2:	460b      	mov	r3, r1
 80061a4:	813b      	strh	r3, [r7, #8]
 80061a6:	4613      	mov	r3, r2
 80061a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	f040 80f9 	bne.w	80063aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <HAL_I2C_Mem_Write+0x34>
 80061be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d105      	bne.n	80061d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0ed      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_I2C_Mem_Write+0x4e>
 80061da:	2302      	movs	r3, #2
 80061dc:	e0e6      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061e6:	f7fd fc07 	bl	80039f8 <HAL_GetTick>
 80061ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	2319      	movs	r3, #25
 80061f2:	2201      	movs	r2, #1
 80061f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fac3 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e0d1      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2221      	movs	r2, #33	; 0x21
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2240      	movs	r2, #64	; 0x40
 8006214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a3a      	ldr	r2, [r7, #32]
 8006222:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006228:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006230:	88f8      	ldrh	r0, [r7, #6]
 8006232:	893a      	ldrh	r2, [r7, #8]
 8006234:	8979      	ldrh	r1, [r7, #10]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	4603      	mov	r3, r0
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 f9d3 	bl	80065ec <I2C_RequestMemoryWrite>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e0a9      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625c:	b29b      	uxth	r3, r3
 800625e:	2bff      	cmp	r3, #255	; 0xff
 8006260:	d90e      	bls.n	8006280 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	22ff      	movs	r2, #255	; 0xff
 8006266:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626c:	b2da      	uxtb	r2, r3
 800626e:	8979      	ldrh	r1, [r7, #10]
 8006270:	2300      	movs	r3, #0
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 fcd3 	bl	8006c24 <I2C_TransferConfig>
 800627e:	e00f      	b.n	80062a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006284:	b29a      	uxth	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628e:	b2da      	uxtb	r2, r3
 8006290:	8979      	ldrh	r1, [r7, #10]
 8006292:	2300      	movs	r3, #0
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fcc2 	bl	8006c24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 fac6 	bl	8006836 <I2C_WaitOnTXISFlagUntilTimeout>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e07b      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	781a      	ldrb	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062dc:	3b01      	subs	r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d034      	beq.n	8006358 <HAL_I2C_Mem_Write+0x1c8>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d130      	bne.n	8006358 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	2200      	movs	r2, #0
 80062fe:	2180      	movs	r1, #128	; 0x80
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fa3f 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e04d      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006314:	b29b      	uxth	r3, r3
 8006316:	2bff      	cmp	r3, #255	; 0xff
 8006318:	d90e      	bls.n	8006338 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	22ff      	movs	r2, #255	; 0xff
 800631e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006324:	b2da      	uxtb	r2, r3
 8006326:	8979      	ldrh	r1, [r7, #10]
 8006328:	2300      	movs	r3, #0
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 fc77 	bl	8006c24 <I2C_TransferConfig>
 8006336:	e00f      	b.n	8006358 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006346:	b2da      	uxtb	r2, r3
 8006348:	8979      	ldrh	r1, [r7, #10]
 800634a:	2300      	movs	r3, #0
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 fc66 	bl	8006c24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635c:	b29b      	uxth	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d19e      	bne.n	80062a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 faac 	bl	80068c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e01a      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2220      	movs	r2, #32
 800637c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6859      	ldr	r1, [r3, #4]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <HAL_I2C_Mem_Write+0x224>)
 800638a:	400b      	ands	r3, r1
 800638c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2220      	movs	r2, #32
 8006392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	e000      	b.n	80063ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80063aa:	2302      	movs	r3, #2
  }
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	fe00e800 	.word	0xfe00e800

080063b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	4608      	mov	r0, r1
 80063c2:	4611      	mov	r1, r2
 80063c4:	461a      	mov	r2, r3
 80063c6:	4603      	mov	r3, r0
 80063c8:	817b      	strh	r3, [r7, #10]
 80063ca:	460b      	mov	r3, r1
 80063cc:	813b      	strh	r3, [r7, #8]
 80063ce:	4613      	mov	r3, r2
 80063d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b20      	cmp	r3, #32
 80063dc:	f040 80fd 	bne.w	80065da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <HAL_I2C_Mem_Read+0x34>
 80063e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d105      	bne.n	80063f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0f1      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_I2C_Mem_Read+0x4e>
 8006402:	2302      	movs	r3, #2
 8006404:	e0ea      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800640e:	f7fd faf3 	bl	80039f8 <HAL_GetTick>
 8006412:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	2319      	movs	r3, #25
 800641a:	2201      	movs	r2, #1
 800641c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 f9af 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e0d5      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2222      	movs	r2, #34	; 0x22
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2240      	movs	r2, #64	; 0x40
 800643c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a3a      	ldr	r2, [r7, #32]
 800644a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006450:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006458:	88f8      	ldrh	r0, [r7, #6]
 800645a:	893a      	ldrh	r2, [r7, #8]
 800645c:	8979      	ldrh	r1, [r7, #10]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	9301      	str	r3, [sp, #4]
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	4603      	mov	r3, r0
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f913 	bl	8006694 <I2C_RequestMemoryRead>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e0ad      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006484:	b29b      	uxth	r3, r3
 8006486:	2bff      	cmp	r3, #255	; 0xff
 8006488:	d90e      	bls.n	80064a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006494:	b2da      	uxtb	r2, r3
 8006496:	8979      	ldrh	r1, [r7, #10]
 8006498:	4b52      	ldr	r3, [pc, #328]	; (80065e4 <HAL_I2C_Mem_Read+0x22c>)
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 fbbf 	bl	8006c24 <I2C_TransferConfig>
 80064a6:	e00f      	b.n	80064c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	8979      	ldrh	r1, [r7, #10]
 80064ba:	4b4a      	ldr	r3, [pc, #296]	; (80065e4 <HAL_I2C_Mem_Read+0x22c>)
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 fbae 	bl	8006c24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	2200      	movs	r2, #0
 80064d0:	2104      	movs	r1, #4
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 f956 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e07c      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d034      	beq.n	8006588 <HAL_I2C_Mem_Read+0x1d0>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d130      	bne.n	8006588 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	2200      	movs	r2, #0
 800652e:	2180      	movs	r1, #128	; 0x80
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f927 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e04d      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006544:	b29b      	uxth	r3, r3
 8006546:	2bff      	cmp	r3, #255	; 0xff
 8006548:	d90e      	bls.n	8006568 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006554:	b2da      	uxtb	r2, r3
 8006556:	8979      	ldrh	r1, [r7, #10]
 8006558:	2300      	movs	r3, #0
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 fb5f 	bl	8006c24 <I2C_TransferConfig>
 8006566:	e00f      	b.n	8006588 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656c:	b29a      	uxth	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006576:	b2da      	uxtb	r2, r3
 8006578:	8979      	ldrh	r1, [r7, #10]
 800657a:	2300      	movs	r3, #0
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 fb4e 	bl	8006c24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d19a      	bne.n	80064c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 f994 	bl	80068c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e01a      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2220      	movs	r2, #32
 80065ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6859      	ldr	r1, [r3, #4]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	4b0b      	ldr	r3, [pc, #44]	; (80065e8 <HAL_I2C_Mem_Read+0x230>)
 80065ba:	400b      	ands	r3, r1
 80065bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e000      	b.n	80065dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80065da:	2302      	movs	r3, #2
  }
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	80002400 	.word	0x80002400
 80065e8:	fe00e800 	.word	0xfe00e800

080065ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	461a      	mov	r2, r3
 80065fa:	4603      	mov	r3, r0
 80065fc:	817b      	strh	r3, [r7, #10]
 80065fe:	460b      	mov	r3, r1
 8006600:	813b      	strh	r3, [r7, #8]
 8006602:	4613      	mov	r3, r2
 8006604:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	b2da      	uxtb	r2, r3
 800660a:	8979      	ldrh	r1, [r7, #10]
 800660c:	4b20      	ldr	r3, [pc, #128]	; (8006690 <I2C_RequestMemoryWrite+0xa4>)
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fb05 	bl	8006c24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	69b9      	ldr	r1, [r7, #24]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 f909 	bl	8006836 <I2C_WaitOnTXISFlagUntilTimeout>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e02c      	b.n	8006688 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d105      	bne.n	8006640 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006634:	893b      	ldrh	r3, [r7, #8]
 8006636:	b2da      	uxtb	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	629a      	str	r2, [r3, #40]	; 0x28
 800663e:	e015      	b.n	800666c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006640:	893b      	ldrh	r3, [r7, #8]
 8006642:	0a1b      	lsrs	r3, r3, #8
 8006644:	b29b      	uxth	r3, r3
 8006646:	b2da      	uxtb	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	69b9      	ldr	r1, [r7, #24]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f8ef 	bl	8006836 <I2C_WaitOnTXISFlagUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e012      	b.n	8006688 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006662:	893b      	ldrh	r3, [r7, #8]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2200      	movs	r2, #0
 8006674:	2180      	movs	r1, #128	; 0x80
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f884 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e000      	b.n	8006688 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	80002000 	.word	0x80002000

08006694 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	4608      	mov	r0, r1
 800669e:	4611      	mov	r1, r2
 80066a0:	461a      	mov	r2, r3
 80066a2:	4603      	mov	r3, r0
 80066a4:	817b      	strh	r3, [r7, #10]
 80066a6:	460b      	mov	r3, r1
 80066a8:	813b      	strh	r3, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80066ae:	88fb      	ldrh	r3, [r7, #6]
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	8979      	ldrh	r1, [r7, #10]
 80066b4:	4b20      	ldr	r3, [pc, #128]	; (8006738 <I2C_RequestMemoryRead+0xa4>)
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	2300      	movs	r3, #0
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 fab2 	bl	8006c24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	69b9      	ldr	r1, [r7, #24]
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 f8b6 	bl	8006836 <I2C_WaitOnTXISFlagUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e02c      	b.n	800672e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066d4:	88fb      	ldrh	r3, [r7, #6]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d105      	bne.n	80066e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066da:	893b      	ldrh	r3, [r7, #8]
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	629a      	str	r2, [r3, #40]	; 0x28
 80066e4:	e015      	b.n	8006712 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066e6:	893b      	ldrh	r3, [r7, #8]
 80066e8:	0a1b      	lsrs	r3, r3, #8
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066f4:	69fa      	ldr	r2, [r7, #28]
 80066f6:	69b9      	ldr	r1, [r7, #24]
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 f89c 	bl	8006836 <I2C_WaitOnTXISFlagUntilTimeout>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e012      	b.n	800672e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006708:	893b      	ldrh	r3, [r7, #8]
 800670a:	b2da      	uxtb	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	2200      	movs	r2, #0
 800671a:	2140      	movs	r1, #64	; 0x40
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 f831 	bl	8006784 <I2C_WaitOnFlagUntilTimeout>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	80002000 	.word	0x80002000

0800673c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b02      	cmp	r3, #2
 8006750:	d103      	bne.n	800675a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2200      	movs	r2, #0
 8006758:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b01      	cmp	r3, #1
 8006766:	d007      	beq.n	8006778 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	619a      	str	r2, [r3, #24]
  }
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	4613      	mov	r3, r2
 8006792:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006794:	e03b      	b.n	800680e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 f962 	bl	8006a64 <I2C_IsErrorOccurred>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e041      	b.n	800682e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d02d      	beq.n	800680e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b2:	f7fd f921 	bl	80039f8 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d302      	bcc.n	80067c8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d122      	bne.n	800680e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	4013      	ands	r3, r2
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	bf0c      	ite	eq
 80067d8:	2301      	moveq	r3, #1
 80067da:	2300      	movne	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	461a      	mov	r2, r3
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d113      	bne.n	800680e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ea:	f043 0220 	orr.w	r2, r3, #32
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e00f      	b.n	800682e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	699a      	ldr	r2, [r3, #24]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	4013      	ands	r3, r2
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	429a      	cmp	r2, r3
 800681c:	bf0c      	ite	eq
 800681e:	2301      	moveq	r3, #1
 8006820:	2300      	movne	r3, #0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	79fb      	ldrb	r3, [r7, #7]
 8006828:	429a      	cmp	r2, r3
 800682a:	d0b4      	beq.n	8006796 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006842:	e033      	b.n	80068ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	68b9      	ldr	r1, [r7, #8]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f90b 	bl	8006a64 <I2C_IsErrorOccurred>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e031      	b.n	80068bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685e:	d025      	beq.n	80068ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006860:	f7fd f8ca 	bl	80039f8 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	429a      	cmp	r2, r3
 800686e:	d302      	bcc.n	8006876 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d11a      	bne.n	80068ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b02      	cmp	r3, #2
 8006882:	d013      	beq.n	80068ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006888:	f043 0220 	orr.w	r2, r3, #32
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e007      	b.n	80068bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d1c4      	bne.n	8006844 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068d0:	e02f      	b.n	8006932 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f8c4 	bl	8006a64 <I2C_IsErrorOccurred>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e02d      	b.n	8006942 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e6:	f7fd f887 	bl	80039f8 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d302      	bcc.n	80068fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d11a      	bne.n	8006932 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b20      	cmp	r3, #32
 8006908:	d013      	beq.n	8006932 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690e:	f043 0220 	orr.w	r2, r3, #32
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2220      	movs	r2, #32
 800691a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e007      	b.n	8006942 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b20      	cmp	r3, #32
 800693e:	d1c8      	bne.n	80068d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800695c:	e071      	b.n	8006a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f87e 	bl	8006a64 <I2C_IsErrorOccurred>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b20      	cmp	r3, #32
 800697e:	d13b      	bne.n	80069f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006980:	7dfb      	ldrb	r3, [r7, #23]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d138      	bne.n	80069f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b04      	cmp	r3, #4
 8006992:	d105      	bne.n	80069a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	f003 0310 	and.w	r3, r3, #16
 80069aa:	2b10      	cmp	r3, #16
 80069ac:	d121      	bne.n	80069f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2210      	movs	r2, #16
 80069b4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2204      	movs	r2, #4
 80069ba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2220      	movs	r2, #32
 80069c2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6859      	ldr	r1, [r3, #4]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	4b24      	ldr	r3, [pc, #144]	; (8006a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80069d0:	400b      	ands	r3, r1
 80069d2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	75fb      	strb	r3, [r7, #23]
 80069f0:	e002      	b.n	80069f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80069f8:	f7fc fffe 	bl	80039f8 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d302      	bcc.n	8006a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d119      	bne.n	8006a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d116      	bne.n	8006a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	f003 0304 	and.w	r3, r3, #4
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d00f      	beq.n	8006a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a26:	f043 0220 	orr.w	r2, r3, #32
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d002      	beq.n	8006a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006a50:	7dfb      	ldrb	r3, [r7, #23]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d083      	beq.n	800695e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	fe00e800 	.word	0xfe00e800

08006a64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08a      	sub	sp, #40	; 0x28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d068      	beq.n	8006b62 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2210      	movs	r2, #16
 8006a96:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a98:	e049      	b.n	8006b2e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa0:	d045      	beq.n	8006b2e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006aa2:	f7fc ffa9 	bl	80039f8 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d302      	bcc.n	8006ab8 <I2C_IsErrorOccurred+0x54>
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d13a      	bne.n	8006b2e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ac2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006aca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ada:	d121      	bne.n	8006b20 <I2C_IsErrorOccurred+0xbc>
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ae2:	d01d      	beq.n	8006b20 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006ae4:	7cfb      	ldrb	r3, [r7, #19]
 8006ae6:	2b20      	cmp	r3, #32
 8006ae8:	d01a      	beq.n	8006b20 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006af8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006afa:	f7fc ff7d 	bl	80039f8 <HAL_GetTick>
 8006afe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b00:	e00e      	b.n	8006b20 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b02:	f7fc ff79 	bl	80039f8 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b19      	cmp	r3, #25
 8006b0e:	d907      	bls.n	8006b20 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	f043 0320 	orr.w	r3, r3, #32
 8006b16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006b1e:	e006      	b.n	8006b2e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b20      	cmp	r3, #32
 8006b2c:	d1e9      	bne.n	8006b02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	f003 0320 	and.w	r3, r3, #32
 8006b38:	2b20      	cmp	r3, #32
 8006b3a:	d003      	beq.n	8006b44 <I2C_IsErrorOccurred+0xe0>
 8006b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d0aa      	beq.n	8006a9a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d103      	bne.n	8006b54 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2220      	movs	r2, #32
 8006b52:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	f043 0304 	orr.w	r3, r3, #4
 8006b5a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00b      	beq.n	8006bae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	f043 0308 	orr.w	r3, r3, #8
 8006b9c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ba6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00b      	beq.n	8006bd0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	f043 0302 	orr.w	r3, r3, #2
 8006bbe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01c      	beq.n	8006c12 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7ff fdaf 	bl	800673c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6859      	ldr	r1, [r3, #4]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <I2C_IsErrorOccurred+0x1bc>)
 8006bea:	400b      	ands	r3, r1
 8006bec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3728      	adds	r7, #40	; 0x28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	fe00e800 	.word	0xfe00e800

08006c24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	607b      	str	r3, [r7, #4]
 8006c2e:	460b      	mov	r3, r1
 8006c30:	817b      	strh	r3, [r7, #10]
 8006c32:	4613      	mov	r3, r2
 8006c34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c36:	897b      	ldrh	r3, [r7, #10]
 8006c38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c3c:	7a7b      	ldrb	r3, [r7, #9]
 8006c3e:	041b      	lsls	r3, r3, #16
 8006c40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	0d5b      	lsrs	r3, r3, #21
 8006c5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006c62:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <I2C_TransferConfig+0x60>)
 8006c64:	430b      	orrs	r3, r1
 8006c66:	43db      	mvns	r3, r3
 8006c68:	ea02 0103 	and.w	r1, r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	03ff63ff 	.word	0x03ff63ff

08006c88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b20      	cmp	r3, #32
 8006c9c:	d138      	bne.n	8006d10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d101      	bne.n	8006cac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e032      	b.n	8006d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2224      	movs	r2, #36	; 0x24
 8006cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0201 	bic.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6819      	ldr	r1, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0201 	orr.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	e000      	b.n	8006d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d10:	2302      	movs	r3, #2
  }
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b085      	sub	sp, #20
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	d139      	bne.n	8006da8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d101      	bne.n	8006d42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e033      	b.n	8006daa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2224      	movs	r2, #36	; 0x24
 8006d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0201 	bic.w	r2, r2, #1
 8006d60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0201 	orr.w	r2, r2, #1
 8006d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	e000      	b.n	8006daa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006da8:	2302      	movs	r3, #2
  }
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
	...

08006db8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006dbc:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	40007000 	.word	0x40007000

08006dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de2:	d130      	bne.n	8006e46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006de4:	4b23      	ldr	r3, [pc, #140]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df0:	d038      	beq.n	8006e64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006df2:	4b20      	ldr	r3, [pc, #128]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006dfa:	4a1e      	ldr	r2, [pc, #120]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e02:	4b1d      	ldr	r3, [pc, #116]	; (8006e78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2232      	movs	r2, #50	; 0x32
 8006e08:	fb02 f303 	mul.w	r3, r2, r3
 8006e0c:	4a1b      	ldr	r2, [pc, #108]	; (8006e7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e12:	0c9b      	lsrs	r3, r3, #18
 8006e14:	3301      	adds	r3, #1
 8006e16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e18:	e002      	b.n	8006e20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e20:	4b14      	ldr	r3, [pc, #80]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e2c:	d102      	bne.n	8006e34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1f2      	bne.n	8006e1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e34:	4b0f      	ldr	r3, [pc, #60]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e40:	d110      	bne.n	8006e64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e00f      	b.n	8006e66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e46:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e52:	d007      	beq.n	8006e64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e54:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e5c:	4a05      	ldr	r2, [pc, #20]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40007000 	.word	0x40007000
 8006e78:	200000c8 	.word	0x200000c8
 8006e7c:	431bde83 	.word	0x431bde83

08006e80 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e3ca      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e92:	4b97      	ldr	r3, [pc, #604]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 030c 	and.w	r3, r3, #12
 8006e9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e9c:	4b94      	ldr	r3, [pc, #592]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f003 0303 	and.w	r3, r3, #3
 8006ea4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0310 	and.w	r3, r3, #16
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80e4 	beq.w	800707c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d007      	beq.n	8006eca <HAL_RCC_OscConfig+0x4a>
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	2b0c      	cmp	r3, #12
 8006ebe:	f040 808b 	bne.w	8006fd8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	f040 8087 	bne.w	8006fd8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006eca:	4b89      	ldr	r3, [pc, #548]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d005      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x62>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e3a2      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1a      	ldr	r2, [r3, #32]
 8006ee6:	4b82      	ldr	r3, [pc, #520]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d004      	beq.n	8006efc <HAL_RCC_OscConfig+0x7c>
 8006ef2:	4b7f      	ldr	r3, [pc, #508]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006efa:	e005      	b.n	8006f08 <HAL_RCC_OscConfig+0x88>
 8006efc:	4b7c      	ldr	r3, [pc, #496]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f02:	091b      	lsrs	r3, r3, #4
 8006f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d223      	bcs.n	8006f54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 fd87 	bl	8007a24 <RCC_SetFlashLatencyFromMSIRange>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e383      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f20:	4b73      	ldr	r3, [pc, #460]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a72      	ldr	r2, [pc, #456]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f26:	f043 0308 	orr.w	r3, r3, #8
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	4b70      	ldr	r3, [pc, #448]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	496d      	ldr	r1, [pc, #436]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f3e:	4b6c      	ldr	r3, [pc, #432]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	4968      	ldr	r1, [pc, #416]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	604b      	str	r3, [r1, #4]
 8006f52:	e025      	b.n	8006fa0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f54:	4b66      	ldr	r3, [pc, #408]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a65      	ldr	r2, [pc, #404]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f5a:	f043 0308 	orr.w	r3, r3, #8
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	4b63      	ldr	r3, [pc, #396]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	4960      	ldr	r1, [pc, #384]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f72:	4b5f      	ldr	r3, [pc, #380]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	021b      	lsls	r3, r3, #8
 8006f80:	495b      	ldr	r1, [pc, #364]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d109      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fd47 	bl	8007a24 <RCC_SetFlashLatencyFromMSIRange>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e343      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fa0:	f000 fc4a 	bl	8007838 <HAL_RCC_GetSysClockFreq>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	4b52      	ldr	r3, [pc, #328]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	091b      	lsrs	r3, r3, #4
 8006fac:	f003 030f 	and.w	r3, r3, #15
 8006fb0:	4950      	ldr	r1, [pc, #320]	; (80070f4 <HAL_RCC_OscConfig+0x274>)
 8006fb2:	5ccb      	ldrb	r3, [r1, r3]
 8006fb4:	f003 031f 	and.w	r3, r3, #31
 8006fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbc:	4a4e      	ldr	r2, [pc, #312]	; (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006fbe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006fc0:	4b4e      	ldr	r3, [pc, #312]	; (80070fc <HAL_RCC_OscConfig+0x27c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fc fb23 	bl	8003610 <HAL_InitTick>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d052      	beq.n	800707a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	e327      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d032      	beq.n	8007046 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006fe0:	4b43      	ldr	r3, [pc, #268]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a42      	ldr	r2, [pc, #264]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006fec:	f7fc fd04 	bl	80039f8 <HAL_GetTick>
 8006ff0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ff2:	e008      	b.n	8007006 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ff4:	f7fc fd00 	bl	80039f8 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d901      	bls.n	8007006 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e310      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007006:	4b3a      	ldr	r3, [pc, #232]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0f0      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007012:	4b37      	ldr	r3, [pc, #220]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a36      	ldr	r2, [pc, #216]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8007018:	f043 0308 	orr.w	r3, r3, #8
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	4b34      	ldr	r3, [pc, #208]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	4931      	ldr	r1, [pc, #196]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 800702c:	4313      	orrs	r3, r2
 800702e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007030:	4b2f      	ldr	r3, [pc, #188]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	021b      	lsls	r3, r3, #8
 800703e:	492c      	ldr	r1, [pc, #176]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8007040:	4313      	orrs	r3, r2
 8007042:	604b      	str	r3, [r1, #4]
 8007044:	e01a      	b.n	800707c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007046:	4b2a      	ldr	r3, [pc, #168]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a29      	ldr	r2, [pc, #164]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 800704c:	f023 0301 	bic.w	r3, r3, #1
 8007050:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007052:	f7fc fcd1 	bl	80039f8 <HAL_GetTick>
 8007056:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007058:	e008      	b.n	800706c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800705a:	f7fc fccd 	bl	80039f8 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d901      	bls.n	800706c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e2dd      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800706c:	4b20      	ldr	r3, [pc, #128]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1f0      	bne.n	800705a <HAL_RCC_OscConfig+0x1da>
 8007078:	e000      	b.n	800707c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800707a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d074      	beq.n	8007172 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	2b08      	cmp	r3, #8
 800708c:	d005      	beq.n	800709a <HAL_RCC_OscConfig+0x21a>
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	2b0c      	cmp	r3, #12
 8007092:	d10e      	bne.n	80070b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2b03      	cmp	r3, #3
 8007098:	d10b      	bne.n	80070b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800709a:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d064      	beq.n	8007170 <HAL_RCC_OscConfig+0x2f0>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d160      	bne.n	8007170 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e2ba      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ba:	d106      	bne.n	80070ca <HAL_RCC_OscConfig+0x24a>
 80070bc:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a0b      	ldr	r2, [pc, #44]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 80070c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	e026      	b.n	8007118 <HAL_RCC_OscConfig+0x298>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070d2:	d115      	bne.n	8007100 <HAL_RCC_OscConfig+0x280>
 80070d4:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a05      	ldr	r2, [pc, #20]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 80070da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	4b03      	ldr	r3, [pc, #12]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a02      	ldr	r2, [pc, #8]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 80070e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	e014      	b.n	8007118 <HAL_RCC_OscConfig+0x298>
 80070ee:	bf00      	nop
 80070f0:	40021000 	.word	0x40021000
 80070f4:	08013da8 	.word	0x08013da8
 80070f8:	200000c8 	.word	0x200000c8
 80070fc:	200000cc 	.word	0x200000cc
 8007100:	4ba0      	ldr	r3, [pc, #640]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a9f      	ldr	r2, [pc, #636]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	4b9d      	ldr	r3, [pc, #628]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a9c      	ldr	r2, [pc, #624]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d013      	beq.n	8007148 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007120:	f7fc fc6a 	bl	80039f8 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007128:	f7fc fc66 	bl	80039f8 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b64      	cmp	r3, #100	; 0x64
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e276      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800713a:	4b92      	ldr	r3, [pc, #584]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0f0      	beq.n	8007128 <HAL_RCC_OscConfig+0x2a8>
 8007146:	e014      	b.n	8007172 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007148:	f7fc fc56 	bl	80039f8 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007150:	f7fc fc52 	bl	80039f8 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b64      	cmp	r3, #100	; 0x64
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e262      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007162:	4b88      	ldr	r3, [pc, #544]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <HAL_RCC_OscConfig+0x2d0>
 800716e:	e000      	b.n	8007172 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d060      	beq.n	8007240 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2b04      	cmp	r3, #4
 8007182:	d005      	beq.n	8007190 <HAL_RCC_OscConfig+0x310>
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b0c      	cmp	r3, #12
 8007188:	d119      	bne.n	80071be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b02      	cmp	r3, #2
 800718e:	d116      	bne.n	80071be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007190:	4b7c      	ldr	r3, [pc, #496]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007198:	2b00      	cmp	r3, #0
 800719a:	d005      	beq.n	80071a8 <HAL_RCC_OscConfig+0x328>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e23f      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071a8:	4b76      	ldr	r3, [pc, #472]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	061b      	lsls	r3, r3, #24
 80071b6:	4973      	ldr	r1, [pc, #460]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071bc:	e040      	b.n	8007240 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d023      	beq.n	800720e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071c6:	4b6f      	ldr	r3, [pc, #444]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a6e      	ldr	r2, [pc, #440]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80071cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d2:	f7fc fc11 	bl	80039f8 <HAL_GetTick>
 80071d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071d8:	e008      	b.n	80071ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071da:	f7fc fc0d 	bl	80039f8 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d901      	bls.n	80071ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e21d      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071ec:	4b65      	ldr	r3, [pc, #404]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0f0      	beq.n	80071da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f8:	4b62      	ldr	r3, [pc, #392]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	061b      	lsls	r3, r3, #24
 8007206:	495f      	ldr	r1, [pc, #380]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007208:	4313      	orrs	r3, r2
 800720a:	604b      	str	r3, [r1, #4]
 800720c:	e018      	b.n	8007240 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800720e:	4b5d      	ldr	r3, [pc, #372]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a5c      	ldr	r2, [pc, #368]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721a:	f7fc fbed 	bl	80039f8 <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007220:	e008      	b.n	8007234 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007222:	f7fc fbe9 	bl	80039f8 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e1f9      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007234:	4b53      	ldr	r3, [pc, #332]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1f0      	bne.n	8007222 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0308 	and.w	r3, r3, #8
 8007248:	2b00      	cmp	r3, #0
 800724a:	d03c      	beq.n	80072c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d01c      	beq.n	800728e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007254:	4b4b      	ldr	r3, [pc, #300]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800725a:	4a4a      	ldr	r2, [pc, #296]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 800725c:	f043 0301 	orr.w	r3, r3, #1
 8007260:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007264:	f7fc fbc8 	bl	80039f8 <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800726c:	f7fc fbc4 	bl	80039f8 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e1d4      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800727e:	4b41      	ldr	r3, [pc, #260]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0ef      	beq.n	800726c <HAL_RCC_OscConfig+0x3ec>
 800728c:	e01b      	b.n	80072c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800728e:	4b3d      	ldr	r3, [pc, #244]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007294:	4a3b      	ldr	r2, [pc, #236]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729e:	f7fc fbab 	bl	80039f8 <HAL_GetTick>
 80072a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072a4:	e008      	b.n	80072b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072a6:	f7fc fba7 	bl	80039f8 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e1b7      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072b8:	4b32      	ldr	r3, [pc, #200]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80072ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1ef      	bne.n	80072a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 80a6 	beq.w	8007420 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072d4:	2300      	movs	r3, #0
 80072d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80072d8:	4b2a      	ldr	r3, [pc, #168]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80072da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10d      	bne.n	8007300 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072e4:	4b27      	ldr	r3, [pc, #156]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80072e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e8:	4a26      	ldr	r2, [pc, #152]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80072ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ee:	6593      	str	r3, [r2, #88]	; 0x58
 80072f0:	4b24      	ldr	r3, [pc, #144]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80072f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072f8:	60bb      	str	r3, [r7, #8]
 80072fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072fc:	2301      	movs	r3, #1
 80072fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007300:	4b21      	ldr	r3, [pc, #132]	; (8007388 <HAL_RCC_OscConfig+0x508>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007308:	2b00      	cmp	r3, #0
 800730a:	d118      	bne.n	800733e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800730c:	4b1e      	ldr	r3, [pc, #120]	; (8007388 <HAL_RCC_OscConfig+0x508>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a1d      	ldr	r2, [pc, #116]	; (8007388 <HAL_RCC_OscConfig+0x508>)
 8007312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007316:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007318:	f7fc fb6e 	bl	80039f8 <HAL_GetTick>
 800731c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007320:	f7fc fb6a 	bl	80039f8 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e17a      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007332:	4b15      	ldr	r3, [pc, #84]	; (8007388 <HAL_RCC_OscConfig+0x508>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0f0      	beq.n	8007320 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d108      	bne.n	8007358 <HAL_RCC_OscConfig+0x4d8>
 8007346:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734c:	4a0d      	ldr	r2, [pc, #52]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 800734e:	f043 0301 	orr.w	r3, r3, #1
 8007352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007356:	e029      	b.n	80073ac <HAL_RCC_OscConfig+0x52c>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	2b05      	cmp	r3, #5
 800735e:	d115      	bne.n	800738c <HAL_RCC_OscConfig+0x50c>
 8007360:	4b08      	ldr	r3, [pc, #32]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007366:	4a07      	ldr	r2, [pc, #28]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007368:	f043 0304 	orr.w	r3, r3, #4
 800736c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007370:	4b04      	ldr	r3, [pc, #16]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007376:	4a03      	ldr	r2, [pc, #12]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007378:	f043 0301 	orr.w	r3, r3, #1
 800737c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007380:	e014      	b.n	80073ac <HAL_RCC_OscConfig+0x52c>
 8007382:	bf00      	nop
 8007384:	40021000 	.word	0x40021000
 8007388:	40007000 	.word	0x40007000
 800738c:	4b9c      	ldr	r3, [pc, #624]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 800738e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007392:	4a9b      	ldr	r2, [pc, #620]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 8007394:	f023 0301 	bic.w	r3, r3, #1
 8007398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800739c:	4b98      	ldr	r3, [pc, #608]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 800739e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a2:	4a97      	ldr	r2, [pc, #604]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 80073a4:	f023 0304 	bic.w	r3, r3, #4
 80073a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d016      	beq.n	80073e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b4:	f7fc fb20 	bl	80039f8 <HAL_GetTick>
 80073b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073ba:	e00a      	b.n	80073d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073bc:	f7fc fb1c 	bl	80039f8 <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e12a      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073d2:	4b8b      	ldr	r3, [pc, #556]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 80073d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d0ed      	beq.n	80073bc <HAL_RCC_OscConfig+0x53c>
 80073e0:	e015      	b.n	800740e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e2:	f7fc fb09 	bl	80039f8 <HAL_GetTick>
 80073e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073e8:	e00a      	b.n	8007400 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ea:	f7fc fb05 	bl	80039f8 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d901      	bls.n	8007400 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e113      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007400:	4b7f      	ldr	r3, [pc, #508]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1ed      	bne.n	80073ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800740e:	7ffb      	ldrb	r3, [r7, #31]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d105      	bne.n	8007420 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007414:	4b7a      	ldr	r3, [pc, #488]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 8007416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007418:	4a79      	ldr	r2, [pc, #484]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 800741a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800741e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 80fe 	beq.w	8007626 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742e:	2b02      	cmp	r3, #2
 8007430:	f040 80d0 	bne.w	80075d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007434:	4b72      	ldr	r3, [pc, #456]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f003 0203 	and.w	r2, r3, #3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	429a      	cmp	r2, r3
 8007446:	d130      	bne.n	80074aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007452:	3b01      	subs	r3, #1
 8007454:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007456:	429a      	cmp	r2, r3
 8007458:	d127      	bne.n	80074aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007464:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007466:	429a      	cmp	r2, r3
 8007468:	d11f      	bne.n	80074aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007474:	2a07      	cmp	r2, #7
 8007476:	bf14      	ite	ne
 8007478:	2201      	movne	r2, #1
 800747a:	2200      	moveq	r2, #0
 800747c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800747e:	4293      	cmp	r3, r2
 8007480:	d113      	bne.n	80074aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748c:	085b      	lsrs	r3, r3, #1
 800748e:	3b01      	subs	r3, #1
 8007490:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007492:	429a      	cmp	r2, r3
 8007494:	d109      	bne.n	80074aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a0:	085b      	lsrs	r3, r3, #1
 80074a2:	3b01      	subs	r3, #1
 80074a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d06e      	beq.n	8007588 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	2b0c      	cmp	r3, #12
 80074ae:	d069      	beq.n	8007584 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80074b0:	4b53      	ldr	r3, [pc, #332]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80074bc:	4b50      	ldr	r3, [pc, #320]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e0ad      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80074cc:	4b4c      	ldr	r3, [pc, #304]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a4b      	ldr	r2, [pc, #300]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 80074d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80074d8:	f7fc fa8e 	bl	80039f8 <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074e0:	f7fc fa8a 	bl	80039f8 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e09a      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074f2:	4b43      	ldr	r3, [pc, #268]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1f0      	bne.n	80074e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074fe:	4b40      	ldr	r3, [pc, #256]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	4b40      	ldr	r3, [pc, #256]	; (8007604 <HAL_RCC_OscConfig+0x784>)
 8007504:	4013      	ands	r3, r2
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800750e:	3a01      	subs	r2, #1
 8007510:	0112      	lsls	r2, r2, #4
 8007512:	4311      	orrs	r1, r2
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007518:	0212      	lsls	r2, r2, #8
 800751a:	4311      	orrs	r1, r2
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007520:	0852      	lsrs	r2, r2, #1
 8007522:	3a01      	subs	r2, #1
 8007524:	0552      	lsls	r2, r2, #21
 8007526:	4311      	orrs	r1, r2
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800752c:	0852      	lsrs	r2, r2, #1
 800752e:	3a01      	subs	r2, #1
 8007530:	0652      	lsls	r2, r2, #25
 8007532:	4311      	orrs	r1, r2
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007538:	0912      	lsrs	r2, r2, #4
 800753a:	0452      	lsls	r2, r2, #17
 800753c:	430a      	orrs	r2, r1
 800753e:	4930      	ldr	r1, [pc, #192]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 8007540:	4313      	orrs	r3, r2
 8007542:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007544:	4b2e      	ldr	r3, [pc, #184]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a2d      	ldr	r2, [pc, #180]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 800754a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800754e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007550:	4b2b      	ldr	r3, [pc, #172]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	4a2a      	ldr	r2, [pc, #168]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 8007556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800755a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800755c:	f7fc fa4c 	bl	80039f8 <HAL_GetTick>
 8007560:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007562:	e008      	b.n	8007576 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007564:	f7fc fa48 	bl	80039f8 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e058      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007576:	4b22      	ldr	r3, [pc, #136]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0f0      	beq.n	8007564 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007582:	e050      	b.n	8007626 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e04f      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007588:	4b1d      	ldr	r3, [pc, #116]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d148      	bne.n	8007626 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007594:	4b1a      	ldr	r3, [pc, #104]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a19      	ldr	r2, [pc, #100]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 800759a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800759e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075a0:	4b17      	ldr	r3, [pc, #92]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	4a16      	ldr	r2, [pc, #88]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 80075a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80075ac:	f7fc fa24 	bl	80039f8 <HAL_GetTick>
 80075b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075b2:	e008      	b.n	80075c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075b4:	f7fc fa20 	bl	80039f8 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d901      	bls.n	80075c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e030      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075c6:	4b0e      	ldr	r3, [pc, #56]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d0f0      	beq.n	80075b4 <HAL_RCC_OscConfig+0x734>
 80075d2:	e028      	b.n	8007626 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b0c      	cmp	r3, #12
 80075d8:	d023      	beq.n	8007622 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075da:	4b09      	ldr	r3, [pc, #36]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a08      	ldr	r2, [pc, #32]	; (8007600 <HAL_RCC_OscConfig+0x780>)
 80075e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e6:	f7fc fa07 	bl	80039f8 <HAL_GetTick>
 80075ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075ec:	e00c      	b.n	8007608 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075ee:	f7fc fa03 	bl	80039f8 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d905      	bls.n	8007608 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e013      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
 8007600:	40021000 	.word	0x40021000
 8007604:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007608:	4b09      	ldr	r3, [pc, #36]	; (8007630 <HAL_RCC_OscConfig+0x7b0>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1ec      	bne.n	80075ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007614:	4b06      	ldr	r3, [pc, #24]	; (8007630 <HAL_RCC_OscConfig+0x7b0>)
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	4905      	ldr	r1, [pc, #20]	; (8007630 <HAL_RCC_OscConfig+0x7b0>)
 800761a:	4b06      	ldr	r3, [pc, #24]	; (8007634 <HAL_RCC_OscConfig+0x7b4>)
 800761c:	4013      	ands	r3, r2
 800761e:	60cb      	str	r3, [r1, #12]
 8007620:	e001      	b.n	8007626 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e000      	b.n	8007628 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3720      	adds	r7, #32
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	40021000 	.word	0x40021000
 8007634:	feeefffc 	.word	0xfeeefffc

08007638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e0e7      	b.n	800781c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800764c:	4b75      	ldr	r3, [pc, #468]	; (8007824 <HAL_RCC_ClockConfig+0x1ec>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0307 	and.w	r3, r3, #7
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d910      	bls.n	800767c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800765a:	4b72      	ldr	r3, [pc, #456]	; (8007824 <HAL_RCC_ClockConfig+0x1ec>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f023 0207 	bic.w	r2, r3, #7
 8007662:	4970      	ldr	r1, [pc, #448]	; (8007824 <HAL_RCC_ClockConfig+0x1ec>)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	4313      	orrs	r3, r2
 8007668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800766a:	4b6e      	ldr	r3, [pc, #440]	; (8007824 <HAL_RCC_ClockConfig+0x1ec>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0307 	and.w	r3, r3, #7
 8007672:	683a      	ldr	r2, [r7, #0]
 8007674:	429a      	cmp	r2, r3
 8007676:	d001      	beq.n	800767c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e0cf      	b.n	800781c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d010      	beq.n	80076aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	4b66      	ldr	r3, [pc, #408]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007694:	429a      	cmp	r2, r3
 8007696:	d908      	bls.n	80076aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007698:	4b63      	ldr	r3, [pc, #396]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	4960      	ldr	r1, [pc, #384]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d04c      	beq.n	8007750 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d107      	bne.n	80076ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076be:	4b5a      	ldr	r3, [pc, #360]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d121      	bne.n	800770e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e0a6      	b.n	800781c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d107      	bne.n	80076e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076d6:	4b54      	ldr	r3, [pc, #336]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d115      	bne.n	800770e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e09a      	b.n	800781c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d107      	bne.n	80076fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80076ee:	4b4e      	ldr	r3, [pc, #312]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d109      	bne.n	800770e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e08e      	b.n	800781c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076fe:	4b4a      	ldr	r3, [pc, #296]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e086      	b.n	800781c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800770e:	4b46      	ldr	r3, [pc, #280]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f023 0203 	bic.w	r2, r3, #3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	4943      	ldr	r1, [pc, #268]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 800771c:	4313      	orrs	r3, r2
 800771e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007720:	f7fc f96a 	bl	80039f8 <HAL_GetTick>
 8007724:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007726:	e00a      	b.n	800773e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007728:	f7fc f966 	bl	80039f8 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	f241 3288 	movw	r2, #5000	; 0x1388
 8007736:	4293      	cmp	r3, r2
 8007738:	d901      	bls.n	800773e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e06e      	b.n	800781c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800773e:	4b3a      	ldr	r3, [pc, #232]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f003 020c 	and.w	r2, r3, #12
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	429a      	cmp	r2, r3
 800774e:	d1eb      	bne.n	8007728 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0302 	and.w	r3, r3, #2
 8007758:	2b00      	cmp	r3, #0
 800775a:	d010      	beq.n	800777e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	4b31      	ldr	r3, [pc, #196]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007768:	429a      	cmp	r2, r3
 800776a:	d208      	bcs.n	800777e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800776c:	4b2e      	ldr	r3, [pc, #184]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	492b      	ldr	r1, [pc, #172]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 800777a:	4313      	orrs	r3, r2
 800777c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800777e:	4b29      	ldr	r3, [pc, #164]	; (8007824 <HAL_RCC_ClockConfig+0x1ec>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0307 	and.w	r3, r3, #7
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	429a      	cmp	r2, r3
 800778a:	d210      	bcs.n	80077ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800778c:	4b25      	ldr	r3, [pc, #148]	; (8007824 <HAL_RCC_ClockConfig+0x1ec>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f023 0207 	bic.w	r2, r3, #7
 8007794:	4923      	ldr	r1, [pc, #140]	; (8007824 <HAL_RCC_ClockConfig+0x1ec>)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	4313      	orrs	r3, r2
 800779a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800779c:	4b21      	ldr	r3, [pc, #132]	; (8007824 <HAL_RCC_ClockConfig+0x1ec>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d001      	beq.n	80077ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e036      	b.n	800781c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d008      	beq.n	80077cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077ba:	4b1b      	ldr	r3, [pc, #108]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	4918      	ldr	r1, [pc, #96]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0308 	and.w	r3, r3, #8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d009      	beq.n	80077ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077d8:	4b13      	ldr	r3, [pc, #76]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	4910      	ldr	r1, [pc, #64]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077ec:	f000 f824 	bl	8007838 <HAL_RCC_GetSysClockFreq>
 80077f0:	4602      	mov	r2, r0
 80077f2:	4b0d      	ldr	r3, [pc, #52]	; (8007828 <HAL_RCC_ClockConfig+0x1f0>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	091b      	lsrs	r3, r3, #4
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	490b      	ldr	r1, [pc, #44]	; (800782c <HAL_RCC_ClockConfig+0x1f4>)
 80077fe:	5ccb      	ldrb	r3, [r1, r3]
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	fa22 f303 	lsr.w	r3, r2, r3
 8007808:	4a09      	ldr	r2, [pc, #36]	; (8007830 <HAL_RCC_ClockConfig+0x1f8>)
 800780a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800780c:	4b09      	ldr	r3, [pc, #36]	; (8007834 <HAL_RCC_ClockConfig+0x1fc>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4618      	mov	r0, r3
 8007812:	f7fb fefd 	bl	8003610 <HAL_InitTick>
 8007816:	4603      	mov	r3, r0
 8007818:	72fb      	strb	r3, [r7, #11]

  return status;
 800781a:	7afb      	ldrb	r3, [r7, #11]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	40022000 	.word	0x40022000
 8007828:	40021000 	.word	0x40021000
 800782c:	08013da8 	.word	0x08013da8
 8007830:	200000c8 	.word	0x200000c8
 8007834:	200000cc 	.word	0x200000cc

08007838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007838:	b480      	push	{r7}
 800783a:	b089      	sub	sp, #36	; 0x24
 800783c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	61fb      	str	r3, [r7, #28]
 8007842:	2300      	movs	r3, #0
 8007844:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007846:	4b3e      	ldr	r3, [pc, #248]	; (8007940 <HAL_RCC_GetSysClockFreq+0x108>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 030c 	and.w	r3, r3, #12
 800784e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007850:	4b3b      	ldr	r3, [pc, #236]	; (8007940 <HAL_RCC_GetSysClockFreq+0x108>)
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f003 0303 	and.w	r3, r3, #3
 8007858:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <HAL_RCC_GetSysClockFreq+0x34>
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2b0c      	cmp	r3, #12
 8007864:	d121      	bne.n	80078aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d11e      	bne.n	80078aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800786c:	4b34      	ldr	r3, [pc, #208]	; (8007940 <HAL_RCC_GetSysClockFreq+0x108>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 0308 	and.w	r3, r3, #8
 8007874:	2b00      	cmp	r3, #0
 8007876:	d107      	bne.n	8007888 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007878:	4b31      	ldr	r3, [pc, #196]	; (8007940 <HAL_RCC_GetSysClockFreq+0x108>)
 800787a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800787e:	0a1b      	lsrs	r3, r3, #8
 8007880:	f003 030f 	and.w	r3, r3, #15
 8007884:	61fb      	str	r3, [r7, #28]
 8007886:	e005      	b.n	8007894 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007888:	4b2d      	ldr	r3, [pc, #180]	; (8007940 <HAL_RCC_GetSysClockFreq+0x108>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	091b      	lsrs	r3, r3, #4
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007894:	4a2b      	ldr	r2, [pc, #172]	; (8007944 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800789c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10d      	bne.n	80078c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078a8:	e00a      	b.n	80078c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d102      	bne.n	80078b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80078b0:	4b25      	ldr	r3, [pc, #148]	; (8007948 <HAL_RCC_GetSysClockFreq+0x110>)
 80078b2:	61bb      	str	r3, [r7, #24]
 80078b4:	e004      	b.n	80078c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b08      	cmp	r3, #8
 80078ba:	d101      	bne.n	80078c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80078bc:	4b23      	ldr	r3, [pc, #140]	; (800794c <HAL_RCC_GetSysClockFreq+0x114>)
 80078be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	2b0c      	cmp	r3, #12
 80078c4:	d134      	bne.n	8007930 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078c6:	4b1e      	ldr	r3, [pc, #120]	; (8007940 <HAL_RCC_GetSysClockFreq+0x108>)
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d003      	beq.n	80078de <HAL_RCC_GetSysClockFreq+0xa6>
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d003      	beq.n	80078e4 <HAL_RCC_GetSysClockFreq+0xac>
 80078dc:	e005      	b.n	80078ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80078de:	4b1a      	ldr	r3, [pc, #104]	; (8007948 <HAL_RCC_GetSysClockFreq+0x110>)
 80078e0:	617b      	str	r3, [r7, #20]
      break;
 80078e2:	e005      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80078e4:	4b19      	ldr	r3, [pc, #100]	; (800794c <HAL_RCC_GetSysClockFreq+0x114>)
 80078e6:	617b      	str	r3, [r7, #20]
      break;
 80078e8:	e002      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	617b      	str	r3, [r7, #20]
      break;
 80078ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078f0:	4b13      	ldr	r3, [pc, #76]	; (8007940 <HAL_RCC_GetSysClockFreq+0x108>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	091b      	lsrs	r3, r3, #4
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	3301      	adds	r3, #1
 80078fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80078fe:	4b10      	ldr	r3, [pc, #64]	; (8007940 <HAL_RCC_GetSysClockFreq+0x108>)
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	0a1b      	lsrs	r3, r3, #8
 8007904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	fb03 f202 	mul.w	r2, r3, r2
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	fbb2 f3f3 	udiv	r3, r2, r3
 8007914:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007916:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <HAL_RCC_GetSysClockFreq+0x108>)
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	0e5b      	lsrs	r3, r3, #25
 800791c:	f003 0303 	and.w	r3, r3, #3
 8007920:	3301      	adds	r3, #1
 8007922:	005b      	lsls	r3, r3, #1
 8007924:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	fbb2 f3f3 	udiv	r3, r2, r3
 800792e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007930:	69bb      	ldr	r3, [r7, #24]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3724      	adds	r7, #36	; 0x24
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	40021000 	.word	0x40021000
 8007944:	08013dc0 	.word	0x08013dc0
 8007948:	00f42400 	.word	0x00f42400
 800794c:	007a1200 	.word	0x007a1200

08007950 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007950:	b480      	push	{r7}
 8007952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007954:	4b03      	ldr	r3, [pc, #12]	; (8007964 <HAL_RCC_GetHCLKFreq+0x14>)
 8007956:	681b      	ldr	r3, [r3, #0]
}
 8007958:	4618      	mov	r0, r3
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	200000c8 	.word	0x200000c8

08007968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800796c:	f7ff fff0 	bl	8007950 <HAL_RCC_GetHCLKFreq>
 8007970:	4602      	mov	r2, r0
 8007972:	4b06      	ldr	r3, [pc, #24]	; (800798c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	0a1b      	lsrs	r3, r3, #8
 8007978:	f003 0307 	and.w	r3, r3, #7
 800797c:	4904      	ldr	r1, [pc, #16]	; (8007990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800797e:	5ccb      	ldrb	r3, [r1, r3]
 8007980:	f003 031f 	and.w	r3, r3, #31
 8007984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007988:	4618      	mov	r0, r3
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40021000 	.word	0x40021000
 8007990:	08013db8 	.word	0x08013db8

08007994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007998:	f7ff ffda 	bl	8007950 <HAL_RCC_GetHCLKFreq>
 800799c:	4602      	mov	r2, r0
 800799e:	4b06      	ldr	r3, [pc, #24]	; (80079b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	0adb      	lsrs	r3, r3, #11
 80079a4:	f003 0307 	and.w	r3, r3, #7
 80079a8:	4904      	ldr	r1, [pc, #16]	; (80079bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80079aa:	5ccb      	ldrb	r3, [r1, r3]
 80079ac:	f003 031f 	and.w	r3, r3, #31
 80079b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	40021000 	.word	0x40021000
 80079bc:	08013db8 	.word	0x08013db8

080079c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	220f      	movs	r2, #15
 80079ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80079d0:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <HAL_RCC_GetClockConfig+0x5c>)
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f003 0203 	and.w	r2, r3, #3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80079dc:	4b0f      	ldr	r3, [pc, #60]	; (8007a1c <HAL_RCC_GetClockConfig+0x5c>)
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80079e8:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <HAL_RCC_GetClockConfig+0x5c>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80079f4:	4b09      	ldr	r3, [pc, #36]	; (8007a1c <HAL_RCC_GetClockConfig+0x5c>)
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	08db      	lsrs	r3, r3, #3
 80079fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007a02:	4b07      	ldr	r3, [pc, #28]	; (8007a20 <HAL_RCC_GetClockConfig+0x60>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0207 	and.w	r2, r3, #7
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	601a      	str	r2, [r3, #0]
}
 8007a0e:	bf00      	nop
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	40021000 	.word	0x40021000
 8007a20:	40022000 	.word	0x40022000

08007a24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007a30:	4b2a      	ldr	r3, [pc, #168]	; (8007adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a3c:	f7ff f9bc 	bl	8006db8 <HAL_PWREx_GetVoltageRange>
 8007a40:	6178      	str	r0, [r7, #20]
 8007a42:	e014      	b.n	8007a6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a44:	4b25      	ldr	r3, [pc, #148]	; (8007adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a48:	4a24      	ldr	r2, [pc, #144]	; (8007adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8007a50:	4b22      	ldr	r3, [pc, #136]	; (8007adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a5c:	f7ff f9ac 	bl	8006db8 <HAL_PWREx_GetVoltageRange>
 8007a60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a62:	4b1e      	ldr	r3, [pc, #120]	; (8007adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a66:	4a1d      	ldr	r2, [pc, #116]	; (8007adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a74:	d10b      	bne.n	8007a8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b80      	cmp	r3, #128	; 0x80
 8007a7a:	d919      	bls.n	8007ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2ba0      	cmp	r3, #160	; 0xa0
 8007a80:	d902      	bls.n	8007a88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a82:	2302      	movs	r3, #2
 8007a84:	613b      	str	r3, [r7, #16]
 8007a86:	e013      	b.n	8007ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a88:	2301      	movs	r3, #1
 8007a8a:	613b      	str	r3, [r7, #16]
 8007a8c:	e010      	b.n	8007ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b80      	cmp	r3, #128	; 0x80
 8007a92:	d902      	bls.n	8007a9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007a94:	2303      	movs	r3, #3
 8007a96:	613b      	str	r3, [r7, #16]
 8007a98:	e00a      	b.n	8007ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b80      	cmp	r3, #128	; 0x80
 8007a9e:	d102      	bne.n	8007aa6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	613b      	str	r3, [r7, #16]
 8007aa4:	e004      	b.n	8007ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b70      	cmp	r3, #112	; 0x70
 8007aaa:	d101      	bne.n	8007ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007aac:	2301      	movs	r3, #1
 8007aae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f023 0207 	bic.w	r2, r3, #7
 8007ab8:	4909      	ldr	r1, [pc, #36]	; (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007ac0:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d001      	beq.n	8007ad2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e000      	b.n	8007ad4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	40021000 	.word	0x40021000
 8007ae0:	40022000 	.word	0x40022000

08007ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007aec:	2300      	movs	r3, #0
 8007aee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007af0:	2300      	movs	r3, #0
 8007af2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d041      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b08:	d02a      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007b0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b0e:	d824      	bhi.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b14:	d008      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b1a:	d81e      	bhi.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00a      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b24:	d010      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b26:	e018      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007b28:	4b86      	ldr	r3, [pc, #536]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	4a85      	ldr	r2, [pc, #532]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b32:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b34:	e015      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 fabb 	bl	80080b8 <RCCEx_PLLSAI1_Config>
 8007b42:	4603      	mov	r3, r0
 8007b44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b46:	e00c      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3320      	adds	r3, #32
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fba6 	bl	80082a0 <RCCEx_PLLSAI2_Config>
 8007b54:	4603      	mov	r3, r0
 8007b56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b58:	e003      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	74fb      	strb	r3, [r7, #19]
      break;
 8007b5e:	e000      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b62:	7cfb      	ldrb	r3, [r7, #19]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10b      	bne.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b68:	4b76      	ldr	r3, [pc, #472]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b76:	4973      	ldr	r1, [pc, #460]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b7e:	e001      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b80:	7cfb      	ldrb	r3, [r7, #19]
 8007b82:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d041      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b98:	d02a      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007b9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b9e:	d824      	bhi.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007ba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ba4:	d008      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007ba6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007baa:	d81e      	bhi.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bb4:	d010      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007bb6:	e018      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007bb8:	4b62      	ldr	r3, [pc, #392]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	4a61      	ldr	r2, [pc, #388]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bc2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007bc4:	e015      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	3304      	adds	r3, #4
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 fa73 	bl	80080b8 <RCCEx_PLLSAI1_Config>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007bd6:	e00c      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3320      	adds	r3, #32
 8007bdc:	2100      	movs	r1, #0
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 fb5e 	bl	80082a0 <RCCEx_PLLSAI2_Config>
 8007be4:	4603      	mov	r3, r0
 8007be6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007be8:	e003      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	74fb      	strb	r3, [r7, #19]
      break;
 8007bee:	e000      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bf2:	7cfb      	ldrb	r3, [r7, #19]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10b      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007bf8:	4b52      	ldr	r3, [pc, #328]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c06:	494f      	ldr	r1, [pc, #316]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007c0e:	e001      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c10:	7cfb      	ldrb	r3, [r7, #19]
 8007c12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 80a0 	beq.w	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c22:	2300      	movs	r3, #0
 8007c24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c26:	4b47      	ldr	r3, [pc, #284]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007c32:	2301      	movs	r3, #1
 8007c34:	e000      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007c36:	2300      	movs	r3, #0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00d      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c3c:	4b41      	ldr	r3, [pc, #260]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c40:	4a40      	ldr	r2, [pc, #256]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c46:	6593      	str	r3, [r2, #88]	; 0x58
 8007c48:	4b3e      	ldr	r3, [pc, #248]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c50:	60bb      	str	r3, [r7, #8]
 8007c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c54:	2301      	movs	r3, #1
 8007c56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c58:	4b3b      	ldr	r3, [pc, #236]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a3a      	ldr	r2, [pc, #232]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c64:	f7fb fec8 	bl	80039f8 <HAL_GetTick>
 8007c68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c6a:	e009      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c6c:	f7fb fec4 	bl	80039f8 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d902      	bls.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	74fb      	strb	r3, [r7, #19]
        break;
 8007c7e:	e005      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c80:	4b31      	ldr	r3, [pc, #196]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0ef      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007c8c:	7cfb      	ldrb	r3, [r7, #19]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d15c      	bne.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c92:	4b2c      	ldr	r3, [pc, #176]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01f      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d019      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007cb0:	4b24      	ldr	r3, [pc, #144]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cbc:	4b21      	ldr	r3, [pc, #132]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc2:	4a20      	ldr	r2, [pc, #128]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ccc:	4b1d      	ldr	r3, [pc, #116]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd2:	4a1c      	ldr	r2, [pc, #112]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007cdc:	4a19      	ldr	r2, [pc, #100]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d016      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cee:	f7fb fe83 	bl	80039f8 <HAL_GetTick>
 8007cf2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cf4:	e00b      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cf6:	f7fb fe7f 	bl	80039f8 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d902      	bls.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	74fb      	strb	r3, [r7, #19]
            break;
 8007d0c:	e006      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d0e:	4b0d      	ldr	r3, [pc, #52]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d0ec      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007d1c:	7cfb      	ldrb	r3, [r7, #19]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10c      	bne.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d22:	4b08      	ldr	r3, [pc, #32]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d32:	4904      	ldr	r1, [pc, #16]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d34:	4313      	orrs	r3, r2
 8007d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007d3a:	e009      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d3c:	7cfb      	ldrb	r3, [r7, #19]
 8007d3e:	74bb      	strb	r3, [r7, #18]
 8007d40:	e006      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007d42:	bf00      	nop
 8007d44:	40021000 	.word	0x40021000
 8007d48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4c:	7cfb      	ldrb	r3, [r7, #19]
 8007d4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d50:	7c7b      	ldrb	r3, [r7, #17]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d105      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d56:	4b9e      	ldr	r3, [pc, #632]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5a:	4a9d      	ldr	r2, [pc, #628]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d6e:	4b98      	ldr	r3, [pc, #608]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d74:	f023 0203 	bic.w	r2, r3, #3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7c:	4994      	ldr	r1, [pc, #592]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0302 	and.w	r3, r3, #2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00a      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d90:	4b8f      	ldr	r3, [pc, #572]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d96:	f023 020c 	bic.w	r2, r3, #12
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d9e:	498c      	ldr	r1, [pc, #560]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00a      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007db2:	4b87      	ldr	r3, [pc, #540]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc0:	4983      	ldr	r1, [pc, #524]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0308 	and.w	r3, r3, #8
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00a      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007dd4:	4b7e      	ldr	r3, [pc, #504]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de2:	497b      	ldr	r1, [pc, #492]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0310 	and.w	r3, r3, #16
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007df6:	4b76      	ldr	r3, [pc, #472]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e04:	4972      	ldr	r1, [pc, #456]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0320 	and.w	r3, r3, #32
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00a      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e18:	4b6d      	ldr	r3, [pc, #436]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e26:	496a      	ldr	r1, [pc, #424]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e3a:	4b65      	ldr	r3, [pc, #404]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e48:	4961      	ldr	r1, [pc, #388]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e5c:	4b5c      	ldr	r3, [pc, #368]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e6a:	4959      	ldr	r1, [pc, #356]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e7e:	4b54      	ldr	r3, [pc, #336]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e8c:	4950      	ldr	r1, [pc, #320]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ea0:	4b4b      	ldr	r3, [pc, #300]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eae:	4948      	ldr	r1, [pc, #288]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00a      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ec2:	4b43      	ldr	r3, [pc, #268]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed0:	493f      	ldr	r1, [pc, #252]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d028      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ee4:	4b3a      	ldr	r3, [pc, #232]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef2:	4937      	ldr	r1, [pc, #220]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007efe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f02:	d106      	bne.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f04:	4b32      	ldr	r3, [pc, #200]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	4a31      	ldr	r2, [pc, #196]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f0e:	60d3      	str	r3, [r2, #12]
 8007f10:	e011      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f1a:	d10c      	bne.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3304      	adds	r3, #4
 8007f20:	2101      	movs	r1, #1
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 f8c8 	bl	80080b8 <RCCEx_PLLSAI1_Config>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007f2c:	7cfb      	ldrb	r3, [r7, #19]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007f32:	7cfb      	ldrb	r3, [r7, #19]
 8007f34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d028      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f42:	4b23      	ldr	r3, [pc, #140]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f50:	491f      	ldr	r1, [pc, #124]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f60:	d106      	bne.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f62:	4b1b      	ldr	r3, [pc, #108]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	4a1a      	ldr	r2, [pc, #104]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f6c:	60d3      	str	r3, [r2, #12]
 8007f6e:	e011      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f78:	d10c      	bne.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	2101      	movs	r1, #1
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 f899 	bl	80080b8 <RCCEx_PLLSAI1_Config>
 8007f86:	4603      	mov	r3, r0
 8007f88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f8a:	7cfb      	ldrb	r3, [r7, #19]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007f90:	7cfb      	ldrb	r3, [r7, #19]
 8007f92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d02b      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fa0:	4b0b      	ldr	r3, [pc, #44]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fae:	4908      	ldr	r1, [pc, #32]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fbe:	d109      	bne.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fc0:	4b03      	ldr	r3, [pc, #12]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	4a02      	ldr	r2, [pc, #8]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fca:	60d3      	str	r3, [r2, #12]
 8007fcc:	e014      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007fce:	bf00      	nop
 8007fd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fdc:	d10c      	bne.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 f867 	bl	80080b8 <RCCEx_PLLSAI1_Config>
 8007fea:	4603      	mov	r3, r0
 8007fec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007fee:	7cfb      	ldrb	r3, [r7, #19]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007ff4:	7cfb      	ldrb	r3, [r7, #19]
 8007ff6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d02f      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008004:	4b2b      	ldr	r3, [pc, #172]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008012:	4928      	ldr	r1, [pc, #160]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008014:	4313      	orrs	r3, r2
 8008016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800801e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008022:	d10d      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3304      	adds	r3, #4
 8008028:	2102      	movs	r1, #2
 800802a:	4618      	mov	r0, r3
 800802c:	f000 f844 	bl	80080b8 <RCCEx_PLLSAI1_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008034:	7cfb      	ldrb	r3, [r7, #19]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d014      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800803a:	7cfb      	ldrb	r3, [r7, #19]
 800803c:	74bb      	strb	r3, [r7, #18]
 800803e:	e011      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008048:	d10c      	bne.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3320      	adds	r3, #32
 800804e:	2102      	movs	r1, #2
 8008050:	4618      	mov	r0, r3
 8008052:	f000 f925 	bl	80082a0 <RCCEx_PLLSAI2_Config>
 8008056:	4603      	mov	r3, r0
 8008058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800805a:	7cfb      	ldrb	r3, [r7, #19]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008060:	7cfb      	ldrb	r3, [r7, #19]
 8008062:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00a      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008070:	4b10      	ldr	r3, [pc, #64]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008076:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800807e:	490d      	ldr	r1, [pc, #52]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008080:	4313      	orrs	r3, r2
 8008082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00b      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008092:	4b08      	ldr	r3, [pc, #32]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008098:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080a2:	4904      	ldr	r1, [pc, #16]	; (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80080aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3718      	adds	r7, #24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	40021000 	.word	0x40021000

080080b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80080c6:	4b75      	ldr	r3, [pc, #468]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f003 0303 	and.w	r3, r3, #3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d018      	beq.n	8008104 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80080d2:	4b72      	ldr	r3, [pc, #456]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f003 0203 	and.w	r2, r3, #3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d10d      	bne.n	80080fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
       ||
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d009      	beq.n	80080fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80080ea:	4b6c      	ldr	r3, [pc, #432]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	091b      	lsrs	r3, r3, #4
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
       ||
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d047      	beq.n	800818e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	73fb      	strb	r3, [r7, #15]
 8008102:	e044      	b.n	800818e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b03      	cmp	r3, #3
 800810a:	d018      	beq.n	800813e <RCCEx_PLLSAI1_Config+0x86>
 800810c:	2b03      	cmp	r3, #3
 800810e:	d825      	bhi.n	800815c <RCCEx_PLLSAI1_Config+0xa4>
 8008110:	2b01      	cmp	r3, #1
 8008112:	d002      	beq.n	800811a <RCCEx_PLLSAI1_Config+0x62>
 8008114:	2b02      	cmp	r3, #2
 8008116:	d009      	beq.n	800812c <RCCEx_PLLSAI1_Config+0x74>
 8008118:	e020      	b.n	800815c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800811a:	4b60      	ldr	r3, [pc, #384]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d11d      	bne.n	8008162 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800812a:	e01a      	b.n	8008162 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800812c:	4b5b      	ldr	r3, [pc, #364]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008134:	2b00      	cmp	r3, #0
 8008136:	d116      	bne.n	8008166 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800813c:	e013      	b.n	8008166 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800813e:	4b57      	ldr	r3, [pc, #348]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10f      	bne.n	800816a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800814a:	4b54      	ldr	r3, [pc, #336]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d109      	bne.n	800816a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800815a:	e006      	b.n	800816a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	73fb      	strb	r3, [r7, #15]
      break;
 8008160:	e004      	b.n	800816c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008162:	bf00      	nop
 8008164:	e002      	b.n	800816c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008166:	bf00      	nop
 8008168:	e000      	b.n	800816c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800816a:	bf00      	nop
    }

    if(status == HAL_OK)
 800816c:	7bfb      	ldrb	r3, [r7, #15]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10d      	bne.n	800818e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008172:	4b4a      	ldr	r3, [pc, #296]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6819      	ldr	r1, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	3b01      	subs	r3, #1
 8008184:	011b      	lsls	r3, r3, #4
 8008186:	430b      	orrs	r3, r1
 8008188:	4944      	ldr	r1, [pc, #272]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 800818a:	4313      	orrs	r3, r2
 800818c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d17d      	bne.n	8008290 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008194:	4b41      	ldr	r3, [pc, #260]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a40      	ldr	r2, [pc, #256]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 800819a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800819e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081a0:	f7fb fc2a 	bl	80039f8 <HAL_GetTick>
 80081a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80081a6:	e009      	b.n	80081bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081a8:	f7fb fc26 	bl	80039f8 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d902      	bls.n	80081bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	73fb      	strb	r3, [r7, #15]
        break;
 80081ba:	e005      	b.n	80081c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80081bc:	4b37      	ldr	r3, [pc, #220]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1ef      	bne.n	80081a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d160      	bne.n	8008290 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d111      	bne.n	80081f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80081d4:	4b31      	ldr	r3, [pc, #196]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80081dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	6892      	ldr	r2, [r2, #8]
 80081e4:	0211      	lsls	r1, r2, #8
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	68d2      	ldr	r2, [r2, #12]
 80081ea:	0912      	lsrs	r2, r2, #4
 80081ec:	0452      	lsls	r2, r2, #17
 80081ee:	430a      	orrs	r2, r1
 80081f0:	492a      	ldr	r1, [pc, #168]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 80081f2:	4313      	orrs	r3, r2
 80081f4:	610b      	str	r3, [r1, #16]
 80081f6:	e027      	b.n	8008248 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d112      	bne.n	8008224 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80081fe:	4b27      	ldr	r3, [pc, #156]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008206:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	6892      	ldr	r2, [r2, #8]
 800820e:	0211      	lsls	r1, r2, #8
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6912      	ldr	r2, [r2, #16]
 8008214:	0852      	lsrs	r2, r2, #1
 8008216:	3a01      	subs	r2, #1
 8008218:	0552      	lsls	r2, r2, #21
 800821a:	430a      	orrs	r2, r1
 800821c:	491f      	ldr	r1, [pc, #124]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 800821e:	4313      	orrs	r3, r2
 8008220:	610b      	str	r3, [r1, #16]
 8008222:	e011      	b.n	8008248 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008224:	4b1d      	ldr	r3, [pc, #116]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800822c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	6892      	ldr	r2, [r2, #8]
 8008234:	0211      	lsls	r1, r2, #8
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	6952      	ldr	r2, [r2, #20]
 800823a:	0852      	lsrs	r2, r2, #1
 800823c:	3a01      	subs	r2, #1
 800823e:	0652      	lsls	r2, r2, #25
 8008240:	430a      	orrs	r2, r1
 8008242:	4916      	ldr	r1, [pc, #88]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008244:	4313      	orrs	r3, r2
 8008246:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008248:	4b14      	ldr	r3, [pc, #80]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a13      	ldr	r2, [pc, #76]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 800824e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008252:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008254:	f7fb fbd0 	bl	80039f8 <HAL_GetTick>
 8008258:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800825a:	e009      	b.n	8008270 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800825c:	f7fb fbcc 	bl	80039f8 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b02      	cmp	r3, #2
 8008268:	d902      	bls.n	8008270 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	73fb      	strb	r3, [r7, #15]
          break;
 800826e:	e005      	b.n	800827c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008270:	4b0a      	ldr	r3, [pc, #40]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0ef      	beq.n	800825c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800827c:	7bfb      	ldrb	r3, [r7, #15]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d106      	bne.n	8008290 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008282:	4b06      	ldr	r3, [pc, #24]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008284:	691a      	ldr	r2, [r3, #16]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	4904      	ldr	r1, [pc, #16]	; (800829c <RCCEx_PLLSAI1_Config+0x1e4>)
 800828c:	4313      	orrs	r3, r2
 800828e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008290:	7bfb      	ldrb	r3, [r7, #15]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	40021000 	.word	0x40021000

080082a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80082ae:	4b6a      	ldr	r3, [pc, #424]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d018      	beq.n	80082ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80082ba:	4b67      	ldr	r3, [pc, #412]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f003 0203 	and.w	r2, r3, #3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d10d      	bne.n	80082e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
       ||
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d009      	beq.n	80082e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80082d2:	4b61      	ldr	r3, [pc, #388]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	091b      	lsrs	r3, r3, #4
 80082d8:	f003 0307 	and.w	r3, r3, #7
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
       ||
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d047      	beq.n	8008376 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	73fb      	strb	r3, [r7, #15]
 80082ea:	e044      	b.n	8008376 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d018      	beq.n	8008326 <RCCEx_PLLSAI2_Config+0x86>
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d825      	bhi.n	8008344 <RCCEx_PLLSAI2_Config+0xa4>
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d002      	beq.n	8008302 <RCCEx_PLLSAI2_Config+0x62>
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d009      	beq.n	8008314 <RCCEx_PLLSAI2_Config+0x74>
 8008300:	e020      	b.n	8008344 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008302:	4b55      	ldr	r3, [pc, #340]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d11d      	bne.n	800834a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008312:	e01a      	b.n	800834a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008314:	4b50      	ldr	r3, [pc, #320]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800831c:	2b00      	cmp	r3, #0
 800831e:	d116      	bne.n	800834e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008324:	e013      	b.n	800834e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008326:	4b4c      	ldr	r3, [pc, #304]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10f      	bne.n	8008352 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008332:	4b49      	ldr	r3, [pc, #292]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d109      	bne.n	8008352 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008342:	e006      	b.n	8008352 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	73fb      	strb	r3, [r7, #15]
      break;
 8008348:	e004      	b.n	8008354 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800834a:	bf00      	nop
 800834c:	e002      	b.n	8008354 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800834e:	bf00      	nop
 8008350:	e000      	b.n	8008354 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008352:	bf00      	nop
    }

    if(status == HAL_OK)
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10d      	bne.n	8008376 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800835a:	4b3f      	ldr	r3, [pc, #252]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6819      	ldr	r1, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	3b01      	subs	r3, #1
 800836c:	011b      	lsls	r3, r3, #4
 800836e:	430b      	orrs	r3, r1
 8008370:	4939      	ldr	r1, [pc, #228]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008372:	4313      	orrs	r3, r2
 8008374:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d167      	bne.n	800844c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800837c:	4b36      	ldr	r3, [pc, #216]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a35      	ldr	r2, [pc, #212]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008388:	f7fb fb36 	bl	80039f8 <HAL_GetTick>
 800838c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800838e:	e009      	b.n	80083a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008390:	f7fb fb32 	bl	80039f8 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b02      	cmp	r3, #2
 800839c:	d902      	bls.n	80083a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	73fb      	strb	r3, [r7, #15]
        break;
 80083a2:	e005      	b.n	80083b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80083a4:	4b2c      	ldr	r3, [pc, #176]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1ef      	bne.n	8008390 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d14a      	bne.n	800844c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d111      	bne.n	80083e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80083bc:	4b26      	ldr	r3, [pc, #152]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80083c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	6892      	ldr	r2, [r2, #8]
 80083cc:	0211      	lsls	r1, r2, #8
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	68d2      	ldr	r2, [r2, #12]
 80083d2:	0912      	lsrs	r2, r2, #4
 80083d4:	0452      	lsls	r2, r2, #17
 80083d6:	430a      	orrs	r2, r1
 80083d8:	491f      	ldr	r1, [pc, #124]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	614b      	str	r3, [r1, #20]
 80083de:	e011      	b.n	8008404 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80083e0:	4b1d      	ldr	r3, [pc, #116]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80083e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	6892      	ldr	r2, [r2, #8]
 80083f0:	0211      	lsls	r1, r2, #8
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	6912      	ldr	r2, [r2, #16]
 80083f6:	0852      	lsrs	r2, r2, #1
 80083f8:	3a01      	subs	r2, #1
 80083fa:	0652      	lsls	r2, r2, #25
 80083fc:	430a      	orrs	r2, r1
 80083fe:	4916      	ldr	r1, [pc, #88]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008400:	4313      	orrs	r3, r2
 8008402:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008404:	4b14      	ldr	r3, [pc, #80]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a13      	ldr	r2, [pc, #76]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 800840a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800840e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008410:	f7fb faf2 	bl	80039f8 <HAL_GetTick>
 8008414:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008416:	e009      	b.n	800842c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008418:	f7fb faee 	bl	80039f8 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	2b02      	cmp	r3, #2
 8008424:	d902      	bls.n	800842c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	73fb      	strb	r3, [r7, #15]
          break;
 800842a:	e005      	b.n	8008438 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800842c:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d0ef      	beq.n	8008418 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d106      	bne.n	800844c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800843e:	4b06      	ldr	r3, [pc, #24]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008440:	695a      	ldr	r2, [r3, #20]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	4904      	ldr	r1, [pc, #16]	; (8008458 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008448:	4313      	orrs	r3, r2
 800844a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800844c:	7bfb      	ldrb	r3, [r7, #15]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	40021000 	.word	0x40021000

0800845c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e049      	b.n	8008502 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d106      	bne.n	8008488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f841 	bl	800850a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2202      	movs	r2, #2
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3304      	adds	r3, #4
 8008498:	4619      	mov	r1, r3
 800849a:	4610      	mov	r0, r2
 800849c:	f000 fc52 	bl	8008d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800850a:	b480      	push	{r7}
 800850c:	b083      	sub	sp, #12
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008512:	bf00      	nop
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
	...

08008520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b01      	cmp	r3, #1
 8008532:	d001      	beq.n	8008538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e04f      	b.n	80085d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2202      	movs	r2, #2
 800853c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68da      	ldr	r2, [r3, #12]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f042 0201 	orr.w	r2, r2, #1
 800854e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a23      	ldr	r2, [pc, #140]	; (80085e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d01d      	beq.n	8008596 <HAL_TIM_Base_Start_IT+0x76>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008562:	d018      	beq.n	8008596 <HAL_TIM_Base_Start_IT+0x76>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a1f      	ldr	r2, [pc, #124]	; (80085e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d013      	beq.n	8008596 <HAL_TIM_Base_Start_IT+0x76>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a1e      	ldr	r2, [pc, #120]	; (80085ec <HAL_TIM_Base_Start_IT+0xcc>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d00e      	beq.n	8008596 <HAL_TIM_Base_Start_IT+0x76>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a1c      	ldr	r2, [pc, #112]	; (80085f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d009      	beq.n	8008596 <HAL_TIM_Base_Start_IT+0x76>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a1b      	ldr	r2, [pc, #108]	; (80085f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d004      	beq.n	8008596 <HAL_TIM_Base_Start_IT+0x76>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a19      	ldr	r2, [pc, #100]	; (80085f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d115      	bne.n	80085c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	4b17      	ldr	r3, [pc, #92]	; (80085fc <HAL_TIM_Base_Start_IT+0xdc>)
 800859e:	4013      	ands	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b06      	cmp	r3, #6
 80085a6:	d015      	beq.n	80085d4 <HAL_TIM_Base_Start_IT+0xb4>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ae:	d011      	beq.n	80085d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f042 0201 	orr.w	r2, r2, #1
 80085be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085c0:	e008      	b.n	80085d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f042 0201 	orr.w	r2, r2, #1
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	e000      	b.n	80085d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	40012c00 	.word	0x40012c00
 80085e8:	40000400 	.word	0x40000400
 80085ec:	40000800 	.word	0x40000800
 80085f0:	40000c00 	.word	0x40000c00
 80085f4:	40013400 	.word	0x40013400
 80085f8:	40014000 	.word	0x40014000
 80085fc:	00010007 	.word	0x00010007

08008600 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e049      	b.n	80086a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d106      	bne.n	800862c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7fa fddc 	bl	80031e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2202      	movs	r2, #2
 8008630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3304      	adds	r3, #4
 800863c:	4619      	mov	r1, r3
 800863e:	4610      	mov	r0, r2
 8008640:	f000 fb80 	bl	8008d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
	...

080086b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d109      	bne.n	80086d4 <HAL_TIM_PWM_Start+0x24>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	bf14      	ite	ne
 80086cc:	2301      	movne	r3, #1
 80086ce:	2300      	moveq	r3, #0
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	e03c      	b.n	800874e <HAL_TIM_PWM_Start+0x9e>
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	d109      	bne.n	80086ee <HAL_TIM_PWM_Start+0x3e>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	bf14      	ite	ne
 80086e6:	2301      	movne	r3, #1
 80086e8:	2300      	moveq	r3, #0
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	e02f      	b.n	800874e <HAL_TIM_PWM_Start+0x9e>
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d109      	bne.n	8008708 <HAL_TIM_PWM_Start+0x58>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	bf14      	ite	ne
 8008700:	2301      	movne	r3, #1
 8008702:	2300      	moveq	r3, #0
 8008704:	b2db      	uxtb	r3, r3
 8008706:	e022      	b.n	800874e <HAL_TIM_PWM_Start+0x9e>
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	2b0c      	cmp	r3, #12
 800870c:	d109      	bne.n	8008722 <HAL_TIM_PWM_Start+0x72>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b01      	cmp	r3, #1
 8008718:	bf14      	ite	ne
 800871a:	2301      	movne	r3, #1
 800871c:	2300      	moveq	r3, #0
 800871e:	b2db      	uxtb	r3, r3
 8008720:	e015      	b.n	800874e <HAL_TIM_PWM_Start+0x9e>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b10      	cmp	r3, #16
 8008726:	d109      	bne.n	800873c <HAL_TIM_PWM_Start+0x8c>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b01      	cmp	r3, #1
 8008732:	bf14      	ite	ne
 8008734:	2301      	movne	r3, #1
 8008736:	2300      	moveq	r3, #0
 8008738:	b2db      	uxtb	r3, r3
 800873a:	e008      	b.n	800874e <HAL_TIM_PWM_Start+0x9e>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b01      	cmp	r3, #1
 8008746:	bf14      	ite	ne
 8008748:	2301      	movne	r3, #1
 800874a:	2300      	moveq	r3, #0
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e09c      	b.n	8008890 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d104      	bne.n	8008766 <HAL_TIM_PWM_Start+0xb6>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2202      	movs	r2, #2
 8008760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008764:	e023      	b.n	80087ae <HAL_TIM_PWM_Start+0xfe>
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b04      	cmp	r3, #4
 800876a:	d104      	bne.n	8008776 <HAL_TIM_PWM_Start+0xc6>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008774:	e01b      	b.n	80087ae <HAL_TIM_PWM_Start+0xfe>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2b08      	cmp	r3, #8
 800877a:	d104      	bne.n	8008786 <HAL_TIM_PWM_Start+0xd6>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2202      	movs	r2, #2
 8008780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008784:	e013      	b.n	80087ae <HAL_TIM_PWM_Start+0xfe>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b0c      	cmp	r3, #12
 800878a:	d104      	bne.n	8008796 <HAL_TIM_PWM_Start+0xe6>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2202      	movs	r2, #2
 8008790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008794:	e00b      	b.n	80087ae <HAL_TIM_PWM_Start+0xfe>
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b10      	cmp	r3, #16
 800879a:	d104      	bne.n	80087a6 <HAL_TIM_PWM_Start+0xf6>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087a4:	e003      	b.n	80087ae <HAL_TIM_PWM_Start+0xfe>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2202      	movs	r2, #2
 80087aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2201      	movs	r2, #1
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 fe40 	bl	800943c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a35      	ldr	r2, [pc, #212]	; (8008898 <HAL_TIM_PWM_Start+0x1e8>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d013      	beq.n	80087ee <HAL_TIM_PWM_Start+0x13e>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a34      	ldr	r2, [pc, #208]	; (800889c <HAL_TIM_PWM_Start+0x1ec>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d00e      	beq.n	80087ee <HAL_TIM_PWM_Start+0x13e>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a32      	ldr	r2, [pc, #200]	; (80088a0 <HAL_TIM_PWM_Start+0x1f0>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d009      	beq.n	80087ee <HAL_TIM_PWM_Start+0x13e>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a31      	ldr	r2, [pc, #196]	; (80088a4 <HAL_TIM_PWM_Start+0x1f4>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d004      	beq.n	80087ee <HAL_TIM_PWM_Start+0x13e>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a2f      	ldr	r2, [pc, #188]	; (80088a8 <HAL_TIM_PWM_Start+0x1f8>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d101      	bne.n	80087f2 <HAL_TIM_PWM_Start+0x142>
 80087ee:	2301      	movs	r3, #1
 80087f0:	e000      	b.n	80087f4 <HAL_TIM_PWM_Start+0x144>
 80087f2:	2300      	movs	r3, #0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d007      	beq.n	8008808 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008806:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a22      	ldr	r2, [pc, #136]	; (8008898 <HAL_TIM_PWM_Start+0x1e8>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d01d      	beq.n	800884e <HAL_TIM_PWM_Start+0x19e>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800881a:	d018      	beq.n	800884e <HAL_TIM_PWM_Start+0x19e>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a22      	ldr	r2, [pc, #136]	; (80088ac <HAL_TIM_PWM_Start+0x1fc>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d013      	beq.n	800884e <HAL_TIM_PWM_Start+0x19e>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a21      	ldr	r2, [pc, #132]	; (80088b0 <HAL_TIM_PWM_Start+0x200>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d00e      	beq.n	800884e <HAL_TIM_PWM_Start+0x19e>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a1f      	ldr	r2, [pc, #124]	; (80088b4 <HAL_TIM_PWM_Start+0x204>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d009      	beq.n	800884e <HAL_TIM_PWM_Start+0x19e>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a17      	ldr	r2, [pc, #92]	; (800889c <HAL_TIM_PWM_Start+0x1ec>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d004      	beq.n	800884e <HAL_TIM_PWM_Start+0x19e>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a15      	ldr	r2, [pc, #84]	; (80088a0 <HAL_TIM_PWM_Start+0x1f0>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d115      	bne.n	800887a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	689a      	ldr	r2, [r3, #8]
 8008854:	4b18      	ldr	r3, [pc, #96]	; (80088b8 <HAL_TIM_PWM_Start+0x208>)
 8008856:	4013      	ands	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b06      	cmp	r3, #6
 800885e:	d015      	beq.n	800888c <HAL_TIM_PWM_Start+0x1dc>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008866:	d011      	beq.n	800888c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f042 0201 	orr.w	r2, r2, #1
 8008876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008878:	e008      	b.n	800888c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f042 0201 	orr.w	r2, r2, #1
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	e000      	b.n	800888e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800888c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	40012c00 	.word	0x40012c00
 800889c:	40013400 	.word	0x40013400
 80088a0:	40014000 	.word	0x40014000
 80088a4:	40014400 	.word	0x40014400
 80088a8:	40014800 	.word	0x40014800
 80088ac:	40000400 	.word	0x40000400
 80088b0:	40000800 	.word	0x40000800
 80088b4:	40000c00 	.word	0x40000c00
 80088b8:	00010007 	.word	0x00010007

080088bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d020      	beq.n	8008920 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d01b      	beq.n	8008920 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f06f 0202 	mvn.w	r2, #2
 80088f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	f003 0303 	and.w	r3, r3, #3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d003      	beq.n	800890e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f9fe 	bl	8008d08 <HAL_TIM_IC_CaptureCallback>
 800890c:	e005      	b.n	800891a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f9f0 	bl	8008cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fa01 	bl	8008d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	f003 0304 	and.w	r3, r3, #4
 8008926:	2b00      	cmp	r3, #0
 8008928:	d020      	beq.n	800896c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f003 0304 	and.w	r3, r3, #4
 8008930:	2b00      	cmp	r3, #0
 8008932:	d01b      	beq.n	800896c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f06f 0204 	mvn.w	r2, #4
 800893c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2202      	movs	r2, #2
 8008942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f9d8 	bl	8008d08 <HAL_TIM_IC_CaptureCallback>
 8008958:	e005      	b.n	8008966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f9ca 	bl	8008cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f9db 	bl	8008d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f003 0308 	and.w	r3, r3, #8
 8008972:	2b00      	cmp	r3, #0
 8008974:	d020      	beq.n	80089b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f003 0308 	and.w	r3, r3, #8
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01b      	beq.n	80089b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f06f 0208 	mvn.w	r2, #8
 8008988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2204      	movs	r2, #4
 800898e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f9b2 	bl	8008d08 <HAL_TIM_IC_CaptureCallback>
 80089a4:	e005      	b.n	80089b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f9a4 	bl	8008cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f9b5 	bl	8008d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	f003 0310 	and.w	r3, r3, #16
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d020      	beq.n	8008a04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f003 0310 	and.w	r3, r3, #16
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d01b      	beq.n	8008a04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f06f 0210 	mvn.w	r2, #16
 80089d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2208      	movs	r2, #8
 80089da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f98c 	bl	8008d08 <HAL_TIM_IC_CaptureCallback>
 80089f0:	e005      	b.n	80089fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f97e 	bl	8008cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f98f 	bl	8008d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00c      	beq.n	8008a28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d007      	beq.n	8008a28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f06f 0201 	mvn.w	r2, #1
 8008a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f7f9 fdf4 	bl	8002610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d104      	bne.n	8008a3c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00c      	beq.n	8008a56 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d007      	beq.n	8008a56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8008a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fee3 	bl	800981c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00c      	beq.n	8008a7a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d007      	beq.n	8008a7a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fedb 	bl	8009830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00c      	beq.n	8008a9e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d007      	beq.n	8008a9e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f949 	bl	8008d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	f003 0320 	and.w	r3, r3, #32
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00c      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d007      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f06f 0220 	mvn.w	r2, #32
 8008aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fea3 	bl	8009808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ac2:	bf00      	nop
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e0ff      	b.n	8008cea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b14      	cmp	r3, #20
 8008af6:	f200 80f0 	bhi.w	8008cda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008afa:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b00:	08008b55 	.word	0x08008b55
 8008b04:	08008cdb 	.word	0x08008cdb
 8008b08:	08008cdb 	.word	0x08008cdb
 8008b0c:	08008cdb 	.word	0x08008cdb
 8008b10:	08008b95 	.word	0x08008b95
 8008b14:	08008cdb 	.word	0x08008cdb
 8008b18:	08008cdb 	.word	0x08008cdb
 8008b1c:	08008cdb 	.word	0x08008cdb
 8008b20:	08008bd7 	.word	0x08008bd7
 8008b24:	08008cdb 	.word	0x08008cdb
 8008b28:	08008cdb 	.word	0x08008cdb
 8008b2c:	08008cdb 	.word	0x08008cdb
 8008b30:	08008c17 	.word	0x08008c17
 8008b34:	08008cdb 	.word	0x08008cdb
 8008b38:	08008cdb 	.word	0x08008cdb
 8008b3c:	08008cdb 	.word	0x08008cdb
 8008b40:	08008c59 	.word	0x08008c59
 8008b44:	08008cdb 	.word	0x08008cdb
 8008b48:	08008cdb 	.word	0x08008cdb
 8008b4c:	08008cdb 	.word	0x08008cdb
 8008b50:	08008c99 	.word	0x08008c99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68b9      	ldr	r1, [r7, #8]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 f998 	bl	8008e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	699a      	ldr	r2, [r3, #24]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f042 0208 	orr.w	r2, r2, #8
 8008b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	699a      	ldr	r2, [r3, #24]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f022 0204 	bic.w	r2, r2, #4
 8008b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6999      	ldr	r1, [r3, #24]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	691a      	ldr	r2, [r3, #16]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	619a      	str	r2, [r3, #24]
      break;
 8008b92:	e0a5      	b.n	8008ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68b9      	ldr	r1, [r7, #8]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 fa08 	bl	8008fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	699a      	ldr	r2, [r3, #24]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	699a      	ldr	r2, [r3, #24]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6999      	ldr	r1, [r3, #24]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	021a      	lsls	r2, r3, #8
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	619a      	str	r2, [r3, #24]
      break;
 8008bd4:	e084      	b.n	8008ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68b9      	ldr	r1, [r7, #8]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 fa71 	bl	80090c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69da      	ldr	r2, [r3, #28]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f042 0208 	orr.w	r2, r2, #8
 8008bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	69da      	ldr	r2, [r3, #28]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f022 0204 	bic.w	r2, r2, #4
 8008c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69d9      	ldr	r1, [r3, #28]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	691a      	ldr	r2, [r3, #16]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	61da      	str	r2, [r3, #28]
      break;
 8008c14:	e064      	b.n	8008ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68b9      	ldr	r1, [r7, #8]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f000 fad9 	bl	80091d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	69da      	ldr	r2, [r3, #28]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	69da      	ldr	r2, [r3, #28]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	69d9      	ldr	r1, [r3, #28]
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	021a      	lsls	r2, r3, #8
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	430a      	orrs	r2, r1
 8008c54:	61da      	str	r2, [r3, #28]
      break;
 8008c56:	e043      	b.n	8008ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68b9      	ldr	r1, [r7, #8]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 fb22 	bl	80092a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f042 0208 	orr.w	r2, r2, #8
 8008c72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f022 0204 	bic.w	r2, r2, #4
 8008c82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	691a      	ldr	r2, [r3, #16]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008c96:	e023      	b.n	8008ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68b9      	ldr	r1, [r7, #8]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 fb66 	bl	8009370 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	021a      	lsls	r2, r3, #8
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008cd8:	e002      	b.n	8008ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8008cde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop

08008cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a46      	ldr	r2, [pc, #280]	; (8008e70 <TIM_Base_SetConfig+0x12c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d013      	beq.n	8008d84 <TIM_Base_SetConfig+0x40>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d62:	d00f      	beq.n	8008d84 <TIM_Base_SetConfig+0x40>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a43      	ldr	r2, [pc, #268]	; (8008e74 <TIM_Base_SetConfig+0x130>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d00b      	beq.n	8008d84 <TIM_Base_SetConfig+0x40>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a42      	ldr	r2, [pc, #264]	; (8008e78 <TIM_Base_SetConfig+0x134>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d007      	beq.n	8008d84 <TIM_Base_SetConfig+0x40>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a41      	ldr	r2, [pc, #260]	; (8008e7c <TIM_Base_SetConfig+0x138>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d003      	beq.n	8008d84 <TIM_Base_SetConfig+0x40>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a40      	ldr	r2, [pc, #256]	; (8008e80 <TIM_Base_SetConfig+0x13c>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d108      	bne.n	8008d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a35      	ldr	r2, [pc, #212]	; (8008e70 <TIM_Base_SetConfig+0x12c>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d01f      	beq.n	8008dde <TIM_Base_SetConfig+0x9a>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da4:	d01b      	beq.n	8008dde <TIM_Base_SetConfig+0x9a>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a32      	ldr	r2, [pc, #200]	; (8008e74 <TIM_Base_SetConfig+0x130>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d017      	beq.n	8008dde <TIM_Base_SetConfig+0x9a>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a31      	ldr	r2, [pc, #196]	; (8008e78 <TIM_Base_SetConfig+0x134>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d013      	beq.n	8008dde <TIM_Base_SetConfig+0x9a>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a30      	ldr	r2, [pc, #192]	; (8008e7c <TIM_Base_SetConfig+0x138>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00f      	beq.n	8008dde <TIM_Base_SetConfig+0x9a>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a2f      	ldr	r2, [pc, #188]	; (8008e80 <TIM_Base_SetConfig+0x13c>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d00b      	beq.n	8008dde <TIM_Base_SetConfig+0x9a>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a2e      	ldr	r2, [pc, #184]	; (8008e84 <TIM_Base_SetConfig+0x140>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d007      	beq.n	8008dde <TIM_Base_SetConfig+0x9a>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a2d      	ldr	r2, [pc, #180]	; (8008e88 <TIM_Base_SetConfig+0x144>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d003      	beq.n	8008dde <TIM_Base_SetConfig+0x9a>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a2c      	ldr	r2, [pc, #176]	; (8008e8c <TIM_Base_SetConfig+0x148>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d108      	bne.n	8008df0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	689a      	ldr	r2, [r3, #8]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a16      	ldr	r2, [pc, #88]	; (8008e70 <TIM_Base_SetConfig+0x12c>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d00f      	beq.n	8008e3c <TIM_Base_SetConfig+0xf8>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a18      	ldr	r2, [pc, #96]	; (8008e80 <TIM_Base_SetConfig+0x13c>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d00b      	beq.n	8008e3c <TIM_Base_SetConfig+0xf8>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a17      	ldr	r2, [pc, #92]	; (8008e84 <TIM_Base_SetConfig+0x140>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d007      	beq.n	8008e3c <TIM_Base_SetConfig+0xf8>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a16      	ldr	r2, [pc, #88]	; (8008e88 <TIM_Base_SetConfig+0x144>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d003      	beq.n	8008e3c <TIM_Base_SetConfig+0xf8>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a15      	ldr	r2, [pc, #84]	; (8008e8c <TIM_Base_SetConfig+0x148>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d103      	bne.n	8008e44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	691a      	ldr	r2, [r3, #16]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d105      	bne.n	8008e62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	f023 0201 	bic.w	r2, r3, #1
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	611a      	str	r2, [r3, #16]
  }
}
 8008e62:	bf00      	nop
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	40012c00 	.word	0x40012c00
 8008e74:	40000400 	.word	0x40000400
 8008e78:	40000800 	.word	0x40000800
 8008e7c:	40000c00 	.word	0x40000c00
 8008e80:	40013400 	.word	0x40013400
 8008e84:	40014000 	.word	0x40014000
 8008e88:	40014400 	.word	0x40014400
 8008e8c:	40014800 	.word	0x40014800

08008e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b087      	sub	sp, #28
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
 8008ea4:	f023 0201 	bic.w	r2, r3, #1
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f023 0303 	bic.w	r3, r3, #3
 8008eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f023 0302 	bic.w	r3, r3, #2
 8008edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a2c      	ldr	r2, [pc, #176]	; (8008f9c <TIM_OC1_SetConfig+0x10c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d00f      	beq.n	8008f10 <TIM_OC1_SetConfig+0x80>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a2b      	ldr	r2, [pc, #172]	; (8008fa0 <TIM_OC1_SetConfig+0x110>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d00b      	beq.n	8008f10 <TIM_OC1_SetConfig+0x80>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a2a      	ldr	r2, [pc, #168]	; (8008fa4 <TIM_OC1_SetConfig+0x114>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d007      	beq.n	8008f10 <TIM_OC1_SetConfig+0x80>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a29      	ldr	r2, [pc, #164]	; (8008fa8 <TIM_OC1_SetConfig+0x118>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d003      	beq.n	8008f10 <TIM_OC1_SetConfig+0x80>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a28      	ldr	r2, [pc, #160]	; (8008fac <TIM_OC1_SetConfig+0x11c>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d10c      	bne.n	8008f2a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f023 0308 	bic.w	r3, r3, #8
 8008f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f023 0304 	bic.w	r3, r3, #4
 8008f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a1b      	ldr	r2, [pc, #108]	; (8008f9c <TIM_OC1_SetConfig+0x10c>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00f      	beq.n	8008f52 <TIM_OC1_SetConfig+0xc2>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a1a      	ldr	r2, [pc, #104]	; (8008fa0 <TIM_OC1_SetConfig+0x110>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d00b      	beq.n	8008f52 <TIM_OC1_SetConfig+0xc2>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a19      	ldr	r2, [pc, #100]	; (8008fa4 <TIM_OC1_SetConfig+0x114>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d007      	beq.n	8008f52 <TIM_OC1_SetConfig+0xc2>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a18      	ldr	r2, [pc, #96]	; (8008fa8 <TIM_OC1_SetConfig+0x118>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d003      	beq.n	8008f52 <TIM_OC1_SetConfig+0xc2>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a17      	ldr	r2, [pc, #92]	; (8008fac <TIM_OC1_SetConfig+0x11c>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d111      	bne.n	8008f76 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	621a      	str	r2, [r3, #32]
}
 8008f90:	bf00      	nop
 8008f92:	371c      	adds	r7, #28
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	40012c00 	.word	0x40012c00
 8008fa0:	40013400 	.word	0x40013400
 8008fa4:	40014000 	.word	0x40014000
 8008fa8:	40014400 	.word	0x40014400
 8008fac:	40014800 	.word	0x40014800

08008fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a1b      	ldr	r3, [r3, #32]
 8008fc4:	f023 0210 	bic.w	r2, r3, #16
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	021b      	lsls	r3, r3, #8
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	f023 0320 	bic.w	r3, r3, #32
 8008ffe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	011b      	lsls	r3, r3, #4
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	4313      	orrs	r3, r2
 800900a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a28      	ldr	r2, [pc, #160]	; (80090b0 <TIM_OC2_SetConfig+0x100>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d003      	beq.n	800901c <TIM_OC2_SetConfig+0x6c>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a27      	ldr	r2, [pc, #156]	; (80090b4 <TIM_OC2_SetConfig+0x104>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d10d      	bne.n	8009038 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	011b      	lsls	r3, r3, #4
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	4313      	orrs	r3, r2
 800902e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009036:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a1d      	ldr	r2, [pc, #116]	; (80090b0 <TIM_OC2_SetConfig+0x100>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d00f      	beq.n	8009060 <TIM_OC2_SetConfig+0xb0>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a1c      	ldr	r2, [pc, #112]	; (80090b4 <TIM_OC2_SetConfig+0x104>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d00b      	beq.n	8009060 <TIM_OC2_SetConfig+0xb0>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a1b      	ldr	r2, [pc, #108]	; (80090b8 <TIM_OC2_SetConfig+0x108>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d007      	beq.n	8009060 <TIM_OC2_SetConfig+0xb0>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a1a      	ldr	r2, [pc, #104]	; (80090bc <TIM_OC2_SetConfig+0x10c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d003      	beq.n	8009060 <TIM_OC2_SetConfig+0xb0>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a19      	ldr	r2, [pc, #100]	; (80090c0 <TIM_OC2_SetConfig+0x110>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d113      	bne.n	8009088 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009066:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800906e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	4313      	orrs	r3, r2
 800907a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	4313      	orrs	r3, r2
 8009086:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	693a      	ldr	r2, [r7, #16]
 800908c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	621a      	str	r2, [r3, #32]
}
 80090a2:	bf00      	nop
 80090a4:	371c      	adds	r7, #28
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	40012c00 	.word	0x40012c00
 80090b4:	40013400 	.word	0x40013400
 80090b8:	40014000 	.word	0x40014000
 80090bc:	40014400 	.word	0x40014400
 80090c0:	40014800 	.word	0x40014800

080090c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
 80090d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f023 0303 	bic.w	r3, r3, #3
 80090fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	4313      	orrs	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	021b      	lsls	r3, r3, #8
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	4313      	orrs	r3, r2
 800911c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a27      	ldr	r2, [pc, #156]	; (80091c0 <TIM_OC3_SetConfig+0xfc>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d003      	beq.n	800912e <TIM_OC3_SetConfig+0x6a>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a26      	ldr	r2, [pc, #152]	; (80091c4 <TIM_OC3_SetConfig+0x100>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d10d      	bne.n	800914a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	021b      	lsls	r3, r3, #8
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	4313      	orrs	r3, r2
 8009140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a1c      	ldr	r2, [pc, #112]	; (80091c0 <TIM_OC3_SetConfig+0xfc>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d00f      	beq.n	8009172 <TIM_OC3_SetConfig+0xae>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a1b      	ldr	r2, [pc, #108]	; (80091c4 <TIM_OC3_SetConfig+0x100>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d00b      	beq.n	8009172 <TIM_OC3_SetConfig+0xae>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a1a      	ldr	r2, [pc, #104]	; (80091c8 <TIM_OC3_SetConfig+0x104>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d007      	beq.n	8009172 <TIM_OC3_SetConfig+0xae>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a19      	ldr	r2, [pc, #100]	; (80091cc <TIM_OC3_SetConfig+0x108>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d003      	beq.n	8009172 <TIM_OC3_SetConfig+0xae>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a18      	ldr	r2, [pc, #96]	; (80091d0 <TIM_OC3_SetConfig+0x10c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d113      	bne.n	800919a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	011b      	lsls	r3, r3, #4
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	4313      	orrs	r3, r2
 800918c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	011b      	lsls	r3, r3, #4
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	4313      	orrs	r3, r2
 8009198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	621a      	str	r2, [r3, #32]
}
 80091b4:	bf00      	nop
 80091b6:	371c      	adds	r7, #28
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	40012c00 	.word	0x40012c00
 80091c4:	40013400 	.word	0x40013400
 80091c8:	40014000 	.word	0x40014000
 80091cc:	40014400 	.word	0x40014400
 80091d0:	40014800 	.word	0x40014800

080091d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b087      	sub	sp, #28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800920e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	021b      	lsls	r3, r3, #8
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	4313      	orrs	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	031b      	lsls	r3, r3, #12
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	4313      	orrs	r3, r2
 800922e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a18      	ldr	r2, [pc, #96]	; (8009294 <TIM_OC4_SetConfig+0xc0>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d00f      	beq.n	8009258 <TIM_OC4_SetConfig+0x84>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a17      	ldr	r2, [pc, #92]	; (8009298 <TIM_OC4_SetConfig+0xc4>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d00b      	beq.n	8009258 <TIM_OC4_SetConfig+0x84>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a16      	ldr	r2, [pc, #88]	; (800929c <TIM_OC4_SetConfig+0xc8>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d007      	beq.n	8009258 <TIM_OC4_SetConfig+0x84>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a15      	ldr	r2, [pc, #84]	; (80092a0 <TIM_OC4_SetConfig+0xcc>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d003      	beq.n	8009258 <TIM_OC4_SetConfig+0x84>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a14      	ldr	r2, [pc, #80]	; (80092a4 <TIM_OC4_SetConfig+0xd0>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d109      	bne.n	800926c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800925e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	695b      	ldr	r3, [r3, #20]
 8009264:	019b      	lsls	r3, r3, #6
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	4313      	orrs	r3, r2
 800926a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	693a      	ldr	r2, [r7, #16]
 8009284:	621a      	str	r2, [r3, #32]
}
 8009286:	bf00      	nop
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	40012c00 	.word	0x40012c00
 8009298:	40013400 	.word	0x40013400
 800929c:	40014000 	.word	0x40014000
 80092a0:	40014400 	.word	0x40014400
 80092a4:	40014800 	.word	0x40014800

080092a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a1b      	ldr	r3, [r3, #32]
 80092bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80092ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	041b      	lsls	r3, r3, #16
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a17      	ldr	r2, [pc, #92]	; (800935c <TIM_OC5_SetConfig+0xb4>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d00f      	beq.n	8009322 <TIM_OC5_SetConfig+0x7a>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a16      	ldr	r2, [pc, #88]	; (8009360 <TIM_OC5_SetConfig+0xb8>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d00b      	beq.n	8009322 <TIM_OC5_SetConfig+0x7a>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a15      	ldr	r2, [pc, #84]	; (8009364 <TIM_OC5_SetConfig+0xbc>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d007      	beq.n	8009322 <TIM_OC5_SetConfig+0x7a>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a14      	ldr	r2, [pc, #80]	; (8009368 <TIM_OC5_SetConfig+0xc0>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d003      	beq.n	8009322 <TIM_OC5_SetConfig+0x7a>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a13      	ldr	r2, [pc, #76]	; (800936c <TIM_OC5_SetConfig+0xc4>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d109      	bne.n	8009336 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009328:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	021b      	lsls	r3, r3, #8
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	4313      	orrs	r3, r2
 8009334:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	621a      	str	r2, [r3, #32]
}
 8009350:	bf00      	nop
 8009352:	371c      	adds	r7, #28
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	40012c00 	.word	0x40012c00
 8009360:	40013400 	.word	0x40013400
 8009364:	40014000 	.word	0x40014000
 8009368:	40014400 	.word	0x40014400
 800936c:	40014800 	.word	0x40014800

08009370 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009370:	b480      	push	{r7}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800939e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	021b      	lsls	r3, r3, #8
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	051b      	lsls	r3, r3, #20
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a18      	ldr	r2, [pc, #96]	; (8009428 <TIM_OC6_SetConfig+0xb8>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d00f      	beq.n	80093ec <TIM_OC6_SetConfig+0x7c>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a17      	ldr	r2, [pc, #92]	; (800942c <TIM_OC6_SetConfig+0xbc>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d00b      	beq.n	80093ec <TIM_OC6_SetConfig+0x7c>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a16      	ldr	r2, [pc, #88]	; (8009430 <TIM_OC6_SetConfig+0xc0>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d007      	beq.n	80093ec <TIM_OC6_SetConfig+0x7c>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a15      	ldr	r2, [pc, #84]	; (8009434 <TIM_OC6_SetConfig+0xc4>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d003      	beq.n	80093ec <TIM_OC6_SetConfig+0x7c>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a14      	ldr	r2, [pc, #80]	; (8009438 <TIM_OC6_SetConfig+0xc8>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d109      	bne.n	8009400 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	029b      	lsls	r3, r3, #10
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	621a      	str	r2, [r3, #32]
}
 800941a:	bf00      	nop
 800941c:	371c      	adds	r7, #28
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	40012c00 	.word	0x40012c00
 800942c:	40013400 	.word	0x40013400
 8009430:	40014000 	.word	0x40014000
 8009434:	40014400 	.word	0x40014400
 8009438:	40014800 	.word	0x40014800

0800943c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f003 031f 	and.w	r3, r3, #31
 800944e:	2201      	movs	r2, #1
 8009450:	fa02 f303 	lsl.w	r3, r2, r3
 8009454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6a1a      	ldr	r2, [r3, #32]
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	43db      	mvns	r3, r3
 800945e:	401a      	ands	r2, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6a1a      	ldr	r2, [r3, #32]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f003 031f 	and.w	r3, r3, #31
 800946e:	6879      	ldr	r1, [r7, #4]
 8009470:	fa01 f303 	lsl.w	r3, r1, r3
 8009474:	431a      	orrs	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	621a      	str	r2, [r3, #32]
}
 800947a:	bf00      	nop
 800947c:	371c      	adds	r7, #28
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
	...

08009488 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d109      	bne.n	80094ac <HAL_TIMEx_PWMN_Start+0x24>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	bf14      	ite	ne
 80094a4:	2301      	movne	r3, #1
 80094a6:	2300      	moveq	r3, #0
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	e022      	b.n	80094f2 <HAL_TIMEx_PWMN_Start+0x6a>
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d109      	bne.n	80094c6 <HAL_TIMEx_PWMN_Start+0x3e>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	bf14      	ite	ne
 80094be:	2301      	movne	r3, #1
 80094c0:	2300      	moveq	r3, #0
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	e015      	b.n	80094f2 <HAL_TIMEx_PWMN_Start+0x6a>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2b08      	cmp	r3, #8
 80094ca:	d109      	bne.n	80094e0 <HAL_TIMEx_PWMN_Start+0x58>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	bf14      	ite	ne
 80094d8:	2301      	movne	r3, #1
 80094da:	2300      	moveq	r3, #0
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	e008      	b.n	80094f2 <HAL_TIMEx_PWMN_Start+0x6a>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	bf14      	ite	ne
 80094ec:	2301      	movne	r3, #1
 80094ee:	2300      	moveq	r3, #0
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e06e      	b.n	80095d8 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d104      	bne.n	800950a <HAL_TIMEx_PWMN_Start+0x82>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2202      	movs	r2, #2
 8009504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009508:	e013      	b.n	8009532 <HAL_TIMEx_PWMN_Start+0xaa>
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	2b04      	cmp	r3, #4
 800950e:	d104      	bne.n	800951a <HAL_TIMEx_PWMN_Start+0x92>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2202      	movs	r2, #2
 8009514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009518:	e00b      	b.n	8009532 <HAL_TIMEx_PWMN_Start+0xaa>
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	2b08      	cmp	r3, #8
 800951e:	d104      	bne.n	800952a <HAL_TIMEx_PWMN_Start+0xa2>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2202      	movs	r2, #2
 8009524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009528:	e003      	b.n	8009532 <HAL_TIMEx_PWMN_Start+0xaa>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2202      	movs	r2, #2
 800952e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2204      	movs	r2, #4
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	4618      	mov	r0, r3
 800953c:	f000 f982 	bl	8009844 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800954e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a22      	ldr	r2, [pc, #136]	; (80095e0 <HAL_TIMEx_PWMN_Start+0x158>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d01d      	beq.n	8009596 <HAL_TIMEx_PWMN_Start+0x10e>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009562:	d018      	beq.n	8009596 <HAL_TIMEx_PWMN_Start+0x10e>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a1e      	ldr	r2, [pc, #120]	; (80095e4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d013      	beq.n	8009596 <HAL_TIMEx_PWMN_Start+0x10e>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a1d      	ldr	r2, [pc, #116]	; (80095e8 <HAL_TIMEx_PWMN_Start+0x160>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d00e      	beq.n	8009596 <HAL_TIMEx_PWMN_Start+0x10e>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a1b      	ldr	r2, [pc, #108]	; (80095ec <HAL_TIMEx_PWMN_Start+0x164>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d009      	beq.n	8009596 <HAL_TIMEx_PWMN_Start+0x10e>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a1a      	ldr	r2, [pc, #104]	; (80095f0 <HAL_TIMEx_PWMN_Start+0x168>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d004      	beq.n	8009596 <HAL_TIMEx_PWMN_Start+0x10e>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a18      	ldr	r2, [pc, #96]	; (80095f4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d115      	bne.n	80095c2 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689a      	ldr	r2, [r3, #8]
 800959c:	4b16      	ldr	r3, [pc, #88]	; (80095f8 <HAL_TIMEx_PWMN_Start+0x170>)
 800959e:	4013      	ands	r3, r2
 80095a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2b06      	cmp	r3, #6
 80095a6:	d015      	beq.n	80095d4 <HAL_TIMEx_PWMN_Start+0x14c>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ae:	d011      	beq.n	80095d4 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 0201 	orr.w	r2, r2, #1
 80095be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095c0:	e008      	b.n	80095d4 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f042 0201 	orr.w	r2, r2, #1
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	e000      	b.n	80095d6 <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	40012c00 	.word	0x40012c00
 80095e4:	40000400 	.word	0x40000400
 80095e8:	40000800 	.word	0x40000800
 80095ec:	40000c00 	.word	0x40000c00
 80095f0:	40013400 	.word	0x40013400
 80095f4:	40014000 	.word	0x40014000
 80095f8:	00010007 	.word	0x00010007

080095fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800960c:	2b01      	cmp	r3, #1
 800960e:	d101      	bne.n	8009614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009610:	2302      	movs	r3, #2
 8009612:	e068      	b.n	80096e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2202      	movs	r2, #2
 8009620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a2e      	ldr	r2, [pc, #184]	; (80096f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d004      	beq.n	8009648 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a2d      	ldr	r2, [pc, #180]	; (80096f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d108      	bne.n	800965a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800964e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	4313      	orrs	r3, r2
 8009658:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009660:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4313      	orrs	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a1e      	ldr	r2, [pc, #120]	; (80096f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d01d      	beq.n	80096ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009686:	d018      	beq.n	80096ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a1b      	ldr	r2, [pc, #108]	; (80096fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d013      	beq.n	80096ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a1a      	ldr	r2, [pc, #104]	; (8009700 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d00e      	beq.n	80096ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a18      	ldr	r2, [pc, #96]	; (8009704 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d009      	beq.n	80096ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a13      	ldr	r2, [pc, #76]	; (80096f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d004      	beq.n	80096ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a14      	ldr	r2, [pc, #80]	; (8009708 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d10c      	bne.n	80096d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	40012c00 	.word	0x40012c00
 80096f8:	40013400 	.word	0x40013400
 80096fc:	40000400 	.word	0x40000400
 8009700:	40000800 	.word	0x40000800
 8009704:	40000c00 	.word	0x40000c00
 8009708:	40014000 	.word	0x40014000

0800970c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009716:	2300      	movs	r3, #0
 8009718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009720:	2b01      	cmp	r3, #1
 8009722:	d101      	bne.n	8009728 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009724:	2302      	movs	r3, #2
 8009726:	e065      	b.n	80097f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	4313      	orrs	r3, r2
 800973c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	4313      	orrs	r3, r2
 800974a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	4313      	orrs	r3, r2
 8009758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4313      	orrs	r3, r2
 8009766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	4313      	orrs	r3, r2
 8009774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	4313      	orrs	r3, r2
 8009782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978e:	4313      	orrs	r3, r2
 8009790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	041b      	lsls	r3, r3, #16
 800979e:	4313      	orrs	r3, r2
 80097a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a16      	ldr	r2, [pc, #88]	; (8009800 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d004      	beq.n	80097b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a14      	ldr	r2, [pc, #80]	; (8009804 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d115      	bne.n	80097e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c0:	051b      	lsls	r3, r3, #20
 80097c2:	4313      	orrs	r3, r2
 80097c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	69db      	ldr	r3, [r3, #28]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	4313      	orrs	r3, r2
 80097e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	40012c00 	.word	0x40012c00
 8009804:	40013400 	.word	0x40013400

08009808 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	f003 030f 	and.w	r3, r3, #15
 8009856:	2204      	movs	r2, #4
 8009858:	fa02 f303 	lsl.w	r3, r2, r3
 800985c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6a1a      	ldr	r2, [r3, #32]
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	43db      	mvns	r3, r3
 8009866:	401a      	ands	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6a1a      	ldr	r2, [r3, #32]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f003 030f 	and.w	r3, r3, #15
 8009876:	6879      	ldr	r1, [r7, #4]
 8009878:	fa01 f303 	lsl.w	r3, r1, r3
 800987c:	431a      	orrs	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	621a      	str	r2, [r3, #32]
}
 8009882:	bf00      	nop
 8009884:	371c      	adds	r7, #28
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b082      	sub	sp, #8
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d101      	bne.n	80098a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e040      	b.n	8009922 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d106      	bne.n	80098b6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7f9 fd29 	bl	8003308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2224      	movs	r2, #36	; 0x24
 80098ba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f022 0201 	bic.w	r2, r2, #1
 80098ca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d002      	beq.n	80098da <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fee7 	bl	800a6a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fc2c 	bl	800a138 <UART_SetConfig>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d101      	bne.n	80098ea <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e01b      	b.n	8009922 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	689a      	ldr	r2, [r3, #8]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009908:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f042 0201 	orr.w	r2, r2, #1
 8009918:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 ff66 	bl	800a7ec <UART_CheckIdleState>
 8009920:	4603      	mov	r3, r0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b08a      	sub	sp, #40	; 0x28
 800992e:	af02      	add	r7, sp, #8
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	603b      	str	r3, [r7, #0]
 8009936:	4613      	mov	r3, r2
 8009938:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800993e:	2b20      	cmp	r3, #32
 8009940:	d178      	bne.n	8009a34 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <HAL_UART_Transmit+0x24>
 8009948:	88fb      	ldrh	r3, [r7, #6]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d101      	bne.n	8009952 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e071      	b.n	8009a36 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2221      	movs	r2, #33	; 0x21
 800995e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009960:	f7fa f84a 	bl	80039f8 <HAL_GetTick>
 8009964:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	88fa      	ldrh	r2, [r7, #6]
 800996a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	88fa      	ldrh	r2, [r7, #6]
 8009972:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800997e:	d108      	bne.n	8009992 <HAL_UART_Transmit+0x68>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d104      	bne.n	8009992 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009988:	2300      	movs	r3, #0
 800998a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	61bb      	str	r3, [r7, #24]
 8009990:	e003      	b.n	800999a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009996:	2300      	movs	r3, #0
 8009998:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800999a:	e030      	b.n	80099fe <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	2200      	movs	r2, #0
 80099a4:	2180      	movs	r1, #128	; 0x80
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 ffc8 	bl	800a93c <UART_WaitOnFlagUntilTimeout>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d004      	beq.n	80099bc <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2220      	movs	r2, #32
 80099b6:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e03c      	b.n	8009a36 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10b      	bne.n	80099da <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	881a      	ldrh	r2, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099ce:	b292      	uxth	r2, r2
 80099d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	3302      	adds	r3, #2
 80099d6:	61bb      	str	r3, [r7, #24]
 80099d8:	e008      	b.n	80099ec <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	781a      	ldrb	r2, [r3, #0]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	b292      	uxth	r2, r2
 80099e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	3301      	adds	r3, #1
 80099ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	3b01      	subs	r3, #1
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1c8      	bne.n	800999c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	2200      	movs	r2, #0
 8009a12:	2140      	movs	r1, #64	; 0x40
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 ff91 	bl	800a93c <UART_WaitOnFlagUntilTimeout>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d004      	beq.n	8009a2a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2220      	movs	r2, #32
 8009a24:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e005      	b.n	8009a36 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	e000      	b.n	8009a36 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009a34:	2302      	movs	r3, #2
  }
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3720      	adds	r7, #32
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b08a      	sub	sp, #40	; 0x28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a54:	2b20      	cmp	r3, #32
 8009a56:	d137      	bne.n	8009ac8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d002      	beq.n	8009a64 <HAL_UART_Receive_DMA+0x24>
 8009a5e:	88fb      	ldrh	r3, [r7, #6]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d101      	bne.n	8009a68 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e030      	b.n	8009aca <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a18      	ldr	r2, [pc, #96]	; (8009ad4 <HAL_UART_Receive_DMA+0x94>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d01f      	beq.n	8009ab8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d018      	beq.n	8009ab8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	e853 3f00 	ldrex	r3, [r3]
 8009a92:	613b      	str	r3, [r7, #16]
   return(result);
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	623b      	str	r3, [r7, #32]
 8009aa6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa8:	69f9      	ldr	r1, [r7, #28]
 8009aaa:	6a3a      	ldr	r2, [r7, #32]
 8009aac:	e841 2300 	strex	r3, r2, [r1]
 8009ab0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e6      	bne.n	8009a86 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009ab8:	88fb      	ldrh	r3, [r7, #6]
 8009aba:	461a      	mov	r2, r3
 8009abc:	68b9      	ldr	r1, [r7, #8]
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 ffaa 	bl	800aa18 <UART_Start_Receive_DMA>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	e000      	b.n	8009aca <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ac8:	2302      	movs	r3, #2
  }
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3728      	adds	r7, #40	; 0x28
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	40008000 	.word	0x40008000

08009ad8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b0ba      	sub	sp, #232	; 0xe8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	69db      	ldr	r3, [r3, #28]
 8009ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009afe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009b02:	f640 030f 	movw	r3, #2063	; 0x80f
 8009b06:	4013      	ands	r3, r2
 8009b08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009b0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d115      	bne.n	8009b40 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b18:	f003 0320 	and.w	r3, r3, #32
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00f      	beq.n	8009b40 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b24:	f003 0320 	and.w	r3, r3, #32
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d009      	beq.n	8009b40 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f000 82ca 	beq.w	800a0ca <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	4798      	blx	r3
      }
      return;
 8009b3e:	e2c4      	b.n	800a0ca <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009b40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 8117 	beq.w	8009d78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d106      	bne.n	8009b64 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009b56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009b5a:	4b85      	ldr	r3, [pc, #532]	; (8009d70 <HAL_UART_IRQHandler+0x298>)
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 810a 	beq.w	8009d78 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d011      	beq.n	8009b94 <HAL_UART_IRQHandler+0xbc>
 8009b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00b      	beq.n	8009b94 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2201      	movs	r2, #1
 8009b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b8a:	f043 0201 	orr.w	r2, r3, #1
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b98:	f003 0302 	and.w	r3, r3, #2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d011      	beq.n	8009bc4 <HAL_UART_IRQHandler+0xec>
 8009ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ba4:	f003 0301 	and.w	r3, r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00b      	beq.n	8009bc4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bba:	f043 0204 	orr.w	r2, r3, #4
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bc8:	f003 0304 	and.w	r3, r3, #4
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d011      	beq.n	8009bf4 <HAL_UART_IRQHandler+0x11c>
 8009bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bd4:	f003 0301 	and.w	r3, r3, #1
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00b      	beq.n	8009bf4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2204      	movs	r2, #4
 8009be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bea:	f043 0202 	orr.w	r2, r3, #2
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bf8:	f003 0308 	and.w	r3, r3, #8
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d017      	beq.n	8009c30 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c04:	f003 0320 	and.w	r3, r3, #32
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d105      	bne.n	8009c18 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00b      	beq.n	8009c30 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2208      	movs	r2, #8
 8009c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c26:	f043 0208 	orr.w	r2, r3, #8
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d012      	beq.n	8009c62 <HAL_UART_IRQHandler+0x18a>
 8009c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00c      	beq.n	8009c62 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c58:	f043 0220 	orr.w	r2, r3, #32
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 8230 	beq.w	800a0ce <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c72:	f003 0320 	and.w	r3, r3, #32
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00d      	beq.n	8009c96 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c7e:	f003 0320 	and.w	r3, r3, #32
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d007      	beq.n	8009c96 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d003      	beq.n	8009c96 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009caa:	2b40      	cmp	r3, #64	; 0x40
 8009cac:	d005      	beq.n	8009cba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009cb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d04f      	beq.n	8009d5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 ff72 	bl	800aba4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cca:	2b40      	cmp	r3, #64	; 0x40
 8009ccc:	d141      	bne.n	8009d52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cdc:	e853 3f00 	ldrex	r3, [r3]
 8009ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	3308      	adds	r3, #8
 8009cf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009cfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009d06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009d0a:	e841 2300 	strex	r3, r2, [r1]
 8009d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1d9      	bne.n	8009cce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d013      	beq.n	8009d4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d26:	4a13      	ldr	r2, [pc, #76]	; (8009d74 <HAL_UART_IRQHandler+0x29c>)
 8009d28:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fb fc8a 	bl	8005648 <HAL_DMA_Abort_IT>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d017      	beq.n	8009d6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009d44:	4610      	mov	r0, r2
 8009d46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d48:	e00f      	b.n	8009d6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f9de 	bl	800a10c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d50:	e00b      	b.n	8009d6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f9da 	bl	800a10c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d58:	e007      	b.n	8009d6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f9d6 	bl	800a10c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009d68:	e1b1      	b.n	800a0ce <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d6a:	bf00      	nop
    return;
 8009d6c:	e1af      	b.n	800a0ce <HAL_UART_IRQHandler+0x5f6>
 8009d6e:	bf00      	nop
 8009d70:	04000120 	.word	0x04000120
 8009d74:	0800ae55 	.word	0x0800ae55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	f040 816a 	bne.w	800a056 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d86:	f003 0310 	and.w	r3, r3, #16
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 8163 	beq.w	800a056 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d94:	f003 0310 	and.w	r3, r3, #16
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f000 815c 	beq.w	800a056 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2210      	movs	r2, #16
 8009da4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009db0:	2b40      	cmp	r3, #64	; 0x40
 8009db2:	f040 80d4 	bne.w	8009f5e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009dc2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 80ad 	beq.w	8009f26 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	f080 80a5 	bcs.w	8009f26 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009de2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 0320 	and.w	r3, r3, #32
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f040 8086 	bne.w	8009f04 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e04:	e853 3f00 	ldrex	r3, [r3]
 8009e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e26:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e32:	e841 2300 	strex	r3, r2, [r1]
 8009e36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1da      	bne.n	8009df8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3308      	adds	r3, #8
 8009e48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e4c:	e853 3f00 	ldrex	r3, [r3]
 8009e50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e54:	f023 0301 	bic.w	r3, r3, #1
 8009e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3308      	adds	r3, #8
 8009e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009e66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e72:	e841 2300 	strex	r3, r2, [r1]
 8009e76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1e1      	bne.n	8009e42 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	3308      	adds	r3, #8
 8009e84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e88:	e853 3f00 	ldrex	r3, [r3]
 8009e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	3308      	adds	r3, #8
 8009e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009ea2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009ea4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ea8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009eaa:	e841 2300 	strex	r3, r2, [r1]
 8009eae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1e3      	bne.n	8009e7e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2220      	movs	r2, #32
 8009eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ecc:	e853 3f00 	ldrex	r3, [r3]
 8009ed0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ed4:	f023 0310 	bic.w	r3, r3, #16
 8009ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ee6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ee8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009eec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e4      	bne.n	8009ec4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fb fb64 	bl	80055cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2202      	movs	r2, #2
 8009f08:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f8fe 	bl	800a120 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009f24:	e0d5      	b.n	800a0d2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009f2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f30:	429a      	cmp	r2, r3
 8009f32:	f040 80ce 	bne.w	800a0d2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0320 	and.w	r3, r3, #32
 8009f42:	2b20      	cmp	r3, #32
 8009f44:	f040 80c5 	bne.w	800a0d2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f8e2 	bl	800a120 <HAL_UARTEx_RxEventCallback>
      return;
 8009f5c:	e0b9      	b.n	800a0d2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f000 80ab 	beq.w	800a0d6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8009f80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 80a6 	beq.w	800a0d6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f92:	e853 3f00 	ldrex	r3, [r3]
 8009f96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009fac:	647b      	str	r3, [r7, #68]	; 0x44
 8009fae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fb4:	e841 2300 	strex	r3, r2, [r1]
 8009fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1e4      	bne.n	8009f8a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fca:	e853 3f00 	ldrex	r3, [r3]
 8009fce:	623b      	str	r3, [r7, #32]
   return(result);
 8009fd0:	6a3b      	ldr	r3, [r7, #32]
 8009fd2:	f023 0301 	bic.w	r3, r3, #1
 8009fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	3308      	adds	r3, #8
 8009fe0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009fe4:	633a      	str	r2, [r7, #48]	; 0x30
 8009fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fec:	e841 2300 	strex	r3, r2, [r1]
 8009ff0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1e3      	bne.n	8009fc0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	60fb      	str	r3, [r7, #12]
   return(result);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f023 0310 	bic.w	r3, r3, #16
 800a020:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	461a      	mov	r2, r3
 800a02a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a02e:	61fb      	str	r3, [r7, #28]
 800a030:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a032:	69b9      	ldr	r1, [r7, #24]
 800a034:	69fa      	ldr	r2, [r7, #28]
 800a036:	e841 2300 	strex	r3, r2, [r1]
 800a03a:	617b      	str	r3, [r7, #20]
   return(result);
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1e4      	bne.n	800a00c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2202      	movs	r2, #2
 800a046:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a048:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f866 	bl	800a120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a054:	e03f      	b.n	800a0d6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a05a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00e      	beq.n	800a080 <HAL_UART_IRQHandler+0x5a8>
 800a062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d008      	beq.n	800a080 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a076:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 ff2b 	bl	800aed4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a07e:	e02d      	b.n	800a0dc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00e      	beq.n	800a0aa <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a08c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a094:	2b00      	cmp	r3, #0
 800a096:	d008      	beq.n	800a0aa <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d01c      	beq.n	800a0da <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	4798      	blx	r3
    }
    return;
 800a0a8:	e017      	b.n	800a0da <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d012      	beq.n	800a0dc <HAL_UART_IRQHandler+0x604>
 800a0b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00c      	beq.n	800a0dc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fedc 	bl	800ae80 <UART_EndTransmit_IT>
    return;
 800a0c8:	e008      	b.n	800a0dc <HAL_UART_IRQHandler+0x604>
      return;
 800a0ca:	bf00      	nop
 800a0cc:	e006      	b.n	800a0dc <HAL_UART_IRQHandler+0x604>
    return;
 800a0ce:	bf00      	nop
 800a0d0:	e004      	b.n	800a0dc <HAL_UART_IRQHandler+0x604>
      return;
 800a0d2:	bf00      	nop
 800a0d4:	e002      	b.n	800a0dc <HAL_UART_IRQHandler+0x604>
      return;
 800a0d6:	bf00      	nop
 800a0d8:	e000      	b.n	800a0dc <HAL_UART_IRQHandler+0x604>
    return;
 800a0da:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a0dc:	37e8      	adds	r7, #232	; 0xe8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop

0800a0e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a114:	bf00      	nop
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	460b      	mov	r3, r1
 800a12a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a13c:	b08a      	sub	sp, #40	; 0x28
 800a13e:	af00      	add	r7, sp, #0
 800a140:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	689a      	ldr	r2, [r3, #8]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	431a      	orrs	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	431a      	orrs	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	69db      	ldr	r3, [r3, #28]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	4ba4      	ldr	r3, [pc, #656]	; (800a3f8 <UART_SetConfig+0x2c0>)
 800a168:	4013      	ands	r3, r2
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	6812      	ldr	r2, [r2, #0]
 800a16e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a170:	430b      	orrs	r3, r1
 800a172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	68da      	ldr	r2, [r3, #12]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	430a      	orrs	r2, r1
 800a188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a99      	ldr	r2, [pc, #612]	; (800a3fc <UART_SetConfig+0x2c4>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d004      	beq.n	800a1a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6a1b      	ldr	r3, [r3, #32]
 800a19e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a90      	ldr	r2, [pc, #576]	; (800a400 <UART_SetConfig+0x2c8>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d126      	bne.n	800a210 <UART_SetConfig+0xd8>
 800a1c2:	4b90      	ldr	r3, [pc, #576]	; (800a404 <UART_SetConfig+0x2cc>)
 800a1c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c8:	f003 0303 	and.w	r3, r3, #3
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	d81b      	bhi.n	800a208 <UART_SetConfig+0xd0>
 800a1d0:	a201      	add	r2, pc, #4	; (adr r2, 800a1d8 <UART_SetConfig+0xa0>)
 800a1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d6:	bf00      	nop
 800a1d8:	0800a1e9 	.word	0x0800a1e9
 800a1dc:	0800a1f9 	.word	0x0800a1f9
 800a1e0:	0800a1f1 	.word	0x0800a1f1
 800a1e4:	0800a201 	.word	0x0800a201
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1ee:	e116      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1f6:	e112      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a1f8:	2304      	movs	r3, #4
 800a1fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1fe:	e10e      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a200:	2308      	movs	r3, #8
 800a202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a206:	e10a      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a208:	2310      	movs	r3, #16
 800a20a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a20e:	e106      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a7c      	ldr	r2, [pc, #496]	; (800a408 <UART_SetConfig+0x2d0>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d138      	bne.n	800a28c <UART_SetConfig+0x154>
 800a21a:	4b7a      	ldr	r3, [pc, #488]	; (800a404 <UART_SetConfig+0x2cc>)
 800a21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a220:	f003 030c 	and.w	r3, r3, #12
 800a224:	2b0c      	cmp	r3, #12
 800a226:	d82d      	bhi.n	800a284 <UART_SetConfig+0x14c>
 800a228:	a201      	add	r2, pc, #4	; (adr r2, 800a230 <UART_SetConfig+0xf8>)
 800a22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22e:	bf00      	nop
 800a230:	0800a265 	.word	0x0800a265
 800a234:	0800a285 	.word	0x0800a285
 800a238:	0800a285 	.word	0x0800a285
 800a23c:	0800a285 	.word	0x0800a285
 800a240:	0800a275 	.word	0x0800a275
 800a244:	0800a285 	.word	0x0800a285
 800a248:	0800a285 	.word	0x0800a285
 800a24c:	0800a285 	.word	0x0800a285
 800a250:	0800a26d 	.word	0x0800a26d
 800a254:	0800a285 	.word	0x0800a285
 800a258:	0800a285 	.word	0x0800a285
 800a25c:	0800a285 	.word	0x0800a285
 800a260:	0800a27d 	.word	0x0800a27d
 800a264:	2300      	movs	r3, #0
 800a266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a26a:	e0d8      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a26c:	2302      	movs	r3, #2
 800a26e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a272:	e0d4      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a274:	2304      	movs	r3, #4
 800a276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a27a:	e0d0      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a27c:	2308      	movs	r3, #8
 800a27e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a282:	e0cc      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a284:	2310      	movs	r3, #16
 800a286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a28a:	e0c8      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a5e      	ldr	r2, [pc, #376]	; (800a40c <UART_SetConfig+0x2d4>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d125      	bne.n	800a2e2 <UART_SetConfig+0x1aa>
 800a296:	4b5b      	ldr	r3, [pc, #364]	; (800a404 <UART_SetConfig+0x2cc>)
 800a298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a29c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a2a0:	2b30      	cmp	r3, #48	; 0x30
 800a2a2:	d016      	beq.n	800a2d2 <UART_SetConfig+0x19a>
 800a2a4:	2b30      	cmp	r3, #48	; 0x30
 800a2a6:	d818      	bhi.n	800a2da <UART_SetConfig+0x1a2>
 800a2a8:	2b20      	cmp	r3, #32
 800a2aa:	d00a      	beq.n	800a2c2 <UART_SetConfig+0x18a>
 800a2ac:	2b20      	cmp	r3, #32
 800a2ae:	d814      	bhi.n	800a2da <UART_SetConfig+0x1a2>
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <UART_SetConfig+0x182>
 800a2b4:	2b10      	cmp	r3, #16
 800a2b6:	d008      	beq.n	800a2ca <UART_SetConfig+0x192>
 800a2b8:	e00f      	b.n	800a2da <UART_SetConfig+0x1a2>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2c0:	e0ad      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2c8:	e0a9      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a2ca:	2304      	movs	r3, #4
 800a2cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2d0:	e0a5      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a2d2:	2308      	movs	r3, #8
 800a2d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2d8:	e0a1      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a2da:	2310      	movs	r3, #16
 800a2dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2e0:	e09d      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a4a      	ldr	r2, [pc, #296]	; (800a410 <UART_SetConfig+0x2d8>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d125      	bne.n	800a338 <UART_SetConfig+0x200>
 800a2ec:	4b45      	ldr	r3, [pc, #276]	; (800a404 <UART_SetConfig+0x2cc>)
 800a2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a2f6:	2bc0      	cmp	r3, #192	; 0xc0
 800a2f8:	d016      	beq.n	800a328 <UART_SetConfig+0x1f0>
 800a2fa:	2bc0      	cmp	r3, #192	; 0xc0
 800a2fc:	d818      	bhi.n	800a330 <UART_SetConfig+0x1f8>
 800a2fe:	2b80      	cmp	r3, #128	; 0x80
 800a300:	d00a      	beq.n	800a318 <UART_SetConfig+0x1e0>
 800a302:	2b80      	cmp	r3, #128	; 0x80
 800a304:	d814      	bhi.n	800a330 <UART_SetConfig+0x1f8>
 800a306:	2b00      	cmp	r3, #0
 800a308:	d002      	beq.n	800a310 <UART_SetConfig+0x1d8>
 800a30a:	2b40      	cmp	r3, #64	; 0x40
 800a30c:	d008      	beq.n	800a320 <UART_SetConfig+0x1e8>
 800a30e:	e00f      	b.n	800a330 <UART_SetConfig+0x1f8>
 800a310:	2300      	movs	r3, #0
 800a312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a316:	e082      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a318:	2302      	movs	r3, #2
 800a31a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a31e:	e07e      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a320:	2304      	movs	r3, #4
 800a322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a326:	e07a      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a328:	2308      	movs	r3, #8
 800a32a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a32e:	e076      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a330:	2310      	movs	r3, #16
 800a332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a336:	e072      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a35      	ldr	r2, [pc, #212]	; (800a414 <UART_SetConfig+0x2dc>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d12a      	bne.n	800a398 <UART_SetConfig+0x260>
 800a342:	4b30      	ldr	r3, [pc, #192]	; (800a404 <UART_SetConfig+0x2cc>)
 800a344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a34c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a350:	d01a      	beq.n	800a388 <UART_SetConfig+0x250>
 800a352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a356:	d81b      	bhi.n	800a390 <UART_SetConfig+0x258>
 800a358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a35c:	d00c      	beq.n	800a378 <UART_SetConfig+0x240>
 800a35e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a362:	d815      	bhi.n	800a390 <UART_SetConfig+0x258>
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <UART_SetConfig+0x238>
 800a368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a36c:	d008      	beq.n	800a380 <UART_SetConfig+0x248>
 800a36e:	e00f      	b.n	800a390 <UART_SetConfig+0x258>
 800a370:	2300      	movs	r3, #0
 800a372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a376:	e052      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a378:	2302      	movs	r3, #2
 800a37a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a37e:	e04e      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a380:	2304      	movs	r3, #4
 800a382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a386:	e04a      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a388:	2308      	movs	r3, #8
 800a38a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a38e:	e046      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a390:	2310      	movs	r3, #16
 800a392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a396:	e042      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a17      	ldr	r2, [pc, #92]	; (800a3fc <UART_SetConfig+0x2c4>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d13a      	bne.n	800a418 <UART_SetConfig+0x2e0>
 800a3a2:	4b18      	ldr	r3, [pc, #96]	; (800a404 <UART_SetConfig+0x2cc>)
 800a3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a3ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3b0:	d01a      	beq.n	800a3e8 <UART_SetConfig+0x2b0>
 800a3b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3b6:	d81b      	bhi.n	800a3f0 <UART_SetConfig+0x2b8>
 800a3b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3bc:	d00c      	beq.n	800a3d8 <UART_SetConfig+0x2a0>
 800a3be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3c2:	d815      	bhi.n	800a3f0 <UART_SetConfig+0x2b8>
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d003      	beq.n	800a3d0 <UART_SetConfig+0x298>
 800a3c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3cc:	d008      	beq.n	800a3e0 <UART_SetConfig+0x2a8>
 800a3ce:	e00f      	b.n	800a3f0 <UART_SetConfig+0x2b8>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3d6:	e022      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a3d8:	2302      	movs	r3, #2
 800a3da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3de:	e01e      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a3e0:	2304      	movs	r3, #4
 800a3e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3e6:	e01a      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a3e8:	2308      	movs	r3, #8
 800a3ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3ee:	e016      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a3f0:	2310      	movs	r3, #16
 800a3f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3f6:	e012      	b.n	800a41e <UART_SetConfig+0x2e6>
 800a3f8:	efff69f3 	.word	0xefff69f3
 800a3fc:	40008000 	.word	0x40008000
 800a400:	40013800 	.word	0x40013800
 800a404:	40021000 	.word	0x40021000
 800a408:	40004400 	.word	0x40004400
 800a40c:	40004800 	.word	0x40004800
 800a410:	40004c00 	.word	0x40004c00
 800a414:	40005000 	.word	0x40005000
 800a418:	2310      	movs	r3, #16
 800a41a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a9f      	ldr	r2, [pc, #636]	; (800a6a0 <UART_SetConfig+0x568>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d17a      	bne.n	800a51e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a428:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a42c:	2b08      	cmp	r3, #8
 800a42e:	d824      	bhi.n	800a47a <UART_SetConfig+0x342>
 800a430:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <UART_SetConfig+0x300>)
 800a432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a436:	bf00      	nop
 800a438:	0800a45d 	.word	0x0800a45d
 800a43c:	0800a47b 	.word	0x0800a47b
 800a440:	0800a465 	.word	0x0800a465
 800a444:	0800a47b 	.word	0x0800a47b
 800a448:	0800a46b 	.word	0x0800a46b
 800a44c:	0800a47b 	.word	0x0800a47b
 800a450:	0800a47b 	.word	0x0800a47b
 800a454:	0800a47b 	.word	0x0800a47b
 800a458:	0800a473 	.word	0x0800a473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a45c:	f7fd fa84 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 800a460:	61f8      	str	r0, [r7, #28]
        break;
 800a462:	e010      	b.n	800a486 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a464:	4b8f      	ldr	r3, [pc, #572]	; (800a6a4 <UART_SetConfig+0x56c>)
 800a466:	61fb      	str	r3, [r7, #28]
        break;
 800a468:	e00d      	b.n	800a486 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a46a:	f7fd f9e5 	bl	8007838 <HAL_RCC_GetSysClockFreq>
 800a46e:	61f8      	str	r0, [r7, #28]
        break;
 800a470:	e009      	b.n	800a486 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a476:	61fb      	str	r3, [r7, #28]
        break;
 800a478:	e005      	b.n	800a486 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a47a:	2300      	movs	r3, #0
 800a47c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a484:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 80fb 	beq.w	800a684 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	4613      	mov	r3, r2
 800a494:	005b      	lsls	r3, r3, #1
 800a496:	4413      	add	r3, r2
 800a498:	69fa      	ldr	r2, [r7, #28]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d305      	bcc.n	800a4aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a4a4:	69fa      	ldr	r2, [r7, #28]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d903      	bls.n	800a4b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a4b0:	e0e8      	b.n	800a684 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	461c      	mov	r4, r3
 800a4b8:	4615      	mov	r5, r2
 800a4ba:	f04f 0200 	mov.w	r2, #0
 800a4be:	f04f 0300 	mov.w	r3, #0
 800a4c2:	022b      	lsls	r3, r5, #8
 800a4c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a4c8:	0222      	lsls	r2, r4, #8
 800a4ca:	68f9      	ldr	r1, [r7, #12]
 800a4cc:	6849      	ldr	r1, [r1, #4]
 800a4ce:	0849      	lsrs	r1, r1, #1
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	4688      	mov	r8, r1
 800a4d4:	4681      	mov	r9, r0
 800a4d6:	eb12 0a08 	adds.w	sl, r2, r8
 800a4da:	eb43 0b09 	adc.w	fp, r3, r9
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	603b      	str	r3, [r7, #0]
 800a4e6:	607a      	str	r2, [r7, #4]
 800a4e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ec:	4650      	mov	r0, sl
 800a4ee:	4659      	mov	r1, fp
 800a4f0:	f7f6 fbca 	bl	8000c88 <__aeabi_uldivmod>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a502:	d308      	bcc.n	800a516 <UART_SetConfig+0x3de>
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a50a:	d204      	bcs.n	800a516 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	69ba      	ldr	r2, [r7, #24]
 800a512:	60da      	str	r2, [r3, #12]
 800a514:	e0b6      	b.n	800a684 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a51c:	e0b2      	b.n	800a684 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	69db      	ldr	r3, [r3, #28]
 800a522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a526:	d15e      	bne.n	800a5e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a528:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a52c:	2b08      	cmp	r3, #8
 800a52e:	d828      	bhi.n	800a582 <UART_SetConfig+0x44a>
 800a530:	a201      	add	r2, pc, #4	; (adr r2, 800a538 <UART_SetConfig+0x400>)
 800a532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a536:	bf00      	nop
 800a538:	0800a55d 	.word	0x0800a55d
 800a53c:	0800a565 	.word	0x0800a565
 800a540:	0800a56d 	.word	0x0800a56d
 800a544:	0800a583 	.word	0x0800a583
 800a548:	0800a573 	.word	0x0800a573
 800a54c:	0800a583 	.word	0x0800a583
 800a550:	0800a583 	.word	0x0800a583
 800a554:	0800a583 	.word	0x0800a583
 800a558:	0800a57b 	.word	0x0800a57b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a55c:	f7fd fa04 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 800a560:	61f8      	str	r0, [r7, #28]
        break;
 800a562:	e014      	b.n	800a58e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a564:	f7fd fa16 	bl	8007994 <HAL_RCC_GetPCLK2Freq>
 800a568:	61f8      	str	r0, [r7, #28]
        break;
 800a56a:	e010      	b.n	800a58e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a56c:	4b4d      	ldr	r3, [pc, #308]	; (800a6a4 <UART_SetConfig+0x56c>)
 800a56e:	61fb      	str	r3, [r7, #28]
        break;
 800a570:	e00d      	b.n	800a58e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a572:	f7fd f961 	bl	8007838 <HAL_RCC_GetSysClockFreq>
 800a576:	61f8      	str	r0, [r7, #28]
        break;
 800a578:	e009      	b.n	800a58e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a57a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a57e:	61fb      	str	r3, [r7, #28]
        break;
 800a580:	e005      	b.n	800a58e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a582:	2300      	movs	r3, #0
 800a584:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a58c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d077      	beq.n	800a684 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	005a      	lsls	r2, r3, #1
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	085b      	lsrs	r3, r3, #1
 800a59e:	441a      	add	r2, r3
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	2b0f      	cmp	r3, #15
 800a5ae:	d916      	bls.n	800a5de <UART_SetConfig+0x4a6>
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5b6:	d212      	bcs.n	800a5de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	f023 030f 	bic.w	r3, r3, #15
 800a5c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	085b      	lsrs	r3, r3, #1
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	f003 0307 	and.w	r3, r3, #7
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	8afb      	ldrh	r3, [r7, #22]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	8afa      	ldrh	r2, [r7, #22]
 800a5da:	60da      	str	r2, [r3, #12]
 800a5dc:	e052      	b.n	800a684 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a5e4:	e04e      	b.n	800a684 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a5e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5ea:	2b08      	cmp	r3, #8
 800a5ec:	d827      	bhi.n	800a63e <UART_SetConfig+0x506>
 800a5ee:	a201      	add	r2, pc, #4	; (adr r2, 800a5f4 <UART_SetConfig+0x4bc>)
 800a5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f4:	0800a619 	.word	0x0800a619
 800a5f8:	0800a621 	.word	0x0800a621
 800a5fc:	0800a629 	.word	0x0800a629
 800a600:	0800a63f 	.word	0x0800a63f
 800a604:	0800a62f 	.word	0x0800a62f
 800a608:	0800a63f 	.word	0x0800a63f
 800a60c:	0800a63f 	.word	0x0800a63f
 800a610:	0800a63f 	.word	0x0800a63f
 800a614:	0800a637 	.word	0x0800a637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a618:	f7fd f9a6 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 800a61c:	61f8      	str	r0, [r7, #28]
        break;
 800a61e:	e014      	b.n	800a64a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a620:	f7fd f9b8 	bl	8007994 <HAL_RCC_GetPCLK2Freq>
 800a624:	61f8      	str	r0, [r7, #28]
        break;
 800a626:	e010      	b.n	800a64a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a628:	4b1e      	ldr	r3, [pc, #120]	; (800a6a4 <UART_SetConfig+0x56c>)
 800a62a:	61fb      	str	r3, [r7, #28]
        break;
 800a62c:	e00d      	b.n	800a64a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a62e:	f7fd f903 	bl	8007838 <HAL_RCC_GetSysClockFreq>
 800a632:	61f8      	str	r0, [r7, #28]
        break;
 800a634:	e009      	b.n	800a64a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a63a:	61fb      	str	r3, [r7, #28]
        break;
 800a63c:	e005      	b.n	800a64a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a63e:	2300      	movs	r3, #0
 800a640:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a648:	bf00      	nop
    }

    if (pclk != 0U)
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d019      	beq.n	800a684 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	085a      	lsrs	r2, r3, #1
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	441a      	add	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a662:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	2b0f      	cmp	r3, #15
 800a668:	d909      	bls.n	800a67e <UART_SetConfig+0x546>
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a670:	d205      	bcs.n	800a67e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	b29a      	uxth	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	60da      	str	r2, [r3, #12]
 800a67c:	e002      	b.n	800a684 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a690:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a694:	4618      	mov	r0, r3
 800a696:	3728      	adds	r7, #40	; 0x28
 800a698:	46bd      	mov	sp, r7
 800a69a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a69e:	bf00      	nop
 800a6a0:	40008000 	.word	0x40008000
 800a6a4:	00f42400 	.word	0x00f42400

0800a6a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b4:	f003 0308 	and.w	r3, r3, #8
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00a      	beq.n	800a6d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	f003 0301 	and.w	r3, r3, #1
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00a      	beq.n	800a6f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	430a      	orrs	r2, r1
 800a6f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f8:	f003 0302 	and.w	r3, r3, #2
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00a      	beq.n	800a716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	430a      	orrs	r2, r1
 800a714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71a:	f003 0304 	and.w	r3, r3, #4
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00a      	beq.n	800a738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	430a      	orrs	r2, r1
 800a736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	f003 0310 	and.w	r3, r3, #16
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00a      	beq.n	800a75a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	f003 0320 	and.w	r3, r3, #32
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00a      	beq.n	800a77c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	430a      	orrs	r2, r1
 800a77a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a784:	2b00      	cmp	r3, #0
 800a786:	d01a      	beq.n	800a7be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	430a      	orrs	r2, r1
 800a79c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7a6:	d10a      	bne.n	800a7be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	430a      	orrs	r2, r1
 800a7bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00a      	beq.n	800a7e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	605a      	str	r2, [r3, #4]
  }
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b098      	sub	sp, #96	; 0x60
 800a7f0:	af02      	add	r7, sp, #8
 800a7f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7fc:	f7f9 f8fc 	bl	80039f8 <HAL_GetTick>
 800a800:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 0308 	and.w	r3, r3, #8
 800a80c:	2b08      	cmp	r3, #8
 800a80e:	d12e      	bne.n	800a86e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a818:	2200      	movs	r2, #0
 800a81a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f88c 	bl	800a93c <UART_WaitOnFlagUntilTimeout>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d021      	beq.n	800a86e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a832:	e853 3f00 	ldrex	r3, [r3]
 800a836:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a83a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a83e:	653b      	str	r3, [r7, #80]	; 0x50
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	461a      	mov	r2, r3
 800a846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a848:	647b      	str	r3, [r7, #68]	; 0x44
 800a84a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a84e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a850:	e841 2300 	strex	r3, r2, [r1]
 800a854:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1e6      	bne.n	800a82a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2220      	movs	r2, #32
 800a860:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e062      	b.n	800a934 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 0304 	and.w	r3, r3, #4
 800a878:	2b04      	cmp	r3, #4
 800a87a:	d149      	bne.n	800a910 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a87c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a884:	2200      	movs	r2, #0
 800a886:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f856 	bl	800a93c <UART_WaitOnFlagUntilTimeout>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d03c      	beq.n	800a910 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89e:	e853 3f00 	ldrex	r3, [r3]
 800a8a2:	623b      	str	r3, [r7, #32]
   return(result);
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8b4:	633b      	str	r3, [r7, #48]	; 0x30
 800a8b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8bc:	e841 2300 	strex	r3, r2, [r1]
 800a8c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d1e6      	bne.n	800a896 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	3308      	adds	r3, #8
 800a8ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	e853 3f00 	ldrex	r3, [r3]
 800a8d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f023 0301 	bic.w	r3, r3, #1
 800a8de:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	3308      	adds	r3, #8
 800a8e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8e8:	61fa      	str	r2, [r7, #28]
 800a8ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ec:	69b9      	ldr	r1, [r7, #24]
 800a8ee:	69fa      	ldr	r2, [r7, #28]
 800a8f0:	e841 2300 	strex	r3, r2, [r1]
 800a8f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1e5      	bne.n	800a8c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2220      	movs	r2, #32
 800a900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a90c:	2303      	movs	r3, #3
 800a90e:	e011      	b.n	800a934 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2220      	movs	r2, #32
 800a914:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2220      	movs	r2, #32
 800a91a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3758      	adds	r7, #88	; 0x58
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	603b      	str	r3, [r7, #0]
 800a948:	4613      	mov	r3, r2
 800a94a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a94c:	e04f      	b.n	800a9ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a954:	d04b      	beq.n	800a9ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a956:	f7f9 f84f 	bl	80039f8 <HAL_GetTick>
 800a95a:	4602      	mov	r2, r0
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	69ba      	ldr	r2, [r7, #24]
 800a962:	429a      	cmp	r2, r3
 800a964:	d302      	bcc.n	800a96c <UART_WaitOnFlagUntilTimeout+0x30>
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d101      	bne.n	800a970 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a96c:	2303      	movs	r3, #3
 800a96e:	e04e      	b.n	800aa0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f003 0304 	and.w	r3, r3, #4
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d037      	beq.n	800a9ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	2b80      	cmp	r3, #128	; 0x80
 800a982:	d034      	beq.n	800a9ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	2b40      	cmp	r3, #64	; 0x40
 800a988:	d031      	beq.n	800a9ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	69db      	ldr	r3, [r3, #28]
 800a990:	f003 0308 	and.w	r3, r3, #8
 800a994:	2b08      	cmp	r3, #8
 800a996:	d110      	bne.n	800a9ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2208      	movs	r2, #8
 800a99e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f000 f8ff 	bl	800aba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2208      	movs	r2, #8
 800a9aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e029      	b.n	800aa0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	69db      	ldr	r3, [r3, #28]
 800a9c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9c8:	d111      	bne.n	800a9ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9d4:	68f8      	ldr	r0, [r7, #12]
 800a9d6:	f000 f8e5 	bl	800aba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	e00f      	b.n	800aa0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	69da      	ldr	r2, [r3, #28]
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	bf0c      	ite	eq
 800a9fe:	2301      	moveq	r3, #1
 800aa00:	2300      	movne	r3, #0
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	461a      	mov	r2, r3
 800aa06:	79fb      	ldrb	r3, [r7, #7]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d0a0      	beq.n	800a94e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
	...

0800aa18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b096      	sub	sp, #88	; 0x58
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	4613      	mov	r3, r2
 800aa24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	88fa      	ldrh	r2, [r7, #6]
 800aa30:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2222      	movs	r2, #34	; 0x22
 800aa40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d028      	beq.n	800aa9e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa50:	4a3e      	ldr	r2, [pc, #248]	; (800ab4c <UART_Start_Receive_DMA+0x134>)
 800aa52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa58:	4a3d      	ldr	r2, [pc, #244]	; (800ab50 <UART_Start_Receive_DMA+0x138>)
 800aa5a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa60:	4a3c      	ldr	r2, [pc, #240]	; (800ab54 <UART_Start_Receive_DMA+0x13c>)
 800aa62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa68:	2200      	movs	r2, #0
 800aa6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3324      	adds	r3, #36	; 0x24
 800aa76:	4619      	mov	r1, r3
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	88fb      	ldrh	r3, [r7, #6]
 800aa80:	f7fa fd44 	bl	800550c <HAL_DMA_Start_IT>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d009      	beq.n	800aa9e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2210      	movs	r2, #16
 800aa8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2220      	movs	r2, #32
 800aa96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e051      	b.n	800ab42 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d018      	beq.n	800aad8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaae:	e853 3f00 	ldrex	r3, [r3]
 800aab2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaba:	657b      	str	r3, [r7, #84]	; 0x54
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	461a      	mov	r2, r3
 800aac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aac4:	64bb      	str	r3, [r7, #72]	; 0x48
 800aac6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aaca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aacc:	e841 2300 	strex	r3, r2, [r1]
 800aad0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1e6      	bne.n	800aaa6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	3308      	adds	r3, #8
 800aade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	e853 3f00 	ldrex	r3, [r3]
 800aae6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	f043 0301 	orr.w	r3, r3, #1
 800aaee:	653b      	str	r3, [r7, #80]	; 0x50
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	3308      	adds	r3, #8
 800aaf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aaf8:	637a      	str	r2, [r7, #52]	; 0x34
 800aafa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aafe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab00:	e841 2300 	strex	r3, r2, [r1]
 800ab04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1e5      	bne.n	800aad8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3308      	adds	r3, #8
 800ab12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	e853 3f00 	ldrex	r3, [r3]
 800ab1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	3308      	adds	r3, #8
 800ab2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab2c:	623a      	str	r2, [r7, #32]
 800ab2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab30:	69f9      	ldr	r1, [r7, #28]
 800ab32:	6a3a      	ldr	r2, [r7, #32]
 800ab34:	e841 2300 	strex	r3, r2, [r1]
 800ab38:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1e5      	bne.n	800ab0c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3758      	adds	r7, #88	; 0x58
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	0800ac6d 	.word	0x0800ac6d
 800ab50:	0800ad99 	.word	0x0800ad99
 800ab54:	0800add7 	.word	0x0800add7

0800ab58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b089      	sub	sp, #36	; 0x24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	e853 3f00 	ldrex	r3, [r3]
 800ab6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ab74:	61fb      	str	r3, [r7, #28]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	61bb      	str	r3, [r7, #24]
 800ab80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab82:	6979      	ldr	r1, [r7, #20]
 800ab84:	69ba      	ldr	r2, [r7, #24]
 800ab86:	e841 2300 	strex	r3, r2, [r1]
 800ab8a:	613b      	str	r3, [r7, #16]
   return(result);
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1e6      	bne.n	800ab60 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2220      	movs	r2, #32
 800ab96:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800ab98:	bf00      	nop
 800ab9a:	3724      	adds	r7, #36	; 0x24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b095      	sub	sp, #84	; 0x54
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb4:	e853 3f00 	ldrex	r3, [r3]
 800abb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800abba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	461a      	mov	r2, r3
 800abc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abca:	643b      	str	r3, [r7, #64]	; 0x40
 800abcc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abd2:	e841 2300 	strex	r3, r2, [r1]
 800abd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1e6      	bne.n	800abac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3308      	adds	r3, #8
 800abe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	e853 3f00 	ldrex	r3, [r3]
 800abec:	61fb      	str	r3, [r7, #28]
   return(result);
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	f023 0301 	bic.w	r3, r3, #1
 800abf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	3308      	adds	r3, #8
 800abfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac06:	e841 2300 	strex	r3, r2, [r1]
 800ac0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1e5      	bne.n	800abde <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d118      	bne.n	800ac4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	e853 3f00 	ldrex	r3, [r3]
 800ac26:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	f023 0310 	bic.w	r3, r3, #16
 800ac2e:	647b      	str	r3, [r7, #68]	; 0x44
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	461a      	mov	r2, r3
 800ac36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac38:	61bb      	str	r3, [r7, #24]
 800ac3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3c:	6979      	ldr	r1, [r7, #20]
 800ac3e:	69ba      	ldr	r2, [r7, #24]
 800ac40:	e841 2300 	strex	r3, r2, [r1]
 800ac44:	613b      	str	r3, [r7, #16]
   return(result);
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1e6      	bne.n	800ac1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2220      	movs	r2, #32
 800ac50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ac60:	bf00      	nop
 800ac62:	3754      	adds	r7, #84	; 0x54
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b09c      	sub	sp, #112	; 0x70
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac78:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 0320 	and.w	r3, r3, #32
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d171      	bne.n	800ad6c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ac88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac98:	e853 3f00 	ldrex	r3, [r3]
 800ac9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aca4:	66bb      	str	r3, [r7, #104]	; 0x68
 800aca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acae:	65bb      	str	r3, [r7, #88]	; 0x58
 800acb0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800acb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acb6:	e841 2300 	strex	r3, r2, [r1]
 800acba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800acbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1e6      	bne.n	800ac90 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3308      	adds	r3, #8
 800acc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800accc:	e853 3f00 	ldrex	r3, [r3]
 800acd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800acd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd4:	f023 0301 	bic.w	r3, r3, #1
 800acd8:	667b      	str	r3, [r7, #100]	; 0x64
 800acda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	3308      	adds	r3, #8
 800ace0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ace2:	647a      	str	r2, [r7, #68]	; 0x44
 800ace4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ace8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acea:	e841 2300 	strex	r3, r2, [r1]
 800acee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800acf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1e5      	bne.n	800acc2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	3308      	adds	r3, #8
 800acfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad00:	e853 3f00 	ldrex	r3, [r3]
 800ad04:	623b      	str	r3, [r7, #32]
   return(result);
 800ad06:	6a3b      	ldr	r3, [r7, #32]
 800ad08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad0c:	663b      	str	r3, [r7, #96]	; 0x60
 800ad0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	3308      	adds	r3, #8
 800ad14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad16:	633a      	str	r2, [r7, #48]	; 0x30
 800ad18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad1e:	e841 2300 	strex	r3, r2, [r1]
 800ad22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1e5      	bne.n	800acf6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad2c:	2220      	movs	r2, #32
 800ad2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d118      	bne.n	800ad6c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	e853 3f00 	ldrex	r3, [r3]
 800ad46:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f023 0310 	bic.w	r3, r3, #16
 800ad4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	461a      	mov	r2, r3
 800ad56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad58:	61fb      	str	r3, [r7, #28]
 800ad5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5c:	69b9      	ldr	r1, [r7, #24]
 800ad5e:	69fa      	ldr	r2, [r7, #28]
 800ad60:	e841 2300 	strex	r3, r2, [r1]
 800ad64:	617b      	str	r3, [r7, #20]
   return(result);
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1e6      	bne.n	800ad3a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad6e:	2200      	movs	r2, #0
 800ad70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d107      	bne.n	800ad8a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ad80:	4619      	mov	r1, r3
 800ad82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ad84:	f7ff f9cc 	bl	800a120 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad88:	e002      	b.n	800ad90 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ad8a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ad8c:	f7f6 fab8 	bl	8001300 <HAL_UART_RxCpltCallback>
}
 800ad90:	bf00      	nop
 800ad92:	3770      	adds	r7, #112	; 0x70
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2201      	movs	r2, #1
 800adaa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d109      	bne.n	800adc8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800adba:	085b      	lsrs	r3, r3, #1
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	4619      	mov	r1, r3
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f7ff f9ad 	bl	800a120 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800adc6:	e002      	b.n	800adce <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f7ff f995 	bl	800a0f8 <HAL_UART_RxHalfCpltCallback>
}
 800adce:	bf00      	nop
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b086      	sub	sp, #24
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ade8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adf0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adfc:	2b80      	cmp	r3, #128	; 0x80
 800adfe:	d109      	bne.n	800ae14 <UART_DMAError+0x3e>
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2b21      	cmp	r3, #33	; 0x21
 800ae04:	d106      	bne.n	800ae14 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ae0e:	6978      	ldr	r0, [r7, #20]
 800ae10:	f7ff fea2 	bl	800ab58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae1e:	2b40      	cmp	r3, #64	; 0x40
 800ae20:	d109      	bne.n	800ae36 <UART_DMAError+0x60>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b22      	cmp	r3, #34	; 0x22
 800ae26:	d106      	bne.n	800ae36 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ae30:	6978      	ldr	r0, [r7, #20]
 800ae32:	f7ff feb7 	bl	800aba4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae3c:	f043 0210 	orr.w	r2, r3, #16
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae46:	6978      	ldr	r0, [r7, #20]
 800ae48:	f7ff f960 	bl	800a10c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae4c:	bf00      	nop
 800ae4e:	3718      	adds	r7, #24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f7ff f94a 	bl	800a10c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae78:	bf00      	nop
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b088      	sub	sp, #32
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	e853 3f00 	ldrex	r3, [r3]
 800ae94:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae9c:	61fb      	str	r3, [r7, #28]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	461a      	mov	r2, r3
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	61bb      	str	r3, [r7, #24]
 800aea8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeaa:	6979      	ldr	r1, [r7, #20]
 800aeac:	69ba      	ldr	r2, [r7, #24]
 800aeae:	e841 2300 	strex	r3, r2, [r1]
 800aeb2:	613b      	str	r3, [r7, #16]
   return(result);
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d1e6      	bne.n	800ae88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2220      	movs	r2, #32
 800aebe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7ff f90c 	bl	800a0e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aecc:	bf00      	nop
 800aece:	3720      	adds	r7, #32
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aedc:	bf00      	nop
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f103 0208 	add.w	r2, r3, #8
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f04f 32ff 	mov.w	r2, #4294967295
 800af00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f103 0208 	add.w	r2, r3, #8
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f103 0208 	add.w	r2, r3, #8
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af36:	bf00      	nop
 800af38:	370c      	adds	r7, #12
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr

0800af42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af42:	b480      	push	{r7}
 800af44:	b085      	sub	sp, #20
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	689a      	ldr	r2, [r3, #8]
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	683a      	ldr	r2, [r7, #0]
 800af66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	601a      	str	r2, [r3, #0]
}
 800af7e:	bf00      	nop
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af8a:	b480      	push	{r7}
 800af8c:	b085      	sub	sp, #20
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa0:	d103      	bne.n	800afaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	60fb      	str	r3, [r7, #12]
 800afa8:	e00c      	b.n	800afc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	3308      	adds	r3, #8
 800afae:	60fb      	str	r3, [r7, #12]
 800afb0:	e002      	b.n	800afb8 <vListInsert+0x2e>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	60fb      	str	r3, [r7, #12]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68ba      	ldr	r2, [r7, #8]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d2f6      	bcs.n	800afb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	685a      	ldr	r2, [r3, #4]
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	683a      	ldr	r2, [r7, #0]
 800afd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	1c5a      	adds	r2, r3, #1
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	601a      	str	r2, [r3, #0]
}
 800aff0:	bf00      	nop
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	6892      	ldr	r2, [r2, #8]
 800b012:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	6852      	ldr	r2, [r2, #4]
 800b01c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	429a      	cmp	r2, r3
 800b026:	d103      	bne.n	800b030 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	689a      	ldr	r2, [r3, #8]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	1e5a      	subs	r2, r3, #1
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10a      	bne.n	800b07a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b068:	f383 8811 	msr	BASEPRI, r3
 800b06c:	f3bf 8f6f 	isb	sy
 800b070:	f3bf 8f4f 	dsb	sy
 800b074:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b076:	bf00      	nop
 800b078:	e7fe      	b.n	800b078 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b07a:	f001 fedb 	bl	800ce34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b086:	68f9      	ldr	r1, [r7, #12]
 800b088:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b08a:	fb01 f303 	mul.w	r3, r1, r3
 800b08e:	441a      	add	r2, r3
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	68f9      	ldr	r1, [r7, #12]
 800b0ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b0b0:	fb01 f303 	mul.w	r3, r1, r3
 800b0b4:	441a      	add	r2, r3
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	22ff      	movs	r2, #255	; 0xff
 800b0be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	22ff      	movs	r2, #255	; 0xff
 800b0c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d114      	bne.n	800b0fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d01a      	beq.n	800b10e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	3310      	adds	r3, #16
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f001 f961 	bl	800c3a4 <xTaskRemoveFromEventList>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d012      	beq.n	800b10e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b0e8:	4b0c      	ldr	r3, [pc, #48]	; (800b11c <xQueueGenericReset+0xcc>)
 800b0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ee:	601a      	str	r2, [r3, #0]
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	e009      	b.n	800b10e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3310      	adds	r3, #16
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff fef2 	bl	800aee8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	3324      	adds	r3, #36	; 0x24
 800b108:	4618      	mov	r0, r3
 800b10a:	f7ff feed 	bl	800aee8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b10e:	f001 fec1 	bl	800ce94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b112:	2301      	movs	r3, #1
}
 800b114:	4618      	mov	r0, r3
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	e000ed04 	.word	0xe000ed04

0800b120 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b120:	b580      	push	{r7, lr}
 800b122:	b08a      	sub	sp, #40	; 0x28
 800b124:	af02      	add	r7, sp, #8
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	4613      	mov	r3, r2
 800b12c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d10a      	bne.n	800b14a <xQueueGenericCreate+0x2a>
	__asm volatile
 800b134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b138:	f383 8811 	msr	BASEPRI, r3
 800b13c:	f3bf 8f6f 	isb	sy
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	613b      	str	r3, [r7, #16]
}
 800b146:	bf00      	nop
 800b148:	e7fe      	b.n	800b148 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	fb02 f303 	mul.w	r3, r2, r3
 800b152:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	3348      	adds	r3, #72	; 0x48
 800b158:	4618      	mov	r0, r3
 800b15a:	f001 ff8d 	bl	800d078 <pvPortMalloc>
 800b15e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d011      	beq.n	800b18a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	3348      	adds	r3, #72	; 0x48
 800b16e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b178:	79fa      	ldrb	r2, [r7, #7]
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	4613      	mov	r3, r2
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	68b9      	ldr	r1, [r7, #8]
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f000 f805 	bl	800b194 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b18a:	69bb      	ldr	r3, [r7, #24]
	}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3720      	adds	r7, #32
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
 800b1a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d103      	bne.n	800b1b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	e002      	b.n	800b1b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b1c2:	2101      	movs	r1, #1
 800b1c4:	69b8      	ldr	r0, [r7, #24]
 800b1c6:	f7ff ff43 	bl	800b050 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b1ca:	bf00      	nop
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
	...

0800b1d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b08e      	sub	sp, #56	; 0x38
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	607a      	str	r2, [r7, #4]
 800b1e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10a      	bne.n	800b206 <xQueueGenericSend+0x32>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b202:	bf00      	nop
 800b204:	e7fe      	b.n	800b204 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d103      	bne.n	800b214 <xQueueGenericSend+0x40>
 800b20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b210:	2b00      	cmp	r3, #0
 800b212:	d101      	bne.n	800b218 <xQueueGenericSend+0x44>
 800b214:	2301      	movs	r3, #1
 800b216:	e000      	b.n	800b21a <xQueueGenericSend+0x46>
 800b218:	2300      	movs	r3, #0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10a      	bne.n	800b234 <xQueueGenericSend+0x60>
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b230:	bf00      	nop
 800b232:	e7fe      	b.n	800b232 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	2b02      	cmp	r3, #2
 800b238:	d103      	bne.n	800b242 <xQueueGenericSend+0x6e>
 800b23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d101      	bne.n	800b246 <xQueueGenericSend+0x72>
 800b242:	2301      	movs	r3, #1
 800b244:	e000      	b.n	800b248 <xQueueGenericSend+0x74>
 800b246:	2300      	movs	r3, #0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10a      	bne.n	800b262 <xQueueGenericSend+0x8e>
	__asm volatile
 800b24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b250:	f383 8811 	msr	BASEPRI, r3
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	623b      	str	r3, [r7, #32]
}
 800b25e:	bf00      	nop
 800b260:	e7fe      	b.n	800b260 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b262:	f001 fa97 	bl	800c794 <xTaskGetSchedulerState>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d102      	bne.n	800b272 <xQueueGenericSend+0x9e>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <xQueueGenericSend+0xa2>
 800b272:	2301      	movs	r3, #1
 800b274:	e000      	b.n	800b278 <xQueueGenericSend+0xa4>
 800b276:	2300      	movs	r3, #0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10a      	bne.n	800b292 <xQueueGenericSend+0xbe>
	__asm volatile
 800b27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b280:	f383 8811 	msr	BASEPRI, r3
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	61fb      	str	r3, [r7, #28]
}
 800b28e:	bf00      	nop
 800b290:	e7fe      	b.n	800b290 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b292:	f001 fdcf 	bl	800ce34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d302      	bcc.n	800b2a8 <xQueueGenericSend+0xd4>
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	d129      	bne.n	800b2fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	68b9      	ldr	r1, [r7, #8]
 800b2ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2ae:	f000 fb21 	bl	800b8f4 <prvCopyDataToQueue>
 800b2b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d010      	beq.n	800b2de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2be:	3324      	adds	r3, #36	; 0x24
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f001 f86f 	bl	800c3a4 <xTaskRemoveFromEventList>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d013      	beq.n	800b2f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b2cc:	4b3f      	ldr	r3, [pc, #252]	; (800b3cc <xQueueGenericSend+0x1f8>)
 800b2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	f3bf 8f4f 	dsb	sy
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	e00a      	b.n	800b2f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d007      	beq.n	800b2f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b2e4:	4b39      	ldr	r3, [pc, #228]	; (800b3cc <xQueueGenericSend+0x1f8>)
 800b2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2ea:	601a      	str	r2, [r3, #0]
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b2f4:	f001 fdce 	bl	800ce94 <vPortExitCritical>
				return pdPASS;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e063      	b.n	800b3c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d103      	bne.n	800b30a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b302:	f001 fdc7 	bl	800ce94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b306:	2300      	movs	r3, #0
 800b308:	e05c      	b.n	800b3c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d106      	bne.n	800b31e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b310:	f107 0314 	add.w	r3, r7, #20
 800b314:	4618      	mov	r0, r3
 800b316:	f001 f8a7 	bl	800c468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b31a:	2301      	movs	r3, #1
 800b31c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b31e:	f001 fdb9 	bl	800ce94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b322:	f000 fe47 	bl	800bfb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b326:	f001 fd85 	bl	800ce34 <vPortEnterCritical>
 800b32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b330:	b25b      	sxtb	r3, r3
 800b332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b336:	d103      	bne.n	800b340 <xQueueGenericSend+0x16c>
 800b338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b342:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b346:	b25b      	sxtb	r3, r3
 800b348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34c:	d103      	bne.n	800b356 <xQueueGenericSend+0x182>
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	2200      	movs	r2, #0
 800b352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b356:	f001 fd9d 	bl	800ce94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b35a:	1d3a      	adds	r2, r7, #4
 800b35c:	f107 0314 	add.w	r3, r7, #20
 800b360:	4611      	mov	r1, r2
 800b362:	4618      	mov	r0, r3
 800b364:	f001 f896 	bl	800c494 <xTaskCheckForTimeOut>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d124      	bne.n	800b3b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b36e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b370:	f000 fbb8 	bl	800bae4 <prvIsQueueFull>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d018      	beq.n	800b3ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37c:	3310      	adds	r3, #16
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	4611      	mov	r1, r2
 800b382:	4618      	mov	r0, r3
 800b384:	f000 ffea 	bl	800c35c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b38a:	f000 fb43 	bl	800ba14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b38e:	f000 fe1f 	bl	800bfd0 <xTaskResumeAll>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	f47f af7c 	bne.w	800b292 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b39a:	4b0c      	ldr	r3, [pc, #48]	; (800b3cc <xQueueGenericSend+0x1f8>)
 800b39c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3a0:	601a      	str	r2, [r3, #0]
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	e772      	b.n	800b292 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b3ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3ae:	f000 fb31 	bl	800ba14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3b2:	f000 fe0d 	bl	800bfd0 <xTaskResumeAll>
 800b3b6:	e76c      	b.n	800b292 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b3b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3ba:	f000 fb2b 	bl	800ba14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3be:	f000 fe07 	bl	800bfd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b3c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3738      	adds	r7, #56	; 0x38
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	e000ed04 	.word	0xe000ed04

0800b3d0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b08e      	sub	sp, #56	; 0x38
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d10a      	bne.n	800b3fa <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e8:	f383 8811 	msr	BASEPRI, r3
 800b3ec:	f3bf 8f6f 	isb	sy
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	623b      	str	r3, [r7, #32]
}
 800b3f6:	bf00      	nop
 800b3f8:	e7fe      	b.n	800b3f8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00a      	beq.n	800b418 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	61fb      	str	r3, [r7, #28]
}
 800b414:	bf00      	nop
 800b416:	e7fe      	b.n	800b416 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d103      	bne.n	800b428 <xQueueGiveFromISR+0x58>
 800b420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d101      	bne.n	800b42c <xQueueGiveFromISR+0x5c>
 800b428:	2301      	movs	r3, #1
 800b42a:	e000      	b.n	800b42e <xQueueGiveFromISR+0x5e>
 800b42c:	2300      	movs	r3, #0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d10a      	bne.n	800b448 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b436:	f383 8811 	msr	BASEPRI, r3
 800b43a:	f3bf 8f6f 	isb	sy
 800b43e:	f3bf 8f4f 	dsb	sy
 800b442:	61bb      	str	r3, [r7, #24]
}
 800b444:	bf00      	nop
 800b446:	e7fe      	b.n	800b446 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b448:	f001 fdd6 	bl	800cff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b44c:	f3ef 8211 	mrs	r2, BASEPRI
 800b450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	617a      	str	r2, [r7, #20]
 800b462:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b464:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b466:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b474:	429a      	cmp	r2, r3
 800b476:	d22b      	bcs.n	800b4d0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b47e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b484:	1c5a      	adds	r2, r3, #1
 800b486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b488:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b48a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b492:	d112      	bne.n	800b4ba <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d016      	beq.n	800b4ca <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	3324      	adds	r3, #36	; 0x24
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f000 ff7f 	bl	800c3a4 <xTaskRemoveFromEventList>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d00e      	beq.n	800b4ca <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00b      	beq.n	800b4ca <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	601a      	str	r2, [r3, #0]
 800b4b8:	e007      	b.n	800b4ca <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b4ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4be:	3301      	adds	r3, #1
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	b25a      	sxtb	r2, r3
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b4ce:	e001      	b.n	800b4d4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	637b      	str	r3, [r7, #52]	; 0x34
 800b4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b4de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3738      	adds	r7, #56	; 0x38
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
	...

0800b4ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b08c      	sub	sp, #48	; 0x30
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b502:	2b00      	cmp	r3, #0
 800b504:	d10a      	bne.n	800b51c <xQueueReceive+0x30>
	__asm volatile
 800b506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50a:	f383 8811 	msr	BASEPRI, r3
 800b50e:	f3bf 8f6f 	isb	sy
 800b512:	f3bf 8f4f 	dsb	sy
 800b516:	623b      	str	r3, [r7, #32]
}
 800b518:	bf00      	nop
 800b51a:	e7fe      	b.n	800b51a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d103      	bne.n	800b52a <xQueueReceive+0x3e>
 800b522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b526:	2b00      	cmp	r3, #0
 800b528:	d101      	bne.n	800b52e <xQueueReceive+0x42>
 800b52a:	2301      	movs	r3, #1
 800b52c:	e000      	b.n	800b530 <xQueueReceive+0x44>
 800b52e:	2300      	movs	r3, #0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d10a      	bne.n	800b54a <xQueueReceive+0x5e>
	__asm volatile
 800b534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	61fb      	str	r3, [r7, #28]
}
 800b546:	bf00      	nop
 800b548:	e7fe      	b.n	800b548 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b54a:	f001 f923 	bl	800c794 <xTaskGetSchedulerState>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d102      	bne.n	800b55a <xQueueReceive+0x6e>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d101      	bne.n	800b55e <xQueueReceive+0x72>
 800b55a:	2301      	movs	r3, #1
 800b55c:	e000      	b.n	800b560 <xQueueReceive+0x74>
 800b55e:	2300      	movs	r3, #0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10a      	bne.n	800b57a <xQueueReceive+0x8e>
	__asm volatile
 800b564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	61bb      	str	r3, [r7, #24]
}
 800b576:	bf00      	nop
 800b578:	e7fe      	b.n	800b578 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b57a:	f001 fc5b 	bl	800ce34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b582:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b586:	2b00      	cmp	r3, #0
 800b588:	d01f      	beq.n	800b5ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b58a:	68b9      	ldr	r1, [r7, #8]
 800b58c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b58e:	f000 fa1b 	bl	800b9c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b594:	1e5a      	subs	r2, r3, #1
 800b596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b598:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00f      	beq.n	800b5c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a4:	3310      	adds	r3, #16
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 fefc 	bl	800c3a4 <xTaskRemoveFromEventList>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d007      	beq.n	800b5c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b5b2:	4b3d      	ldr	r3, [pc, #244]	; (800b6a8 <xQueueReceive+0x1bc>)
 800b5b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5b8:	601a      	str	r2, [r3, #0]
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b5c2:	f001 fc67 	bl	800ce94 <vPortExitCritical>
				return pdPASS;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e069      	b.n	800b69e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d103      	bne.n	800b5d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b5d0:	f001 fc60 	bl	800ce94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	e062      	b.n	800b69e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d106      	bne.n	800b5ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5de:	f107 0310 	add.w	r3, r7, #16
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f000 ff40 	bl	800c468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5ec:	f001 fc52 	bl	800ce94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5f0:	f000 fce0 	bl	800bfb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5f4:	f001 fc1e 	bl	800ce34 <vPortEnterCritical>
 800b5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5fe:	b25b      	sxtb	r3, r3
 800b600:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b604:	d103      	bne.n	800b60e <xQueueReceive+0x122>
 800b606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b608:	2200      	movs	r2, #0
 800b60a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b614:	b25b      	sxtb	r3, r3
 800b616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b61a:	d103      	bne.n	800b624 <xQueueReceive+0x138>
 800b61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61e:	2200      	movs	r2, #0
 800b620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b624:	f001 fc36 	bl	800ce94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b628:	1d3a      	adds	r2, r7, #4
 800b62a:	f107 0310 	add.w	r3, r7, #16
 800b62e:	4611      	mov	r1, r2
 800b630:	4618      	mov	r0, r3
 800b632:	f000 ff2f 	bl	800c494 <xTaskCheckForTimeOut>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d123      	bne.n	800b684 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b63c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b63e:	f000 fa3b 	bl	800bab8 <prvIsQueueEmpty>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d017      	beq.n	800b678 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64a:	3324      	adds	r3, #36	; 0x24
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	4611      	mov	r1, r2
 800b650:	4618      	mov	r0, r3
 800b652:	f000 fe83 	bl	800c35c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b658:	f000 f9dc 	bl	800ba14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b65c:	f000 fcb8 	bl	800bfd0 <xTaskResumeAll>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d189      	bne.n	800b57a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b666:	4b10      	ldr	r3, [pc, #64]	; (800b6a8 <xQueueReceive+0x1bc>)
 800b668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	e780      	b.n	800b57a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b67a:	f000 f9cb 	bl	800ba14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b67e:	f000 fca7 	bl	800bfd0 <xTaskResumeAll>
 800b682:	e77a      	b.n	800b57a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b686:	f000 f9c5 	bl	800ba14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b68a:	f000 fca1 	bl	800bfd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b68e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b690:	f000 fa12 	bl	800bab8 <prvIsQueueEmpty>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	f43f af6f 	beq.w	800b57a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b69c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3730      	adds	r7, #48	; 0x30
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	e000ed04 	.word	0xe000ed04

0800b6ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b08e      	sub	sp, #56	; 0x38
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d10a      	bne.n	800b6de <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6cc:	f383 8811 	msr	BASEPRI, r3
 800b6d0:	f3bf 8f6f 	isb	sy
 800b6d4:	f3bf 8f4f 	dsb	sy
 800b6d8:	623b      	str	r3, [r7, #32]
}
 800b6da:	bf00      	nop
 800b6dc:	e7fe      	b.n	800b6dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00a      	beq.n	800b6fc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ea:	f383 8811 	msr	BASEPRI, r3
 800b6ee:	f3bf 8f6f 	isb	sy
 800b6f2:	f3bf 8f4f 	dsb	sy
 800b6f6:	61fb      	str	r3, [r7, #28]
}
 800b6f8:	bf00      	nop
 800b6fa:	e7fe      	b.n	800b6fa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b6fc:	f001 f84a 	bl	800c794 <xTaskGetSchedulerState>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d102      	bne.n	800b70c <xQueueSemaphoreTake+0x60>
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d101      	bne.n	800b710 <xQueueSemaphoreTake+0x64>
 800b70c:	2301      	movs	r3, #1
 800b70e:	e000      	b.n	800b712 <xQueueSemaphoreTake+0x66>
 800b710:	2300      	movs	r3, #0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10a      	bne.n	800b72c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71a:	f383 8811 	msr	BASEPRI, r3
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	61bb      	str	r3, [r7, #24]
}
 800b728:	bf00      	nop
 800b72a:	e7fe      	b.n	800b72a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b72c:	f001 fb82 	bl	800ce34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b734:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d024      	beq.n	800b786 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	1e5a      	subs	r2, r3, #1
 800b740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b742:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d104      	bne.n	800b756 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b74c:	f001 f9ca 	bl	800cae4 <pvTaskIncrementMutexHeldCount>
 800b750:	4602      	mov	r2, r0
 800b752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b754:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00f      	beq.n	800b77e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b760:	3310      	adds	r3, #16
 800b762:	4618      	mov	r0, r3
 800b764:	f000 fe1e 	bl	800c3a4 <xTaskRemoveFromEventList>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d007      	beq.n	800b77e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b76e:	4b54      	ldr	r3, [pc, #336]	; (800b8c0 <xQueueSemaphoreTake+0x214>)
 800b770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b774:	601a      	str	r2, [r3, #0]
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b77e:	f001 fb89 	bl	800ce94 <vPortExitCritical>
				return pdPASS;
 800b782:	2301      	movs	r3, #1
 800b784:	e097      	b.n	800b8b6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d111      	bne.n	800b7b0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00a      	beq.n	800b7a8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	617b      	str	r3, [r7, #20]
}
 800b7a4:	bf00      	nop
 800b7a6:	e7fe      	b.n	800b7a6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b7a8:	f001 fb74 	bl	800ce94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	e082      	b.n	800b8b6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d106      	bne.n	800b7c4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7b6:	f107 030c 	add.w	r3, r7, #12
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 fe54 	bl	800c468 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7c4:	f001 fb66 	bl	800ce94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7c8:	f000 fbf4 	bl	800bfb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7cc:	f001 fb32 	bl	800ce34 <vPortEnterCritical>
 800b7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7d6:	b25b      	sxtb	r3, r3
 800b7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7dc:	d103      	bne.n	800b7e6 <xQueueSemaphoreTake+0x13a>
 800b7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7ec:	b25b      	sxtb	r3, r3
 800b7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f2:	d103      	bne.n	800b7fc <xQueueSemaphoreTake+0x150>
 800b7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7fc:	f001 fb4a 	bl	800ce94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b800:	463a      	mov	r2, r7
 800b802:	f107 030c 	add.w	r3, r7, #12
 800b806:	4611      	mov	r1, r2
 800b808:	4618      	mov	r0, r3
 800b80a:	f000 fe43 	bl	800c494 <xTaskCheckForTimeOut>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d132      	bne.n	800b87a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b816:	f000 f94f 	bl	800bab8 <prvIsQueueEmpty>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d026      	beq.n	800b86e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d109      	bne.n	800b83c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b828:	f001 fb04 	bl	800ce34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	4618      	mov	r0, r3
 800b832:	f000 ffcd 	bl	800c7d0 <xTaskPriorityInherit>
 800b836:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b838:	f001 fb2c 	bl	800ce94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83e:	3324      	adds	r3, #36	; 0x24
 800b840:	683a      	ldr	r2, [r7, #0]
 800b842:	4611      	mov	r1, r2
 800b844:	4618      	mov	r0, r3
 800b846:	f000 fd89 	bl	800c35c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b84a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b84c:	f000 f8e2 	bl	800ba14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b850:	f000 fbbe 	bl	800bfd0 <xTaskResumeAll>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	f47f af68 	bne.w	800b72c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b85c:	4b18      	ldr	r3, [pc, #96]	; (800b8c0 <xQueueSemaphoreTake+0x214>)
 800b85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	f3bf 8f6f 	isb	sy
 800b86c:	e75e      	b.n	800b72c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b86e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b870:	f000 f8d0 	bl	800ba14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b874:	f000 fbac 	bl	800bfd0 <xTaskResumeAll>
 800b878:	e758      	b.n	800b72c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b87a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b87c:	f000 f8ca 	bl	800ba14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b880:	f000 fba6 	bl	800bfd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b884:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b886:	f000 f917 	bl	800bab8 <prvIsQueueEmpty>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f43f af4d 	beq.w	800b72c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00d      	beq.n	800b8b4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b898:	f001 facc 	bl	800ce34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b89c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b89e:	f000 f811 	bl	800b8c4 <prvGetDisinheritPriorityAfterTimeout>
 800b8a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f001 f88c 	bl	800c9c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b8b0:	f001 faf0 	bl	800ce94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b8b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3738      	adds	r7, #56	; 0x38
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	e000ed04 	.word	0xe000ed04

0800b8c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d006      	beq.n	800b8e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f1c3 0307 	rsb	r3, r3, #7
 800b8de:	60fb      	str	r3, [r7, #12]
 800b8e0:	e001      	b.n	800b8e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
	}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3714      	adds	r7, #20
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b900:	2300      	movs	r3, #0
 800b902:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b908:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d10d      	bne.n	800b92e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d14d      	bne.n	800b9b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	4618      	mov	r0, r3
 800b920:	f000 ffcc 	bl	800c8bc <xTaskPriorityDisinherit>
 800b924:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	609a      	str	r2, [r3, #8]
 800b92c:	e043      	b.n	800b9b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d119      	bne.n	800b968 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6858      	ldr	r0, [r3, #4]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93c:	461a      	mov	r2, r3
 800b93e:	68b9      	ldr	r1, [r7, #8]
 800b940:	f002 fe41 	bl	800e5c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	685a      	ldr	r2, [r3, #4]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b94c:	441a      	add	r2, r3
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	685a      	ldr	r2, [r3, #4]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d32b      	bcc.n	800b9b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	605a      	str	r2, [r3, #4]
 800b966:	e026      	b.n	800b9b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	68d8      	ldr	r0, [r3, #12]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b970:	461a      	mov	r2, r3
 800b972:	68b9      	ldr	r1, [r7, #8]
 800b974:	f002 fe27 	bl	800e5c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	68da      	ldr	r2, [r3, #12]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b980:	425b      	negs	r3, r3
 800b982:	441a      	add	r2, r3
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	68da      	ldr	r2, [r3, #12]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	429a      	cmp	r2, r3
 800b992:	d207      	bcs.n	800b9a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	689a      	ldr	r2, [r3, #8]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b99c:	425b      	negs	r3, r3
 800b99e:	441a      	add	r2, r3
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2b02      	cmp	r3, #2
 800b9a8:	d105      	bne.n	800b9b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	1c5a      	adds	r2, r3, #1
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b9be:	697b      	ldr	r3, [r7, #20]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3718      	adds	r7, #24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d018      	beq.n	800ba0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	68da      	ldr	r2, [r3, #12]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e2:	441a      	add	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	68da      	ldr	r2, [r3, #12]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d303      	bcc.n	800b9fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	68d9      	ldr	r1, [r3, #12]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba04:	461a      	mov	r2, r3
 800ba06:	6838      	ldr	r0, [r7, #0]
 800ba08:	f002 fddd 	bl	800e5c6 <memcpy>
	}
}
 800ba0c:	bf00      	nop
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ba1c:	f001 fa0a 	bl	800ce34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba28:	e011      	b.n	800ba4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d012      	beq.n	800ba58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	3324      	adds	r3, #36	; 0x24
 800ba36:	4618      	mov	r0, r3
 800ba38:	f000 fcb4 	bl	800c3a4 <xTaskRemoveFromEventList>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d001      	beq.n	800ba46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ba42:	f000 fd89 	bl	800c558 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ba46:	7bfb      	ldrb	r3, [r7, #15]
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	dce9      	bgt.n	800ba2a <prvUnlockQueue+0x16>
 800ba56:	e000      	b.n	800ba5a <prvUnlockQueue+0x46>
					break;
 800ba58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	22ff      	movs	r2, #255	; 0xff
 800ba5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ba62:	f001 fa17 	bl	800ce94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ba66:	f001 f9e5 	bl	800ce34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba72:	e011      	b.n	800ba98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	691b      	ldr	r3, [r3, #16]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d012      	beq.n	800baa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	3310      	adds	r3, #16
 800ba80:	4618      	mov	r0, r3
 800ba82:	f000 fc8f 	bl	800c3a4 <xTaskRemoveFromEventList>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ba8c:	f000 fd64 	bl	800c558 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ba90:	7bbb      	ldrb	r3, [r7, #14]
 800ba92:	3b01      	subs	r3, #1
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	dce9      	bgt.n	800ba74 <prvUnlockQueue+0x60>
 800baa0:	e000      	b.n	800baa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800baa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	22ff      	movs	r2, #255	; 0xff
 800baa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800baac:	f001 f9f2 	bl	800ce94 <vPortExitCritical>
}
 800bab0:	bf00      	nop
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bac0:	f001 f9b8 	bl	800ce34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d102      	bne.n	800bad2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bacc:	2301      	movs	r3, #1
 800bace:	60fb      	str	r3, [r7, #12]
 800bad0:	e001      	b.n	800bad6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bad2:	2300      	movs	r3, #0
 800bad4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bad6:	f001 f9dd 	bl	800ce94 <vPortExitCritical>

	return xReturn;
 800bada:	68fb      	ldr	r3, [r7, #12]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800baec:	f001 f9a2 	bl	800ce34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d102      	bne.n	800bb02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bafc:	2301      	movs	r3, #1
 800bafe:	60fb      	str	r3, [r7, #12]
 800bb00:	e001      	b.n	800bb06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bb02:	2300      	movs	r3, #0
 800bb04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb06:	f001 f9c5 	bl	800ce94 <vPortExitCritical>

	return xReturn;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3710      	adds	r7, #16
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b08e      	sub	sp, #56	; 0x38
 800bb18:	af04      	add	r7, sp, #16
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
 800bb20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10a      	bne.n	800bb3e <xTaskCreateStatic+0x2a>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	623b      	str	r3, [r7, #32]
}
 800bb3a:	bf00      	nop
 800bb3c:	e7fe      	b.n	800bb3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10a      	bne.n	800bb5a <xTaskCreateStatic+0x46>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb48:	f383 8811 	msr	BASEPRI, r3
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	61fb      	str	r3, [r7, #28]
}
 800bb56:	bf00      	nop
 800bb58:	e7fe      	b.n	800bb58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bb5a:	23a0      	movs	r3, #160	; 0xa0
 800bb5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	2ba0      	cmp	r3, #160	; 0xa0
 800bb62:	d00a      	beq.n	800bb7a <xTaskCreateStatic+0x66>
	__asm volatile
 800bb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb68:	f383 8811 	msr	BASEPRI, r3
 800bb6c:	f3bf 8f6f 	isb	sy
 800bb70:	f3bf 8f4f 	dsb	sy
 800bb74:	61bb      	str	r3, [r7, #24]
}
 800bb76:	bf00      	nop
 800bb78:	e7fe      	b.n	800bb78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bb7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d01e      	beq.n	800bbc0 <xTaskCreateStatic+0xac>
 800bb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d01b      	beq.n	800bbc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	2202      	movs	r2, #2
 800bb96:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	9303      	str	r3, [sp, #12]
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba0:	9302      	str	r3, [sp, #8]
 800bba2:	f107 0314 	add.w	r3, r7, #20
 800bba6:	9301      	str	r3, [sp, #4]
 800bba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	68b9      	ldr	r1, [r7, #8]
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f000 f850 	bl	800bc58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bbb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbba:	f000 f8f3 	bl	800bda4 <prvAddNewTaskToReadyList>
 800bbbe:	e001      	b.n	800bbc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bbc4:	697b      	ldr	r3, [r7, #20]
	}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3728      	adds	r7, #40	; 0x28
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b08c      	sub	sp, #48	; 0x30
 800bbd2:	af04      	add	r7, sp, #16
 800bbd4:	60f8      	str	r0, [r7, #12]
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	603b      	str	r3, [r7, #0]
 800bbda:	4613      	mov	r3, r2
 800bbdc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bbde:	88fb      	ldrh	r3, [r7, #6]
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f001 fa48 	bl	800d078 <pvPortMalloc>
 800bbe8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d00e      	beq.n	800bc0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bbf0:	20a0      	movs	r0, #160	; 0xa0
 800bbf2:	f001 fa41 	bl	800d078 <pvPortMalloc>
 800bbf6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bbf8:	69fb      	ldr	r3, [r7, #28]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d003      	beq.n	800bc06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	697a      	ldr	r2, [r7, #20]
 800bc02:	631a      	str	r2, [r3, #48]	; 0x30
 800bc04:	e005      	b.n	800bc12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc06:	6978      	ldr	r0, [r7, #20]
 800bc08:	f001 fb02 	bl	800d210 <vPortFree>
 800bc0c:	e001      	b.n	800bc12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc12:	69fb      	ldr	r3, [r7, #28]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d017      	beq.n	800bc48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc20:	88fa      	ldrh	r2, [r7, #6]
 800bc22:	2300      	movs	r3, #0
 800bc24:	9303      	str	r3, [sp, #12]
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	9302      	str	r3, [sp, #8]
 800bc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2c:	9301      	str	r3, [sp, #4]
 800bc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	68b9      	ldr	r1, [r7, #8]
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f000 f80e 	bl	800bc58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc3c:	69f8      	ldr	r0, [r7, #28]
 800bc3e:	f000 f8b1 	bl	800bda4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc42:	2301      	movs	r3, #1
 800bc44:	61bb      	str	r3, [r7, #24]
 800bc46:	e002      	b.n	800bc4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc48:	f04f 33ff 	mov.w	r3, #4294967295
 800bc4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc4e:	69bb      	ldr	r3, [r7, #24]
	}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3720      	adds	r7, #32
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b088      	sub	sp, #32
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	607a      	str	r2, [r7, #4]
 800bc64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	461a      	mov	r2, r3
 800bc70:	21a5      	movs	r1, #165	; 0xa5
 800bc72:	f002 fbb4 	bl	800e3de <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bc80:	3b01      	subs	r3, #1
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	4413      	add	r3, r2
 800bc86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	f023 0307 	bic.w	r3, r3, #7
 800bc8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	f003 0307 	and.w	r3, r3, #7
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00a      	beq.n	800bcb0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	617b      	str	r3, [r7, #20]
}
 800bcac:	bf00      	nop
 800bcae:	e7fe      	b.n	800bcae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d01f      	beq.n	800bcf6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	61fb      	str	r3, [r7, #28]
 800bcba:	e012      	b.n	800bce2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	7819      	ldrb	r1, [r3, #0]
 800bcc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	4413      	add	r3, r2
 800bcca:	3334      	adds	r3, #52	; 0x34
 800bccc:	460a      	mov	r2, r1
 800bcce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bcd0:	68ba      	ldr	r2, [r7, #8]
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d006      	beq.n	800bcea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	3301      	adds	r3, #1
 800bce0:	61fb      	str	r3, [r7, #28]
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	2b0f      	cmp	r3, #15
 800bce6:	d9e9      	bls.n	800bcbc <prvInitialiseNewTask+0x64>
 800bce8:	e000      	b.n	800bcec <prvInitialiseNewTask+0x94>
			{
				break;
 800bcea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bcf4:	e003      	b.n	800bcfe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	2b06      	cmp	r3, #6
 800bd02:	d901      	bls.n	800bd08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd04:	2306      	movs	r3, #6
 800bd06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd12:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd16:	2200      	movs	r2, #0
 800bd18:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1c:	3304      	adds	r3, #4
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7ff f902 	bl	800af28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd26:	3318      	adds	r3, #24
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7ff f8fd 	bl	800af28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd36:	f1c3 0207 	rsb	r2, r3, #7
 800bd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd46:	2200      	movs	r2, #0
 800bd48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd56:	334c      	adds	r3, #76	; 0x4c
 800bd58:	224c      	movs	r2, #76	; 0x4c
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f002 fb3e 	bl	800e3de <memset>
 800bd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd64:	4a0c      	ldr	r2, [pc, #48]	; (800bd98 <prvInitialiseNewTask+0x140>)
 800bd66:	651a      	str	r2, [r3, #80]	; 0x50
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	4a0c      	ldr	r2, [pc, #48]	; (800bd9c <prvInitialiseNewTask+0x144>)
 800bd6c:	655a      	str	r2, [r3, #84]	; 0x54
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	4a0b      	ldr	r2, [pc, #44]	; (800bda0 <prvInitialiseNewTask+0x148>)
 800bd72:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd74:	683a      	ldr	r2, [r7, #0]
 800bd76:	68f9      	ldr	r1, [r7, #12]
 800bd78:	69b8      	ldr	r0, [r7, #24]
 800bd7a:	f000 ff2d 	bl	800cbd8 <pxPortInitialiseStack>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d002      	beq.n	800bd90 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd90:	bf00      	nop
 800bd92:	3720      	adds	r7, #32
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	20008b20 	.word	0x20008b20
 800bd9c:	20008b88 	.word	0x20008b88
 800bda0:	20008bf0 	.word	0x20008bf0

0800bda4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bdac:	f001 f842 	bl	800ce34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bdb0:	4b2a      	ldr	r3, [pc, #168]	; (800be5c <prvAddNewTaskToReadyList+0xb8>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	4a29      	ldr	r2, [pc, #164]	; (800be5c <prvAddNewTaskToReadyList+0xb8>)
 800bdb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bdba:	4b29      	ldr	r3, [pc, #164]	; (800be60 <prvAddNewTaskToReadyList+0xbc>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d109      	bne.n	800bdd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bdc2:	4a27      	ldr	r2, [pc, #156]	; (800be60 <prvAddNewTaskToReadyList+0xbc>)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bdc8:	4b24      	ldr	r3, [pc, #144]	; (800be5c <prvAddNewTaskToReadyList+0xb8>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d110      	bne.n	800bdf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bdd0:	f000 fbe6 	bl	800c5a0 <prvInitialiseTaskLists>
 800bdd4:	e00d      	b.n	800bdf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bdd6:	4b23      	ldr	r3, [pc, #140]	; (800be64 <prvAddNewTaskToReadyList+0xc0>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d109      	bne.n	800bdf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bdde:	4b20      	ldr	r3, [pc, #128]	; (800be60 <prvAddNewTaskToReadyList+0xbc>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d802      	bhi.n	800bdf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bdec:	4a1c      	ldr	r2, [pc, #112]	; (800be60 <prvAddNewTaskToReadyList+0xbc>)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bdf2:	4b1d      	ldr	r3, [pc, #116]	; (800be68 <prvAddNewTaskToReadyList+0xc4>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	4a1b      	ldr	r2, [pc, #108]	; (800be68 <prvAddNewTaskToReadyList+0xc4>)
 800bdfa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be00:	2201      	movs	r2, #1
 800be02:	409a      	lsls	r2, r3
 800be04:	4b19      	ldr	r3, [pc, #100]	; (800be6c <prvAddNewTaskToReadyList+0xc8>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4313      	orrs	r3, r2
 800be0a:	4a18      	ldr	r2, [pc, #96]	; (800be6c <prvAddNewTaskToReadyList+0xc8>)
 800be0c:	6013      	str	r3, [r2, #0]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be12:	4613      	mov	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	4413      	add	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	4a15      	ldr	r2, [pc, #84]	; (800be70 <prvAddNewTaskToReadyList+0xcc>)
 800be1c:	441a      	add	r2, r3
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	3304      	adds	r3, #4
 800be22:	4619      	mov	r1, r3
 800be24:	4610      	mov	r0, r2
 800be26:	f7ff f88c 	bl	800af42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be2a:	f001 f833 	bl	800ce94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be2e:	4b0d      	ldr	r3, [pc, #52]	; (800be64 <prvAddNewTaskToReadyList+0xc0>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00e      	beq.n	800be54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800be36:	4b0a      	ldr	r3, [pc, #40]	; (800be60 <prvAddNewTaskToReadyList+0xbc>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be40:	429a      	cmp	r2, r3
 800be42:	d207      	bcs.n	800be54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800be44:	4b0b      	ldr	r3, [pc, #44]	; (800be74 <prvAddNewTaskToReadyList+0xd0>)
 800be46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be4a:	601a      	str	r2, [r3, #0]
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be54:	bf00      	nop
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	2000159c 	.word	0x2000159c
 800be60:	2000149c 	.word	0x2000149c
 800be64:	200015a8 	.word	0x200015a8
 800be68:	200015b8 	.word	0x200015b8
 800be6c:	200015a4 	.word	0x200015a4
 800be70:	200014a0 	.word	0x200014a0
 800be74:	e000ed04 	.word	0xe000ed04

0800be78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800be80:	2300      	movs	r3, #0
 800be82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d017      	beq.n	800beba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800be8a:	4b13      	ldr	r3, [pc, #76]	; (800bed8 <vTaskDelay+0x60>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00a      	beq.n	800bea8 <vTaskDelay+0x30>
	__asm volatile
 800be92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	60bb      	str	r3, [r7, #8]
}
 800bea4:	bf00      	nop
 800bea6:	e7fe      	b.n	800bea6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bea8:	f000 f884 	bl	800bfb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800beac:	2100      	movs	r1, #0
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fe2c 	bl	800cb0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800beb4:	f000 f88c 	bl	800bfd0 <xTaskResumeAll>
 800beb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d107      	bne.n	800bed0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bec0:	4b06      	ldr	r3, [pc, #24]	; (800bedc <vTaskDelay+0x64>)
 800bec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec6:	601a      	str	r2, [r3, #0]
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bed0:	bf00      	nop
 800bed2:	3710      	adds	r7, #16
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	200015c4 	.word	0x200015c4
 800bedc:	e000ed04 	.word	0xe000ed04

0800bee0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b08a      	sub	sp, #40	; 0x28
 800bee4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bee6:	2300      	movs	r3, #0
 800bee8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800beea:	2300      	movs	r3, #0
 800beec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800beee:	463a      	mov	r2, r7
 800bef0:	1d39      	adds	r1, r7, #4
 800bef2:	f107 0308 	add.w	r3, r7, #8
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7f5 f9e8 	bl	80012cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	9202      	str	r2, [sp, #8]
 800bf04:	9301      	str	r3, [sp, #4]
 800bf06:	2300      	movs	r3, #0
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	460a      	mov	r2, r1
 800bf0e:	4921      	ldr	r1, [pc, #132]	; (800bf94 <vTaskStartScheduler+0xb4>)
 800bf10:	4821      	ldr	r0, [pc, #132]	; (800bf98 <vTaskStartScheduler+0xb8>)
 800bf12:	f7ff fdff 	bl	800bb14 <xTaskCreateStatic>
 800bf16:	4603      	mov	r3, r0
 800bf18:	4a20      	ldr	r2, [pc, #128]	; (800bf9c <vTaskStartScheduler+0xbc>)
 800bf1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf1c:	4b1f      	ldr	r3, [pc, #124]	; (800bf9c <vTaskStartScheduler+0xbc>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d002      	beq.n	800bf2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf24:	2301      	movs	r3, #1
 800bf26:	617b      	str	r3, [r7, #20]
 800bf28:	e001      	b.n	800bf2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d11b      	bne.n	800bf6c <vTaskStartScheduler+0x8c>
	__asm volatile
 800bf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf38:	f383 8811 	msr	BASEPRI, r3
 800bf3c:	f3bf 8f6f 	isb	sy
 800bf40:	f3bf 8f4f 	dsb	sy
 800bf44:	613b      	str	r3, [r7, #16]
}
 800bf46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf48:	4b15      	ldr	r3, [pc, #84]	; (800bfa0 <vTaskStartScheduler+0xc0>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	334c      	adds	r3, #76	; 0x4c
 800bf4e:	4a15      	ldr	r2, [pc, #84]	; (800bfa4 <vTaskStartScheduler+0xc4>)
 800bf50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf52:	4b15      	ldr	r3, [pc, #84]	; (800bfa8 <vTaskStartScheduler+0xc8>)
 800bf54:	f04f 32ff 	mov.w	r2, #4294967295
 800bf58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf5a:	4b14      	ldr	r3, [pc, #80]	; (800bfac <vTaskStartScheduler+0xcc>)
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bf60:	4b13      	ldr	r3, [pc, #76]	; (800bfb0 <vTaskStartScheduler+0xd0>)
 800bf62:	2200      	movs	r2, #0
 800bf64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf66:	f000 fec3 	bl	800ccf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf6a:	e00e      	b.n	800bf8a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf72:	d10a      	bne.n	800bf8a <vTaskStartScheduler+0xaa>
	__asm volatile
 800bf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf78:	f383 8811 	msr	BASEPRI, r3
 800bf7c:	f3bf 8f6f 	isb	sy
 800bf80:	f3bf 8f4f 	dsb	sy
 800bf84:	60fb      	str	r3, [r7, #12]
}
 800bf86:	bf00      	nop
 800bf88:	e7fe      	b.n	800bf88 <vTaskStartScheduler+0xa8>
}
 800bf8a:	bf00      	nop
 800bf8c:	3718      	adds	r7, #24
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	08013d94 	.word	0x08013d94
 800bf98:	0800c571 	.word	0x0800c571
 800bf9c:	200015c0 	.word	0x200015c0
 800bfa0:	2000149c 	.word	0x2000149c
 800bfa4:	20000130 	.word	0x20000130
 800bfa8:	200015bc 	.word	0x200015bc
 800bfac:	200015a8 	.word	0x200015a8
 800bfb0:	200015a0 	.word	0x200015a0

0800bfb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bfb8:	4b04      	ldr	r3, [pc, #16]	; (800bfcc <vTaskSuspendAll+0x18>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	4a03      	ldr	r2, [pc, #12]	; (800bfcc <vTaskSuspendAll+0x18>)
 800bfc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bfc2:	bf00      	nop
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr
 800bfcc:	200015c4 	.word	0x200015c4

0800bfd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b084      	sub	sp, #16
 800bfd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bfde:	4b41      	ldr	r3, [pc, #260]	; (800c0e4 <xTaskResumeAll+0x114>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d10a      	bne.n	800bffc <xTaskResumeAll+0x2c>
	__asm volatile
 800bfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfea:	f383 8811 	msr	BASEPRI, r3
 800bfee:	f3bf 8f6f 	isb	sy
 800bff2:	f3bf 8f4f 	dsb	sy
 800bff6:	603b      	str	r3, [r7, #0]
}
 800bff8:	bf00      	nop
 800bffa:	e7fe      	b.n	800bffa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bffc:	f000 ff1a 	bl	800ce34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c000:	4b38      	ldr	r3, [pc, #224]	; (800c0e4 <xTaskResumeAll+0x114>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	3b01      	subs	r3, #1
 800c006:	4a37      	ldr	r2, [pc, #220]	; (800c0e4 <xTaskResumeAll+0x114>)
 800c008:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c00a:	4b36      	ldr	r3, [pc, #216]	; (800c0e4 <xTaskResumeAll+0x114>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d161      	bne.n	800c0d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c012:	4b35      	ldr	r3, [pc, #212]	; (800c0e8 <xTaskResumeAll+0x118>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d05d      	beq.n	800c0d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c01a:	e02e      	b.n	800c07a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c01c:	4b33      	ldr	r3, [pc, #204]	; (800c0ec <xTaskResumeAll+0x11c>)
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	3318      	adds	r3, #24
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fe ffe7 	bl	800affc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	3304      	adds	r3, #4
 800c032:	4618      	mov	r0, r3
 800c034:	f7fe ffe2 	bl	800affc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03c:	2201      	movs	r2, #1
 800c03e:	409a      	lsls	r2, r3
 800c040:	4b2b      	ldr	r3, [pc, #172]	; (800c0f0 <xTaskResumeAll+0x120>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4313      	orrs	r3, r2
 800c046:	4a2a      	ldr	r2, [pc, #168]	; (800c0f0 <xTaskResumeAll+0x120>)
 800c048:	6013      	str	r3, [r2, #0]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c04e:	4613      	mov	r3, r2
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	4413      	add	r3, r2
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	4a27      	ldr	r2, [pc, #156]	; (800c0f4 <xTaskResumeAll+0x124>)
 800c058:	441a      	add	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	3304      	adds	r3, #4
 800c05e:	4619      	mov	r1, r3
 800c060:	4610      	mov	r0, r2
 800c062:	f7fe ff6e 	bl	800af42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c06a:	4b23      	ldr	r3, [pc, #140]	; (800c0f8 <xTaskResumeAll+0x128>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c070:	429a      	cmp	r2, r3
 800c072:	d302      	bcc.n	800c07a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c074:	4b21      	ldr	r3, [pc, #132]	; (800c0fc <xTaskResumeAll+0x12c>)
 800c076:	2201      	movs	r2, #1
 800c078:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c07a:	4b1c      	ldr	r3, [pc, #112]	; (800c0ec <xTaskResumeAll+0x11c>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1cc      	bne.n	800c01c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d001      	beq.n	800c08c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c088:	f000 fb64 	bl	800c754 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c08c:	4b1c      	ldr	r3, [pc, #112]	; (800c100 <xTaskResumeAll+0x130>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d010      	beq.n	800c0ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c098:	f000 f846 	bl	800c128 <xTaskIncrementTick>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d002      	beq.n	800c0a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c0a2:	4b16      	ldr	r3, [pc, #88]	; (800c0fc <xTaskResumeAll+0x12c>)
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1f1      	bne.n	800c098 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c0b4:	4b12      	ldr	r3, [pc, #72]	; (800c100 <xTaskResumeAll+0x130>)
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c0ba:	4b10      	ldr	r3, [pc, #64]	; (800c0fc <xTaskResumeAll+0x12c>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d009      	beq.n	800c0d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c0c6:	4b0f      	ldr	r3, [pc, #60]	; (800c104 <xTaskResumeAll+0x134>)
 800c0c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0cc:	601a      	str	r2, [r3, #0]
 800c0ce:	f3bf 8f4f 	dsb	sy
 800c0d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c0d6:	f000 fedd 	bl	800ce94 <vPortExitCritical>

	return xAlreadyYielded;
 800c0da:	68bb      	ldr	r3, [r7, #8]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	200015c4 	.word	0x200015c4
 800c0e8:	2000159c 	.word	0x2000159c
 800c0ec:	2000155c 	.word	0x2000155c
 800c0f0:	200015a4 	.word	0x200015a4
 800c0f4:	200014a0 	.word	0x200014a0
 800c0f8:	2000149c 	.word	0x2000149c
 800c0fc:	200015b0 	.word	0x200015b0
 800c100:	200015ac 	.word	0x200015ac
 800c104:	e000ed04 	.word	0xe000ed04

0800c108 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c108:	b480      	push	{r7}
 800c10a:	b083      	sub	sp, #12
 800c10c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c10e:	4b05      	ldr	r3, [pc, #20]	; (800c124 <xTaskGetTickCount+0x1c>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c114:	687b      	ldr	r3, [r7, #4]
}
 800c116:	4618      	mov	r0, r3
 800c118:	370c      	adds	r7, #12
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	200015a0 	.word	0x200015a0

0800c128 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b086      	sub	sp, #24
 800c12c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c12e:	2300      	movs	r3, #0
 800c130:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c132:	4b4e      	ldr	r3, [pc, #312]	; (800c26c <xTaskIncrementTick+0x144>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	f040 808e 	bne.w	800c258 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c13c:	4b4c      	ldr	r3, [pc, #304]	; (800c270 <xTaskIncrementTick+0x148>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	3301      	adds	r3, #1
 800c142:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c144:	4a4a      	ldr	r2, [pc, #296]	; (800c270 <xTaskIncrementTick+0x148>)
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d120      	bne.n	800c192 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c150:	4b48      	ldr	r3, [pc, #288]	; (800c274 <xTaskIncrementTick+0x14c>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d00a      	beq.n	800c170 <xTaskIncrementTick+0x48>
	__asm volatile
 800c15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15e:	f383 8811 	msr	BASEPRI, r3
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	603b      	str	r3, [r7, #0]
}
 800c16c:	bf00      	nop
 800c16e:	e7fe      	b.n	800c16e <xTaskIncrementTick+0x46>
 800c170:	4b40      	ldr	r3, [pc, #256]	; (800c274 <xTaskIncrementTick+0x14c>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	60fb      	str	r3, [r7, #12]
 800c176:	4b40      	ldr	r3, [pc, #256]	; (800c278 <xTaskIncrementTick+0x150>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a3e      	ldr	r2, [pc, #248]	; (800c274 <xTaskIncrementTick+0x14c>)
 800c17c:	6013      	str	r3, [r2, #0]
 800c17e:	4a3e      	ldr	r2, [pc, #248]	; (800c278 <xTaskIncrementTick+0x150>)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6013      	str	r3, [r2, #0]
 800c184:	4b3d      	ldr	r3, [pc, #244]	; (800c27c <xTaskIncrementTick+0x154>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	3301      	adds	r3, #1
 800c18a:	4a3c      	ldr	r2, [pc, #240]	; (800c27c <xTaskIncrementTick+0x154>)
 800c18c:	6013      	str	r3, [r2, #0]
 800c18e:	f000 fae1 	bl	800c754 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c192:	4b3b      	ldr	r3, [pc, #236]	; (800c280 <xTaskIncrementTick+0x158>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	693a      	ldr	r2, [r7, #16]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d348      	bcc.n	800c22e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c19c:	4b35      	ldr	r3, [pc, #212]	; (800c274 <xTaskIncrementTick+0x14c>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d104      	bne.n	800c1b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1a6:	4b36      	ldr	r3, [pc, #216]	; (800c280 <xTaskIncrementTick+0x158>)
 800c1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ac:	601a      	str	r2, [r3, #0]
					break;
 800c1ae:	e03e      	b.n	800c22e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1b0:	4b30      	ldr	r3, [pc, #192]	; (800c274 <xTaskIncrementTick+0x14c>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	68db      	ldr	r3, [r3, #12]
 800c1b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c1c0:	693a      	ldr	r2, [r7, #16]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d203      	bcs.n	800c1d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c1c8:	4a2d      	ldr	r2, [pc, #180]	; (800c280 <xTaskIncrementTick+0x158>)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c1ce:	e02e      	b.n	800c22e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fe ff11 	bl	800affc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d004      	beq.n	800c1ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	3318      	adds	r3, #24
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fe ff08 	bl	800affc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	409a      	lsls	r2, r3
 800c1f4:	4b23      	ldr	r3, [pc, #140]	; (800c284 <xTaskIncrementTick+0x15c>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	4a22      	ldr	r2, [pc, #136]	; (800c284 <xTaskIncrementTick+0x15c>)
 800c1fc:	6013      	str	r3, [r2, #0]
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c202:	4613      	mov	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4a1f      	ldr	r2, [pc, #124]	; (800c288 <xTaskIncrementTick+0x160>)
 800c20c:	441a      	add	r2, r3
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	3304      	adds	r3, #4
 800c212:	4619      	mov	r1, r3
 800c214:	4610      	mov	r0, r2
 800c216:	f7fe fe94 	bl	800af42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c21e:	4b1b      	ldr	r3, [pc, #108]	; (800c28c <xTaskIncrementTick+0x164>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c224:	429a      	cmp	r2, r3
 800c226:	d3b9      	bcc.n	800c19c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c228:	2301      	movs	r3, #1
 800c22a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c22c:	e7b6      	b.n	800c19c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c22e:	4b17      	ldr	r3, [pc, #92]	; (800c28c <xTaskIncrementTick+0x164>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c234:	4914      	ldr	r1, [pc, #80]	; (800c288 <xTaskIncrementTick+0x160>)
 800c236:	4613      	mov	r3, r2
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	4413      	add	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	440b      	add	r3, r1
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2b01      	cmp	r3, #1
 800c244:	d901      	bls.n	800c24a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c246:	2301      	movs	r3, #1
 800c248:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c24a:	4b11      	ldr	r3, [pc, #68]	; (800c290 <xTaskIncrementTick+0x168>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d007      	beq.n	800c262 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c252:	2301      	movs	r3, #1
 800c254:	617b      	str	r3, [r7, #20]
 800c256:	e004      	b.n	800c262 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c258:	4b0e      	ldr	r3, [pc, #56]	; (800c294 <xTaskIncrementTick+0x16c>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3301      	adds	r3, #1
 800c25e:	4a0d      	ldr	r2, [pc, #52]	; (800c294 <xTaskIncrementTick+0x16c>)
 800c260:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c262:	697b      	ldr	r3, [r7, #20]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3718      	adds	r7, #24
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	200015c4 	.word	0x200015c4
 800c270:	200015a0 	.word	0x200015a0
 800c274:	20001554 	.word	0x20001554
 800c278:	20001558 	.word	0x20001558
 800c27c:	200015b4 	.word	0x200015b4
 800c280:	200015bc 	.word	0x200015bc
 800c284:	200015a4 	.word	0x200015a4
 800c288:	200014a0 	.word	0x200014a0
 800c28c:	2000149c 	.word	0x2000149c
 800c290:	200015b0 	.word	0x200015b0
 800c294:	200015ac 	.word	0x200015ac

0800c298 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c298:	b480      	push	{r7}
 800c29a:	b087      	sub	sp, #28
 800c29c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c29e:	4b29      	ldr	r3, [pc, #164]	; (800c344 <vTaskSwitchContext+0xac>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d003      	beq.n	800c2ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c2a6:	4b28      	ldr	r3, [pc, #160]	; (800c348 <vTaskSwitchContext+0xb0>)
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c2ac:	e044      	b.n	800c338 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c2ae:	4b26      	ldr	r3, [pc, #152]	; (800c348 <vTaskSwitchContext+0xb0>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2b4:	4b25      	ldr	r3, [pc, #148]	; (800c34c <vTaskSwitchContext+0xb4>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	fab3 f383 	clz	r3, r3
 800c2c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c2c2:	7afb      	ldrb	r3, [r7, #11]
 800c2c4:	f1c3 031f 	rsb	r3, r3, #31
 800c2c8:	617b      	str	r3, [r7, #20]
 800c2ca:	4921      	ldr	r1, [pc, #132]	; (800c350 <vTaskSwitchContext+0xb8>)
 800c2cc:	697a      	ldr	r2, [r7, #20]
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4413      	add	r3, r2
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	440b      	add	r3, r1
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d10a      	bne.n	800c2f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e2:	f383 8811 	msr	BASEPRI, r3
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	607b      	str	r3, [r7, #4]
}
 800c2f0:	bf00      	nop
 800c2f2:	e7fe      	b.n	800c2f2 <vTaskSwitchContext+0x5a>
 800c2f4:	697a      	ldr	r2, [r7, #20]
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	4413      	add	r3, r2
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	4a14      	ldr	r2, [pc, #80]	; (800c350 <vTaskSwitchContext+0xb8>)
 800c300:	4413      	add	r3, r2
 800c302:	613b      	str	r3, [r7, #16]
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	685a      	ldr	r2, [r3, #4]
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	605a      	str	r2, [r3, #4]
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	685a      	ldr	r2, [r3, #4]
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	3308      	adds	r3, #8
 800c316:	429a      	cmp	r2, r3
 800c318:	d104      	bne.n	800c324 <vTaskSwitchContext+0x8c>
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	605a      	str	r2, [r3, #4]
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	4a0a      	ldr	r2, [pc, #40]	; (800c354 <vTaskSwitchContext+0xbc>)
 800c32c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c32e:	4b09      	ldr	r3, [pc, #36]	; (800c354 <vTaskSwitchContext+0xbc>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	334c      	adds	r3, #76	; 0x4c
 800c334:	4a08      	ldr	r2, [pc, #32]	; (800c358 <vTaskSwitchContext+0xc0>)
 800c336:	6013      	str	r3, [r2, #0]
}
 800c338:	bf00      	nop
 800c33a:	371c      	adds	r7, #28
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr
 800c344:	200015c4 	.word	0x200015c4
 800c348:	200015b0 	.word	0x200015b0
 800c34c:	200015a4 	.word	0x200015a4
 800c350:	200014a0 	.word	0x200014a0
 800c354:	2000149c 	.word	0x2000149c
 800c358:	20000130 	.word	0x20000130

0800c35c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10a      	bne.n	800c382 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c370:	f383 8811 	msr	BASEPRI, r3
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	f3bf 8f4f 	dsb	sy
 800c37c:	60fb      	str	r3, [r7, #12]
}
 800c37e:	bf00      	nop
 800c380:	e7fe      	b.n	800c380 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c382:	4b07      	ldr	r3, [pc, #28]	; (800c3a0 <vTaskPlaceOnEventList+0x44>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	3318      	adds	r3, #24
 800c388:	4619      	mov	r1, r3
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7fe fdfd 	bl	800af8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c390:	2101      	movs	r1, #1
 800c392:	6838      	ldr	r0, [r7, #0]
 800c394:	f000 fbba 	bl	800cb0c <prvAddCurrentTaskToDelayedList>
}
 800c398:	bf00      	nop
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	2000149c 	.word	0x2000149c

0800c3a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d10a      	bne.n	800c3d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3be:	f383 8811 	msr	BASEPRI, r3
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	f3bf 8f4f 	dsb	sy
 800c3ca:	60fb      	str	r3, [r7, #12]
}
 800c3cc:	bf00      	nop
 800c3ce:	e7fe      	b.n	800c3ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	3318      	adds	r3, #24
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7fe fe11 	bl	800affc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3da:	4b1d      	ldr	r3, [pc, #116]	; (800c450 <xTaskRemoveFromEventList+0xac>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d11c      	bne.n	800c41c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	3304      	adds	r3, #4
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7fe fe08 	bl	800affc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	409a      	lsls	r2, r3
 800c3f4:	4b17      	ldr	r3, [pc, #92]	; (800c454 <xTaskRemoveFromEventList+0xb0>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	4a16      	ldr	r2, [pc, #88]	; (800c454 <xTaskRemoveFromEventList+0xb0>)
 800c3fc:	6013      	str	r3, [r2, #0]
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c402:	4613      	mov	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4413      	add	r3, r2
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	4a13      	ldr	r2, [pc, #76]	; (800c458 <xTaskRemoveFromEventList+0xb4>)
 800c40c:	441a      	add	r2, r3
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	3304      	adds	r3, #4
 800c412:	4619      	mov	r1, r3
 800c414:	4610      	mov	r0, r2
 800c416:	f7fe fd94 	bl	800af42 <vListInsertEnd>
 800c41a:	e005      	b.n	800c428 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	3318      	adds	r3, #24
 800c420:	4619      	mov	r1, r3
 800c422:	480e      	ldr	r0, [pc, #56]	; (800c45c <xTaskRemoveFromEventList+0xb8>)
 800c424:	f7fe fd8d 	bl	800af42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c42c:	4b0c      	ldr	r3, [pc, #48]	; (800c460 <xTaskRemoveFromEventList+0xbc>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c432:	429a      	cmp	r2, r3
 800c434:	d905      	bls.n	800c442 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c436:	2301      	movs	r3, #1
 800c438:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c43a:	4b0a      	ldr	r3, [pc, #40]	; (800c464 <xTaskRemoveFromEventList+0xc0>)
 800c43c:	2201      	movs	r2, #1
 800c43e:	601a      	str	r2, [r3, #0]
 800c440:	e001      	b.n	800c446 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c442:	2300      	movs	r3, #0
 800c444:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c446:	697b      	ldr	r3, [r7, #20]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3718      	adds	r7, #24
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	200015c4 	.word	0x200015c4
 800c454:	200015a4 	.word	0x200015a4
 800c458:	200014a0 	.word	0x200014a0
 800c45c:	2000155c 	.word	0x2000155c
 800c460:	2000149c 	.word	0x2000149c
 800c464:	200015b0 	.word	0x200015b0

0800c468 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c470:	4b06      	ldr	r3, [pc, #24]	; (800c48c <vTaskInternalSetTimeOutState+0x24>)
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c478:	4b05      	ldr	r3, [pc, #20]	; (800c490 <vTaskInternalSetTimeOutState+0x28>)
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	605a      	str	r2, [r3, #4]
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr
 800c48c:	200015b4 	.word	0x200015b4
 800c490:	200015a0 	.word	0x200015a0

0800c494 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b088      	sub	sp, #32
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10a      	bne.n	800c4ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	613b      	str	r3, [r7, #16]
}
 800c4b6:	bf00      	nop
 800c4b8:	e7fe      	b.n	800c4b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10a      	bne.n	800c4d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	60fb      	str	r3, [r7, #12]
}
 800c4d2:	bf00      	nop
 800c4d4:	e7fe      	b.n	800c4d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c4d6:	f000 fcad 	bl	800ce34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c4da:	4b1d      	ldr	r3, [pc, #116]	; (800c550 <xTaskCheckForTimeOut+0xbc>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	69ba      	ldr	r2, [r7, #24]
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f2:	d102      	bne.n	800c4fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	61fb      	str	r3, [r7, #28]
 800c4f8:	e023      	b.n	800c542 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	4b15      	ldr	r3, [pc, #84]	; (800c554 <xTaskCheckForTimeOut+0xc0>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	429a      	cmp	r2, r3
 800c504:	d007      	beq.n	800c516 <xTaskCheckForTimeOut+0x82>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	69ba      	ldr	r2, [r7, #24]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d302      	bcc.n	800c516 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c510:	2301      	movs	r3, #1
 800c512:	61fb      	str	r3, [r7, #28]
 800c514:	e015      	b.n	800c542 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	697a      	ldr	r2, [r7, #20]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d20b      	bcs.n	800c538 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	1ad2      	subs	r2, r2, r3
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff ff9b 	bl	800c468 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c532:	2300      	movs	r3, #0
 800c534:	61fb      	str	r3, [r7, #28]
 800c536:	e004      	b.n	800c542 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	2200      	movs	r2, #0
 800c53c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c53e:	2301      	movs	r3, #1
 800c540:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c542:	f000 fca7 	bl	800ce94 <vPortExitCritical>

	return xReturn;
 800c546:	69fb      	ldr	r3, [r7, #28]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3720      	adds	r7, #32
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	200015a0 	.word	0x200015a0
 800c554:	200015b4 	.word	0x200015b4

0800c558 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c558:	b480      	push	{r7}
 800c55a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c55c:	4b03      	ldr	r3, [pc, #12]	; (800c56c <vTaskMissedYield+0x14>)
 800c55e:	2201      	movs	r2, #1
 800c560:	601a      	str	r2, [r3, #0]
}
 800c562:	bf00      	nop
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr
 800c56c:	200015b0 	.word	0x200015b0

0800c570 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c578:	f000 f852 	bl	800c620 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c57c:	4b06      	ldr	r3, [pc, #24]	; (800c598 <prvIdleTask+0x28>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d9f9      	bls.n	800c578 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c584:	4b05      	ldr	r3, [pc, #20]	; (800c59c <prvIdleTask+0x2c>)
 800c586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c58a:	601a      	str	r2, [r3, #0]
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c594:	e7f0      	b.n	800c578 <prvIdleTask+0x8>
 800c596:	bf00      	nop
 800c598:	200014a0 	.word	0x200014a0
 800c59c:	e000ed04 	.word	0xe000ed04

0800c5a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	607b      	str	r3, [r7, #4]
 800c5aa:	e00c      	b.n	800c5c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	4613      	mov	r3, r2
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	4413      	add	r3, r2
 800c5b4:	009b      	lsls	r3, r3, #2
 800c5b6:	4a12      	ldr	r2, [pc, #72]	; (800c600 <prvInitialiseTaskLists+0x60>)
 800c5b8:	4413      	add	r3, r2
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fe fc94 	bl	800aee8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	607b      	str	r3, [r7, #4]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2b06      	cmp	r3, #6
 800c5ca:	d9ef      	bls.n	800c5ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c5cc:	480d      	ldr	r0, [pc, #52]	; (800c604 <prvInitialiseTaskLists+0x64>)
 800c5ce:	f7fe fc8b 	bl	800aee8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c5d2:	480d      	ldr	r0, [pc, #52]	; (800c608 <prvInitialiseTaskLists+0x68>)
 800c5d4:	f7fe fc88 	bl	800aee8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c5d8:	480c      	ldr	r0, [pc, #48]	; (800c60c <prvInitialiseTaskLists+0x6c>)
 800c5da:	f7fe fc85 	bl	800aee8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c5de:	480c      	ldr	r0, [pc, #48]	; (800c610 <prvInitialiseTaskLists+0x70>)
 800c5e0:	f7fe fc82 	bl	800aee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c5e4:	480b      	ldr	r0, [pc, #44]	; (800c614 <prvInitialiseTaskLists+0x74>)
 800c5e6:	f7fe fc7f 	bl	800aee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c5ea:	4b0b      	ldr	r3, [pc, #44]	; (800c618 <prvInitialiseTaskLists+0x78>)
 800c5ec:	4a05      	ldr	r2, [pc, #20]	; (800c604 <prvInitialiseTaskLists+0x64>)
 800c5ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c5f0:	4b0a      	ldr	r3, [pc, #40]	; (800c61c <prvInitialiseTaskLists+0x7c>)
 800c5f2:	4a05      	ldr	r2, [pc, #20]	; (800c608 <prvInitialiseTaskLists+0x68>)
 800c5f4:	601a      	str	r2, [r3, #0]
}
 800c5f6:	bf00      	nop
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	200014a0 	.word	0x200014a0
 800c604:	2000152c 	.word	0x2000152c
 800c608:	20001540 	.word	0x20001540
 800c60c:	2000155c 	.word	0x2000155c
 800c610:	20001570 	.word	0x20001570
 800c614:	20001588 	.word	0x20001588
 800c618:	20001554 	.word	0x20001554
 800c61c:	20001558 	.word	0x20001558

0800c620 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c626:	e019      	b.n	800c65c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c628:	f000 fc04 	bl	800ce34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c62c:	4b10      	ldr	r3, [pc, #64]	; (800c670 <prvCheckTasksWaitingTermination+0x50>)
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	3304      	adds	r3, #4
 800c638:	4618      	mov	r0, r3
 800c63a:	f7fe fcdf 	bl	800affc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c63e:	4b0d      	ldr	r3, [pc, #52]	; (800c674 <prvCheckTasksWaitingTermination+0x54>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	3b01      	subs	r3, #1
 800c644:	4a0b      	ldr	r2, [pc, #44]	; (800c674 <prvCheckTasksWaitingTermination+0x54>)
 800c646:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c648:	4b0b      	ldr	r3, [pc, #44]	; (800c678 <prvCheckTasksWaitingTermination+0x58>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	3b01      	subs	r3, #1
 800c64e:	4a0a      	ldr	r2, [pc, #40]	; (800c678 <prvCheckTasksWaitingTermination+0x58>)
 800c650:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c652:	f000 fc1f 	bl	800ce94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f848 	bl	800c6ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c65c:	4b06      	ldr	r3, [pc, #24]	; (800c678 <prvCheckTasksWaitingTermination+0x58>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d1e1      	bne.n	800c628 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop
 800c668:	3708      	adds	r7, #8
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	20001570 	.word	0x20001570
 800c674:	2000159c 	.word	0x2000159c
 800c678:	20001584 	.word	0x20001584

0800c67c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c684:	2300      	movs	r3, #0
 800c686:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c688:	e005      	b.n	800c696 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	3301      	adds	r3, #1
 800c68e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	3301      	adds	r3, #1
 800c694:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	2ba5      	cmp	r3, #165	; 0xa5
 800c69c:	d0f5      	beq.n	800c68a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	089b      	lsrs	r3, r3, #2
 800c6a2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	b29b      	uxth	r3, r3
	}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3714      	adds	r7, #20
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b086      	sub	sp, #24
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d102      	bne.n	800c6c8 <uxTaskGetStackHighWaterMark+0x14>
 800c6c2:	4b09      	ldr	r3, [pc, #36]	; (800c6e8 <uxTaskGetStackHighWaterMark+0x34>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	e000      	b.n	800c6ca <uxTaskGetStackHighWaterMark+0x16>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d0:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800c6d2:	6938      	ldr	r0, [r7, #16]
 800c6d4:	f7ff ffd2 	bl	800c67c <prvTaskCheckFreeStackSpace>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
	}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3718      	adds	r7, #24
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	2000149c 	.word	0x2000149c

0800c6ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	334c      	adds	r3, #76	; 0x4c
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f001 fea3 	bl	800e444 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c704:	2b00      	cmp	r3, #0
 800c706:	d108      	bne.n	800c71a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 fd7f 	bl	800d210 <vPortFree>
				vPortFree( pxTCB );
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 fd7c 	bl	800d210 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c718:	e018      	b.n	800c74c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c720:	2b01      	cmp	r3, #1
 800c722:	d103      	bne.n	800c72c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 fd73 	bl	800d210 <vPortFree>
	}
 800c72a:	e00f      	b.n	800c74c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c732:	2b02      	cmp	r3, #2
 800c734:	d00a      	beq.n	800c74c <prvDeleteTCB+0x60>
	__asm volatile
 800c736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73a:	f383 8811 	msr	BASEPRI, r3
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	f3bf 8f4f 	dsb	sy
 800c746:	60fb      	str	r3, [r7, #12]
}
 800c748:	bf00      	nop
 800c74a:	e7fe      	b.n	800c74a <prvDeleteTCB+0x5e>
	}
 800c74c:	bf00      	nop
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c75a:	4b0c      	ldr	r3, [pc, #48]	; (800c78c <prvResetNextTaskUnblockTime+0x38>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d104      	bne.n	800c76e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c764:	4b0a      	ldr	r3, [pc, #40]	; (800c790 <prvResetNextTaskUnblockTime+0x3c>)
 800c766:	f04f 32ff 	mov.w	r2, #4294967295
 800c76a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c76c:	e008      	b.n	800c780 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c76e:	4b07      	ldr	r3, [pc, #28]	; (800c78c <prvResetNextTaskUnblockTime+0x38>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	4a04      	ldr	r2, [pc, #16]	; (800c790 <prvResetNextTaskUnblockTime+0x3c>)
 800c77e:	6013      	str	r3, [r2, #0]
}
 800c780:	bf00      	nop
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr
 800c78c:	20001554 	.word	0x20001554
 800c790:	200015bc 	.word	0x200015bc

0800c794 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c79a:	4b0b      	ldr	r3, [pc, #44]	; (800c7c8 <xTaskGetSchedulerState+0x34>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d102      	bne.n	800c7a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	607b      	str	r3, [r7, #4]
 800c7a6:	e008      	b.n	800c7ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7a8:	4b08      	ldr	r3, [pc, #32]	; (800c7cc <xTaskGetSchedulerState+0x38>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d102      	bne.n	800c7b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c7b0:	2302      	movs	r3, #2
 800c7b2:	607b      	str	r3, [r7, #4]
 800c7b4:	e001      	b.n	800c7ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c7ba:	687b      	ldr	r3, [r7, #4]
	}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	370c      	adds	r7, #12
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr
 800c7c8:	200015a8 	.word	0x200015a8
 800c7cc:	200015c4 	.word	0x200015c4

0800c7d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d05e      	beq.n	800c8a4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ea:	4b31      	ldr	r3, [pc, #196]	; (800c8b0 <xTaskPriorityInherit+0xe0>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d24e      	bcs.n	800c892 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	699b      	ldr	r3, [r3, #24]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	db06      	blt.n	800c80a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7fc:	4b2c      	ldr	r3, [pc, #176]	; (800c8b0 <xTaskPriorityInherit+0xe0>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c802:	f1c3 0207 	rsb	r2, r3, #7
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	6959      	ldr	r1, [r3, #20]
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c812:	4613      	mov	r3, r2
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4413      	add	r3, r2
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	4a26      	ldr	r2, [pc, #152]	; (800c8b4 <xTaskPriorityInherit+0xe4>)
 800c81c:	4413      	add	r3, r2
 800c81e:	4299      	cmp	r1, r3
 800c820:	d12f      	bne.n	800c882 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	3304      	adds	r3, #4
 800c826:	4618      	mov	r0, r3
 800c828:	f7fe fbe8 	bl	800affc <uxListRemove>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10a      	bne.n	800c848 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c836:	2201      	movs	r2, #1
 800c838:	fa02 f303 	lsl.w	r3, r2, r3
 800c83c:	43da      	mvns	r2, r3
 800c83e:	4b1e      	ldr	r3, [pc, #120]	; (800c8b8 <xTaskPriorityInherit+0xe8>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	4013      	ands	r3, r2
 800c844:	4a1c      	ldr	r2, [pc, #112]	; (800c8b8 <xTaskPriorityInherit+0xe8>)
 800c846:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c848:	4b19      	ldr	r3, [pc, #100]	; (800c8b0 <xTaskPriorityInherit+0xe0>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c856:	2201      	movs	r2, #1
 800c858:	409a      	lsls	r2, r3
 800c85a:	4b17      	ldr	r3, [pc, #92]	; (800c8b8 <xTaskPriorityInherit+0xe8>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4313      	orrs	r3, r2
 800c860:	4a15      	ldr	r2, [pc, #84]	; (800c8b8 <xTaskPriorityInherit+0xe8>)
 800c862:	6013      	str	r3, [r2, #0]
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c868:	4613      	mov	r3, r2
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	4413      	add	r3, r2
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	4a10      	ldr	r2, [pc, #64]	; (800c8b4 <xTaskPriorityInherit+0xe4>)
 800c872:	441a      	add	r2, r3
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	3304      	adds	r3, #4
 800c878:	4619      	mov	r1, r3
 800c87a:	4610      	mov	r0, r2
 800c87c:	f7fe fb61 	bl	800af42 <vListInsertEnd>
 800c880:	e004      	b.n	800c88c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c882:	4b0b      	ldr	r3, [pc, #44]	; (800c8b0 <xTaskPriorityInherit+0xe0>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c88c:	2301      	movs	r3, #1
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	e008      	b.n	800c8a4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c896:	4b06      	ldr	r3, [pc, #24]	; (800c8b0 <xTaskPriorityInherit+0xe0>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d201      	bcs.n	800c8a4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
	}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	2000149c 	.word	0x2000149c
 800c8b4:	200014a0 	.word	0x200014a0
 800c8b8:	200015a4 	.word	0x200015a4

0800c8bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d06e      	beq.n	800c9b0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c8d2:	4b3a      	ldr	r3, [pc, #232]	; (800c9bc <xTaskPriorityDisinherit+0x100>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	693a      	ldr	r2, [r7, #16]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d00a      	beq.n	800c8f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e0:	f383 8811 	msr	BASEPRI, r3
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	60fb      	str	r3, [r7, #12]
}
 800c8ee:	bf00      	nop
 800c8f0:	e7fe      	b.n	800c8f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d10a      	bne.n	800c910 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	60bb      	str	r3, [r7, #8]
}
 800c90c:	bf00      	nop
 800c90e:	e7fe      	b.n	800c90e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c914:	1e5a      	subs	r2, r3, #1
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c922:	429a      	cmp	r2, r3
 800c924:	d044      	beq.n	800c9b0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d140      	bne.n	800c9b0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	3304      	adds	r3, #4
 800c932:	4618      	mov	r0, r3
 800c934:	f7fe fb62 	bl	800affc <uxListRemove>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d115      	bne.n	800c96a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c942:	491f      	ldr	r1, [pc, #124]	; (800c9c0 <xTaskPriorityDisinherit+0x104>)
 800c944:	4613      	mov	r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	4413      	add	r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	440b      	add	r3, r1
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d10a      	bne.n	800c96a <xTaskPriorityDisinherit+0xae>
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c958:	2201      	movs	r2, #1
 800c95a:	fa02 f303 	lsl.w	r3, r2, r3
 800c95e:	43da      	mvns	r2, r3
 800c960:	4b18      	ldr	r3, [pc, #96]	; (800c9c4 <xTaskPriorityDisinherit+0x108>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4013      	ands	r3, r2
 800c966:	4a17      	ldr	r2, [pc, #92]	; (800c9c4 <xTaskPriorityDisinherit+0x108>)
 800c968:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c976:	f1c3 0207 	rsb	r2, r3, #7
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c982:	2201      	movs	r2, #1
 800c984:	409a      	lsls	r2, r3
 800c986:	4b0f      	ldr	r3, [pc, #60]	; (800c9c4 <xTaskPriorityDisinherit+0x108>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	4a0d      	ldr	r2, [pc, #52]	; (800c9c4 <xTaskPriorityDisinherit+0x108>)
 800c98e:	6013      	str	r3, [r2, #0]
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c994:	4613      	mov	r3, r2
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	4413      	add	r3, r2
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	4a08      	ldr	r2, [pc, #32]	; (800c9c0 <xTaskPriorityDisinherit+0x104>)
 800c99e:	441a      	add	r2, r3
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	3304      	adds	r3, #4
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	4610      	mov	r0, r2
 800c9a8:	f7fe facb 	bl	800af42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c9b0:	697b      	ldr	r3, [r7, #20]
	}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3718      	adds	r7, #24
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	2000149c 	.word	0x2000149c
 800c9c0:	200014a0 	.word	0x200014a0
 800c9c4:	200015a4 	.word	0x200015a4

0800c9c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b088      	sub	sp, #32
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d077      	beq.n	800cad0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d10a      	bne.n	800c9fe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ec:	f383 8811 	msr	BASEPRI, r3
 800c9f0:	f3bf 8f6f 	isb	sy
 800c9f4:	f3bf 8f4f 	dsb	sy
 800c9f8:	60fb      	str	r3, [r7, #12]
}
 800c9fa:	bf00      	nop
 800c9fc:	e7fe      	b.n	800c9fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca02:	683a      	ldr	r2, [r7, #0]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d902      	bls.n	800ca0e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	61fb      	str	r3, [r7, #28]
 800ca0c:	e002      	b.n	800ca14 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca12:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca18:	69fa      	ldr	r2, [r7, #28]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d058      	beq.n	800cad0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca22:	697a      	ldr	r2, [r7, #20]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d153      	bne.n	800cad0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ca28:	4b2b      	ldr	r3, [pc, #172]	; (800cad8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	69ba      	ldr	r2, [r7, #24]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d10a      	bne.n	800ca48 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ca32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca36:	f383 8811 	msr	BASEPRI, r3
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	60bb      	str	r3, [r7, #8]
}
 800ca44:	bf00      	nop
 800ca46:	e7fe      	b.n	800ca46 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ca48:	69bb      	ldr	r3, [r7, #24]
 800ca4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ca4e:	69bb      	ldr	r3, [r7, #24]
 800ca50:	69fa      	ldr	r2, [r7, #28]
 800ca52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	699b      	ldr	r3, [r3, #24]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	db04      	blt.n	800ca66 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	f1c3 0207 	rsb	r2, r3, #7
 800ca62:	69bb      	ldr	r3, [r7, #24]
 800ca64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	6959      	ldr	r1, [r3, #20]
 800ca6a:	693a      	ldr	r2, [r7, #16]
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	4413      	add	r3, r2
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	4a19      	ldr	r2, [pc, #100]	; (800cadc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ca76:	4413      	add	r3, r2
 800ca78:	4299      	cmp	r1, r3
 800ca7a:	d129      	bne.n	800cad0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	3304      	adds	r3, #4
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe fabb 	bl	800affc <uxListRemove>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d10a      	bne.n	800caa2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca90:	2201      	movs	r2, #1
 800ca92:	fa02 f303 	lsl.w	r3, r2, r3
 800ca96:	43da      	mvns	r2, r3
 800ca98:	4b11      	ldr	r3, [pc, #68]	; (800cae0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	4a10      	ldr	r2, [pc, #64]	; (800cae0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800caa0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa6:	2201      	movs	r2, #1
 800caa8:	409a      	lsls	r2, r3
 800caaa:	4b0d      	ldr	r3, [pc, #52]	; (800cae0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4313      	orrs	r3, r2
 800cab0:	4a0b      	ldr	r2, [pc, #44]	; (800cae0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cab2:	6013      	str	r3, [r2, #0]
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cab8:	4613      	mov	r3, r2
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	4413      	add	r3, r2
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	4a06      	ldr	r2, [pc, #24]	; (800cadc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cac2:	441a      	add	r2, r3
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	3304      	adds	r3, #4
 800cac8:	4619      	mov	r1, r3
 800caca:	4610      	mov	r0, r2
 800cacc:	f7fe fa39 	bl	800af42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cad0:	bf00      	nop
 800cad2:	3720      	adds	r7, #32
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	2000149c 	.word	0x2000149c
 800cadc:	200014a0 	.word	0x200014a0
 800cae0:	200015a4 	.word	0x200015a4

0800cae4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cae4:	b480      	push	{r7}
 800cae6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cae8:	4b07      	ldr	r3, [pc, #28]	; (800cb08 <pvTaskIncrementMutexHeldCount+0x24>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d004      	beq.n	800cafa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800caf0:	4b05      	ldr	r3, [pc, #20]	; (800cb08 <pvTaskIncrementMutexHeldCount+0x24>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800caf6:	3201      	adds	r2, #1
 800caf8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800cafa:	4b03      	ldr	r3, [pc, #12]	; (800cb08 <pvTaskIncrementMutexHeldCount+0x24>)
 800cafc:	681b      	ldr	r3, [r3, #0]
	}
 800cafe:	4618      	mov	r0, r3
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr
 800cb08:	2000149c 	.word	0x2000149c

0800cb0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb16:	4b29      	ldr	r3, [pc, #164]	; (800cbbc <prvAddCurrentTaskToDelayedList+0xb0>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb1c:	4b28      	ldr	r3, [pc, #160]	; (800cbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	3304      	adds	r3, #4
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7fe fa6a 	bl	800affc <uxListRemove>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d10b      	bne.n	800cb46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cb2e:	4b24      	ldr	r3, [pc, #144]	; (800cbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb34:	2201      	movs	r2, #1
 800cb36:	fa02 f303 	lsl.w	r3, r2, r3
 800cb3a:	43da      	mvns	r2, r3
 800cb3c:	4b21      	ldr	r3, [pc, #132]	; (800cbc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4013      	ands	r3, r2
 800cb42:	4a20      	ldr	r2, [pc, #128]	; (800cbc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cb44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4c:	d10a      	bne.n	800cb64 <prvAddCurrentTaskToDelayedList+0x58>
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d007      	beq.n	800cb64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb54:	4b1a      	ldr	r3, [pc, #104]	; (800cbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	3304      	adds	r3, #4
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	481a      	ldr	r0, [pc, #104]	; (800cbc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cb5e:	f7fe f9f0 	bl	800af42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cb62:	e026      	b.n	800cbb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4413      	add	r3, r2
 800cb6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cb6c:	4b14      	ldr	r3, [pc, #80]	; (800cbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	68ba      	ldr	r2, [r7, #8]
 800cb72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cb74:	68ba      	ldr	r2, [r7, #8]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d209      	bcs.n	800cb90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb7c:	4b13      	ldr	r3, [pc, #76]	; (800cbcc <prvAddCurrentTaskToDelayedList+0xc0>)
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	4b0f      	ldr	r3, [pc, #60]	; (800cbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3304      	adds	r3, #4
 800cb86:	4619      	mov	r1, r3
 800cb88:	4610      	mov	r0, r2
 800cb8a:	f7fe f9fe 	bl	800af8a <vListInsert>
}
 800cb8e:	e010      	b.n	800cbb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb90:	4b0f      	ldr	r3, [pc, #60]	; (800cbd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	4b0a      	ldr	r3, [pc, #40]	; (800cbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	3304      	adds	r3, #4
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	f7fe f9f4 	bl	800af8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cba2:	4b0c      	ldr	r3, [pc, #48]	; (800cbd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	68ba      	ldr	r2, [r7, #8]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d202      	bcs.n	800cbb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cbac:	4a09      	ldr	r2, [pc, #36]	; (800cbd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	6013      	str	r3, [r2, #0]
}
 800cbb2:	bf00      	nop
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	200015a0 	.word	0x200015a0
 800cbc0:	2000149c 	.word	0x2000149c
 800cbc4:	200015a4 	.word	0x200015a4
 800cbc8:	20001588 	.word	0x20001588
 800cbcc:	20001558 	.word	0x20001558
 800cbd0:	20001554 	.word	0x20001554
 800cbd4:	200015bc 	.word	0x200015bc

0800cbd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	3b04      	subs	r3, #4
 800cbe8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cbf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	3b04      	subs	r3, #4
 800cbf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	f023 0201 	bic.w	r2, r3, #1
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	3b04      	subs	r3, #4
 800cc06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc08:	4a0c      	ldr	r2, [pc, #48]	; (800cc3c <pxPortInitialiseStack+0x64>)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	3b14      	subs	r3, #20
 800cc12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	3b04      	subs	r3, #4
 800cc1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f06f 0202 	mvn.w	r2, #2
 800cc26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	3b20      	subs	r3, #32
 800cc2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr
 800cc3c:	0800cc41 	.word	0x0800cc41

0800cc40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cc46:	2300      	movs	r3, #0
 800cc48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc4a:	4b12      	ldr	r3, [pc, #72]	; (800cc94 <prvTaskExitError+0x54>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc52:	d00a      	beq.n	800cc6a <prvTaskExitError+0x2a>
	__asm volatile
 800cc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc58:	f383 8811 	msr	BASEPRI, r3
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f3bf 8f4f 	dsb	sy
 800cc64:	60fb      	str	r3, [r7, #12]
}
 800cc66:	bf00      	nop
 800cc68:	e7fe      	b.n	800cc68 <prvTaskExitError+0x28>
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	60bb      	str	r3, [r7, #8]
}
 800cc7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc7e:	bf00      	nop
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d0fc      	beq.n	800cc80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cc86:	bf00      	nop
 800cc88:	bf00      	nop
 800cc8a:	3714      	adds	r7, #20
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr
 800cc94:	200000d4 	.word	0x200000d4
	...

0800cca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cca0:	4b07      	ldr	r3, [pc, #28]	; (800ccc0 <pxCurrentTCBConst2>)
 800cca2:	6819      	ldr	r1, [r3, #0]
 800cca4:	6808      	ldr	r0, [r1, #0]
 800cca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccaa:	f380 8809 	msr	PSP, r0
 800ccae:	f3bf 8f6f 	isb	sy
 800ccb2:	f04f 0000 	mov.w	r0, #0
 800ccb6:	f380 8811 	msr	BASEPRI, r0
 800ccba:	4770      	bx	lr
 800ccbc:	f3af 8000 	nop.w

0800ccc0 <pxCurrentTCBConst2>:
 800ccc0:	2000149c 	.word	0x2000149c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ccc4:	bf00      	nop
 800ccc6:	bf00      	nop

0800ccc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ccc8:	4808      	ldr	r0, [pc, #32]	; (800ccec <prvPortStartFirstTask+0x24>)
 800ccca:	6800      	ldr	r0, [r0, #0]
 800cccc:	6800      	ldr	r0, [r0, #0]
 800ccce:	f380 8808 	msr	MSP, r0
 800ccd2:	f04f 0000 	mov.w	r0, #0
 800ccd6:	f380 8814 	msr	CONTROL, r0
 800ccda:	b662      	cpsie	i
 800ccdc:	b661      	cpsie	f
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	f3bf 8f6f 	isb	sy
 800cce6:	df00      	svc	0
 800cce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ccea:	bf00      	nop
 800ccec:	e000ed08 	.word	0xe000ed08

0800ccf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b086      	sub	sp, #24
 800ccf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ccf6:	4b46      	ldr	r3, [pc, #280]	; (800ce10 <xPortStartScheduler+0x120>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a46      	ldr	r2, [pc, #280]	; (800ce14 <xPortStartScheduler+0x124>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d10a      	bne.n	800cd16 <xPortStartScheduler+0x26>
	__asm volatile
 800cd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd04:	f383 8811 	msr	BASEPRI, r3
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	613b      	str	r3, [r7, #16]
}
 800cd12:	bf00      	nop
 800cd14:	e7fe      	b.n	800cd14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cd16:	4b3e      	ldr	r3, [pc, #248]	; (800ce10 <xPortStartScheduler+0x120>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a3f      	ldr	r2, [pc, #252]	; (800ce18 <xPortStartScheduler+0x128>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d10a      	bne.n	800cd36 <xPortStartScheduler+0x46>
	__asm volatile
 800cd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd24:	f383 8811 	msr	BASEPRI, r3
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	60fb      	str	r3, [r7, #12]
}
 800cd32:	bf00      	nop
 800cd34:	e7fe      	b.n	800cd34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd36:	4b39      	ldr	r3, [pc, #228]	; (800ce1c <xPortStartScheduler+0x12c>)
 800cd38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	22ff      	movs	r2, #255	; 0xff
 800cd46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd50:	78fb      	ldrb	r3, [r7, #3]
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cd58:	b2da      	uxtb	r2, r3
 800cd5a:	4b31      	ldr	r3, [pc, #196]	; (800ce20 <xPortStartScheduler+0x130>)
 800cd5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd5e:	4b31      	ldr	r3, [pc, #196]	; (800ce24 <xPortStartScheduler+0x134>)
 800cd60:	2207      	movs	r2, #7
 800cd62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd64:	e009      	b.n	800cd7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cd66:	4b2f      	ldr	r3, [pc, #188]	; (800ce24 <xPortStartScheduler+0x134>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	4a2d      	ldr	r2, [pc, #180]	; (800ce24 <xPortStartScheduler+0x134>)
 800cd6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd70:	78fb      	ldrb	r3, [r7, #3]
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	005b      	lsls	r3, r3, #1
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd7a:	78fb      	ldrb	r3, [r7, #3]
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd82:	2b80      	cmp	r3, #128	; 0x80
 800cd84:	d0ef      	beq.n	800cd66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cd86:	4b27      	ldr	r3, [pc, #156]	; (800ce24 <xPortStartScheduler+0x134>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f1c3 0307 	rsb	r3, r3, #7
 800cd8e:	2b04      	cmp	r3, #4
 800cd90:	d00a      	beq.n	800cda8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	60bb      	str	r3, [r7, #8]
}
 800cda4:	bf00      	nop
 800cda6:	e7fe      	b.n	800cda6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cda8:	4b1e      	ldr	r3, [pc, #120]	; (800ce24 <xPortStartScheduler+0x134>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	021b      	lsls	r3, r3, #8
 800cdae:	4a1d      	ldr	r2, [pc, #116]	; (800ce24 <xPortStartScheduler+0x134>)
 800cdb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cdb2:	4b1c      	ldr	r3, [pc, #112]	; (800ce24 <xPortStartScheduler+0x134>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cdba:	4a1a      	ldr	r2, [pc, #104]	; (800ce24 <xPortStartScheduler+0x134>)
 800cdbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	b2da      	uxtb	r2, r3
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cdc6:	4b18      	ldr	r3, [pc, #96]	; (800ce28 <xPortStartScheduler+0x138>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a17      	ldr	r2, [pc, #92]	; (800ce28 <xPortStartScheduler+0x138>)
 800cdcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cdd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cdd2:	4b15      	ldr	r3, [pc, #84]	; (800ce28 <xPortStartScheduler+0x138>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a14      	ldr	r2, [pc, #80]	; (800ce28 <xPortStartScheduler+0x138>)
 800cdd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cddc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cdde:	f000 f8dd 	bl	800cf9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cde2:	4b12      	ldr	r3, [pc, #72]	; (800ce2c <xPortStartScheduler+0x13c>)
 800cde4:	2200      	movs	r2, #0
 800cde6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cde8:	f000 f8fc 	bl	800cfe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cdec:	4b10      	ldr	r3, [pc, #64]	; (800ce30 <xPortStartScheduler+0x140>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a0f      	ldr	r2, [pc, #60]	; (800ce30 <xPortStartScheduler+0x140>)
 800cdf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cdf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cdf8:	f7ff ff66 	bl	800ccc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cdfc:	f7ff fa4c 	bl	800c298 <vTaskSwitchContext>
	prvTaskExitError();
 800ce00:	f7ff ff1e 	bl	800cc40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3718      	adds	r7, #24
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	e000ed00 	.word	0xe000ed00
 800ce14:	410fc271 	.word	0x410fc271
 800ce18:	410fc270 	.word	0x410fc270
 800ce1c:	e000e400 	.word	0xe000e400
 800ce20:	200015c8 	.word	0x200015c8
 800ce24:	200015cc 	.word	0x200015cc
 800ce28:	e000ed20 	.word	0xe000ed20
 800ce2c:	200000d4 	.word	0x200000d4
 800ce30:	e000ef34 	.word	0xe000ef34

0800ce34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
	__asm volatile
 800ce3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3e:	f383 8811 	msr	BASEPRI, r3
 800ce42:	f3bf 8f6f 	isb	sy
 800ce46:	f3bf 8f4f 	dsb	sy
 800ce4a:	607b      	str	r3, [r7, #4]
}
 800ce4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce4e:	4b0f      	ldr	r3, [pc, #60]	; (800ce8c <vPortEnterCritical+0x58>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	3301      	adds	r3, #1
 800ce54:	4a0d      	ldr	r2, [pc, #52]	; (800ce8c <vPortEnterCritical+0x58>)
 800ce56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ce58:	4b0c      	ldr	r3, [pc, #48]	; (800ce8c <vPortEnterCritical+0x58>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d10f      	bne.n	800ce80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce60:	4b0b      	ldr	r3, [pc, #44]	; (800ce90 <vPortEnterCritical+0x5c>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00a      	beq.n	800ce80 <vPortEnterCritical+0x4c>
	__asm volatile
 800ce6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6e:	f383 8811 	msr	BASEPRI, r3
 800ce72:	f3bf 8f6f 	isb	sy
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	603b      	str	r3, [r7, #0]
}
 800ce7c:	bf00      	nop
 800ce7e:	e7fe      	b.n	800ce7e <vPortEnterCritical+0x4a>
	}
}
 800ce80:	bf00      	nop
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr
 800ce8c:	200000d4 	.word	0x200000d4
 800ce90:	e000ed04 	.word	0xe000ed04

0800ce94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce9a:	4b12      	ldr	r3, [pc, #72]	; (800cee4 <vPortExitCritical+0x50>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d10a      	bne.n	800ceb8 <vPortExitCritical+0x24>
	__asm volatile
 800cea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea6:	f383 8811 	msr	BASEPRI, r3
 800ceaa:	f3bf 8f6f 	isb	sy
 800ceae:	f3bf 8f4f 	dsb	sy
 800ceb2:	607b      	str	r3, [r7, #4]
}
 800ceb4:	bf00      	nop
 800ceb6:	e7fe      	b.n	800ceb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ceb8:	4b0a      	ldr	r3, [pc, #40]	; (800cee4 <vPortExitCritical+0x50>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	3b01      	subs	r3, #1
 800cebe:	4a09      	ldr	r2, [pc, #36]	; (800cee4 <vPortExitCritical+0x50>)
 800cec0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cec2:	4b08      	ldr	r3, [pc, #32]	; (800cee4 <vPortExitCritical+0x50>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d105      	bne.n	800ced6 <vPortExitCritical+0x42>
 800ceca:	2300      	movs	r3, #0
 800cecc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	f383 8811 	msr	BASEPRI, r3
}
 800ced4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ced6:	bf00      	nop
 800ced8:	370c      	adds	r7, #12
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	200000d4 	.word	0x200000d4
	...

0800cef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cef0:	f3ef 8009 	mrs	r0, PSP
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	4b15      	ldr	r3, [pc, #84]	; (800cf50 <pxCurrentTCBConst>)
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	f01e 0f10 	tst.w	lr, #16
 800cf00:	bf08      	it	eq
 800cf02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0a:	6010      	str	r0, [r2, #0]
 800cf0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cf14:	f380 8811 	msr	BASEPRI, r0
 800cf18:	f3bf 8f4f 	dsb	sy
 800cf1c:	f3bf 8f6f 	isb	sy
 800cf20:	f7ff f9ba 	bl	800c298 <vTaskSwitchContext>
 800cf24:	f04f 0000 	mov.w	r0, #0
 800cf28:	f380 8811 	msr	BASEPRI, r0
 800cf2c:	bc09      	pop	{r0, r3}
 800cf2e:	6819      	ldr	r1, [r3, #0]
 800cf30:	6808      	ldr	r0, [r1, #0]
 800cf32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf36:	f01e 0f10 	tst.w	lr, #16
 800cf3a:	bf08      	it	eq
 800cf3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cf40:	f380 8809 	msr	PSP, r0
 800cf44:	f3bf 8f6f 	isb	sy
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	f3af 8000 	nop.w

0800cf50 <pxCurrentTCBConst>:
 800cf50:	2000149c 	.word	0x2000149c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf54:	bf00      	nop
 800cf56:	bf00      	nop

0800cf58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf62:	f383 8811 	msr	BASEPRI, r3
 800cf66:	f3bf 8f6f 	isb	sy
 800cf6a:	f3bf 8f4f 	dsb	sy
 800cf6e:	607b      	str	r3, [r7, #4]
}
 800cf70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf72:	f7ff f8d9 	bl	800c128 <xTaskIncrementTick>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d003      	beq.n	800cf84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf7c:	4b06      	ldr	r3, [pc, #24]	; (800cf98 <SysTick_Handler+0x40>)
 800cf7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf82:	601a      	str	r2, [r3, #0]
 800cf84:	2300      	movs	r3, #0
 800cf86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	f383 8811 	msr	BASEPRI, r3
}
 800cf8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf90:	bf00      	nop
 800cf92:	3708      	adds	r7, #8
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	e000ed04 	.word	0xe000ed04

0800cf9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cfa0:	4b0b      	ldr	r3, [pc, #44]	; (800cfd0 <vPortSetupTimerInterrupt+0x34>)
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cfa6:	4b0b      	ldr	r3, [pc, #44]	; (800cfd4 <vPortSetupTimerInterrupt+0x38>)
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cfac:	4b0a      	ldr	r3, [pc, #40]	; (800cfd8 <vPortSetupTimerInterrupt+0x3c>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a0a      	ldr	r2, [pc, #40]	; (800cfdc <vPortSetupTimerInterrupt+0x40>)
 800cfb2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfb6:	099b      	lsrs	r3, r3, #6
 800cfb8:	4a09      	ldr	r2, [pc, #36]	; (800cfe0 <vPortSetupTimerInterrupt+0x44>)
 800cfba:	3b01      	subs	r3, #1
 800cfbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cfbe:	4b04      	ldr	r3, [pc, #16]	; (800cfd0 <vPortSetupTimerInterrupt+0x34>)
 800cfc0:	2207      	movs	r2, #7
 800cfc2:	601a      	str	r2, [r3, #0]
}
 800cfc4:	bf00      	nop
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	e000e010 	.word	0xe000e010
 800cfd4:	e000e018 	.word	0xe000e018
 800cfd8:	200000c8 	.word	0x200000c8
 800cfdc:	10624dd3 	.word	0x10624dd3
 800cfe0:	e000e014 	.word	0xe000e014

0800cfe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cfe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cff4 <vPortEnableVFP+0x10>
 800cfe8:	6801      	ldr	r1, [r0, #0]
 800cfea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cfee:	6001      	str	r1, [r0, #0]
 800cff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cff2:	bf00      	nop
 800cff4:	e000ed88 	.word	0xe000ed88

0800cff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cffe:	f3ef 8305 	mrs	r3, IPSR
 800d002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2b0f      	cmp	r3, #15
 800d008:	d914      	bls.n	800d034 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d00a:	4a17      	ldr	r2, [pc, #92]	; (800d068 <vPortValidateInterruptPriority+0x70>)
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	4413      	add	r3, r2
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d014:	4b15      	ldr	r3, [pc, #84]	; (800d06c <vPortValidateInterruptPriority+0x74>)
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	7afa      	ldrb	r2, [r7, #11]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d20a      	bcs.n	800d034 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d022:	f383 8811 	msr	BASEPRI, r3
 800d026:	f3bf 8f6f 	isb	sy
 800d02a:	f3bf 8f4f 	dsb	sy
 800d02e:	607b      	str	r3, [r7, #4]
}
 800d030:	bf00      	nop
 800d032:	e7fe      	b.n	800d032 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d034:	4b0e      	ldr	r3, [pc, #56]	; (800d070 <vPortValidateInterruptPriority+0x78>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d03c:	4b0d      	ldr	r3, [pc, #52]	; (800d074 <vPortValidateInterruptPriority+0x7c>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	429a      	cmp	r2, r3
 800d042:	d90a      	bls.n	800d05a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d048:	f383 8811 	msr	BASEPRI, r3
 800d04c:	f3bf 8f6f 	isb	sy
 800d050:	f3bf 8f4f 	dsb	sy
 800d054:	603b      	str	r3, [r7, #0]
}
 800d056:	bf00      	nop
 800d058:	e7fe      	b.n	800d058 <vPortValidateInterruptPriority+0x60>
	}
 800d05a:	bf00      	nop
 800d05c:	3714      	adds	r7, #20
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop
 800d068:	e000e3f0 	.word	0xe000e3f0
 800d06c:	200015c8 	.word	0x200015c8
 800d070:	e000ed0c 	.word	0xe000ed0c
 800d074:	200015cc 	.word	0x200015cc

0800d078 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b08a      	sub	sp, #40	; 0x28
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d080:	2300      	movs	r3, #0
 800d082:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d084:	f7fe ff96 	bl	800bfb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d088:	4b5b      	ldr	r3, [pc, #364]	; (800d1f8 <pvPortMalloc+0x180>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d101      	bne.n	800d094 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d090:	f000 f920 	bl	800d2d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d094:	4b59      	ldr	r3, [pc, #356]	; (800d1fc <pvPortMalloc+0x184>)
 800d096:	681a      	ldr	r2, [r3, #0]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4013      	ands	r3, r2
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	f040 8093 	bne.w	800d1c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d01d      	beq.n	800d0e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d0a8:	2208      	movs	r2, #8
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f003 0307 	and.w	r3, r3, #7
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d014      	beq.n	800d0e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f023 0307 	bic.w	r3, r3, #7
 800d0c0:	3308      	adds	r3, #8
 800d0c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f003 0307 	and.w	r3, r3, #7
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00a      	beq.n	800d0e4 <pvPortMalloc+0x6c>
	__asm volatile
 800d0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d2:	f383 8811 	msr	BASEPRI, r3
 800d0d6:	f3bf 8f6f 	isb	sy
 800d0da:	f3bf 8f4f 	dsb	sy
 800d0de:	617b      	str	r3, [r7, #20]
}
 800d0e0:	bf00      	nop
 800d0e2:	e7fe      	b.n	800d0e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d06e      	beq.n	800d1c8 <pvPortMalloc+0x150>
 800d0ea:	4b45      	ldr	r3, [pc, #276]	; (800d200 <pvPortMalloc+0x188>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d869      	bhi.n	800d1c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d0f4:	4b43      	ldr	r3, [pc, #268]	; (800d204 <pvPortMalloc+0x18c>)
 800d0f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d0f8:	4b42      	ldr	r3, [pc, #264]	; (800d204 <pvPortMalloc+0x18c>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0fe:	e004      	b.n	800d10a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d102:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	429a      	cmp	r2, r3
 800d112:	d903      	bls.n	800d11c <pvPortMalloc+0xa4>
 800d114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d1f1      	bne.n	800d100 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d11c:	4b36      	ldr	r3, [pc, #216]	; (800d1f8 <pvPortMalloc+0x180>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d122:	429a      	cmp	r2, r3
 800d124:	d050      	beq.n	800d1c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d126:	6a3b      	ldr	r3, [r7, #32]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	2208      	movs	r2, #8
 800d12c:	4413      	add	r3, r2
 800d12e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	6a3b      	ldr	r3, [r7, #32]
 800d136:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13a:	685a      	ldr	r2, [r3, #4]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	1ad2      	subs	r2, r2, r3
 800d140:	2308      	movs	r3, #8
 800d142:	005b      	lsls	r3, r3, #1
 800d144:	429a      	cmp	r2, r3
 800d146:	d91f      	bls.n	800d188 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	4413      	add	r3, r2
 800d14e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	f003 0307 	and.w	r3, r3, #7
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00a      	beq.n	800d170 <pvPortMalloc+0xf8>
	__asm volatile
 800d15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d15e:	f383 8811 	msr	BASEPRI, r3
 800d162:	f3bf 8f6f 	isb	sy
 800d166:	f3bf 8f4f 	dsb	sy
 800d16a:	613b      	str	r3, [r7, #16]
}
 800d16c:	bf00      	nop
 800d16e:	e7fe      	b.n	800d16e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d172:	685a      	ldr	r2, [r3, #4]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	1ad2      	subs	r2, r2, r3
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d182:	69b8      	ldr	r0, [r7, #24]
 800d184:	f000 f908 	bl	800d398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d188:	4b1d      	ldr	r3, [pc, #116]	; (800d200 <pvPortMalloc+0x188>)
 800d18a:	681a      	ldr	r2, [r3, #0]
 800d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	1ad3      	subs	r3, r2, r3
 800d192:	4a1b      	ldr	r2, [pc, #108]	; (800d200 <pvPortMalloc+0x188>)
 800d194:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d196:	4b1a      	ldr	r3, [pc, #104]	; (800d200 <pvPortMalloc+0x188>)
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	4b1b      	ldr	r3, [pc, #108]	; (800d208 <pvPortMalloc+0x190>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d203      	bcs.n	800d1aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d1a2:	4b17      	ldr	r3, [pc, #92]	; (800d200 <pvPortMalloc+0x188>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4a18      	ldr	r2, [pc, #96]	; (800d208 <pvPortMalloc+0x190>)
 800d1a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ac:	685a      	ldr	r2, [r3, #4]
 800d1ae:	4b13      	ldr	r3, [pc, #76]	; (800d1fc <pvPortMalloc+0x184>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	431a      	orrs	r2, r3
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d1be:	4b13      	ldr	r3, [pc, #76]	; (800d20c <pvPortMalloc+0x194>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	4a11      	ldr	r2, [pc, #68]	; (800d20c <pvPortMalloc+0x194>)
 800d1c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d1c8:	f7fe ff02 	bl	800bfd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	f003 0307 	and.w	r3, r3, #7
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d00a      	beq.n	800d1ec <pvPortMalloc+0x174>
	__asm volatile
 800d1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1da:	f383 8811 	msr	BASEPRI, r3
 800d1de:	f3bf 8f6f 	isb	sy
 800d1e2:	f3bf 8f4f 	dsb	sy
 800d1e6:	60fb      	str	r3, [r7, #12]
}
 800d1e8:	bf00      	nop
 800d1ea:	e7fe      	b.n	800d1ea <pvPortMalloc+0x172>
	return pvReturn;
 800d1ec:	69fb      	ldr	r3, [r7, #28]
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3728      	adds	r7, #40	; 0x28
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	20008b08 	.word	0x20008b08
 800d1fc:	20008b1c 	.word	0x20008b1c
 800d200:	20008b0c 	.word	0x20008b0c
 800d204:	20008b00 	.word	0x20008b00
 800d208:	20008b10 	.word	0x20008b10
 800d20c:	20008b14 	.word	0x20008b14

0800d210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b086      	sub	sp, #24
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d04d      	beq.n	800d2be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d222:	2308      	movs	r3, #8
 800d224:	425b      	negs	r3, r3
 800d226:	697a      	ldr	r2, [r7, #20]
 800d228:	4413      	add	r3, r2
 800d22a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	685a      	ldr	r2, [r3, #4]
 800d234:	4b24      	ldr	r3, [pc, #144]	; (800d2c8 <vPortFree+0xb8>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4013      	ands	r3, r2
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d10a      	bne.n	800d254 <vPortFree+0x44>
	__asm volatile
 800d23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d242:	f383 8811 	msr	BASEPRI, r3
 800d246:	f3bf 8f6f 	isb	sy
 800d24a:	f3bf 8f4f 	dsb	sy
 800d24e:	60fb      	str	r3, [r7, #12]
}
 800d250:	bf00      	nop
 800d252:	e7fe      	b.n	800d252 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d00a      	beq.n	800d272 <vPortFree+0x62>
	__asm volatile
 800d25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d260:	f383 8811 	msr	BASEPRI, r3
 800d264:	f3bf 8f6f 	isb	sy
 800d268:	f3bf 8f4f 	dsb	sy
 800d26c:	60bb      	str	r3, [r7, #8]
}
 800d26e:	bf00      	nop
 800d270:	e7fe      	b.n	800d270 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	685a      	ldr	r2, [r3, #4]
 800d276:	4b14      	ldr	r3, [pc, #80]	; (800d2c8 <vPortFree+0xb8>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4013      	ands	r3, r2
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d01e      	beq.n	800d2be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d11a      	bne.n	800d2be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	685a      	ldr	r2, [r3, #4]
 800d28c:	4b0e      	ldr	r3, [pc, #56]	; (800d2c8 <vPortFree+0xb8>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	43db      	mvns	r3, r3
 800d292:	401a      	ands	r2, r3
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d298:	f7fe fe8c 	bl	800bfb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	685a      	ldr	r2, [r3, #4]
 800d2a0:	4b0a      	ldr	r3, [pc, #40]	; (800d2cc <vPortFree+0xbc>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	4a09      	ldr	r2, [pc, #36]	; (800d2cc <vPortFree+0xbc>)
 800d2a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d2aa:	6938      	ldr	r0, [r7, #16]
 800d2ac:	f000 f874 	bl	800d398 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d2b0:	4b07      	ldr	r3, [pc, #28]	; (800d2d0 <vPortFree+0xc0>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	4a06      	ldr	r2, [pc, #24]	; (800d2d0 <vPortFree+0xc0>)
 800d2b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d2ba:	f7fe fe89 	bl	800bfd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d2be:	bf00      	nop
 800d2c0:	3718      	adds	r7, #24
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	20008b1c 	.word	0x20008b1c
 800d2cc:	20008b0c 	.word	0x20008b0c
 800d2d0:	20008b18 	.word	0x20008b18

0800d2d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b085      	sub	sp, #20
 800d2d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d2da:	f247 5330 	movw	r3, #30000	; 0x7530
 800d2de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d2e0:	4b27      	ldr	r3, [pc, #156]	; (800d380 <prvHeapInit+0xac>)
 800d2e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f003 0307 	and.w	r3, r3, #7
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00c      	beq.n	800d308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	3307      	adds	r3, #7
 800d2f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f023 0307 	bic.w	r3, r3, #7
 800d2fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d2fc:	68ba      	ldr	r2, [r7, #8]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	4a1f      	ldr	r2, [pc, #124]	; (800d380 <prvHeapInit+0xac>)
 800d304:	4413      	add	r3, r2
 800d306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d30c:	4a1d      	ldr	r2, [pc, #116]	; (800d384 <prvHeapInit+0xb0>)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d312:	4b1c      	ldr	r3, [pc, #112]	; (800d384 <prvHeapInit+0xb0>)
 800d314:	2200      	movs	r2, #0
 800d316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	4413      	add	r3, r2
 800d31e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d320:	2208      	movs	r2, #8
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	1a9b      	subs	r3, r3, r2
 800d326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f023 0307 	bic.w	r3, r3, #7
 800d32e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	4a15      	ldr	r2, [pc, #84]	; (800d388 <prvHeapInit+0xb4>)
 800d334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d336:	4b14      	ldr	r3, [pc, #80]	; (800d388 <prvHeapInit+0xb4>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2200      	movs	r2, #0
 800d33c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d33e:	4b12      	ldr	r3, [pc, #72]	; (800d388 <prvHeapInit+0xb4>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2200      	movs	r2, #0
 800d344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	1ad2      	subs	r2, r2, r3
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d354:	4b0c      	ldr	r3, [pc, #48]	; (800d388 <prvHeapInit+0xb4>)
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	4a0a      	ldr	r2, [pc, #40]	; (800d38c <prvHeapInit+0xb8>)
 800d362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	4a09      	ldr	r2, [pc, #36]	; (800d390 <prvHeapInit+0xbc>)
 800d36a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d36c:	4b09      	ldr	r3, [pc, #36]	; (800d394 <prvHeapInit+0xc0>)
 800d36e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d372:	601a      	str	r2, [r3, #0]
}
 800d374:	bf00      	nop
 800d376:	3714      	adds	r7, #20
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr
 800d380:	200015d0 	.word	0x200015d0
 800d384:	20008b00 	.word	0x20008b00
 800d388:	20008b08 	.word	0x20008b08
 800d38c:	20008b10 	.word	0x20008b10
 800d390:	20008b0c 	.word	0x20008b0c
 800d394:	20008b1c 	.word	0x20008b1c

0800d398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d3a0:	4b28      	ldr	r3, [pc, #160]	; (800d444 <prvInsertBlockIntoFreeList+0xac>)
 800d3a2:	60fb      	str	r3, [r7, #12]
 800d3a4:	e002      	b.n	800d3ac <prvInsertBlockIntoFreeList+0x14>
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	60fb      	str	r3, [r7, #12]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d8f7      	bhi.n	800d3a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	68ba      	ldr	r2, [r7, #8]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d108      	bne.n	800d3da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	685a      	ldr	r2, [r3, #4]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	441a      	add	r2, r3
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	68ba      	ldr	r2, [r7, #8]
 800d3e4:	441a      	add	r2, r3
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d118      	bne.n	800d420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	4b15      	ldr	r3, [pc, #84]	; (800d448 <prvInsertBlockIntoFreeList+0xb0>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d00d      	beq.n	800d416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	685a      	ldr	r2, [r3, #4]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	441a      	add	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	601a      	str	r2, [r3, #0]
 800d414:	e008      	b.n	800d428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d416:	4b0c      	ldr	r3, [pc, #48]	; (800d448 <prvInsertBlockIntoFreeList+0xb0>)
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	601a      	str	r2, [r3, #0]
 800d41e:	e003      	b.n	800d428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d002      	beq.n	800d436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d436:	bf00      	nop
 800d438:	3714      	adds	r7, #20
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	20008b00 	.word	0x20008b00
 800d448:	20008b08 	.word	0x20008b08

0800d44c <__cvt>:
 800d44c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d450:	ec55 4b10 	vmov	r4, r5, d0
 800d454:	2d00      	cmp	r5, #0
 800d456:	460e      	mov	r6, r1
 800d458:	4619      	mov	r1, r3
 800d45a:	462b      	mov	r3, r5
 800d45c:	bfbb      	ittet	lt
 800d45e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d462:	461d      	movlt	r5, r3
 800d464:	2300      	movge	r3, #0
 800d466:	232d      	movlt	r3, #45	; 0x2d
 800d468:	700b      	strb	r3, [r1, #0]
 800d46a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d46c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d470:	4691      	mov	r9, r2
 800d472:	f023 0820 	bic.w	r8, r3, #32
 800d476:	bfbc      	itt	lt
 800d478:	4622      	movlt	r2, r4
 800d47a:	4614      	movlt	r4, r2
 800d47c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d480:	d005      	beq.n	800d48e <__cvt+0x42>
 800d482:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d486:	d100      	bne.n	800d48a <__cvt+0x3e>
 800d488:	3601      	adds	r6, #1
 800d48a:	2102      	movs	r1, #2
 800d48c:	e000      	b.n	800d490 <__cvt+0x44>
 800d48e:	2103      	movs	r1, #3
 800d490:	ab03      	add	r3, sp, #12
 800d492:	9301      	str	r3, [sp, #4]
 800d494:	ab02      	add	r3, sp, #8
 800d496:	9300      	str	r3, [sp, #0]
 800d498:	ec45 4b10 	vmov	d0, r4, r5
 800d49c:	4653      	mov	r3, sl
 800d49e:	4632      	mov	r2, r6
 800d4a0:	f001 f92e 	bl	800e700 <_dtoa_r>
 800d4a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d4a8:	4607      	mov	r7, r0
 800d4aa:	d102      	bne.n	800d4b2 <__cvt+0x66>
 800d4ac:	f019 0f01 	tst.w	r9, #1
 800d4b0:	d022      	beq.n	800d4f8 <__cvt+0xac>
 800d4b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d4b6:	eb07 0906 	add.w	r9, r7, r6
 800d4ba:	d110      	bne.n	800d4de <__cvt+0x92>
 800d4bc:	783b      	ldrb	r3, [r7, #0]
 800d4be:	2b30      	cmp	r3, #48	; 0x30
 800d4c0:	d10a      	bne.n	800d4d8 <__cvt+0x8c>
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	4629      	mov	r1, r5
 800d4ca:	f7f3 fafd 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4ce:	b918      	cbnz	r0, 800d4d8 <__cvt+0x8c>
 800d4d0:	f1c6 0601 	rsb	r6, r6, #1
 800d4d4:	f8ca 6000 	str.w	r6, [sl]
 800d4d8:	f8da 3000 	ldr.w	r3, [sl]
 800d4dc:	4499      	add	r9, r3
 800d4de:	2200      	movs	r2, #0
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	4629      	mov	r1, r5
 800d4e6:	f7f3 faef 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4ea:	b108      	cbz	r0, 800d4f0 <__cvt+0xa4>
 800d4ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800d4f0:	2230      	movs	r2, #48	; 0x30
 800d4f2:	9b03      	ldr	r3, [sp, #12]
 800d4f4:	454b      	cmp	r3, r9
 800d4f6:	d307      	bcc.n	800d508 <__cvt+0xbc>
 800d4f8:	9b03      	ldr	r3, [sp, #12]
 800d4fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4fc:	1bdb      	subs	r3, r3, r7
 800d4fe:	4638      	mov	r0, r7
 800d500:	6013      	str	r3, [r2, #0]
 800d502:	b004      	add	sp, #16
 800d504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d508:	1c59      	adds	r1, r3, #1
 800d50a:	9103      	str	r1, [sp, #12]
 800d50c:	701a      	strb	r2, [r3, #0]
 800d50e:	e7f0      	b.n	800d4f2 <__cvt+0xa6>

0800d510 <__exponent>:
 800d510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d512:	4603      	mov	r3, r0
 800d514:	2900      	cmp	r1, #0
 800d516:	bfb8      	it	lt
 800d518:	4249      	neglt	r1, r1
 800d51a:	f803 2b02 	strb.w	r2, [r3], #2
 800d51e:	bfb4      	ite	lt
 800d520:	222d      	movlt	r2, #45	; 0x2d
 800d522:	222b      	movge	r2, #43	; 0x2b
 800d524:	2909      	cmp	r1, #9
 800d526:	7042      	strb	r2, [r0, #1]
 800d528:	dd2a      	ble.n	800d580 <__exponent+0x70>
 800d52a:	f10d 0207 	add.w	r2, sp, #7
 800d52e:	4617      	mov	r7, r2
 800d530:	260a      	movs	r6, #10
 800d532:	4694      	mov	ip, r2
 800d534:	fb91 f5f6 	sdiv	r5, r1, r6
 800d538:	fb06 1415 	mls	r4, r6, r5, r1
 800d53c:	3430      	adds	r4, #48	; 0x30
 800d53e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d542:	460c      	mov	r4, r1
 800d544:	2c63      	cmp	r4, #99	; 0x63
 800d546:	f102 32ff 	add.w	r2, r2, #4294967295
 800d54a:	4629      	mov	r1, r5
 800d54c:	dcf1      	bgt.n	800d532 <__exponent+0x22>
 800d54e:	3130      	adds	r1, #48	; 0x30
 800d550:	f1ac 0402 	sub.w	r4, ip, #2
 800d554:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d558:	1c41      	adds	r1, r0, #1
 800d55a:	4622      	mov	r2, r4
 800d55c:	42ba      	cmp	r2, r7
 800d55e:	d30a      	bcc.n	800d576 <__exponent+0x66>
 800d560:	f10d 0209 	add.w	r2, sp, #9
 800d564:	eba2 020c 	sub.w	r2, r2, ip
 800d568:	42bc      	cmp	r4, r7
 800d56a:	bf88      	it	hi
 800d56c:	2200      	movhi	r2, #0
 800d56e:	4413      	add	r3, r2
 800d570:	1a18      	subs	r0, r3, r0
 800d572:	b003      	add	sp, #12
 800d574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d576:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d57a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d57e:	e7ed      	b.n	800d55c <__exponent+0x4c>
 800d580:	2330      	movs	r3, #48	; 0x30
 800d582:	3130      	adds	r1, #48	; 0x30
 800d584:	7083      	strb	r3, [r0, #2]
 800d586:	70c1      	strb	r1, [r0, #3]
 800d588:	1d03      	adds	r3, r0, #4
 800d58a:	e7f1      	b.n	800d570 <__exponent+0x60>

0800d58c <_printf_float>:
 800d58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d590:	ed2d 8b02 	vpush	{d8}
 800d594:	b08d      	sub	sp, #52	; 0x34
 800d596:	460c      	mov	r4, r1
 800d598:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d59c:	4616      	mov	r6, r2
 800d59e:	461f      	mov	r7, r3
 800d5a0:	4605      	mov	r5, r0
 800d5a2:	f000 ff3b 	bl	800e41c <_localeconv_r>
 800d5a6:	f8d0 a000 	ldr.w	sl, [r0]
 800d5aa:	4650      	mov	r0, sl
 800d5ac:	f7f2 fe60 	bl	8000270 <strlen>
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	930a      	str	r3, [sp, #40]	; 0x28
 800d5b4:	6823      	ldr	r3, [r4, #0]
 800d5b6:	9305      	str	r3, [sp, #20]
 800d5b8:	f8d8 3000 	ldr.w	r3, [r8]
 800d5bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d5c0:	3307      	adds	r3, #7
 800d5c2:	f023 0307 	bic.w	r3, r3, #7
 800d5c6:	f103 0208 	add.w	r2, r3, #8
 800d5ca:	f8c8 2000 	str.w	r2, [r8]
 800d5ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d5d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d5d6:	9307      	str	r3, [sp, #28]
 800d5d8:	f8cd 8018 	str.w	r8, [sp, #24]
 800d5dc:	ee08 0a10 	vmov	s16, r0
 800d5e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d5e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5e8:	4b9e      	ldr	r3, [pc, #632]	; (800d864 <_printf_float+0x2d8>)
 800d5ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ee:	f7f3 fa9d 	bl	8000b2c <__aeabi_dcmpun>
 800d5f2:	bb88      	cbnz	r0, 800d658 <_printf_float+0xcc>
 800d5f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5f8:	4b9a      	ldr	r3, [pc, #616]	; (800d864 <_printf_float+0x2d8>)
 800d5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d5fe:	f7f3 fa77 	bl	8000af0 <__aeabi_dcmple>
 800d602:	bb48      	cbnz	r0, 800d658 <_printf_float+0xcc>
 800d604:	2200      	movs	r2, #0
 800d606:	2300      	movs	r3, #0
 800d608:	4640      	mov	r0, r8
 800d60a:	4649      	mov	r1, r9
 800d60c:	f7f3 fa66 	bl	8000adc <__aeabi_dcmplt>
 800d610:	b110      	cbz	r0, 800d618 <_printf_float+0x8c>
 800d612:	232d      	movs	r3, #45	; 0x2d
 800d614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d618:	4a93      	ldr	r2, [pc, #588]	; (800d868 <_printf_float+0x2dc>)
 800d61a:	4b94      	ldr	r3, [pc, #592]	; (800d86c <_printf_float+0x2e0>)
 800d61c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d620:	bf94      	ite	ls
 800d622:	4690      	movls	r8, r2
 800d624:	4698      	movhi	r8, r3
 800d626:	2303      	movs	r3, #3
 800d628:	6123      	str	r3, [r4, #16]
 800d62a:	9b05      	ldr	r3, [sp, #20]
 800d62c:	f023 0304 	bic.w	r3, r3, #4
 800d630:	6023      	str	r3, [r4, #0]
 800d632:	f04f 0900 	mov.w	r9, #0
 800d636:	9700      	str	r7, [sp, #0]
 800d638:	4633      	mov	r3, r6
 800d63a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d63c:	4621      	mov	r1, r4
 800d63e:	4628      	mov	r0, r5
 800d640:	f000 f9da 	bl	800d9f8 <_printf_common>
 800d644:	3001      	adds	r0, #1
 800d646:	f040 8090 	bne.w	800d76a <_printf_float+0x1de>
 800d64a:	f04f 30ff 	mov.w	r0, #4294967295
 800d64e:	b00d      	add	sp, #52	; 0x34
 800d650:	ecbd 8b02 	vpop	{d8}
 800d654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d658:	4642      	mov	r2, r8
 800d65a:	464b      	mov	r3, r9
 800d65c:	4640      	mov	r0, r8
 800d65e:	4649      	mov	r1, r9
 800d660:	f7f3 fa64 	bl	8000b2c <__aeabi_dcmpun>
 800d664:	b140      	cbz	r0, 800d678 <_printf_float+0xec>
 800d666:	464b      	mov	r3, r9
 800d668:	2b00      	cmp	r3, #0
 800d66a:	bfbc      	itt	lt
 800d66c:	232d      	movlt	r3, #45	; 0x2d
 800d66e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d672:	4a7f      	ldr	r2, [pc, #508]	; (800d870 <_printf_float+0x2e4>)
 800d674:	4b7f      	ldr	r3, [pc, #508]	; (800d874 <_printf_float+0x2e8>)
 800d676:	e7d1      	b.n	800d61c <_printf_float+0x90>
 800d678:	6863      	ldr	r3, [r4, #4]
 800d67a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d67e:	9206      	str	r2, [sp, #24]
 800d680:	1c5a      	adds	r2, r3, #1
 800d682:	d13f      	bne.n	800d704 <_printf_float+0x178>
 800d684:	2306      	movs	r3, #6
 800d686:	6063      	str	r3, [r4, #4]
 800d688:	9b05      	ldr	r3, [sp, #20]
 800d68a:	6861      	ldr	r1, [r4, #4]
 800d68c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d690:	2300      	movs	r3, #0
 800d692:	9303      	str	r3, [sp, #12]
 800d694:	ab0a      	add	r3, sp, #40	; 0x28
 800d696:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d69a:	ab09      	add	r3, sp, #36	; 0x24
 800d69c:	ec49 8b10 	vmov	d0, r8, r9
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	6022      	str	r2, [r4, #0]
 800d6a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	f7ff fecf 	bl	800d44c <__cvt>
 800d6ae:	9b06      	ldr	r3, [sp, #24]
 800d6b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d6b2:	2b47      	cmp	r3, #71	; 0x47
 800d6b4:	4680      	mov	r8, r0
 800d6b6:	d108      	bne.n	800d6ca <_printf_float+0x13e>
 800d6b8:	1cc8      	adds	r0, r1, #3
 800d6ba:	db02      	blt.n	800d6c2 <_printf_float+0x136>
 800d6bc:	6863      	ldr	r3, [r4, #4]
 800d6be:	4299      	cmp	r1, r3
 800d6c0:	dd41      	ble.n	800d746 <_printf_float+0x1ba>
 800d6c2:	f1ab 0302 	sub.w	r3, fp, #2
 800d6c6:	fa5f fb83 	uxtb.w	fp, r3
 800d6ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d6ce:	d820      	bhi.n	800d712 <_printf_float+0x186>
 800d6d0:	3901      	subs	r1, #1
 800d6d2:	465a      	mov	r2, fp
 800d6d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d6d8:	9109      	str	r1, [sp, #36]	; 0x24
 800d6da:	f7ff ff19 	bl	800d510 <__exponent>
 800d6de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6e0:	1813      	adds	r3, r2, r0
 800d6e2:	2a01      	cmp	r2, #1
 800d6e4:	4681      	mov	r9, r0
 800d6e6:	6123      	str	r3, [r4, #16]
 800d6e8:	dc02      	bgt.n	800d6f0 <_printf_float+0x164>
 800d6ea:	6822      	ldr	r2, [r4, #0]
 800d6ec:	07d2      	lsls	r2, r2, #31
 800d6ee:	d501      	bpl.n	800d6f4 <_printf_float+0x168>
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	6123      	str	r3, [r4, #16]
 800d6f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d09c      	beq.n	800d636 <_printf_float+0xaa>
 800d6fc:	232d      	movs	r3, #45	; 0x2d
 800d6fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d702:	e798      	b.n	800d636 <_printf_float+0xaa>
 800d704:	9a06      	ldr	r2, [sp, #24]
 800d706:	2a47      	cmp	r2, #71	; 0x47
 800d708:	d1be      	bne.n	800d688 <_printf_float+0xfc>
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1bc      	bne.n	800d688 <_printf_float+0xfc>
 800d70e:	2301      	movs	r3, #1
 800d710:	e7b9      	b.n	800d686 <_printf_float+0xfa>
 800d712:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d716:	d118      	bne.n	800d74a <_printf_float+0x1be>
 800d718:	2900      	cmp	r1, #0
 800d71a:	6863      	ldr	r3, [r4, #4]
 800d71c:	dd0b      	ble.n	800d736 <_printf_float+0x1aa>
 800d71e:	6121      	str	r1, [r4, #16]
 800d720:	b913      	cbnz	r3, 800d728 <_printf_float+0x19c>
 800d722:	6822      	ldr	r2, [r4, #0]
 800d724:	07d0      	lsls	r0, r2, #31
 800d726:	d502      	bpl.n	800d72e <_printf_float+0x1a2>
 800d728:	3301      	adds	r3, #1
 800d72a:	440b      	add	r3, r1
 800d72c:	6123      	str	r3, [r4, #16]
 800d72e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d730:	f04f 0900 	mov.w	r9, #0
 800d734:	e7de      	b.n	800d6f4 <_printf_float+0x168>
 800d736:	b913      	cbnz	r3, 800d73e <_printf_float+0x1b2>
 800d738:	6822      	ldr	r2, [r4, #0]
 800d73a:	07d2      	lsls	r2, r2, #31
 800d73c:	d501      	bpl.n	800d742 <_printf_float+0x1b6>
 800d73e:	3302      	adds	r3, #2
 800d740:	e7f4      	b.n	800d72c <_printf_float+0x1a0>
 800d742:	2301      	movs	r3, #1
 800d744:	e7f2      	b.n	800d72c <_printf_float+0x1a0>
 800d746:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d74a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d74c:	4299      	cmp	r1, r3
 800d74e:	db05      	blt.n	800d75c <_printf_float+0x1d0>
 800d750:	6823      	ldr	r3, [r4, #0]
 800d752:	6121      	str	r1, [r4, #16]
 800d754:	07d8      	lsls	r0, r3, #31
 800d756:	d5ea      	bpl.n	800d72e <_printf_float+0x1a2>
 800d758:	1c4b      	adds	r3, r1, #1
 800d75a:	e7e7      	b.n	800d72c <_printf_float+0x1a0>
 800d75c:	2900      	cmp	r1, #0
 800d75e:	bfd4      	ite	le
 800d760:	f1c1 0202 	rsble	r2, r1, #2
 800d764:	2201      	movgt	r2, #1
 800d766:	4413      	add	r3, r2
 800d768:	e7e0      	b.n	800d72c <_printf_float+0x1a0>
 800d76a:	6823      	ldr	r3, [r4, #0]
 800d76c:	055a      	lsls	r2, r3, #21
 800d76e:	d407      	bmi.n	800d780 <_printf_float+0x1f4>
 800d770:	6923      	ldr	r3, [r4, #16]
 800d772:	4642      	mov	r2, r8
 800d774:	4631      	mov	r1, r6
 800d776:	4628      	mov	r0, r5
 800d778:	47b8      	blx	r7
 800d77a:	3001      	adds	r0, #1
 800d77c:	d12c      	bne.n	800d7d8 <_printf_float+0x24c>
 800d77e:	e764      	b.n	800d64a <_printf_float+0xbe>
 800d780:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d784:	f240 80e0 	bls.w	800d948 <_printf_float+0x3bc>
 800d788:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d78c:	2200      	movs	r2, #0
 800d78e:	2300      	movs	r3, #0
 800d790:	f7f3 f99a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d794:	2800      	cmp	r0, #0
 800d796:	d034      	beq.n	800d802 <_printf_float+0x276>
 800d798:	4a37      	ldr	r2, [pc, #220]	; (800d878 <_printf_float+0x2ec>)
 800d79a:	2301      	movs	r3, #1
 800d79c:	4631      	mov	r1, r6
 800d79e:	4628      	mov	r0, r5
 800d7a0:	47b8      	blx	r7
 800d7a2:	3001      	adds	r0, #1
 800d7a4:	f43f af51 	beq.w	800d64a <_printf_float+0xbe>
 800d7a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	db02      	blt.n	800d7b6 <_printf_float+0x22a>
 800d7b0:	6823      	ldr	r3, [r4, #0]
 800d7b2:	07d8      	lsls	r0, r3, #31
 800d7b4:	d510      	bpl.n	800d7d8 <_printf_float+0x24c>
 800d7b6:	ee18 3a10 	vmov	r3, s16
 800d7ba:	4652      	mov	r2, sl
 800d7bc:	4631      	mov	r1, r6
 800d7be:	4628      	mov	r0, r5
 800d7c0:	47b8      	blx	r7
 800d7c2:	3001      	adds	r0, #1
 800d7c4:	f43f af41 	beq.w	800d64a <_printf_float+0xbe>
 800d7c8:	f04f 0800 	mov.w	r8, #0
 800d7cc:	f104 091a 	add.w	r9, r4, #26
 800d7d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	4543      	cmp	r3, r8
 800d7d6:	dc09      	bgt.n	800d7ec <_printf_float+0x260>
 800d7d8:	6823      	ldr	r3, [r4, #0]
 800d7da:	079b      	lsls	r3, r3, #30
 800d7dc:	f100 8107 	bmi.w	800d9ee <_printf_float+0x462>
 800d7e0:	68e0      	ldr	r0, [r4, #12]
 800d7e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7e4:	4298      	cmp	r0, r3
 800d7e6:	bfb8      	it	lt
 800d7e8:	4618      	movlt	r0, r3
 800d7ea:	e730      	b.n	800d64e <_printf_float+0xc2>
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	464a      	mov	r2, r9
 800d7f0:	4631      	mov	r1, r6
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	47b8      	blx	r7
 800d7f6:	3001      	adds	r0, #1
 800d7f8:	f43f af27 	beq.w	800d64a <_printf_float+0xbe>
 800d7fc:	f108 0801 	add.w	r8, r8, #1
 800d800:	e7e6      	b.n	800d7d0 <_printf_float+0x244>
 800d802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d804:	2b00      	cmp	r3, #0
 800d806:	dc39      	bgt.n	800d87c <_printf_float+0x2f0>
 800d808:	4a1b      	ldr	r2, [pc, #108]	; (800d878 <_printf_float+0x2ec>)
 800d80a:	2301      	movs	r3, #1
 800d80c:	4631      	mov	r1, r6
 800d80e:	4628      	mov	r0, r5
 800d810:	47b8      	blx	r7
 800d812:	3001      	adds	r0, #1
 800d814:	f43f af19 	beq.w	800d64a <_printf_float+0xbe>
 800d818:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d81c:	4313      	orrs	r3, r2
 800d81e:	d102      	bne.n	800d826 <_printf_float+0x29a>
 800d820:	6823      	ldr	r3, [r4, #0]
 800d822:	07d9      	lsls	r1, r3, #31
 800d824:	d5d8      	bpl.n	800d7d8 <_printf_float+0x24c>
 800d826:	ee18 3a10 	vmov	r3, s16
 800d82a:	4652      	mov	r2, sl
 800d82c:	4631      	mov	r1, r6
 800d82e:	4628      	mov	r0, r5
 800d830:	47b8      	blx	r7
 800d832:	3001      	adds	r0, #1
 800d834:	f43f af09 	beq.w	800d64a <_printf_float+0xbe>
 800d838:	f04f 0900 	mov.w	r9, #0
 800d83c:	f104 0a1a 	add.w	sl, r4, #26
 800d840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d842:	425b      	negs	r3, r3
 800d844:	454b      	cmp	r3, r9
 800d846:	dc01      	bgt.n	800d84c <_printf_float+0x2c0>
 800d848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d84a:	e792      	b.n	800d772 <_printf_float+0x1e6>
 800d84c:	2301      	movs	r3, #1
 800d84e:	4652      	mov	r2, sl
 800d850:	4631      	mov	r1, r6
 800d852:	4628      	mov	r0, r5
 800d854:	47b8      	blx	r7
 800d856:	3001      	adds	r0, #1
 800d858:	f43f aef7 	beq.w	800d64a <_printf_float+0xbe>
 800d85c:	f109 0901 	add.w	r9, r9, #1
 800d860:	e7ee      	b.n	800d840 <_printf_float+0x2b4>
 800d862:	bf00      	nop
 800d864:	7fefffff 	.word	0x7fefffff
 800d868:	08013df0 	.word	0x08013df0
 800d86c:	08013df4 	.word	0x08013df4
 800d870:	08013df8 	.word	0x08013df8
 800d874:	08013dfc 	.word	0x08013dfc
 800d878:	08014188 	.word	0x08014188
 800d87c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d87e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d880:	429a      	cmp	r2, r3
 800d882:	bfa8      	it	ge
 800d884:	461a      	movge	r2, r3
 800d886:	2a00      	cmp	r2, #0
 800d888:	4691      	mov	r9, r2
 800d88a:	dc37      	bgt.n	800d8fc <_printf_float+0x370>
 800d88c:	f04f 0b00 	mov.w	fp, #0
 800d890:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d894:	f104 021a 	add.w	r2, r4, #26
 800d898:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d89a:	9305      	str	r3, [sp, #20]
 800d89c:	eba3 0309 	sub.w	r3, r3, r9
 800d8a0:	455b      	cmp	r3, fp
 800d8a2:	dc33      	bgt.n	800d90c <_printf_float+0x380>
 800d8a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	db3b      	blt.n	800d924 <_printf_float+0x398>
 800d8ac:	6823      	ldr	r3, [r4, #0]
 800d8ae:	07da      	lsls	r2, r3, #31
 800d8b0:	d438      	bmi.n	800d924 <_printf_float+0x398>
 800d8b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d8b6:	eba2 0903 	sub.w	r9, r2, r3
 800d8ba:	9b05      	ldr	r3, [sp, #20]
 800d8bc:	1ad2      	subs	r2, r2, r3
 800d8be:	4591      	cmp	r9, r2
 800d8c0:	bfa8      	it	ge
 800d8c2:	4691      	movge	r9, r2
 800d8c4:	f1b9 0f00 	cmp.w	r9, #0
 800d8c8:	dc35      	bgt.n	800d936 <_printf_float+0x3aa>
 800d8ca:	f04f 0800 	mov.w	r8, #0
 800d8ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8d2:	f104 0a1a 	add.w	sl, r4, #26
 800d8d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d8da:	1a9b      	subs	r3, r3, r2
 800d8dc:	eba3 0309 	sub.w	r3, r3, r9
 800d8e0:	4543      	cmp	r3, r8
 800d8e2:	f77f af79 	ble.w	800d7d8 <_printf_float+0x24c>
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	4652      	mov	r2, sl
 800d8ea:	4631      	mov	r1, r6
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	47b8      	blx	r7
 800d8f0:	3001      	adds	r0, #1
 800d8f2:	f43f aeaa 	beq.w	800d64a <_printf_float+0xbe>
 800d8f6:	f108 0801 	add.w	r8, r8, #1
 800d8fa:	e7ec      	b.n	800d8d6 <_printf_float+0x34a>
 800d8fc:	4613      	mov	r3, r2
 800d8fe:	4631      	mov	r1, r6
 800d900:	4642      	mov	r2, r8
 800d902:	4628      	mov	r0, r5
 800d904:	47b8      	blx	r7
 800d906:	3001      	adds	r0, #1
 800d908:	d1c0      	bne.n	800d88c <_printf_float+0x300>
 800d90a:	e69e      	b.n	800d64a <_printf_float+0xbe>
 800d90c:	2301      	movs	r3, #1
 800d90e:	4631      	mov	r1, r6
 800d910:	4628      	mov	r0, r5
 800d912:	9205      	str	r2, [sp, #20]
 800d914:	47b8      	blx	r7
 800d916:	3001      	adds	r0, #1
 800d918:	f43f ae97 	beq.w	800d64a <_printf_float+0xbe>
 800d91c:	9a05      	ldr	r2, [sp, #20]
 800d91e:	f10b 0b01 	add.w	fp, fp, #1
 800d922:	e7b9      	b.n	800d898 <_printf_float+0x30c>
 800d924:	ee18 3a10 	vmov	r3, s16
 800d928:	4652      	mov	r2, sl
 800d92a:	4631      	mov	r1, r6
 800d92c:	4628      	mov	r0, r5
 800d92e:	47b8      	blx	r7
 800d930:	3001      	adds	r0, #1
 800d932:	d1be      	bne.n	800d8b2 <_printf_float+0x326>
 800d934:	e689      	b.n	800d64a <_printf_float+0xbe>
 800d936:	9a05      	ldr	r2, [sp, #20]
 800d938:	464b      	mov	r3, r9
 800d93a:	4442      	add	r2, r8
 800d93c:	4631      	mov	r1, r6
 800d93e:	4628      	mov	r0, r5
 800d940:	47b8      	blx	r7
 800d942:	3001      	adds	r0, #1
 800d944:	d1c1      	bne.n	800d8ca <_printf_float+0x33e>
 800d946:	e680      	b.n	800d64a <_printf_float+0xbe>
 800d948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d94a:	2a01      	cmp	r2, #1
 800d94c:	dc01      	bgt.n	800d952 <_printf_float+0x3c6>
 800d94e:	07db      	lsls	r3, r3, #31
 800d950:	d53a      	bpl.n	800d9c8 <_printf_float+0x43c>
 800d952:	2301      	movs	r3, #1
 800d954:	4642      	mov	r2, r8
 800d956:	4631      	mov	r1, r6
 800d958:	4628      	mov	r0, r5
 800d95a:	47b8      	blx	r7
 800d95c:	3001      	adds	r0, #1
 800d95e:	f43f ae74 	beq.w	800d64a <_printf_float+0xbe>
 800d962:	ee18 3a10 	vmov	r3, s16
 800d966:	4652      	mov	r2, sl
 800d968:	4631      	mov	r1, r6
 800d96a:	4628      	mov	r0, r5
 800d96c:	47b8      	blx	r7
 800d96e:	3001      	adds	r0, #1
 800d970:	f43f ae6b 	beq.w	800d64a <_printf_float+0xbe>
 800d974:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d978:	2200      	movs	r2, #0
 800d97a:	2300      	movs	r3, #0
 800d97c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d980:	f7f3 f8a2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d984:	b9d8      	cbnz	r0, 800d9be <_printf_float+0x432>
 800d986:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d98a:	f108 0201 	add.w	r2, r8, #1
 800d98e:	4631      	mov	r1, r6
 800d990:	4628      	mov	r0, r5
 800d992:	47b8      	blx	r7
 800d994:	3001      	adds	r0, #1
 800d996:	d10e      	bne.n	800d9b6 <_printf_float+0x42a>
 800d998:	e657      	b.n	800d64a <_printf_float+0xbe>
 800d99a:	2301      	movs	r3, #1
 800d99c:	4652      	mov	r2, sl
 800d99e:	4631      	mov	r1, r6
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	47b8      	blx	r7
 800d9a4:	3001      	adds	r0, #1
 800d9a6:	f43f ae50 	beq.w	800d64a <_printf_float+0xbe>
 800d9aa:	f108 0801 	add.w	r8, r8, #1
 800d9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	4543      	cmp	r3, r8
 800d9b4:	dcf1      	bgt.n	800d99a <_printf_float+0x40e>
 800d9b6:	464b      	mov	r3, r9
 800d9b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d9bc:	e6da      	b.n	800d774 <_printf_float+0x1e8>
 800d9be:	f04f 0800 	mov.w	r8, #0
 800d9c2:	f104 0a1a 	add.w	sl, r4, #26
 800d9c6:	e7f2      	b.n	800d9ae <_printf_float+0x422>
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	4642      	mov	r2, r8
 800d9cc:	e7df      	b.n	800d98e <_printf_float+0x402>
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	464a      	mov	r2, r9
 800d9d2:	4631      	mov	r1, r6
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	47b8      	blx	r7
 800d9d8:	3001      	adds	r0, #1
 800d9da:	f43f ae36 	beq.w	800d64a <_printf_float+0xbe>
 800d9de:	f108 0801 	add.w	r8, r8, #1
 800d9e2:	68e3      	ldr	r3, [r4, #12]
 800d9e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d9e6:	1a5b      	subs	r3, r3, r1
 800d9e8:	4543      	cmp	r3, r8
 800d9ea:	dcf0      	bgt.n	800d9ce <_printf_float+0x442>
 800d9ec:	e6f8      	b.n	800d7e0 <_printf_float+0x254>
 800d9ee:	f04f 0800 	mov.w	r8, #0
 800d9f2:	f104 0919 	add.w	r9, r4, #25
 800d9f6:	e7f4      	b.n	800d9e2 <_printf_float+0x456>

0800d9f8 <_printf_common>:
 800d9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9fc:	4616      	mov	r6, r2
 800d9fe:	4699      	mov	r9, r3
 800da00:	688a      	ldr	r2, [r1, #8]
 800da02:	690b      	ldr	r3, [r1, #16]
 800da04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da08:	4293      	cmp	r3, r2
 800da0a:	bfb8      	it	lt
 800da0c:	4613      	movlt	r3, r2
 800da0e:	6033      	str	r3, [r6, #0]
 800da10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da14:	4607      	mov	r7, r0
 800da16:	460c      	mov	r4, r1
 800da18:	b10a      	cbz	r2, 800da1e <_printf_common+0x26>
 800da1a:	3301      	adds	r3, #1
 800da1c:	6033      	str	r3, [r6, #0]
 800da1e:	6823      	ldr	r3, [r4, #0]
 800da20:	0699      	lsls	r1, r3, #26
 800da22:	bf42      	ittt	mi
 800da24:	6833      	ldrmi	r3, [r6, #0]
 800da26:	3302      	addmi	r3, #2
 800da28:	6033      	strmi	r3, [r6, #0]
 800da2a:	6825      	ldr	r5, [r4, #0]
 800da2c:	f015 0506 	ands.w	r5, r5, #6
 800da30:	d106      	bne.n	800da40 <_printf_common+0x48>
 800da32:	f104 0a19 	add.w	sl, r4, #25
 800da36:	68e3      	ldr	r3, [r4, #12]
 800da38:	6832      	ldr	r2, [r6, #0]
 800da3a:	1a9b      	subs	r3, r3, r2
 800da3c:	42ab      	cmp	r3, r5
 800da3e:	dc26      	bgt.n	800da8e <_printf_common+0x96>
 800da40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da44:	1e13      	subs	r3, r2, #0
 800da46:	6822      	ldr	r2, [r4, #0]
 800da48:	bf18      	it	ne
 800da4a:	2301      	movne	r3, #1
 800da4c:	0692      	lsls	r2, r2, #26
 800da4e:	d42b      	bmi.n	800daa8 <_printf_common+0xb0>
 800da50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da54:	4649      	mov	r1, r9
 800da56:	4638      	mov	r0, r7
 800da58:	47c0      	blx	r8
 800da5a:	3001      	adds	r0, #1
 800da5c:	d01e      	beq.n	800da9c <_printf_common+0xa4>
 800da5e:	6823      	ldr	r3, [r4, #0]
 800da60:	6922      	ldr	r2, [r4, #16]
 800da62:	f003 0306 	and.w	r3, r3, #6
 800da66:	2b04      	cmp	r3, #4
 800da68:	bf02      	ittt	eq
 800da6a:	68e5      	ldreq	r5, [r4, #12]
 800da6c:	6833      	ldreq	r3, [r6, #0]
 800da6e:	1aed      	subeq	r5, r5, r3
 800da70:	68a3      	ldr	r3, [r4, #8]
 800da72:	bf0c      	ite	eq
 800da74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da78:	2500      	movne	r5, #0
 800da7a:	4293      	cmp	r3, r2
 800da7c:	bfc4      	itt	gt
 800da7e:	1a9b      	subgt	r3, r3, r2
 800da80:	18ed      	addgt	r5, r5, r3
 800da82:	2600      	movs	r6, #0
 800da84:	341a      	adds	r4, #26
 800da86:	42b5      	cmp	r5, r6
 800da88:	d11a      	bne.n	800dac0 <_printf_common+0xc8>
 800da8a:	2000      	movs	r0, #0
 800da8c:	e008      	b.n	800daa0 <_printf_common+0xa8>
 800da8e:	2301      	movs	r3, #1
 800da90:	4652      	mov	r2, sl
 800da92:	4649      	mov	r1, r9
 800da94:	4638      	mov	r0, r7
 800da96:	47c0      	blx	r8
 800da98:	3001      	adds	r0, #1
 800da9a:	d103      	bne.n	800daa4 <_printf_common+0xac>
 800da9c:	f04f 30ff 	mov.w	r0, #4294967295
 800daa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daa4:	3501      	adds	r5, #1
 800daa6:	e7c6      	b.n	800da36 <_printf_common+0x3e>
 800daa8:	18e1      	adds	r1, r4, r3
 800daaa:	1c5a      	adds	r2, r3, #1
 800daac:	2030      	movs	r0, #48	; 0x30
 800daae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dab2:	4422      	add	r2, r4
 800dab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dabc:	3302      	adds	r3, #2
 800dabe:	e7c7      	b.n	800da50 <_printf_common+0x58>
 800dac0:	2301      	movs	r3, #1
 800dac2:	4622      	mov	r2, r4
 800dac4:	4649      	mov	r1, r9
 800dac6:	4638      	mov	r0, r7
 800dac8:	47c0      	blx	r8
 800daca:	3001      	adds	r0, #1
 800dacc:	d0e6      	beq.n	800da9c <_printf_common+0xa4>
 800dace:	3601      	adds	r6, #1
 800dad0:	e7d9      	b.n	800da86 <_printf_common+0x8e>
	...

0800dad4 <_printf_i>:
 800dad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dad8:	7e0f      	ldrb	r7, [r1, #24]
 800dada:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dadc:	2f78      	cmp	r7, #120	; 0x78
 800dade:	4691      	mov	r9, r2
 800dae0:	4680      	mov	r8, r0
 800dae2:	460c      	mov	r4, r1
 800dae4:	469a      	mov	sl, r3
 800dae6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800daea:	d807      	bhi.n	800dafc <_printf_i+0x28>
 800daec:	2f62      	cmp	r7, #98	; 0x62
 800daee:	d80a      	bhi.n	800db06 <_printf_i+0x32>
 800daf0:	2f00      	cmp	r7, #0
 800daf2:	f000 80d4 	beq.w	800dc9e <_printf_i+0x1ca>
 800daf6:	2f58      	cmp	r7, #88	; 0x58
 800daf8:	f000 80c0 	beq.w	800dc7c <_printf_i+0x1a8>
 800dafc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db04:	e03a      	b.n	800db7c <_printf_i+0xa8>
 800db06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db0a:	2b15      	cmp	r3, #21
 800db0c:	d8f6      	bhi.n	800dafc <_printf_i+0x28>
 800db0e:	a101      	add	r1, pc, #4	; (adr r1, 800db14 <_printf_i+0x40>)
 800db10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db14:	0800db6d 	.word	0x0800db6d
 800db18:	0800db81 	.word	0x0800db81
 800db1c:	0800dafd 	.word	0x0800dafd
 800db20:	0800dafd 	.word	0x0800dafd
 800db24:	0800dafd 	.word	0x0800dafd
 800db28:	0800dafd 	.word	0x0800dafd
 800db2c:	0800db81 	.word	0x0800db81
 800db30:	0800dafd 	.word	0x0800dafd
 800db34:	0800dafd 	.word	0x0800dafd
 800db38:	0800dafd 	.word	0x0800dafd
 800db3c:	0800dafd 	.word	0x0800dafd
 800db40:	0800dc85 	.word	0x0800dc85
 800db44:	0800dbad 	.word	0x0800dbad
 800db48:	0800dc3f 	.word	0x0800dc3f
 800db4c:	0800dafd 	.word	0x0800dafd
 800db50:	0800dafd 	.word	0x0800dafd
 800db54:	0800dca7 	.word	0x0800dca7
 800db58:	0800dafd 	.word	0x0800dafd
 800db5c:	0800dbad 	.word	0x0800dbad
 800db60:	0800dafd 	.word	0x0800dafd
 800db64:	0800dafd 	.word	0x0800dafd
 800db68:	0800dc47 	.word	0x0800dc47
 800db6c:	682b      	ldr	r3, [r5, #0]
 800db6e:	1d1a      	adds	r2, r3, #4
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	602a      	str	r2, [r5, #0]
 800db74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db7c:	2301      	movs	r3, #1
 800db7e:	e09f      	b.n	800dcc0 <_printf_i+0x1ec>
 800db80:	6820      	ldr	r0, [r4, #0]
 800db82:	682b      	ldr	r3, [r5, #0]
 800db84:	0607      	lsls	r7, r0, #24
 800db86:	f103 0104 	add.w	r1, r3, #4
 800db8a:	6029      	str	r1, [r5, #0]
 800db8c:	d501      	bpl.n	800db92 <_printf_i+0xbe>
 800db8e:	681e      	ldr	r6, [r3, #0]
 800db90:	e003      	b.n	800db9a <_printf_i+0xc6>
 800db92:	0646      	lsls	r6, r0, #25
 800db94:	d5fb      	bpl.n	800db8e <_printf_i+0xba>
 800db96:	f9b3 6000 	ldrsh.w	r6, [r3]
 800db9a:	2e00      	cmp	r6, #0
 800db9c:	da03      	bge.n	800dba6 <_printf_i+0xd2>
 800db9e:	232d      	movs	r3, #45	; 0x2d
 800dba0:	4276      	negs	r6, r6
 800dba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dba6:	485a      	ldr	r0, [pc, #360]	; (800dd10 <_printf_i+0x23c>)
 800dba8:	230a      	movs	r3, #10
 800dbaa:	e012      	b.n	800dbd2 <_printf_i+0xfe>
 800dbac:	682b      	ldr	r3, [r5, #0]
 800dbae:	6820      	ldr	r0, [r4, #0]
 800dbb0:	1d19      	adds	r1, r3, #4
 800dbb2:	6029      	str	r1, [r5, #0]
 800dbb4:	0605      	lsls	r5, r0, #24
 800dbb6:	d501      	bpl.n	800dbbc <_printf_i+0xe8>
 800dbb8:	681e      	ldr	r6, [r3, #0]
 800dbba:	e002      	b.n	800dbc2 <_printf_i+0xee>
 800dbbc:	0641      	lsls	r1, r0, #25
 800dbbe:	d5fb      	bpl.n	800dbb8 <_printf_i+0xe4>
 800dbc0:	881e      	ldrh	r6, [r3, #0]
 800dbc2:	4853      	ldr	r0, [pc, #332]	; (800dd10 <_printf_i+0x23c>)
 800dbc4:	2f6f      	cmp	r7, #111	; 0x6f
 800dbc6:	bf0c      	ite	eq
 800dbc8:	2308      	moveq	r3, #8
 800dbca:	230a      	movne	r3, #10
 800dbcc:	2100      	movs	r1, #0
 800dbce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dbd2:	6865      	ldr	r5, [r4, #4]
 800dbd4:	60a5      	str	r5, [r4, #8]
 800dbd6:	2d00      	cmp	r5, #0
 800dbd8:	bfa2      	ittt	ge
 800dbda:	6821      	ldrge	r1, [r4, #0]
 800dbdc:	f021 0104 	bicge.w	r1, r1, #4
 800dbe0:	6021      	strge	r1, [r4, #0]
 800dbe2:	b90e      	cbnz	r6, 800dbe8 <_printf_i+0x114>
 800dbe4:	2d00      	cmp	r5, #0
 800dbe6:	d04b      	beq.n	800dc80 <_printf_i+0x1ac>
 800dbe8:	4615      	mov	r5, r2
 800dbea:	fbb6 f1f3 	udiv	r1, r6, r3
 800dbee:	fb03 6711 	mls	r7, r3, r1, r6
 800dbf2:	5dc7      	ldrb	r7, [r0, r7]
 800dbf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dbf8:	4637      	mov	r7, r6
 800dbfa:	42bb      	cmp	r3, r7
 800dbfc:	460e      	mov	r6, r1
 800dbfe:	d9f4      	bls.n	800dbea <_printf_i+0x116>
 800dc00:	2b08      	cmp	r3, #8
 800dc02:	d10b      	bne.n	800dc1c <_printf_i+0x148>
 800dc04:	6823      	ldr	r3, [r4, #0]
 800dc06:	07de      	lsls	r6, r3, #31
 800dc08:	d508      	bpl.n	800dc1c <_printf_i+0x148>
 800dc0a:	6923      	ldr	r3, [r4, #16]
 800dc0c:	6861      	ldr	r1, [r4, #4]
 800dc0e:	4299      	cmp	r1, r3
 800dc10:	bfde      	ittt	le
 800dc12:	2330      	movle	r3, #48	; 0x30
 800dc14:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc18:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc1c:	1b52      	subs	r2, r2, r5
 800dc1e:	6122      	str	r2, [r4, #16]
 800dc20:	f8cd a000 	str.w	sl, [sp]
 800dc24:	464b      	mov	r3, r9
 800dc26:	aa03      	add	r2, sp, #12
 800dc28:	4621      	mov	r1, r4
 800dc2a:	4640      	mov	r0, r8
 800dc2c:	f7ff fee4 	bl	800d9f8 <_printf_common>
 800dc30:	3001      	adds	r0, #1
 800dc32:	d14a      	bne.n	800dcca <_printf_i+0x1f6>
 800dc34:	f04f 30ff 	mov.w	r0, #4294967295
 800dc38:	b004      	add	sp, #16
 800dc3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc3e:	6823      	ldr	r3, [r4, #0]
 800dc40:	f043 0320 	orr.w	r3, r3, #32
 800dc44:	6023      	str	r3, [r4, #0]
 800dc46:	4833      	ldr	r0, [pc, #204]	; (800dd14 <_printf_i+0x240>)
 800dc48:	2778      	movs	r7, #120	; 0x78
 800dc4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dc4e:	6823      	ldr	r3, [r4, #0]
 800dc50:	6829      	ldr	r1, [r5, #0]
 800dc52:	061f      	lsls	r7, r3, #24
 800dc54:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc58:	d402      	bmi.n	800dc60 <_printf_i+0x18c>
 800dc5a:	065f      	lsls	r7, r3, #25
 800dc5c:	bf48      	it	mi
 800dc5e:	b2b6      	uxthmi	r6, r6
 800dc60:	07df      	lsls	r7, r3, #31
 800dc62:	bf48      	it	mi
 800dc64:	f043 0320 	orrmi.w	r3, r3, #32
 800dc68:	6029      	str	r1, [r5, #0]
 800dc6a:	bf48      	it	mi
 800dc6c:	6023      	strmi	r3, [r4, #0]
 800dc6e:	b91e      	cbnz	r6, 800dc78 <_printf_i+0x1a4>
 800dc70:	6823      	ldr	r3, [r4, #0]
 800dc72:	f023 0320 	bic.w	r3, r3, #32
 800dc76:	6023      	str	r3, [r4, #0]
 800dc78:	2310      	movs	r3, #16
 800dc7a:	e7a7      	b.n	800dbcc <_printf_i+0xf8>
 800dc7c:	4824      	ldr	r0, [pc, #144]	; (800dd10 <_printf_i+0x23c>)
 800dc7e:	e7e4      	b.n	800dc4a <_printf_i+0x176>
 800dc80:	4615      	mov	r5, r2
 800dc82:	e7bd      	b.n	800dc00 <_printf_i+0x12c>
 800dc84:	682b      	ldr	r3, [r5, #0]
 800dc86:	6826      	ldr	r6, [r4, #0]
 800dc88:	6961      	ldr	r1, [r4, #20]
 800dc8a:	1d18      	adds	r0, r3, #4
 800dc8c:	6028      	str	r0, [r5, #0]
 800dc8e:	0635      	lsls	r5, r6, #24
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	d501      	bpl.n	800dc98 <_printf_i+0x1c4>
 800dc94:	6019      	str	r1, [r3, #0]
 800dc96:	e002      	b.n	800dc9e <_printf_i+0x1ca>
 800dc98:	0670      	lsls	r0, r6, #25
 800dc9a:	d5fb      	bpl.n	800dc94 <_printf_i+0x1c0>
 800dc9c:	8019      	strh	r1, [r3, #0]
 800dc9e:	2300      	movs	r3, #0
 800dca0:	6123      	str	r3, [r4, #16]
 800dca2:	4615      	mov	r5, r2
 800dca4:	e7bc      	b.n	800dc20 <_printf_i+0x14c>
 800dca6:	682b      	ldr	r3, [r5, #0]
 800dca8:	1d1a      	adds	r2, r3, #4
 800dcaa:	602a      	str	r2, [r5, #0]
 800dcac:	681d      	ldr	r5, [r3, #0]
 800dcae:	6862      	ldr	r2, [r4, #4]
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	f7f2 fa8c 	bl	80001d0 <memchr>
 800dcb8:	b108      	cbz	r0, 800dcbe <_printf_i+0x1ea>
 800dcba:	1b40      	subs	r0, r0, r5
 800dcbc:	6060      	str	r0, [r4, #4]
 800dcbe:	6863      	ldr	r3, [r4, #4]
 800dcc0:	6123      	str	r3, [r4, #16]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcc8:	e7aa      	b.n	800dc20 <_printf_i+0x14c>
 800dcca:	6923      	ldr	r3, [r4, #16]
 800dccc:	462a      	mov	r2, r5
 800dcce:	4649      	mov	r1, r9
 800dcd0:	4640      	mov	r0, r8
 800dcd2:	47d0      	blx	sl
 800dcd4:	3001      	adds	r0, #1
 800dcd6:	d0ad      	beq.n	800dc34 <_printf_i+0x160>
 800dcd8:	6823      	ldr	r3, [r4, #0]
 800dcda:	079b      	lsls	r3, r3, #30
 800dcdc:	d413      	bmi.n	800dd06 <_printf_i+0x232>
 800dcde:	68e0      	ldr	r0, [r4, #12]
 800dce0:	9b03      	ldr	r3, [sp, #12]
 800dce2:	4298      	cmp	r0, r3
 800dce4:	bfb8      	it	lt
 800dce6:	4618      	movlt	r0, r3
 800dce8:	e7a6      	b.n	800dc38 <_printf_i+0x164>
 800dcea:	2301      	movs	r3, #1
 800dcec:	4632      	mov	r2, r6
 800dcee:	4649      	mov	r1, r9
 800dcf0:	4640      	mov	r0, r8
 800dcf2:	47d0      	blx	sl
 800dcf4:	3001      	adds	r0, #1
 800dcf6:	d09d      	beq.n	800dc34 <_printf_i+0x160>
 800dcf8:	3501      	adds	r5, #1
 800dcfa:	68e3      	ldr	r3, [r4, #12]
 800dcfc:	9903      	ldr	r1, [sp, #12]
 800dcfe:	1a5b      	subs	r3, r3, r1
 800dd00:	42ab      	cmp	r3, r5
 800dd02:	dcf2      	bgt.n	800dcea <_printf_i+0x216>
 800dd04:	e7eb      	b.n	800dcde <_printf_i+0x20a>
 800dd06:	2500      	movs	r5, #0
 800dd08:	f104 0619 	add.w	r6, r4, #25
 800dd0c:	e7f5      	b.n	800dcfa <_printf_i+0x226>
 800dd0e:	bf00      	nop
 800dd10:	08013e00 	.word	0x08013e00
 800dd14:	08013e11 	.word	0x08013e11

0800dd18 <_scanf_float>:
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	b087      	sub	sp, #28
 800dd1e:	4617      	mov	r7, r2
 800dd20:	9303      	str	r3, [sp, #12]
 800dd22:	688b      	ldr	r3, [r1, #8]
 800dd24:	1e5a      	subs	r2, r3, #1
 800dd26:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dd2a:	bf83      	ittte	hi
 800dd2c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dd30:	195b      	addhi	r3, r3, r5
 800dd32:	9302      	strhi	r3, [sp, #8]
 800dd34:	2300      	movls	r3, #0
 800dd36:	bf86      	itte	hi
 800dd38:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dd3c:	608b      	strhi	r3, [r1, #8]
 800dd3e:	9302      	strls	r3, [sp, #8]
 800dd40:	680b      	ldr	r3, [r1, #0]
 800dd42:	468b      	mov	fp, r1
 800dd44:	2500      	movs	r5, #0
 800dd46:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800dd4a:	f84b 3b1c 	str.w	r3, [fp], #28
 800dd4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800dd52:	4680      	mov	r8, r0
 800dd54:	460c      	mov	r4, r1
 800dd56:	465e      	mov	r6, fp
 800dd58:	46aa      	mov	sl, r5
 800dd5a:	46a9      	mov	r9, r5
 800dd5c:	9501      	str	r5, [sp, #4]
 800dd5e:	68a2      	ldr	r2, [r4, #8]
 800dd60:	b152      	cbz	r2, 800dd78 <_scanf_float+0x60>
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	2b4e      	cmp	r3, #78	; 0x4e
 800dd68:	d864      	bhi.n	800de34 <_scanf_float+0x11c>
 800dd6a:	2b40      	cmp	r3, #64	; 0x40
 800dd6c:	d83c      	bhi.n	800dde8 <_scanf_float+0xd0>
 800dd6e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800dd72:	b2c8      	uxtb	r0, r1
 800dd74:	280e      	cmp	r0, #14
 800dd76:	d93a      	bls.n	800ddee <_scanf_float+0xd6>
 800dd78:	f1b9 0f00 	cmp.w	r9, #0
 800dd7c:	d003      	beq.n	800dd86 <_scanf_float+0x6e>
 800dd7e:	6823      	ldr	r3, [r4, #0]
 800dd80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd84:	6023      	str	r3, [r4, #0]
 800dd86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd8a:	f1ba 0f01 	cmp.w	sl, #1
 800dd8e:	f200 8113 	bhi.w	800dfb8 <_scanf_float+0x2a0>
 800dd92:	455e      	cmp	r6, fp
 800dd94:	f200 8105 	bhi.w	800dfa2 <_scanf_float+0x28a>
 800dd98:	2501      	movs	r5, #1
 800dd9a:	4628      	mov	r0, r5
 800dd9c:	b007      	add	sp, #28
 800dd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800dda6:	2a0d      	cmp	r2, #13
 800dda8:	d8e6      	bhi.n	800dd78 <_scanf_float+0x60>
 800ddaa:	a101      	add	r1, pc, #4	; (adr r1, 800ddb0 <_scanf_float+0x98>)
 800ddac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ddb0:	0800deef 	.word	0x0800deef
 800ddb4:	0800dd79 	.word	0x0800dd79
 800ddb8:	0800dd79 	.word	0x0800dd79
 800ddbc:	0800dd79 	.word	0x0800dd79
 800ddc0:	0800df4f 	.word	0x0800df4f
 800ddc4:	0800df27 	.word	0x0800df27
 800ddc8:	0800dd79 	.word	0x0800dd79
 800ddcc:	0800dd79 	.word	0x0800dd79
 800ddd0:	0800defd 	.word	0x0800defd
 800ddd4:	0800dd79 	.word	0x0800dd79
 800ddd8:	0800dd79 	.word	0x0800dd79
 800dddc:	0800dd79 	.word	0x0800dd79
 800dde0:	0800dd79 	.word	0x0800dd79
 800dde4:	0800deb5 	.word	0x0800deb5
 800dde8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ddec:	e7db      	b.n	800dda6 <_scanf_float+0x8e>
 800ddee:	290e      	cmp	r1, #14
 800ddf0:	d8c2      	bhi.n	800dd78 <_scanf_float+0x60>
 800ddf2:	a001      	add	r0, pc, #4	; (adr r0, 800ddf8 <_scanf_float+0xe0>)
 800ddf4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ddf8:	0800dea7 	.word	0x0800dea7
 800ddfc:	0800dd79 	.word	0x0800dd79
 800de00:	0800dea7 	.word	0x0800dea7
 800de04:	0800df3b 	.word	0x0800df3b
 800de08:	0800dd79 	.word	0x0800dd79
 800de0c:	0800de55 	.word	0x0800de55
 800de10:	0800de91 	.word	0x0800de91
 800de14:	0800de91 	.word	0x0800de91
 800de18:	0800de91 	.word	0x0800de91
 800de1c:	0800de91 	.word	0x0800de91
 800de20:	0800de91 	.word	0x0800de91
 800de24:	0800de91 	.word	0x0800de91
 800de28:	0800de91 	.word	0x0800de91
 800de2c:	0800de91 	.word	0x0800de91
 800de30:	0800de91 	.word	0x0800de91
 800de34:	2b6e      	cmp	r3, #110	; 0x6e
 800de36:	d809      	bhi.n	800de4c <_scanf_float+0x134>
 800de38:	2b60      	cmp	r3, #96	; 0x60
 800de3a:	d8b2      	bhi.n	800dda2 <_scanf_float+0x8a>
 800de3c:	2b54      	cmp	r3, #84	; 0x54
 800de3e:	d077      	beq.n	800df30 <_scanf_float+0x218>
 800de40:	2b59      	cmp	r3, #89	; 0x59
 800de42:	d199      	bne.n	800dd78 <_scanf_float+0x60>
 800de44:	2d07      	cmp	r5, #7
 800de46:	d197      	bne.n	800dd78 <_scanf_float+0x60>
 800de48:	2508      	movs	r5, #8
 800de4a:	e029      	b.n	800dea0 <_scanf_float+0x188>
 800de4c:	2b74      	cmp	r3, #116	; 0x74
 800de4e:	d06f      	beq.n	800df30 <_scanf_float+0x218>
 800de50:	2b79      	cmp	r3, #121	; 0x79
 800de52:	e7f6      	b.n	800de42 <_scanf_float+0x12a>
 800de54:	6821      	ldr	r1, [r4, #0]
 800de56:	05c8      	lsls	r0, r1, #23
 800de58:	d51a      	bpl.n	800de90 <_scanf_float+0x178>
 800de5a:	9b02      	ldr	r3, [sp, #8]
 800de5c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800de60:	6021      	str	r1, [r4, #0]
 800de62:	f109 0901 	add.w	r9, r9, #1
 800de66:	b11b      	cbz	r3, 800de70 <_scanf_float+0x158>
 800de68:	3b01      	subs	r3, #1
 800de6a:	3201      	adds	r2, #1
 800de6c:	9302      	str	r3, [sp, #8]
 800de6e:	60a2      	str	r2, [r4, #8]
 800de70:	68a3      	ldr	r3, [r4, #8]
 800de72:	3b01      	subs	r3, #1
 800de74:	60a3      	str	r3, [r4, #8]
 800de76:	6923      	ldr	r3, [r4, #16]
 800de78:	3301      	adds	r3, #1
 800de7a:	6123      	str	r3, [r4, #16]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	3b01      	subs	r3, #1
 800de80:	2b00      	cmp	r3, #0
 800de82:	607b      	str	r3, [r7, #4]
 800de84:	f340 8084 	ble.w	800df90 <_scanf_float+0x278>
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	3301      	adds	r3, #1
 800de8c:	603b      	str	r3, [r7, #0]
 800de8e:	e766      	b.n	800dd5e <_scanf_float+0x46>
 800de90:	eb1a 0f05 	cmn.w	sl, r5
 800de94:	f47f af70 	bne.w	800dd78 <_scanf_float+0x60>
 800de98:	6822      	ldr	r2, [r4, #0]
 800de9a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800de9e:	6022      	str	r2, [r4, #0]
 800dea0:	f806 3b01 	strb.w	r3, [r6], #1
 800dea4:	e7e4      	b.n	800de70 <_scanf_float+0x158>
 800dea6:	6822      	ldr	r2, [r4, #0]
 800dea8:	0610      	lsls	r0, r2, #24
 800deaa:	f57f af65 	bpl.w	800dd78 <_scanf_float+0x60>
 800deae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800deb2:	e7f4      	b.n	800de9e <_scanf_float+0x186>
 800deb4:	f1ba 0f00 	cmp.w	sl, #0
 800deb8:	d10e      	bne.n	800ded8 <_scanf_float+0x1c0>
 800deba:	f1b9 0f00 	cmp.w	r9, #0
 800debe:	d10e      	bne.n	800dede <_scanf_float+0x1c6>
 800dec0:	6822      	ldr	r2, [r4, #0]
 800dec2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dec6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800deca:	d108      	bne.n	800dede <_scanf_float+0x1c6>
 800decc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ded0:	6022      	str	r2, [r4, #0]
 800ded2:	f04f 0a01 	mov.w	sl, #1
 800ded6:	e7e3      	b.n	800dea0 <_scanf_float+0x188>
 800ded8:	f1ba 0f02 	cmp.w	sl, #2
 800dedc:	d055      	beq.n	800df8a <_scanf_float+0x272>
 800dede:	2d01      	cmp	r5, #1
 800dee0:	d002      	beq.n	800dee8 <_scanf_float+0x1d0>
 800dee2:	2d04      	cmp	r5, #4
 800dee4:	f47f af48 	bne.w	800dd78 <_scanf_float+0x60>
 800dee8:	3501      	adds	r5, #1
 800deea:	b2ed      	uxtb	r5, r5
 800deec:	e7d8      	b.n	800dea0 <_scanf_float+0x188>
 800deee:	f1ba 0f01 	cmp.w	sl, #1
 800def2:	f47f af41 	bne.w	800dd78 <_scanf_float+0x60>
 800def6:	f04f 0a02 	mov.w	sl, #2
 800defa:	e7d1      	b.n	800dea0 <_scanf_float+0x188>
 800defc:	b97d      	cbnz	r5, 800df1e <_scanf_float+0x206>
 800defe:	f1b9 0f00 	cmp.w	r9, #0
 800df02:	f47f af3c 	bne.w	800dd7e <_scanf_float+0x66>
 800df06:	6822      	ldr	r2, [r4, #0]
 800df08:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800df0c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800df10:	f47f af39 	bne.w	800dd86 <_scanf_float+0x6e>
 800df14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800df18:	6022      	str	r2, [r4, #0]
 800df1a:	2501      	movs	r5, #1
 800df1c:	e7c0      	b.n	800dea0 <_scanf_float+0x188>
 800df1e:	2d03      	cmp	r5, #3
 800df20:	d0e2      	beq.n	800dee8 <_scanf_float+0x1d0>
 800df22:	2d05      	cmp	r5, #5
 800df24:	e7de      	b.n	800dee4 <_scanf_float+0x1cc>
 800df26:	2d02      	cmp	r5, #2
 800df28:	f47f af26 	bne.w	800dd78 <_scanf_float+0x60>
 800df2c:	2503      	movs	r5, #3
 800df2e:	e7b7      	b.n	800dea0 <_scanf_float+0x188>
 800df30:	2d06      	cmp	r5, #6
 800df32:	f47f af21 	bne.w	800dd78 <_scanf_float+0x60>
 800df36:	2507      	movs	r5, #7
 800df38:	e7b2      	b.n	800dea0 <_scanf_float+0x188>
 800df3a:	6822      	ldr	r2, [r4, #0]
 800df3c:	0591      	lsls	r1, r2, #22
 800df3e:	f57f af1b 	bpl.w	800dd78 <_scanf_float+0x60>
 800df42:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800df46:	6022      	str	r2, [r4, #0]
 800df48:	f8cd 9004 	str.w	r9, [sp, #4]
 800df4c:	e7a8      	b.n	800dea0 <_scanf_float+0x188>
 800df4e:	6822      	ldr	r2, [r4, #0]
 800df50:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800df54:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800df58:	d006      	beq.n	800df68 <_scanf_float+0x250>
 800df5a:	0550      	lsls	r0, r2, #21
 800df5c:	f57f af0c 	bpl.w	800dd78 <_scanf_float+0x60>
 800df60:	f1b9 0f00 	cmp.w	r9, #0
 800df64:	f43f af0f 	beq.w	800dd86 <_scanf_float+0x6e>
 800df68:	0591      	lsls	r1, r2, #22
 800df6a:	bf58      	it	pl
 800df6c:	9901      	ldrpl	r1, [sp, #4]
 800df6e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800df72:	bf58      	it	pl
 800df74:	eba9 0101 	subpl.w	r1, r9, r1
 800df78:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800df7c:	bf58      	it	pl
 800df7e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800df82:	6022      	str	r2, [r4, #0]
 800df84:	f04f 0900 	mov.w	r9, #0
 800df88:	e78a      	b.n	800dea0 <_scanf_float+0x188>
 800df8a:	f04f 0a03 	mov.w	sl, #3
 800df8e:	e787      	b.n	800dea0 <_scanf_float+0x188>
 800df90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800df94:	4639      	mov	r1, r7
 800df96:	4640      	mov	r0, r8
 800df98:	4798      	blx	r3
 800df9a:	2800      	cmp	r0, #0
 800df9c:	f43f aedf 	beq.w	800dd5e <_scanf_float+0x46>
 800dfa0:	e6ea      	b.n	800dd78 <_scanf_float+0x60>
 800dfa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dfa6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dfaa:	463a      	mov	r2, r7
 800dfac:	4640      	mov	r0, r8
 800dfae:	4798      	blx	r3
 800dfb0:	6923      	ldr	r3, [r4, #16]
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	6123      	str	r3, [r4, #16]
 800dfb6:	e6ec      	b.n	800dd92 <_scanf_float+0x7a>
 800dfb8:	1e6b      	subs	r3, r5, #1
 800dfba:	2b06      	cmp	r3, #6
 800dfbc:	d825      	bhi.n	800e00a <_scanf_float+0x2f2>
 800dfbe:	2d02      	cmp	r5, #2
 800dfc0:	d836      	bhi.n	800e030 <_scanf_float+0x318>
 800dfc2:	455e      	cmp	r6, fp
 800dfc4:	f67f aee8 	bls.w	800dd98 <_scanf_float+0x80>
 800dfc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dfcc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dfd0:	463a      	mov	r2, r7
 800dfd2:	4640      	mov	r0, r8
 800dfd4:	4798      	blx	r3
 800dfd6:	6923      	ldr	r3, [r4, #16]
 800dfd8:	3b01      	subs	r3, #1
 800dfda:	6123      	str	r3, [r4, #16]
 800dfdc:	e7f1      	b.n	800dfc2 <_scanf_float+0x2aa>
 800dfde:	9802      	ldr	r0, [sp, #8]
 800dfe0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dfe4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800dfe8:	9002      	str	r0, [sp, #8]
 800dfea:	463a      	mov	r2, r7
 800dfec:	4640      	mov	r0, r8
 800dfee:	4798      	blx	r3
 800dff0:	6923      	ldr	r3, [r4, #16]
 800dff2:	3b01      	subs	r3, #1
 800dff4:	6123      	str	r3, [r4, #16]
 800dff6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dffa:	fa5f fa8a 	uxtb.w	sl, sl
 800dffe:	f1ba 0f02 	cmp.w	sl, #2
 800e002:	d1ec      	bne.n	800dfde <_scanf_float+0x2c6>
 800e004:	3d03      	subs	r5, #3
 800e006:	b2ed      	uxtb	r5, r5
 800e008:	1b76      	subs	r6, r6, r5
 800e00a:	6823      	ldr	r3, [r4, #0]
 800e00c:	05da      	lsls	r2, r3, #23
 800e00e:	d52f      	bpl.n	800e070 <_scanf_float+0x358>
 800e010:	055b      	lsls	r3, r3, #21
 800e012:	d510      	bpl.n	800e036 <_scanf_float+0x31e>
 800e014:	455e      	cmp	r6, fp
 800e016:	f67f aebf 	bls.w	800dd98 <_scanf_float+0x80>
 800e01a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e01e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e022:	463a      	mov	r2, r7
 800e024:	4640      	mov	r0, r8
 800e026:	4798      	blx	r3
 800e028:	6923      	ldr	r3, [r4, #16]
 800e02a:	3b01      	subs	r3, #1
 800e02c:	6123      	str	r3, [r4, #16]
 800e02e:	e7f1      	b.n	800e014 <_scanf_float+0x2fc>
 800e030:	46aa      	mov	sl, r5
 800e032:	9602      	str	r6, [sp, #8]
 800e034:	e7df      	b.n	800dff6 <_scanf_float+0x2de>
 800e036:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e03a:	6923      	ldr	r3, [r4, #16]
 800e03c:	2965      	cmp	r1, #101	; 0x65
 800e03e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e042:	f106 35ff 	add.w	r5, r6, #4294967295
 800e046:	6123      	str	r3, [r4, #16]
 800e048:	d00c      	beq.n	800e064 <_scanf_float+0x34c>
 800e04a:	2945      	cmp	r1, #69	; 0x45
 800e04c:	d00a      	beq.n	800e064 <_scanf_float+0x34c>
 800e04e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e052:	463a      	mov	r2, r7
 800e054:	4640      	mov	r0, r8
 800e056:	4798      	blx	r3
 800e058:	6923      	ldr	r3, [r4, #16]
 800e05a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e05e:	3b01      	subs	r3, #1
 800e060:	1eb5      	subs	r5, r6, #2
 800e062:	6123      	str	r3, [r4, #16]
 800e064:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e068:	463a      	mov	r2, r7
 800e06a:	4640      	mov	r0, r8
 800e06c:	4798      	blx	r3
 800e06e:	462e      	mov	r6, r5
 800e070:	6825      	ldr	r5, [r4, #0]
 800e072:	f015 0510 	ands.w	r5, r5, #16
 800e076:	d158      	bne.n	800e12a <_scanf_float+0x412>
 800e078:	7035      	strb	r5, [r6, #0]
 800e07a:	6823      	ldr	r3, [r4, #0]
 800e07c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e084:	d11c      	bne.n	800e0c0 <_scanf_float+0x3a8>
 800e086:	9b01      	ldr	r3, [sp, #4]
 800e088:	454b      	cmp	r3, r9
 800e08a:	eba3 0209 	sub.w	r2, r3, r9
 800e08e:	d124      	bne.n	800e0da <_scanf_float+0x3c2>
 800e090:	2200      	movs	r2, #0
 800e092:	4659      	mov	r1, fp
 800e094:	4640      	mov	r0, r8
 800e096:	f002 fcdf 	bl	8010a58 <_strtod_r>
 800e09a:	9b03      	ldr	r3, [sp, #12]
 800e09c:	6821      	ldr	r1, [r4, #0]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f011 0f02 	tst.w	r1, #2
 800e0a4:	ec57 6b10 	vmov	r6, r7, d0
 800e0a8:	f103 0204 	add.w	r2, r3, #4
 800e0ac:	d020      	beq.n	800e0f0 <_scanf_float+0x3d8>
 800e0ae:	9903      	ldr	r1, [sp, #12]
 800e0b0:	600a      	str	r2, [r1, #0]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	e9c3 6700 	strd	r6, r7, [r3]
 800e0b8:	68e3      	ldr	r3, [r4, #12]
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	60e3      	str	r3, [r4, #12]
 800e0be:	e66c      	b.n	800dd9a <_scanf_float+0x82>
 800e0c0:	9b04      	ldr	r3, [sp, #16]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d0e4      	beq.n	800e090 <_scanf_float+0x378>
 800e0c6:	9905      	ldr	r1, [sp, #20]
 800e0c8:	230a      	movs	r3, #10
 800e0ca:	462a      	mov	r2, r5
 800e0cc:	3101      	adds	r1, #1
 800e0ce:	4640      	mov	r0, r8
 800e0d0:	f002 fd4a 	bl	8010b68 <_strtol_r>
 800e0d4:	9b04      	ldr	r3, [sp, #16]
 800e0d6:	9e05      	ldr	r6, [sp, #20]
 800e0d8:	1ac2      	subs	r2, r0, r3
 800e0da:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e0de:	429e      	cmp	r6, r3
 800e0e0:	bf28      	it	cs
 800e0e2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e0e6:	4912      	ldr	r1, [pc, #72]	; (800e130 <_scanf_float+0x418>)
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	f000 f8e7 	bl	800e2bc <siprintf>
 800e0ee:	e7cf      	b.n	800e090 <_scanf_float+0x378>
 800e0f0:	f011 0f04 	tst.w	r1, #4
 800e0f4:	9903      	ldr	r1, [sp, #12]
 800e0f6:	600a      	str	r2, [r1, #0]
 800e0f8:	d1db      	bne.n	800e0b2 <_scanf_float+0x39a>
 800e0fa:	f8d3 8000 	ldr.w	r8, [r3]
 800e0fe:	ee10 2a10 	vmov	r2, s0
 800e102:	ee10 0a10 	vmov	r0, s0
 800e106:	463b      	mov	r3, r7
 800e108:	4639      	mov	r1, r7
 800e10a:	f7f2 fd0f 	bl	8000b2c <__aeabi_dcmpun>
 800e10e:	b128      	cbz	r0, 800e11c <_scanf_float+0x404>
 800e110:	4808      	ldr	r0, [pc, #32]	; (800e134 <_scanf_float+0x41c>)
 800e112:	f000 fa67 	bl	800e5e4 <nanf>
 800e116:	ed88 0a00 	vstr	s0, [r8]
 800e11a:	e7cd      	b.n	800e0b8 <_scanf_float+0x3a0>
 800e11c:	4630      	mov	r0, r6
 800e11e:	4639      	mov	r1, r7
 800e120:	f7f2 fd62 	bl	8000be8 <__aeabi_d2f>
 800e124:	f8c8 0000 	str.w	r0, [r8]
 800e128:	e7c6      	b.n	800e0b8 <_scanf_float+0x3a0>
 800e12a:	2500      	movs	r5, #0
 800e12c:	e635      	b.n	800dd9a <_scanf_float+0x82>
 800e12e:	bf00      	nop
 800e130:	08013e22 	.word	0x08013e22
 800e134:	080141d0 	.word	0x080141d0

0800e138 <std>:
 800e138:	2300      	movs	r3, #0
 800e13a:	b510      	push	{r4, lr}
 800e13c:	4604      	mov	r4, r0
 800e13e:	e9c0 3300 	strd	r3, r3, [r0]
 800e142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e146:	6083      	str	r3, [r0, #8]
 800e148:	8181      	strh	r1, [r0, #12]
 800e14a:	6643      	str	r3, [r0, #100]	; 0x64
 800e14c:	81c2      	strh	r2, [r0, #14]
 800e14e:	6183      	str	r3, [r0, #24]
 800e150:	4619      	mov	r1, r3
 800e152:	2208      	movs	r2, #8
 800e154:	305c      	adds	r0, #92	; 0x5c
 800e156:	f000 f942 	bl	800e3de <memset>
 800e15a:	4b0d      	ldr	r3, [pc, #52]	; (800e190 <std+0x58>)
 800e15c:	6263      	str	r3, [r4, #36]	; 0x24
 800e15e:	4b0d      	ldr	r3, [pc, #52]	; (800e194 <std+0x5c>)
 800e160:	62a3      	str	r3, [r4, #40]	; 0x28
 800e162:	4b0d      	ldr	r3, [pc, #52]	; (800e198 <std+0x60>)
 800e164:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e166:	4b0d      	ldr	r3, [pc, #52]	; (800e19c <std+0x64>)
 800e168:	6323      	str	r3, [r4, #48]	; 0x30
 800e16a:	4b0d      	ldr	r3, [pc, #52]	; (800e1a0 <std+0x68>)
 800e16c:	6224      	str	r4, [r4, #32]
 800e16e:	429c      	cmp	r4, r3
 800e170:	d006      	beq.n	800e180 <std+0x48>
 800e172:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e176:	4294      	cmp	r4, r2
 800e178:	d002      	beq.n	800e180 <std+0x48>
 800e17a:	33d0      	adds	r3, #208	; 0xd0
 800e17c:	429c      	cmp	r4, r3
 800e17e:	d105      	bne.n	800e18c <std+0x54>
 800e180:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e188:	f000 ba12 	b.w	800e5b0 <__retarget_lock_init_recursive>
 800e18c:	bd10      	pop	{r4, pc}
 800e18e:	bf00      	nop
 800e190:	0800e355 	.word	0x0800e355
 800e194:	0800e37b 	.word	0x0800e37b
 800e198:	0800e3b3 	.word	0x0800e3b3
 800e19c:	0800e3d7 	.word	0x0800e3d7
 800e1a0:	20008b20 	.word	0x20008b20

0800e1a4 <stdio_exit_handler>:
 800e1a4:	4a02      	ldr	r2, [pc, #8]	; (800e1b0 <stdio_exit_handler+0xc>)
 800e1a6:	4903      	ldr	r1, [pc, #12]	; (800e1b4 <stdio_exit_handler+0x10>)
 800e1a8:	4803      	ldr	r0, [pc, #12]	; (800e1b8 <stdio_exit_handler+0x14>)
 800e1aa:	f000 b869 	b.w	800e280 <_fwalk_sglue>
 800e1ae:	bf00      	nop
 800e1b0:	200000d8 	.word	0x200000d8
 800e1b4:	08011569 	.word	0x08011569
 800e1b8:	200000e4 	.word	0x200000e4

0800e1bc <cleanup_stdio>:
 800e1bc:	6841      	ldr	r1, [r0, #4]
 800e1be:	4b0c      	ldr	r3, [pc, #48]	; (800e1f0 <cleanup_stdio+0x34>)
 800e1c0:	4299      	cmp	r1, r3
 800e1c2:	b510      	push	{r4, lr}
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	d001      	beq.n	800e1cc <cleanup_stdio+0x10>
 800e1c8:	f003 f9ce 	bl	8011568 <_fflush_r>
 800e1cc:	68a1      	ldr	r1, [r4, #8]
 800e1ce:	4b09      	ldr	r3, [pc, #36]	; (800e1f4 <cleanup_stdio+0x38>)
 800e1d0:	4299      	cmp	r1, r3
 800e1d2:	d002      	beq.n	800e1da <cleanup_stdio+0x1e>
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	f003 f9c7 	bl	8011568 <_fflush_r>
 800e1da:	68e1      	ldr	r1, [r4, #12]
 800e1dc:	4b06      	ldr	r3, [pc, #24]	; (800e1f8 <cleanup_stdio+0x3c>)
 800e1de:	4299      	cmp	r1, r3
 800e1e0:	d004      	beq.n	800e1ec <cleanup_stdio+0x30>
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1e8:	f003 b9be 	b.w	8011568 <_fflush_r>
 800e1ec:	bd10      	pop	{r4, pc}
 800e1ee:	bf00      	nop
 800e1f0:	20008b20 	.word	0x20008b20
 800e1f4:	20008b88 	.word	0x20008b88
 800e1f8:	20008bf0 	.word	0x20008bf0

0800e1fc <global_stdio_init.part.0>:
 800e1fc:	b510      	push	{r4, lr}
 800e1fe:	4b0b      	ldr	r3, [pc, #44]	; (800e22c <global_stdio_init.part.0+0x30>)
 800e200:	4c0b      	ldr	r4, [pc, #44]	; (800e230 <global_stdio_init.part.0+0x34>)
 800e202:	4a0c      	ldr	r2, [pc, #48]	; (800e234 <global_stdio_init.part.0+0x38>)
 800e204:	601a      	str	r2, [r3, #0]
 800e206:	4620      	mov	r0, r4
 800e208:	2200      	movs	r2, #0
 800e20a:	2104      	movs	r1, #4
 800e20c:	f7ff ff94 	bl	800e138 <std>
 800e210:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e214:	2201      	movs	r2, #1
 800e216:	2109      	movs	r1, #9
 800e218:	f7ff ff8e 	bl	800e138 <std>
 800e21c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e220:	2202      	movs	r2, #2
 800e222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e226:	2112      	movs	r1, #18
 800e228:	f7ff bf86 	b.w	800e138 <std>
 800e22c:	20008c58 	.word	0x20008c58
 800e230:	20008b20 	.word	0x20008b20
 800e234:	0800e1a5 	.word	0x0800e1a5

0800e238 <__sfp_lock_acquire>:
 800e238:	4801      	ldr	r0, [pc, #4]	; (800e240 <__sfp_lock_acquire+0x8>)
 800e23a:	f000 b9ba 	b.w	800e5b2 <__retarget_lock_acquire_recursive>
 800e23e:	bf00      	nop
 800e240:	20008c61 	.word	0x20008c61

0800e244 <__sfp_lock_release>:
 800e244:	4801      	ldr	r0, [pc, #4]	; (800e24c <__sfp_lock_release+0x8>)
 800e246:	f000 b9b5 	b.w	800e5b4 <__retarget_lock_release_recursive>
 800e24a:	bf00      	nop
 800e24c:	20008c61 	.word	0x20008c61

0800e250 <__sinit>:
 800e250:	b510      	push	{r4, lr}
 800e252:	4604      	mov	r4, r0
 800e254:	f7ff fff0 	bl	800e238 <__sfp_lock_acquire>
 800e258:	6a23      	ldr	r3, [r4, #32]
 800e25a:	b11b      	cbz	r3, 800e264 <__sinit+0x14>
 800e25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e260:	f7ff bff0 	b.w	800e244 <__sfp_lock_release>
 800e264:	4b04      	ldr	r3, [pc, #16]	; (800e278 <__sinit+0x28>)
 800e266:	6223      	str	r3, [r4, #32]
 800e268:	4b04      	ldr	r3, [pc, #16]	; (800e27c <__sinit+0x2c>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d1f5      	bne.n	800e25c <__sinit+0xc>
 800e270:	f7ff ffc4 	bl	800e1fc <global_stdio_init.part.0>
 800e274:	e7f2      	b.n	800e25c <__sinit+0xc>
 800e276:	bf00      	nop
 800e278:	0800e1bd 	.word	0x0800e1bd
 800e27c:	20008c58 	.word	0x20008c58

0800e280 <_fwalk_sglue>:
 800e280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e284:	4607      	mov	r7, r0
 800e286:	4688      	mov	r8, r1
 800e288:	4614      	mov	r4, r2
 800e28a:	2600      	movs	r6, #0
 800e28c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e290:	f1b9 0901 	subs.w	r9, r9, #1
 800e294:	d505      	bpl.n	800e2a2 <_fwalk_sglue+0x22>
 800e296:	6824      	ldr	r4, [r4, #0]
 800e298:	2c00      	cmp	r4, #0
 800e29a:	d1f7      	bne.n	800e28c <_fwalk_sglue+0xc>
 800e29c:	4630      	mov	r0, r6
 800e29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2a2:	89ab      	ldrh	r3, [r5, #12]
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d907      	bls.n	800e2b8 <_fwalk_sglue+0x38>
 800e2a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	d003      	beq.n	800e2b8 <_fwalk_sglue+0x38>
 800e2b0:	4629      	mov	r1, r5
 800e2b2:	4638      	mov	r0, r7
 800e2b4:	47c0      	blx	r8
 800e2b6:	4306      	orrs	r6, r0
 800e2b8:	3568      	adds	r5, #104	; 0x68
 800e2ba:	e7e9      	b.n	800e290 <_fwalk_sglue+0x10>

0800e2bc <siprintf>:
 800e2bc:	b40e      	push	{r1, r2, r3}
 800e2be:	b500      	push	{lr}
 800e2c0:	b09c      	sub	sp, #112	; 0x70
 800e2c2:	ab1d      	add	r3, sp, #116	; 0x74
 800e2c4:	9002      	str	r0, [sp, #8]
 800e2c6:	9006      	str	r0, [sp, #24]
 800e2c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e2cc:	4809      	ldr	r0, [pc, #36]	; (800e2f4 <siprintf+0x38>)
 800e2ce:	9107      	str	r1, [sp, #28]
 800e2d0:	9104      	str	r1, [sp, #16]
 800e2d2:	4909      	ldr	r1, [pc, #36]	; (800e2f8 <siprintf+0x3c>)
 800e2d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2d8:	9105      	str	r1, [sp, #20]
 800e2da:	6800      	ldr	r0, [r0, #0]
 800e2dc:	9301      	str	r3, [sp, #4]
 800e2de:	a902      	add	r1, sp, #8
 800e2e0:	f002 fc9e 	bl	8010c20 <_svfiprintf_r>
 800e2e4:	9b02      	ldr	r3, [sp, #8]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	701a      	strb	r2, [r3, #0]
 800e2ea:	b01c      	add	sp, #112	; 0x70
 800e2ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2f0:	b003      	add	sp, #12
 800e2f2:	4770      	bx	lr
 800e2f4:	20000130 	.word	0x20000130
 800e2f8:	ffff0208 	.word	0xffff0208

0800e2fc <siscanf>:
 800e2fc:	b40e      	push	{r1, r2, r3}
 800e2fe:	b510      	push	{r4, lr}
 800e300:	b09f      	sub	sp, #124	; 0x7c
 800e302:	ac21      	add	r4, sp, #132	; 0x84
 800e304:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e308:	f854 2b04 	ldr.w	r2, [r4], #4
 800e30c:	9201      	str	r2, [sp, #4]
 800e30e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e312:	9004      	str	r0, [sp, #16]
 800e314:	9008      	str	r0, [sp, #32]
 800e316:	f7f1 ffab 	bl	8000270 <strlen>
 800e31a:	4b0c      	ldr	r3, [pc, #48]	; (800e34c <siscanf+0x50>)
 800e31c:	9005      	str	r0, [sp, #20]
 800e31e:	9009      	str	r0, [sp, #36]	; 0x24
 800e320:	930d      	str	r3, [sp, #52]	; 0x34
 800e322:	480b      	ldr	r0, [pc, #44]	; (800e350 <siscanf+0x54>)
 800e324:	9a01      	ldr	r2, [sp, #4]
 800e326:	6800      	ldr	r0, [r0, #0]
 800e328:	9403      	str	r4, [sp, #12]
 800e32a:	2300      	movs	r3, #0
 800e32c:	9311      	str	r3, [sp, #68]	; 0x44
 800e32e:	9316      	str	r3, [sp, #88]	; 0x58
 800e330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e334:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e338:	a904      	add	r1, sp, #16
 800e33a:	4623      	mov	r3, r4
 800e33c:	f002 fdc8 	bl	8010ed0 <__ssvfiscanf_r>
 800e340:	b01f      	add	sp, #124	; 0x7c
 800e342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e346:	b003      	add	sp, #12
 800e348:	4770      	bx	lr
 800e34a:	bf00      	nop
 800e34c:	0800e377 	.word	0x0800e377
 800e350:	20000130 	.word	0x20000130

0800e354 <__sread>:
 800e354:	b510      	push	{r4, lr}
 800e356:	460c      	mov	r4, r1
 800e358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e35c:	f000 f8da 	bl	800e514 <_read_r>
 800e360:	2800      	cmp	r0, #0
 800e362:	bfab      	itete	ge
 800e364:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e366:	89a3      	ldrhlt	r3, [r4, #12]
 800e368:	181b      	addge	r3, r3, r0
 800e36a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e36e:	bfac      	ite	ge
 800e370:	6563      	strge	r3, [r4, #84]	; 0x54
 800e372:	81a3      	strhlt	r3, [r4, #12]
 800e374:	bd10      	pop	{r4, pc}

0800e376 <__seofread>:
 800e376:	2000      	movs	r0, #0
 800e378:	4770      	bx	lr

0800e37a <__swrite>:
 800e37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e37e:	461f      	mov	r7, r3
 800e380:	898b      	ldrh	r3, [r1, #12]
 800e382:	05db      	lsls	r3, r3, #23
 800e384:	4605      	mov	r5, r0
 800e386:	460c      	mov	r4, r1
 800e388:	4616      	mov	r6, r2
 800e38a:	d505      	bpl.n	800e398 <__swrite+0x1e>
 800e38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e390:	2302      	movs	r3, #2
 800e392:	2200      	movs	r2, #0
 800e394:	f000 f8ac 	bl	800e4f0 <_lseek_r>
 800e398:	89a3      	ldrh	r3, [r4, #12]
 800e39a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e39e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3a2:	81a3      	strh	r3, [r4, #12]
 800e3a4:	4632      	mov	r2, r6
 800e3a6:	463b      	mov	r3, r7
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ae:	f000 b8c3 	b.w	800e538 <_write_r>

0800e3b2 <__sseek>:
 800e3b2:	b510      	push	{r4, lr}
 800e3b4:	460c      	mov	r4, r1
 800e3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3ba:	f000 f899 	bl	800e4f0 <_lseek_r>
 800e3be:	1c43      	adds	r3, r0, #1
 800e3c0:	89a3      	ldrh	r3, [r4, #12]
 800e3c2:	bf15      	itete	ne
 800e3c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e3c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e3ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e3ce:	81a3      	strheq	r3, [r4, #12]
 800e3d0:	bf18      	it	ne
 800e3d2:	81a3      	strhne	r3, [r4, #12]
 800e3d4:	bd10      	pop	{r4, pc}

0800e3d6 <__sclose>:
 800e3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3da:	f000 b823 	b.w	800e424 <_close_r>

0800e3de <memset>:
 800e3de:	4402      	add	r2, r0
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d100      	bne.n	800e3e8 <memset+0xa>
 800e3e6:	4770      	bx	lr
 800e3e8:	f803 1b01 	strb.w	r1, [r3], #1
 800e3ec:	e7f9      	b.n	800e3e2 <memset+0x4>

0800e3ee <strstr>:
 800e3ee:	780a      	ldrb	r2, [r1, #0]
 800e3f0:	b570      	push	{r4, r5, r6, lr}
 800e3f2:	b96a      	cbnz	r2, 800e410 <strstr+0x22>
 800e3f4:	bd70      	pop	{r4, r5, r6, pc}
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d109      	bne.n	800e40e <strstr+0x20>
 800e3fa:	460c      	mov	r4, r1
 800e3fc:	4605      	mov	r5, r0
 800e3fe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e402:	2b00      	cmp	r3, #0
 800e404:	d0f6      	beq.n	800e3f4 <strstr+0x6>
 800e406:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e40a:	429e      	cmp	r6, r3
 800e40c:	d0f7      	beq.n	800e3fe <strstr+0x10>
 800e40e:	3001      	adds	r0, #1
 800e410:	7803      	ldrb	r3, [r0, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d1ef      	bne.n	800e3f6 <strstr+0x8>
 800e416:	4618      	mov	r0, r3
 800e418:	e7ec      	b.n	800e3f4 <strstr+0x6>
	...

0800e41c <_localeconv_r>:
 800e41c:	4800      	ldr	r0, [pc, #0]	; (800e420 <_localeconv_r+0x4>)
 800e41e:	4770      	bx	lr
 800e420:	20000224 	.word	0x20000224

0800e424 <_close_r>:
 800e424:	b538      	push	{r3, r4, r5, lr}
 800e426:	4d06      	ldr	r5, [pc, #24]	; (800e440 <_close_r+0x1c>)
 800e428:	2300      	movs	r3, #0
 800e42a:	4604      	mov	r4, r0
 800e42c:	4608      	mov	r0, r1
 800e42e:	602b      	str	r3, [r5, #0]
 800e430:	f7f5 fa07 	bl	8003842 <_close>
 800e434:	1c43      	adds	r3, r0, #1
 800e436:	d102      	bne.n	800e43e <_close_r+0x1a>
 800e438:	682b      	ldr	r3, [r5, #0]
 800e43a:	b103      	cbz	r3, 800e43e <_close_r+0x1a>
 800e43c:	6023      	str	r3, [r4, #0]
 800e43e:	bd38      	pop	{r3, r4, r5, pc}
 800e440:	20008c5c 	.word	0x20008c5c

0800e444 <_reclaim_reent>:
 800e444:	4b29      	ldr	r3, [pc, #164]	; (800e4ec <_reclaim_reent+0xa8>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	4283      	cmp	r3, r0
 800e44a:	b570      	push	{r4, r5, r6, lr}
 800e44c:	4604      	mov	r4, r0
 800e44e:	d04b      	beq.n	800e4e8 <_reclaim_reent+0xa4>
 800e450:	69c3      	ldr	r3, [r0, #28]
 800e452:	b143      	cbz	r3, 800e466 <_reclaim_reent+0x22>
 800e454:	68db      	ldr	r3, [r3, #12]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d144      	bne.n	800e4e4 <_reclaim_reent+0xa0>
 800e45a:	69e3      	ldr	r3, [r4, #28]
 800e45c:	6819      	ldr	r1, [r3, #0]
 800e45e:	b111      	cbz	r1, 800e466 <_reclaim_reent+0x22>
 800e460:	4620      	mov	r0, r4
 800e462:	f000 ff3f 	bl	800f2e4 <_free_r>
 800e466:	6961      	ldr	r1, [r4, #20]
 800e468:	b111      	cbz	r1, 800e470 <_reclaim_reent+0x2c>
 800e46a:	4620      	mov	r0, r4
 800e46c:	f000 ff3a 	bl	800f2e4 <_free_r>
 800e470:	69e1      	ldr	r1, [r4, #28]
 800e472:	b111      	cbz	r1, 800e47a <_reclaim_reent+0x36>
 800e474:	4620      	mov	r0, r4
 800e476:	f000 ff35 	bl	800f2e4 <_free_r>
 800e47a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e47c:	b111      	cbz	r1, 800e484 <_reclaim_reent+0x40>
 800e47e:	4620      	mov	r0, r4
 800e480:	f000 ff30 	bl	800f2e4 <_free_r>
 800e484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e486:	b111      	cbz	r1, 800e48e <_reclaim_reent+0x4a>
 800e488:	4620      	mov	r0, r4
 800e48a:	f000 ff2b 	bl	800f2e4 <_free_r>
 800e48e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e490:	b111      	cbz	r1, 800e498 <_reclaim_reent+0x54>
 800e492:	4620      	mov	r0, r4
 800e494:	f000 ff26 	bl	800f2e4 <_free_r>
 800e498:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e49a:	b111      	cbz	r1, 800e4a2 <_reclaim_reent+0x5e>
 800e49c:	4620      	mov	r0, r4
 800e49e:	f000 ff21 	bl	800f2e4 <_free_r>
 800e4a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e4a4:	b111      	cbz	r1, 800e4ac <_reclaim_reent+0x68>
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	f000 ff1c 	bl	800f2e4 <_free_r>
 800e4ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e4ae:	b111      	cbz	r1, 800e4b6 <_reclaim_reent+0x72>
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	f000 ff17 	bl	800f2e4 <_free_r>
 800e4b6:	6a23      	ldr	r3, [r4, #32]
 800e4b8:	b1b3      	cbz	r3, 800e4e8 <_reclaim_reent+0xa4>
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4c0:	4718      	bx	r3
 800e4c2:	5949      	ldr	r1, [r1, r5]
 800e4c4:	b941      	cbnz	r1, 800e4d8 <_reclaim_reent+0x94>
 800e4c6:	3504      	adds	r5, #4
 800e4c8:	69e3      	ldr	r3, [r4, #28]
 800e4ca:	2d80      	cmp	r5, #128	; 0x80
 800e4cc:	68d9      	ldr	r1, [r3, #12]
 800e4ce:	d1f8      	bne.n	800e4c2 <_reclaim_reent+0x7e>
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	f000 ff07 	bl	800f2e4 <_free_r>
 800e4d6:	e7c0      	b.n	800e45a <_reclaim_reent+0x16>
 800e4d8:	680e      	ldr	r6, [r1, #0]
 800e4da:	4620      	mov	r0, r4
 800e4dc:	f000 ff02 	bl	800f2e4 <_free_r>
 800e4e0:	4631      	mov	r1, r6
 800e4e2:	e7ef      	b.n	800e4c4 <_reclaim_reent+0x80>
 800e4e4:	2500      	movs	r5, #0
 800e4e6:	e7ef      	b.n	800e4c8 <_reclaim_reent+0x84>
 800e4e8:	bd70      	pop	{r4, r5, r6, pc}
 800e4ea:	bf00      	nop
 800e4ec:	20000130 	.word	0x20000130

0800e4f0 <_lseek_r>:
 800e4f0:	b538      	push	{r3, r4, r5, lr}
 800e4f2:	4d07      	ldr	r5, [pc, #28]	; (800e510 <_lseek_r+0x20>)
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	4608      	mov	r0, r1
 800e4f8:	4611      	mov	r1, r2
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	602a      	str	r2, [r5, #0]
 800e4fe:	461a      	mov	r2, r3
 800e500:	f7f5 f9c6 	bl	8003890 <_lseek>
 800e504:	1c43      	adds	r3, r0, #1
 800e506:	d102      	bne.n	800e50e <_lseek_r+0x1e>
 800e508:	682b      	ldr	r3, [r5, #0]
 800e50a:	b103      	cbz	r3, 800e50e <_lseek_r+0x1e>
 800e50c:	6023      	str	r3, [r4, #0]
 800e50e:	bd38      	pop	{r3, r4, r5, pc}
 800e510:	20008c5c 	.word	0x20008c5c

0800e514 <_read_r>:
 800e514:	b538      	push	{r3, r4, r5, lr}
 800e516:	4d07      	ldr	r5, [pc, #28]	; (800e534 <_read_r+0x20>)
 800e518:	4604      	mov	r4, r0
 800e51a:	4608      	mov	r0, r1
 800e51c:	4611      	mov	r1, r2
 800e51e:	2200      	movs	r2, #0
 800e520:	602a      	str	r2, [r5, #0]
 800e522:	461a      	mov	r2, r3
 800e524:	f7f5 f954 	bl	80037d0 <_read>
 800e528:	1c43      	adds	r3, r0, #1
 800e52a:	d102      	bne.n	800e532 <_read_r+0x1e>
 800e52c:	682b      	ldr	r3, [r5, #0]
 800e52e:	b103      	cbz	r3, 800e532 <_read_r+0x1e>
 800e530:	6023      	str	r3, [r4, #0]
 800e532:	bd38      	pop	{r3, r4, r5, pc}
 800e534:	20008c5c 	.word	0x20008c5c

0800e538 <_write_r>:
 800e538:	b538      	push	{r3, r4, r5, lr}
 800e53a:	4d07      	ldr	r5, [pc, #28]	; (800e558 <_write_r+0x20>)
 800e53c:	4604      	mov	r4, r0
 800e53e:	4608      	mov	r0, r1
 800e540:	4611      	mov	r1, r2
 800e542:	2200      	movs	r2, #0
 800e544:	602a      	str	r2, [r5, #0]
 800e546:	461a      	mov	r2, r3
 800e548:	f7f5 f95f 	bl	800380a <_write>
 800e54c:	1c43      	adds	r3, r0, #1
 800e54e:	d102      	bne.n	800e556 <_write_r+0x1e>
 800e550:	682b      	ldr	r3, [r5, #0]
 800e552:	b103      	cbz	r3, 800e556 <_write_r+0x1e>
 800e554:	6023      	str	r3, [r4, #0]
 800e556:	bd38      	pop	{r3, r4, r5, pc}
 800e558:	20008c5c 	.word	0x20008c5c

0800e55c <__errno>:
 800e55c:	4b01      	ldr	r3, [pc, #4]	; (800e564 <__errno+0x8>)
 800e55e:	6818      	ldr	r0, [r3, #0]
 800e560:	4770      	bx	lr
 800e562:	bf00      	nop
 800e564:	20000130 	.word	0x20000130

0800e568 <__libc_init_array>:
 800e568:	b570      	push	{r4, r5, r6, lr}
 800e56a:	4d0d      	ldr	r5, [pc, #52]	; (800e5a0 <__libc_init_array+0x38>)
 800e56c:	4c0d      	ldr	r4, [pc, #52]	; (800e5a4 <__libc_init_array+0x3c>)
 800e56e:	1b64      	subs	r4, r4, r5
 800e570:	10a4      	asrs	r4, r4, #2
 800e572:	2600      	movs	r6, #0
 800e574:	42a6      	cmp	r6, r4
 800e576:	d109      	bne.n	800e58c <__libc_init_array+0x24>
 800e578:	4d0b      	ldr	r5, [pc, #44]	; (800e5a8 <__libc_init_array+0x40>)
 800e57a:	4c0c      	ldr	r4, [pc, #48]	; (800e5ac <__libc_init_array+0x44>)
 800e57c:	f005 fbb2 	bl	8013ce4 <_init>
 800e580:	1b64      	subs	r4, r4, r5
 800e582:	10a4      	asrs	r4, r4, #2
 800e584:	2600      	movs	r6, #0
 800e586:	42a6      	cmp	r6, r4
 800e588:	d105      	bne.n	800e596 <__libc_init_array+0x2e>
 800e58a:	bd70      	pop	{r4, r5, r6, pc}
 800e58c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e590:	4798      	blx	r3
 800e592:	3601      	adds	r6, #1
 800e594:	e7ee      	b.n	800e574 <__libc_init_array+0xc>
 800e596:	f855 3b04 	ldr.w	r3, [r5], #4
 800e59a:	4798      	blx	r3
 800e59c:	3601      	adds	r6, #1
 800e59e:	e7f2      	b.n	800e586 <__libc_init_array+0x1e>
 800e5a0:	080142e0 	.word	0x080142e0
 800e5a4:	080142e0 	.word	0x080142e0
 800e5a8:	080142e0 	.word	0x080142e0
 800e5ac:	080142e4 	.word	0x080142e4

0800e5b0 <__retarget_lock_init_recursive>:
 800e5b0:	4770      	bx	lr

0800e5b2 <__retarget_lock_acquire_recursive>:
 800e5b2:	4770      	bx	lr

0800e5b4 <__retarget_lock_release_recursive>:
 800e5b4:	4770      	bx	lr

0800e5b6 <strcpy>:
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5bc:	f803 2b01 	strb.w	r2, [r3], #1
 800e5c0:	2a00      	cmp	r2, #0
 800e5c2:	d1f9      	bne.n	800e5b8 <strcpy+0x2>
 800e5c4:	4770      	bx	lr

0800e5c6 <memcpy>:
 800e5c6:	440a      	add	r2, r1
 800e5c8:	4291      	cmp	r1, r2
 800e5ca:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5ce:	d100      	bne.n	800e5d2 <memcpy+0xc>
 800e5d0:	4770      	bx	lr
 800e5d2:	b510      	push	{r4, lr}
 800e5d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5dc:	4291      	cmp	r1, r2
 800e5de:	d1f9      	bne.n	800e5d4 <memcpy+0xe>
 800e5e0:	bd10      	pop	{r4, pc}
	...

0800e5e4 <nanf>:
 800e5e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e5ec <nanf+0x8>
 800e5e8:	4770      	bx	lr
 800e5ea:	bf00      	nop
 800e5ec:	7fc00000 	.word	0x7fc00000

0800e5f0 <quorem>:
 800e5f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	6903      	ldr	r3, [r0, #16]
 800e5f6:	690c      	ldr	r4, [r1, #16]
 800e5f8:	42a3      	cmp	r3, r4
 800e5fa:	4607      	mov	r7, r0
 800e5fc:	db7e      	blt.n	800e6fc <quorem+0x10c>
 800e5fe:	3c01      	subs	r4, #1
 800e600:	f101 0814 	add.w	r8, r1, #20
 800e604:	f100 0514 	add.w	r5, r0, #20
 800e608:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e60c:	9301      	str	r3, [sp, #4]
 800e60e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e612:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e616:	3301      	adds	r3, #1
 800e618:	429a      	cmp	r2, r3
 800e61a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e61e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e622:	fbb2 f6f3 	udiv	r6, r2, r3
 800e626:	d331      	bcc.n	800e68c <quorem+0x9c>
 800e628:	f04f 0e00 	mov.w	lr, #0
 800e62c:	4640      	mov	r0, r8
 800e62e:	46ac      	mov	ip, r5
 800e630:	46f2      	mov	sl, lr
 800e632:	f850 2b04 	ldr.w	r2, [r0], #4
 800e636:	b293      	uxth	r3, r2
 800e638:	fb06 e303 	mla	r3, r6, r3, lr
 800e63c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e640:	0c1a      	lsrs	r2, r3, #16
 800e642:	b29b      	uxth	r3, r3
 800e644:	ebaa 0303 	sub.w	r3, sl, r3
 800e648:	f8dc a000 	ldr.w	sl, [ip]
 800e64c:	fa13 f38a 	uxtah	r3, r3, sl
 800e650:	fb06 220e 	mla	r2, r6, lr, r2
 800e654:	9300      	str	r3, [sp, #0]
 800e656:	9b00      	ldr	r3, [sp, #0]
 800e658:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e65c:	b292      	uxth	r2, r2
 800e65e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e662:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e666:	f8bd 3000 	ldrh.w	r3, [sp]
 800e66a:	4581      	cmp	r9, r0
 800e66c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e670:	f84c 3b04 	str.w	r3, [ip], #4
 800e674:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e678:	d2db      	bcs.n	800e632 <quorem+0x42>
 800e67a:	f855 300b 	ldr.w	r3, [r5, fp]
 800e67e:	b92b      	cbnz	r3, 800e68c <quorem+0x9c>
 800e680:	9b01      	ldr	r3, [sp, #4]
 800e682:	3b04      	subs	r3, #4
 800e684:	429d      	cmp	r5, r3
 800e686:	461a      	mov	r2, r3
 800e688:	d32c      	bcc.n	800e6e4 <quorem+0xf4>
 800e68a:	613c      	str	r4, [r7, #16]
 800e68c:	4638      	mov	r0, r7
 800e68e:	f001 f9ef 	bl	800fa70 <__mcmp>
 800e692:	2800      	cmp	r0, #0
 800e694:	db22      	blt.n	800e6dc <quorem+0xec>
 800e696:	3601      	adds	r6, #1
 800e698:	4629      	mov	r1, r5
 800e69a:	2000      	movs	r0, #0
 800e69c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e6a0:	f8d1 c000 	ldr.w	ip, [r1]
 800e6a4:	b293      	uxth	r3, r2
 800e6a6:	1ac3      	subs	r3, r0, r3
 800e6a8:	0c12      	lsrs	r2, r2, #16
 800e6aa:	fa13 f38c 	uxtah	r3, r3, ip
 800e6ae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e6b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6bc:	45c1      	cmp	r9, r8
 800e6be:	f841 3b04 	str.w	r3, [r1], #4
 800e6c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e6c6:	d2e9      	bcs.n	800e69c <quorem+0xac>
 800e6c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e6cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e6d0:	b922      	cbnz	r2, 800e6dc <quorem+0xec>
 800e6d2:	3b04      	subs	r3, #4
 800e6d4:	429d      	cmp	r5, r3
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	d30a      	bcc.n	800e6f0 <quorem+0x100>
 800e6da:	613c      	str	r4, [r7, #16]
 800e6dc:	4630      	mov	r0, r6
 800e6de:	b003      	add	sp, #12
 800e6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e4:	6812      	ldr	r2, [r2, #0]
 800e6e6:	3b04      	subs	r3, #4
 800e6e8:	2a00      	cmp	r2, #0
 800e6ea:	d1ce      	bne.n	800e68a <quorem+0x9a>
 800e6ec:	3c01      	subs	r4, #1
 800e6ee:	e7c9      	b.n	800e684 <quorem+0x94>
 800e6f0:	6812      	ldr	r2, [r2, #0]
 800e6f2:	3b04      	subs	r3, #4
 800e6f4:	2a00      	cmp	r2, #0
 800e6f6:	d1f0      	bne.n	800e6da <quorem+0xea>
 800e6f8:	3c01      	subs	r4, #1
 800e6fa:	e7eb      	b.n	800e6d4 <quorem+0xe4>
 800e6fc:	2000      	movs	r0, #0
 800e6fe:	e7ee      	b.n	800e6de <quorem+0xee>

0800e700 <_dtoa_r>:
 800e700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e704:	ed2d 8b04 	vpush	{d8-d9}
 800e708:	69c5      	ldr	r5, [r0, #28]
 800e70a:	b093      	sub	sp, #76	; 0x4c
 800e70c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e710:	ec57 6b10 	vmov	r6, r7, d0
 800e714:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e718:	9107      	str	r1, [sp, #28]
 800e71a:	4604      	mov	r4, r0
 800e71c:	920a      	str	r2, [sp, #40]	; 0x28
 800e71e:	930d      	str	r3, [sp, #52]	; 0x34
 800e720:	b975      	cbnz	r5, 800e740 <_dtoa_r+0x40>
 800e722:	2010      	movs	r0, #16
 800e724:	f000 fe2a 	bl	800f37c <malloc>
 800e728:	4602      	mov	r2, r0
 800e72a:	61e0      	str	r0, [r4, #28]
 800e72c:	b920      	cbnz	r0, 800e738 <_dtoa_r+0x38>
 800e72e:	4bae      	ldr	r3, [pc, #696]	; (800e9e8 <_dtoa_r+0x2e8>)
 800e730:	21ef      	movs	r1, #239	; 0xef
 800e732:	48ae      	ldr	r0, [pc, #696]	; (800e9ec <_dtoa_r+0x2ec>)
 800e734:	f002 fff8 	bl	8011728 <__assert_func>
 800e738:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e73c:	6005      	str	r5, [r0, #0]
 800e73e:	60c5      	str	r5, [r0, #12]
 800e740:	69e3      	ldr	r3, [r4, #28]
 800e742:	6819      	ldr	r1, [r3, #0]
 800e744:	b151      	cbz	r1, 800e75c <_dtoa_r+0x5c>
 800e746:	685a      	ldr	r2, [r3, #4]
 800e748:	604a      	str	r2, [r1, #4]
 800e74a:	2301      	movs	r3, #1
 800e74c:	4093      	lsls	r3, r2
 800e74e:	608b      	str	r3, [r1, #8]
 800e750:	4620      	mov	r0, r4
 800e752:	f000 ff07 	bl	800f564 <_Bfree>
 800e756:	69e3      	ldr	r3, [r4, #28]
 800e758:	2200      	movs	r2, #0
 800e75a:	601a      	str	r2, [r3, #0]
 800e75c:	1e3b      	subs	r3, r7, #0
 800e75e:	bfbb      	ittet	lt
 800e760:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e764:	9303      	strlt	r3, [sp, #12]
 800e766:	2300      	movge	r3, #0
 800e768:	2201      	movlt	r2, #1
 800e76a:	bfac      	ite	ge
 800e76c:	f8c8 3000 	strge.w	r3, [r8]
 800e770:	f8c8 2000 	strlt.w	r2, [r8]
 800e774:	4b9e      	ldr	r3, [pc, #632]	; (800e9f0 <_dtoa_r+0x2f0>)
 800e776:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e77a:	ea33 0308 	bics.w	r3, r3, r8
 800e77e:	d11b      	bne.n	800e7b8 <_dtoa_r+0xb8>
 800e780:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e782:	f242 730f 	movw	r3, #9999	; 0x270f
 800e786:	6013      	str	r3, [r2, #0]
 800e788:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e78c:	4333      	orrs	r3, r6
 800e78e:	f000 8593 	beq.w	800f2b8 <_dtoa_r+0xbb8>
 800e792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e794:	b963      	cbnz	r3, 800e7b0 <_dtoa_r+0xb0>
 800e796:	4b97      	ldr	r3, [pc, #604]	; (800e9f4 <_dtoa_r+0x2f4>)
 800e798:	e027      	b.n	800e7ea <_dtoa_r+0xea>
 800e79a:	4b97      	ldr	r3, [pc, #604]	; (800e9f8 <_dtoa_r+0x2f8>)
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	3308      	adds	r3, #8
 800e7a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7a2:	6013      	str	r3, [r2, #0]
 800e7a4:	9800      	ldr	r0, [sp, #0]
 800e7a6:	b013      	add	sp, #76	; 0x4c
 800e7a8:	ecbd 8b04 	vpop	{d8-d9}
 800e7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7b0:	4b90      	ldr	r3, [pc, #576]	; (800e9f4 <_dtoa_r+0x2f4>)
 800e7b2:	9300      	str	r3, [sp, #0]
 800e7b4:	3303      	adds	r3, #3
 800e7b6:	e7f3      	b.n	800e7a0 <_dtoa_r+0xa0>
 800e7b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	ec51 0b17 	vmov	r0, r1, d7
 800e7c2:	eeb0 8a47 	vmov.f32	s16, s14
 800e7c6:	eef0 8a67 	vmov.f32	s17, s15
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	f7f2 f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7d0:	4681      	mov	r9, r0
 800e7d2:	b160      	cbz	r0, 800e7ee <_dtoa_r+0xee>
 800e7d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	6013      	str	r3, [r2, #0]
 800e7da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	f000 8568 	beq.w	800f2b2 <_dtoa_r+0xbb2>
 800e7e2:	4b86      	ldr	r3, [pc, #536]	; (800e9fc <_dtoa_r+0x2fc>)
 800e7e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7e6:	6013      	str	r3, [r2, #0]
 800e7e8:	3b01      	subs	r3, #1
 800e7ea:	9300      	str	r3, [sp, #0]
 800e7ec:	e7da      	b.n	800e7a4 <_dtoa_r+0xa4>
 800e7ee:	aa10      	add	r2, sp, #64	; 0x40
 800e7f0:	a911      	add	r1, sp, #68	; 0x44
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	eeb0 0a48 	vmov.f32	s0, s16
 800e7f8:	eef0 0a68 	vmov.f32	s1, s17
 800e7fc:	f001 fa4e 	bl	800fc9c <__d2b>
 800e800:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e804:	4682      	mov	sl, r0
 800e806:	2d00      	cmp	r5, #0
 800e808:	d07f      	beq.n	800e90a <_dtoa_r+0x20a>
 800e80a:	ee18 3a90 	vmov	r3, s17
 800e80e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e812:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e816:	ec51 0b18 	vmov	r0, r1, d8
 800e81a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e81e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e822:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e826:	4619      	mov	r1, r3
 800e828:	2200      	movs	r2, #0
 800e82a:	4b75      	ldr	r3, [pc, #468]	; (800ea00 <_dtoa_r+0x300>)
 800e82c:	f7f1 fd2c 	bl	8000288 <__aeabi_dsub>
 800e830:	a367      	add	r3, pc, #412	; (adr r3, 800e9d0 <_dtoa_r+0x2d0>)
 800e832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e836:	f7f1 fedf 	bl	80005f8 <__aeabi_dmul>
 800e83a:	a367      	add	r3, pc, #412	; (adr r3, 800e9d8 <_dtoa_r+0x2d8>)
 800e83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e840:	f7f1 fd24 	bl	800028c <__adddf3>
 800e844:	4606      	mov	r6, r0
 800e846:	4628      	mov	r0, r5
 800e848:	460f      	mov	r7, r1
 800e84a:	f7f1 fe6b 	bl	8000524 <__aeabi_i2d>
 800e84e:	a364      	add	r3, pc, #400	; (adr r3, 800e9e0 <_dtoa_r+0x2e0>)
 800e850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e854:	f7f1 fed0 	bl	80005f8 <__aeabi_dmul>
 800e858:	4602      	mov	r2, r0
 800e85a:	460b      	mov	r3, r1
 800e85c:	4630      	mov	r0, r6
 800e85e:	4639      	mov	r1, r7
 800e860:	f7f1 fd14 	bl	800028c <__adddf3>
 800e864:	4606      	mov	r6, r0
 800e866:	460f      	mov	r7, r1
 800e868:	f7f2 f976 	bl	8000b58 <__aeabi_d2iz>
 800e86c:	2200      	movs	r2, #0
 800e86e:	4683      	mov	fp, r0
 800e870:	2300      	movs	r3, #0
 800e872:	4630      	mov	r0, r6
 800e874:	4639      	mov	r1, r7
 800e876:	f7f2 f931 	bl	8000adc <__aeabi_dcmplt>
 800e87a:	b148      	cbz	r0, 800e890 <_dtoa_r+0x190>
 800e87c:	4658      	mov	r0, fp
 800e87e:	f7f1 fe51 	bl	8000524 <__aeabi_i2d>
 800e882:	4632      	mov	r2, r6
 800e884:	463b      	mov	r3, r7
 800e886:	f7f2 f91f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e88a:	b908      	cbnz	r0, 800e890 <_dtoa_r+0x190>
 800e88c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e890:	f1bb 0f16 	cmp.w	fp, #22
 800e894:	d857      	bhi.n	800e946 <_dtoa_r+0x246>
 800e896:	4b5b      	ldr	r3, [pc, #364]	; (800ea04 <_dtoa_r+0x304>)
 800e898:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a0:	ec51 0b18 	vmov	r0, r1, d8
 800e8a4:	f7f2 f91a 	bl	8000adc <__aeabi_dcmplt>
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	d04e      	beq.n	800e94a <_dtoa_r+0x24a>
 800e8ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	930c      	str	r3, [sp, #48]	; 0x30
 800e8b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8b6:	1b5b      	subs	r3, r3, r5
 800e8b8:	1e5a      	subs	r2, r3, #1
 800e8ba:	bf45      	ittet	mi
 800e8bc:	f1c3 0301 	rsbmi	r3, r3, #1
 800e8c0:	9305      	strmi	r3, [sp, #20]
 800e8c2:	2300      	movpl	r3, #0
 800e8c4:	2300      	movmi	r3, #0
 800e8c6:	9206      	str	r2, [sp, #24]
 800e8c8:	bf54      	ite	pl
 800e8ca:	9305      	strpl	r3, [sp, #20]
 800e8cc:	9306      	strmi	r3, [sp, #24]
 800e8ce:	f1bb 0f00 	cmp.w	fp, #0
 800e8d2:	db3c      	blt.n	800e94e <_dtoa_r+0x24e>
 800e8d4:	9b06      	ldr	r3, [sp, #24]
 800e8d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e8da:	445b      	add	r3, fp
 800e8dc:	9306      	str	r3, [sp, #24]
 800e8de:	2300      	movs	r3, #0
 800e8e0:	9308      	str	r3, [sp, #32]
 800e8e2:	9b07      	ldr	r3, [sp, #28]
 800e8e4:	2b09      	cmp	r3, #9
 800e8e6:	d868      	bhi.n	800e9ba <_dtoa_r+0x2ba>
 800e8e8:	2b05      	cmp	r3, #5
 800e8ea:	bfc4      	itt	gt
 800e8ec:	3b04      	subgt	r3, #4
 800e8ee:	9307      	strgt	r3, [sp, #28]
 800e8f0:	9b07      	ldr	r3, [sp, #28]
 800e8f2:	f1a3 0302 	sub.w	r3, r3, #2
 800e8f6:	bfcc      	ite	gt
 800e8f8:	2500      	movgt	r5, #0
 800e8fa:	2501      	movle	r5, #1
 800e8fc:	2b03      	cmp	r3, #3
 800e8fe:	f200 8085 	bhi.w	800ea0c <_dtoa_r+0x30c>
 800e902:	e8df f003 	tbb	[pc, r3]
 800e906:	3b2e      	.short	0x3b2e
 800e908:	5839      	.short	0x5839
 800e90a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e90e:	441d      	add	r5, r3
 800e910:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e914:	2b20      	cmp	r3, #32
 800e916:	bfc1      	itttt	gt
 800e918:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e91c:	fa08 f803 	lslgt.w	r8, r8, r3
 800e920:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e924:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e928:	bfd6      	itet	le
 800e92a:	f1c3 0320 	rsble	r3, r3, #32
 800e92e:	ea48 0003 	orrgt.w	r0, r8, r3
 800e932:	fa06 f003 	lslle.w	r0, r6, r3
 800e936:	f7f1 fde5 	bl	8000504 <__aeabi_ui2d>
 800e93a:	2201      	movs	r2, #1
 800e93c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e940:	3d01      	subs	r5, #1
 800e942:	920e      	str	r2, [sp, #56]	; 0x38
 800e944:	e76f      	b.n	800e826 <_dtoa_r+0x126>
 800e946:	2301      	movs	r3, #1
 800e948:	e7b3      	b.n	800e8b2 <_dtoa_r+0x1b2>
 800e94a:	900c      	str	r0, [sp, #48]	; 0x30
 800e94c:	e7b2      	b.n	800e8b4 <_dtoa_r+0x1b4>
 800e94e:	9b05      	ldr	r3, [sp, #20]
 800e950:	eba3 030b 	sub.w	r3, r3, fp
 800e954:	9305      	str	r3, [sp, #20]
 800e956:	f1cb 0300 	rsb	r3, fp, #0
 800e95a:	9308      	str	r3, [sp, #32]
 800e95c:	2300      	movs	r3, #0
 800e95e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e960:	e7bf      	b.n	800e8e2 <_dtoa_r+0x1e2>
 800e962:	2300      	movs	r3, #0
 800e964:	9309      	str	r3, [sp, #36]	; 0x24
 800e966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e968:	2b00      	cmp	r3, #0
 800e96a:	dc52      	bgt.n	800ea12 <_dtoa_r+0x312>
 800e96c:	2301      	movs	r3, #1
 800e96e:	9301      	str	r3, [sp, #4]
 800e970:	9304      	str	r3, [sp, #16]
 800e972:	461a      	mov	r2, r3
 800e974:	920a      	str	r2, [sp, #40]	; 0x28
 800e976:	e00b      	b.n	800e990 <_dtoa_r+0x290>
 800e978:	2301      	movs	r3, #1
 800e97a:	e7f3      	b.n	800e964 <_dtoa_r+0x264>
 800e97c:	2300      	movs	r3, #0
 800e97e:	9309      	str	r3, [sp, #36]	; 0x24
 800e980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e982:	445b      	add	r3, fp
 800e984:	9301      	str	r3, [sp, #4]
 800e986:	3301      	adds	r3, #1
 800e988:	2b01      	cmp	r3, #1
 800e98a:	9304      	str	r3, [sp, #16]
 800e98c:	bfb8      	it	lt
 800e98e:	2301      	movlt	r3, #1
 800e990:	69e0      	ldr	r0, [r4, #28]
 800e992:	2100      	movs	r1, #0
 800e994:	2204      	movs	r2, #4
 800e996:	f102 0614 	add.w	r6, r2, #20
 800e99a:	429e      	cmp	r6, r3
 800e99c:	d93d      	bls.n	800ea1a <_dtoa_r+0x31a>
 800e99e:	6041      	str	r1, [r0, #4]
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	f000 fd9f 	bl	800f4e4 <_Balloc>
 800e9a6:	9000      	str	r0, [sp, #0]
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	d139      	bne.n	800ea20 <_dtoa_r+0x320>
 800e9ac:	4b16      	ldr	r3, [pc, #88]	; (800ea08 <_dtoa_r+0x308>)
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	f240 11af 	movw	r1, #431	; 0x1af
 800e9b4:	e6bd      	b.n	800e732 <_dtoa_r+0x32>
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	e7e1      	b.n	800e97e <_dtoa_r+0x27e>
 800e9ba:	2501      	movs	r5, #1
 800e9bc:	2300      	movs	r3, #0
 800e9be:	9307      	str	r3, [sp, #28]
 800e9c0:	9509      	str	r5, [sp, #36]	; 0x24
 800e9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e9c6:	9301      	str	r3, [sp, #4]
 800e9c8:	9304      	str	r3, [sp, #16]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	2312      	movs	r3, #18
 800e9ce:	e7d1      	b.n	800e974 <_dtoa_r+0x274>
 800e9d0:	636f4361 	.word	0x636f4361
 800e9d4:	3fd287a7 	.word	0x3fd287a7
 800e9d8:	8b60c8b3 	.word	0x8b60c8b3
 800e9dc:	3fc68a28 	.word	0x3fc68a28
 800e9e0:	509f79fb 	.word	0x509f79fb
 800e9e4:	3fd34413 	.word	0x3fd34413
 800e9e8:	08013e34 	.word	0x08013e34
 800e9ec:	08013e4b 	.word	0x08013e4b
 800e9f0:	7ff00000 	.word	0x7ff00000
 800e9f4:	08013e30 	.word	0x08013e30
 800e9f8:	08013e27 	.word	0x08013e27
 800e9fc:	08014189 	.word	0x08014189
 800ea00:	3ff80000 	.word	0x3ff80000
 800ea04:	08013f38 	.word	0x08013f38
 800ea08:	08013ea3 	.word	0x08013ea3
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ea10:	e7d7      	b.n	800e9c2 <_dtoa_r+0x2c2>
 800ea12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea14:	9301      	str	r3, [sp, #4]
 800ea16:	9304      	str	r3, [sp, #16]
 800ea18:	e7ba      	b.n	800e990 <_dtoa_r+0x290>
 800ea1a:	3101      	adds	r1, #1
 800ea1c:	0052      	lsls	r2, r2, #1
 800ea1e:	e7ba      	b.n	800e996 <_dtoa_r+0x296>
 800ea20:	69e3      	ldr	r3, [r4, #28]
 800ea22:	9a00      	ldr	r2, [sp, #0]
 800ea24:	601a      	str	r2, [r3, #0]
 800ea26:	9b04      	ldr	r3, [sp, #16]
 800ea28:	2b0e      	cmp	r3, #14
 800ea2a:	f200 80a8 	bhi.w	800eb7e <_dtoa_r+0x47e>
 800ea2e:	2d00      	cmp	r5, #0
 800ea30:	f000 80a5 	beq.w	800eb7e <_dtoa_r+0x47e>
 800ea34:	f1bb 0f00 	cmp.w	fp, #0
 800ea38:	dd38      	ble.n	800eaac <_dtoa_r+0x3ac>
 800ea3a:	4bc0      	ldr	r3, [pc, #768]	; (800ed3c <_dtoa_r+0x63c>)
 800ea3c:	f00b 020f 	and.w	r2, fp, #15
 800ea40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ea48:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ea4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ea50:	d019      	beq.n	800ea86 <_dtoa_r+0x386>
 800ea52:	4bbb      	ldr	r3, [pc, #748]	; (800ed40 <_dtoa_r+0x640>)
 800ea54:	ec51 0b18 	vmov	r0, r1, d8
 800ea58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ea5c:	f7f1 fef6 	bl	800084c <__aeabi_ddiv>
 800ea60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea64:	f008 080f 	and.w	r8, r8, #15
 800ea68:	2503      	movs	r5, #3
 800ea6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ed40 <_dtoa_r+0x640>
 800ea6e:	f1b8 0f00 	cmp.w	r8, #0
 800ea72:	d10a      	bne.n	800ea8a <_dtoa_r+0x38a>
 800ea74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea78:	4632      	mov	r2, r6
 800ea7a:	463b      	mov	r3, r7
 800ea7c:	f7f1 fee6 	bl	800084c <__aeabi_ddiv>
 800ea80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea84:	e02b      	b.n	800eade <_dtoa_r+0x3de>
 800ea86:	2502      	movs	r5, #2
 800ea88:	e7ef      	b.n	800ea6a <_dtoa_r+0x36a>
 800ea8a:	f018 0f01 	tst.w	r8, #1
 800ea8e:	d008      	beq.n	800eaa2 <_dtoa_r+0x3a2>
 800ea90:	4630      	mov	r0, r6
 800ea92:	4639      	mov	r1, r7
 800ea94:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ea98:	f7f1 fdae 	bl	80005f8 <__aeabi_dmul>
 800ea9c:	3501      	adds	r5, #1
 800ea9e:	4606      	mov	r6, r0
 800eaa0:	460f      	mov	r7, r1
 800eaa2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eaa6:	f109 0908 	add.w	r9, r9, #8
 800eaaa:	e7e0      	b.n	800ea6e <_dtoa_r+0x36e>
 800eaac:	f000 809f 	beq.w	800ebee <_dtoa_r+0x4ee>
 800eab0:	f1cb 0600 	rsb	r6, fp, #0
 800eab4:	4ba1      	ldr	r3, [pc, #644]	; (800ed3c <_dtoa_r+0x63c>)
 800eab6:	4fa2      	ldr	r7, [pc, #648]	; (800ed40 <_dtoa_r+0x640>)
 800eab8:	f006 020f 	and.w	r2, r6, #15
 800eabc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac4:	ec51 0b18 	vmov	r0, r1, d8
 800eac8:	f7f1 fd96 	bl	80005f8 <__aeabi_dmul>
 800eacc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ead0:	1136      	asrs	r6, r6, #4
 800ead2:	2300      	movs	r3, #0
 800ead4:	2502      	movs	r5, #2
 800ead6:	2e00      	cmp	r6, #0
 800ead8:	d17e      	bne.n	800ebd8 <_dtoa_r+0x4d8>
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d1d0      	bne.n	800ea80 <_dtoa_r+0x380>
 800eade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eae0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f000 8084 	beq.w	800ebf2 <_dtoa_r+0x4f2>
 800eaea:	4b96      	ldr	r3, [pc, #600]	; (800ed44 <_dtoa_r+0x644>)
 800eaec:	2200      	movs	r2, #0
 800eaee:	4640      	mov	r0, r8
 800eaf0:	4649      	mov	r1, r9
 800eaf2:	f7f1 fff3 	bl	8000adc <__aeabi_dcmplt>
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	d07b      	beq.n	800ebf2 <_dtoa_r+0x4f2>
 800eafa:	9b04      	ldr	r3, [sp, #16]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d078      	beq.n	800ebf2 <_dtoa_r+0x4f2>
 800eb00:	9b01      	ldr	r3, [sp, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	dd39      	ble.n	800eb7a <_dtoa_r+0x47a>
 800eb06:	4b90      	ldr	r3, [pc, #576]	; (800ed48 <_dtoa_r+0x648>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	4640      	mov	r0, r8
 800eb0c:	4649      	mov	r1, r9
 800eb0e:	f7f1 fd73 	bl	80005f8 <__aeabi_dmul>
 800eb12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb16:	9e01      	ldr	r6, [sp, #4]
 800eb18:	f10b 37ff 	add.w	r7, fp, #4294967295
 800eb1c:	3501      	adds	r5, #1
 800eb1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800eb22:	4628      	mov	r0, r5
 800eb24:	f7f1 fcfe 	bl	8000524 <__aeabi_i2d>
 800eb28:	4642      	mov	r2, r8
 800eb2a:	464b      	mov	r3, r9
 800eb2c:	f7f1 fd64 	bl	80005f8 <__aeabi_dmul>
 800eb30:	4b86      	ldr	r3, [pc, #536]	; (800ed4c <_dtoa_r+0x64c>)
 800eb32:	2200      	movs	r2, #0
 800eb34:	f7f1 fbaa 	bl	800028c <__adddf3>
 800eb38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800eb3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb40:	9303      	str	r3, [sp, #12]
 800eb42:	2e00      	cmp	r6, #0
 800eb44:	d158      	bne.n	800ebf8 <_dtoa_r+0x4f8>
 800eb46:	4b82      	ldr	r3, [pc, #520]	; (800ed50 <_dtoa_r+0x650>)
 800eb48:	2200      	movs	r2, #0
 800eb4a:	4640      	mov	r0, r8
 800eb4c:	4649      	mov	r1, r9
 800eb4e:	f7f1 fb9b 	bl	8000288 <__aeabi_dsub>
 800eb52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb56:	4680      	mov	r8, r0
 800eb58:	4689      	mov	r9, r1
 800eb5a:	f7f1 ffdd 	bl	8000b18 <__aeabi_dcmpgt>
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	f040 8296 	bne.w	800f090 <_dtoa_r+0x990>
 800eb64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eb68:	4640      	mov	r0, r8
 800eb6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb6e:	4649      	mov	r1, r9
 800eb70:	f7f1 ffb4 	bl	8000adc <__aeabi_dcmplt>
 800eb74:	2800      	cmp	r0, #0
 800eb76:	f040 8289 	bne.w	800f08c <_dtoa_r+0x98c>
 800eb7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800eb7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	f2c0 814e 	blt.w	800ee22 <_dtoa_r+0x722>
 800eb86:	f1bb 0f0e 	cmp.w	fp, #14
 800eb8a:	f300 814a 	bgt.w	800ee22 <_dtoa_r+0x722>
 800eb8e:	4b6b      	ldr	r3, [pc, #428]	; (800ed3c <_dtoa_r+0x63c>)
 800eb90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eb94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eb98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	f280 80dc 	bge.w	800ed58 <_dtoa_r+0x658>
 800eba0:	9b04      	ldr	r3, [sp, #16]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f300 80d8 	bgt.w	800ed58 <_dtoa_r+0x658>
 800eba8:	f040 826f 	bne.w	800f08a <_dtoa_r+0x98a>
 800ebac:	4b68      	ldr	r3, [pc, #416]	; (800ed50 <_dtoa_r+0x650>)
 800ebae:	2200      	movs	r2, #0
 800ebb0:	4640      	mov	r0, r8
 800ebb2:	4649      	mov	r1, r9
 800ebb4:	f7f1 fd20 	bl	80005f8 <__aeabi_dmul>
 800ebb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ebbc:	f7f1 ffa2 	bl	8000b04 <__aeabi_dcmpge>
 800ebc0:	9e04      	ldr	r6, [sp, #16]
 800ebc2:	4637      	mov	r7, r6
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	f040 8245 	bne.w	800f054 <_dtoa_r+0x954>
 800ebca:	9d00      	ldr	r5, [sp, #0]
 800ebcc:	2331      	movs	r3, #49	; 0x31
 800ebce:	f805 3b01 	strb.w	r3, [r5], #1
 800ebd2:	f10b 0b01 	add.w	fp, fp, #1
 800ebd6:	e241      	b.n	800f05c <_dtoa_r+0x95c>
 800ebd8:	07f2      	lsls	r2, r6, #31
 800ebda:	d505      	bpl.n	800ebe8 <_dtoa_r+0x4e8>
 800ebdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebe0:	f7f1 fd0a 	bl	80005f8 <__aeabi_dmul>
 800ebe4:	3501      	adds	r5, #1
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	1076      	asrs	r6, r6, #1
 800ebea:	3708      	adds	r7, #8
 800ebec:	e773      	b.n	800ead6 <_dtoa_r+0x3d6>
 800ebee:	2502      	movs	r5, #2
 800ebf0:	e775      	b.n	800eade <_dtoa_r+0x3de>
 800ebf2:	9e04      	ldr	r6, [sp, #16]
 800ebf4:	465f      	mov	r7, fp
 800ebf6:	e792      	b.n	800eb1e <_dtoa_r+0x41e>
 800ebf8:	9900      	ldr	r1, [sp, #0]
 800ebfa:	4b50      	ldr	r3, [pc, #320]	; (800ed3c <_dtoa_r+0x63c>)
 800ebfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec00:	4431      	add	r1, r6
 800ec02:	9102      	str	r1, [sp, #8]
 800ec04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec06:	eeb0 9a47 	vmov.f32	s18, s14
 800ec0a:	eef0 9a67 	vmov.f32	s19, s15
 800ec0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ec12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ec16:	2900      	cmp	r1, #0
 800ec18:	d044      	beq.n	800eca4 <_dtoa_r+0x5a4>
 800ec1a:	494e      	ldr	r1, [pc, #312]	; (800ed54 <_dtoa_r+0x654>)
 800ec1c:	2000      	movs	r0, #0
 800ec1e:	f7f1 fe15 	bl	800084c <__aeabi_ddiv>
 800ec22:	ec53 2b19 	vmov	r2, r3, d9
 800ec26:	f7f1 fb2f 	bl	8000288 <__aeabi_dsub>
 800ec2a:	9d00      	ldr	r5, [sp, #0]
 800ec2c:	ec41 0b19 	vmov	d9, r0, r1
 800ec30:	4649      	mov	r1, r9
 800ec32:	4640      	mov	r0, r8
 800ec34:	f7f1 ff90 	bl	8000b58 <__aeabi_d2iz>
 800ec38:	4606      	mov	r6, r0
 800ec3a:	f7f1 fc73 	bl	8000524 <__aeabi_i2d>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	460b      	mov	r3, r1
 800ec42:	4640      	mov	r0, r8
 800ec44:	4649      	mov	r1, r9
 800ec46:	f7f1 fb1f 	bl	8000288 <__aeabi_dsub>
 800ec4a:	3630      	adds	r6, #48	; 0x30
 800ec4c:	f805 6b01 	strb.w	r6, [r5], #1
 800ec50:	ec53 2b19 	vmov	r2, r3, d9
 800ec54:	4680      	mov	r8, r0
 800ec56:	4689      	mov	r9, r1
 800ec58:	f7f1 ff40 	bl	8000adc <__aeabi_dcmplt>
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	d164      	bne.n	800ed2a <_dtoa_r+0x62a>
 800ec60:	4642      	mov	r2, r8
 800ec62:	464b      	mov	r3, r9
 800ec64:	4937      	ldr	r1, [pc, #220]	; (800ed44 <_dtoa_r+0x644>)
 800ec66:	2000      	movs	r0, #0
 800ec68:	f7f1 fb0e 	bl	8000288 <__aeabi_dsub>
 800ec6c:	ec53 2b19 	vmov	r2, r3, d9
 800ec70:	f7f1 ff34 	bl	8000adc <__aeabi_dcmplt>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	f040 80b6 	bne.w	800ede6 <_dtoa_r+0x6e6>
 800ec7a:	9b02      	ldr	r3, [sp, #8]
 800ec7c:	429d      	cmp	r5, r3
 800ec7e:	f43f af7c 	beq.w	800eb7a <_dtoa_r+0x47a>
 800ec82:	4b31      	ldr	r3, [pc, #196]	; (800ed48 <_dtoa_r+0x648>)
 800ec84:	ec51 0b19 	vmov	r0, r1, d9
 800ec88:	2200      	movs	r2, #0
 800ec8a:	f7f1 fcb5 	bl	80005f8 <__aeabi_dmul>
 800ec8e:	4b2e      	ldr	r3, [pc, #184]	; (800ed48 <_dtoa_r+0x648>)
 800ec90:	ec41 0b19 	vmov	d9, r0, r1
 800ec94:	2200      	movs	r2, #0
 800ec96:	4640      	mov	r0, r8
 800ec98:	4649      	mov	r1, r9
 800ec9a:	f7f1 fcad 	bl	80005f8 <__aeabi_dmul>
 800ec9e:	4680      	mov	r8, r0
 800eca0:	4689      	mov	r9, r1
 800eca2:	e7c5      	b.n	800ec30 <_dtoa_r+0x530>
 800eca4:	ec51 0b17 	vmov	r0, r1, d7
 800eca8:	f7f1 fca6 	bl	80005f8 <__aeabi_dmul>
 800ecac:	9b02      	ldr	r3, [sp, #8]
 800ecae:	9d00      	ldr	r5, [sp, #0]
 800ecb0:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecb2:	ec41 0b19 	vmov	d9, r0, r1
 800ecb6:	4649      	mov	r1, r9
 800ecb8:	4640      	mov	r0, r8
 800ecba:	f7f1 ff4d 	bl	8000b58 <__aeabi_d2iz>
 800ecbe:	4606      	mov	r6, r0
 800ecc0:	f7f1 fc30 	bl	8000524 <__aeabi_i2d>
 800ecc4:	3630      	adds	r6, #48	; 0x30
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	460b      	mov	r3, r1
 800ecca:	4640      	mov	r0, r8
 800eccc:	4649      	mov	r1, r9
 800ecce:	f7f1 fadb 	bl	8000288 <__aeabi_dsub>
 800ecd2:	f805 6b01 	strb.w	r6, [r5], #1
 800ecd6:	9b02      	ldr	r3, [sp, #8]
 800ecd8:	429d      	cmp	r5, r3
 800ecda:	4680      	mov	r8, r0
 800ecdc:	4689      	mov	r9, r1
 800ecde:	f04f 0200 	mov.w	r2, #0
 800ece2:	d124      	bne.n	800ed2e <_dtoa_r+0x62e>
 800ece4:	4b1b      	ldr	r3, [pc, #108]	; (800ed54 <_dtoa_r+0x654>)
 800ece6:	ec51 0b19 	vmov	r0, r1, d9
 800ecea:	f7f1 facf 	bl	800028c <__adddf3>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	4640      	mov	r0, r8
 800ecf4:	4649      	mov	r1, r9
 800ecf6:	f7f1 ff0f 	bl	8000b18 <__aeabi_dcmpgt>
 800ecfa:	2800      	cmp	r0, #0
 800ecfc:	d173      	bne.n	800ede6 <_dtoa_r+0x6e6>
 800ecfe:	ec53 2b19 	vmov	r2, r3, d9
 800ed02:	4914      	ldr	r1, [pc, #80]	; (800ed54 <_dtoa_r+0x654>)
 800ed04:	2000      	movs	r0, #0
 800ed06:	f7f1 fabf 	bl	8000288 <__aeabi_dsub>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	4640      	mov	r0, r8
 800ed10:	4649      	mov	r1, r9
 800ed12:	f7f1 fee3 	bl	8000adc <__aeabi_dcmplt>
 800ed16:	2800      	cmp	r0, #0
 800ed18:	f43f af2f 	beq.w	800eb7a <_dtoa_r+0x47a>
 800ed1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ed1e:	1e6b      	subs	r3, r5, #1
 800ed20:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed26:	2b30      	cmp	r3, #48	; 0x30
 800ed28:	d0f8      	beq.n	800ed1c <_dtoa_r+0x61c>
 800ed2a:	46bb      	mov	fp, r7
 800ed2c:	e04a      	b.n	800edc4 <_dtoa_r+0x6c4>
 800ed2e:	4b06      	ldr	r3, [pc, #24]	; (800ed48 <_dtoa_r+0x648>)
 800ed30:	f7f1 fc62 	bl	80005f8 <__aeabi_dmul>
 800ed34:	4680      	mov	r8, r0
 800ed36:	4689      	mov	r9, r1
 800ed38:	e7bd      	b.n	800ecb6 <_dtoa_r+0x5b6>
 800ed3a:	bf00      	nop
 800ed3c:	08013f38 	.word	0x08013f38
 800ed40:	08013f10 	.word	0x08013f10
 800ed44:	3ff00000 	.word	0x3ff00000
 800ed48:	40240000 	.word	0x40240000
 800ed4c:	401c0000 	.word	0x401c0000
 800ed50:	40140000 	.word	0x40140000
 800ed54:	3fe00000 	.word	0x3fe00000
 800ed58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ed5c:	9d00      	ldr	r5, [sp, #0]
 800ed5e:	4642      	mov	r2, r8
 800ed60:	464b      	mov	r3, r9
 800ed62:	4630      	mov	r0, r6
 800ed64:	4639      	mov	r1, r7
 800ed66:	f7f1 fd71 	bl	800084c <__aeabi_ddiv>
 800ed6a:	f7f1 fef5 	bl	8000b58 <__aeabi_d2iz>
 800ed6e:	9001      	str	r0, [sp, #4]
 800ed70:	f7f1 fbd8 	bl	8000524 <__aeabi_i2d>
 800ed74:	4642      	mov	r2, r8
 800ed76:	464b      	mov	r3, r9
 800ed78:	f7f1 fc3e 	bl	80005f8 <__aeabi_dmul>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
 800ed80:	4630      	mov	r0, r6
 800ed82:	4639      	mov	r1, r7
 800ed84:	f7f1 fa80 	bl	8000288 <__aeabi_dsub>
 800ed88:	9e01      	ldr	r6, [sp, #4]
 800ed8a:	9f04      	ldr	r7, [sp, #16]
 800ed8c:	3630      	adds	r6, #48	; 0x30
 800ed8e:	f805 6b01 	strb.w	r6, [r5], #1
 800ed92:	9e00      	ldr	r6, [sp, #0]
 800ed94:	1bae      	subs	r6, r5, r6
 800ed96:	42b7      	cmp	r7, r6
 800ed98:	4602      	mov	r2, r0
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	d134      	bne.n	800ee08 <_dtoa_r+0x708>
 800ed9e:	f7f1 fa75 	bl	800028c <__adddf3>
 800eda2:	4642      	mov	r2, r8
 800eda4:	464b      	mov	r3, r9
 800eda6:	4606      	mov	r6, r0
 800eda8:	460f      	mov	r7, r1
 800edaa:	f7f1 feb5 	bl	8000b18 <__aeabi_dcmpgt>
 800edae:	b9c8      	cbnz	r0, 800ede4 <_dtoa_r+0x6e4>
 800edb0:	4642      	mov	r2, r8
 800edb2:	464b      	mov	r3, r9
 800edb4:	4630      	mov	r0, r6
 800edb6:	4639      	mov	r1, r7
 800edb8:	f7f1 fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 800edbc:	b110      	cbz	r0, 800edc4 <_dtoa_r+0x6c4>
 800edbe:	9b01      	ldr	r3, [sp, #4]
 800edc0:	07db      	lsls	r3, r3, #31
 800edc2:	d40f      	bmi.n	800ede4 <_dtoa_r+0x6e4>
 800edc4:	4651      	mov	r1, sl
 800edc6:	4620      	mov	r0, r4
 800edc8:	f000 fbcc 	bl	800f564 <_Bfree>
 800edcc:	2300      	movs	r3, #0
 800edce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800edd0:	702b      	strb	r3, [r5, #0]
 800edd2:	f10b 0301 	add.w	r3, fp, #1
 800edd6:	6013      	str	r3, [r2, #0]
 800edd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edda:	2b00      	cmp	r3, #0
 800eddc:	f43f ace2 	beq.w	800e7a4 <_dtoa_r+0xa4>
 800ede0:	601d      	str	r5, [r3, #0]
 800ede2:	e4df      	b.n	800e7a4 <_dtoa_r+0xa4>
 800ede4:	465f      	mov	r7, fp
 800ede6:	462b      	mov	r3, r5
 800ede8:	461d      	mov	r5, r3
 800edea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800edee:	2a39      	cmp	r2, #57	; 0x39
 800edf0:	d106      	bne.n	800ee00 <_dtoa_r+0x700>
 800edf2:	9a00      	ldr	r2, [sp, #0]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d1f7      	bne.n	800ede8 <_dtoa_r+0x6e8>
 800edf8:	9900      	ldr	r1, [sp, #0]
 800edfa:	2230      	movs	r2, #48	; 0x30
 800edfc:	3701      	adds	r7, #1
 800edfe:	700a      	strb	r2, [r1, #0]
 800ee00:	781a      	ldrb	r2, [r3, #0]
 800ee02:	3201      	adds	r2, #1
 800ee04:	701a      	strb	r2, [r3, #0]
 800ee06:	e790      	b.n	800ed2a <_dtoa_r+0x62a>
 800ee08:	4ba3      	ldr	r3, [pc, #652]	; (800f098 <_dtoa_r+0x998>)
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f7f1 fbf4 	bl	80005f8 <__aeabi_dmul>
 800ee10:	2200      	movs	r2, #0
 800ee12:	2300      	movs	r3, #0
 800ee14:	4606      	mov	r6, r0
 800ee16:	460f      	mov	r7, r1
 800ee18:	f7f1 fe56 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	d09e      	beq.n	800ed5e <_dtoa_r+0x65e>
 800ee20:	e7d0      	b.n	800edc4 <_dtoa_r+0x6c4>
 800ee22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee24:	2a00      	cmp	r2, #0
 800ee26:	f000 80ca 	beq.w	800efbe <_dtoa_r+0x8be>
 800ee2a:	9a07      	ldr	r2, [sp, #28]
 800ee2c:	2a01      	cmp	r2, #1
 800ee2e:	f300 80ad 	bgt.w	800ef8c <_dtoa_r+0x88c>
 800ee32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee34:	2a00      	cmp	r2, #0
 800ee36:	f000 80a5 	beq.w	800ef84 <_dtoa_r+0x884>
 800ee3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ee3e:	9e08      	ldr	r6, [sp, #32]
 800ee40:	9d05      	ldr	r5, [sp, #20]
 800ee42:	9a05      	ldr	r2, [sp, #20]
 800ee44:	441a      	add	r2, r3
 800ee46:	9205      	str	r2, [sp, #20]
 800ee48:	9a06      	ldr	r2, [sp, #24]
 800ee4a:	2101      	movs	r1, #1
 800ee4c:	441a      	add	r2, r3
 800ee4e:	4620      	mov	r0, r4
 800ee50:	9206      	str	r2, [sp, #24]
 800ee52:	f000 fc87 	bl	800f764 <__i2b>
 800ee56:	4607      	mov	r7, r0
 800ee58:	b165      	cbz	r5, 800ee74 <_dtoa_r+0x774>
 800ee5a:	9b06      	ldr	r3, [sp, #24]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	dd09      	ble.n	800ee74 <_dtoa_r+0x774>
 800ee60:	42ab      	cmp	r3, r5
 800ee62:	9a05      	ldr	r2, [sp, #20]
 800ee64:	bfa8      	it	ge
 800ee66:	462b      	movge	r3, r5
 800ee68:	1ad2      	subs	r2, r2, r3
 800ee6a:	9205      	str	r2, [sp, #20]
 800ee6c:	9a06      	ldr	r2, [sp, #24]
 800ee6e:	1aed      	subs	r5, r5, r3
 800ee70:	1ad3      	subs	r3, r2, r3
 800ee72:	9306      	str	r3, [sp, #24]
 800ee74:	9b08      	ldr	r3, [sp, #32]
 800ee76:	b1f3      	cbz	r3, 800eeb6 <_dtoa_r+0x7b6>
 800ee78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	f000 80a3 	beq.w	800efc6 <_dtoa_r+0x8c6>
 800ee80:	2e00      	cmp	r6, #0
 800ee82:	dd10      	ble.n	800eea6 <_dtoa_r+0x7a6>
 800ee84:	4639      	mov	r1, r7
 800ee86:	4632      	mov	r2, r6
 800ee88:	4620      	mov	r0, r4
 800ee8a:	f000 fd2b 	bl	800f8e4 <__pow5mult>
 800ee8e:	4652      	mov	r2, sl
 800ee90:	4601      	mov	r1, r0
 800ee92:	4607      	mov	r7, r0
 800ee94:	4620      	mov	r0, r4
 800ee96:	f000 fc7b 	bl	800f790 <__multiply>
 800ee9a:	4651      	mov	r1, sl
 800ee9c:	4680      	mov	r8, r0
 800ee9e:	4620      	mov	r0, r4
 800eea0:	f000 fb60 	bl	800f564 <_Bfree>
 800eea4:	46c2      	mov	sl, r8
 800eea6:	9b08      	ldr	r3, [sp, #32]
 800eea8:	1b9a      	subs	r2, r3, r6
 800eeaa:	d004      	beq.n	800eeb6 <_dtoa_r+0x7b6>
 800eeac:	4651      	mov	r1, sl
 800eeae:	4620      	mov	r0, r4
 800eeb0:	f000 fd18 	bl	800f8e4 <__pow5mult>
 800eeb4:	4682      	mov	sl, r0
 800eeb6:	2101      	movs	r1, #1
 800eeb8:	4620      	mov	r0, r4
 800eeba:	f000 fc53 	bl	800f764 <__i2b>
 800eebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	4606      	mov	r6, r0
 800eec4:	f340 8081 	ble.w	800efca <_dtoa_r+0x8ca>
 800eec8:	461a      	mov	r2, r3
 800eeca:	4601      	mov	r1, r0
 800eecc:	4620      	mov	r0, r4
 800eece:	f000 fd09 	bl	800f8e4 <__pow5mult>
 800eed2:	9b07      	ldr	r3, [sp, #28]
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	4606      	mov	r6, r0
 800eed8:	dd7a      	ble.n	800efd0 <_dtoa_r+0x8d0>
 800eeda:	f04f 0800 	mov.w	r8, #0
 800eede:	6933      	ldr	r3, [r6, #16]
 800eee0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800eee4:	6918      	ldr	r0, [r3, #16]
 800eee6:	f000 fbef 	bl	800f6c8 <__hi0bits>
 800eeea:	f1c0 0020 	rsb	r0, r0, #32
 800eeee:	9b06      	ldr	r3, [sp, #24]
 800eef0:	4418      	add	r0, r3
 800eef2:	f010 001f 	ands.w	r0, r0, #31
 800eef6:	f000 8094 	beq.w	800f022 <_dtoa_r+0x922>
 800eefa:	f1c0 0320 	rsb	r3, r0, #32
 800eefe:	2b04      	cmp	r3, #4
 800ef00:	f340 8085 	ble.w	800f00e <_dtoa_r+0x90e>
 800ef04:	9b05      	ldr	r3, [sp, #20]
 800ef06:	f1c0 001c 	rsb	r0, r0, #28
 800ef0a:	4403      	add	r3, r0
 800ef0c:	9305      	str	r3, [sp, #20]
 800ef0e:	9b06      	ldr	r3, [sp, #24]
 800ef10:	4403      	add	r3, r0
 800ef12:	4405      	add	r5, r0
 800ef14:	9306      	str	r3, [sp, #24]
 800ef16:	9b05      	ldr	r3, [sp, #20]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	dd05      	ble.n	800ef28 <_dtoa_r+0x828>
 800ef1c:	4651      	mov	r1, sl
 800ef1e:	461a      	mov	r2, r3
 800ef20:	4620      	mov	r0, r4
 800ef22:	f000 fd39 	bl	800f998 <__lshift>
 800ef26:	4682      	mov	sl, r0
 800ef28:	9b06      	ldr	r3, [sp, #24]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	dd05      	ble.n	800ef3a <_dtoa_r+0x83a>
 800ef2e:	4631      	mov	r1, r6
 800ef30:	461a      	mov	r2, r3
 800ef32:	4620      	mov	r0, r4
 800ef34:	f000 fd30 	bl	800f998 <__lshift>
 800ef38:	4606      	mov	r6, r0
 800ef3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d072      	beq.n	800f026 <_dtoa_r+0x926>
 800ef40:	4631      	mov	r1, r6
 800ef42:	4650      	mov	r0, sl
 800ef44:	f000 fd94 	bl	800fa70 <__mcmp>
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	da6c      	bge.n	800f026 <_dtoa_r+0x926>
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	4651      	mov	r1, sl
 800ef50:	220a      	movs	r2, #10
 800ef52:	4620      	mov	r0, r4
 800ef54:	f000 fb28 	bl	800f5a8 <__multadd>
 800ef58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ef5e:	4682      	mov	sl, r0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	f000 81b0 	beq.w	800f2c6 <_dtoa_r+0xbc6>
 800ef66:	2300      	movs	r3, #0
 800ef68:	4639      	mov	r1, r7
 800ef6a:	220a      	movs	r2, #10
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	f000 fb1b 	bl	800f5a8 <__multadd>
 800ef72:	9b01      	ldr	r3, [sp, #4]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	4607      	mov	r7, r0
 800ef78:	f300 8096 	bgt.w	800f0a8 <_dtoa_r+0x9a8>
 800ef7c:	9b07      	ldr	r3, [sp, #28]
 800ef7e:	2b02      	cmp	r3, #2
 800ef80:	dc59      	bgt.n	800f036 <_dtoa_r+0x936>
 800ef82:	e091      	b.n	800f0a8 <_dtoa_r+0x9a8>
 800ef84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ef8a:	e758      	b.n	800ee3e <_dtoa_r+0x73e>
 800ef8c:	9b04      	ldr	r3, [sp, #16]
 800ef8e:	1e5e      	subs	r6, r3, #1
 800ef90:	9b08      	ldr	r3, [sp, #32]
 800ef92:	42b3      	cmp	r3, r6
 800ef94:	bfbf      	itttt	lt
 800ef96:	9b08      	ldrlt	r3, [sp, #32]
 800ef98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ef9a:	9608      	strlt	r6, [sp, #32]
 800ef9c:	1af3      	sublt	r3, r6, r3
 800ef9e:	bfb4      	ite	lt
 800efa0:	18d2      	addlt	r2, r2, r3
 800efa2:	1b9e      	subge	r6, r3, r6
 800efa4:	9b04      	ldr	r3, [sp, #16]
 800efa6:	bfbc      	itt	lt
 800efa8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800efaa:	2600      	movlt	r6, #0
 800efac:	2b00      	cmp	r3, #0
 800efae:	bfb7      	itett	lt
 800efb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800efb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800efb8:	1a9d      	sublt	r5, r3, r2
 800efba:	2300      	movlt	r3, #0
 800efbc:	e741      	b.n	800ee42 <_dtoa_r+0x742>
 800efbe:	9e08      	ldr	r6, [sp, #32]
 800efc0:	9d05      	ldr	r5, [sp, #20]
 800efc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800efc4:	e748      	b.n	800ee58 <_dtoa_r+0x758>
 800efc6:	9a08      	ldr	r2, [sp, #32]
 800efc8:	e770      	b.n	800eeac <_dtoa_r+0x7ac>
 800efca:	9b07      	ldr	r3, [sp, #28]
 800efcc:	2b01      	cmp	r3, #1
 800efce:	dc19      	bgt.n	800f004 <_dtoa_r+0x904>
 800efd0:	9b02      	ldr	r3, [sp, #8]
 800efd2:	b9bb      	cbnz	r3, 800f004 <_dtoa_r+0x904>
 800efd4:	9b03      	ldr	r3, [sp, #12]
 800efd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800efda:	b99b      	cbnz	r3, 800f004 <_dtoa_r+0x904>
 800efdc:	9b03      	ldr	r3, [sp, #12]
 800efde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800efe2:	0d1b      	lsrs	r3, r3, #20
 800efe4:	051b      	lsls	r3, r3, #20
 800efe6:	b183      	cbz	r3, 800f00a <_dtoa_r+0x90a>
 800efe8:	9b05      	ldr	r3, [sp, #20]
 800efea:	3301      	adds	r3, #1
 800efec:	9305      	str	r3, [sp, #20]
 800efee:	9b06      	ldr	r3, [sp, #24]
 800eff0:	3301      	adds	r3, #1
 800eff2:	9306      	str	r3, [sp, #24]
 800eff4:	f04f 0801 	mov.w	r8, #1
 800eff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800effa:	2b00      	cmp	r3, #0
 800effc:	f47f af6f 	bne.w	800eede <_dtoa_r+0x7de>
 800f000:	2001      	movs	r0, #1
 800f002:	e774      	b.n	800eeee <_dtoa_r+0x7ee>
 800f004:	f04f 0800 	mov.w	r8, #0
 800f008:	e7f6      	b.n	800eff8 <_dtoa_r+0x8f8>
 800f00a:	4698      	mov	r8, r3
 800f00c:	e7f4      	b.n	800eff8 <_dtoa_r+0x8f8>
 800f00e:	d082      	beq.n	800ef16 <_dtoa_r+0x816>
 800f010:	9a05      	ldr	r2, [sp, #20]
 800f012:	331c      	adds	r3, #28
 800f014:	441a      	add	r2, r3
 800f016:	9205      	str	r2, [sp, #20]
 800f018:	9a06      	ldr	r2, [sp, #24]
 800f01a:	441a      	add	r2, r3
 800f01c:	441d      	add	r5, r3
 800f01e:	9206      	str	r2, [sp, #24]
 800f020:	e779      	b.n	800ef16 <_dtoa_r+0x816>
 800f022:	4603      	mov	r3, r0
 800f024:	e7f4      	b.n	800f010 <_dtoa_r+0x910>
 800f026:	9b04      	ldr	r3, [sp, #16]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	dc37      	bgt.n	800f09c <_dtoa_r+0x99c>
 800f02c:	9b07      	ldr	r3, [sp, #28]
 800f02e:	2b02      	cmp	r3, #2
 800f030:	dd34      	ble.n	800f09c <_dtoa_r+0x99c>
 800f032:	9b04      	ldr	r3, [sp, #16]
 800f034:	9301      	str	r3, [sp, #4]
 800f036:	9b01      	ldr	r3, [sp, #4]
 800f038:	b963      	cbnz	r3, 800f054 <_dtoa_r+0x954>
 800f03a:	4631      	mov	r1, r6
 800f03c:	2205      	movs	r2, #5
 800f03e:	4620      	mov	r0, r4
 800f040:	f000 fab2 	bl	800f5a8 <__multadd>
 800f044:	4601      	mov	r1, r0
 800f046:	4606      	mov	r6, r0
 800f048:	4650      	mov	r0, sl
 800f04a:	f000 fd11 	bl	800fa70 <__mcmp>
 800f04e:	2800      	cmp	r0, #0
 800f050:	f73f adbb 	bgt.w	800ebca <_dtoa_r+0x4ca>
 800f054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f056:	9d00      	ldr	r5, [sp, #0]
 800f058:	ea6f 0b03 	mvn.w	fp, r3
 800f05c:	f04f 0800 	mov.w	r8, #0
 800f060:	4631      	mov	r1, r6
 800f062:	4620      	mov	r0, r4
 800f064:	f000 fa7e 	bl	800f564 <_Bfree>
 800f068:	2f00      	cmp	r7, #0
 800f06a:	f43f aeab 	beq.w	800edc4 <_dtoa_r+0x6c4>
 800f06e:	f1b8 0f00 	cmp.w	r8, #0
 800f072:	d005      	beq.n	800f080 <_dtoa_r+0x980>
 800f074:	45b8      	cmp	r8, r7
 800f076:	d003      	beq.n	800f080 <_dtoa_r+0x980>
 800f078:	4641      	mov	r1, r8
 800f07a:	4620      	mov	r0, r4
 800f07c:	f000 fa72 	bl	800f564 <_Bfree>
 800f080:	4639      	mov	r1, r7
 800f082:	4620      	mov	r0, r4
 800f084:	f000 fa6e 	bl	800f564 <_Bfree>
 800f088:	e69c      	b.n	800edc4 <_dtoa_r+0x6c4>
 800f08a:	2600      	movs	r6, #0
 800f08c:	4637      	mov	r7, r6
 800f08e:	e7e1      	b.n	800f054 <_dtoa_r+0x954>
 800f090:	46bb      	mov	fp, r7
 800f092:	4637      	mov	r7, r6
 800f094:	e599      	b.n	800ebca <_dtoa_r+0x4ca>
 800f096:	bf00      	nop
 800f098:	40240000 	.word	0x40240000
 800f09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	f000 80c8 	beq.w	800f234 <_dtoa_r+0xb34>
 800f0a4:	9b04      	ldr	r3, [sp, #16]
 800f0a6:	9301      	str	r3, [sp, #4]
 800f0a8:	2d00      	cmp	r5, #0
 800f0aa:	dd05      	ble.n	800f0b8 <_dtoa_r+0x9b8>
 800f0ac:	4639      	mov	r1, r7
 800f0ae:	462a      	mov	r2, r5
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	f000 fc71 	bl	800f998 <__lshift>
 800f0b6:	4607      	mov	r7, r0
 800f0b8:	f1b8 0f00 	cmp.w	r8, #0
 800f0bc:	d05b      	beq.n	800f176 <_dtoa_r+0xa76>
 800f0be:	6879      	ldr	r1, [r7, #4]
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	f000 fa0f 	bl	800f4e4 <_Balloc>
 800f0c6:	4605      	mov	r5, r0
 800f0c8:	b928      	cbnz	r0, 800f0d6 <_dtoa_r+0x9d6>
 800f0ca:	4b83      	ldr	r3, [pc, #524]	; (800f2d8 <_dtoa_r+0xbd8>)
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f0d2:	f7ff bb2e 	b.w	800e732 <_dtoa_r+0x32>
 800f0d6:	693a      	ldr	r2, [r7, #16]
 800f0d8:	3202      	adds	r2, #2
 800f0da:	0092      	lsls	r2, r2, #2
 800f0dc:	f107 010c 	add.w	r1, r7, #12
 800f0e0:	300c      	adds	r0, #12
 800f0e2:	f7ff fa70 	bl	800e5c6 <memcpy>
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	4629      	mov	r1, r5
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	f000 fc54 	bl	800f998 <__lshift>
 800f0f0:	9b00      	ldr	r3, [sp, #0]
 800f0f2:	3301      	adds	r3, #1
 800f0f4:	9304      	str	r3, [sp, #16]
 800f0f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0fa:	4413      	add	r3, r2
 800f0fc:	9308      	str	r3, [sp, #32]
 800f0fe:	9b02      	ldr	r3, [sp, #8]
 800f100:	f003 0301 	and.w	r3, r3, #1
 800f104:	46b8      	mov	r8, r7
 800f106:	9306      	str	r3, [sp, #24]
 800f108:	4607      	mov	r7, r0
 800f10a:	9b04      	ldr	r3, [sp, #16]
 800f10c:	4631      	mov	r1, r6
 800f10e:	3b01      	subs	r3, #1
 800f110:	4650      	mov	r0, sl
 800f112:	9301      	str	r3, [sp, #4]
 800f114:	f7ff fa6c 	bl	800e5f0 <quorem>
 800f118:	4641      	mov	r1, r8
 800f11a:	9002      	str	r0, [sp, #8]
 800f11c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f120:	4650      	mov	r0, sl
 800f122:	f000 fca5 	bl	800fa70 <__mcmp>
 800f126:	463a      	mov	r2, r7
 800f128:	9005      	str	r0, [sp, #20]
 800f12a:	4631      	mov	r1, r6
 800f12c:	4620      	mov	r0, r4
 800f12e:	f000 fcbb 	bl	800faa8 <__mdiff>
 800f132:	68c2      	ldr	r2, [r0, #12]
 800f134:	4605      	mov	r5, r0
 800f136:	bb02      	cbnz	r2, 800f17a <_dtoa_r+0xa7a>
 800f138:	4601      	mov	r1, r0
 800f13a:	4650      	mov	r0, sl
 800f13c:	f000 fc98 	bl	800fa70 <__mcmp>
 800f140:	4602      	mov	r2, r0
 800f142:	4629      	mov	r1, r5
 800f144:	4620      	mov	r0, r4
 800f146:	9209      	str	r2, [sp, #36]	; 0x24
 800f148:	f000 fa0c 	bl	800f564 <_Bfree>
 800f14c:	9b07      	ldr	r3, [sp, #28]
 800f14e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f150:	9d04      	ldr	r5, [sp, #16]
 800f152:	ea43 0102 	orr.w	r1, r3, r2
 800f156:	9b06      	ldr	r3, [sp, #24]
 800f158:	4319      	orrs	r1, r3
 800f15a:	d110      	bne.n	800f17e <_dtoa_r+0xa7e>
 800f15c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f160:	d029      	beq.n	800f1b6 <_dtoa_r+0xab6>
 800f162:	9b05      	ldr	r3, [sp, #20]
 800f164:	2b00      	cmp	r3, #0
 800f166:	dd02      	ble.n	800f16e <_dtoa_r+0xa6e>
 800f168:	9b02      	ldr	r3, [sp, #8]
 800f16a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f16e:	9b01      	ldr	r3, [sp, #4]
 800f170:	f883 9000 	strb.w	r9, [r3]
 800f174:	e774      	b.n	800f060 <_dtoa_r+0x960>
 800f176:	4638      	mov	r0, r7
 800f178:	e7ba      	b.n	800f0f0 <_dtoa_r+0x9f0>
 800f17a:	2201      	movs	r2, #1
 800f17c:	e7e1      	b.n	800f142 <_dtoa_r+0xa42>
 800f17e:	9b05      	ldr	r3, [sp, #20]
 800f180:	2b00      	cmp	r3, #0
 800f182:	db04      	blt.n	800f18e <_dtoa_r+0xa8e>
 800f184:	9907      	ldr	r1, [sp, #28]
 800f186:	430b      	orrs	r3, r1
 800f188:	9906      	ldr	r1, [sp, #24]
 800f18a:	430b      	orrs	r3, r1
 800f18c:	d120      	bne.n	800f1d0 <_dtoa_r+0xad0>
 800f18e:	2a00      	cmp	r2, #0
 800f190:	dded      	ble.n	800f16e <_dtoa_r+0xa6e>
 800f192:	4651      	mov	r1, sl
 800f194:	2201      	movs	r2, #1
 800f196:	4620      	mov	r0, r4
 800f198:	f000 fbfe 	bl	800f998 <__lshift>
 800f19c:	4631      	mov	r1, r6
 800f19e:	4682      	mov	sl, r0
 800f1a0:	f000 fc66 	bl	800fa70 <__mcmp>
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	dc03      	bgt.n	800f1b0 <_dtoa_r+0xab0>
 800f1a8:	d1e1      	bne.n	800f16e <_dtoa_r+0xa6e>
 800f1aa:	f019 0f01 	tst.w	r9, #1
 800f1ae:	d0de      	beq.n	800f16e <_dtoa_r+0xa6e>
 800f1b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f1b4:	d1d8      	bne.n	800f168 <_dtoa_r+0xa68>
 800f1b6:	9a01      	ldr	r2, [sp, #4]
 800f1b8:	2339      	movs	r3, #57	; 0x39
 800f1ba:	7013      	strb	r3, [r2, #0]
 800f1bc:	462b      	mov	r3, r5
 800f1be:	461d      	mov	r5, r3
 800f1c0:	3b01      	subs	r3, #1
 800f1c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f1c6:	2a39      	cmp	r2, #57	; 0x39
 800f1c8:	d06c      	beq.n	800f2a4 <_dtoa_r+0xba4>
 800f1ca:	3201      	adds	r2, #1
 800f1cc:	701a      	strb	r2, [r3, #0]
 800f1ce:	e747      	b.n	800f060 <_dtoa_r+0x960>
 800f1d0:	2a00      	cmp	r2, #0
 800f1d2:	dd07      	ble.n	800f1e4 <_dtoa_r+0xae4>
 800f1d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f1d8:	d0ed      	beq.n	800f1b6 <_dtoa_r+0xab6>
 800f1da:	9a01      	ldr	r2, [sp, #4]
 800f1dc:	f109 0301 	add.w	r3, r9, #1
 800f1e0:	7013      	strb	r3, [r2, #0]
 800f1e2:	e73d      	b.n	800f060 <_dtoa_r+0x960>
 800f1e4:	9b04      	ldr	r3, [sp, #16]
 800f1e6:	9a08      	ldr	r2, [sp, #32]
 800f1e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d043      	beq.n	800f278 <_dtoa_r+0xb78>
 800f1f0:	4651      	mov	r1, sl
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	220a      	movs	r2, #10
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	f000 f9d6 	bl	800f5a8 <__multadd>
 800f1fc:	45b8      	cmp	r8, r7
 800f1fe:	4682      	mov	sl, r0
 800f200:	f04f 0300 	mov.w	r3, #0
 800f204:	f04f 020a 	mov.w	r2, #10
 800f208:	4641      	mov	r1, r8
 800f20a:	4620      	mov	r0, r4
 800f20c:	d107      	bne.n	800f21e <_dtoa_r+0xb1e>
 800f20e:	f000 f9cb 	bl	800f5a8 <__multadd>
 800f212:	4680      	mov	r8, r0
 800f214:	4607      	mov	r7, r0
 800f216:	9b04      	ldr	r3, [sp, #16]
 800f218:	3301      	adds	r3, #1
 800f21a:	9304      	str	r3, [sp, #16]
 800f21c:	e775      	b.n	800f10a <_dtoa_r+0xa0a>
 800f21e:	f000 f9c3 	bl	800f5a8 <__multadd>
 800f222:	4639      	mov	r1, r7
 800f224:	4680      	mov	r8, r0
 800f226:	2300      	movs	r3, #0
 800f228:	220a      	movs	r2, #10
 800f22a:	4620      	mov	r0, r4
 800f22c:	f000 f9bc 	bl	800f5a8 <__multadd>
 800f230:	4607      	mov	r7, r0
 800f232:	e7f0      	b.n	800f216 <_dtoa_r+0xb16>
 800f234:	9b04      	ldr	r3, [sp, #16]
 800f236:	9301      	str	r3, [sp, #4]
 800f238:	9d00      	ldr	r5, [sp, #0]
 800f23a:	4631      	mov	r1, r6
 800f23c:	4650      	mov	r0, sl
 800f23e:	f7ff f9d7 	bl	800e5f0 <quorem>
 800f242:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f246:	9b00      	ldr	r3, [sp, #0]
 800f248:	f805 9b01 	strb.w	r9, [r5], #1
 800f24c:	1aea      	subs	r2, r5, r3
 800f24e:	9b01      	ldr	r3, [sp, #4]
 800f250:	4293      	cmp	r3, r2
 800f252:	dd07      	ble.n	800f264 <_dtoa_r+0xb64>
 800f254:	4651      	mov	r1, sl
 800f256:	2300      	movs	r3, #0
 800f258:	220a      	movs	r2, #10
 800f25a:	4620      	mov	r0, r4
 800f25c:	f000 f9a4 	bl	800f5a8 <__multadd>
 800f260:	4682      	mov	sl, r0
 800f262:	e7ea      	b.n	800f23a <_dtoa_r+0xb3a>
 800f264:	9b01      	ldr	r3, [sp, #4]
 800f266:	2b00      	cmp	r3, #0
 800f268:	bfc8      	it	gt
 800f26a:	461d      	movgt	r5, r3
 800f26c:	9b00      	ldr	r3, [sp, #0]
 800f26e:	bfd8      	it	le
 800f270:	2501      	movle	r5, #1
 800f272:	441d      	add	r5, r3
 800f274:	f04f 0800 	mov.w	r8, #0
 800f278:	4651      	mov	r1, sl
 800f27a:	2201      	movs	r2, #1
 800f27c:	4620      	mov	r0, r4
 800f27e:	f000 fb8b 	bl	800f998 <__lshift>
 800f282:	4631      	mov	r1, r6
 800f284:	4682      	mov	sl, r0
 800f286:	f000 fbf3 	bl	800fa70 <__mcmp>
 800f28a:	2800      	cmp	r0, #0
 800f28c:	dc96      	bgt.n	800f1bc <_dtoa_r+0xabc>
 800f28e:	d102      	bne.n	800f296 <_dtoa_r+0xb96>
 800f290:	f019 0f01 	tst.w	r9, #1
 800f294:	d192      	bne.n	800f1bc <_dtoa_r+0xabc>
 800f296:	462b      	mov	r3, r5
 800f298:	461d      	mov	r5, r3
 800f29a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f29e:	2a30      	cmp	r2, #48	; 0x30
 800f2a0:	d0fa      	beq.n	800f298 <_dtoa_r+0xb98>
 800f2a2:	e6dd      	b.n	800f060 <_dtoa_r+0x960>
 800f2a4:	9a00      	ldr	r2, [sp, #0]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d189      	bne.n	800f1be <_dtoa_r+0xabe>
 800f2aa:	f10b 0b01 	add.w	fp, fp, #1
 800f2ae:	2331      	movs	r3, #49	; 0x31
 800f2b0:	e796      	b.n	800f1e0 <_dtoa_r+0xae0>
 800f2b2:	4b0a      	ldr	r3, [pc, #40]	; (800f2dc <_dtoa_r+0xbdc>)
 800f2b4:	f7ff ba99 	b.w	800e7ea <_dtoa_r+0xea>
 800f2b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	f47f aa6d 	bne.w	800e79a <_dtoa_r+0x9a>
 800f2c0:	4b07      	ldr	r3, [pc, #28]	; (800f2e0 <_dtoa_r+0xbe0>)
 800f2c2:	f7ff ba92 	b.w	800e7ea <_dtoa_r+0xea>
 800f2c6:	9b01      	ldr	r3, [sp, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	dcb5      	bgt.n	800f238 <_dtoa_r+0xb38>
 800f2cc:	9b07      	ldr	r3, [sp, #28]
 800f2ce:	2b02      	cmp	r3, #2
 800f2d0:	f73f aeb1 	bgt.w	800f036 <_dtoa_r+0x936>
 800f2d4:	e7b0      	b.n	800f238 <_dtoa_r+0xb38>
 800f2d6:	bf00      	nop
 800f2d8:	08013ea3 	.word	0x08013ea3
 800f2dc:	08014188 	.word	0x08014188
 800f2e0:	08013e27 	.word	0x08013e27

0800f2e4 <_free_r>:
 800f2e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f2e6:	2900      	cmp	r1, #0
 800f2e8:	d044      	beq.n	800f374 <_free_r+0x90>
 800f2ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2ee:	9001      	str	r0, [sp, #4]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	f1a1 0404 	sub.w	r4, r1, #4
 800f2f6:	bfb8      	it	lt
 800f2f8:	18e4      	addlt	r4, r4, r3
 800f2fa:	f000 f8e7 	bl	800f4cc <__malloc_lock>
 800f2fe:	4a1e      	ldr	r2, [pc, #120]	; (800f378 <_free_r+0x94>)
 800f300:	9801      	ldr	r0, [sp, #4]
 800f302:	6813      	ldr	r3, [r2, #0]
 800f304:	b933      	cbnz	r3, 800f314 <_free_r+0x30>
 800f306:	6063      	str	r3, [r4, #4]
 800f308:	6014      	str	r4, [r2, #0]
 800f30a:	b003      	add	sp, #12
 800f30c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f310:	f000 b8e2 	b.w	800f4d8 <__malloc_unlock>
 800f314:	42a3      	cmp	r3, r4
 800f316:	d908      	bls.n	800f32a <_free_r+0x46>
 800f318:	6825      	ldr	r5, [r4, #0]
 800f31a:	1961      	adds	r1, r4, r5
 800f31c:	428b      	cmp	r3, r1
 800f31e:	bf01      	itttt	eq
 800f320:	6819      	ldreq	r1, [r3, #0]
 800f322:	685b      	ldreq	r3, [r3, #4]
 800f324:	1949      	addeq	r1, r1, r5
 800f326:	6021      	streq	r1, [r4, #0]
 800f328:	e7ed      	b.n	800f306 <_free_r+0x22>
 800f32a:	461a      	mov	r2, r3
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	b10b      	cbz	r3, 800f334 <_free_r+0x50>
 800f330:	42a3      	cmp	r3, r4
 800f332:	d9fa      	bls.n	800f32a <_free_r+0x46>
 800f334:	6811      	ldr	r1, [r2, #0]
 800f336:	1855      	adds	r5, r2, r1
 800f338:	42a5      	cmp	r5, r4
 800f33a:	d10b      	bne.n	800f354 <_free_r+0x70>
 800f33c:	6824      	ldr	r4, [r4, #0]
 800f33e:	4421      	add	r1, r4
 800f340:	1854      	adds	r4, r2, r1
 800f342:	42a3      	cmp	r3, r4
 800f344:	6011      	str	r1, [r2, #0]
 800f346:	d1e0      	bne.n	800f30a <_free_r+0x26>
 800f348:	681c      	ldr	r4, [r3, #0]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	6053      	str	r3, [r2, #4]
 800f34e:	440c      	add	r4, r1
 800f350:	6014      	str	r4, [r2, #0]
 800f352:	e7da      	b.n	800f30a <_free_r+0x26>
 800f354:	d902      	bls.n	800f35c <_free_r+0x78>
 800f356:	230c      	movs	r3, #12
 800f358:	6003      	str	r3, [r0, #0]
 800f35a:	e7d6      	b.n	800f30a <_free_r+0x26>
 800f35c:	6825      	ldr	r5, [r4, #0]
 800f35e:	1961      	adds	r1, r4, r5
 800f360:	428b      	cmp	r3, r1
 800f362:	bf04      	itt	eq
 800f364:	6819      	ldreq	r1, [r3, #0]
 800f366:	685b      	ldreq	r3, [r3, #4]
 800f368:	6063      	str	r3, [r4, #4]
 800f36a:	bf04      	itt	eq
 800f36c:	1949      	addeq	r1, r1, r5
 800f36e:	6021      	streq	r1, [r4, #0]
 800f370:	6054      	str	r4, [r2, #4]
 800f372:	e7ca      	b.n	800f30a <_free_r+0x26>
 800f374:	b003      	add	sp, #12
 800f376:	bd30      	pop	{r4, r5, pc}
 800f378:	20008c64 	.word	0x20008c64

0800f37c <malloc>:
 800f37c:	4b02      	ldr	r3, [pc, #8]	; (800f388 <malloc+0xc>)
 800f37e:	4601      	mov	r1, r0
 800f380:	6818      	ldr	r0, [r3, #0]
 800f382:	f000 b823 	b.w	800f3cc <_malloc_r>
 800f386:	bf00      	nop
 800f388:	20000130 	.word	0x20000130

0800f38c <sbrk_aligned>:
 800f38c:	b570      	push	{r4, r5, r6, lr}
 800f38e:	4e0e      	ldr	r6, [pc, #56]	; (800f3c8 <sbrk_aligned+0x3c>)
 800f390:	460c      	mov	r4, r1
 800f392:	6831      	ldr	r1, [r6, #0]
 800f394:	4605      	mov	r5, r0
 800f396:	b911      	cbnz	r1, 800f39e <sbrk_aligned+0x12>
 800f398:	f002 f9ae 	bl	80116f8 <_sbrk_r>
 800f39c:	6030      	str	r0, [r6, #0]
 800f39e:	4621      	mov	r1, r4
 800f3a0:	4628      	mov	r0, r5
 800f3a2:	f002 f9a9 	bl	80116f8 <_sbrk_r>
 800f3a6:	1c43      	adds	r3, r0, #1
 800f3a8:	d00a      	beq.n	800f3c0 <sbrk_aligned+0x34>
 800f3aa:	1cc4      	adds	r4, r0, #3
 800f3ac:	f024 0403 	bic.w	r4, r4, #3
 800f3b0:	42a0      	cmp	r0, r4
 800f3b2:	d007      	beq.n	800f3c4 <sbrk_aligned+0x38>
 800f3b4:	1a21      	subs	r1, r4, r0
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	f002 f99e 	bl	80116f8 <_sbrk_r>
 800f3bc:	3001      	adds	r0, #1
 800f3be:	d101      	bne.n	800f3c4 <sbrk_aligned+0x38>
 800f3c0:	f04f 34ff 	mov.w	r4, #4294967295
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	bd70      	pop	{r4, r5, r6, pc}
 800f3c8:	20008c68 	.word	0x20008c68

0800f3cc <_malloc_r>:
 800f3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3d0:	1ccd      	adds	r5, r1, #3
 800f3d2:	f025 0503 	bic.w	r5, r5, #3
 800f3d6:	3508      	adds	r5, #8
 800f3d8:	2d0c      	cmp	r5, #12
 800f3da:	bf38      	it	cc
 800f3dc:	250c      	movcc	r5, #12
 800f3de:	2d00      	cmp	r5, #0
 800f3e0:	4607      	mov	r7, r0
 800f3e2:	db01      	blt.n	800f3e8 <_malloc_r+0x1c>
 800f3e4:	42a9      	cmp	r1, r5
 800f3e6:	d905      	bls.n	800f3f4 <_malloc_r+0x28>
 800f3e8:	230c      	movs	r3, #12
 800f3ea:	603b      	str	r3, [r7, #0]
 800f3ec:	2600      	movs	r6, #0
 800f3ee:	4630      	mov	r0, r6
 800f3f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f4c8 <_malloc_r+0xfc>
 800f3f8:	f000 f868 	bl	800f4cc <__malloc_lock>
 800f3fc:	f8d8 3000 	ldr.w	r3, [r8]
 800f400:	461c      	mov	r4, r3
 800f402:	bb5c      	cbnz	r4, 800f45c <_malloc_r+0x90>
 800f404:	4629      	mov	r1, r5
 800f406:	4638      	mov	r0, r7
 800f408:	f7ff ffc0 	bl	800f38c <sbrk_aligned>
 800f40c:	1c43      	adds	r3, r0, #1
 800f40e:	4604      	mov	r4, r0
 800f410:	d155      	bne.n	800f4be <_malloc_r+0xf2>
 800f412:	f8d8 4000 	ldr.w	r4, [r8]
 800f416:	4626      	mov	r6, r4
 800f418:	2e00      	cmp	r6, #0
 800f41a:	d145      	bne.n	800f4a8 <_malloc_r+0xdc>
 800f41c:	2c00      	cmp	r4, #0
 800f41e:	d048      	beq.n	800f4b2 <_malloc_r+0xe6>
 800f420:	6823      	ldr	r3, [r4, #0]
 800f422:	4631      	mov	r1, r6
 800f424:	4638      	mov	r0, r7
 800f426:	eb04 0903 	add.w	r9, r4, r3
 800f42a:	f002 f965 	bl	80116f8 <_sbrk_r>
 800f42e:	4581      	cmp	r9, r0
 800f430:	d13f      	bne.n	800f4b2 <_malloc_r+0xe6>
 800f432:	6821      	ldr	r1, [r4, #0]
 800f434:	1a6d      	subs	r5, r5, r1
 800f436:	4629      	mov	r1, r5
 800f438:	4638      	mov	r0, r7
 800f43a:	f7ff ffa7 	bl	800f38c <sbrk_aligned>
 800f43e:	3001      	adds	r0, #1
 800f440:	d037      	beq.n	800f4b2 <_malloc_r+0xe6>
 800f442:	6823      	ldr	r3, [r4, #0]
 800f444:	442b      	add	r3, r5
 800f446:	6023      	str	r3, [r4, #0]
 800f448:	f8d8 3000 	ldr.w	r3, [r8]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d038      	beq.n	800f4c2 <_malloc_r+0xf6>
 800f450:	685a      	ldr	r2, [r3, #4]
 800f452:	42a2      	cmp	r2, r4
 800f454:	d12b      	bne.n	800f4ae <_malloc_r+0xe2>
 800f456:	2200      	movs	r2, #0
 800f458:	605a      	str	r2, [r3, #4]
 800f45a:	e00f      	b.n	800f47c <_malloc_r+0xb0>
 800f45c:	6822      	ldr	r2, [r4, #0]
 800f45e:	1b52      	subs	r2, r2, r5
 800f460:	d41f      	bmi.n	800f4a2 <_malloc_r+0xd6>
 800f462:	2a0b      	cmp	r2, #11
 800f464:	d917      	bls.n	800f496 <_malloc_r+0xca>
 800f466:	1961      	adds	r1, r4, r5
 800f468:	42a3      	cmp	r3, r4
 800f46a:	6025      	str	r5, [r4, #0]
 800f46c:	bf18      	it	ne
 800f46e:	6059      	strne	r1, [r3, #4]
 800f470:	6863      	ldr	r3, [r4, #4]
 800f472:	bf08      	it	eq
 800f474:	f8c8 1000 	streq.w	r1, [r8]
 800f478:	5162      	str	r2, [r4, r5]
 800f47a:	604b      	str	r3, [r1, #4]
 800f47c:	4638      	mov	r0, r7
 800f47e:	f104 060b 	add.w	r6, r4, #11
 800f482:	f000 f829 	bl	800f4d8 <__malloc_unlock>
 800f486:	f026 0607 	bic.w	r6, r6, #7
 800f48a:	1d23      	adds	r3, r4, #4
 800f48c:	1af2      	subs	r2, r6, r3
 800f48e:	d0ae      	beq.n	800f3ee <_malloc_r+0x22>
 800f490:	1b9b      	subs	r3, r3, r6
 800f492:	50a3      	str	r3, [r4, r2]
 800f494:	e7ab      	b.n	800f3ee <_malloc_r+0x22>
 800f496:	42a3      	cmp	r3, r4
 800f498:	6862      	ldr	r2, [r4, #4]
 800f49a:	d1dd      	bne.n	800f458 <_malloc_r+0x8c>
 800f49c:	f8c8 2000 	str.w	r2, [r8]
 800f4a0:	e7ec      	b.n	800f47c <_malloc_r+0xb0>
 800f4a2:	4623      	mov	r3, r4
 800f4a4:	6864      	ldr	r4, [r4, #4]
 800f4a6:	e7ac      	b.n	800f402 <_malloc_r+0x36>
 800f4a8:	4634      	mov	r4, r6
 800f4aa:	6876      	ldr	r6, [r6, #4]
 800f4ac:	e7b4      	b.n	800f418 <_malloc_r+0x4c>
 800f4ae:	4613      	mov	r3, r2
 800f4b0:	e7cc      	b.n	800f44c <_malloc_r+0x80>
 800f4b2:	230c      	movs	r3, #12
 800f4b4:	603b      	str	r3, [r7, #0]
 800f4b6:	4638      	mov	r0, r7
 800f4b8:	f000 f80e 	bl	800f4d8 <__malloc_unlock>
 800f4bc:	e797      	b.n	800f3ee <_malloc_r+0x22>
 800f4be:	6025      	str	r5, [r4, #0]
 800f4c0:	e7dc      	b.n	800f47c <_malloc_r+0xb0>
 800f4c2:	605b      	str	r3, [r3, #4]
 800f4c4:	deff      	udf	#255	; 0xff
 800f4c6:	bf00      	nop
 800f4c8:	20008c64 	.word	0x20008c64

0800f4cc <__malloc_lock>:
 800f4cc:	4801      	ldr	r0, [pc, #4]	; (800f4d4 <__malloc_lock+0x8>)
 800f4ce:	f7ff b870 	b.w	800e5b2 <__retarget_lock_acquire_recursive>
 800f4d2:	bf00      	nop
 800f4d4:	20008c60 	.word	0x20008c60

0800f4d8 <__malloc_unlock>:
 800f4d8:	4801      	ldr	r0, [pc, #4]	; (800f4e0 <__malloc_unlock+0x8>)
 800f4da:	f7ff b86b 	b.w	800e5b4 <__retarget_lock_release_recursive>
 800f4de:	bf00      	nop
 800f4e0:	20008c60 	.word	0x20008c60

0800f4e4 <_Balloc>:
 800f4e4:	b570      	push	{r4, r5, r6, lr}
 800f4e6:	69c6      	ldr	r6, [r0, #28]
 800f4e8:	4604      	mov	r4, r0
 800f4ea:	460d      	mov	r5, r1
 800f4ec:	b976      	cbnz	r6, 800f50c <_Balloc+0x28>
 800f4ee:	2010      	movs	r0, #16
 800f4f0:	f7ff ff44 	bl	800f37c <malloc>
 800f4f4:	4602      	mov	r2, r0
 800f4f6:	61e0      	str	r0, [r4, #28]
 800f4f8:	b920      	cbnz	r0, 800f504 <_Balloc+0x20>
 800f4fa:	4b18      	ldr	r3, [pc, #96]	; (800f55c <_Balloc+0x78>)
 800f4fc:	4818      	ldr	r0, [pc, #96]	; (800f560 <_Balloc+0x7c>)
 800f4fe:	216b      	movs	r1, #107	; 0x6b
 800f500:	f002 f912 	bl	8011728 <__assert_func>
 800f504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f508:	6006      	str	r6, [r0, #0]
 800f50a:	60c6      	str	r6, [r0, #12]
 800f50c:	69e6      	ldr	r6, [r4, #28]
 800f50e:	68f3      	ldr	r3, [r6, #12]
 800f510:	b183      	cbz	r3, 800f534 <_Balloc+0x50>
 800f512:	69e3      	ldr	r3, [r4, #28]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f51a:	b9b8      	cbnz	r0, 800f54c <_Balloc+0x68>
 800f51c:	2101      	movs	r1, #1
 800f51e:	fa01 f605 	lsl.w	r6, r1, r5
 800f522:	1d72      	adds	r2, r6, #5
 800f524:	0092      	lsls	r2, r2, #2
 800f526:	4620      	mov	r0, r4
 800f528:	f002 f91c 	bl	8011764 <_calloc_r>
 800f52c:	b160      	cbz	r0, 800f548 <_Balloc+0x64>
 800f52e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f532:	e00e      	b.n	800f552 <_Balloc+0x6e>
 800f534:	2221      	movs	r2, #33	; 0x21
 800f536:	2104      	movs	r1, #4
 800f538:	4620      	mov	r0, r4
 800f53a:	f002 f913 	bl	8011764 <_calloc_r>
 800f53e:	69e3      	ldr	r3, [r4, #28]
 800f540:	60f0      	str	r0, [r6, #12]
 800f542:	68db      	ldr	r3, [r3, #12]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d1e4      	bne.n	800f512 <_Balloc+0x2e>
 800f548:	2000      	movs	r0, #0
 800f54a:	bd70      	pop	{r4, r5, r6, pc}
 800f54c:	6802      	ldr	r2, [r0, #0]
 800f54e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f552:	2300      	movs	r3, #0
 800f554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f558:	e7f7      	b.n	800f54a <_Balloc+0x66>
 800f55a:	bf00      	nop
 800f55c:	08013e34 	.word	0x08013e34
 800f560:	08013eb4 	.word	0x08013eb4

0800f564 <_Bfree>:
 800f564:	b570      	push	{r4, r5, r6, lr}
 800f566:	69c6      	ldr	r6, [r0, #28]
 800f568:	4605      	mov	r5, r0
 800f56a:	460c      	mov	r4, r1
 800f56c:	b976      	cbnz	r6, 800f58c <_Bfree+0x28>
 800f56e:	2010      	movs	r0, #16
 800f570:	f7ff ff04 	bl	800f37c <malloc>
 800f574:	4602      	mov	r2, r0
 800f576:	61e8      	str	r0, [r5, #28]
 800f578:	b920      	cbnz	r0, 800f584 <_Bfree+0x20>
 800f57a:	4b09      	ldr	r3, [pc, #36]	; (800f5a0 <_Bfree+0x3c>)
 800f57c:	4809      	ldr	r0, [pc, #36]	; (800f5a4 <_Bfree+0x40>)
 800f57e:	218f      	movs	r1, #143	; 0x8f
 800f580:	f002 f8d2 	bl	8011728 <__assert_func>
 800f584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f588:	6006      	str	r6, [r0, #0]
 800f58a:	60c6      	str	r6, [r0, #12]
 800f58c:	b13c      	cbz	r4, 800f59e <_Bfree+0x3a>
 800f58e:	69eb      	ldr	r3, [r5, #28]
 800f590:	6862      	ldr	r2, [r4, #4]
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f598:	6021      	str	r1, [r4, #0]
 800f59a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f59e:	bd70      	pop	{r4, r5, r6, pc}
 800f5a0:	08013e34 	.word	0x08013e34
 800f5a4:	08013eb4 	.word	0x08013eb4

0800f5a8 <__multadd>:
 800f5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ac:	690d      	ldr	r5, [r1, #16]
 800f5ae:	4607      	mov	r7, r0
 800f5b0:	460c      	mov	r4, r1
 800f5b2:	461e      	mov	r6, r3
 800f5b4:	f101 0c14 	add.w	ip, r1, #20
 800f5b8:	2000      	movs	r0, #0
 800f5ba:	f8dc 3000 	ldr.w	r3, [ip]
 800f5be:	b299      	uxth	r1, r3
 800f5c0:	fb02 6101 	mla	r1, r2, r1, r6
 800f5c4:	0c1e      	lsrs	r6, r3, #16
 800f5c6:	0c0b      	lsrs	r3, r1, #16
 800f5c8:	fb02 3306 	mla	r3, r2, r6, r3
 800f5cc:	b289      	uxth	r1, r1
 800f5ce:	3001      	adds	r0, #1
 800f5d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f5d4:	4285      	cmp	r5, r0
 800f5d6:	f84c 1b04 	str.w	r1, [ip], #4
 800f5da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f5de:	dcec      	bgt.n	800f5ba <__multadd+0x12>
 800f5e0:	b30e      	cbz	r6, 800f626 <__multadd+0x7e>
 800f5e2:	68a3      	ldr	r3, [r4, #8]
 800f5e4:	42ab      	cmp	r3, r5
 800f5e6:	dc19      	bgt.n	800f61c <__multadd+0x74>
 800f5e8:	6861      	ldr	r1, [r4, #4]
 800f5ea:	4638      	mov	r0, r7
 800f5ec:	3101      	adds	r1, #1
 800f5ee:	f7ff ff79 	bl	800f4e4 <_Balloc>
 800f5f2:	4680      	mov	r8, r0
 800f5f4:	b928      	cbnz	r0, 800f602 <__multadd+0x5a>
 800f5f6:	4602      	mov	r2, r0
 800f5f8:	4b0c      	ldr	r3, [pc, #48]	; (800f62c <__multadd+0x84>)
 800f5fa:	480d      	ldr	r0, [pc, #52]	; (800f630 <__multadd+0x88>)
 800f5fc:	21ba      	movs	r1, #186	; 0xba
 800f5fe:	f002 f893 	bl	8011728 <__assert_func>
 800f602:	6922      	ldr	r2, [r4, #16]
 800f604:	3202      	adds	r2, #2
 800f606:	f104 010c 	add.w	r1, r4, #12
 800f60a:	0092      	lsls	r2, r2, #2
 800f60c:	300c      	adds	r0, #12
 800f60e:	f7fe ffda 	bl	800e5c6 <memcpy>
 800f612:	4621      	mov	r1, r4
 800f614:	4638      	mov	r0, r7
 800f616:	f7ff ffa5 	bl	800f564 <_Bfree>
 800f61a:	4644      	mov	r4, r8
 800f61c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f620:	3501      	adds	r5, #1
 800f622:	615e      	str	r6, [r3, #20]
 800f624:	6125      	str	r5, [r4, #16]
 800f626:	4620      	mov	r0, r4
 800f628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f62c:	08013ea3 	.word	0x08013ea3
 800f630:	08013eb4 	.word	0x08013eb4

0800f634 <__s2b>:
 800f634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f638:	460c      	mov	r4, r1
 800f63a:	4615      	mov	r5, r2
 800f63c:	461f      	mov	r7, r3
 800f63e:	2209      	movs	r2, #9
 800f640:	3308      	adds	r3, #8
 800f642:	4606      	mov	r6, r0
 800f644:	fb93 f3f2 	sdiv	r3, r3, r2
 800f648:	2100      	movs	r1, #0
 800f64a:	2201      	movs	r2, #1
 800f64c:	429a      	cmp	r2, r3
 800f64e:	db09      	blt.n	800f664 <__s2b+0x30>
 800f650:	4630      	mov	r0, r6
 800f652:	f7ff ff47 	bl	800f4e4 <_Balloc>
 800f656:	b940      	cbnz	r0, 800f66a <__s2b+0x36>
 800f658:	4602      	mov	r2, r0
 800f65a:	4b19      	ldr	r3, [pc, #100]	; (800f6c0 <__s2b+0x8c>)
 800f65c:	4819      	ldr	r0, [pc, #100]	; (800f6c4 <__s2b+0x90>)
 800f65e:	21d3      	movs	r1, #211	; 0xd3
 800f660:	f002 f862 	bl	8011728 <__assert_func>
 800f664:	0052      	lsls	r2, r2, #1
 800f666:	3101      	adds	r1, #1
 800f668:	e7f0      	b.n	800f64c <__s2b+0x18>
 800f66a:	9b08      	ldr	r3, [sp, #32]
 800f66c:	6143      	str	r3, [r0, #20]
 800f66e:	2d09      	cmp	r5, #9
 800f670:	f04f 0301 	mov.w	r3, #1
 800f674:	6103      	str	r3, [r0, #16]
 800f676:	dd16      	ble.n	800f6a6 <__s2b+0x72>
 800f678:	f104 0909 	add.w	r9, r4, #9
 800f67c:	46c8      	mov	r8, r9
 800f67e:	442c      	add	r4, r5
 800f680:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f684:	4601      	mov	r1, r0
 800f686:	3b30      	subs	r3, #48	; 0x30
 800f688:	220a      	movs	r2, #10
 800f68a:	4630      	mov	r0, r6
 800f68c:	f7ff ff8c 	bl	800f5a8 <__multadd>
 800f690:	45a0      	cmp	r8, r4
 800f692:	d1f5      	bne.n	800f680 <__s2b+0x4c>
 800f694:	f1a5 0408 	sub.w	r4, r5, #8
 800f698:	444c      	add	r4, r9
 800f69a:	1b2d      	subs	r5, r5, r4
 800f69c:	1963      	adds	r3, r4, r5
 800f69e:	42bb      	cmp	r3, r7
 800f6a0:	db04      	blt.n	800f6ac <__s2b+0x78>
 800f6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6a6:	340a      	adds	r4, #10
 800f6a8:	2509      	movs	r5, #9
 800f6aa:	e7f6      	b.n	800f69a <__s2b+0x66>
 800f6ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f6b0:	4601      	mov	r1, r0
 800f6b2:	3b30      	subs	r3, #48	; 0x30
 800f6b4:	220a      	movs	r2, #10
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	f7ff ff76 	bl	800f5a8 <__multadd>
 800f6bc:	e7ee      	b.n	800f69c <__s2b+0x68>
 800f6be:	bf00      	nop
 800f6c0:	08013ea3 	.word	0x08013ea3
 800f6c4:	08013eb4 	.word	0x08013eb4

0800f6c8 <__hi0bits>:
 800f6c8:	0c03      	lsrs	r3, r0, #16
 800f6ca:	041b      	lsls	r3, r3, #16
 800f6cc:	b9d3      	cbnz	r3, 800f704 <__hi0bits+0x3c>
 800f6ce:	0400      	lsls	r0, r0, #16
 800f6d0:	2310      	movs	r3, #16
 800f6d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f6d6:	bf04      	itt	eq
 800f6d8:	0200      	lsleq	r0, r0, #8
 800f6da:	3308      	addeq	r3, #8
 800f6dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f6e0:	bf04      	itt	eq
 800f6e2:	0100      	lsleq	r0, r0, #4
 800f6e4:	3304      	addeq	r3, #4
 800f6e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f6ea:	bf04      	itt	eq
 800f6ec:	0080      	lsleq	r0, r0, #2
 800f6ee:	3302      	addeq	r3, #2
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	db05      	blt.n	800f700 <__hi0bits+0x38>
 800f6f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f6f8:	f103 0301 	add.w	r3, r3, #1
 800f6fc:	bf08      	it	eq
 800f6fe:	2320      	moveq	r3, #32
 800f700:	4618      	mov	r0, r3
 800f702:	4770      	bx	lr
 800f704:	2300      	movs	r3, #0
 800f706:	e7e4      	b.n	800f6d2 <__hi0bits+0xa>

0800f708 <__lo0bits>:
 800f708:	6803      	ldr	r3, [r0, #0]
 800f70a:	f013 0207 	ands.w	r2, r3, #7
 800f70e:	d00c      	beq.n	800f72a <__lo0bits+0x22>
 800f710:	07d9      	lsls	r1, r3, #31
 800f712:	d422      	bmi.n	800f75a <__lo0bits+0x52>
 800f714:	079a      	lsls	r2, r3, #30
 800f716:	bf49      	itett	mi
 800f718:	085b      	lsrmi	r3, r3, #1
 800f71a:	089b      	lsrpl	r3, r3, #2
 800f71c:	6003      	strmi	r3, [r0, #0]
 800f71e:	2201      	movmi	r2, #1
 800f720:	bf5c      	itt	pl
 800f722:	6003      	strpl	r3, [r0, #0]
 800f724:	2202      	movpl	r2, #2
 800f726:	4610      	mov	r0, r2
 800f728:	4770      	bx	lr
 800f72a:	b299      	uxth	r1, r3
 800f72c:	b909      	cbnz	r1, 800f732 <__lo0bits+0x2a>
 800f72e:	0c1b      	lsrs	r3, r3, #16
 800f730:	2210      	movs	r2, #16
 800f732:	b2d9      	uxtb	r1, r3
 800f734:	b909      	cbnz	r1, 800f73a <__lo0bits+0x32>
 800f736:	3208      	adds	r2, #8
 800f738:	0a1b      	lsrs	r3, r3, #8
 800f73a:	0719      	lsls	r1, r3, #28
 800f73c:	bf04      	itt	eq
 800f73e:	091b      	lsreq	r3, r3, #4
 800f740:	3204      	addeq	r2, #4
 800f742:	0799      	lsls	r1, r3, #30
 800f744:	bf04      	itt	eq
 800f746:	089b      	lsreq	r3, r3, #2
 800f748:	3202      	addeq	r2, #2
 800f74a:	07d9      	lsls	r1, r3, #31
 800f74c:	d403      	bmi.n	800f756 <__lo0bits+0x4e>
 800f74e:	085b      	lsrs	r3, r3, #1
 800f750:	f102 0201 	add.w	r2, r2, #1
 800f754:	d003      	beq.n	800f75e <__lo0bits+0x56>
 800f756:	6003      	str	r3, [r0, #0]
 800f758:	e7e5      	b.n	800f726 <__lo0bits+0x1e>
 800f75a:	2200      	movs	r2, #0
 800f75c:	e7e3      	b.n	800f726 <__lo0bits+0x1e>
 800f75e:	2220      	movs	r2, #32
 800f760:	e7e1      	b.n	800f726 <__lo0bits+0x1e>
	...

0800f764 <__i2b>:
 800f764:	b510      	push	{r4, lr}
 800f766:	460c      	mov	r4, r1
 800f768:	2101      	movs	r1, #1
 800f76a:	f7ff febb 	bl	800f4e4 <_Balloc>
 800f76e:	4602      	mov	r2, r0
 800f770:	b928      	cbnz	r0, 800f77e <__i2b+0x1a>
 800f772:	4b05      	ldr	r3, [pc, #20]	; (800f788 <__i2b+0x24>)
 800f774:	4805      	ldr	r0, [pc, #20]	; (800f78c <__i2b+0x28>)
 800f776:	f240 1145 	movw	r1, #325	; 0x145
 800f77a:	f001 ffd5 	bl	8011728 <__assert_func>
 800f77e:	2301      	movs	r3, #1
 800f780:	6144      	str	r4, [r0, #20]
 800f782:	6103      	str	r3, [r0, #16]
 800f784:	bd10      	pop	{r4, pc}
 800f786:	bf00      	nop
 800f788:	08013ea3 	.word	0x08013ea3
 800f78c:	08013eb4 	.word	0x08013eb4

0800f790 <__multiply>:
 800f790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f794:	4691      	mov	r9, r2
 800f796:	690a      	ldr	r2, [r1, #16]
 800f798:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	bfb8      	it	lt
 800f7a0:	460b      	movlt	r3, r1
 800f7a2:	460c      	mov	r4, r1
 800f7a4:	bfbc      	itt	lt
 800f7a6:	464c      	movlt	r4, r9
 800f7a8:	4699      	movlt	r9, r3
 800f7aa:	6927      	ldr	r7, [r4, #16]
 800f7ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f7b0:	68a3      	ldr	r3, [r4, #8]
 800f7b2:	6861      	ldr	r1, [r4, #4]
 800f7b4:	eb07 060a 	add.w	r6, r7, sl
 800f7b8:	42b3      	cmp	r3, r6
 800f7ba:	b085      	sub	sp, #20
 800f7bc:	bfb8      	it	lt
 800f7be:	3101      	addlt	r1, #1
 800f7c0:	f7ff fe90 	bl	800f4e4 <_Balloc>
 800f7c4:	b930      	cbnz	r0, 800f7d4 <__multiply+0x44>
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	4b44      	ldr	r3, [pc, #272]	; (800f8dc <__multiply+0x14c>)
 800f7ca:	4845      	ldr	r0, [pc, #276]	; (800f8e0 <__multiply+0x150>)
 800f7cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f7d0:	f001 ffaa 	bl	8011728 <__assert_func>
 800f7d4:	f100 0514 	add.w	r5, r0, #20
 800f7d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f7dc:	462b      	mov	r3, r5
 800f7de:	2200      	movs	r2, #0
 800f7e0:	4543      	cmp	r3, r8
 800f7e2:	d321      	bcc.n	800f828 <__multiply+0x98>
 800f7e4:	f104 0314 	add.w	r3, r4, #20
 800f7e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f7ec:	f109 0314 	add.w	r3, r9, #20
 800f7f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f7f4:	9202      	str	r2, [sp, #8]
 800f7f6:	1b3a      	subs	r2, r7, r4
 800f7f8:	3a15      	subs	r2, #21
 800f7fa:	f022 0203 	bic.w	r2, r2, #3
 800f7fe:	3204      	adds	r2, #4
 800f800:	f104 0115 	add.w	r1, r4, #21
 800f804:	428f      	cmp	r7, r1
 800f806:	bf38      	it	cc
 800f808:	2204      	movcc	r2, #4
 800f80a:	9201      	str	r2, [sp, #4]
 800f80c:	9a02      	ldr	r2, [sp, #8]
 800f80e:	9303      	str	r3, [sp, #12]
 800f810:	429a      	cmp	r2, r3
 800f812:	d80c      	bhi.n	800f82e <__multiply+0x9e>
 800f814:	2e00      	cmp	r6, #0
 800f816:	dd03      	ble.n	800f820 <__multiply+0x90>
 800f818:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d05b      	beq.n	800f8d8 <__multiply+0x148>
 800f820:	6106      	str	r6, [r0, #16]
 800f822:	b005      	add	sp, #20
 800f824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f828:	f843 2b04 	str.w	r2, [r3], #4
 800f82c:	e7d8      	b.n	800f7e0 <__multiply+0x50>
 800f82e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f832:	f1ba 0f00 	cmp.w	sl, #0
 800f836:	d024      	beq.n	800f882 <__multiply+0xf2>
 800f838:	f104 0e14 	add.w	lr, r4, #20
 800f83c:	46a9      	mov	r9, r5
 800f83e:	f04f 0c00 	mov.w	ip, #0
 800f842:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f846:	f8d9 1000 	ldr.w	r1, [r9]
 800f84a:	fa1f fb82 	uxth.w	fp, r2
 800f84e:	b289      	uxth	r1, r1
 800f850:	fb0a 110b 	mla	r1, sl, fp, r1
 800f854:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f858:	f8d9 2000 	ldr.w	r2, [r9]
 800f85c:	4461      	add	r1, ip
 800f85e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f862:	fb0a c20b 	mla	r2, sl, fp, ip
 800f866:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f86a:	b289      	uxth	r1, r1
 800f86c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f870:	4577      	cmp	r7, lr
 800f872:	f849 1b04 	str.w	r1, [r9], #4
 800f876:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f87a:	d8e2      	bhi.n	800f842 <__multiply+0xb2>
 800f87c:	9a01      	ldr	r2, [sp, #4]
 800f87e:	f845 c002 	str.w	ip, [r5, r2]
 800f882:	9a03      	ldr	r2, [sp, #12]
 800f884:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f888:	3304      	adds	r3, #4
 800f88a:	f1b9 0f00 	cmp.w	r9, #0
 800f88e:	d021      	beq.n	800f8d4 <__multiply+0x144>
 800f890:	6829      	ldr	r1, [r5, #0]
 800f892:	f104 0c14 	add.w	ip, r4, #20
 800f896:	46ae      	mov	lr, r5
 800f898:	f04f 0a00 	mov.w	sl, #0
 800f89c:	f8bc b000 	ldrh.w	fp, [ip]
 800f8a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f8a4:	fb09 220b 	mla	r2, r9, fp, r2
 800f8a8:	4452      	add	r2, sl
 800f8aa:	b289      	uxth	r1, r1
 800f8ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f8b0:	f84e 1b04 	str.w	r1, [lr], #4
 800f8b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f8b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f8bc:	f8be 1000 	ldrh.w	r1, [lr]
 800f8c0:	fb09 110a 	mla	r1, r9, sl, r1
 800f8c4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f8c8:	4567      	cmp	r7, ip
 800f8ca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f8ce:	d8e5      	bhi.n	800f89c <__multiply+0x10c>
 800f8d0:	9a01      	ldr	r2, [sp, #4]
 800f8d2:	50a9      	str	r1, [r5, r2]
 800f8d4:	3504      	adds	r5, #4
 800f8d6:	e799      	b.n	800f80c <__multiply+0x7c>
 800f8d8:	3e01      	subs	r6, #1
 800f8da:	e79b      	b.n	800f814 <__multiply+0x84>
 800f8dc:	08013ea3 	.word	0x08013ea3
 800f8e0:	08013eb4 	.word	0x08013eb4

0800f8e4 <__pow5mult>:
 800f8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8e8:	4615      	mov	r5, r2
 800f8ea:	f012 0203 	ands.w	r2, r2, #3
 800f8ee:	4606      	mov	r6, r0
 800f8f0:	460f      	mov	r7, r1
 800f8f2:	d007      	beq.n	800f904 <__pow5mult+0x20>
 800f8f4:	4c25      	ldr	r4, [pc, #148]	; (800f98c <__pow5mult+0xa8>)
 800f8f6:	3a01      	subs	r2, #1
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f8fe:	f7ff fe53 	bl	800f5a8 <__multadd>
 800f902:	4607      	mov	r7, r0
 800f904:	10ad      	asrs	r5, r5, #2
 800f906:	d03d      	beq.n	800f984 <__pow5mult+0xa0>
 800f908:	69f4      	ldr	r4, [r6, #28]
 800f90a:	b97c      	cbnz	r4, 800f92c <__pow5mult+0x48>
 800f90c:	2010      	movs	r0, #16
 800f90e:	f7ff fd35 	bl	800f37c <malloc>
 800f912:	4602      	mov	r2, r0
 800f914:	61f0      	str	r0, [r6, #28]
 800f916:	b928      	cbnz	r0, 800f924 <__pow5mult+0x40>
 800f918:	4b1d      	ldr	r3, [pc, #116]	; (800f990 <__pow5mult+0xac>)
 800f91a:	481e      	ldr	r0, [pc, #120]	; (800f994 <__pow5mult+0xb0>)
 800f91c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f920:	f001 ff02 	bl	8011728 <__assert_func>
 800f924:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f928:	6004      	str	r4, [r0, #0]
 800f92a:	60c4      	str	r4, [r0, #12]
 800f92c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f930:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f934:	b94c      	cbnz	r4, 800f94a <__pow5mult+0x66>
 800f936:	f240 2171 	movw	r1, #625	; 0x271
 800f93a:	4630      	mov	r0, r6
 800f93c:	f7ff ff12 	bl	800f764 <__i2b>
 800f940:	2300      	movs	r3, #0
 800f942:	f8c8 0008 	str.w	r0, [r8, #8]
 800f946:	4604      	mov	r4, r0
 800f948:	6003      	str	r3, [r0, #0]
 800f94a:	f04f 0900 	mov.w	r9, #0
 800f94e:	07eb      	lsls	r3, r5, #31
 800f950:	d50a      	bpl.n	800f968 <__pow5mult+0x84>
 800f952:	4639      	mov	r1, r7
 800f954:	4622      	mov	r2, r4
 800f956:	4630      	mov	r0, r6
 800f958:	f7ff ff1a 	bl	800f790 <__multiply>
 800f95c:	4639      	mov	r1, r7
 800f95e:	4680      	mov	r8, r0
 800f960:	4630      	mov	r0, r6
 800f962:	f7ff fdff 	bl	800f564 <_Bfree>
 800f966:	4647      	mov	r7, r8
 800f968:	106d      	asrs	r5, r5, #1
 800f96a:	d00b      	beq.n	800f984 <__pow5mult+0xa0>
 800f96c:	6820      	ldr	r0, [r4, #0]
 800f96e:	b938      	cbnz	r0, 800f980 <__pow5mult+0x9c>
 800f970:	4622      	mov	r2, r4
 800f972:	4621      	mov	r1, r4
 800f974:	4630      	mov	r0, r6
 800f976:	f7ff ff0b 	bl	800f790 <__multiply>
 800f97a:	6020      	str	r0, [r4, #0]
 800f97c:	f8c0 9000 	str.w	r9, [r0]
 800f980:	4604      	mov	r4, r0
 800f982:	e7e4      	b.n	800f94e <__pow5mult+0x6a>
 800f984:	4638      	mov	r0, r7
 800f986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f98a:	bf00      	nop
 800f98c:	08014000 	.word	0x08014000
 800f990:	08013e34 	.word	0x08013e34
 800f994:	08013eb4 	.word	0x08013eb4

0800f998 <__lshift>:
 800f998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f99c:	460c      	mov	r4, r1
 800f99e:	6849      	ldr	r1, [r1, #4]
 800f9a0:	6923      	ldr	r3, [r4, #16]
 800f9a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f9a6:	68a3      	ldr	r3, [r4, #8]
 800f9a8:	4607      	mov	r7, r0
 800f9aa:	4691      	mov	r9, r2
 800f9ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f9b0:	f108 0601 	add.w	r6, r8, #1
 800f9b4:	42b3      	cmp	r3, r6
 800f9b6:	db0b      	blt.n	800f9d0 <__lshift+0x38>
 800f9b8:	4638      	mov	r0, r7
 800f9ba:	f7ff fd93 	bl	800f4e4 <_Balloc>
 800f9be:	4605      	mov	r5, r0
 800f9c0:	b948      	cbnz	r0, 800f9d6 <__lshift+0x3e>
 800f9c2:	4602      	mov	r2, r0
 800f9c4:	4b28      	ldr	r3, [pc, #160]	; (800fa68 <__lshift+0xd0>)
 800f9c6:	4829      	ldr	r0, [pc, #164]	; (800fa6c <__lshift+0xd4>)
 800f9c8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f9cc:	f001 feac 	bl	8011728 <__assert_func>
 800f9d0:	3101      	adds	r1, #1
 800f9d2:	005b      	lsls	r3, r3, #1
 800f9d4:	e7ee      	b.n	800f9b4 <__lshift+0x1c>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	f100 0114 	add.w	r1, r0, #20
 800f9dc:	f100 0210 	add.w	r2, r0, #16
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	4553      	cmp	r3, sl
 800f9e4:	db33      	blt.n	800fa4e <__lshift+0xb6>
 800f9e6:	6920      	ldr	r0, [r4, #16]
 800f9e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f9ec:	f104 0314 	add.w	r3, r4, #20
 800f9f0:	f019 091f 	ands.w	r9, r9, #31
 800f9f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f9f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f9fc:	d02b      	beq.n	800fa56 <__lshift+0xbe>
 800f9fe:	f1c9 0e20 	rsb	lr, r9, #32
 800fa02:	468a      	mov	sl, r1
 800fa04:	2200      	movs	r2, #0
 800fa06:	6818      	ldr	r0, [r3, #0]
 800fa08:	fa00 f009 	lsl.w	r0, r0, r9
 800fa0c:	4310      	orrs	r0, r2
 800fa0e:	f84a 0b04 	str.w	r0, [sl], #4
 800fa12:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa16:	459c      	cmp	ip, r3
 800fa18:	fa22 f20e 	lsr.w	r2, r2, lr
 800fa1c:	d8f3      	bhi.n	800fa06 <__lshift+0x6e>
 800fa1e:	ebac 0304 	sub.w	r3, ip, r4
 800fa22:	3b15      	subs	r3, #21
 800fa24:	f023 0303 	bic.w	r3, r3, #3
 800fa28:	3304      	adds	r3, #4
 800fa2a:	f104 0015 	add.w	r0, r4, #21
 800fa2e:	4584      	cmp	ip, r0
 800fa30:	bf38      	it	cc
 800fa32:	2304      	movcc	r3, #4
 800fa34:	50ca      	str	r2, [r1, r3]
 800fa36:	b10a      	cbz	r2, 800fa3c <__lshift+0xa4>
 800fa38:	f108 0602 	add.w	r6, r8, #2
 800fa3c:	3e01      	subs	r6, #1
 800fa3e:	4638      	mov	r0, r7
 800fa40:	612e      	str	r6, [r5, #16]
 800fa42:	4621      	mov	r1, r4
 800fa44:	f7ff fd8e 	bl	800f564 <_Bfree>
 800fa48:	4628      	mov	r0, r5
 800fa4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa52:	3301      	adds	r3, #1
 800fa54:	e7c5      	b.n	800f9e2 <__lshift+0x4a>
 800fa56:	3904      	subs	r1, #4
 800fa58:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa60:	459c      	cmp	ip, r3
 800fa62:	d8f9      	bhi.n	800fa58 <__lshift+0xc0>
 800fa64:	e7ea      	b.n	800fa3c <__lshift+0xa4>
 800fa66:	bf00      	nop
 800fa68:	08013ea3 	.word	0x08013ea3
 800fa6c:	08013eb4 	.word	0x08013eb4

0800fa70 <__mcmp>:
 800fa70:	b530      	push	{r4, r5, lr}
 800fa72:	6902      	ldr	r2, [r0, #16]
 800fa74:	690c      	ldr	r4, [r1, #16]
 800fa76:	1b12      	subs	r2, r2, r4
 800fa78:	d10e      	bne.n	800fa98 <__mcmp+0x28>
 800fa7a:	f100 0314 	add.w	r3, r0, #20
 800fa7e:	3114      	adds	r1, #20
 800fa80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fa84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fa88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fa8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fa90:	42a5      	cmp	r5, r4
 800fa92:	d003      	beq.n	800fa9c <__mcmp+0x2c>
 800fa94:	d305      	bcc.n	800faa2 <__mcmp+0x32>
 800fa96:	2201      	movs	r2, #1
 800fa98:	4610      	mov	r0, r2
 800fa9a:	bd30      	pop	{r4, r5, pc}
 800fa9c:	4283      	cmp	r3, r0
 800fa9e:	d3f3      	bcc.n	800fa88 <__mcmp+0x18>
 800faa0:	e7fa      	b.n	800fa98 <__mcmp+0x28>
 800faa2:	f04f 32ff 	mov.w	r2, #4294967295
 800faa6:	e7f7      	b.n	800fa98 <__mcmp+0x28>

0800faa8 <__mdiff>:
 800faa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faac:	460c      	mov	r4, r1
 800faae:	4606      	mov	r6, r0
 800fab0:	4611      	mov	r1, r2
 800fab2:	4620      	mov	r0, r4
 800fab4:	4690      	mov	r8, r2
 800fab6:	f7ff ffdb 	bl	800fa70 <__mcmp>
 800faba:	1e05      	subs	r5, r0, #0
 800fabc:	d110      	bne.n	800fae0 <__mdiff+0x38>
 800fabe:	4629      	mov	r1, r5
 800fac0:	4630      	mov	r0, r6
 800fac2:	f7ff fd0f 	bl	800f4e4 <_Balloc>
 800fac6:	b930      	cbnz	r0, 800fad6 <__mdiff+0x2e>
 800fac8:	4b3a      	ldr	r3, [pc, #232]	; (800fbb4 <__mdiff+0x10c>)
 800faca:	4602      	mov	r2, r0
 800facc:	f240 2137 	movw	r1, #567	; 0x237
 800fad0:	4839      	ldr	r0, [pc, #228]	; (800fbb8 <__mdiff+0x110>)
 800fad2:	f001 fe29 	bl	8011728 <__assert_func>
 800fad6:	2301      	movs	r3, #1
 800fad8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fadc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fae0:	bfa4      	itt	ge
 800fae2:	4643      	movge	r3, r8
 800fae4:	46a0      	movge	r8, r4
 800fae6:	4630      	mov	r0, r6
 800fae8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800faec:	bfa6      	itte	ge
 800faee:	461c      	movge	r4, r3
 800faf0:	2500      	movge	r5, #0
 800faf2:	2501      	movlt	r5, #1
 800faf4:	f7ff fcf6 	bl	800f4e4 <_Balloc>
 800faf8:	b920      	cbnz	r0, 800fb04 <__mdiff+0x5c>
 800fafa:	4b2e      	ldr	r3, [pc, #184]	; (800fbb4 <__mdiff+0x10c>)
 800fafc:	4602      	mov	r2, r0
 800fafe:	f240 2145 	movw	r1, #581	; 0x245
 800fb02:	e7e5      	b.n	800fad0 <__mdiff+0x28>
 800fb04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fb08:	6926      	ldr	r6, [r4, #16]
 800fb0a:	60c5      	str	r5, [r0, #12]
 800fb0c:	f104 0914 	add.w	r9, r4, #20
 800fb10:	f108 0514 	add.w	r5, r8, #20
 800fb14:	f100 0e14 	add.w	lr, r0, #20
 800fb18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fb1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fb20:	f108 0210 	add.w	r2, r8, #16
 800fb24:	46f2      	mov	sl, lr
 800fb26:	2100      	movs	r1, #0
 800fb28:	f859 3b04 	ldr.w	r3, [r9], #4
 800fb2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fb30:	fa11 f88b 	uxtah	r8, r1, fp
 800fb34:	b299      	uxth	r1, r3
 800fb36:	0c1b      	lsrs	r3, r3, #16
 800fb38:	eba8 0801 	sub.w	r8, r8, r1
 800fb3c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb40:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fb44:	fa1f f888 	uxth.w	r8, r8
 800fb48:	1419      	asrs	r1, r3, #16
 800fb4a:	454e      	cmp	r6, r9
 800fb4c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fb50:	f84a 3b04 	str.w	r3, [sl], #4
 800fb54:	d8e8      	bhi.n	800fb28 <__mdiff+0x80>
 800fb56:	1b33      	subs	r3, r6, r4
 800fb58:	3b15      	subs	r3, #21
 800fb5a:	f023 0303 	bic.w	r3, r3, #3
 800fb5e:	3304      	adds	r3, #4
 800fb60:	3415      	adds	r4, #21
 800fb62:	42a6      	cmp	r6, r4
 800fb64:	bf38      	it	cc
 800fb66:	2304      	movcc	r3, #4
 800fb68:	441d      	add	r5, r3
 800fb6a:	4473      	add	r3, lr
 800fb6c:	469e      	mov	lr, r3
 800fb6e:	462e      	mov	r6, r5
 800fb70:	4566      	cmp	r6, ip
 800fb72:	d30e      	bcc.n	800fb92 <__mdiff+0xea>
 800fb74:	f10c 0203 	add.w	r2, ip, #3
 800fb78:	1b52      	subs	r2, r2, r5
 800fb7a:	f022 0203 	bic.w	r2, r2, #3
 800fb7e:	3d03      	subs	r5, #3
 800fb80:	45ac      	cmp	ip, r5
 800fb82:	bf38      	it	cc
 800fb84:	2200      	movcc	r2, #0
 800fb86:	4413      	add	r3, r2
 800fb88:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fb8c:	b17a      	cbz	r2, 800fbae <__mdiff+0x106>
 800fb8e:	6107      	str	r7, [r0, #16]
 800fb90:	e7a4      	b.n	800fadc <__mdiff+0x34>
 800fb92:	f856 8b04 	ldr.w	r8, [r6], #4
 800fb96:	fa11 f288 	uxtah	r2, r1, r8
 800fb9a:	1414      	asrs	r4, r2, #16
 800fb9c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fba0:	b292      	uxth	r2, r2
 800fba2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fba6:	f84e 2b04 	str.w	r2, [lr], #4
 800fbaa:	1421      	asrs	r1, r4, #16
 800fbac:	e7e0      	b.n	800fb70 <__mdiff+0xc8>
 800fbae:	3f01      	subs	r7, #1
 800fbb0:	e7ea      	b.n	800fb88 <__mdiff+0xe0>
 800fbb2:	bf00      	nop
 800fbb4:	08013ea3 	.word	0x08013ea3
 800fbb8:	08013eb4 	.word	0x08013eb4

0800fbbc <__ulp>:
 800fbbc:	b082      	sub	sp, #8
 800fbbe:	ed8d 0b00 	vstr	d0, [sp]
 800fbc2:	9a01      	ldr	r2, [sp, #4]
 800fbc4:	4b0f      	ldr	r3, [pc, #60]	; (800fc04 <__ulp+0x48>)
 800fbc6:	4013      	ands	r3, r2
 800fbc8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	dc08      	bgt.n	800fbe2 <__ulp+0x26>
 800fbd0:	425b      	negs	r3, r3
 800fbd2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800fbd6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fbda:	da04      	bge.n	800fbe6 <__ulp+0x2a>
 800fbdc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fbe0:	4113      	asrs	r3, r2
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	e008      	b.n	800fbf8 <__ulp+0x3c>
 800fbe6:	f1a2 0314 	sub.w	r3, r2, #20
 800fbea:	2b1e      	cmp	r3, #30
 800fbec:	bfda      	itte	le
 800fbee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800fbf2:	40da      	lsrle	r2, r3
 800fbf4:	2201      	movgt	r2, #1
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	4610      	mov	r0, r2
 800fbfc:	ec41 0b10 	vmov	d0, r0, r1
 800fc00:	b002      	add	sp, #8
 800fc02:	4770      	bx	lr
 800fc04:	7ff00000 	.word	0x7ff00000

0800fc08 <__b2d>:
 800fc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc0c:	6906      	ldr	r6, [r0, #16]
 800fc0e:	f100 0814 	add.w	r8, r0, #20
 800fc12:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fc16:	1f37      	subs	r7, r6, #4
 800fc18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fc1c:	4610      	mov	r0, r2
 800fc1e:	f7ff fd53 	bl	800f6c8 <__hi0bits>
 800fc22:	f1c0 0320 	rsb	r3, r0, #32
 800fc26:	280a      	cmp	r0, #10
 800fc28:	600b      	str	r3, [r1, #0]
 800fc2a:	491b      	ldr	r1, [pc, #108]	; (800fc98 <__b2d+0x90>)
 800fc2c:	dc15      	bgt.n	800fc5a <__b2d+0x52>
 800fc2e:	f1c0 0c0b 	rsb	ip, r0, #11
 800fc32:	fa22 f30c 	lsr.w	r3, r2, ip
 800fc36:	45b8      	cmp	r8, r7
 800fc38:	ea43 0501 	orr.w	r5, r3, r1
 800fc3c:	bf34      	ite	cc
 800fc3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fc42:	2300      	movcs	r3, #0
 800fc44:	3015      	adds	r0, #21
 800fc46:	fa02 f000 	lsl.w	r0, r2, r0
 800fc4a:	fa23 f30c 	lsr.w	r3, r3, ip
 800fc4e:	4303      	orrs	r3, r0
 800fc50:	461c      	mov	r4, r3
 800fc52:	ec45 4b10 	vmov	d0, r4, r5
 800fc56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc5a:	45b8      	cmp	r8, r7
 800fc5c:	bf3a      	itte	cc
 800fc5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fc62:	f1a6 0708 	subcc.w	r7, r6, #8
 800fc66:	2300      	movcs	r3, #0
 800fc68:	380b      	subs	r0, #11
 800fc6a:	d012      	beq.n	800fc92 <__b2d+0x8a>
 800fc6c:	f1c0 0120 	rsb	r1, r0, #32
 800fc70:	fa23 f401 	lsr.w	r4, r3, r1
 800fc74:	4082      	lsls	r2, r0
 800fc76:	4322      	orrs	r2, r4
 800fc78:	4547      	cmp	r7, r8
 800fc7a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800fc7e:	bf8c      	ite	hi
 800fc80:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fc84:	2200      	movls	r2, #0
 800fc86:	4083      	lsls	r3, r0
 800fc88:	40ca      	lsrs	r2, r1
 800fc8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fc8e:	4313      	orrs	r3, r2
 800fc90:	e7de      	b.n	800fc50 <__b2d+0x48>
 800fc92:	ea42 0501 	orr.w	r5, r2, r1
 800fc96:	e7db      	b.n	800fc50 <__b2d+0x48>
 800fc98:	3ff00000 	.word	0x3ff00000

0800fc9c <__d2b>:
 800fc9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fca0:	460f      	mov	r7, r1
 800fca2:	2101      	movs	r1, #1
 800fca4:	ec59 8b10 	vmov	r8, r9, d0
 800fca8:	4616      	mov	r6, r2
 800fcaa:	f7ff fc1b 	bl	800f4e4 <_Balloc>
 800fcae:	4604      	mov	r4, r0
 800fcb0:	b930      	cbnz	r0, 800fcc0 <__d2b+0x24>
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	4b24      	ldr	r3, [pc, #144]	; (800fd48 <__d2b+0xac>)
 800fcb6:	4825      	ldr	r0, [pc, #148]	; (800fd4c <__d2b+0xb0>)
 800fcb8:	f240 310f 	movw	r1, #783	; 0x30f
 800fcbc:	f001 fd34 	bl	8011728 <__assert_func>
 800fcc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fcc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fcc8:	bb2d      	cbnz	r5, 800fd16 <__d2b+0x7a>
 800fcca:	9301      	str	r3, [sp, #4]
 800fccc:	f1b8 0300 	subs.w	r3, r8, #0
 800fcd0:	d026      	beq.n	800fd20 <__d2b+0x84>
 800fcd2:	4668      	mov	r0, sp
 800fcd4:	9300      	str	r3, [sp, #0]
 800fcd6:	f7ff fd17 	bl	800f708 <__lo0bits>
 800fcda:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fcde:	b1e8      	cbz	r0, 800fd1c <__d2b+0x80>
 800fce0:	f1c0 0320 	rsb	r3, r0, #32
 800fce4:	fa02 f303 	lsl.w	r3, r2, r3
 800fce8:	430b      	orrs	r3, r1
 800fcea:	40c2      	lsrs	r2, r0
 800fcec:	6163      	str	r3, [r4, #20]
 800fcee:	9201      	str	r2, [sp, #4]
 800fcf0:	9b01      	ldr	r3, [sp, #4]
 800fcf2:	61a3      	str	r3, [r4, #24]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	bf14      	ite	ne
 800fcf8:	2202      	movne	r2, #2
 800fcfa:	2201      	moveq	r2, #1
 800fcfc:	6122      	str	r2, [r4, #16]
 800fcfe:	b1bd      	cbz	r5, 800fd30 <__d2b+0x94>
 800fd00:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fd04:	4405      	add	r5, r0
 800fd06:	603d      	str	r5, [r7, #0]
 800fd08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fd0c:	6030      	str	r0, [r6, #0]
 800fd0e:	4620      	mov	r0, r4
 800fd10:	b003      	add	sp, #12
 800fd12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd1a:	e7d6      	b.n	800fcca <__d2b+0x2e>
 800fd1c:	6161      	str	r1, [r4, #20]
 800fd1e:	e7e7      	b.n	800fcf0 <__d2b+0x54>
 800fd20:	a801      	add	r0, sp, #4
 800fd22:	f7ff fcf1 	bl	800f708 <__lo0bits>
 800fd26:	9b01      	ldr	r3, [sp, #4]
 800fd28:	6163      	str	r3, [r4, #20]
 800fd2a:	3020      	adds	r0, #32
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	e7e5      	b.n	800fcfc <__d2b+0x60>
 800fd30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd38:	6038      	str	r0, [r7, #0]
 800fd3a:	6918      	ldr	r0, [r3, #16]
 800fd3c:	f7ff fcc4 	bl	800f6c8 <__hi0bits>
 800fd40:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd44:	e7e2      	b.n	800fd0c <__d2b+0x70>
 800fd46:	bf00      	nop
 800fd48:	08013ea3 	.word	0x08013ea3
 800fd4c:	08013eb4 	.word	0x08013eb4

0800fd50 <__ratio>:
 800fd50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd54:	4688      	mov	r8, r1
 800fd56:	4669      	mov	r1, sp
 800fd58:	4681      	mov	r9, r0
 800fd5a:	f7ff ff55 	bl	800fc08 <__b2d>
 800fd5e:	a901      	add	r1, sp, #4
 800fd60:	4640      	mov	r0, r8
 800fd62:	ec55 4b10 	vmov	r4, r5, d0
 800fd66:	f7ff ff4f 	bl	800fc08 <__b2d>
 800fd6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fd72:	eba3 0c02 	sub.w	ip, r3, r2
 800fd76:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fd7a:	1a9b      	subs	r3, r3, r2
 800fd7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fd80:	ec51 0b10 	vmov	r0, r1, d0
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	bfd6      	itet	le
 800fd88:	460a      	movle	r2, r1
 800fd8a:	462a      	movgt	r2, r5
 800fd8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fd90:	468b      	mov	fp, r1
 800fd92:	462f      	mov	r7, r5
 800fd94:	bfd4      	ite	le
 800fd96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fd9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fd9e:	4620      	mov	r0, r4
 800fda0:	ee10 2a10 	vmov	r2, s0
 800fda4:	465b      	mov	r3, fp
 800fda6:	4639      	mov	r1, r7
 800fda8:	f7f0 fd50 	bl	800084c <__aeabi_ddiv>
 800fdac:	ec41 0b10 	vmov	d0, r0, r1
 800fdb0:	b003      	add	sp, #12
 800fdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fdb6 <__copybits>:
 800fdb6:	3901      	subs	r1, #1
 800fdb8:	b570      	push	{r4, r5, r6, lr}
 800fdba:	1149      	asrs	r1, r1, #5
 800fdbc:	6914      	ldr	r4, [r2, #16]
 800fdbe:	3101      	adds	r1, #1
 800fdc0:	f102 0314 	add.w	r3, r2, #20
 800fdc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fdc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fdcc:	1f05      	subs	r5, r0, #4
 800fdce:	42a3      	cmp	r3, r4
 800fdd0:	d30c      	bcc.n	800fdec <__copybits+0x36>
 800fdd2:	1aa3      	subs	r3, r4, r2
 800fdd4:	3b11      	subs	r3, #17
 800fdd6:	f023 0303 	bic.w	r3, r3, #3
 800fdda:	3211      	adds	r2, #17
 800fddc:	42a2      	cmp	r2, r4
 800fdde:	bf88      	it	hi
 800fde0:	2300      	movhi	r3, #0
 800fde2:	4418      	add	r0, r3
 800fde4:	2300      	movs	r3, #0
 800fde6:	4288      	cmp	r0, r1
 800fde8:	d305      	bcc.n	800fdf6 <__copybits+0x40>
 800fdea:	bd70      	pop	{r4, r5, r6, pc}
 800fdec:	f853 6b04 	ldr.w	r6, [r3], #4
 800fdf0:	f845 6f04 	str.w	r6, [r5, #4]!
 800fdf4:	e7eb      	b.n	800fdce <__copybits+0x18>
 800fdf6:	f840 3b04 	str.w	r3, [r0], #4
 800fdfa:	e7f4      	b.n	800fde6 <__copybits+0x30>

0800fdfc <__any_on>:
 800fdfc:	f100 0214 	add.w	r2, r0, #20
 800fe00:	6900      	ldr	r0, [r0, #16]
 800fe02:	114b      	asrs	r3, r1, #5
 800fe04:	4298      	cmp	r0, r3
 800fe06:	b510      	push	{r4, lr}
 800fe08:	db11      	blt.n	800fe2e <__any_on+0x32>
 800fe0a:	dd0a      	ble.n	800fe22 <__any_on+0x26>
 800fe0c:	f011 011f 	ands.w	r1, r1, #31
 800fe10:	d007      	beq.n	800fe22 <__any_on+0x26>
 800fe12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fe16:	fa24 f001 	lsr.w	r0, r4, r1
 800fe1a:	fa00 f101 	lsl.w	r1, r0, r1
 800fe1e:	428c      	cmp	r4, r1
 800fe20:	d10b      	bne.n	800fe3a <__any_on+0x3e>
 800fe22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe26:	4293      	cmp	r3, r2
 800fe28:	d803      	bhi.n	800fe32 <__any_on+0x36>
 800fe2a:	2000      	movs	r0, #0
 800fe2c:	bd10      	pop	{r4, pc}
 800fe2e:	4603      	mov	r3, r0
 800fe30:	e7f7      	b.n	800fe22 <__any_on+0x26>
 800fe32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe36:	2900      	cmp	r1, #0
 800fe38:	d0f5      	beq.n	800fe26 <__any_on+0x2a>
 800fe3a:	2001      	movs	r0, #1
 800fe3c:	e7f6      	b.n	800fe2c <__any_on+0x30>

0800fe3e <sulp>:
 800fe3e:	b570      	push	{r4, r5, r6, lr}
 800fe40:	4604      	mov	r4, r0
 800fe42:	460d      	mov	r5, r1
 800fe44:	ec45 4b10 	vmov	d0, r4, r5
 800fe48:	4616      	mov	r6, r2
 800fe4a:	f7ff feb7 	bl	800fbbc <__ulp>
 800fe4e:	ec51 0b10 	vmov	r0, r1, d0
 800fe52:	b17e      	cbz	r6, 800fe74 <sulp+0x36>
 800fe54:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fe58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	dd09      	ble.n	800fe74 <sulp+0x36>
 800fe60:	051b      	lsls	r3, r3, #20
 800fe62:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fe66:	2400      	movs	r4, #0
 800fe68:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fe6c:	4622      	mov	r2, r4
 800fe6e:	462b      	mov	r3, r5
 800fe70:	f7f0 fbc2 	bl	80005f8 <__aeabi_dmul>
 800fe74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fe78 <_strtod_l>:
 800fe78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe7c:	ed2d 8b02 	vpush	{d8}
 800fe80:	b09b      	sub	sp, #108	; 0x6c
 800fe82:	4604      	mov	r4, r0
 800fe84:	9213      	str	r2, [sp, #76]	; 0x4c
 800fe86:	2200      	movs	r2, #0
 800fe88:	9216      	str	r2, [sp, #88]	; 0x58
 800fe8a:	460d      	mov	r5, r1
 800fe8c:	f04f 0800 	mov.w	r8, #0
 800fe90:	f04f 0900 	mov.w	r9, #0
 800fe94:	460a      	mov	r2, r1
 800fe96:	9215      	str	r2, [sp, #84]	; 0x54
 800fe98:	7811      	ldrb	r1, [r2, #0]
 800fe9a:	292b      	cmp	r1, #43	; 0x2b
 800fe9c:	d04c      	beq.n	800ff38 <_strtod_l+0xc0>
 800fe9e:	d83a      	bhi.n	800ff16 <_strtod_l+0x9e>
 800fea0:	290d      	cmp	r1, #13
 800fea2:	d834      	bhi.n	800ff0e <_strtod_l+0x96>
 800fea4:	2908      	cmp	r1, #8
 800fea6:	d834      	bhi.n	800ff12 <_strtod_l+0x9a>
 800fea8:	2900      	cmp	r1, #0
 800feaa:	d03d      	beq.n	800ff28 <_strtod_l+0xb0>
 800feac:	2200      	movs	r2, #0
 800feae:	920a      	str	r2, [sp, #40]	; 0x28
 800feb0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800feb2:	7832      	ldrb	r2, [r6, #0]
 800feb4:	2a30      	cmp	r2, #48	; 0x30
 800feb6:	f040 80b4 	bne.w	8010022 <_strtod_l+0x1aa>
 800feba:	7872      	ldrb	r2, [r6, #1]
 800febc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fec0:	2a58      	cmp	r2, #88	; 0x58
 800fec2:	d170      	bne.n	800ffa6 <_strtod_l+0x12e>
 800fec4:	9302      	str	r3, [sp, #8]
 800fec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fec8:	9301      	str	r3, [sp, #4]
 800feca:	ab16      	add	r3, sp, #88	; 0x58
 800fecc:	9300      	str	r3, [sp, #0]
 800fece:	4a8e      	ldr	r2, [pc, #568]	; (8010108 <_strtod_l+0x290>)
 800fed0:	ab17      	add	r3, sp, #92	; 0x5c
 800fed2:	a915      	add	r1, sp, #84	; 0x54
 800fed4:	4620      	mov	r0, r4
 800fed6:	f001 fcc3 	bl	8011860 <__gethex>
 800feda:	f010 070f 	ands.w	r7, r0, #15
 800fede:	4605      	mov	r5, r0
 800fee0:	d005      	beq.n	800feee <_strtod_l+0x76>
 800fee2:	2f06      	cmp	r7, #6
 800fee4:	d12a      	bne.n	800ff3c <_strtod_l+0xc4>
 800fee6:	3601      	adds	r6, #1
 800fee8:	2300      	movs	r3, #0
 800feea:	9615      	str	r6, [sp, #84]	; 0x54
 800feec:	930a      	str	r3, [sp, #40]	; 0x28
 800feee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	f040 857f 	bne.w	80109f4 <_strtod_l+0xb7c>
 800fef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fef8:	b1db      	cbz	r3, 800ff32 <_strtod_l+0xba>
 800fefa:	4642      	mov	r2, r8
 800fefc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ff00:	ec43 2b10 	vmov	d0, r2, r3
 800ff04:	b01b      	add	sp, #108	; 0x6c
 800ff06:	ecbd 8b02 	vpop	{d8}
 800ff0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff0e:	2920      	cmp	r1, #32
 800ff10:	d1cc      	bne.n	800feac <_strtod_l+0x34>
 800ff12:	3201      	adds	r2, #1
 800ff14:	e7bf      	b.n	800fe96 <_strtod_l+0x1e>
 800ff16:	292d      	cmp	r1, #45	; 0x2d
 800ff18:	d1c8      	bne.n	800feac <_strtod_l+0x34>
 800ff1a:	2101      	movs	r1, #1
 800ff1c:	910a      	str	r1, [sp, #40]	; 0x28
 800ff1e:	1c51      	adds	r1, r2, #1
 800ff20:	9115      	str	r1, [sp, #84]	; 0x54
 800ff22:	7852      	ldrb	r2, [r2, #1]
 800ff24:	2a00      	cmp	r2, #0
 800ff26:	d1c3      	bne.n	800feb0 <_strtod_l+0x38>
 800ff28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ff2a:	9515      	str	r5, [sp, #84]	; 0x54
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	f040 855f 	bne.w	80109f0 <_strtod_l+0xb78>
 800ff32:	4642      	mov	r2, r8
 800ff34:	464b      	mov	r3, r9
 800ff36:	e7e3      	b.n	800ff00 <_strtod_l+0x88>
 800ff38:	2100      	movs	r1, #0
 800ff3a:	e7ef      	b.n	800ff1c <_strtod_l+0xa4>
 800ff3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ff3e:	b13a      	cbz	r2, 800ff50 <_strtod_l+0xd8>
 800ff40:	2135      	movs	r1, #53	; 0x35
 800ff42:	a818      	add	r0, sp, #96	; 0x60
 800ff44:	f7ff ff37 	bl	800fdb6 <__copybits>
 800ff48:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	f7ff fb0a 	bl	800f564 <_Bfree>
 800ff50:	3f01      	subs	r7, #1
 800ff52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ff54:	2f04      	cmp	r7, #4
 800ff56:	d806      	bhi.n	800ff66 <_strtod_l+0xee>
 800ff58:	e8df f007 	tbb	[pc, r7]
 800ff5c:	201d0314 	.word	0x201d0314
 800ff60:	14          	.byte	0x14
 800ff61:	00          	.byte	0x00
 800ff62:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ff66:	05e9      	lsls	r1, r5, #23
 800ff68:	bf48      	it	mi
 800ff6a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ff6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ff72:	0d1b      	lsrs	r3, r3, #20
 800ff74:	051b      	lsls	r3, r3, #20
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d1b9      	bne.n	800feee <_strtod_l+0x76>
 800ff7a:	f7fe faef 	bl	800e55c <__errno>
 800ff7e:	2322      	movs	r3, #34	; 0x22
 800ff80:	6003      	str	r3, [r0, #0]
 800ff82:	e7b4      	b.n	800feee <_strtod_l+0x76>
 800ff84:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ff88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ff8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ff90:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ff94:	e7e7      	b.n	800ff66 <_strtod_l+0xee>
 800ff96:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010110 <_strtod_l+0x298>
 800ff9a:	e7e4      	b.n	800ff66 <_strtod_l+0xee>
 800ff9c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ffa0:	f04f 38ff 	mov.w	r8, #4294967295
 800ffa4:	e7df      	b.n	800ff66 <_strtod_l+0xee>
 800ffa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffa8:	1c5a      	adds	r2, r3, #1
 800ffaa:	9215      	str	r2, [sp, #84]	; 0x54
 800ffac:	785b      	ldrb	r3, [r3, #1]
 800ffae:	2b30      	cmp	r3, #48	; 0x30
 800ffb0:	d0f9      	beq.n	800ffa6 <_strtod_l+0x12e>
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d09b      	beq.n	800feee <_strtod_l+0x76>
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	f04f 0a00 	mov.w	sl, #0
 800ffbc:	9304      	str	r3, [sp, #16]
 800ffbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffc0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffc2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ffc6:	46d3      	mov	fp, sl
 800ffc8:	220a      	movs	r2, #10
 800ffca:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ffcc:	7806      	ldrb	r6, [r0, #0]
 800ffce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ffd2:	b2d9      	uxtb	r1, r3
 800ffd4:	2909      	cmp	r1, #9
 800ffd6:	d926      	bls.n	8010026 <_strtod_l+0x1ae>
 800ffd8:	494c      	ldr	r1, [pc, #304]	; (801010c <_strtod_l+0x294>)
 800ffda:	2201      	movs	r2, #1
 800ffdc:	f001 fb79 	bl	80116d2 <strncmp>
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	d030      	beq.n	8010046 <_strtod_l+0x1ce>
 800ffe4:	2000      	movs	r0, #0
 800ffe6:	4632      	mov	r2, r6
 800ffe8:	9005      	str	r0, [sp, #20]
 800ffea:	465e      	mov	r6, fp
 800ffec:	4603      	mov	r3, r0
 800ffee:	2a65      	cmp	r2, #101	; 0x65
 800fff0:	d001      	beq.n	800fff6 <_strtod_l+0x17e>
 800fff2:	2a45      	cmp	r2, #69	; 0x45
 800fff4:	d113      	bne.n	801001e <_strtod_l+0x1a6>
 800fff6:	b91e      	cbnz	r6, 8010000 <_strtod_l+0x188>
 800fff8:	9a04      	ldr	r2, [sp, #16]
 800fffa:	4302      	orrs	r2, r0
 800fffc:	d094      	beq.n	800ff28 <_strtod_l+0xb0>
 800fffe:	2600      	movs	r6, #0
 8010000:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8010002:	1c6a      	adds	r2, r5, #1
 8010004:	9215      	str	r2, [sp, #84]	; 0x54
 8010006:	786a      	ldrb	r2, [r5, #1]
 8010008:	2a2b      	cmp	r2, #43	; 0x2b
 801000a:	d074      	beq.n	80100f6 <_strtod_l+0x27e>
 801000c:	2a2d      	cmp	r2, #45	; 0x2d
 801000e:	d078      	beq.n	8010102 <_strtod_l+0x28a>
 8010010:	f04f 0c00 	mov.w	ip, #0
 8010014:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010018:	2909      	cmp	r1, #9
 801001a:	d97f      	bls.n	801011c <_strtod_l+0x2a4>
 801001c:	9515      	str	r5, [sp, #84]	; 0x54
 801001e:	2700      	movs	r7, #0
 8010020:	e09e      	b.n	8010160 <_strtod_l+0x2e8>
 8010022:	2300      	movs	r3, #0
 8010024:	e7c8      	b.n	800ffb8 <_strtod_l+0x140>
 8010026:	f1bb 0f08 	cmp.w	fp, #8
 801002a:	bfd8      	it	le
 801002c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801002e:	f100 0001 	add.w	r0, r0, #1
 8010032:	bfda      	itte	le
 8010034:	fb02 3301 	mlale	r3, r2, r1, r3
 8010038:	9309      	strle	r3, [sp, #36]	; 0x24
 801003a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801003e:	f10b 0b01 	add.w	fp, fp, #1
 8010042:	9015      	str	r0, [sp, #84]	; 0x54
 8010044:	e7c1      	b.n	800ffca <_strtod_l+0x152>
 8010046:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010048:	1c5a      	adds	r2, r3, #1
 801004a:	9215      	str	r2, [sp, #84]	; 0x54
 801004c:	785a      	ldrb	r2, [r3, #1]
 801004e:	f1bb 0f00 	cmp.w	fp, #0
 8010052:	d037      	beq.n	80100c4 <_strtod_l+0x24c>
 8010054:	9005      	str	r0, [sp, #20]
 8010056:	465e      	mov	r6, fp
 8010058:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801005c:	2b09      	cmp	r3, #9
 801005e:	d912      	bls.n	8010086 <_strtod_l+0x20e>
 8010060:	2301      	movs	r3, #1
 8010062:	e7c4      	b.n	800ffee <_strtod_l+0x176>
 8010064:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010066:	1c5a      	adds	r2, r3, #1
 8010068:	9215      	str	r2, [sp, #84]	; 0x54
 801006a:	785a      	ldrb	r2, [r3, #1]
 801006c:	3001      	adds	r0, #1
 801006e:	2a30      	cmp	r2, #48	; 0x30
 8010070:	d0f8      	beq.n	8010064 <_strtod_l+0x1ec>
 8010072:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010076:	2b08      	cmp	r3, #8
 8010078:	f200 84c1 	bhi.w	80109fe <_strtod_l+0xb86>
 801007c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801007e:	9005      	str	r0, [sp, #20]
 8010080:	2000      	movs	r0, #0
 8010082:	930b      	str	r3, [sp, #44]	; 0x2c
 8010084:	4606      	mov	r6, r0
 8010086:	3a30      	subs	r2, #48	; 0x30
 8010088:	f100 0301 	add.w	r3, r0, #1
 801008c:	d014      	beq.n	80100b8 <_strtod_l+0x240>
 801008e:	9905      	ldr	r1, [sp, #20]
 8010090:	4419      	add	r1, r3
 8010092:	9105      	str	r1, [sp, #20]
 8010094:	4633      	mov	r3, r6
 8010096:	eb00 0c06 	add.w	ip, r0, r6
 801009a:	210a      	movs	r1, #10
 801009c:	4563      	cmp	r3, ip
 801009e:	d113      	bne.n	80100c8 <_strtod_l+0x250>
 80100a0:	1833      	adds	r3, r6, r0
 80100a2:	2b08      	cmp	r3, #8
 80100a4:	f106 0601 	add.w	r6, r6, #1
 80100a8:	4406      	add	r6, r0
 80100aa:	dc1a      	bgt.n	80100e2 <_strtod_l+0x26a>
 80100ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100ae:	230a      	movs	r3, #10
 80100b0:	fb03 2301 	mla	r3, r3, r1, r2
 80100b4:	9309      	str	r3, [sp, #36]	; 0x24
 80100b6:	2300      	movs	r3, #0
 80100b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80100ba:	1c51      	adds	r1, r2, #1
 80100bc:	9115      	str	r1, [sp, #84]	; 0x54
 80100be:	7852      	ldrb	r2, [r2, #1]
 80100c0:	4618      	mov	r0, r3
 80100c2:	e7c9      	b.n	8010058 <_strtod_l+0x1e0>
 80100c4:	4658      	mov	r0, fp
 80100c6:	e7d2      	b.n	801006e <_strtod_l+0x1f6>
 80100c8:	2b08      	cmp	r3, #8
 80100ca:	f103 0301 	add.w	r3, r3, #1
 80100ce:	dc03      	bgt.n	80100d8 <_strtod_l+0x260>
 80100d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80100d2:	434f      	muls	r7, r1
 80100d4:	9709      	str	r7, [sp, #36]	; 0x24
 80100d6:	e7e1      	b.n	801009c <_strtod_l+0x224>
 80100d8:	2b10      	cmp	r3, #16
 80100da:	bfd8      	it	le
 80100dc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80100e0:	e7dc      	b.n	801009c <_strtod_l+0x224>
 80100e2:	2e10      	cmp	r6, #16
 80100e4:	bfdc      	itt	le
 80100e6:	230a      	movle	r3, #10
 80100e8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80100ec:	e7e3      	b.n	80100b6 <_strtod_l+0x23e>
 80100ee:	2300      	movs	r3, #0
 80100f0:	9305      	str	r3, [sp, #20]
 80100f2:	2301      	movs	r3, #1
 80100f4:	e780      	b.n	800fff8 <_strtod_l+0x180>
 80100f6:	f04f 0c00 	mov.w	ip, #0
 80100fa:	1caa      	adds	r2, r5, #2
 80100fc:	9215      	str	r2, [sp, #84]	; 0x54
 80100fe:	78aa      	ldrb	r2, [r5, #2]
 8010100:	e788      	b.n	8010014 <_strtod_l+0x19c>
 8010102:	f04f 0c01 	mov.w	ip, #1
 8010106:	e7f8      	b.n	80100fa <_strtod_l+0x282>
 8010108:	08014010 	.word	0x08014010
 801010c:	0801400c 	.word	0x0801400c
 8010110:	7ff00000 	.word	0x7ff00000
 8010114:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010116:	1c51      	adds	r1, r2, #1
 8010118:	9115      	str	r1, [sp, #84]	; 0x54
 801011a:	7852      	ldrb	r2, [r2, #1]
 801011c:	2a30      	cmp	r2, #48	; 0x30
 801011e:	d0f9      	beq.n	8010114 <_strtod_l+0x29c>
 8010120:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010124:	2908      	cmp	r1, #8
 8010126:	f63f af7a 	bhi.w	801001e <_strtod_l+0x1a6>
 801012a:	3a30      	subs	r2, #48	; 0x30
 801012c:	9208      	str	r2, [sp, #32]
 801012e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010130:	920c      	str	r2, [sp, #48]	; 0x30
 8010132:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010134:	1c57      	adds	r7, r2, #1
 8010136:	9715      	str	r7, [sp, #84]	; 0x54
 8010138:	7852      	ldrb	r2, [r2, #1]
 801013a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801013e:	f1be 0f09 	cmp.w	lr, #9
 8010142:	d938      	bls.n	80101b6 <_strtod_l+0x33e>
 8010144:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010146:	1a7f      	subs	r7, r7, r1
 8010148:	2f08      	cmp	r7, #8
 801014a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801014e:	dc03      	bgt.n	8010158 <_strtod_l+0x2e0>
 8010150:	9908      	ldr	r1, [sp, #32]
 8010152:	428f      	cmp	r7, r1
 8010154:	bfa8      	it	ge
 8010156:	460f      	movge	r7, r1
 8010158:	f1bc 0f00 	cmp.w	ip, #0
 801015c:	d000      	beq.n	8010160 <_strtod_l+0x2e8>
 801015e:	427f      	negs	r7, r7
 8010160:	2e00      	cmp	r6, #0
 8010162:	d14f      	bne.n	8010204 <_strtod_l+0x38c>
 8010164:	9904      	ldr	r1, [sp, #16]
 8010166:	4301      	orrs	r1, r0
 8010168:	f47f aec1 	bne.w	800feee <_strtod_l+0x76>
 801016c:	2b00      	cmp	r3, #0
 801016e:	f47f aedb 	bne.w	800ff28 <_strtod_l+0xb0>
 8010172:	2a69      	cmp	r2, #105	; 0x69
 8010174:	d029      	beq.n	80101ca <_strtod_l+0x352>
 8010176:	dc26      	bgt.n	80101c6 <_strtod_l+0x34e>
 8010178:	2a49      	cmp	r2, #73	; 0x49
 801017a:	d026      	beq.n	80101ca <_strtod_l+0x352>
 801017c:	2a4e      	cmp	r2, #78	; 0x4e
 801017e:	f47f aed3 	bne.w	800ff28 <_strtod_l+0xb0>
 8010182:	499b      	ldr	r1, [pc, #620]	; (80103f0 <_strtod_l+0x578>)
 8010184:	a815      	add	r0, sp, #84	; 0x54
 8010186:	f001 fdab 	bl	8011ce0 <__match>
 801018a:	2800      	cmp	r0, #0
 801018c:	f43f aecc 	beq.w	800ff28 <_strtod_l+0xb0>
 8010190:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	2b28      	cmp	r3, #40	; 0x28
 8010196:	d12f      	bne.n	80101f8 <_strtod_l+0x380>
 8010198:	4996      	ldr	r1, [pc, #600]	; (80103f4 <_strtod_l+0x57c>)
 801019a:	aa18      	add	r2, sp, #96	; 0x60
 801019c:	a815      	add	r0, sp, #84	; 0x54
 801019e:	f001 fdb3 	bl	8011d08 <__hexnan>
 80101a2:	2805      	cmp	r0, #5
 80101a4:	d128      	bne.n	80101f8 <_strtod_l+0x380>
 80101a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80101a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80101ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80101b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80101b4:	e69b      	b.n	800feee <_strtod_l+0x76>
 80101b6:	9f08      	ldr	r7, [sp, #32]
 80101b8:	210a      	movs	r1, #10
 80101ba:	fb01 2107 	mla	r1, r1, r7, r2
 80101be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80101c2:	9208      	str	r2, [sp, #32]
 80101c4:	e7b5      	b.n	8010132 <_strtod_l+0x2ba>
 80101c6:	2a6e      	cmp	r2, #110	; 0x6e
 80101c8:	e7d9      	b.n	801017e <_strtod_l+0x306>
 80101ca:	498b      	ldr	r1, [pc, #556]	; (80103f8 <_strtod_l+0x580>)
 80101cc:	a815      	add	r0, sp, #84	; 0x54
 80101ce:	f001 fd87 	bl	8011ce0 <__match>
 80101d2:	2800      	cmp	r0, #0
 80101d4:	f43f aea8 	beq.w	800ff28 <_strtod_l+0xb0>
 80101d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101da:	4988      	ldr	r1, [pc, #544]	; (80103fc <_strtod_l+0x584>)
 80101dc:	3b01      	subs	r3, #1
 80101de:	a815      	add	r0, sp, #84	; 0x54
 80101e0:	9315      	str	r3, [sp, #84]	; 0x54
 80101e2:	f001 fd7d 	bl	8011ce0 <__match>
 80101e6:	b910      	cbnz	r0, 80101ee <_strtod_l+0x376>
 80101e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101ea:	3301      	adds	r3, #1
 80101ec:	9315      	str	r3, [sp, #84]	; 0x54
 80101ee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801040c <_strtod_l+0x594>
 80101f2:	f04f 0800 	mov.w	r8, #0
 80101f6:	e67a      	b.n	800feee <_strtod_l+0x76>
 80101f8:	4881      	ldr	r0, [pc, #516]	; (8010400 <_strtod_l+0x588>)
 80101fa:	f001 fa8d 	bl	8011718 <nan>
 80101fe:	ec59 8b10 	vmov	r8, r9, d0
 8010202:	e674      	b.n	800feee <_strtod_l+0x76>
 8010204:	9b05      	ldr	r3, [sp, #20]
 8010206:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010208:	1afb      	subs	r3, r7, r3
 801020a:	f1bb 0f00 	cmp.w	fp, #0
 801020e:	bf08      	it	eq
 8010210:	46b3      	moveq	fp, r6
 8010212:	2e10      	cmp	r6, #16
 8010214:	9308      	str	r3, [sp, #32]
 8010216:	4635      	mov	r5, r6
 8010218:	bfa8      	it	ge
 801021a:	2510      	movge	r5, #16
 801021c:	f7f0 f972 	bl	8000504 <__aeabi_ui2d>
 8010220:	2e09      	cmp	r6, #9
 8010222:	4680      	mov	r8, r0
 8010224:	4689      	mov	r9, r1
 8010226:	dd13      	ble.n	8010250 <_strtod_l+0x3d8>
 8010228:	4b76      	ldr	r3, [pc, #472]	; (8010404 <_strtod_l+0x58c>)
 801022a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801022e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010232:	f7f0 f9e1 	bl	80005f8 <__aeabi_dmul>
 8010236:	4680      	mov	r8, r0
 8010238:	4650      	mov	r0, sl
 801023a:	4689      	mov	r9, r1
 801023c:	f7f0 f962 	bl	8000504 <__aeabi_ui2d>
 8010240:	4602      	mov	r2, r0
 8010242:	460b      	mov	r3, r1
 8010244:	4640      	mov	r0, r8
 8010246:	4649      	mov	r1, r9
 8010248:	f7f0 f820 	bl	800028c <__adddf3>
 801024c:	4680      	mov	r8, r0
 801024e:	4689      	mov	r9, r1
 8010250:	2e0f      	cmp	r6, #15
 8010252:	dc38      	bgt.n	80102c6 <_strtod_l+0x44e>
 8010254:	9b08      	ldr	r3, [sp, #32]
 8010256:	2b00      	cmp	r3, #0
 8010258:	f43f ae49 	beq.w	800feee <_strtod_l+0x76>
 801025c:	dd24      	ble.n	80102a8 <_strtod_l+0x430>
 801025e:	2b16      	cmp	r3, #22
 8010260:	dc0b      	bgt.n	801027a <_strtod_l+0x402>
 8010262:	4968      	ldr	r1, [pc, #416]	; (8010404 <_strtod_l+0x58c>)
 8010264:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010268:	e9d1 0100 	ldrd	r0, r1, [r1]
 801026c:	4642      	mov	r2, r8
 801026e:	464b      	mov	r3, r9
 8010270:	f7f0 f9c2 	bl	80005f8 <__aeabi_dmul>
 8010274:	4680      	mov	r8, r0
 8010276:	4689      	mov	r9, r1
 8010278:	e639      	b.n	800feee <_strtod_l+0x76>
 801027a:	9a08      	ldr	r2, [sp, #32]
 801027c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8010280:	4293      	cmp	r3, r2
 8010282:	db20      	blt.n	80102c6 <_strtod_l+0x44e>
 8010284:	4c5f      	ldr	r4, [pc, #380]	; (8010404 <_strtod_l+0x58c>)
 8010286:	f1c6 060f 	rsb	r6, r6, #15
 801028a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801028e:	4642      	mov	r2, r8
 8010290:	464b      	mov	r3, r9
 8010292:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010296:	f7f0 f9af 	bl	80005f8 <__aeabi_dmul>
 801029a:	9b08      	ldr	r3, [sp, #32]
 801029c:	1b9e      	subs	r6, r3, r6
 801029e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80102a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80102a6:	e7e3      	b.n	8010270 <_strtod_l+0x3f8>
 80102a8:	9b08      	ldr	r3, [sp, #32]
 80102aa:	3316      	adds	r3, #22
 80102ac:	db0b      	blt.n	80102c6 <_strtod_l+0x44e>
 80102ae:	9b05      	ldr	r3, [sp, #20]
 80102b0:	1bdf      	subs	r7, r3, r7
 80102b2:	4b54      	ldr	r3, [pc, #336]	; (8010404 <_strtod_l+0x58c>)
 80102b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80102b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102bc:	4640      	mov	r0, r8
 80102be:	4649      	mov	r1, r9
 80102c0:	f7f0 fac4 	bl	800084c <__aeabi_ddiv>
 80102c4:	e7d6      	b.n	8010274 <_strtod_l+0x3fc>
 80102c6:	9b08      	ldr	r3, [sp, #32]
 80102c8:	1b75      	subs	r5, r6, r5
 80102ca:	441d      	add	r5, r3
 80102cc:	2d00      	cmp	r5, #0
 80102ce:	dd70      	ble.n	80103b2 <_strtod_l+0x53a>
 80102d0:	f015 030f 	ands.w	r3, r5, #15
 80102d4:	d00a      	beq.n	80102ec <_strtod_l+0x474>
 80102d6:	494b      	ldr	r1, [pc, #300]	; (8010404 <_strtod_l+0x58c>)
 80102d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80102dc:	4642      	mov	r2, r8
 80102de:	464b      	mov	r3, r9
 80102e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102e4:	f7f0 f988 	bl	80005f8 <__aeabi_dmul>
 80102e8:	4680      	mov	r8, r0
 80102ea:	4689      	mov	r9, r1
 80102ec:	f035 050f 	bics.w	r5, r5, #15
 80102f0:	d04d      	beq.n	801038e <_strtod_l+0x516>
 80102f2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80102f6:	dd22      	ble.n	801033e <_strtod_l+0x4c6>
 80102f8:	2500      	movs	r5, #0
 80102fa:	46ab      	mov	fp, r5
 80102fc:	9509      	str	r5, [sp, #36]	; 0x24
 80102fe:	9505      	str	r5, [sp, #20]
 8010300:	2322      	movs	r3, #34	; 0x22
 8010302:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801040c <_strtod_l+0x594>
 8010306:	6023      	str	r3, [r4, #0]
 8010308:	f04f 0800 	mov.w	r8, #0
 801030c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801030e:	2b00      	cmp	r3, #0
 8010310:	f43f aded 	beq.w	800feee <_strtod_l+0x76>
 8010314:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010316:	4620      	mov	r0, r4
 8010318:	f7ff f924 	bl	800f564 <_Bfree>
 801031c:	9905      	ldr	r1, [sp, #20]
 801031e:	4620      	mov	r0, r4
 8010320:	f7ff f920 	bl	800f564 <_Bfree>
 8010324:	4659      	mov	r1, fp
 8010326:	4620      	mov	r0, r4
 8010328:	f7ff f91c 	bl	800f564 <_Bfree>
 801032c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801032e:	4620      	mov	r0, r4
 8010330:	f7ff f918 	bl	800f564 <_Bfree>
 8010334:	4629      	mov	r1, r5
 8010336:	4620      	mov	r0, r4
 8010338:	f7ff f914 	bl	800f564 <_Bfree>
 801033c:	e5d7      	b.n	800feee <_strtod_l+0x76>
 801033e:	4b32      	ldr	r3, [pc, #200]	; (8010408 <_strtod_l+0x590>)
 8010340:	9304      	str	r3, [sp, #16]
 8010342:	2300      	movs	r3, #0
 8010344:	112d      	asrs	r5, r5, #4
 8010346:	4640      	mov	r0, r8
 8010348:	4649      	mov	r1, r9
 801034a:	469a      	mov	sl, r3
 801034c:	2d01      	cmp	r5, #1
 801034e:	dc21      	bgt.n	8010394 <_strtod_l+0x51c>
 8010350:	b10b      	cbz	r3, 8010356 <_strtod_l+0x4de>
 8010352:	4680      	mov	r8, r0
 8010354:	4689      	mov	r9, r1
 8010356:	492c      	ldr	r1, [pc, #176]	; (8010408 <_strtod_l+0x590>)
 8010358:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801035c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010360:	4642      	mov	r2, r8
 8010362:	464b      	mov	r3, r9
 8010364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010368:	f7f0 f946 	bl	80005f8 <__aeabi_dmul>
 801036c:	4b27      	ldr	r3, [pc, #156]	; (801040c <_strtod_l+0x594>)
 801036e:	460a      	mov	r2, r1
 8010370:	400b      	ands	r3, r1
 8010372:	4927      	ldr	r1, [pc, #156]	; (8010410 <_strtod_l+0x598>)
 8010374:	428b      	cmp	r3, r1
 8010376:	4680      	mov	r8, r0
 8010378:	d8be      	bhi.n	80102f8 <_strtod_l+0x480>
 801037a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801037e:	428b      	cmp	r3, r1
 8010380:	bf86      	itte	hi
 8010382:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8010414 <_strtod_l+0x59c>
 8010386:	f04f 38ff 	movhi.w	r8, #4294967295
 801038a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801038e:	2300      	movs	r3, #0
 8010390:	9304      	str	r3, [sp, #16]
 8010392:	e07b      	b.n	801048c <_strtod_l+0x614>
 8010394:	07ea      	lsls	r2, r5, #31
 8010396:	d505      	bpl.n	80103a4 <_strtod_l+0x52c>
 8010398:	9b04      	ldr	r3, [sp, #16]
 801039a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039e:	f7f0 f92b 	bl	80005f8 <__aeabi_dmul>
 80103a2:	2301      	movs	r3, #1
 80103a4:	9a04      	ldr	r2, [sp, #16]
 80103a6:	3208      	adds	r2, #8
 80103a8:	f10a 0a01 	add.w	sl, sl, #1
 80103ac:	106d      	asrs	r5, r5, #1
 80103ae:	9204      	str	r2, [sp, #16]
 80103b0:	e7cc      	b.n	801034c <_strtod_l+0x4d4>
 80103b2:	d0ec      	beq.n	801038e <_strtod_l+0x516>
 80103b4:	426d      	negs	r5, r5
 80103b6:	f015 020f 	ands.w	r2, r5, #15
 80103ba:	d00a      	beq.n	80103d2 <_strtod_l+0x55a>
 80103bc:	4b11      	ldr	r3, [pc, #68]	; (8010404 <_strtod_l+0x58c>)
 80103be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103c2:	4640      	mov	r0, r8
 80103c4:	4649      	mov	r1, r9
 80103c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ca:	f7f0 fa3f 	bl	800084c <__aeabi_ddiv>
 80103ce:	4680      	mov	r8, r0
 80103d0:	4689      	mov	r9, r1
 80103d2:	112d      	asrs	r5, r5, #4
 80103d4:	d0db      	beq.n	801038e <_strtod_l+0x516>
 80103d6:	2d1f      	cmp	r5, #31
 80103d8:	dd1e      	ble.n	8010418 <_strtod_l+0x5a0>
 80103da:	2500      	movs	r5, #0
 80103dc:	46ab      	mov	fp, r5
 80103de:	9509      	str	r5, [sp, #36]	; 0x24
 80103e0:	9505      	str	r5, [sp, #20]
 80103e2:	2322      	movs	r3, #34	; 0x22
 80103e4:	f04f 0800 	mov.w	r8, #0
 80103e8:	f04f 0900 	mov.w	r9, #0
 80103ec:	6023      	str	r3, [r4, #0]
 80103ee:	e78d      	b.n	801030c <_strtod_l+0x494>
 80103f0:	08013dfd 	.word	0x08013dfd
 80103f4:	08014024 	.word	0x08014024
 80103f8:	08013df5 	.word	0x08013df5
 80103fc:	08013e2a 	.word	0x08013e2a
 8010400:	080141d0 	.word	0x080141d0
 8010404:	08013f38 	.word	0x08013f38
 8010408:	08013f10 	.word	0x08013f10
 801040c:	7ff00000 	.word	0x7ff00000
 8010410:	7ca00000 	.word	0x7ca00000
 8010414:	7fefffff 	.word	0x7fefffff
 8010418:	f015 0310 	ands.w	r3, r5, #16
 801041c:	bf18      	it	ne
 801041e:	236a      	movne	r3, #106	; 0x6a
 8010420:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80107c4 <_strtod_l+0x94c>
 8010424:	9304      	str	r3, [sp, #16]
 8010426:	4640      	mov	r0, r8
 8010428:	4649      	mov	r1, r9
 801042a:	2300      	movs	r3, #0
 801042c:	07ea      	lsls	r2, r5, #31
 801042e:	d504      	bpl.n	801043a <_strtod_l+0x5c2>
 8010430:	e9da 2300 	ldrd	r2, r3, [sl]
 8010434:	f7f0 f8e0 	bl	80005f8 <__aeabi_dmul>
 8010438:	2301      	movs	r3, #1
 801043a:	106d      	asrs	r5, r5, #1
 801043c:	f10a 0a08 	add.w	sl, sl, #8
 8010440:	d1f4      	bne.n	801042c <_strtod_l+0x5b4>
 8010442:	b10b      	cbz	r3, 8010448 <_strtod_l+0x5d0>
 8010444:	4680      	mov	r8, r0
 8010446:	4689      	mov	r9, r1
 8010448:	9b04      	ldr	r3, [sp, #16]
 801044a:	b1bb      	cbz	r3, 801047c <_strtod_l+0x604>
 801044c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010450:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010454:	2b00      	cmp	r3, #0
 8010456:	4649      	mov	r1, r9
 8010458:	dd10      	ble.n	801047c <_strtod_l+0x604>
 801045a:	2b1f      	cmp	r3, #31
 801045c:	f340 811e 	ble.w	801069c <_strtod_l+0x824>
 8010460:	2b34      	cmp	r3, #52	; 0x34
 8010462:	bfde      	ittt	le
 8010464:	f04f 33ff 	movle.w	r3, #4294967295
 8010468:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801046c:	4093      	lslle	r3, r2
 801046e:	f04f 0800 	mov.w	r8, #0
 8010472:	bfcc      	ite	gt
 8010474:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010478:	ea03 0901 	andle.w	r9, r3, r1
 801047c:	2200      	movs	r2, #0
 801047e:	2300      	movs	r3, #0
 8010480:	4640      	mov	r0, r8
 8010482:	4649      	mov	r1, r9
 8010484:	f7f0 fb20 	bl	8000ac8 <__aeabi_dcmpeq>
 8010488:	2800      	cmp	r0, #0
 801048a:	d1a6      	bne.n	80103da <_strtod_l+0x562>
 801048c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801048e:	9300      	str	r3, [sp, #0]
 8010490:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010492:	4633      	mov	r3, r6
 8010494:	465a      	mov	r2, fp
 8010496:	4620      	mov	r0, r4
 8010498:	f7ff f8cc 	bl	800f634 <__s2b>
 801049c:	9009      	str	r0, [sp, #36]	; 0x24
 801049e:	2800      	cmp	r0, #0
 80104a0:	f43f af2a 	beq.w	80102f8 <_strtod_l+0x480>
 80104a4:	9a08      	ldr	r2, [sp, #32]
 80104a6:	9b05      	ldr	r3, [sp, #20]
 80104a8:	2a00      	cmp	r2, #0
 80104aa:	eba3 0307 	sub.w	r3, r3, r7
 80104ae:	bfa8      	it	ge
 80104b0:	2300      	movge	r3, #0
 80104b2:	930c      	str	r3, [sp, #48]	; 0x30
 80104b4:	2500      	movs	r5, #0
 80104b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80104ba:	9312      	str	r3, [sp, #72]	; 0x48
 80104bc:	46ab      	mov	fp, r5
 80104be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104c0:	4620      	mov	r0, r4
 80104c2:	6859      	ldr	r1, [r3, #4]
 80104c4:	f7ff f80e 	bl	800f4e4 <_Balloc>
 80104c8:	9005      	str	r0, [sp, #20]
 80104ca:	2800      	cmp	r0, #0
 80104cc:	f43f af18 	beq.w	8010300 <_strtod_l+0x488>
 80104d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104d2:	691a      	ldr	r2, [r3, #16]
 80104d4:	3202      	adds	r2, #2
 80104d6:	f103 010c 	add.w	r1, r3, #12
 80104da:	0092      	lsls	r2, r2, #2
 80104dc:	300c      	adds	r0, #12
 80104de:	f7fe f872 	bl	800e5c6 <memcpy>
 80104e2:	ec49 8b10 	vmov	d0, r8, r9
 80104e6:	aa18      	add	r2, sp, #96	; 0x60
 80104e8:	a917      	add	r1, sp, #92	; 0x5c
 80104ea:	4620      	mov	r0, r4
 80104ec:	f7ff fbd6 	bl	800fc9c <__d2b>
 80104f0:	ec49 8b18 	vmov	d8, r8, r9
 80104f4:	9016      	str	r0, [sp, #88]	; 0x58
 80104f6:	2800      	cmp	r0, #0
 80104f8:	f43f af02 	beq.w	8010300 <_strtod_l+0x488>
 80104fc:	2101      	movs	r1, #1
 80104fe:	4620      	mov	r0, r4
 8010500:	f7ff f930 	bl	800f764 <__i2b>
 8010504:	4683      	mov	fp, r0
 8010506:	2800      	cmp	r0, #0
 8010508:	f43f aefa 	beq.w	8010300 <_strtod_l+0x488>
 801050c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801050e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010510:	2e00      	cmp	r6, #0
 8010512:	bfab      	itete	ge
 8010514:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8010516:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010518:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801051a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801051e:	bfac      	ite	ge
 8010520:	eb06 0a03 	addge.w	sl, r6, r3
 8010524:	1b9f      	sublt	r7, r3, r6
 8010526:	9b04      	ldr	r3, [sp, #16]
 8010528:	1af6      	subs	r6, r6, r3
 801052a:	4416      	add	r6, r2
 801052c:	4ba0      	ldr	r3, [pc, #640]	; (80107b0 <_strtod_l+0x938>)
 801052e:	3e01      	subs	r6, #1
 8010530:	429e      	cmp	r6, r3
 8010532:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010536:	f280 80c4 	bge.w	80106c2 <_strtod_l+0x84a>
 801053a:	1b9b      	subs	r3, r3, r6
 801053c:	2b1f      	cmp	r3, #31
 801053e:	eba2 0203 	sub.w	r2, r2, r3
 8010542:	f04f 0101 	mov.w	r1, #1
 8010546:	f300 80b0 	bgt.w	80106aa <_strtod_l+0x832>
 801054a:	fa01 f303 	lsl.w	r3, r1, r3
 801054e:	930e      	str	r3, [sp, #56]	; 0x38
 8010550:	2300      	movs	r3, #0
 8010552:	930d      	str	r3, [sp, #52]	; 0x34
 8010554:	eb0a 0602 	add.w	r6, sl, r2
 8010558:	9b04      	ldr	r3, [sp, #16]
 801055a:	45b2      	cmp	sl, r6
 801055c:	4417      	add	r7, r2
 801055e:	441f      	add	r7, r3
 8010560:	4653      	mov	r3, sl
 8010562:	bfa8      	it	ge
 8010564:	4633      	movge	r3, r6
 8010566:	42bb      	cmp	r3, r7
 8010568:	bfa8      	it	ge
 801056a:	463b      	movge	r3, r7
 801056c:	2b00      	cmp	r3, #0
 801056e:	bfc2      	ittt	gt
 8010570:	1af6      	subgt	r6, r6, r3
 8010572:	1aff      	subgt	r7, r7, r3
 8010574:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801057a:	2b00      	cmp	r3, #0
 801057c:	dd17      	ble.n	80105ae <_strtod_l+0x736>
 801057e:	4659      	mov	r1, fp
 8010580:	461a      	mov	r2, r3
 8010582:	4620      	mov	r0, r4
 8010584:	f7ff f9ae 	bl	800f8e4 <__pow5mult>
 8010588:	4683      	mov	fp, r0
 801058a:	2800      	cmp	r0, #0
 801058c:	f43f aeb8 	beq.w	8010300 <_strtod_l+0x488>
 8010590:	4601      	mov	r1, r0
 8010592:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010594:	4620      	mov	r0, r4
 8010596:	f7ff f8fb 	bl	800f790 <__multiply>
 801059a:	900b      	str	r0, [sp, #44]	; 0x2c
 801059c:	2800      	cmp	r0, #0
 801059e:	f43f aeaf 	beq.w	8010300 <_strtod_l+0x488>
 80105a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80105a4:	4620      	mov	r0, r4
 80105a6:	f7fe ffdd 	bl	800f564 <_Bfree>
 80105aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105ac:	9316      	str	r3, [sp, #88]	; 0x58
 80105ae:	2e00      	cmp	r6, #0
 80105b0:	f300 808c 	bgt.w	80106cc <_strtod_l+0x854>
 80105b4:	9b08      	ldr	r3, [sp, #32]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	dd08      	ble.n	80105cc <_strtod_l+0x754>
 80105ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80105bc:	9905      	ldr	r1, [sp, #20]
 80105be:	4620      	mov	r0, r4
 80105c0:	f7ff f990 	bl	800f8e4 <__pow5mult>
 80105c4:	9005      	str	r0, [sp, #20]
 80105c6:	2800      	cmp	r0, #0
 80105c8:	f43f ae9a 	beq.w	8010300 <_strtod_l+0x488>
 80105cc:	2f00      	cmp	r7, #0
 80105ce:	dd08      	ble.n	80105e2 <_strtod_l+0x76a>
 80105d0:	9905      	ldr	r1, [sp, #20]
 80105d2:	463a      	mov	r2, r7
 80105d4:	4620      	mov	r0, r4
 80105d6:	f7ff f9df 	bl	800f998 <__lshift>
 80105da:	9005      	str	r0, [sp, #20]
 80105dc:	2800      	cmp	r0, #0
 80105de:	f43f ae8f 	beq.w	8010300 <_strtod_l+0x488>
 80105e2:	f1ba 0f00 	cmp.w	sl, #0
 80105e6:	dd08      	ble.n	80105fa <_strtod_l+0x782>
 80105e8:	4659      	mov	r1, fp
 80105ea:	4652      	mov	r2, sl
 80105ec:	4620      	mov	r0, r4
 80105ee:	f7ff f9d3 	bl	800f998 <__lshift>
 80105f2:	4683      	mov	fp, r0
 80105f4:	2800      	cmp	r0, #0
 80105f6:	f43f ae83 	beq.w	8010300 <_strtod_l+0x488>
 80105fa:	9a05      	ldr	r2, [sp, #20]
 80105fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80105fe:	4620      	mov	r0, r4
 8010600:	f7ff fa52 	bl	800faa8 <__mdiff>
 8010604:	4605      	mov	r5, r0
 8010606:	2800      	cmp	r0, #0
 8010608:	f43f ae7a 	beq.w	8010300 <_strtod_l+0x488>
 801060c:	68c3      	ldr	r3, [r0, #12]
 801060e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010610:	2300      	movs	r3, #0
 8010612:	60c3      	str	r3, [r0, #12]
 8010614:	4659      	mov	r1, fp
 8010616:	f7ff fa2b 	bl	800fa70 <__mcmp>
 801061a:	2800      	cmp	r0, #0
 801061c:	da60      	bge.n	80106e0 <_strtod_l+0x868>
 801061e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010620:	ea53 0308 	orrs.w	r3, r3, r8
 8010624:	f040 8084 	bne.w	8010730 <_strtod_l+0x8b8>
 8010628:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801062c:	2b00      	cmp	r3, #0
 801062e:	d17f      	bne.n	8010730 <_strtod_l+0x8b8>
 8010630:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010634:	0d1b      	lsrs	r3, r3, #20
 8010636:	051b      	lsls	r3, r3, #20
 8010638:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801063c:	d978      	bls.n	8010730 <_strtod_l+0x8b8>
 801063e:	696b      	ldr	r3, [r5, #20]
 8010640:	b913      	cbnz	r3, 8010648 <_strtod_l+0x7d0>
 8010642:	692b      	ldr	r3, [r5, #16]
 8010644:	2b01      	cmp	r3, #1
 8010646:	dd73      	ble.n	8010730 <_strtod_l+0x8b8>
 8010648:	4629      	mov	r1, r5
 801064a:	2201      	movs	r2, #1
 801064c:	4620      	mov	r0, r4
 801064e:	f7ff f9a3 	bl	800f998 <__lshift>
 8010652:	4659      	mov	r1, fp
 8010654:	4605      	mov	r5, r0
 8010656:	f7ff fa0b 	bl	800fa70 <__mcmp>
 801065a:	2800      	cmp	r0, #0
 801065c:	dd68      	ble.n	8010730 <_strtod_l+0x8b8>
 801065e:	9904      	ldr	r1, [sp, #16]
 8010660:	4a54      	ldr	r2, [pc, #336]	; (80107b4 <_strtod_l+0x93c>)
 8010662:	464b      	mov	r3, r9
 8010664:	2900      	cmp	r1, #0
 8010666:	f000 8084 	beq.w	8010772 <_strtod_l+0x8fa>
 801066a:	ea02 0109 	and.w	r1, r2, r9
 801066e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010672:	dc7e      	bgt.n	8010772 <_strtod_l+0x8fa>
 8010674:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010678:	f77f aeb3 	ble.w	80103e2 <_strtod_l+0x56a>
 801067c:	4b4e      	ldr	r3, [pc, #312]	; (80107b8 <_strtod_l+0x940>)
 801067e:	4640      	mov	r0, r8
 8010680:	4649      	mov	r1, r9
 8010682:	2200      	movs	r2, #0
 8010684:	f7ef ffb8 	bl	80005f8 <__aeabi_dmul>
 8010688:	4b4a      	ldr	r3, [pc, #296]	; (80107b4 <_strtod_l+0x93c>)
 801068a:	400b      	ands	r3, r1
 801068c:	4680      	mov	r8, r0
 801068e:	4689      	mov	r9, r1
 8010690:	2b00      	cmp	r3, #0
 8010692:	f47f ae3f 	bne.w	8010314 <_strtod_l+0x49c>
 8010696:	2322      	movs	r3, #34	; 0x22
 8010698:	6023      	str	r3, [r4, #0]
 801069a:	e63b      	b.n	8010314 <_strtod_l+0x49c>
 801069c:	f04f 32ff 	mov.w	r2, #4294967295
 80106a0:	fa02 f303 	lsl.w	r3, r2, r3
 80106a4:	ea03 0808 	and.w	r8, r3, r8
 80106a8:	e6e8      	b.n	801047c <_strtod_l+0x604>
 80106aa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80106ae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80106b2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80106b6:	36e2      	adds	r6, #226	; 0xe2
 80106b8:	fa01 f306 	lsl.w	r3, r1, r6
 80106bc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80106c0:	e748      	b.n	8010554 <_strtod_l+0x6dc>
 80106c2:	2100      	movs	r1, #0
 80106c4:	2301      	movs	r3, #1
 80106c6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80106ca:	e743      	b.n	8010554 <_strtod_l+0x6dc>
 80106cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80106ce:	4632      	mov	r2, r6
 80106d0:	4620      	mov	r0, r4
 80106d2:	f7ff f961 	bl	800f998 <__lshift>
 80106d6:	9016      	str	r0, [sp, #88]	; 0x58
 80106d8:	2800      	cmp	r0, #0
 80106da:	f47f af6b 	bne.w	80105b4 <_strtod_l+0x73c>
 80106de:	e60f      	b.n	8010300 <_strtod_l+0x488>
 80106e0:	46ca      	mov	sl, r9
 80106e2:	d171      	bne.n	80107c8 <_strtod_l+0x950>
 80106e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80106e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80106ea:	b352      	cbz	r2, 8010742 <_strtod_l+0x8ca>
 80106ec:	4a33      	ldr	r2, [pc, #204]	; (80107bc <_strtod_l+0x944>)
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d12a      	bne.n	8010748 <_strtod_l+0x8d0>
 80106f2:	9b04      	ldr	r3, [sp, #16]
 80106f4:	4641      	mov	r1, r8
 80106f6:	b1fb      	cbz	r3, 8010738 <_strtod_l+0x8c0>
 80106f8:	4b2e      	ldr	r3, [pc, #184]	; (80107b4 <_strtod_l+0x93c>)
 80106fa:	ea09 0303 	and.w	r3, r9, r3
 80106fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010702:	f04f 32ff 	mov.w	r2, #4294967295
 8010706:	d81a      	bhi.n	801073e <_strtod_l+0x8c6>
 8010708:	0d1b      	lsrs	r3, r3, #20
 801070a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801070e:	fa02 f303 	lsl.w	r3, r2, r3
 8010712:	4299      	cmp	r1, r3
 8010714:	d118      	bne.n	8010748 <_strtod_l+0x8d0>
 8010716:	4b2a      	ldr	r3, [pc, #168]	; (80107c0 <_strtod_l+0x948>)
 8010718:	459a      	cmp	sl, r3
 801071a:	d102      	bne.n	8010722 <_strtod_l+0x8aa>
 801071c:	3101      	adds	r1, #1
 801071e:	f43f adef 	beq.w	8010300 <_strtod_l+0x488>
 8010722:	4b24      	ldr	r3, [pc, #144]	; (80107b4 <_strtod_l+0x93c>)
 8010724:	ea0a 0303 	and.w	r3, sl, r3
 8010728:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801072c:	f04f 0800 	mov.w	r8, #0
 8010730:	9b04      	ldr	r3, [sp, #16]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d1a2      	bne.n	801067c <_strtod_l+0x804>
 8010736:	e5ed      	b.n	8010314 <_strtod_l+0x49c>
 8010738:	f04f 33ff 	mov.w	r3, #4294967295
 801073c:	e7e9      	b.n	8010712 <_strtod_l+0x89a>
 801073e:	4613      	mov	r3, r2
 8010740:	e7e7      	b.n	8010712 <_strtod_l+0x89a>
 8010742:	ea53 0308 	orrs.w	r3, r3, r8
 8010746:	d08a      	beq.n	801065e <_strtod_l+0x7e6>
 8010748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801074a:	b1e3      	cbz	r3, 8010786 <_strtod_l+0x90e>
 801074c:	ea13 0f0a 	tst.w	r3, sl
 8010750:	d0ee      	beq.n	8010730 <_strtod_l+0x8b8>
 8010752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010754:	9a04      	ldr	r2, [sp, #16]
 8010756:	4640      	mov	r0, r8
 8010758:	4649      	mov	r1, r9
 801075a:	b1c3      	cbz	r3, 801078e <_strtod_l+0x916>
 801075c:	f7ff fb6f 	bl	800fe3e <sulp>
 8010760:	4602      	mov	r2, r0
 8010762:	460b      	mov	r3, r1
 8010764:	ec51 0b18 	vmov	r0, r1, d8
 8010768:	f7ef fd90 	bl	800028c <__adddf3>
 801076c:	4680      	mov	r8, r0
 801076e:	4689      	mov	r9, r1
 8010770:	e7de      	b.n	8010730 <_strtod_l+0x8b8>
 8010772:	4013      	ands	r3, r2
 8010774:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010778:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801077c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010780:	f04f 38ff 	mov.w	r8, #4294967295
 8010784:	e7d4      	b.n	8010730 <_strtod_l+0x8b8>
 8010786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010788:	ea13 0f08 	tst.w	r3, r8
 801078c:	e7e0      	b.n	8010750 <_strtod_l+0x8d8>
 801078e:	f7ff fb56 	bl	800fe3e <sulp>
 8010792:	4602      	mov	r2, r0
 8010794:	460b      	mov	r3, r1
 8010796:	ec51 0b18 	vmov	r0, r1, d8
 801079a:	f7ef fd75 	bl	8000288 <__aeabi_dsub>
 801079e:	2200      	movs	r2, #0
 80107a0:	2300      	movs	r3, #0
 80107a2:	4680      	mov	r8, r0
 80107a4:	4689      	mov	r9, r1
 80107a6:	f7f0 f98f 	bl	8000ac8 <__aeabi_dcmpeq>
 80107aa:	2800      	cmp	r0, #0
 80107ac:	d0c0      	beq.n	8010730 <_strtod_l+0x8b8>
 80107ae:	e618      	b.n	80103e2 <_strtod_l+0x56a>
 80107b0:	fffffc02 	.word	0xfffffc02
 80107b4:	7ff00000 	.word	0x7ff00000
 80107b8:	39500000 	.word	0x39500000
 80107bc:	000fffff 	.word	0x000fffff
 80107c0:	7fefffff 	.word	0x7fefffff
 80107c4:	08014038 	.word	0x08014038
 80107c8:	4659      	mov	r1, fp
 80107ca:	4628      	mov	r0, r5
 80107cc:	f7ff fac0 	bl	800fd50 <__ratio>
 80107d0:	ec57 6b10 	vmov	r6, r7, d0
 80107d4:	ee10 0a10 	vmov	r0, s0
 80107d8:	2200      	movs	r2, #0
 80107da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80107de:	4639      	mov	r1, r7
 80107e0:	f7f0 f986 	bl	8000af0 <__aeabi_dcmple>
 80107e4:	2800      	cmp	r0, #0
 80107e6:	d071      	beq.n	80108cc <_strtod_l+0xa54>
 80107e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d17c      	bne.n	80108e8 <_strtod_l+0xa70>
 80107ee:	f1b8 0f00 	cmp.w	r8, #0
 80107f2:	d15a      	bne.n	80108aa <_strtod_l+0xa32>
 80107f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d15d      	bne.n	80108b8 <_strtod_l+0xa40>
 80107fc:	4b90      	ldr	r3, [pc, #576]	; (8010a40 <_strtod_l+0xbc8>)
 80107fe:	2200      	movs	r2, #0
 8010800:	4630      	mov	r0, r6
 8010802:	4639      	mov	r1, r7
 8010804:	f7f0 f96a 	bl	8000adc <__aeabi_dcmplt>
 8010808:	2800      	cmp	r0, #0
 801080a:	d15c      	bne.n	80108c6 <_strtod_l+0xa4e>
 801080c:	4630      	mov	r0, r6
 801080e:	4639      	mov	r1, r7
 8010810:	4b8c      	ldr	r3, [pc, #560]	; (8010a44 <_strtod_l+0xbcc>)
 8010812:	2200      	movs	r2, #0
 8010814:	f7ef fef0 	bl	80005f8 <__aeabi_dmul>
 8010818:	4606      	mov	r6, r0
 801081a:	460f      	mov	r7, r1
 801081c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010820:	9606      	str	r6, [sp, #24]
 8010822:	9307      	str	r3, [sp, #28]
 8010824:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010828:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801082c:	4b86      	ldr	r3, [pc, #536]	; (8010a48 <_strtod_l+0xbd0>)
 801082e:	ea0a 0303 	and.w	r3, sl, r3
 8010832:	930d      	str	r3, [sp, #52]	; 0x34
 8010834:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010836:	4b85      	ldr	r3, [pc, #532]	; (8010a4c <_strtod_l+0xbd4>)
 8010838:	429a      	cmp	r2, r3
 801083a:	f040 8090 	bne.w	801095e <_strtod_l+0xae6>
 801083e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8010842:	ec49 8b10 	vmov	d0, r8, r9
 8010846:	f7ff f9b9 	bl	800fbbc <__ulp>
 801084a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801084e:	ec51 0b10 	vmov	r0, r1, d0
 8010852:	f7ef fed1 	bl	80005f8 <__aeabi_dmul>
 8010856:	4642      	mov	r2, r8
 8010858:	464b      	mov	r3, r9
 801085a:	f7ef fd17 	bl	800028c <__adddf3>
 801085e:	460b      	mov	r3, r1
 8010860:	4979      	ldr	r1, [pc, #484]	; (8010a48 <_strtod_l+0xbd0>)
 8010862:	4a7b      	ldr	r2, [pc, #492]	; (8010a50 <_strtod_l+0xbd8>)
 8010864:	4019      	ands	r1, r3
 8010866:	4291      	cmp	r1, r2
 8010868:	4680      	mov	r8, r0
 801086a:	d944      	bls.n	80108f6 <_strtod_l+0xa7e>
 801086c:	ee18 2a90 	vmov	r2, s17
 8010870:	4b78      	ldr	r3, [pc, #480]	; (8010a54 <_strtod_l+0xbdc>)
 8010872:	429a      	cmp	r2, r3
 8010874:	d104      	bne.n	8010880 <_strtod_l+0xa08>
 8010876:	ee18 3a10 	vmov	r3, s16
 801087a:	3301      	adds	r3, #1
 801087c:	f43f ad40 	beq.w	8010300 <_strtod_l+0x488>
 8010880:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8010a54 <_strtod_l+0xbdc>
 8010884:	f04f 38ff 	mov.w	r8, #4294967295
 8010888:	9916      	ldr	r1, [sp, #88]	; 0x58
 801088a:	4620      	mov	r0, r4
 801088c:	f7fe fe6a 	bl	800f564 <_Bfree>
 8010890:	9905      	ldr	r1, [sp, #20]
 8010892:	4620      	mov	r0, r4
 8010894:	f7fe fe66 	bl	800f564 <_Bfree>
 8010898:	4659      	mov	r1, fp
 801089a:	4620      	mov	r0, r4
 801089c:	f7fe fe62 	bl	800f564 <_Bfree>
 80108a0:	4629      	mov	r1, r5
 80108a2:	4620      	mov	r0, r4
 80108a4:	f7fe fe5e 	bl	800f564 <_Bfree>
 80108a8:	e609      	b.n	80104be <_strtod_l+0x646>
 80108aa:	f1b8 0f01 	cmp.w	r8, #1
 80108ae:	d103      	bne.n	80108b8 <_strtod_l+0xa40>
 80108b0:	f1b9 0f00 	cmp.w	r9, #0
 80108b4:	f43f ad95 	beq.w	80103e2 <_strtod_l+0x56a>
 80108b8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8010a10 <_strtod_l+0xb98>
 80108bc:	4f60      	ldr	r7, [pc, #384]	; (8010a40 <_strtod_l+0xbc8>)
 80108be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80108c2:	2600      	movs	r6, #0
 80108c4:	e7ae      	b.n	8010824 <_strtod_l+0x9ac>
 80108c6:	4f5f      	ldr	r7, [pc, #380]	; (8010a44 <_strtod_l+0xbcc>)
 80108c8:	2600      	movs	r6, #0
 80108ca:	e7a7      	b.n	801081c <_strtod_l+0x9a4>
 80108cc:	4b5d      	ldr	r3, [pc, #372]	; (8010a44 <_strtod_l+0xbcc>)
 80108ce:	4630      	mov	r0, r6
 80108d0:	4639      	mov	r1, r7
 80108d2:	2200      	movs	r2, #0
 80108d4:	f7ef fe90 	bl	80005f8 <__aeabi_dmul>
 80108d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108da:	4606      	mov	r6, r0
 80108dc:	460f      	mov	r7, r1
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d09c      	beq.n	801081c <_strtod_l+0x9a4>
 80108e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80108e6:	e79d      	b.n	8010824 <_strtod_l+0x9ac>
 80108e8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010a18 <_strtod_l+0xba0>
 80108ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80108f0:	ec57 6b17 	vmov	r6, r7, d7
 80108f4:	e796      	b.n	8010824 <_strtod_l+0x9ac>
 80108f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80108fa:	9b04      	ldr	r3, [sp, #16]
 80108fc:	46ca      	mov	sl, r9
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d1c2      	bne.n	8010888 <_strtod_l+0xa10>
 8010902:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010906:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010908:	0d1b      	lsrs	r3, r3, #20
 801090a:	051b      	lsls	r3, r3, #20
 801090c:	429a      	cmp	r2, r3
 801090e:	d1bb      	bne.n	8010888 <_strtod_l+0xa10>
 8010910:	4630      	mov	r0, r6
 8010912:	4639      	mov	r1, r7
 8010914:	f7f0 f9d0 	bl	8000cb8 <__aeabi_d2lz>
 8010918:	f7ef fe40 	bl	800059c <__aeabi_l2d>
 801091c:	4602      	mov	r2, r0
 801091e:	460b      	mov	r3, r1
 8010920:	4630      	mov	r0, r6
 8010922:	4639      	mov	r1, r7
 8010924:	f7ef fcb0 	bl	8000288 <__aeabi_dsub>
 8010928:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801092a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801092e:	ea43 0308 	orr.w	r3, r3, r8
 8010932:	4313      	orrs	r3, r2
 8010934:	4606      	mov	r6, r0
 8010936:	460f      	mov	r7, r1
 8010938:	d054      	beq.n	80109e4 <_strtod_l+0xb6c>
 801093a:	a339      	add	r3, pc, #228	; (adr r3, 8010a20 <_strtod_l+0xba8>)
 801093c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010940:	f7f0 f8cc 	bl	8000adc <__aeabi_dcmplt>
 8010944:	2800      	cmp	r0, #0
 8010946:	f47f ace5 	bne.w	8010314 <_strtod_l+0x49c>
 801094a:	a337      	add	r3, pc, #220	; (adr r3, 8010a28 <_strtod_l+0xbb0>)
 801094c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010950:	4630      	mov	r0, r6
 8010952:	4639      	mov	r1, r7
 8010954:	f7f0 f8e0 	bl	8000b18 <__aeabi_dcmpgt>
 8010958:	2800      	cmp	r0, #0
 801095a:	d095      	beq.n	8010888 <_strtod_l+0xa10>
 801095c:	e4da      	b.n	8010314 <_strtod_l+0x49c>
 801095e:	9b04      	ldr	r3, [sp, #16]
 8010960:	b333      	cbz	r3, 80109b0 <_strtod_l+0xb38>
 8010962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010964:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010968:	d822      	bhi.n	80109b0 <_strtod_l+0xb38>
 801096a:	a331      	add	r3, pc, #196	; (adr r3, 8010a30 <_strtod_l+0xbb8>)
 801096c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010970:	4630      	mov	r0, r6
 8010972:	4639      	mov	r1, r7
 8010974:	f7f0 f8bc 	bl	8000af0 <__aeabi_dcmple>
 8010978:	b1a0      	cbz	r0, 80109a4 <_strtod_l+0xb2c>
 801097a:	4639      	mov	r1, r7
 801097c:	4630      	mov	r0, r6
 801097e:	f7f0 f913 	bl	8000ba8 <__aeabi_d2uiz>
 8010982:	2801      	cmp	r0, #1
 8010984:	bf38      	it	cc
 8010986:	2001      	movcc	r0, #1
 8010988:	f7ef fdbc 	bl	8000504 <__aeabi_ui2d>
 801098c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801098e:	4606      	mov	r6, r0
 8010990:	460f      	mov	r7, r1
 8010992:	bb23      	cbnz	r3, 80109de <_strtod_l+0xb66>
 8010994:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010998:	9010      	str	r0, [sp, #64]	; 0x40
 801099a:	9311      	str	r3, [sp, #68]	; 0x44
 801099c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80109a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80109a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80109a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80109ac:	1a9b      	subs	r3, r3, r2
 80109ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80109b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80109b4:	eeb0 0a48 	vmov.f32	s0, s16
 80109b8:	eef0 0a68 	vmov.f32	s1, s17
 80109bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80109c0:	f7ff f8fc 	bl	800fbbc <__ulp>
 80109c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80109c8:	ec53 2b10 	vmov	r2, r3, d0
 80109cc:	f7ef fe14 	bl	80005f8 <__aeabi_dmul>
 80109d0:	ec53 2b18 	vmov	r2, r3, d8
 80109d4:	f7ef fc5a 	bl	800028c <__adddf3>
 80109d8:	4680      	mov	r8, r0
 80109da:	4689      	mov	r9, r1
 80109dc:	e78d      	b.n	80108fa <_strtod_l+0xa82>
 80109de:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80109e2:	e7db      	b.n	801099c <_strtod_l+0xb24>
 80109e4:	a314      	add	r3, pc, #80	; (adr r3, 8010a38 <_strtod_l+0xbc0>)
 80109e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ea:	f7f0 f877 	bl	8000adc <__aeabi_dcmplt>
 80109ee:	e7b3      	b.n	8010958 <_strtod_l+0xae0>
 80109f0:	2300      	movs	r3, #0
 80109f2:	930a      	str	r3, [sp, #40]	; 0x28
 80109f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80109f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109f8:	6013      	str	r3, [r2, #0]
 80109fa:	f7ff ba7c 	b.w	800fef6 <_strtod_l+0x7e>
 80109fe:	2a65      	cmp	r2, #101	; 0x65
 8010a00:	f43f ab75 	beq.w	80100ee <_strtod_l+0x276>
 8010a04:	2a45      	cmp	r2, #69	; 0x45
 8010a06:	f43f ab72 	beq.w	80100ee <_strtod_l+0x276>
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	f7ff bbaa 	b.w	8010164 <_strtod_l+0x2ec>
 8010a10:	00000000 	.word	0x00000000
 8010a14:	bff00000 	.word	0xbff00000
 8010a18:	00000000 	.word	0x00000000
 8010a1c:	3ff00000 	.word	0x3ff00000
 8010a20:	94a03595 	.word	0x94a03595
 8010a24:	3fdfffff 	.word	0x3fdfffff
 8010a28:	35afe535 	.word	0x35afe535
 8010a2c:	3fe00000 	.word	0x3fe00000
 8010a30:	ffc00000 	.word	0xffc00000
 8010a34:	41dfffff 	.word	0x41dfffff
 8010a38:	94a03595 	.word	0x94a03595
 8010a3c:	3fcfffff 	.word	0x3fcfffff
 8010a40:	3ff00000 	.word	0x3ff00000
 8010a44:	3fe00000 	.word	0x3fe00000
 8010a48:	7ff00000 	.word	0x7ff00000
 8010a4c:	7fe00000 	.word	0x7fe00000
 8010a50:	7c9fffff 	.word	0x7c9fffff
 8010a54:	7fefffff 	.word	0x7fefffff

08010a58 <_strtod_r>:
 8010a58:	4b01      	ldr	r3, [pc, #4]	; (8010a60 <_strtod_r+0x8>)
 8010a5a:	f7ff ba0d 	b.w	800fe78 <_strtod_l>
 8010a5e:	bf00      	nop
 8010a60:	20000134 	.word	0x20000134

08010a64 <_strtol_l.constprop.0>:
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a6a:	d001      	beq.n	8010a70 <_strtol_l.constprop.0+0xc>
 8010a6c:	2b24      	cmp	r3, #36	; 0x24
 8010a6e:	d906      	bls.n	8010a7e <_strtol_l.constprop.0+0x1a>
 8010a70:	f7fd fd74 	bl	800e55c <__errno>
 8010a74:	2316      	movs	r3, #22
 8010a76:	6003      	str	r3, [r0, #0]
 8010a78:	2000      	movs	r0, #0
 8010a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010b64 <_strtol_l.constprop.0+0x100>
 8010a82:	460d      	mov	r5, r1
 8010a84:	462e      	mov	r6, r5
 8010a86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a8a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010a8e:	f017 0708 	ands.w	r7, r7, #8
 8010a92:	d1f7      	bne.n	8010a84 <_strtol_l.constprop.0+0x20>
 8010a94:	2c2d      	cmp	r4, #45	; 0x2d
 8010a96:	d132      	bne.n	8010afe <_strtol_l.constprop.0+0x9a>
 8010a98:	782c      	ldrb	r4, [r5, #0]
 8010a9a:	2701      	movs	r7, #1
 8010a9c:	1cb5      	adds	r5, r6, #2
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d05b      	beq.n	8010b5a <_strtol_l.constprop.0+0xf6>
 8010aa2:	2b10      	cmp	r3, #16
 8010aa4:	d109      	bne.n	8010aba <_strtol_l.constprop.0+0x56>
 8010aa6:	2c30      	cmp	r4, #48	; 0x30
 8010aa8:	d107      	bne.n	8010aba <_strtol_l.constprop.0+0x56>
 8010aaa:	782c      	ldrb	r4, [r5, #0]
 8010aac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010ab0:	2c58      	cmp	r4, #88	; 0x58
 8010ab2:	d14d      	bne.n	8010b50 <_strtol_l.constprop.0+0xec>
 8010ab4:	786c      	ldrb	r4, [r5, #1]
 8010ab6:	2310      	movs	r3, #16
 8010ab8:	3502      	adds	r5, #2
 8010aba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010abe:	f108 38ff 	add.w	r8, r8, #4294967295
 8010ac2:	f04f 0e00 	mov.w	lr, #0
 8010ac6:	fbb8 f9f3 	udiv	r9, r8, r3
 8010aca:	4676      	mov	r6, lr
 8010acc:	fb03 8a19 	mls	sl, r3, r9, r8
 8010ad0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010ad4:	f1bc 0f09 	cmp.w	ip, #9
 8010ad8:	d816      	bhi.n	8010b08 <_strtol_l.constprop.0+0xa4>
 8010ada:	4664      	mov	r4, ip
 8010adc:	42a3      	cmp	r3, r4
 8010ade:	dd24      	ble.n	8010b2a <_strtol_l.constprop.0+0xc6>
 8010ae0:	f1be 3fff 	cmp.w	lr, #4294967295
 8010ae4:	d008      	beq.n	8010af8 <_strtol_l.constprop.0+0x94>
 8010ae6:	45b1      	cmp	r9, r6
 8010ae8:	d31c      	bcc.n	8010b24 <_strtol_l.constprop.0+0xc0>
 8010aea:	d101      	bne.n	8010af0 <_strtol_l.constprop.0+0x8c>
 8010aec:	45a2      	cmp	sl, r4
 8010aee:	db19      	blt.n	8010b24 <_strtol_l.constprop.0+0xc0>
 8010af0:	fb06 4603 	mla	r6, r6, r3, r4
 8010af4:	f04f 0e01 	mov.w	lr, #1
 8010af8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010afc:	e7e8      	b.n	8010ad0 <_strtol_l.constprop.0+0x6c>
 8010afe:	2c2b      	cmp	r4, #43	; 0x2b
 8010b00:	bf04      	itt	eq
 8010b02:	782c      	ldrbeq	r4, [r5, #0]
 8010b04:	1cb5      	addeq	r5, r6, #2
 8010b06:	e7ca      	b.n	8010a9e <_strtol_l.constprop.0+0x3a>
 8010b08:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010b0c:	f1bc 0f19 	cmp.w	ip, #25
 8010b10:	d801      	bhi.n	8010b16 <_strtol_l.constprop.0+0xb2>
 8010b12:	3c37      	subs	r4, #55	; 0x37
 8010b14:	e7e2      	b.n	8010adc <_strtol_l.constprop.0+0x78>
 8010b16:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010b1a:	f1bc 0f19 	cmp.w	ip, #25
 8010b1e:	d804      	bhi.n	8010b2a <_strtol_l.constprop.0+0xc6>
 8010b20:	3c57      	subs	r4, #87	; 0x57
 8010b22:	e7db      	b.n	8010adc <_strtol_l.constprop.0+0x78>
 8010b24:	f04f 3eff 	mov.w	lr, #4294967295
 8010b28:	e7e6      	b.n	8010af8 <_strtol_l.constprop.0+0x94>
 8010b2a:	f1be 3fff 	cmp.w	lr, #4294967295
 8010b2e:	d105      	bne.n	8010b3c <_strtol_l.constprop.0+0xd8>
 8010b30:	2322      	movs	r3, #34	; 0x22
 8010b32:	6003      	str	r3, [r0, #0]
 8010b34:	4646      	mov	r6, r8
 8010b36:	b942      	cbnz	r2, 8010b4a <_strtol_l.constprop.0+0xe6>
 8010b38:	4630      	mov	r0, r6
 8010b3a:	e79e      	b.n	8010a7a <_strtol_l.constprop.0+0x16>
 8010b3c:	b107      	cbz	r7, 8010b40 <_strtol_l.constprop.0+0xdc>
 8010b3e:	4276      	negs	r6, r6
 8010b40:	2a00      	cmp	r2, #0
 8010b42:	d0f9      	beq.n	8010b38 <_strtol_l.constprop.0+0xd4>
 8010b44:	f1be 0f00 	cmp.w	lr, #0
 8010b48:	d000      	beq.n	8010b4c <_strtol_l.constprop.0+0xe8>
 8010b4a:	1e69      	subs	r1, r5, #1
 8010b4c:	6011      	str	r1, [r2, #0]
 8010b4e:	e7f3      	b.n	8010b38 <_strtol_l.constprop.0+0xd4>
 8010b50:	2430      	movs	r4, #48	; 0x30
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d1b1      	bne.n	8010aba <_strtol_l.constprop.0+0x56>
 8010b56:	2308      	movs	r3, #8
 8010b58:	e7af      	b.n	8010aba <_strtol_l.constprop.0+0x56>
 8010b5a:	2c30      	cmp	r4, #48	; 0x30
 8010b5c:	d0a5      	beq.n	8010aaa <_strtol_l.constprop.0+0x46>
 8010b5e:	230a      	movs	r3, #10
 8010b60:	e7ab      	b.n	8010aba <_strtol_l.constprop.0+0x56>
 8010b62:	bf00      	nop
 8010b64:	08014061 	.word	0x08014061

08010b68 <_strtol_r>:
 8010b68:	f7ff bf7c 	b.w	8010a64 <_strtol_l.constprop.0>

08010b6c <__ssputs_r>:
 8010b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b70:	688e      	ldr	r6, [r1, #8]
 8010b72:	461f      	mov	r7, r3
 8010b74:	42be      	cmp	r6, r7
 8010b76:	680b      	ldr	r3, [r1, #0]
 8010b78:	4682      	mov	sl, r0
 8010b7a:	460c      	mov	r4, r1
 8010b7c:	4690      	mov	r8, r2
 8010b7e:	d82c      	bhi.n	8010bda <__ssputs_r+0x6e>
 8010b80:	898a      	ldrh	r2, [r1, #12]
 8010b82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010b86:	d026      	beq.n	8010bd6 <__ssputs_r+0x6a>
 8010b88:	6965      	ldr	r5, [r4, #20]
 8010b8a:	6909      	ldr	r1, [r1, #16]
 8010b8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b90:	eba3 0901 	sub.w	r9, r3, r1
 8010b94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010b98:	1c7b      	adds	r3, r7, #1
 8010b9a:	444b      	add	r3, r9
 8010b9c:	106d      	asrs	r5, r5, #1
 8010b9e:	429d      	cmp	r5, r3
 8010ba0:	bf38      	it	cc
 8010ba2:	461d      	movcc	r5, r3
 8010ba4:	0553      	lsls	r3, r2, #21
 8010ba6:	d527      	bpl.n	8010bf8 <__ssputs_r+0x8c>
 8010ba8:	4629      	mov	r1, r5
 8010baa:	f7fe fc0f 	bl	800f3cc <_malloc_r>
 8010bae:	4606      	mov	r6, r0
 8010bb0:	b360      	cbz	r0, 8010c0c <__ssputs_r+0xa0>
 8010bb2:	6921      	ldr	r1, [r4, #16]
 8010bb4:	464a      	mov	r2, r9
 8010bb6:	f7fd fd06 	bl	800e5c6 <memcpy>
 8010bba:	89a3      	ldrh	r3, [r4, #12]
 8010bbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bc4:	81a3      	strh	r3, [r4, #12]
 8010bc6:	6126      	str	r6, [r4, #16]
 8010bc8:	6165      	str	r5, [r4, #20]
 8010bca:	444e      	add	r6, r9
 8010bcc:	eba5 0509 	sub.w	r5, r5, r9
 8010bd0:	6026      	str	r6, [r4, #0]
 8010bd2:	60a5      	str	r5, [r4, #8]
 8010bd4:	463e      	mov	r6, r7
 8010bd6:	42be      	cmp	r6, r7
 8010bd8:	d900      	bls.n	8010bdc <__ssputs_r+0x70>
 8010bda:	463e      	mov	r6, r7
 8010bdc:	6820      	ldr	r0, [r4, #0]
 8010bde:	4632      	mov	r2, r6
 8010be0:	4641      	mov	r1, r8
 8010be2:	f000 fd5c 	bl	801169e <memmove>
 8010be6:	68a3      	ldr	r3, [r4, #8]
 8010be8:	1b9b      	subs	r3, r3, r6
 8010bea:	60a3      	str	r3, [r4, #8]
 8010bec:	6823      	ldr	r3, [r4, #0]
 8010bee:	4433      	add	r3, r6
 8010bf0:	6023      	str	r3, [r4, #0]
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bf8:	462a      	mov	r2, r5
 8010bfa:	f001 f932 	bl	8011e62 <_realloc_r>
 8010bfe:	4606      	mov	r6, r0
 8010c00:	2800      	cmp	r0, #0
 8010c02:	d1e0      	bne.n	8010bc6 <__ssputs_r+0x5a>
 8010c04:	6921      	ldr	r1, [r4, #16]
 8010c06:	4650      	mov	r0, sl
 8010c08:	f7fe fb6c 	bl	800f2e4 <_free_r>
 8010c0c:	230c      	movs	r3, #12
 8010c0e:	f8ca 3000 	str.w	r3, [sl]
 8010c12:	89a3      	ldrh	r3, [r4, #12]
 8010c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c18:	81a3      	strh	r3, [r4, #12]
 8010c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c1e:	e7e9      	b.n	8010bf4 <__ssputs_r+0x88>

08010c20 <_svfiprintf_r>:
 8010c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c24:	4698      	mov	r8, r3
 8010c26:	898b      	ldrh	r3, [r1, #12]
 8010c28:	061b      	lsls	r3, r3, #24
 8010c2a:	b09d      	sub	sp, #116	; 0x74
 8010c2c:	4607      	mov	r7, r0
 8010c2e:	460d      	mov	r5, r1
 8010c30:	4614      	mov	r4, r2
 8010c32:	d50e      	bpl.n	8010c52 <_svfiprintf_r+0x32>
 8010c34:	690b      	ldr	r3, [r1, #16]
 8010c36:	b963      	cbnz	r3, 8010c52 <_svfiprintf_r+0x32>
 8010c38:	2140      	movs	r1, #64	; 0x40
 8010c3a:	f7fe fbc7 	bl	800f3cc <_malloc_r>
 8010c3e:	6028      	str	r0, [r5, #0]
 8010c40:	6128      	str	r0, [r5, #16]
 8010c42:	b920      	cbnz	r0, 8010c4e <_svfiprintf_r+0x2e>
 8010c44:	230c      	movs	r3, #12
 8010c46:	603b      	str	r3, [r7, #0]
 8010c48:	f04f 30ff 	mov.w	r0, #4294967295
 8010c4c:	e0d0      	b.n	8010df0 <_svfiprintf_r+0x1d0>
 8010c4e:	2340      	movs	r3, #64	; 0x40
 8010c50:	616b      	str	r3, [r5, #20]
 8010c52:	2300      	movs	r3, #0
 8010c54:	9309      	str	r3, [sp, #36]	; 0x24
 8010c56:	2320      	movs	r3, #32
 8010c58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c60:	2330      	movs	r3, #48	; 0x30
 8010c62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010e08 <_svfiprintf_r+0x1e8>
 8010c66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c6a:	f04f 0901 	mov.w	r9, #1
 8010c6e:	4623      	mov	r3, r4
 8010c70:	469a      	mov	sl, r3
 8010c72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c76:	b10a      	cbz	r2, 8010c7c <_svfiprintf_r+0x5c>
 8010c78:	2a25      	cmp	r2, #37	; 0x25
 8010c7a:	d1f9      	bne.n	8010c70 <_svfiprintf_r+0x50>
 8010c7c:	ebba 0b04 	subs.w	fp, sl, r4
 8010c80:	d00b      	beq.n	8010c9a <_svfiprintf_r+0x7a>
 8010c82:	465b      	mov	r3, fp
 8010c84:	4622      	mov	r2, r4
 8010c86:	4629      	mov	r1, r5
 8010c88:	4638      	mov	r0, r7
 8010c8a:	f7ff ff6f 	bl	8010b6c <__ssputs_r>
 8010c8e:	3001      	adds	r0, #1
 8010c90:	f000 80a9 	beq.w	8010de6 <_svfiprintf_r+0x1c6>
 8010c94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c96:	445a      	add	r2, fp
 8010c98:	9209      	str	r2, [sp, #36]	; 0x24
 8010c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	f000 80a1 	beq.w	8010de6 <_svfiprintf_r+0x1c6>
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8010caa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cae:	f10a 0a01 	add.w	sl, sl, #1
 8010cb2:	9304      	str	r3, [sp, #16]
 8010cb4:	9307      	str	r3, [sp, #28]
 8010cb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010cba:	931a      	str	r3, [sp, #104]	; 0x68
 8010cbc:	4654      	mov	r4, sl
 8010cbe:	2205      	movs	r2, #5
 8010cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cc4:	4850      	ldr	r0, [pc, #320]	; (8010e08 <_svfiprintf_r+0x1e8>)
 8010cc6:	f7ef fa83 	bl	80001d0 <memchr>
 8010cca:	9a04      	ldr	r2, [sp, #16]
 8010ccc:	b9d8      	cbnz	r0, 8010d06 <_svfiprintf_r+0xe6>
 8010cce:	06d0      	lsls	r0, r2, #27
 8010cd0:	bf44      	itt	mi
 8010cd2:	2320      	movmi	r3, #32
 8010cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cd8:	0711      	lsls	r1, r2, #28
 8010cda:	bf44      	itt	mi
 8010cdc:	232b      	movmi	r3, #43	; 0x2b
 8010cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8010ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8010ce8:	d015      	beq.n	8010d16 <_svfiprintf_r+0xf6>
 8010cea:	9a07      	ldr	r2, [sp, #28]
 8010cec:	4654      	mov	r4, sl
 8010cee:	2000      	movs	r0, #0
 8010cf0:	f04f 0c0a 	mov.w	ip, #10
 8010cf4:	4621      	mov	r1, r4
 8010cf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010cfa:	3b30      	subs	r3, #48	; 0x30
 8010cfc:	2b09      	cmp	r3, #9
 8010cfe:	d94d      	bls.n	8010d9c <_svfiprintf_r+0x17c>
 8010d00:	b1b0      	cbz	r0, 8010d30 <_svfiprintf_r+0x110>
 8010d02:	9207      	str	r2, [sp, #28]
 8010d04:	e014      	b.n	8010d30 <_svfiprintf_r+0x110>
 8010d06:	eba0 0308 	sub.w	r3, r0, r8
 8010d0a:	fa09 f303 	lsl.w	r3, r9, r3
 8010d0e:	4313      	orrs	r3, r2
 8010d10:	9304      	str	r3, [sp, #16]
 8010d12:	46a2      	mov	sl, r4
 8010d14:	e7d2      	b.n	8010cbc <_svfiprintf_r+0x9c>
 8010d16:	9b03      	ldr	r3, [sp, #12]
 8010d18:	1d19      	adds	r1, r3, #4
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	9103      	str	r1, [sp, #12]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	bfbb      	ittet	lt
 8010d22:	425b      	neglt	r3, r3
 8010d24:	f042 0202 	orrlt.w	r2, r2, #2
 8010d28:	9307      	strge	r3, [sp, #28]
 8010d2a:	9307      	strlt	r3, [sp, #28]
 8010d2c:	bfb8      	it	lt
 8010d2e:	9204      	strlt	r2, [sp, #16]
 8010d30:	7823      	ldrb	r3, [r4, #0]
 8010d32:	2b2e      	cmp	r3, #46	; 0x2e
 8010d34:	d10c      	bne.n	8010d50 <_svfiprintf_r+0x130>
 8010d36:	7863      	ldrb	r3, [r4, #1]
 8010d38:	2b2a      	cmp	r3, #42	; 0x2a
 8010d3a:	d134      	bne.n	8010da6 <_svfiprintf_r+0x186>
 8010d3c:	9b03      	ldr	r3, [sp, #12]
 8010d3e:	1d1a      	adds	r2, r3, #4
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	9203      	str	r2, [sp, #12]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	bfb8      	it	lt
 8010d48:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d4c:	3402      	adds	r4, #2
 8010d4e:	9305      	str	r3, [sp, #20]
 8010d50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010e18 <_svfiprintf_r+0x1f8>
 8010d54:	7821      	ldrb	r1, [r4, #0]
 8010d56:	2203      	movs	r2, #3
 8010d58:	4650      	mov	r0, sl
 8010d5a:	f7ef fa39 	bl	80001d0 <memchr>
 8010d5e:	b138      	cbz	r0, 8010d70 <_svfiprintf_r+0x150>
 8010d60:	9b04      	ldr	r3, [sp, #16]
 8010d62:	eba0 000a 	sub.w	r0, r0, sl
 8010d66:	2240      	movs	r2, #64	; 0x40
 8010d68:	4082      	lsls	r2, r0
 8010d6a:	4313      	orrs	r3, r2
 8010d6c:	3401      	adds	r4, #1
 8010d6e:	9304      	str	r3, [sp, #16]
 8010d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d74:	4825      	ldr	r0, [pc, #148]	; (8010e0c <_svfiprintf_r+0x1ec>)
 8010d76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d7a:	2206      	movs	r2, #6
 8010d7c:	f7ef fa28 	bl	80001d0 <memchr>
 8010d80:	2800      	cmp	r0, #0
 8010d82:	d038      	beq.n	8010df6 <_svfiprintf_r+0x1d6>
 8010d84:	4b22      	ldr	r3, [pc, #136]	; (8010e10 <_svfiprintf_r+0x1f0>)
 8010d86:	bb1b      	cbnz	r3, 8010dd0 <_svfiprintf_r+0x1b0>
 8010d88:	9b03      	ldr	r3, [sp, #12]
 8010d8a:	3307      	adds	r3, #7
 8010d8c:	f023 0307 	bic.w	r3, r3, #7
 8010d90:	3308      	adds	r3, #8
 8010d92:	9303      	str	r3, [sp, #12]
 8010d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d96:	4433      	add	r3, r6
 8010d98:	9309      	str	r3, [sp, #36]	; 0x24
 8010d9a:	e768      	b.n	8010c6e <_svfiprintf_r+0x4e>
 8010d9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010da0:	460c      	mov	r4, r1
 8010da2:	2001      	movs	r0, #1
 8010da4:	e7a6      	b.n	8010cf4 <_svfiprintf_r+0xd4>
 8010da6:	2300      	movs	r3, #0
 8010da8:	3401      	adds	r4, #1
 8010daa:	9305      	str	r3, [sp, #20]
 8010dac:	4619      	mov	r1, r3
 8010dae:	f04f 0c0a 	mov.w	ip, #10
 8010db2:	4620      	mov	r0, r4
 8010db4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010db8:	3a30      	subs	r2, #48	; 0x30
 8010dba:	2a09      	cmp	r2, #9
 8010dbc:	d903      	bls.n	8010dc6 <_svfiprintf_r+0x1a6>
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d0c6      	beq.n	8010d50 <_svfiprintf_r+0x130>
 8010dc2:	9105      	str	r1, [sp, #20]
 8010dc4:	e7c4      	b.n	8010d50 <_svfiprintf_r+0x130>
 8010dc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8010dca:	4604      	mov	r4, r0
 8010dcc:	2301      	movs	r3, #1
 8010dce:	e7f0      	b.n	8010db2 <_svfiprintf_r+0x192>
 8010dd0:	ab03      	add	r3, sp, #12
 8010dd2:	9300      	str	r3, [sp, #0]
 8010dd4:	462a      	mov	r2, r5
 8010dd6:	4b0f      	ldr	r3, [pc, #60]	; (8010e14 <_svfiprintf_r+0x1f4>)
 8010dd8:	a904      	add	r1, sp, #16
 8010dda:	4638      	mov	r0, r7
 8010ddc:	f7fc fbd6 	bl	800d58c <_printf_float>
 8010de0:	1c42      	adds	r2, r0, #1
 8010de2:	4606      	mov	r6, r0
 8010de4:	d1d6      	bne.n	8010d94 <_svfiprintf_r+0x174>
 8010de6:	89ab      	ldrh	r3, [r5, #12]
 8010de8:	065b      	lsls	r3, r3, #25
 8010dea:	f53f af2d 	bmi.w	8010c48 <_svfiprintf_r+0x28>
 8010dee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010df0:	b01d      	add	sp, #116	; 0x74
 8010df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df6:	ab03      	add	r3, sp, #12
 8010df8:	9300      	str	r3, [sp, #0]
 8010dfa:	462a      	mov	r2, r5
 8010dfc:	4b05      	ldr	r3, [pc, #20]	; (8010e14 <_svfiprintf_r+0x1f4>)
 8010dfe:	a904      	add	r1, sp, #16
 8010e00:	4638      	mov	r0, r7
 8010e02:	f7fc fe67 	bl	800dad4 <_printf_i>
 8010e06:	e7eb      	b.n	8010de0 <_svfiprintf_r+0x1c0>
 8010e08:	08014161 	.word	0x08014161
 8010e0c:	0801416b 	.word	0x0801416b
 8010e10:	0800d58d 	.word	0x0800d58d
 8010e14:	08010b6d 	.word	0x08010b6d
 8010e18:	08014167 	.word	0x08014167

08010e1c <_sungetc_r>:
 8010e1c:	b538      	push	{r3, r4, r5, lr}
 8010e1e:	1c4b      	adds	r3, r1, #1
 8010e20:	4614      	mov	r4, r2
 8010e22:	d103      	bne.n	8010e2c <_sungetc_r+0x10>
 8010e24:	f04f 35ff 	mov.w	r5, #4294967295
 8010e28:	4628      	mov	r0, r5
 8010e2a:	bd38      	pop	{r3, r4, r5, pc}
 8010e2c:	8993      	ldrh	r3, [r2, #12]
 8010e2e:	f023 0320 	bic.w	r3, r3, #32
 8010e32:	8193      	strh	r3, [r2, #12]
 8010e34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e36:	6852      	ldr	r2, [r2, #4]
 8010e38:	b2cd      	uxtb	r5, r1
 8010e3a:	b18b      	cbz	r3, 8010e60 <_sungetc_r+0x44>
 8010e3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	dd08      	ble.n	8010e54 <_sungetc_r+0x38>
 8010e42:	6823      	ldr	r3, [r4, #0]
 8010e44:	1e5a      	subs	r2, r3, #1
 8010e46:	6022      	str	r2, [r4, #0]
 8010e48:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010e4c:	6863      	ldr	r3, [r4, #4]
 8010e4e:	3301      	adds	r3, #1
 8010e50:	6063      	str	r3, [r4, #4]
 8010e52:	e7e9      	b.n	8010e28 <_sungetc_r+0xc>
 8010e54:	4621      	mov	r1, r4
 8010e56:	f000 fbe8 	bl	801162a <__submore>
 8010e5a:	2800      	cmp	r0, #0
 8010e5c:	d0f1      	beq.n	8010e42 <_sungetc_r+0x26>
 8010e5e:	e7e1      	b.n	8010e24 <_sungetc_r+0x8>
 8010e60:	6921      	ldr	r1, [r4, #16]
 8010e62:	6823      	ldr	r3, [r4, #0]
 8010e64:	b151      	cbz	r1, 8010e7c <_sungetc_r+0x60>
 8010e66:	4299      	cmp	r1, r3
 8010e68:	d208      	bcs.n	8010e7c <_sungetc_r+0x60>
 8010e6a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010e6e:	42a9      	cmp	r1, r5
 8010e70:	d104      	bne.n	8010e7c <_sungetc_r+0x60>
 8010e72:	3b01      	subs	r3, #1
 8010e74:	3201      	adds	r2, #1
 8010e76:	6023      	str	r3, [r4, #0]
 8010e78:	6062      	str	r2, [r4, #4]
 8010e7a:	e7d5      	b.n	8010e28 <_sungetc_r+0xc>
 8010e7c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e84:	6363      	str	r3, [r4, #52]	; 0x34
 8010e86:	2303      	movs	r3, #3
 8010e88:	63a3      	str	r3, [r4, #56]	; 0x38
 8010e8a:	4623      	mov	r3, r4
 8010e8c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010e90:	6023      	str	r3, [r4, #0]
 8010e92:	2301      	movs	r3, #1
 8010e94:	e7dc      	b.n	8010e50 <_sungetc_r+0x34>

08010e96 <__ssrefill_r>:
 8010e96:	b510      	push	{r4, lr}
 8010e98:	460c      	mov	r4, r1
 8010e9a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010e9c:	b169      	cbz	r1, 8010eba <__ssrefill_r+0x24>
 8010e9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ea2:	4299      	cmp	r1, r3
 8010ea4:	d001      	beq.n	8010eaa <__ssrefill_r+0x14>
 8010ea6:	f7fe fa1d 	bl	800f2e4 <_free_r>
 8010eaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010eac:	6063      	str	r3, [r4, #4]
 8010eae:	2000      	movs	r0, #0
 8010eb0:	6360      	str	r0, [r4, #52]	; 0x34
 8010eb2:	b113      	cbz	r3, 8010eba <__ssrefill_r+0x24>
 8010eb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010eb6:	6023      	str	r3, [r4, #0]
 8010eb8:	bd10      	pop	{r4, pc}
 8010eba:	6923      	ldr	r3, [r4, #16]
 8010ebc:	6023      	str	r3, [r4, #0]
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	6063      	str	r3, [r4, #4]
 8010ec2:	89a3      	ldrh	r3, [r4, #12]
 8010ec4:	f043 0320 	orr.w	r3, r3, #32
 8010ec8:	81a3      	strh	r3, [r4, #12]
 8010eca:	f04f 30ff 	mov.w	r0, #4294967295
 8010ece:	e7f3      	b.n	8010eb8 <__ssrefill_r+0x22>

08010ed0 <__ssvfiscanf_r>:
 8010ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ed4:	460c      	mov	r4, r1
 8010ed6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010eda:	2100      	movs	r1, #0
 8010edc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010ee0:	49a6      	ldr	r1, [pc, #664]	; (801117c <__ssvfiscanf_r+0x2ac>)
 8010ee2:	91a0      	str	r1, [sp, #640]	; 0x280
 8010ee4:	f10d 0804 	add.w	r8, sp, #4
 8010ee8:	49a5      	ldr	r1, [pc, #660]	; (8011180 <__ssvfiscanf_r+0x2b0>)
 8010eea:	4fa6      	ldr	r7, [pc, #664]	; (8011184 <__ssvfiscanf_r+0x2b4>)
 8010eec:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8011188 <__ssvfiscanf_r+0x2b8>
 8010ef0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010ef4:	4606      	mov	r6, r0
 8010ef6:	91a1      	str	r1, [sp, #644]	; 0x284
 8010ef8:	9300      	str	r3, [sp, #0]
 8010efa:	7813      	ldrb	r3, [r2, #0]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	f000 815a 	beq.w	80111b6 <__ssvfiscanf_r+0x2e6>
 8010f02:	5cf9      	ldrb	r1, [r7, r3]
 8010f04:	f011 0108 	ands.w	r1, r1, #8
 8010f08:	f102 0501 	add.w	r5, r2, #1
 8010f0c:	d019      	beq.n	8010f42 <__ssvfiscanf_r+0x72>
 8010f0e:	6863      	ldr	r3, [r4, #4]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	dd0f      	ble.n	8010f34 <__ssvfiscanf_r+0x64>
 8010f14:	6823      	ldr	r3, [r4, #0]
 8010f16:	781a      	ldrb	r2, [r3, #0]
 8010f18:	5cba      	ldrb	r2, [r7, r2]
 8010f1a:	0712      	lsls	r2, r2, #28
 8010f1c:	d401      	bmi.n	8010f22 <__ssvfiscanf_r+0x52>
 8010f1e:	462a      	mov	r2, r5
 8010f20:	e7eb      	b.n	8010efa <__ssvfiscanf_r+0x2a>
 8010f22:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010f24:	3201      	adds	r2, #1
 8010f26:	9245      	str	r2, [sp, #276]	; 0x114
 8010f28:	6862      	ldr	r2, [r4, #4]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	3a01      	subs	r2, #1
 8010f2e:	6062      	str	r2, [r4, #4]
 8010f30:	6023      	str	r3, [r4, #0]
 8010f32:	e7ec      	b.n	8010f0e <__ssvfiscanf_r+0x3e>
 8010f34:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010f36:	4621      	mov	r1, r4
 8010f38:	4630      	mov	r0, r6
 8010f3a:	4798      	blx	r3
 8010f3c:	2800      	cmp	r0, #0
 8010f3e:	d0e9      	beq.n	8010f14 <__ssvfiscanf_r+0x44>
 8010f40:	e7ed      	b.n	8010f1e <__ssvfiscanf_r+0x4e>
 8010f42:	2b25      	cmp	r3, #37	; 0x25
 8010f44:	d012      	beq.n	8010f6c <__ssvfiscanf_r+0x9c>
 8010f46:	469a      	mov	sl, r3
 8010f48:	6863      	ldr	r3, [r4, #4]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	f340 8091 	ble.w	8011072 <__ssvfiscanf_r+0x1a2>
 8010f50:	6822      	ldr	r2, [r4, #0]
 8010f52:	7813      	ldrb	r3, [r2, #0]
 8010f54:	4553      	cmp	r3, sl
 8010f56:	f040 812e 	bne.w	80111b6 <__ssvfiscanf_r+0x2e6>
 8010f5a:	6863      	ldr	r3, [r4, #4]
 8010f5c:	3b01      	subs	r3, #1
 8010f5e:	6063      	str	r3, [r4, #4]
 8010f60:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010f62:	3201      	adds	r2, #1
 8010f64:	3301      	adds	r3, #1
 8010f66:	6022      	str	r2, [r4, #0]
 8010f68:	9345      	str	r3, [sp, #276]	; 0x114
 8010f6a:	e7d8      	b.n	8010f1e <__ssvfiscanf_r+0x4e>
 8010f6c:	9141      	str	r1, [sp, #260]	; 0x104
 8010f6e:	9143      	str	r1, [sp, #268]	; 0x10c
 8010f70:	7853      	ldrb	r3, [r2, #1]
 8010f72:	2b2a      	cmp	r3, #42	; 0x2a
 8010f74:	bf02      	ittt	eq
 8010f76:	2310      	moveq	r3, #16
 8010f78:	1c95      	addeq	r5, r2, #2
 8010f7a:	9341      	streq	r3, [sp, #260]	; 0x104
 8010f7c:	220a      	movs	r2, #10
 8010f7e:	46aa      	mov	sl, r5
 8010f80:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010f84:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010f88:	2b09      	cmp	r3, #9
 8010f8a:	d91c      	bls.n	8010fc6 <__ssvfiscanf_r+0xf6>
 8010f8c:	487e      	ldr	r0, [pc, #504]	; (8011188 <__ssvfiscanf_r+0x2b8>)
 8010f8e:	2203      	movs	r2, #3
 8010f90:	f7ef f91e 	bl	80001d0 <memchr>
 8010f94:	b138      	cbz	r0, 8010fa6 <__ssvfiscanf_r+0xd6>
 8010f96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010f98:	eba0 0009 	sub.w	r0, r0, r9
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	4083      	lsls	r3, r0
 8010fa0:	4313      	orrs	r3, r2
 8010fa2:	9341      	str	r3, [sp, #260]	; 0x104
 8010fa4:	4655      	mov	r5, sl
 8010fa6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010faa:	2b78      	cmp	r3, #120	; 0x78
 8010fac:	d806      	bhi.n	8010fbc <__ssvfiscanf_r+0xec>
 8010fae:	2b57      	cmp	r3, #87	; 0x57
 8010fb0:	d810      	bhi.n	8010fd4 <__ssvfiscanf_r+0x104>
 8010fb2:	2b25      	cmp	r3, #37	; 0x25
 8010fb4:	d0c7      	beq.n	8010f46 <__ssvfiscanf_r+0x76>
 8010fb6:	d857      	bhi.n	8011068 <__ssvfiscanf_r+0x198>
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d065      	beq.n	8011088 <__ssvfiscanf_r+0x1b8>
 8010fbc:	2303      	movs	r3, #3
 8010fbe:	9347      	str	r3, [sp, #284]	; 0x11c
 8010fc0:	230a      	movs	r3, #10
 8010fc2:	9342      	str	r3, [sp, #264]	; 0x108
 8010fc4:	e076      	b.n	80110b4 <__ssvfiscanf_r+0x1e4>
 8010fc6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010fc8:	fb02 1103 	mla	r1, r2, r3, r1
 8010fcc:	3930      	subs	r1, #48	; 0x30
 8010fce:	9143      	str	r1, [sp, #268]	; 0x10c
 8010fd0:	4655      	mov	r5, sl
 8010fd2:	e7d4      	b.n	8010f7e <__ssvfiscanf_r+0xae>
 8010fd4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010fd8:	2a20      	cmp	r2, #32
 8010fda:	d8ef      	bhi.n	8010fbc <__ssvfiscanf_r+0xec>
 8010fdc:	a101      	add	r1, pc, #4	; (adr r1, 8010fe4 <__ssvfiscanf_r+0x114>)
 8010fde:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010fe2:	bf00      	nop
 8010fe4:	08011097 	.word	0x08011097
 8010fe8:	08010fbd 	.word	0x08010fbd
 8010fec:	08010fbd 	.word	0x08010fbd
 8010ff0:	080110f5 	.word	0x080110f5
 8010ff4:	08010fbd 	.word	0x08010fbd
 8010ff8:	08010fbd 	.word	0x08010fbd
 8010ffc:	08010fbd 	.word	0x08010fbd
 8011000:	08010fbd 	.word	0x08010fbd
 8011004:	08010fbd 	.word	0x08010fbd
 8011008:	08010fbd 	.word	0x08010fbd
 801100c:	08010fbd 	.word	0x08010fbd
 8011010:	0801110b 	.word	0x0801110b
 8011014:	080110f1 	.word	0x080110f1
 8011018:	0801106f 	.word	0x0801106f
 801101c:	0801106f 	.word	0x0801106f
 8011020:	0801106f 	.word	0x0801106f
 8011024:	08010fbd 	.word	0x08010fbd
 8011028:	080110ad 	.word	0x080110ad
 801102c:	08010fbd 	.word	0x08010fbd
 8011030:	08010fbd 	.word	0x08010fbd
 8011034:	08010fbd 	.word	0x08010fbd
 8011038:	08010fbd 	.word	0x08010fbd
 801103c:	0801111b 	.word	0x0801111b
 8011040:	080110e9 	.word	0x080110e9
 8011044:	0801108f 	.word	0x0801108f
 8011048:	08010fbd 	.word	0x08010fbd
 801104c:	08010fbd 	.word	0x08010fbd
 8011050:	08011117 	.word	0x08011117
 8011054:	08010fbd 	.word	0x08010fbd
 8011058:	080110f1 	.word	0x080110f1
 801105c:	08010fbd 	.word	0x08010fbd
 8011060:	08010fbd 	.word	0x08010fbd
 8011064:	08011097 	.word	0x08011097
 8011068:	3b45      	subs	r3, #69	; 0x45
 801106a:	2b02      	cmp	r3, #2
 801106c:	d8a6      	bhi.n	8010fbc <__ssvfiscanf_r+0xec>
 801106e:	2305      	movs	r3, #5
 8011070:	e01f      	b.n	80110b2 <__ssvfiscanf_r+0x1e2>
 8011072:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011074:	4621      	mov	r1, r4
 8011076:	4630      	mov	r0, r6
 8011078:	4798      	blx	r3
 801107a:	2800      	cmp	r0, #0
 801107c:	f43f af68 	beq.w	8010f50 <__ssvfiscanf_r+0x80>
 8011080:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011082:	2800      	cmp	r0, #0
 8011084:	f040 808d 	bne.w	80111a2 <__ssvfiscanf_r+0x2d2>
 8011088:	f04f 30ff 	mov.w	r0, #4294967295
 801108c:	e08f      	b.n	80111ae <__ssvfiscanf_r+0x2de>
 801108e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011090:	f042 0220 	orr.w	r2, r2, #32
 8011094:	9241      	str	r2, [sp, #260]	; 0x104
 8011096:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801109c:	9241      	str	r2, [sp, #260]	; 0x104
 801109e:	2210      	movs	r2, #16
 80110a0:	2b6f      	cmp	r3, #111	; 0x6f
 80110a2:	9242      	str	r2, [sp, #264]	; 0x108
 80110a4:	bf34      	ite	cc
 80110a6:	2303      	movcc	r3, #3
 80110a8:	2304      	movcs	r3, #4
 80110aa:	e002      	b.n	80110b2 <__ssvfiscanf_r+0x1e2>
 80110ac:	2300      	movs	r3, #0
 80110ae:	9342      	str	r3, [sp, #264]	; 0x108
 80110b0:	2303      	movs	r3, #3
 80110b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80110b4:	6863      	ldr	r3, [r4, #4]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	dd3d      	ble.n	8011136 <__ssvfiscanf_r+0x266>
 80110ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80110bc:	0659      	lsls	r1, r3, #25
 80110be:	d404      	bmi.n	80110ca <__ssvfiscanf_r+0x1fa>
 80110c0:	6823      	ldr	r3, [r4, #0]
 80110c2:	781a      	ldrb	r2, [r3, #0]
 80110c4:	5cba      	ldrb	r2, [r7, r2]
 80110c6:	0712      	lsls	r2, r2, #28
 80110c8:	d43c      	bmi.n	8011144 <__ssvfiscanf_r+0x274>
 80110ca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80110cc:	2b02      	cmp	r3, #2
 80110ce:	dc4b      	bgt.n	8011168 <__ssvfiscanf_r+0x298>
 80110d0:	466b      	mov	r3, sp
 80110d2:	4622      	mov	r2, r4
 80110d4:	a941      	add	r1, sp, #260	; 0x104
 80110d6:	4630      	mov	r0, r6
 80110d8:	f000 f872 	bl	80111c0 <_scanf_chars>
 80110dc:	2801      	cmp	r0, #1
 80110de:	d06a      	beq.n	80111b6 <__ssvfiscanf_r+0x2e6>
 80110e0:	2802      	cmp	r0, #2
 80110e2:	f47f af1c 	bne.w	8010f1e <__ssvfiscanf_r+0x4e>
 80110e6:	e7cb      	b.n	8011080 <__ssvfiscanf_r+0x1b0>
 80110e8:	2308      	movs	r3, #8
 80110ea:	9342      	str	r3, [sp, #264]	; 0x108
 80110ec:	2304      	movs	r3, #4
 80110ee:	e7e0      	b.n	80110b2 <__ssvfiscanf_r+0x1e2>
 80110f0:	220a      	movs	r2, #10
 80110f2:	e7d5      	b.n	80110a0 <__ssvfiscanf_r+0x1d0>
 80110f4:	4629      	mov	r1, r5
 80110f6:	4640      	mov	r0, r8
 80110f8:	f000 fa5e 	bl	80115b8 <__sccl>
 80110fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80110fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011102:	9341      	str	r3, [sp, #260]	; 0x104
 8011104:	4605      	mov	r5, r0
 8011106:	2301      	movs	r3, #1
 8011108:	e7d3      	b.n	80110b2 <__ssvfiscanf_r+0x1e2>
 801110a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801110c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011110:	9341      	str	r3, [sp, #260]	; 0x104
 8011112:	2300      	movs	r3, #0
 8011114:	e7cd      	b.n	80110b2 <__ssvfiscanf_r+0x1e2>
 8011116:	2302      	movs	r3, #2
 8011118:	e7cb      	b.n	80110b2 <__ssvfiscanf_r+0x1e2>
 801111a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801111c:	06c3      	lsls	r3, r0, #27
 801111e:	f53f aefe 	bmi.w	8010f1e <__ssvfiscanf_r+0x4e>
 8011122:	9b00      	ldr	r3, [sp, #0]
 8011124:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011126:	1d19      	adds	r1, r3, #4
 8011128:	9100      	str	r1, [sp, #0]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	07c0      	lsls	r0, r0, #31
 801112e:	bf4c      	ite	mi
 8011130:	801a      	strhmi	r2, [r3, #0]
 8011132:	601a      	strpl	r2, [r3, #0]
 8011134:	e6f3      	b.n	8010f1e <__ssvfiscanf_r+0x4e>
 8011136:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011138:	4621      	mov	r1, r4
 801113a:	4630      	mov	r0, r6
 801113c:	4798      	blx	r3
 801113e:	2800      	cmp	r0, #0
 8011140:	d0bb      	beq.n	80110ba <__ssvfiscanf_r+0x1ea>
 8011142:	e79d      	b.n	8011080 <__ssvfiscanf_r+0x1b0>
 8011144:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011146:	3201      	adds	r2, #1
 8011148:	9245      	str	r2, [sp, #276]	; 0x114
 801114a:	6862      	ldr	r2, [r4, #4]
 801114c:	3a01      	subs	r2, #1
 801114e:	2a00      	cmp	r2, #0
 8011150:	6062      	str	r2, [r4, #4]
 8011152:	dd02      	ble.n	801115a <__ssvfiscanf_r+0x28a>
 8011154:	3301      	adds	r3, #1
 8011156:	6023      	str	r3, [r4, #0]
 8011158:	e7b2      	b.n	80110c0 <__ssvfiscanf_r+0x1f0>
 801115a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801115c:	4621      	mov	r1, r4
 801115e:	4630      	mov	r0, r6
 8011160:	4798      	blx	r3
 8011162:	2800      	cmp	r0, #0
 8011164:	d0ac      	beq.n	80110c0 <__ssvfiscanf_r+0x1f0>
 8011166:	e78b      	b.n	8011080 <__ssvfiscanf_r+0x1b0>
 8011168:	2b04      	cmp	r3, #4
 801116a:	dc0f      	bgt.n	801118c <__ssvfiscanf_r+0x2bc>
 801116c:	466b      	mov	r3, sp
 801116e:	4622      	mov	r2, r4
 8011170:	a941      	add	r1, sp, #260	; 0x104
 8011172:	4630      	mov	r0, r6
 8011174:	f000 f87e 	bl	8011274 <_scanf_i>
 8011178:	e7b0      	b.n	80110dc <__ssvfiscanf_r+0x20c>
 801117a:	bf00      	nop
 801117c:	08010e1d 	.word	0x08010e1d
 8011180:	08010e97 	.word	0x08010e97
 8011184:	08014061 	.word	0x08014061
 8011188:	08014167 	.word	0x08014167
 801118c:	4b0b      	ldr	r3, [pc, #44]	; (80111bc <__ssvfiscanf_r+0x2ec>)
 801118e:	2b00      	cmp	r3, #0
 8011190:	f43f aec5 	beq.w	8010f1e <__ssvfiscanf_r+0x4e>
 8011194:	466b      	mov	r3, sp
 8011196:	4622      	mov	r2, r4
 8011198:	a941      	add	r1, sp, #260	; 0x104
 801119a:	4630      	mov	r0, r6
 801119c:	f7fc fdbc 	bl	800dd18 <_scanf_float>
 80111a0:	e79c      	b.n	80110dc <__ssvfiscanf_r+0x20c>
 80111a2:	89a3      	ldrh	r3, [r4, #12]
 80111a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80111a8:	bf18      	it	ne
 80111aa:	f04f 30ff 	movne.w	r0, #4294967295
 80111ae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80111b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111b6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80111b8:	e7f9      	b.n	80111ae <__ssvfiscanf_r+0x2de>
 80111ba:	bf00      	nop
 80111bc:	0800dd19 	.word	0x0800dd19

080111c0 <_scanf_chars>:
 80111c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111c4:	4615      	mov	r5, r2
 80111c6:	688a      	ldr	r2, [r1, #8]
 80111c8:	4680      	mov	r8, r0
 80111ca:	460c      	mov	r4, r1
 80111cc:	b932      	cbnz	r2, 80111dc <_scanf_chars+0x1c>
 80111ce:	698a      	ldr	r2, [r1, #24]
 80111d0:	2a00      	cmp	r2, #0
 80111d2:	bf0c      	ite	eq
 80111d4:	2201      	moveq	r2, #1
 80111d6:	f04f 32ff 	movne.w	r2, #4294967295
 80111da:	608a      	str	r2, [r1, #8]
 80111dc:	6822      	ldr	r2, [r4, #0]
 80111de:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8011270 <_scanf_chars+0xb0>
 80111e2:	06d1      	lsls	r1, r2, #27
 80111e4:	bf5f      	itttt	pl
 80111e6:	681a      	ldrpl	r2, [r3, #0]
 80111e8:	1d11      	addpl	r1, r2, #4
 80111ea:	6019      	strpl	r1, [r3, #0]
 80111ec:	6816      	ldrpl	r6, [r2, #0]
 80111ee:	2700      	movs	r7, #0
 80111f0:	69a0      	ldr	r0, [r4, #24]
 80111f2:	b188      	cbz	r0, 8011218 <_scanf_chars+0x58>
 80111f4:	2801      	cmp	r0, #1
 80111f6:	d107      	bne.n	8011208 <_scanf_chars+0x48>
 80111f8:	682a      	ldr	r2, [r5, #0]
 80111fa:	7811      	ldrb	r1, [r2, #0]
 80111fc:	6962      	ldr	r2, [r4, #20]
 80111fe:	5c52      	ldrb	r2, [r2, r1]
 8011200:	b952      	cbnz	r2, 8011218 <_scanf_chars+0x58>
 8011202:	2f00      	cmp	r7, #0
 8011204:	d031      	beq.n	801126a <_scanf_chars+0xaa>
 8011206:	e022      	b.n	801124e <_scanf_chars+0x8e>
 8011208:	2802      	cmp	r0, #2
 801120a:	d120      	bne.n	801124e <_scanf_chars+0x8e>
 801120c:	682b      	ldr	r3, [r5, #0]
 801120e:	781b      	ldrb	r3, [r3, #0]
 8011210:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011214:	071b      	lsls	r3, r3, #28
 8011216:	d41a      	bmi.n	801124e <_scanf_chars+0x8e>
 8011218:	6823      	ldr	r3, [r4, #0]
 801121a:	06da      	lsls	r2, r3, #27
 801121c:	bf5e      	ittt	pl
 801121e:	682b      	ldrpl	r3, [r5, #0]
 8011220:	781b      	ldrbpl	r3, [r3, #0]
 8011222:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011226:	682a      	ldr	r2, [r5, #0]
 8011228:	686b      	ldr	r3, [r5, #4]
 801122a:	3201      	adds	r2, #1
 801122c:	602a      	str	r2, [r5, #0]
 801122e:	68a2      	ldr	r2, [r4, #8]
 8011230:	3b01      	subs	r3, #1
 8011232:	3a01      	subs	r2, #1
 8011234:	606b      	str	r3, [r5, #4]
 8011236:	3701      	adds	r7, #1
 8011238:	60a2      	str	r2, [r4, #8]
 801123a:	b142      	cbz	r2, 801124e <_scanf_chars+0x8e>
 801123c:	2b00      	cmp	r3, #0
 801123e:	dcd7      	bgt.n	80111f0 <_scanf_chars+0x30>
 8011240:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011244:	4629      	mov	r1, r5
 8011246:	4640      	mov	r0, r8
 8011248:	4798      	blx	r3
 801124a:	2800      	cmp	r0, #0
 801124c:	d0d0      	beq.n	80111f0 <_scanf_chars+0x30>
 801124e:	6823      	ldr	r3, [r4, #0]
 8011250:	f013 0310 	ands.w	r3, r3, #16
 8011254:	d105      	bne.n	8011262 <_scanf_chars+0xa2>
 8011256:	68e2      	ldr	r2, [r4, #12]
 8011258:	3201      	adds	r2, #1
 801125a:	60e2      	str	r2, [r4, #12]
 801125c:	69a2      	ldr	r2, [r4, #24]
 801125e:	b102      	cbz	r2, 8011262 <_scanf_chars+0xa2>
 8011260:	7033      	strb	r3, [r6, #0]
 8011262:	6923      	ldr	r3, [r4, #16]
 8011264:	443b      	add	r3, r7
 8011266:	6123      	str	r3, [r4, #16]
 8011268:	2000      	movs	r0, #0
 801126a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801126e:	bf00      	nop
 8011270:	08014061 	.word	0x08014061

08011274 <_scanf_i>:
 8011274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011278:	4698      	mov	r8, r3
 801127a:	4b74      	ldr	r3, [pc, #464]	; (801144c <_scanf_i+0x1d8>)
 801127c:	460c      	mov	r4, r1
 801127e:	4682      	mov	sl, r0
 8011280:	4616      	mov	r6, r2
 8011282:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011286:	b087      	sub	sp, #28
 8011288:	ab03      	add	r3, sp, #12
 801128a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801128e:	4b70      	ldr	r3, [pc, #448]	; (8011450 <_scanf_i+0x1dc>)
 8011290:	69a1      	ldr	r1, [r4, #24]
 8011292:	4a70      	ldr	r2, [pc, #448]	; (8011454 <_scanf_i+0x1e0>)
 8011294:	2903      	cmp	r1, #3
 8011296:	bf18      	it	ne
 8011298:	461a      	movne	r2, r3
 801129a:	68a3      	ldr	r3, [r4, #8]
 801129c:	9201      	str	r2, [sp, #4]
 801129e:	1e5a      	subs	r2, r3, #1
 80112a0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80112a4:	bf88      	it	hi
 80112a6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80112aa:	4627      	mov	r7, r4
 80112ac:	bf82      	ittt	hi
 80112ae:	eb03 0905 	addhi.w	r9, r3, r5
 80112b2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80112b6:	60a3      	strhi	r3, [r4, #8]
 80112b8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80112bc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80112c0:	bf98      	it	ls
 80112c2:	f04f 0900 	movls.w	r9, #0
 80112c6:	6023      	str	r3, [r4, #0]
 80112c8:	463d      	mov	r5, r7
 80112ca:	f04f 0b00 	mov.w	fp, #0
 80112ce:	6831      	ldr	r1, [r6, #0]
 80112d0:	ab03      	add	r3, sp, #12
 80112d2:	7809      	ldrb	r1, [r1, #0]
 80112d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80112d8:	2202      	movs	r2, #2
 80112da:	f7ee ff79 	bl	80001d0 <memchr>
 80112de:	b328      	cbz	r0, 801132c <_scanf_i+0xb8>
 80112e0:	f1bb 0f01 	cmp.w	fp, #1
 80112e4:	d159      	bne.n	801139a <_scanf_i+0x126>
 80112e6:	6862      	ldr	r2, [r4, #4]
 80112e8:	b92a      	cbnz	r2, 80112f6 <_scanf_i+0x82>
 80112ea:	6822      	ldr	r2, [r4, #0]
 80112ec:	2308      	movs	r3, #8
 80112ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80112f2:	6063      	str	r3, [r4, #4]
 80112f4:	6022      	str	r2, [r4, #0]
 80112f6:	6822      	ldr	r2, [r4, #0]
 80112f8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80112fc:	6022      	str	r2, [r4, #0]
 80112fe:	68a2      	ldr	r2, [r4, #8]
 8011300:	1e51      	subs	r1, r2, #1
 8011302:	60a1      	str	r1, [r4, #8]
 8011304:	b192      	cbz	r2, 801132c <_scanf_i+0xb8>
 8011306:	6832      	ldr	r2, [r6, #0]
 8011308:	1c51      	adds	r1, r2, #1
 801130a:	6031      	str	r1, [r6, #0]
 801130c:	7812      	ldrb	r2, [r2, #0]
 801130e:	f805 2b01 	strb.w	r2, [r5], #1
 8011312:	6872      	ldr	r2, [r6, #4]
 8011314:	3a01      	subs	r2, #1
 8011316:	2a00      	cmp	r2, #0
 8011318:	6072      	str	r2, [r6, #4]
 801131a:	dc07      	bgt.n	801132c <_scanf_i+0xb8>
 801131c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011320:	4631      	mov	r1, r6
 8011322:	4650      	mov	r0, sl
 8011324:	4790      	blx	r2
 8011326:	2800      	cmp	r0, #0
 8011328:	f040 8085 	bne.w	8011436 <_scanf_i+0x1c2>
 801132c:	f10b 0b01 	add.w	fp, fp, #1
 8011330:	f1bb 0f03 	cmp.w	fp, #3
 8011334:	d1cb      	bne.n	80112ce <_scanf_i+0x5a>
 8011336:	6863      	ldr	r3, [r4, #4]
 8011338:	b90b      	cbnz	r3, 801133e <_scanf_i+0xca>
 801133a:	230a      	movs	r3, #10
 801133c:	6063      	str	r3, [r4, #4]
 801133e:	6863      	ldr	r3, [r4, #4]
 8011340:	4945      	ldr	r1, [pc, #276]	; (8011458 <_scanf_i+0x1e4>)
 8011342:	6960      	ldr	r0, [r4, #20]
 8011344:	1ac9      	subs	r1, r1, r3
 8011346:	f000 f937 	bl	80115b8 <__sccl>
 801134a:	f04f 0b00 	mov.w	fp, #0
 801134e:	68a3      	ldr	r3, [r4, #8]
 8011350:	6822      	ldr	r2, [r4, #0]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d03d      	beq.n	80113d2 <_scanf_i+0x15e>
 8011356:	6831      	ldr	r1, [r6, #0]
 8011358:	6960      	ldr	r0, [r4, #20]
 801135a:	f891 c000 	ldrb.w	ip, [r1]
 801135e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011362:	2800      	cmp	r0, #0
 8011364:	d035      	beq.n	80113d2 <_scanf_i+0x15e>
 8011366:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801136a:	d124      	bne.n	80113b6 <_scanf_i+0x142>
 801136c:	0510      	lsls	r0, r2, #20
 801136e:	d522      	bpl.n	80113b6 <_scanf_i+0x142>
 8011370:	f10b 0b01 	add.w	fp, fp, #1
 8011374:	f1b9 0f00 	cmp.w	r9, #0
 8011378:	d003      	beq.n	8011382 <_scanf_i+0x10e>
 801137a:	3301      	adds	r3, #1
 801137c:	f109 39ff 	add.w	r9, r9, #4294967295
 8011380:	60a3      	str	r3, [r4, #8]
 8011382:	6873      	ldr	r3, [r6, #4]
 8011384:	3b01      	subs	r3, #1
 8011386:	2b00      	cmp	r3, #0
 8011388:	6073      	str	r3, [r6, #4]
 801138a:	dd1b      	ble.n	80113c4 <_scanf_i+0x150>
 801138c:	6833      	ldr	r3, [r6, #0]
 801138e:	3301      	adds	r3, #1
 8011390:	6033      	str	r3, [r6, #0]
 8011392:	68a3      	ldr	r3, [r4, #8]
 8011394:	3b01      	subs	r3, #1
 8011396:	60a3      	str	r3, [r4, #8]
 8011398:	e7d9      	b.n	801134e <_scanf_i+0xda>
 801139a:	f1bb 0f02 	cmp.w	fp, #2
 801139e:	d1ae      	bne.n	80112fe <_scanf_i+0x8a>
 80113a0:	6822      	ldr	r2, [r4, #0]
 80113a2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80113a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80113aa:	d1bf      	bne.n	801132c <_scanf_i+0xb8>
 80113ac:	2310      	movs	r3, #16
 80113ae:	6063      	str	r3, [r4, #4]
 80113b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80113b4:	e7a2      	b.n	80112fc <_scanf_i+0x88>
 80113b6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80113ba:	6022      	str	r2, [r4, #0]
 80113bc:	780b      	ldrb	r3, [r1, #0]
 80113be:	f805 3b01 	strb.w	r3, [r5], #1
 80113c2:	e7de      	b.n	8011382 <_scanf_i+0x10e>
 80113c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80113c8:	4631      	mov	r1, r6
 80113ca:	4650      	mov	r0, sl
 80113cc:	4798      	blx	r3
 80113ce:	2800      	cmp	r0, #0
 80113d0:	d0df      	beq.n	8011392 <_scanf_i+0x11e>
 80113d2:	6823      	ldr	r3, [r4, #0]
 80113d4:	05d9      	lsls	r1, r3, #23
 80113d6:	d50d      	bpl.n	80113f4 <_scanf_i+0x180>
 80113d8:	42bd      	cmp	r5, r7
 80113da:	d909      	bls.n	80113f0 <_scanf_i+0x17c>
 80113dc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80113e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113e4:	4632      	mov	r2, r6
 80113e6:	4650      	mov	r0, sl
 80113e8:	4798      	blx	r3
 80113ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80113ee:	464d      	mov	r5, r9
 80113f0:	42bd      	cmp	r5, r7
 80113f2:	d028      	beq.n	8011446 <_scanf_i+0x1d2>
 80113f4:	6822      	ldr	r2, [r4, #0]
 80113f6:	f012 0210 	ands.w	r2, r2, #16
 80113fa:	d113      	bne.n	8011424 <_scanf_i+0x1b0>
 80113fc:	702a      	strb	r2, [r5, #0]
 80113fe:	6863      	ldr	r3, [r4, #4]
 8011400:	9e01      	ldr	r6, [sp, #4]
 8011402:	4639      	mov	r1, r7
 8011404:	4650      	mov	r0, sl
 8011406:	47b0      	blx	r6
 8011408:	f8d8 3000 	ldr.w	r3, [r8]
 801140c:	6821      	ldr	r1, [r4, #0]
 801140e:	1d1a      	adds	r2, r3, #4
 8011410:	f8c8 2000 	str.w	r2, [r8]
 8011414:	f011 0f20 	tst.w	r1, #32
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	d00f      	beq.n	801143c <_scanf_i+0x1c8>
 801141c:	6018      	str	r0, [r3, #0]
 801141e:	68e3      	ldr	r3, [r4, #12]
 8011420:	3301      	adds	r3, #1
 8011422:	60e3      	str	r3, [r4, #12]
 8011424:	6923      	ldr	r3, [r4, #16]
 8011426:	1bed      	subs	r5, r5, r7
 8011428:	445d      	add	r5, fp
 801142a:	442b      	add	r3, r5
 801142c:	6123      	str	r3, [r4, #16]
 801142e:	2000      	movs	r0, #0
 8011430:	b007      	add	sp, #28
 8011432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011436:	f04f 0b00 	mov.w	fp, #0
 801143a:	e7ca      	b.n	80113d2 <_scanf_i+0x15e>
 801143c:	07ca      	lsls	r2, r1, #31
 801143e:	bf4c      	ite	mi
 8011440:	8018      	strhmi	r0, [r3, #0]
 8011442:	6018      	strpl	r0, [r3, #0]
 8011444:	e7eb      	b.n	801141e <_scanf_i+0x1aa>
 8011446:	2001      	movs	r0, #1
 8011448:	e7f2      	b.n	8011430 <_scanf_i+0x1bc>
 801144a:	bf00      	nop
 801144c:	08013d9c 	.word	0x08013d9c
 8011450:	08011fa5 	.word	0x08011fa5
 8011454:	08010b69 	.word	0x08010b69
 8011458:	08014182 	.word	0x08014182

0801145c <__sflush_r>:
 801145c:	898a      	ldrh	r2, [r1, #12]
 801145e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011462:	4605      	mov	r5, r0
 8011464:	0710      	lsls	r0, r2, #28
 8011466:	460c      	mov	r4, r1
 8011468:	d458      	bmi.n	801151c <__sflush_r+0xc0>
 801146a:	684b      	ldr	r3, [r1, #4]
 801146c:	2b00      	cmp	r3, #0
 801146e:	dc05      	bgt.n	801147c <__sflush_r+0x20>
 8011470:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011472:	2b00      	cmp	r3, #0
 8011474:	dc02      	bgt.n	801147c <__sflush_r+0x20>
 8011476:	2000      	movs	r0, #0
 8011478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801147c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801147e:	2e00      	cmp	r6, #0
 8011480:	d0f9      	beq.n	8011476 <__sflush_r+0x1a>
 8011482:	2300      	movs	r3, #0
 8011484:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011488:	682f      	ldr	r7, [r5, #0]
 801148a:	6a21      	ldr	r1, [r4, #32]
 801148c:	602b      	str	r3, [r5, #0]
 801148e:	d032      	beq.n	80114f6 <__sflush_r+0x9a>
 8011490:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011492:	89a3      	ldrh	r3, [r4, #12]
 8011494:	075a      	lsls	r2, r3, #29
 8011496:	d505      	bpl.n	80114a4 <__sflush_r+0x48>
 8011498:	6863      	ldr	r3, [r4, #4]
 801149a:	1ac0      	subs	r0, r0, r3
 801149c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801149e:	b10b      	cbz	r3, 80114a4 <__sflush_r+0x48>
 80114a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80114a2:	1ac0      	subs	r0, r0, r3
 80114a4:	2300      	movs	r3, #0
 80114a6:	4602      	mov	r2, r0
 80114a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80114aa:	6a21      	ldr	r1, [r4, #32]
 80114ac:	4628      	mov	r0, r5
 80114ae:	47b0      	blx	r6
 80114b0:	1c43      	adds	r3, r0, #1
 80114b2:	89a3      	ldrh	r3, [r4, #12]
 80114b4:	d106      	bne.n	80114c4 <__sflush_r+0x68>
 80114b6:	6829      	ldr	r1, [r5, #0]
 80114b8:	291d      	cmp	r1, #29
 80114ba:	d82b      	bhi.n	8011514 <__sflush_r+0xb8>
 80114bc:	4a29      	ldr	r2, [pc, #164]	; (8011564 <__sflush_r+0x108>)
 80114be:	410a      	asrs	r2, r1
 80114c0:	07d6      	lsls	r6, r2, #31
 80114c2:	d427      	bmi.n	8011514 <__sflush_r+0xb8>
 80114c4:	2200      	movs	r2, #0
 80114c6:	6062      	str	r2, [r4, #4]
 80114c8:	04d9      	lsls	r1, r3, #19
 80114ca:	6922      	ldr	r2, [r4, #16]
 80114cc:	6022      	str	r2, [r4, #0]
 80114ce:	d504      	bpl.n	80114da <__sflush_r+0x7e>
 80114d0:	1c42      	adds	r2, r0, #1
 80114d2:	d101      	bne.n	80114d8 <__sflush_r+0x7c>
 80114d4:	682b      	ldr	r3, [r5, #0]
 80114d6:	b903      	cbnz	r3, 80114da <__sflush_r+0x7e>
 80114d8:	6560      	str	r0, [r4, #84]	; 0x54
 80114da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114dc:	602f      	str	r7, [r5, #0]
 80114de:	2900      	cmp	r1, #0
 80114e0:	d0c9      	beq.n	8011476 <__sflush_r+0x1a>
 80114e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114e6:	4299      	cmp	r1, r3
 80114e8:	d002      	beq.n	80114f0 <__sflush_r+0x94>
 80114ea:	4628      	mov	r0, r5
 80114ec:	f7fd fefa 	bl	800f2e4 <_free_r>
 80114f0:	2000      	movs	r0, #0
 80114f2:	6360      	str	r0, [r4, #52]	; 0x34
 80114f4:	e7c0      	b.n	8011478 <__sflush_r+0x1c>
 80114f6:	2301      	movs	r3, #1
 80114f8:	4628      	mov	r0, r5
 80114fa:	47b0      	blx	r6
 80114fc:	1c41      	adds	r1, r0, #1
 80114fe:	d1c8      	bne.n	8011492 <__sflush_r+0x36>
 8011500:	682b      	ldr	r3, [r5, #0]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d0c5      	beq.n	8011492 <__sflush_r+0x36>
 8011506:	2b1d      	cmp	r3, #29
 8011508:	d001      	beq.n	801150e <__sflush_r+0xb2>
 801150a:	2b16      	cmp	r3, #22
 801150c:	d101      	bne.n	8011512 <__sflush_r+0xb6>
 801150e:	602f      	str	r7, [r5, #0]
 8011510:	e7b1      	b.n	8011476 <__sflush_r+0x1a>
 8011512:	89a3      	ldrh	r3, [r4, #12]
 8011514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011518:	81a3      	strh	r3, [r4, #12]
 801151a:	e7ad      	b.n	8011478 <__sflush_r+0x1c>
 801151c:	690f      	ldr	r7, [r1, #16]
 801151e:	2f00      	cmp	r7, #0
 8011520:	d0a9      	beq.n	8011476 <__sflush_r+0x1a>
 8011522:	0793      	lsls	r3, r2, #30
 8011524:	680e      	ldr	r6, [r1, #0]
 8011526:	bf08      	it	eq
 8011528:	694b      	ldreq	r3, [r1, #20]
 801152a:	600f      	str	r7, [r1, #0]
 801152c:	bf18      	it	ne
 801152e:	2300      	movne	r3, #0
 8011530:	eba6 0807 	sub.w	r8, r6, r7
 8011534:	608b      	str	r3, [r1, #8]
 8011536:	f1b8 0f00 	cmp.w	r8, #0
 801153a:	dd9c      	ble.n	8011476 <__sflush_r+0x1a>
 801153c:	6a21      	ldr	r1, [r4, #32]
 801153e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011540:	4643      	mov	r3, r8
 8011542:	463a      	mov	r2, r7
 8011544:	4628      	mov	r0, r5
 8011546:	47b0      	blx	r6
 8011548:	2800      	cmp	r0, #0
 801154a:	dc06      	bgt.n	801155a <__sflush_r+0xfe>
 801154c:	89a3      	ldrh	r3, [r4, #12]
 801154e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011552:	81a3      	strh	r3, [r4, #12]
 8011554:	f04f 30ff 	mov.w	r0, #4294967295
 8011558:	e78e      	b.n	8011478 <__sflush_r+0x1c>
 801155a:	4407      	add	r7, r0
 801155c:	eba8 0800 	sub.w	r8, r8, r0
 8011560:	e7e9      	b.n	8011536 <__sflush_r+0xda>
 8011562:	bf00      	nop
 8011564:	dfbffffe 	.word	0xdfbffffe

08011568 <_fflush_r>:
 8011568:	b538      	push	{r3, r4, r5, lr}
 801156a:	690b      	ldr	r3, [r1, #16]
 801156c:	4605      	mov	r5, r0
 801156e:	460c      	mov	r4, r1
 8011570:	b913      	cbnz	r3, 8011578 <_fflush_r+0x10>
 8011572:	2500      	movs	r5, #0
 8011574:	4628      	mov	r0, r5
 8011576:	bd38      	pop	{r3, r4, r5, pc}
 8011578:	b118      	cbz	r0, 8011582 <_fflush_r+0x1a>
 801157a:	6a03      	ldr	r3, [r0, #32]
 801157c:	b90b      	cbnz	r3, 8011582 <_fflush_r+0x1a>
 801157e:	f7fc fe67 	bl	800e250 <__sinit>
 8011582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d0f3      	beq.n	8011572 <_fflush_r+0xa>
 801158a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801158c:	07d0      	lsls	r0, r2, #31
 801158e:	d404      	bmi.n	801159a <_fflush_r+0x32>
 8011590:	0599      	lsls	r1, r3, #22
 8011592:	d402      	bmi.n	801159a <_fflush_r+0x32>
 8011594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011596:	f7fd f80c 	bl	800e5b2 <__retarget_lock_acquire_recursive>
 801159a:	4628      	mov	r0, r5
 801159c:	4621      	mov	r1, r4
 801159e:	f7ff ff5d 	bl	801145c <__sflush_r>
 80115a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115a4:	07da      	lsls	r2, r3, #31
 80115a6:	4605      	mov	r5, r0
 80115a8:	d4e4      	bmi.n	8011574 <_fflush_r+0xc>
 80115aa:	89a3      	ldrh	r3, [r4, #12]
 80115ac:	059b      	lsls	r3, r3, #22
 80115ae:	d4e1      	bmi.n	8011574 <_fflush_r+0xc>
 80115b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115b2:	f7fc ffff 	bl	800e5b4 <__retarget_lock_release_recursive>
 80115b6:	e7dd      	b.n	8011574 <_fflush_r+0xc>

080115b8 <__sccl>:
 80115b8:	b570      	push	{r4, r5, r6, lr}
 80115ba:	780b      	ldrb	r3, [r1, #0]
 80115bc:	4604      	mov	r4, r0
 80115be:	2b5e      	cmp	r3, #94	; 0x5e
 80115c0:	bf0b      	itete	eq
 80115c2:	784b      	ldrbeq	r3, [r1, #1]
 80115c4:	1c4a      	addne	r2, r1, #1
 80115c6:	1c8a      	addeq	r2, r1, #2
 80115c8:	2100      	movne	r1, #0
 80115ca:	bf08      	it	eq
 80115cc:	2101      	moveq	r1, #1
 80115ce:	3801      	subs	r0, #1
 80115d0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80115d4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80115d8:	42a8      	cmp	r0, r5
 80115da:	d1fb      	bne.n	80115d4 <__sccl+0x1c>
 80115dc:	b90b      	cbnz	r3, 80115e2 <__sccl+0x2a>
 80115de:	1e50      	subs	r0, r2, #1
 80115e0:	bd70      	pop	{r4, r5, r6, pc}
 80115e2:	f081 0101 	eor.w	r1, r1, #1
 80115e6:	54e1      	strb	r1, [r4, r3]
 80115e8:	4610      	mov	r0, r2
 80115ea:	4602      	mov	r2, r0
 80115ec:	f812 5b01 	ldrb.w	r5, [r2], #1
 80115f0:	2d2d      	cmp	r5, #45	; 0x2d
 80115f2:	d005      	beq.n	8011600 <__sccl+0x48>
 80115f4:	2d5d      	cmp	r5, #93	; 0x5d
 80115f6:	d016      	beq.n	8011626 <__sccl+0x6e>
 80115f8:	2d00      	cmp	r5, #0
 80115fa:	d0f1      	beq.n	80115e0 <__sccl+0x28>
 80115fc:	462b      	mov	r3, r5
 80115fe:	e7f2      	b.n	80115e6 <__sccl+0x2e>
 8011600:	7846      	ldrb	r6, [r0, #1]
 8011602:	2e5d      	cmp	r6, #93	; 0x5d
 8011604:	d0fa      	beq.n	80115fc <__sccl+0x44>
 8011606:	42b3      	cmp	r3, r6
 8011608:	dcf8      	bgt.n	80115fc <__sccl+0x44>
 801160a:	3002      	adds	r0, #2
 801160c:	461a      	mov	r2, r3
 801160e:	3201      	adds	r2, #1
 8011610:	4296      	cmp	r6, r2
 8011612:	54a1      	strb	r1, [r4, r2]
 8011614:	dcfb      	bgt.n	801160e <__sccl+0x56>
 8011616:	1af2      	subs	r2, r6, r3
 8011618:	3a01      	subs	r2, #1
 801161a:	1c5d      	adds	r5, r3, #1
 801161c:	42b3      	cmp	r3, r6
 801161e:	bfa8      	it	ge
 8011620:	2200      	movge	r2, #0
 8011622:	18ab      	adds	r3, r5, r2
 8011624:	e7e1      	b.n	80115ea <__sccl+0x32>
 8011626:	4610      	mov	r0, r2
 8011628:	e7da      	b.n	80115e0 <__sccl+0x28>

0801162a <__submore>:
 801162a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801162e:	460c      	mov	r4, r1
 8011630:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011632:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011636:	4299      	cmp	r1, r3
 8011638:	d11d      	bne.n	8011676 <__submore+0x4c>
 801163a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801163e:	f7fd fec5 	bl	800f3cc <_malloc_r>
 8011642:	b918      	cbnz	r0, 801164c <__submore+0x22>
 8011644:	f04f 30ff 	mov.w	r0, #4294967295
 8011648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801164c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011650:	63a3      	str	r3, [r4, #56]	; 0x38
 8011652:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011656:	6360      	str	r0, [r4, #52]	; 0x34
 8011658:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801165c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011660:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8011664:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011668:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801166c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011670:	6020      	str	r0, [r4, #0]
 8011672:	2000      	movs	r0, #0
 8011674:	e7e8      	b.n	8011648 <__submore+0x1e>
 8011676:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011678:	0077      	lsls	r7, r6, #1
 801167a:	463a      	mov	r2, r7
 801167c:	f000 fbf1 	bl	8011e62 <_realloc_r>
 8011680:	4605      	mov	r5, r0
 8011682:	2800      	cmp	r0, #0
 8011684:	d0de      	beq.n	8011644 <__submore+0x1a>
 8011686:	eb00 0806 	add.w	r8, r0, r6
 801168a:	4601      	mov	r1, r0
 801168c:	4632      	mov	r2, r6
 801168e:	4640      	mov	r0, r8
 8011690:	f7fc ff99 	bl	800e5c6 <memcpy>
 8011694:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011698:	f8c4 8000 	str.w	r8, [r4]
 801169c:	e7e9      	b.n	8011672 <__submore+0x48>

0801169e <memmove>:
 801169e:	4288      	cmp	r0, r1
 80116a0:	b510      	push	{r4, lr}
 80116a2:	eb01 0402 	add.w	r4, r1, r2
 80116a6:	d902      	bls.n	80116ae <memmove+0x10>
 80116a8:	4284      	cmp	r4, r0
 80116aa:	4623      	mov	r3, r4
 80116ac:	d807      	bhi.n	80116be <memmove+0x20>
 80116ae:	1e43      	subs	r3, r0, #1
 80116b0:	42a1      	cmp	r1, r4
 80116b2:	d008      	beq.n	80116c6 <memmove+0x28>
 80116b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80116b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80116bc:	e7f8      	b.n	80116b0 <memmove+0x12>
 80116be:	4402      	add	r2, r0
 80116c0:	4601      	mov	r1, r0
 80116c2:	428a      	cmp	r2, r1
 80116c4:	d100      	bne.n	80116c8 <memmove+0x2a>
 80116c6:	bd10      	pop	{r4, pc}
 80116c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80116cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80116d0:	e7f7      	b.n	80116c2 <memmove+0x24>

080116d2 <strncmp>:
 80116d2:	b510      	push	{r4, lr}
 80116d4:	b16a      	cbz	r2, 80116f2 <strncmp+0x20>
 80116d6:	3901      	subs	r1, #1
 80116d8:	1884      	adds	r4, r0, r2
 80116da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d103      	bne.n	80116ee <strncmp+0x1c>
 80116e6:	42a0      	cmp	r0, r4
 80116e8:	d001      	beq.n	80116ee <strncmp+0x1c>
 80116ea:	2a00      	cmp	r2, #0
 80116ec:	d1f5      	bne.n	80116da <strncmp+0x8>
 80116ee:	1ad0      	subs	r0, r2, r3
 80116f0:	bd10      	pop	{r4, pc}
 80116f2:	4610      	mov	r0, r2
 80116f4:	e7fc      	b.n	80116f0 <strncmp+0x1e>
	...

080116f8 <_sbrk_r>:
 80116f8:	b538      	push	{r3, r4, r5, lr}
 80116fa:	4d06      	ldr	r5, [pc, #24]	; (8011714 <_sbrk_r+0x1c>)
 80116fc:	2300      	movs	r3, #0
 80116fe:	4604      	mov	r4, r0
 8011700:	4608      	mov	r0, r1
 8011702:	602b      	str	r3, [r5, #0]
 8011704:	f7f2 f8d2 	bl	80038ac <_sbrk>
 8011708:	1c43      	adds	r3, r0, #1
 801170a:	d102      	bne.n	8011712 <_sbrk_r+0x1a>
 801170c:	682b      	ldr	r3, [r5, #0]
 801170e:	b103      	cbz	r3, 8011712 <_sbrk_r+0x1a>
 8011710:	6023      	str	r3, [r4, #0]
 8011712:	bd38      	pop	{r3, r4, r5, pc}
 8011714:	20008c5c 	.word	0x20008c5c

08011718 <nan>:
 8011718:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011720 <nan+0x8>
 801171c:	4770      	bx	lr
 801171e:	bf00      	nop
 8011720:	00000000 	.word	0x00000000
 8011724:	7ff80000 	.word	0x7ff80000

08011728 <__assert_func>:
 8011728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801172a:	4614      	mov	r4, r2
 801172c:	461a      	mov	r2, r3
 801172e:	4b09      	ldr	r3, [pc, #36]	; (8011754 <__assert_func+0x2c>)
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	4605      	mov	r5, r0
 8011734:	68d8      	ldr	r0, [r3, #12]
 8011736:	b14c      	cbz	r4, 801174c <__assert_func+0x24>
 8011738:	4b07      	ldr	r3, [pc, #28]	; (8011758 <__assert_func+0x30>)
 801173a:	9100      	str	r1, [sp, #0]
 801173c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011740:	4906      	ldr	r1, [pc, #24]	; (801175c <__assert_func+0x34>)
 8011742:	462b      	mov	r3, r5
 8011744:	f000 fc3e 	bl	8011fc4 <fiprintf>
 8011748:	f000 fc4e 	bl	8011fe8 <abort>
 801174c:	4b04      	ldr	r3, [pc, #16]	; (8011760 <__assert_func+0x38>)
 801174e:	461c      	mov	r4, r3
 8011750:	e7f3      	b.n	801173a <__assert_func+0x12>
 8011752:	bf00      	nop
 8011754:	20000130 	.word	0x20000130
 8011758:	08014195 	.word	0x08014195
 801175c:	080141a2 	.word	0x080141a2
 8011760:	080141d0 	.word	0x080141d0

08011764 <_calloc_r>:
 8011764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011766:	fba1 2402 	umull	r2, r4, r1, r2
 801176a:	b94c      	cbnz	r4, 8011780 <_calloc_r+0x1c>
 801176c:	4611      	mov	r1, r2
 801176e:	9201      	str	r2, [sp, #4]
 8011770:	f7fd fe2c 	bl	800f3cc <_malloc_r>
 8011774:	9a01      	ldr	r2, [sp, #4]
 8011776:	4605      	mov	r5, r0
 8011778:	b930      	cbnz	r0, 8011788 <_calloc_r+0x24>
 801177a:	4628      	mov	r0, r5
 801177c:	b003      	add	sp, #12
 801177e:	bd30      	pop	{r4, r5, pc}
 8011780:	220c      	movs	r2, #12
 8011782:	6002      	str	r2, [r0, #0]
 8011784:	2500      	movs	r5, #0
 8011786:	e7f8      	b.n	801177a <_calloc_r+0x16>
 8011788:	4621      	mov	r1, r4
 801178a:	f7fc fe28 	bl	800e3de <memset>
 801178e:	e7f4      	b.n	801177a <_calloc_r+0x16>

08011790 <rshift>:
 8011790:	6903      	ldr	r3, [r0, #16]
 8011792:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011796:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801179a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801179e:	f100 0414 	add.w	r4, r0, #20
 80117a2:	dd45      	ble.n	8011830 <rshift+0xa0>
 80117a4:	f011 011f 	ands.w	r1, r1, #31
 80117a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80117ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80117b0:	d10c      	bne.n	80117cc <rshift+0x3c>
 80117b2:	f100 0710 	add.w	r7, r0, #16
 80117b6:	4629      	mov	r1, r5
 80117b8:	42b1      	cmp	r1, r6
 80117ba:	d334      	bcc.n	8011826 <rshift+0x96>
 80117bc:	1a9b      	subs	r3, r3, r2
 80117be:	009b      	lsls	r3, r3, #2
 80117c0:	1eea      	subs	r2, r5, #3
 80117c2:	4296      	cmp	r6, r2
 80117c4:	bf38      	it	cc
 80117c6:	2300      	movcc	r3, #0
 80117c8:	4423      	add	r3, r4
 80117ca:	e015      	b.n	80117f8 <rshift+0x68>
 80117cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80117d0:	f1c1 0820 	rsb	r8, r1, #32
 80117d4:	40cf      	lsrs	r7, r1
 80117d6:	f105 0e04 	add.w	lr, r5, #4
 80117da:	46a1      	mov	r9, r4
 80117dc:	4576      	cmp	r6, lr
 80117de:	46f4      	mov	ip, lr
 80117e0:	d815      	bhi.n	801180e <rshift+0x7e>
 80117e2:	1a9a      	subs	r2, r3, r2
 80117e4:	0092      	lsls	r2, r2, #2
 80117e6:	3a04      	subs	r2, #4
 80117e8:	3501      	adds	r5, #1
 80117ea:	42ae      	cmp	r6, r5
 80117ec:	bf38      	it	cc
 80117ee:	2200      	movcc	r2, #0
 80117f0:	18a3      	adds	r3, r4, r2
 80117f2:	50a7      	str	r7, [r4, r2]
 80117f4:	b107      	cbz	r7, 80117f8 <rshift+0x68>
 80117f6:	3304      	adds	r3, #4
 80117f8:	1b1a      	subs	r2, r3, r4
 80117fa:	42a3      	cmp	r3, r4
 80117fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011800:	bf08      	it	eq
 8011802:	2300      	moveq	r3, #0
 8011804:	6102      	str	r2, [r0, #16]
 8011806:	bf08      	it	eq
 8011808:	6143      	streq	r3, [r0, #20]
 801180a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801180e:	f8dc c000 	ldr.w	ip, [ip]
 8011812:	fa0c fc08 	lsl.w	ip, ip, r8
 8011816:	ea4c 0707 	orr.w	r7, ip, r7
 801181a:	f849 7b04 	str.w	r7, [r9], #4
 801181e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011822:	40cf      	lsrs	r7, r1
 8011824:	e7da      	b.n	80117dc <rshift+0x4c>
 8011826:	f851 cb04 	ldr.w	ip, [r1], #4
 801182a:	f847 cf04 	str.w	ip, [r7, #4]!
 801182e:	e7c3      	b.n	80117b8 <rshift+0x28>
 8011830:	4623      	mov	r3, r4
 8011832:	e7e1      	b.n	80117f8 <rshift+0x68>

08011834 <__hexdig_fun>:
 8011834:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011838:	2b09      	cmp	r3, #9
 801183a:	d802      	bhi.n	8011842 <__hexdig_fun+0xe>
 801183c:	3820      	subs	r0, #32
 801183e:	b2c0      	uxtb	r0, r0
 8011840:	4770      	bx	lr
 8011842:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011846:	2b05      	cmp	r3, #5
 8011848:	d801      	bhi.n	801184e <__hexdig_fun+0x1a>
 801184a:	3847      	subs	r0, #71	; 0x47
 801184c:	e7f7      	b.n	801183e <__hexdig_fun+0xa>
 801184e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011852:	2b05      	cmp	r3, #5
 8011854:	d801      	bhi.n	801185a <__hexdig_fun+0x26>
 8011856:	3827      	subs	r0, #39	; 0x27
 8011858:	e7f1      	b.n	801183e <__hexdig_fun+0xa>
 801185a:	2000      	movs	r0, #0
 801185c:	4770      	bx	lr
	...

08011860 <__gethex>:
 8011860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011864:	4617      	mov	r7, r2
 8011866:	680a      	ldr	r2, [r1, #0]
 8011868:	b085      	sub	sp, #20
 801186a:	f102 0b02 	add.w	fp, r2, #2
 801186e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011872:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011876:	4681      	mov	r9, r0
 8011878:	468a      	mov	sl, r1
 801187a:	9302      	str	r3, [sp, #8]
 801187c:	32fe      	adds	r2, #254	; 0xfe
 801187e:	eb02 030b 	add.w	r3, r2, fp
 8011882:	46d8      	mov	r8, fp
 8011884:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8011888:	9301      	str	r3, [sp, #4]
 801188a:	2830      	cmp	r0, #48	; 0x30
 801188c:	d0f7      	beq.n	801187e <__gethex+0x1e>
 801188e:	f7ff ffd1 	bl	8011834 <__hexdig_fun>
 8011892:	4604      	mov	r4, r0
 8011894:	2800      	cmp	r0, #0
 8011896:	d138      	bne.n	801190a <__gethex+0xaa>
 8011898:	49a7      	ldr	r1, [pc, #668]	; (8011b38 <__gethex+0x2d8>)
 801189a:	2201      	movs	r2, #1
 801189c:	4640      	mov	r0, r8
 801189e:	f7ff ff18 	bl	80116d2 <strncmp>
 80118a2:	4606      	mov	r6, r0
 80118a4:	2800      	cmp	r0, #0
 80118a6:	d169      	bne.n	801197c <__gethex+0x11c>
 80118a8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80118ac:	465d      	mov	r5, fp
 80118ae:	f7ff ffc1 	bl	8011834 <__hexdig_fun>
 80118b2:	2800      	cmp	r0, #0
 80118b4:	d064      	beq.n	8011980 <__gethex+0x120>
 80118b6:	465a      	mov	r2, fp
 80118b8:	7810      	ldrb	r0, [r2, #0]
 80118ba:	2830      	cmp	r0, #48	; 0x30
 80118bc:	4690      	mov	r8, r2
 80118be:	f102 0201 	add.w	r2, r2, #1
 80118c2:	d0f9      	beq.n	80118b8 <__gethex+0x58>
 80118c4:	f7ff ffb6 	bl	8011834 <__hexdig_fun>
 80118c8:	2301      	movs	r3, #1
 80118ca:	fab0 f480 	clz	r4, r0
 80118ce:	0964      	lsrs	r4, r4, #5
 80118d0:	465e      	mov	r6, fp
 80118d2:	9301      	str	r3, [sp, #4]
 80118d4:	4642      	mov	r2, r8
 80118d6:	4615      	mov	r5, r2
 80118d8:	3201      	adds	r2, #1
 80118da:	7828      	ldrb	r0, [r5, #0]
 80118dc:	f7ff ffaa 	bl	8011834 <__hexdig_fun>
 80118e0:	2800      	cmp	r0, #0
 80118e2:	d1f8      	bne.n	80118d6 <__gethex+0x76>
 80118e4:	4994      	ldr	r1, [pc, #592]	; (8011b38 <__gethex+0x2d8>)
 80118e6:	2201      	movs	r2, #1
 80118e8:	4628      	mov	r0, r5
 80118ea:	f7ff fef2 	bl	80116d2 <strncmp>
 80118ee:	b978      	cbnz	r0, 8011910 <__gethex+0xb0>
 80118f0:	b946      	cbnz	r6, 8011904 <__gethex+0xa4>
 80118f2:	1c6e      	adds	r6, r5, #1
 80118f4:	4632      	mov	r2, r6
 80118f6:	4615      	mov	r5, r2
 80118f8:	3201      	adds	r2, #1
 80118fa:	7828      	ldrb	r0, [r5, #0]
 80118fc:	f7ff ff9a 	bl	8011834 <__hexdig_fun>
 8011900:	2800      	cmp	r0, #0
 8011902:	d1f8      	bne.n	80118f6 <__gethex+0x96>
 8011904:	1b73      	subs	r3, r6, r5
 8011906:	009e      	lsls	r6, r3, #2
 8011908:	e004      	b.n	8011914 <__gethex+0xb4>
 801190a:	2400      	movs	r4, #0
 801190c:	4626      	mov	r6, r4
 801190e:	e7e1      	b.n	80118d4 <__gethex+0x74>
 8011910:	2e00      	cmp	r6, #0
 8011912:	d1f7      	bne.n	8011904 <__gethex+0xa4>
 8011914:	782b      	ldrb	r3, [r5, #0]
 8011916:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801191a:	2b50      	cmp	r3, #80	; 0x50
 801191c:	d13d      	bne.n	801199a <__gethex+0x13a>
 801191e:	786b      	ldrb	r3, [r5, #1]
 8011920:	2b2b      	cmp	r3, #43	; 0x2b
 8011922:	d02f      	beq.n	8011984 <__gethex+0x124>
 8011924:	2b2d      	cmp	r3, #45	; 0x2d
 8011926:	d031      	beq.n	801198c <__gethex+0x12c>
 8011928:	1c69      	adds	r1, r5, #1
 801192a:	f04f 0b00 	mov.w	fp, #0
 801192e:	7808      	ldrb	r0, [r1, #0]
 8011930:	f7ff ff80 	bl	8011834 <__hexdig_fun>
 8011934:	1e42      	subs	r2, r0, #1
 8011936:	b2d2      	uxtb	r2, r2
 8011938:	2a18      	cmp	r2, #24
 801193a:	d82e      	bhi.n	801199a <__gethex+0x13a>
 801193c:	f1a0 0210 	sub.w	r2, r0, #16
 8011940:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011944:	f7ff ff76 	bl	8011834 <__hexdig_fun>
 8011948:	f100 3cff 	add.w	ip, r0, #4294967295
 801194c:	fa5f fc8c 	uxtb.w	ip, ip
 8011950:	f1bc 0f18 	cmp.w	ip, #24
 8011954:	d91d      	bls.n	8011992 <__gethex+0x132>
 8011956:	f1bb 0f00 	cmp.w	fp, #0
 801195a:	d000      	beq.n	801195e <__gethex+0xfe>
 801195c:	4252      	negs	r2, r2
 801195e:	4416      	add	r6, r2
 8011960:	f8ca 1000 	str.w	r1, [sl]
 8011964:	b1dc      	cbz	r4, 801199e <__gethex+0x13e>
 8011966:	9b01      	ldr	r3, [sp, #4]
 8011968:	2b00      	cmp	r3, #0
 801196a:	bf14      	ite	ne
 801196c:	f04f 0800 	movne.w	r8, #0
 8011970:	f04f 0806 	moveq.w	r8, #6
 8011974:	4640      	mov	r0, r8
 8011976:	b005      	add	sp, #20
 8011978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801197c:	4645      	mov	r5, r8
 801197e:	4626      	mov	r6, r4
 8011980:	2401      	movs	r4, #1
 8011982:	e7c7      	b.n	8011914 <__gethex+0xb4>
 8011984:	f04f 0b00 	mov.w	fp, #0
 8011988:	1ca9      	adds	r1, r5, #2
 801198a:	e7d0      	b.n	801192e <__gethex+0xce>
 801198c:	f04f 0b01 	mov.w	fp, #1
 8011990:	e7fa      	b.n	8011988 <__gethex+0x128>
 8011992:	230a      	movs	r3, #10
 8011994:	fb03 0002 	mla	r0, r3, r2, r0
 8011998:	e7d0      	b.n	801193c <__gethex+0xdc>
 801199a:	4629      	mov	r1, r5
 801199c:	e7e0      	b.n	8011960 <__gethex+0x100>
 801199e:	eba5 0308 	sub.w	r3, r5, r8
 80119a2:	3b01      	subs	r3, #1
 80119a4:	4621      	mov	r1, r4
 80119a6:	2b07      	cmp	r3, #7
 80119a8:	dc0a      	bgt.n	80119c0 <__gethex+0x160>
 80119aa:	4648      	mov	r0, r9
 80119ac:	f7fd fd9a 	bl	800f4e4 <_Balloc>
 80119b0:	4604      	mov	r4, r0
 80119b2:	b940      	cbnz	r0, 80119c6 <__gethex+0x166>
 80119b4:	4b61      	ldr	r3, [pc, #388]	; (8011b3c <__gethex+0x2dc>)
 80119b6:	4602      	mov	r2, r0
 80119b8:	21e4      	movs	r1, #228	; 0xe4
 80119ba:	4861      	ldr	r0, [pc, #388]	; (8011b40 <__gethex+0x2e0>)
 80119bc:	f7ff feb4 	bl	8011728 <__assert_func>
 80119c0:	3101      	adds	r1, #1
 80119c2:	105b      	asrs	r3, r3, #1
 80119c4:	e7ef      	b.n	80119a6 <__gethex+0x146>
 80119c6:	f100 0a14 	add.w	sl, r0, #20
 80119ca:	2300      	movs	r3, #0
 80119cc:	495a      	ldr	r1, [pc, #360]	; (8011b38 <__gethex+0x2d8>)
 80119ce:	f8cd a004 	str.w	sl, [sp, #4]
 80119d2:	469b      	mov	fp, r3
 80119d4:	45a8      	cmp	r8, r5
 80119d6:	d342      	bcc.n	8011a5e <__gethex+0x1fe>
 80119d8:	9801      	ldr	r0, [sp, #4]
 80119da:	f840 bb04 	str.w	fp, [r0], #4
 80119de:	eba0 000a 	sub.w	r0, r0, sl
 80119e2:	1080      	asrs	r0, r0, #2
 80119e4:	6120      	str	r0, [r4, #16]
 80119e6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80119ea:	4658      	mov	r0, fp
 80119ec:	f7fd fe6c 	bl	800f6c8 <__hi0bits>
 80119f0:	683d      	ldr	r5, [r7, #0]
 80119f2:	eba8 0000 	sub.w	r0, r8, r0
 80119f6:	42a8      	cmp	r0, r5
 80119f8:	dd59      	ble.n	8011aae <__gethex+0x24e>
 80119fa:	eba0 0805 	sub.w	r8, r0, r5
 80119fe:	4641      	mov	r1, r8
 8011a00:	4620      	mov	r0, r4
 8011a02:	f7fe f9fb 	bl	800fdfc <__any_on>
 8011a06:	4683      	mov	fp, r0
 8011a08:	b1b8      	cbz	r0, 8011a3a <__gethex+0x1da>
 8011a0a:	f108 33ff 	add.w	r3, r8, #4294967295
 8011a0e:	1159      	asrs	r1, r3, #5
 8011a10:	f003 021f 	and.w	r2, r3, #31
 8011a14:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011a18:	f04f 0b01 	mov.w	fp, #1
 8011a1c:	fa0b f202 	lsl.w	r2, fp, r2
 8011a20:	420a      	tst	r2, r1
 8011a22:	d00a      	beq.n	8011a3a <__gethex+0x1da>
 8011a24:	455b      	cmp	r3, fp
 8011a26:	dd06      	ble.n	8011a36 <__gethex+0x1d6>
 8011a28:	f1a8 0102 	sub.w	r1, r8, #2
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	f7fe f9e5 	bl	800fdfc <__any_on>
 8011a32:	2800      	cmp	r0, #0
 8011a34:	d138      	bne.n	8011aa8 <__gethex+0x248>
 8011a36:	f04f 0b02 	mov.w	fp, #2
 8011a3a:	4641      	mov	r1, r8
 8011a3c:	4620      	mov	r0, r4
 8011a3e:	f7ff fea7 	bl	8011790 <rshift>
 8011a42:	4446      	add	r6, r8
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	42b3      	cmp	r3, r6
 8011a48:	da41      	bge.n	8011ace <__gethex+0x26e>
 8011a4a:	4621      	mov	r1, r4
 8011a4c:	4648      	mov	r0, r9
 8011a4e:	f7fd fd89 	bl	800f564 <_Bfree>
 8011a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a54:	2300      	movs	r3, #0
 8011a56:	6013      	str	r3, [r2, #0]
 8011a58:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8011a5c:	e78a      	b.n	8011974 <__gethex+0x114>
 8011a5e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8011a62:	2a2e      	cmp	r2, #46	; 0x2e
 8011a64:	d014      	beq.n	8011a90 <__gethex+0x230>
 8011a66:	2b20      	cmp	r3, #32
 8011a68:	d106      	bne.n	8011a78 <__gethex+0x218>
 8011a6a:	9b01      	ldr	r3, [sp, #4]
 8011a6c:	f843 bb04 	str.w	fp, [r3], #4
 8011a70:	f04f 0b00 	mov.w	fp, #0
 8011a74:	9301      	str	r3, [sp, #4]
 8011a76:	465b      	mov	r3, fp
 8011a78:	7828      	ldrb	r0, [r5, #0]
 8011a7a:	9303      	str	r3, [sp, #12]
 8011a7c:	f7ff feda 	bl	8011834 <__hexdig_fun>
 8011a80:	9b03      	ldr	r3, [sp, #12]
 8011a82:	f000 000f 	and.w	r0, r0, #15
 8011a86:	4098      	lsls	r0, r3
 8011a88:	ea4b 0b00 	orr.w	fp, fp, r0
 8011a8c:	3304      	adds	r3, #4
 8011a8e:	e7a1      	b.n	80119d4 <__gethex+0x174>
 8011a90:	45a8      	cmp	r8, r5
 8011a92:	d8e8      	bhi.n	8011a66 <__gethex+0x206>
 8011a94:	2201      	movs	r2, #1
 8011a96:	4628      	mov	r0, r5
 8011a98:	9303      	str	r3, [sp, #12]
 8011a9a:	f7ff fe1a 	bl	80116d2 <strncmp>
 8011a9e:	4926      	ldr	r1, [pc, #152]	; (8011b38 <__gethex+0x2d8>)
 8011aa0:	9b03      	ldr	r3, [sp, #12]
 8011aa2:	2800      	cmp	r0, #0
 8011aa4:	d1df      	bne.n	8011a66 <__gethex+0x206>
 8011aa6:	e795      	b.n	80119d4 <__gethex+0x174>
 8011aa8:	f04f 0b03 	mov.w	fp, #3
 8011aac:	e7c5      	b.n	8011a3a <__gethex+0x1da>
 8011aae:	da0b      	bge.n	8011ac8 <__gethex+0x268>
 8011ab0:	eba5 0800 	sub.w	r8, r5, r0
 8011ab4:	4621      	mov	r1, r4
 8011ab6:	4642      	mov	r2, r8
 8011ab8:	4648      	mov	r0, r9
 8011aba:	f7fd ff6d 	bl	800f998 <__lshift>
 8011abe:	eba6 0608 	sub.w	r6, r6, r8
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	f100 0a14 	add.w	sl, r0, #20
 8011ac8:	f04f 0b00 	mov.w	fp, #0
 8011acc:	e7ba      	b.n	8011a44 <__gethex+0x1e4>
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	42b3      	cmp	r3, r6
 8011ad2:	dd73      	ble.n	8011bbc <__gethex+0x35c>
 8011ad4:	1b9e      	subs	r6, r3, r6
 8011ad6:	42b5      	cmp	r5, r6
 8011ad8:	dc34      	bgt.n	8011b44 <__gethex+0x2e4>
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	2b02      	cmp	r3, #2
 8011ade:	d023      	beq.n	8011b28 <__gethex+0x2c8>
 8011ae0:	2b03      	cmp	r3, #3
 8011ae2:	d025      	beq.n	8011b30 <__gethex+0x2d0>
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	d115      	bne.n	8011b14 <__gethex+0x2b4>
 8011ae8:	42b5      	cmp	r5, r6
 8011aea:	d113      	bne.n	8011b14 <__gethex+0x2b4>
 8011aec:	2d01      	cmp	r5, #1
 8011aee:	d10b      	bne.n	8011b08 <__gethex+0x2a8>
 8011af0:	9a02      	ldr	r2, [sp, #8]
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6013      	str	r3, [r2, #0]
 8011af6:	2301      	movs	r3, #1
 8011af8:	6123      	str	r3, [r4, #16]
 8011afa:	f8ca 3000 	str.w	r3, [sl]
 8011afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b00:	f04f 0862 	mov.w	r8, #98	; 0x62
 8011b04:	601c      	str	r4, [r3, #0]
 8011b06:	e735      	b.n	8011974 <__gethex+0x114>
 8011b08:	1e69      	subs	r1, r5, #1
 8011b0a:	4620      	mov	r0, r4
 8011b0c:	f7fe f976 	bl	800fdfc <__any_on>
 8011b10:	2800      	cmp	r0, #0
 8011b12:	d1ed      	bne.n	8011af0 <__gethex+0x290>
 8011b14:	4621      	mov	r1, r4
 8011b16:	4648      	mov	r0, r9
 8011b18:	f7fd fd24 	bl	800f564 <_Bfree>
 8011b1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b1e:	2300      	movs	r3, #0
 8011b20:	6013      	str	r3, [r2, #0]
 8011b22:	f04f 0850 	mov.w	r8, #80	; 0x50
 8011b26:	e725      	b.n	8011974 <__gethex+0x114>
 8011b28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d1f2      	bne.n	8011b14 <__gethex+0x2b4>
 8011b2e:	e7df      	b.n	8011af0 <__gethex+0x290>
 8011b30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d1dc      	bne.n	8011af0 <__gethex+0x290>
 8011b36:	e7ed      	b.n	8011b14 <__gethex+0x2b4>
 8011b38:	0801400c 	.word	0x0801400c
 8011b3c:	08013ea3 	.word	0x08013ea3
 8011b40:	080141d1 	.word	0x080141d1
 8011b44:	f106 38ff 	add.w	r8, r6, #4294967295
 8011b48:	f1bb 0f00 	cmp.w	fp, #0
 8011b4c:	d133      	bne.n	8011bb6 <__gethex+0x356>
 8011b4e:	f1b8 0f00 	cmp.w	r8, #0
 8011b52:	d004      	beq.n	8011b5e <__gethex+0x2fe>
 8011b54:	4641      	mov	r1, r8
 8011b56:	4620      	mov	r0, r4
 8011b58:	f7fe f950 	bl	800fdfc <__any_on>
 8011b5c:	4683      	mov	fp, r0
 8011b5e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8011b62:	2301      	movs	r3, #1
 8011b64:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011b68:	f008 081f 	and.w	r8, r8, #31
 8011b6c:	fa03 f308 	lsl.w	r3, r3, r8
 8011b70:	4213      	tst	r3, r2
 8011b72:	4631      	mov	r1, r6
 8011b74:	4620      	mov	r0, r4
 8011b76:	bf18      	it	ne
 8011b78:	f04b 0b02 	orrne.w	fp, fp, #2
 8011b7c:	1bad      	subs	r5, r5, r6
 8011b7e:	f7ff fe07 	bl	8011790 <rshift>
 8011b82:	687e      	ldr	r6, [r7, #4]
 8011b84:	f04f 0802 	mov.w	r8, #2
 8011b88:	f1bb 0f00 	cmp.w	fp, #0
 8011b8c:	d04a      	beq.n	8011c24 <__gethex+0x3c4>
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	2b02      	cmp	r3, #2
 8011b92:	d016      	beq.n	8011bc2 <__gethex+0x362>
 8011b94:	2b03      	cmp	r3, #3
 8011b96:	d018      	beq.n	8011bca <__gethex+0x36a>
 8011b98:	2b01      	cmp	r3, #1
 8011b9a:	d109      	bne.n	8011bb0 <__gethex+0x350>
 8011b9c:	f01b 0f02 	tst.w	fp, #2
 8011ba0:	d006      	beq.n	8011bb0 <__gethex+0x350>
 8011ba2:	f8da 3000 	ldr.w	r3, [sl]
 8011ba6:	ea4b 0b03 	orr.w	fp, fp, r3
 8011baa:	f01b 0f01 	tst.w	fp, #1
 8011bae:	d10f      	bne.n	8011bd0 <__gethex+0x370>
 8011bb0:	f048 0810 	orr.w	r8, r8, #16
 8011bb4:	e036      	b.n	8011c24 <__gethex+0x3c4>
 8011bb6:	f04f 0b01 	mov.w	fp, #1
 8011bba:	e7d0      	b.n	8011b5e <__gethex+0x2fe>
 8011bbc:	f04f 0801 	mov.w	r8, #1
 8011bc0:	e7e2      	b.n	8011b88 <__gethex+0x328>
 8011bc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011bc4:	f1c3 0301 	rsb	r3, r3, #1
 8011bc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8011bca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d0ef      	beq.n	8011bb0 <__gethex+0x350>
 8011bd0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011bd4:	f104 0214 	add.w	r2, r4, #20
 8011bd8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011bdc:	9301      	str	r3, [sp, #4]
 8011bde:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8011be2:	2300      	movs	r3, #0
 8011be4:	4694      	mov	ip, r2
 8011be6:	f852 1b04 	ldr.w	r1, [r2], #4
 8011bea:	f1b1 3fff 	cmp.w	r1, #4294967295
 8011bee:	d01e      	beq.n	8011c2e <__gethex+0x3ce>
 8011bf0:	3101      	adds	r1, #1
 8011bf2:	f8cc 1000 	str.w	r1, [ip]
 8011bf6:	f1b8 0f02 	cmp.w	r8, #2
 8011bfa:	f104 0214 	add.w	r2, r4, #20
 8011bfe:	d13d      	bne.n	8011c7c <__gethex+0x41c>
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	3b01      	subs	r3, #1
 8011c04:	42ab      	cmp	r3, r5
 8011c06:	d10b      	bne.n	8011c20 <__gethex+0x3c0>
 8011c08:	1169      	asrs	r1, r5, #5
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	f005 051f 	and.w	r5, r5, #31
 8011c10:	fa03 f505 	lsl.w	r5, r3, r5
 8011c14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011c18:	421d      	tst	r5, r3
 8011c1a:	bf18      	it	ne
 8011c1c:	f04f 0801 	movne.w	r8, #1
 8011c20:	f048 0820 	orr.w	r8, r8, #32
 8011c24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c26:	601c      	str	r4, [r3, #0]
 8011c28:	9b02      	ldr	r3, [sp, #8]
 8011c2a:	601e      	str	r6, [r3, #0]
 8011c2c:	e6a2      	b.n	8011974 <__gethex+0x114>
 8011c2e:	4290      	cmp	r0, r2
 8011c30:	f842 3c04 	str.w	r3, [r2, #-4]
 8011c34:	d8d6      	bhi.n	8011be4 <__gethex+0x384>
 8011c36:	68a2      	ldr	r2, [r4, #8]
 8011c38:	4593      	cmp	fp, r2
 8011c3a:	db17      	blt.n	8011c6c <__gethex+0x40c>
 8011c3c:	6861      	ldr	r1, [r4, #4]
 8011c3e:	4648      	mov	r0, r9
 8011c40:	3101      	adds	r1, #1
 8011c42:	f7fd fc4f 	bl	800f4e4 <_Balloc>
 8011c46:	4682      	mov	sl, r0
 8011c48:	b918      	cbnz	r0, 8011c52 <__gethex+0x3f2>
 8011c4a:	4b1b      	ldr	r3, [pc, #108]	; (8011cb8 <__gethex+0x458>)
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	2184      	movs	r1, #132	; 0x84
 8011c50:	e6b3      	b.n	80119ba <__gethex+0x15a>
 8011c52:	6922      	ldr	r2, [r4, #16]
 8011c54:	3202      	adds	r2, #2
 8011c56:	f104 010c 	add.w	r1, r4, #12
 8011c5a:	0092      	lsls	r2, r2, #2
 8011c5c:	300c      	adds	r0, #12
 8011c5e:	f7fc fcb2 	bl	800e5c6 <memcpy>
 8011c62:	4621      	mov	r1, r4
 8011c64:	4648      	mov	r0, r9
 8011c66:	f7fd fc7d 	bl	800f564 <_Bfree>
 8011c6a:	4654      	mov	r4, sl
 8011c6c:	6922      	ldr	r2, [r4, #16]
 8011c6e:	1c51      	adds	r1, r2, #1
 8011c70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011c74:	6121      	str	r1, [r4, #16]
 8011c76:	2101      	movs	r1, #1
 8011c78:	6151      	str	r1, [r2, #20]
 8011c7a:	e7bc      	b.n	8011bf6 <__gethex+0x396>
 8011c7c:	6921      	ldr	r1, [r4, #16]
 8011c7e:	4559      	cmp	r1, fp
 8011c80:	dd0b      	ble.n	8011c9a <__gethex+0x43a>
 8011c82:	2101      	movs	r1, #1
 8011c84:	4620      	mov	r0, r4
 8011c86:	f7ff fd83 	bl	8011790 <rshift>
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	3601      	adds	r6, #1
 8011c8e:	42b3      	cmp	r3, r6
 8011c90:	f6ff aedb 	blt.w	8011a4a <__gethex+0x1ea>
 8011c94:	f04f 0801 	mov.w	r8, #1
 8011c98:	e7c2      	b.n	8011c20 <__gethex+0x3c0>
 8011c9a:	f015 051f 	ands.w	r5, r5, #31
 8011c9e:	d0f9      	beq.n	8011c94 <__gethex+0x434>
 8011ca0:	9b01      	ldr	r3, [sp, #4]
 8011ca2:	441a      	add	r2, r3
 8011ca4:	f1c5 0520 	rsb	r5, r5, #32
 8011ca8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8011cac:	f7fd fd0c 	bl	800f6c8 <__hi0bits>
 8011cb0:	42a8      	cmp	r0, r5
 8011cb2:	dbe6      	blt.n	8011c82 <__gethex+0x422>
 8011cb4:	e7ee      	b.n	8011c94 <__gethex+0x434>
 8011cb6:	bf00      	nop
 8011cb8:	08013ea3 	.word	0x08013ea3

08011cbc <L_shift>:
 8011cbc:	f1c2 0208 	rsb	r2, r2, #8
 8011cc0:	0092      	lsls	r2, r2, #2
 8011cc2:	b570      	push	{r4, r5, r6, lr}
 8011cc4:	f1c2 0620 	rsb	r6, r2, #32
 8011cc8:	6843      	ldr	r3, [r0, #4]
 8011cca:	6804      	ldr	r4, [r0, #0]
 8011ccc:	fa03 f506 	lsl.w	r5, r3, r6
 8011cd0:	432c      	orrs	r4, r5
 8011cd2:	40d3      	lsrs	r3, r2
 8011cd4:	6004      	str	r4, [r0, #0]
 8011cd6:	f840 3f04 	str.w	r3, [r0, #4]!
 8011cda:	4288      	cmp	r0, r1
 8011cdc:	d3f4      	bcc.n	8011cc8 <L_shift+0xc>
 8011cde:	bd70      	pop	{r4, r5, r6, pc}

08011ce0 <__match>:
 8011ce0:	b530      	push	{r4, r5, lr}
 8011ce2:	6803      	ldr	r3, [r0, #0]
 8011ce4:	3301      	adds	r3, #1
 8011ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cea:	b914      	cbnz	r4, 8011cf2 <__match+0x12>
 8011cec:	6003      	str	r3, [r0, #0]
 8011cee:	2001      	movs	r0, #1
 8011cf0:	bd30      	pop	{r4, r5, pc}
 8011cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cf6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011cfa:	2d19      	cmp	r5, #25
 8011cfc:	bf98      	it	ls
 8011cfe:	3220      	addls	r2, #32
 8011d00:	42a2      	cmp	r2, r4
 8011d02:	d0f0      	beq.n	8011ce6 <__match+0x6>
 8011d04:	2000      	movs	r0, #0
 8011d06:	e7f3      	b.n	8011cf0 <__match+0x10>

08011d08 <__hexnan>:
 8011d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d0c:	680b      	ldr	r3, [r1, #0]
 8011d0e:	6801      	ldr	r1, [r0, #0]
 8011d10:	115e      	asrs	r6, r3, #5
 8011d12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011d16:	f013 031f 	ands.w	r3, r3, #31
 8011d1a:	b087      	sub	sp, #28
 8011d1c:	bf18      	it	ne
 8011d1e:	3604      	addne	r6, #4
 8011d20:	2500      	movs	r5, #0
 8011d22:	1f37      	subs	r7, r6, #4
 8011d24:	4682      	mov	sl, r0
 8011d26:	4690      	mov	r8, r2
 8011d28:	9301      	str	r3, [sp, #4]
 8011d2a:	f846 5c04 	str.w	r5, [r6, #-4]
 8011d2e:	46b9      	mov	r9, r7
 8011d30:	463c      	mov	r4, r7
 8011d32:	9502      	str	r5, [sp, #8]
 8011d34:	46ab      	mov	fp, r5
 8011d36:	784a      	ldrb	r2, [r1, #1]
 8011d38:	1c4b      	adds	r3, r1, #1
 8011d3a:	9303      	str	r3, [sp, #12]
 8011d3c:	b342      	cbz	r2, 8011d90 <__hexnan+0x88>
 8011d3e:	4610      	mov	r0, r2
 8011d40:	9105      	str	r1, [sp, #20]
 8011d42:	9204      	str	r2, [sp, #16]
 8011d44:	f7ff fd76 	bl	8011834 <__hexdig_fun>
 8011d48:	2800      	cmp	r0, #0
 8011d4a:	d14f      	bne.n	8011dec <__hexnan+0xe4>
 8011d4c:	9a04      	ldr	r2, [sp, #16]
 8011d4e:	9905      	ldr	r1, [sp, #20]
 8011d50:	2a20      	cmp	r2, #32
 8011d52:	d818      	bhi.n	8011d86 <__hexnan+0x7e>
 8011d54:	9b02      	ldr	r3, [sp, #8]
 8011d56:	459b      	cmp	fp, r3
 8011d58:	dd13      	ble.n	8011d82 <__hexnan+0x7a>
 8011d5a:	454c      	cmp	r4, r9
 8011d5c:	d206      	bcs.n	8011d6c <__hexnan+0x64>
 8011d5e:	2d07      	cmp	r5, #7
 8011d60:	dc04      	bgt.n	8011d6c <__hexnan+0x64>
 8011d62:	462a      	mov	r2, r5
 8011d64:	4649      	mov	r1, r9
 8011d66:	4620      	mov	r0, r4
 8011d68:	f7ff ffa8 	bl	8011cbc <L_shift>
 8011d6c:	4544      	cmp	r4, r8
 8011d6e:	d950      	bls.n	8011e12 <__hexnan+0x10a>
 8011d70:	2300      	movs	r3, #0
 8011d72:	f1a4 0904 	sub.w	r9, r4, #4
 8011d76:	f844 3c04 	str.w	r3, [r4, #-4]
 8011d7a:	f8cd b008 	str.w	fp, [sp, #8]
 8011d7e:	464c      	mov	r4, r9
 8011d80:	461d      	mov	r5, r3
 8011d82:	9903      	ldr	r1, [sp, #12]
 8011d84:	e7d7      	b.n	8011d36 <__hexnan+0x2e>
 8011d86:	2a29      	cmp	r2, #41	; 0x29
 8011d88:	d155      	bne.n	8011e36 <__hexnan+0x12e>
 8011d8a:	3102      	adds	r1, #2
 8011d8c:	f8ca 1000 	str.w	r1, [sl]
 8011d90:	f1bb 0f00 	cmp.w	fp, #0
 8011d94:	d04f      	beq.n	8011e36 <__hexnan+0x12e>
 8011d96:	454c      	cmp	r4, r9
 8011d98:	d206      	bcs.n	8011da8 <__hexnan+0xa0>
 8011d9a:	2d07      	cmp	r5, #7
 8011d9c:	dc04      	bgt.n	8011da8 <__hexnan+0xa0>
 8011d9e:	462a      	mov	r2, r5
 8011da0:	4649      	mov	r1, r9
 8011da2:	4620      	mov	r0, r4
 8011da4:	f7ff ff8a 	bl	8011cbc <L_shift>
 8011da8:	4544      	cmp	r4, r8
 8011daa:	d934      	bls.n	8011e16 <__hexnan+0x10e>
 8011dac:	f1a8 0204 	sub.w	r2, r8, #4
 8011db0:	4623      	mov	r3, r4
 8011db2:	f853 1b04 	ldr.w	r1, [r3], #4
 8011db6:	f842 1f04 	str.w	r1, [r2, #4]!
 8011dba:	429f      	cmp	r7, r3
 8011dbc:	d2f9      	bcs.n	8011db2 <__hexnan+0xaa>
 8011dbe:	1b3b      	subs	r3, r7, r4
 8011dc0:	f023 0303 	bic.w	r3, r3, #3
 8011dc4:	3304      	adds	r3, #4
 8011dc6:	3e03      	subs	r6, #3
 8011dc8:	3401      	adds	r4, #1
 8011dca:	42a6      	cmp	r6, r4
 8011dcc:	bf38      	it	cc
 8011dce:	2304      	movcc	r3, #4
 8011dd0:	4443      	add	r3, r8
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	f843 2b04 	str.w	r2, [r3], #4
 8011dd8:	429f      	cmp	r7, r3
 8011dda:	d2fb      	bcs.n	8011dd4 <__hexnan+0xcc>
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	b91b      	cbnz	r3, 8011de8 <__hexnan+0xe0>
 8011de0:	4547      	cmp	r7, r8
 8011de2:	d126      	bne.n	8011e32 <__hexnan+0x12a>
 8011de4:	2301      	movs	r3, #1
 8011de6:	603b      	str	r3, [r7, #0]
 8011de8:	2005      	movs	r0, #5
 8011dea:	e025      	b.n	8011e38 <__hexnan+0x130>
 8011dec:	3501      	adds	r5, #1
 8011dee:	2d08      	cmp	r5, #8
 8011df0:	f10b 0b01 	add.w	fp, fp, #1
 8011df4:	dd06      	ble.n	8011e04 <__hexnan+0xfc>
 8011df6:	4544      	cmp	r4, r8
 8011df8:	d9c3      	bls.n	8011d82 <__hexnan+0x7a>
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	f844 3c04 	str.w	r3, [r4, #-4]
 8011e00:	2501      	movs	r5, #1
 8011e02:	3c04      	subs	r4, #4
 8011e04:	6822      	ldr	r2, [r4, #0]
 8011e06:	f000 000f 	and.w	r0, r0, #15
 8011e0a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011e0e:	6020      	str	r0, [r4, #0]
 8011e10:	e7b7      	b.n	8011d82 <__hexnan+0x7a>
 8011e12:	2508      	movs	r5, #8
 8011e14:	e7b5      	b.n	8011d82 <__hexnan+0x7a>
 8011e16:	9b01      	ldr	r3, [sp, #4]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d0df      	beq.n	8011ddc <__hexnan+0xd4>
 8011e1c:	f1c3 0320 	rsb	r3, r3, #32
 8011e20:	f04f 32ff 	mov.w	r2, #4294967295
 8011e24:	40da      	lsrs	r2, r3
 8011e26:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011e2a:	4013      	ands	r3, r2
 8011e2c:	f846 3c04 	str.w	r3, [r6, #-4]
 8011e30:	e7d4      	b.n	8011ddc <__hexnan+0xd4>
 8011e32:	3f04      	subs	r7, #4
 8011e34:	e7d2      	b.n	8011ddc <__hexnan+0xd4>
 8011e36:	2004      	movs	r0, #4
 8011e38:	b007      	add	sp, #28
 8011e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e3e <__ascii_mbtowc>:
 8011e3e:	b082      	sub	sp, #8
 8011e40:	b901      	cbnz	r1, 8011e44 <__ascii_mbtowc+0x6>
 8011e42:	a901      	add	r1, sp, #4
 8011e44:	b142      	cbz	r2, 8011e58 <__ascii_mbtowc+0x1a>
 8011e46:	b14b      	cbz	r3, 8011e5c <__ascii_mbtowc+0x1e>
 8011e48:	7813      	ldrb	r3, [r2, #0]
 8011e4a:	600b      	str	r3, [r1, #0]
 8011e4c:	7812      	ldrb	r2, [r2, #0]
 8011e4e:	1e10      	subs	r0, r2, #0
 8011e50:	bf18      	it	ne
 8011e52:	2001      	movne	r0, #1
 8011e54:	b002      	add	sp, #8
 8011e56:	4770      	bx	lr
 8011e58:	4610      	mov	r0, r2
 8011e5a:	e7fb      	b.n	8011e54 <__ascii_mbtowc+0x16>
 8011e5c:	f06f 0001 	mvn.w	r0, #1
 8011e60:	e7f8      	b.n	8011e54 <__ascii_mbtowc+0x16>

08011e62 <_realloc_r>:
 8011e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e66:	4680      	mov	r8, r0
 8011e68:	4614      	mov	r4, r2
 8011e6a:	460e      	mov	r6, r1
 8011e6c:	b921      	cbnz	r1, 8011e78 <_realloc_r+0x16>
 8011e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e72:	4611      	mov	r1, r2
 8011e74:	f7fd baaa 	b.w	800f3cc <_malloc_r>
 8011e78:	b92a      	cbnz	r2, 8011e86 <_realloc_r+0x24>
 8011e7a:	f7fd fa33 	bl	800f2e4 <_free_r>
 8011e7e:	4625      	mov	r5, r4
 8011e80:	4628      	mov	r0, r5
 8011e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e86:	f000 f8b6 	bl	8011ff6 <_malloc_usable_size_r>
 8011e8a:	4284      	cmp	r4, r0
 8011e8c:	4607      	mov	r7, r0
 8011e8e:	d802      	bhi.n	8011e96 <_realloc_r+0x34>
 8011e90:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011e94:	d812      	bhi.n	8011ebc <_realloc_r+0x5a>
 8011e96:	4621      	mov	r1, r4
 8011e98:	4640      	mov	r0, r8
 8011e9a:	f7fd fa97 	bl	800f3cc <_malloc_r>
 8011e9e:	4605      	mov	r5, r0
 8011ea0:	2800      	cmp	r0, #0
 8011ea2:	d0ed      	beq.n	8011e80 <_realloc_r+0x1e>
 8011ea4:	42bc      	cmp	r4, r7
 8011ea6:	4622      	mov	r2, r4
 8011ea8:	4631      	mov	r1, r6
 8011eaa:	bf28      	it	cs
 8011eac:	463a      	movcs	r2, r7
 8011eae:	f7fc fb8a 	bl	800e5c6 <memcpy>
 8011eb2:	4631      	mov	r1, r6
 8011eb4:	4640      	mov	r0, r8
 8011eb6:	f7fd fa15 	bl	800f2e4 <_free_r>
 8011eba:	e7e1      	b.n	8011e80 <_realloc_r+0x1e>
 8011ebc:	4635      	mov	r5, r6
 8011ebe:	e7df      	b.n	8011e80 <_realloc_r+0x1e>

08011ec0 <_strtoul_l.constprop.0>:
 8011ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ec4:	4f36      	ldr	r7, [pc, #216]	; (8011fa0 <_strtoul_l.constprop.0+0xe0>)
 8011ec6:	4686      	mov	lr, r0
 8011ec8:	460d      	mov	r5, r1
 8011eca:	4628      	mov	r0, r5
 8011ecc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ed0:	5d3e      	ldrb	r6, [r7, r4]
 8011ed2:	f016 0608 	ands.w	r6, r6, #8
 8011ed6:	d1f8      	bne.n	8011eca <_strtoul_l.constprop.0+0xa>
 8011ed8:	2c2d      	cmp	r4, #45	; 0x2d
 8011eda:	d130      	bne.n	8011f3e <_strtoul_l.constprop.0+0x7e>
 8011edc:	782c      	ldrb	r4, [r5, #0]
 8011ede:	2601      	movs	r6, #1
 8011ee0:	1c85      	adds	r5, r0, #2
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d057      	beq.n	8011f96 <_strtoul_l.constprop.0+0xd6>
 8011ee6:	2b10      	cmp	r3, #16
 8011ee8:	d109      	bne.n	8011efe <_strtoul_l.constprop.0+0x3e>
 8011eea:	2c30      	cmp	r4, #48	; 0x30
 8011eec:	d107      	bne.n	8011efe <_strtoul_l.constprop.0+0x3e>
 8011eee:	7828      	ldrb	r0, [r5, #0]
 8011ef0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011ef4:	2858      	cmp	r0, #88	; 0x58
 8011ef6:	d149      	bne.n	8011f8c <_strtoul_l.constprop.0+0xcc>
 8011ef8:	786c      	ldrb	r4, [r5, #1]
 8011efa:	2310      	movs	r3, #16
 8011efc:	3502      	adds	r5, #2
 8011efe:	f04f 38ff 	mov.w	r8, #4294967295
 8011f02:	2700      	movs	r7, #0
 8011f04:	fbb8 f8f3 	udiv	r8, r8, r3
 8011f08:	fb03 f908 	mul.w	r9, r3, r8
 8011f0c:	ea6f 0909 	mvn.w	r9, r9
 8011f10:	4638      	mov	r0, r7
 8011f12:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011f16:	f1bc 0f09 	cmp.w	ip, #9
 8011f1a:	d815      	bhi.n	8011f48 <_strtoul_l.constprop.0+0x88>
 8011f1c:	4664      	mov	r4, ip
 8011f1e:	42a3      	cmp	r3, r4
 8011f20:	dd23      	ble.n	8011f6a <_strtoul_l.constprop.0+0xaa>
 8011f22:	f1b7 3fff 	cmp.w	r7, #4294967295
 8011f26:	d007      	beq.n	8011f38 <_strtoul_l.constprop.0+0x78>
 8011f28:	4580      	cmp	r8, r0
 8011f2a:	d31b      	bcc.n	8011f64 <_strtoul_l.constprop.0+0xa4>
 8011f2c:	d101      	bne.n	8011f32 <_strtoul_l.constprop.0+0x72>
 8011f2e:	45a1      	cmp	r9, r4
 8011f30:	db18      	blt.n	8011f64 <_strtoul_l.constprop.0+0xa4>
 8011f32:	fb00 4003 	mla	r0, r0, r3, r4
 8011f36:	2701      	movs	r7, #1
 8011f38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f3c:	e7e9      	b.n	8011f12 <_strtoul_l.constprop.0+0x52>
 8011f3e:	2c2b      	cmp	r4, #43	; 0x2b
 8011f40:	bf04      	itt	eq
 8011f42:	782c      	ldrbeq	r4, [r5, #0]
 8011f44:	1c85      	addeq	r5, r0, #2
 8011f46:	e7cc      	b.n	8011ee2 <_strtoul_l.constprop.0+0x22>
 8011f48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011f4c:	f1bc 0f19 	cmp.w	ip, #25
 8011f50:	d801      	bhi.n	8011f56 <_strtoul_l.constprop.0+0x96>
 8011f52:	3c37      	subs	r4, #55	; 0x37
 8011f54:	e7e3      	b.n	8011f1e <_strtoul_l.constprop.0+0x5e>
 8011f56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011f5a:	f1bc 0f19 	cmp.w	ip, #25
 8011f5e:	d804      	bhi.n	8011f6a <_strtoul_l.constprop.0+0xaa>
 8011f60:	3c57      	subs	r4, #87	; 0x57
 8011f62:	e7dc      	b.n	8011f1e <_strtoul_l.constprop.0+0x5e>
 8011f64:	f04f 37ff 	mov.w	r7, #4294967295
 8011f68:	e7e6      	b.n	8011f38 <_strtoul_l.constprop.0+0x78>
 8011f6a:	1c7b      	adds	r3, r7, #1
 8011f6c:	d106      	bne.n	8011f7c <_strtoul_l.constprop.0+0xbc>
 8011f6e:	2322      	movs	r3, #34	; 0x22
 8011f70:	f8ce 3000 	str.w	r3, [lr]
 8011f74:	4638      	mov	r0, r7
 8011f76:	b932      	cbnz	r2, 8011f86 <_strtoul_l.constprop.0+0xc6>
 8011f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f7c:	b106      	cbz	r6, 8011f80 <_strtoul_l.constprop.0+0xc0>
 8011f7e:	4240      	negs	r0, r0
 8011f80:	2a00      	cmp	r2, #0
 8011f82:	d0f9      	beq.n	8011f78 <_strtoul_l.constprop.0+0xb8>
 8011f84:	b107      	cbz	r7, 8011f88 <_strtoul_l.constprop.0+0xc8>
 8011f86:	1e69      	subs	r1, r5, #1
 8011f88:	6011      	str	r1, [r2, #0]
 8011f8a:	e7f5      	b.n	8011f78 <_strtoul_l.constprop.0+0xb8>
 8011f8c:	2430      	movs	r4, #48	; 0x30
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d1b5      	bne.n	8011efe <_strtoul_l.constprop.0+0x3e>
 8011f92:	2308      	movs	r3, #8
 8011f94:	e7b3      	b.n	8011efe <_strtoul_l.constprop.0+0x3e>
 8011f96:	2c30      	cmp	r4, #48	; 0x30
 8011f98:	d0a9      	beq.n	8011eee <_strtoul_l.constprop.0+0x2e>
 8011f9a:	230a      	movs	r3, #10
 8011f9c:	e7af      	b.n	8011efe <_strtoul_l.constprop.0+0x3e>
 8011f9e:	bf00      	nop
 8011fa0:	08014061 	.word	0x08014061

08011fa4 <_strtoul_r>:
 8011fa4:	f7ff bf8c 	b.w	8011ec0 <_strtoul_l.constprop.0>

08011fa8 <__ascii_wctomb>:
 8011fa8:	b149      	cbz	r1, 8011fbe <__ascii_wctomb+0x16>
 8011faa:	2aff      	cmp	r2, #255	; 0xff
 8011fac:	bf85      	ittet	hi
 8011fae:	238a      	movhi	r3, #138	; 0x8a
 8011fb0:	6003      	strhi	r3, [r0, #0]
 8011fb2:	700a      	strbls	r2, [r1, #0]
 8011fb4:	f04f 30ff 	movhi.w	r0, #4294967295
 8011fb8:	bf98      	it	ls
 8011fba:	2001      	movls	r0, #1
 8011fbc:	4770      	bx	lr
 8011fbe:	4608      	mov	r0, r1
 8011fc0:	4770      	bx	lr
	...

08011fc4 <fiprintf>:
 8011fc4:	b40e      	push	{r1, r2, r3}
 8011fc6:	b503      	push	{r0, r1, lr}
 8011fc8:	4601      	mov	r1, r0
 8011fca:	ab03      	add	r3, sp, #12
 8011fcc:	4805      	ldr	r0, [pc, #20]	; (8011fe4 <fiprintf+0x20>)
 8011fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fd2:	6800      	ldr	r0, [r0, #0]
 8011fd4:	9301      	str	r3, [sp, #4]
 8011fd6:	f000 f83f 	bl	8012058 <_vfiprintf_r>
 8011fda:	b002      	add	sp, #8
 8011fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fe0:	b003      	add	sp, #12
 8011fe2:	4770      	bx	lr
 8011fe4:	20000130 	.word	0x20000130

08011fe8 <abort>:
 8011fe8:	b508      	push	{r3, lr}
 8011fea:	2006      	movs	r0, #6
 8011fec:	f000 fa0c 	bl	8012408 <raise>
 8011ff0:	2001      	movs	r0, #1
 8011ff2:	f7f1 fbe3 	bl	80037bc <_exit>

08011ff6 <_malloc_usable_size_r>:
 8011ff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ffa:	1f18      	subs	r0, r3, #4
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	bfbc      	itt	lt
 8012000:	580b      	ldrlt	r3, [r1, r0]
 8012002:	18c0      	addlt	r0, r0, r3
 8012004:	4770      	bx	lr

08012006 <__sfputc_r>:
 8012006:	6893      	ldr	r3, [r2, #8]
 8012008:	3b01      	subs	r3, #1
 801200a:	2b00      	cmp	r3, #0
 801200c:	b410      	push	{r4}
 801200e:	6093      	str	r3, [r2, #8]
 8012010:	da08      	bge.n	8012024 <__sfputc_r+0x1e>
 8012012:	6994      	ldr	r4, [r2, #24]
 8012014:	42a3      	cmp	r3, r4
 8012016:	db01      	blt.n	801201c <__sfputc_r+0x16>
 8012018:	290a      	cmp	r1, #10
 801201a:	d103      	bne.n	8012024 <__sfputc_r+0x1e>
 801201c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012020:	f000 b934 	b.w	801228c <__swbuf_r>
 8012024:	6813      	ldr	r3, [r2, #0]
 8012026:	1c58      	adds	r0, r3, #1
 8012028:	6010      	str	r0, [r2, #0]
 801202a:	7019      	strb	r1, [r3, #0]
 801202c:	4608      	mov	r0, r1
 801202e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012032:	4770      	bx	lr

08012034 <__sfputs_r>:
 8012034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012036:	4606      	mov	r6, r0
 8012038:	460f      	mov	r7, r1
 801203a:	4614      	mov	r4, r2
 801203c:	18d5      	adds	r5, r2, r3
 801203e:	42ac      	cmp	r4, r5
 8012040:	d101      	bne.n	8012046 <__sfputs_r+0x12>
 8012042:	2000      	movs	r0, #0
 8012044:	e007      	b.n	8012056 <__sfputs_r+0x22>
 8012046:	f814 1b01 	ldrb.w	r1, [r4], #1
 801204a:	463a      	mov	r2, r7
 801204c:	4630      	mov	r0, r6
 801204e:	f7ff ffda 	bl	8012006 <__sfputc_r>
 8012052:	1c43      	adds	r3, r0, #1
 8012054:	d1f3      	bne.n	801203e <__sfputs_r+0xa>
 8012056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012058 <_vfiprintf_r>:
 8012058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801205c:	460d      	mov	r5, r1
 801205e:	b09d      	sub	sp, #116	; 0x74
 8012060:	4614      	mov	r4, r2
 8012062:	4698      	mov	r8, r3
 8012064:	4606      	mov	r6, r0
 8012066:	b118      	cbz	r0, 8012070 <_vfiprintf_r+0x18>
 8012068:	6a03      	ldr	r3, [r0, #32]
 801206a:	b90b      	cbnz	r3, 8012070 <_vfiprintf_r+0x18>
 801206c:	f7fc f8f0 	bl	800e250 <__sinit>
 8012070:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012072:	07d9      	lsls	r1, r3, #31
 8012074:	d405      	bmi.n	8012082 <_vfiprintf_r+0x2a>
 8012076:	89ab      	ldrh	r3, [r5, #12]
 8012078:	059a      	lsls	r2, r3, #22
 801207a:	d402      	bmi.n	8012082 <_vfiprintf_r+0x2a>
 801207c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801207e:	f7fc fa98 	bl	800e5b2 <__retarget_lock_acquire_recursive>
 8012082:	89ab      	ldrh	r3, [r5, #12]
 8012084:	071b      	lsls	r3, r3, #28
 8012086:	d501      	bpl.n	801208c <_vfiprintf_r+0x34>
 8012088:	692b      	ldr	r3, [r5, #16]
 801208a:	b99b      	cbnz	r3, 80120b4 <_vfiprintf_r+0x5c>
 801208c:	4629      	mov	r1, r5
 801208e:	4630      	mov	r0, r6
 8012090:	f000 f93a 	bl	8012308 <__swsetup_r>
 8012094:	b170      	cbz	r0, 80120b4 <_vfiprintf_r+0x5c>
 8012096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012098:	07dc      	lsls	r4, r3, #31
 801209a:	d504      	bpl.n	80120a6 <_vfiprintf_r+0x4e>
 801209c:	f04f 30ff 	mov.w	r0, #4294967295
 80120a0:	b01d      	add	sp, #116	; 0x74
 80120a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120a6:	89ab      	ldrh	r3, [r5, #12]
 80120a8:	0598      	lsls	r0, r3, #22
 80120aa:	d4f7      	bmi.n	801209c <_vfiprintf_r+0x44>
 80120ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120ae:	f7fc fa81 	bl	800e5b4 <__retarget_lock_release_recursive>
 80120b2:	e7f3      	b.n	801209c <_vfiprintf_r+0x44>
 80120b4:	2300      	movs	r3, #0
 80120b6:	9309      	str	r3, [sp, #36]	; 0x24
 80120b8:	2320      	movs	r3, #32
 80120ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80120be:	f8cd 800c 	str.w	r8, [sp, #12]
 80120c2:	2330      	movs	r3, #48	; 0x30
 80120c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012278 <_vfiprintf_r+0x220>
 80120c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120cc:	f04f 0901 	mov.w	r9, #1
 80120d0:	4623      	mov	r3, r4
 80120d2:	469a      	mov	sl, r3
 80120d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120d8:	b10a      	cbz	r2, 80120de <_vfiprintf_r+0x86>
 80120da:	2a25      	cmp	r2, #37	; 0x25
 80120dc:	d1f9      	bne.n	80120d2 <_vfiprintf_r+0x7a>
 80120de:	ebba 0b04 	subs.w	fp, sl, r4
 80120e2:	d00b      	beq.n	80120fc <_vfiprintf_r+0xa4>
 80120e4:	465b      	mov	r3, fp
 80120e6:	4622      	mov	r2, r4
 80120e8:	4629      	mov	r1, r5
 80120ea:	4630      	mov	r0, r6
 80120ec:	f7ff ffa2 	bl	8012034 <__sfputs_r>
 80120f0:	3001      	adds	r0, #1
 80120f2:	f000 80a9 	beq.w	8012248 <_vfiprintf_r+0x1f0>
 80120f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120f8:	445a      	add	r2, fp
 80120fa:	9209      	str	r2, [sp, #36]	; 0x24
 80120fc:	f89a 3000 	ldrb.w	r3, [sl]
 8012100:	2b00      	cmp	r3, #0
 8012102:	f000 80a1 	beq.w	8012248 <_vfiprintf_r+0x1f0>
 8012106:	2300      	movs	r3, #0
 8012108:	f04f 32ff 	mov.w	r2, #4294967295
 801210c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012110:	f10a 0a01 	add.w	sl, sl, #1
 8012114:	9304      	str	r3, [sp, #16]
 8012116:	9307      	str	r3, [sp, #28]
 8012118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801211c:	931a      	str	r3, [sp, #104]	; 0x68
 801211e:	4654      	mov	r4, sl
 8012120:	2205      	movs	r2, #5
 8012122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012126:	4854      	ldr	r0, [pc, #336]	; (8012278 <_vfiprintf_r+0x220>)
 8012128:	f7ee f852 	bl	80001d0 <memchr>
 801212c:	9a04      	ldr	r2, [sp, #16]
 801212e:	b9d8      	cbnz	r0, 8012168 <_vfiprintf_r+0x110>
 8012130:	06d1      	lsls	r1, r2, #27
 8012132:	bf44      	itt	mi
 8012134:	2320      	movmi	r3, #32
 8012136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801213a:	0713      	lsls	r3, r2, #28
 801213c:	bf44      	itt	mi
 801213e:	232b      	movmi	r3, #43	; 0x2b
 8012140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012144:	f89a 3000 	ldrb.w	r3, [sl]
 8012148:	2b2a      	cmp	r3, #42	; 0x2a
 801214a:	d015      	beq.n	8012178 <_vfiprintf_r+0x120>
 801214c:	9a07      	ldr	r2, [sp, #28]
 801214e:	4654      	mov	r4, sl
 8012150:	2000      	movs	r0, #0
 8012152:	f04f 0c0a 	mov.w	ip, #10
 8012156:	4621      	mov	r1, r4
 8012158:	f811 3b01 	ldrb.w	r3, [r1], #1
 801215c:	3b30      	subs	r3, #48	; 0x30
 801215e:	2b09      	cmp	r3, #9
 8012160:	d94d      	bls.n	80121fe <_vfiprintf_r+0x1a6>
 8012162:	b1b0      	cbz	r0, 8012192 <_vfiprintf_r+0x13a>
 8012164:	9207      	str	r2, [sp, #28]
 8012166:	e014      	b.n	8012192 <_vfiprintf_r+0x13a>
 8012168:	eba0 0308 	sub.w	r3, r0, r8
 801216c:	fa09 f303 	lsl.w	r3, r9, r3
 8012170:	4313      	orrs	r3, r2
 8012172:	9304      	str	r3, [sp, #16]
 8012174:	46a2      	mov	sl, r4
 8012176:	e7d2      	b.n	801211e <_vfiprintf_r+0xc6>
 8012178:	9b03      	ldr	r3, [sp, #12]
 801217a:	1d19      	adds	r1, r3, #4
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	9103      	str	r1, [sp, #12]
 8012180:	2b00      	cmp	r3, #0
 8012182:	bfbb      	ittet	lt
 8012184:	425b      	neglt	r3, r3
 8012186:	f042 0202 	orrlt.w	r2, r2, #2
 801218a:	9307      	strge	r3, [sp, #28]
 801218c:	9307      	strlt	r3, [sp, #28]
 801218e:	bfb8      	it	lt
 8012190:	9204      	strlt	r2, [sp, #16]
 8012192:	7823      	ldrb	r3, [r4, #0]
 8012194:	2b2e      	cmp	r3, #46	; 0x2e
 8012196:	d10c      	bne.n	80121b2 <_vfiprintf_r+0x15a>
 8012198:	7863      	ldrb	r3, [r4, #1]
 801219a:	2b2a      	cmp	r3, #42	; 0x2a
 801219c:	d134      	bne.n	8012208 <_vfiprintf_r+0x1b0>
 801219e:	9b03      	ldr	r3, [sp, #12]
 80121a0:	1d1a      	adds	r2, r3, #4
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	9203      	str	r2, [sp, #12]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	bfb8      	it	lt
 80121aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80121ae:	3402      	adds	r4, #2
 80121b0:	9305      	str	r3, [sp, #20]
 80121b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012288 <_vfiprintf_r+0x230>
 80121b6:	7821      	ldrb	r1, [r4, #0]
 80121b8:	2203      	movs	r2, #3
 80121ba:	4650      	mov	r0, sl
 80121bc:	f7ee f808 	bl	80001d0 <memchr>
 80121c0:	b138      	cbz	r0, 80121d2 <_vfiprintf_r+0x17a>
 80121c2:	9b04      	ldr	r3, [sp, #16]
 80121c4:	eba0 000a 	sub.w	r0, r0, sl
 80121c8:	2240      	movs	r2, #64	; 0x40
 80121ca:	4082      	lsls	r2, r0
 80121cc:	4313      	orrs	r3, r2
 80121ce:	3401      	adds	r4, #1
 80121d0:	9304      	str	r3, [sp, #16]
 80121d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121d6:	4829      	ldr	r0, [pc, #164]	; (801227c <_vfiprintf_r+0x224>)
 80121d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121dc:	2206      	movs	r2, #6
 80121de:	f7ed fff7 	bl	80001d0 <memchr>
 80121e2:	2800      	cmp	r0, #0
 80121e4:	d03f      	beq.n	8012266 <_vfiprintf_r+0x20e>
 80121e6:	4b26      	ldr	r3, [pc, #152]	; (8012280 <_vfiprintf_r+0x228>)
 80121e8:	bb1b      	cbnz	r3, 8012232 <_vfiprintf_r+0x1da>
 80121ea:	9b03      	ldr	r3, [sp, #12]
 80121ec:	3307      	adds	r3, #7
 80121ee:	f023 0307 	bic.w	r3, r3, #7
 80121f2:	3308      	adds	r3, #8
 80121f4:	9303      	str	r3, [sp, #12]
 80121f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121f8:	443b      	add	r3, r7
 80121fa:	9309      	str	r3, [sp, #36]	; 0x24
 80121fc:	e768      	b.n	80120d0 <_vfiprintf_r+0x78>
 80121fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8012202:	460c      	mov	r4, r1
 8012204:	2001      	movs	r0, #1
 8012206:	e7a6      	b.n	8012156 <_vfiprintf_r+0xfe>
 8012208:	2300      	movs	r3, #0
 801220a:	3401      	adds	r4, #1
 801220c:	9305      	str	r3, [sp, #20]
 801220e:	4619      	mov	r1, r3
 8012210:	f04f 0c0a 	mov.w	ip, #10
 8012214:	4620      	mov	r0, r4
 8012216:	f810 2b01 	ldrb.w	r2, [r0], #1
 801221a:	3a30      	subs	r2, #48	; 0x30
 801221c:	2a09      	cmp	r2, #9
 801221e:	d903      	bls.n	8012228 <_vfiprintf_r+0x1d0>
 8012220:	2b00      	cmp	r3, #0
 8012222:	d0c6      	beq.n	80121b2 <_vfiprintf_r+0x15a>
 8012224:	9105      	str	r1, [sp, #20]
 8012226:	e7c4      	b.n	80121b2 <_vfiprintf_r+0x15a>
 8012228:	fb0c 2101 	mla	r1, ip, r1, r2
 801222c:	4604      	mov	r4, r0
 801222e:	2301      	movs	r3, #1
 8012230:	e7f0      	b.n	8012214 <_vfiprintf_r+0x1bc>
 8012232:	ab03      	add	r3, sp, #12
 8012234:	9300      	str	r3, [sp, #0]
 8012236:	462a      	mov	r2, r5
 8012238:	4b12      	ldr	r3, [pc, #72]	; (8012284 <_vfiprintf_r+0x22c>)
 801223a:	a904      	add	r1, sp, #16
 801223c:	4630      	mov	r0, r6
 801223e:	f7fb f9a5 	bl	800d58c <_printf_float>
 8012242:	4607      	mov	r7, r0
 8012244:	1c78      	adds	r0, r7, #1
 8012246:	d1d6      	bne.n	80121f6 <_vfiprintf_r+0x19e>
 8012248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801224a:	07d9      	lsls	r1, r3, #31
 801224c:	d405      	bmi.n	801225a <_vfiprintf_r+0x202>
 801224e:	89ab      	ldrh	r3, [r5, #12]
 8012250:	059a      	lsls	r2, r3, #22
 8012252:	d402      	bmi.n	801225a <_vfiprintf_r+0x202>
 8012254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012256:	f7fc f9ad 	bl	800e5b4 <__retarget_lock_release_recursive>
 801225a:	89ab      	ldrh	r3, [r5, #12]
 801225c:	065b      	lsls	r3, r3, #25
 801225e:	f53f af1d 	bmi.w	801209c <_vfiprintf_r+0x44>
 8012262:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012264:	e71c      	b.n	80120a0 <_vfiprintf_r+0x48>
 8012266:	ab03      	add	r3, sp, #12
 8012268:	9300      	str	r3, [sp, #0]
 801226a:	462a      	mov	r2, r5
 801226c:	4b05      	ldr	r3, [pc, #20]	; (8012284 <_vfiprintf_r+0x22c>)
 801226e:	a904      	add	r1, sp, #16
 8012270:	4630      	mov	r0, r6
 8012272:	f7fb fc2f 	bl	800dad4 <_printf_i>
 8012276:	e7e4      	b.n	8012242 <_vfiprintf_r+0x1ea>
 8012278:	08014161 	.word	0x08014161
 801227c:	0801416b 	.word	0x0801416b
 8012280:	0800d58d 	.word	0x0800d58d
 8012284:	08012035 	.word	0x08012035
 8012288:	08014167 	.word	0x08014167

0801228c <__swbuf_r>:
 801228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801228e:	460e      	mov	r6, r1
 8012290:	4614      	mov	r4, r2
 8012292:	4605      	mov	r5, r0
 8012294:	b118      	cbz	r0, 801229e <__swbuf_r+0x12>
 8012296:	6a03      	ldr	r3, [r0, #32]
 8012298:	b90b      	cbnz	r3, 801229e <__swbuf_r+0x12>
 801229a:	f7fb ffd9 	bl	800e250 <__sinit>
 801229e:	69a3      	ldr	r3, [r4, #24]
 80122a0:	60a3      	str	r3, [r4, #8]
 80122a2:	89a3      	ldrh	r3, [r4, #12]
 80122a4:	071a      	lsls	r2, r3, #28
 80122a6:	d525      	bpl.n	80122f4 <__swbuf_r+0x68>
 80122a8:	6923      	ldr	r3, [r4, #16]
 80122aa:	b31b      	cbz	r3, 80122f4 <__swbuf_r+0x68>
 80122ac:	6823      	ldr	r3, [r4, #0]
 80122ae:	6922      	ldr	r2, [r4, #16]
 80122b0:	1a98      	subs	r0, r3, r2
 80122b2:	6963      	ldr	r3, [r4, #20]
 80122b4:	b2f6      	uxtb	r6, r6
 80122b6:	4283      	cmp	r3, r0
 80122b8:	4637      	mov	r7, r6
 80122ba:	dc04      	bgt.n	80122c6 <__swbuf_r+0x3a>
 80122bc:	4621      	mov	r1, r4
 80122be:	4628      	mov	r0, r5
 80122c0:	f7ff f952 	bl	8011568 <_fflush_r>
 80122c4:	b9e0      	cbnz	r0, 8012300 <__swbuf_r+0x74>
 80122c6:	68a3      	ldr	r3, [r4, #8]
 80122c8:	3b01      	subs	r3, #1
 80122ca:	60a3      	str	r3, [r4, #8]
 80122cc:	6823      	ldr	r3, [r4, #0]
 80122ce:	1c5a      	adds	r2, r3, #1
 80122d0:	6022      	str	r2, [r4, #0]
 80122d2:	701e      	strb	r6, [r3, #0]
 80122d4:	6962      	ldr	r2, [r4, #20]
 80122d6:	1c43      	adds	r3, r0, #1
 80122d8:	429a      	cmp	r2, r3
 80122da:	d004      	beq.n	80122e6 <__swbuf_r+0x5a>
 80122dc:	89a3      	ldrh	r3, [r4, #12]
 80122de:	07db      	lsls	r3, r3, #31
 80122e0:	d506      	bpl.n	80122f0 <__swbuf_r+0x64>
 80122e2:	2e0a      	cmp	r6, #10
 80122e4:	d104      	bne.n	80122f0 <__swbuf_r+0x64>
 80122e6:	4621      	mov	r1, r4
 80122e8:	4628      	mov	r0, r5
 80122ea:	f7ff f93d 	bl	8011568 <_fflush_r>
 80122ee:	b938      	cbnz	r0, 8012300 <__swbuf_r+0x74>
 80122f0:	4638      	mov	r0, r7
 80122f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122f4:	4621      	mov	r1, r4
 80122f6:	4628      	mov	r0, r5
 80122f8:	f000 f806 	bl	8012308 <__swsetup_r>
 80122fc:	2800      	cmp	r0, #0
 80122fe:	d0d5      	beq.n	80122ac <__swbuf_r+0x20>
 8012300:	f04f 37ff 	mov.w	r7, #4294967295
 8012304:	e7f4      	b.n	80122f0 <__swbuf_r+0x64>
	...

08012308 <__swsetup_r>:
 8012308:	b538      	push	{r3, r4, r5, lr}
 801230a:	4b2a      	ldr	r3, [pc, #168]	; (80123b4 <__swsetup_r+0xac>)
 801230c:	4605      	mov	r5, r0
 801230e:	6818      	ldr	r0, [r3, #0]
 8012310:	460c      	mov	r4, r1
 8012312:	b118      	cbz	r0, 801231c <__swsetup_r+0x14>
 8012314:	6a03      	ldr	r3, [r0, #32]
 8012316:	b90b      	cbnz	r3, 801231c <__swsetup_r+0x14>
 8012318:	f7fb ff9a 	bl	800e250 <__sinit>
 801231c:	89a3      	ldrh	r3, [r4, #12]
 801231e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012322:	0718      	lsls	r0, r3, #28
 8012324:	d422      	bmi.n	801236c <__swsetup_r+0x64>
 8012326:	06d9      	lsls	r1, r3, #27
 8012328:	d407      	bmi.n	801233a <__swsetup_r+0x32>
 801232a:	2309      	movs	r3, #9
 801232c:	602b      	str	r3, [r5, #0]
 801232e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012332:	81a3      	strh	r3, [r4, #12]
 8012334:	f04f 30ff 	mov.w	r0, #4294967295
 8012338:	e034      	b.n	80123a4 <__swsetup_r+0x9c>
 801233a:	0758      	lsls	r0, r3, #29
 801233c:	d512      	bpl.n	8012364 <__swsetup_r+0x5c>
 801233e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012340:	b141      	cbz	r1, 8012354 <__swsetup_r+0x4c>
 8012342:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012346:	4299      	cmp	r1, r3
 8012348:	d002      	beq.n	8012350 <__swsetup_r+0x48>
 801234a:	4628      	mov	r0, r5
 801234c:	f7fc ffca 	bl	800f2e4 <_free_r>
 8012350:	2300      	movs	r3, #0
 8012352:	6363      	str	r3, [r4, #52]	; 0x34
 8012354:	89a3      	ldrh	r3, [r4, #12]
 8012356:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801235a:	81a3      	strh	r3, [r4, #12]
 801235c:	2300      	movs	r3, #0
 801235e:	6063      	str	r3, [r4, #4]
 8012360:	6923      	ldr	r3, [r4, #16]
 8012362:	6023      	str	r3, [r4, #0]
 8012364:	89a3      	ldrh	r3, [r4, #12]
 8012366:	f043 0308 	orr.w	r3, r3, #8
 801236a:	81a3      	strh	r3, [r4, #12]
 801236c:	6923      	ldr	r3, [r4, #16]
 801236e:	b94b      	cbnz	r3, 8012384 <__swsetup_r+0x7c>
 8012370:	89a3      	ldrh	r3, [r4, #12]
 8012372:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801237a:	d003      	beq.n	8012384 <__swsetup_r+0x7c>
 801237c:	4621      	mov	r1, r4
 801237e:	4628      	mov	r0, r5
 8012380:	f000 f884 	bl	801248c <__smakebuf_r>
 8012384:	89a0      	ldrh	r0, [r4, #12]
 8012386:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801238a:	f010 0301 	ands.w	r3, r0, #1
 801238e:	d00a      	beq.n	80123a6 <__swsetup_r+0x9e>
 8012390:	2300      	movs	r3, #0
 8012392:	60a3      	str	r3, [r4, #8]
 8012394:	6963      	ldr	r3, [r4, #20]
 8012396:	425b      	negs	r3, r3
 8012398:	61a3      	str	r3, [r4, #24]
 801239a:	6923      	ldr	r3, [r4, #16]
 801239c:	b943      	cbnz	r3, 80123b0 <__swsetup_r+0xa8>
 801239e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80123a2:	d1c4      	bne.n	801232e <__swsetup_r+0x26>
 80123a4:	bd38      	pop	{r3, r4, r5, pc}
 80123a6:	0781      	lsls	r1, r0, #30
 80123a8:	bf58      	it	pl
 80123aa:	6963      	ldrpl	r3, [r4, #20]
 80123ac:	60a3      	str	r3, [r4, #8]
 80123ae:	e7f4      	b.n	801239a <__swsetup_r+0x92>
 80123b0:	2000      	movs	r0, #0
 80123b2:	e7f7      	b.n	80123a4 <__swsetup_r+0x9c>
 80123b4:	20000130 	.word	0x20000130

080123b8 <_raise_r>:
 80123b8:	291f      	cmp	r1, #31
 80123ba:	b538      	push	{r3, r4, r5, lr}
 80123bc:	4604      	mov	r4, r0
 80123be:	460d      	mov	r5, r1
 80123c0:	d904      	bls.n	80123cc <_raise_r+0x14>
 80123c2:	2316      	movs	r3, #22
 80123c4:	6003      	str	r3, [r0, #0]
 80123c6:	f04f 30ff 	mov.w	r0, #4294967295
 80123ca:	bd38      	pop	{r3, r4, r5, pc}
 80123cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80123ce:	b112      	cbz	r2, 80123d6 <_raise_r+0x1e>
 80123d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80123d4:	b94b      	cbnz	r3, 80123ea <_raise_r+0x32>
 80123d6:	4620      	mov	r0, r4
 80123d8:	f000 f830 	bl	801243c <_getpid_r>
 80123dc:	462a      	mov	r2, r5
 80123de:	4601      	mov	r1, r0
 80123e0:	4620      	mov	r0, r4
 80123e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123e6:	f000 b817 	b.w	8012418 <_kill_r>
 80123ea:	2b01      	cmp	r3, #1
 80123ec:	d00a      	beq.n	8012404 <_raise_r+0x4c>
 80123ee:	1c59      	adds	r1, r3, #1
 80123f0:	d103      	bne.n	80123fa <_raise_r+0x42>
 80123f2:	2316      	movs	r3, #22
 80123f4:	6003      	str	r3, [r0, #0]
 80123f6:	2001      	movs	r0, #1
 80123f8:	e7e7      	b.n	80123ca <_raise_r+0x12>
 80123fa:	2400      	movs	r4, #0
 80123fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012400:	4628      	mov	r0, r5
 8012402:	4798      	blx	r3
 8012404:	2000      	movs	r0, #0
 8012406:	e7e0      	b.n	80123ca <_raise_r+0x12>

08012408 <raise>:
 8012408:	4b02      	ldr	r3, [pc, #8]	; (8012414 <raise+0xc>)
 801240a:	4601      	mov	r1, r0
 801240c:	6818      	ldr	r0, [r3, #0]
 801240e:	f7ff bfd3 	b.w	80123b8 <_raise_r>
 8012412:	bf00      	nop
 8012414:	20000130 	.word	0x20000130

08012418 <_kill_r>:
 8012418:	b538      	push	{r3, r4, r5, lr}
 801241a:	4d07      	ldr	r5, [pc, #28]	; (8012438 <_kill_r+0x20>)
 801241c:	2300      	movs	r3, #0
 801241e:	4604      	mov	r4, r0
 8012420:	4608      	mov	r0, r1
 8012422:	4611      	mov	r1, r2
 8012424:	602b      	str	r3, [r5, #0]
 8012426:	f7f1 f9b9 	bl	800379c <_kill>
 801242a:	1c43      	adds	r3, r0, #1
 801242c:	d102      	bne.n	8012434 <_kill_r+0x1c>
 801242e:	682b      	ldr	r3, [r5, #0]
 8012430:	b103      	cbz	r3, 8012434 <_kill_r+0x1c>
 8012432:	6023      	str	r3, [r4, #0]
 8012434:	bd38      	pop	{r3, r4, r5, pc}
 8012436:	bf00      	nop
 8012438:	20008c5c 	.word	0x20008c5c

0801243c <_getpid_r>:
 801243c:	f7f1 b9a6 	b.w	800378c <_getpid>

08012440 <__swhatbuf_r>:
 8012440:	b570      	push	{r4, r5, r6, lr}
 8012442:	460c      	mov	r4, r1
 8012444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012448:	2900      	cmp	r1, #0
 801244a:	b096      	sub	sp, #88	; 0x58
 801244c:	4615      	mov	r5, r2
 801244e:	461e      	mov	r6, r3
 8012450:	da0d      	bge.n	801246e <__swhatbuf_r+0x2e>
 8012452:	89a3      	ldrh	r3, [r4, #12]
 8012454:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012458:	f04f 0100 	mov.w	r1, #0
 801245c:	bf0c      	ite	eq
 801245e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012462:	2340      	movne	r3, #64	; 0x40
 8012464:	2000      	movs	r0, #0
 8012466:	6031      	str	r1, [r6, #0]
 8012468:	602b      	str	r3, [r5, #0]
 801246a:	b016      	add	sp, #88	; 0x58
 801246c:	bd70      	pop	{r4, r5, r6, pc}
 801246e:	466a      	mov	r2, sp
 8012470:	f000 f848 	bl	8012504 <_fstat_r>
 8012474:	2800      	cmp	r0, #0
 8012476:	dbec      	blt.n	8012452 <__swhatbuf_r+0x12>
 8012478:	9901      	ldr	r1, [sp, #4]
 801247a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801247e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012482:	4259      	negs	r1, r3
 8012484:	4159      	adcs	r1, r3
 8012486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801248a:	e7eb      	b.n	8012464 <__swhatbuf_r+0x24>

0801248c <__smakebuf_r>:
 801248c:	898b      	ldrh	r3, [r1, #12]
 801248e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012490:	079d      	lsls	r5, r3, #30
 8012492:	4606      	mov	r6, r0
 8012494:	460c      	mov	r4, r1
 8012496:	d507      	bpl.n	80124a8 <__smakebuf_r+0x1c>
 8012498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801249c:	6023      	str	r3, [r4, #0]
 801249e:	6123      	str	r3, [r4, #16]
 80124a0:	2301      	movs	r3, #1
 80124a2:	6163      	str	r3, [r4, #20]
 80124a4:	b002      	add	sp, #8
 80124a6:	bd70      	pop	{r4, r5, r6, pc}
 80124a8:	ab01      	add	r3, sp, #4
 80124aa:	466a      	mov	r2, sp
 80124ac:	f7ff ffc8 	bl	8012440 <__swhatbuf_r>
 80124b0:	9900      	ldr	r1, [sp, #0]
 80124b2:	4605      	mov	r5, r0
 80124b4:	4630      	mov	r0, r6
 80124b6:	f7fc ff89 	bl	800f3cc <_malloc_r>
 80124ba:	b948      	cbnz	r0, 80124d0 <__smakebuf_r+0x44>
 80124bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124c0:	059a      	lsls	r2, r3, #22
 80124c2:	d4ef      	bmi.n	80124a4 <__smakebuf_r+0x18>
 80124c4:	f023 0303 	bic.w	r3, r3, #3
 80124c8:	f043 0302 	orr.w	r3, r3, #2
 80124cc:	81a3      	strh	r3, [r4, #12]
 80124ce:	e7e3      	b.n	8012498 <__smakebuf_r+0xc>
 80124d0:	89a3      	ldrh	r3, [r4, #12]
 80124d2:	6020      	str	r0, [r4, #0]
 80124d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124d8:	81a3      	strh	r3, [r4, #12]
 80124da:	9b00      	ldr	r3, [sp, #0]
 80124dc:	6163      	str	r3, [r4, #20]
 80124de:	9b01      	ldr	r3, [sp, #4]
 80124e0:	6120      	str	r0, [r4, #16]
 80124e2:	b15b      	cbz	r3, 80124fc <__smakebuf_r+0x70>
 80124e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124e8:	4630      	mov	r0, r6
 80124ea:	f000 f81d 	bl	8012528 <_isatty_r>
 80124ee:	b128      	cbz	r0, 80124fc <__smakebuf_r+0x70>
 80124f0:	89a3      	ldrh	r3, [r4, #12]
 80124f2:	f023 0303 	bic.w	r3, r3, #3
 80124f6:	f043 0301 	orr.w	r3, r3, #1
 80124fa:	81a3      	strh	r3, [r4, #12]
 80124fc:	89a3      	ldrh	r3, [r4, #12]
 80124fe:	431d      	orrs	r5, r3
 8012500:	81a5      	strh	r5, [r4, #12]
 8012502:	e7cf      	b.n	80124a4 <__smakebuf_r+0x18>

08012504 <_fstat_r>:
 8012504:	b538      	push	{r3, r4, r5, lr}
 8012506:	4d07      	ldr	r5, [pc, #28]	; (8012524 <_fstat_r+0x20>)
 8012508:	2300      	movs	r3, #0
 801250a:	4604      	mov	r4, r0
 801250c:	4608      	mov	r0, r1
 801250e:	4611      	mov	r1, r2
 8012510:	602b      	str	r3, [r5, #0]
 8012512:	f7f1 f9a2 	bl	800385a <_fstat>
 8012516:	1c43      	adds	r3, r0, #1
 8012518:	d102      	bne.n	8012520 <_fstat_r+0x1c>
 801251a:	682b      	ldr	r3, [r5, #0]
 801251c:	b103      	cbz	r3, 8012520 <_fstat_r+0x1c>
 801251e:	6023      	str	r3, [r4, #0]
 8012520:	bd38      	pop	{r3, r4, r5, pc}
 8012522:	bf00      	nop
 8012524:	20008c5c 	.word	0x20008c5c

08012528 <_isatty_r>:
 8012528:	b538      	push	{r3, r4, r5, lr}
 801252a:	4d06      	ldr	r5, [pc, #24]	; (8012544 <_isatty_r+0x1c>)
 801252c:	2300      	movs	r3, #0
 801252e:	4604      	mov	r4, r0
 8012530:	4608      	mov	r0, r1
 8012532:	602b      	str	r3, [r5, #0]
 8012534:	f7f1 f9a1 	bl	800387a <_isatty>
 8012538:	1c43      	adds	r3, r0, #1
 801253a:	d102      	bne.n	8012542 <_isatty_r+0x1a>
 801253c:	682b      	ldr	r3, [r5, #0]
 801253e:	b103      	cbz	r3, 8012542 <_isatty_r+0x1a>
 8012540:	6023      	str	r3, [r4, #0]
 8012542:	bd38      	pop	{r3, r4, r5, pc}
 8012544:	20008c5c 	.word	0x20008c5c

08012548 <atan2>:
 8012548:	f000 bb6e 	b.w	8012c28 <__ieee754_atan2>
 801254c:	0000      	movs	r0, r0
	...

08012550 <log>:
 8012550:	b538      	push	{r3, r4, r5, lr}
 8012552:	ed2d 8b02 	vpush	{d8}
 8012556:	ec55 4b10 	vmov	r4, r5, d0
 801255a:	f000 fc2d 	bl	8012db8 <__ieee754_log>
 801255e:	4622      	mov	r2, r4
 8012560:	462b      	mov	r3, r5
 8012562:	4620      	mov	r0, r4
 8012564:	4629      	mov	r1, r5
 8012566:	eeb0 8a40 	vmov.f32	s16, s0
 801256a:	eef0 8a60 	vmov.f32	s17, s1
 801256e:	f7ee fadd 	bl	8000b2c <__aeabi_dcmpun>
 8012572:	b998      	cbnz	r0, 801259c <log+0x4c>
 8012574:	2200      	movs	r2, #0
 8012576:	2300      	movs	r3, #0
 8012578:	4620      	mov	r0, r4
 801257a:	4629      	mov	r1, r5
 801257c:	f7ee facc 	bl	8000b18 <__aeabi_dcmpgt>
 8012580:	b960      	cbnz	r0, 801259c <log+0x4c>
 8012582:	2200      	movs	r2, #0
 8012584:	2300      	movs	r3, #0
 8012586:	4620      	mov	r0, r4
 8012588:	4629      	mov	r1, r5
 801258a:	f7ee fa9d 	bl	8000ac8 <__aeabi_dcmpeq>
 801258e:	b160      	cbz	r0, 80125aa <log+0x5a>
 8012590:	f7fb ffe4 	bl	800e55c <__errno>
 8012594:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80125c0 <log+0x70>
 8012598:	2322      	movs	r3, #34	; 0x22
 801259a:	6003      	str	r3, [r0, #0]
 801259c:	eeb0 0a48 	vmov.f32	s0, s16
 80125a0:	eef0 0a68 	vmov.f32	s1, s17
 80125a4:	ecbd 8b02 	vpop	{d8}
 80125a8:	bd38      	pop	{r3, r4, r5, pc}
 80125aa:	f7fb ffd7 	bl	800e55c <__errno>
 80125ae:	ecbd 8b02 	vpop	{d8}
 80125b2:	2321      	movs	r3, #33	; 0x21
 80125b4:	6003      	str	r3, [r0, #0]
 80125b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125ba:	4803      	ldr	r0, [pc, #12]	; (80125c8 <log+0x78>)
 80125bc:	f7ff b8ac 	b.w	8011718 <nan>
 80125c0:	00000000 	.word	0x00000000
 80125c4:	fff00000 	.word	0xfff00000
 80125c8:	080141d0 	.word	0x080141d0

080125cc <pow>:
 80125cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ce:	ed2d 8b02 	vpush	{d8}
 80125d2:	eeb0 8a40 	vmov.f32	s16, s0
 80125d6:	eef0 8a60 	vmov.f32	s17, s1
 80125da:	ec55 4b11 	vmov	r4, r5, d1
 80125de:	f000 fda7 	bl	8013130 <__ieee754_pow>
 80125e2:	4622      	mov	r2, r4
 80125e4:	462b      	mov	r3, r5
 80125e6:	4620      	mov	r0, r4
 80125e8:	4629      	mov	r1, r5
 80125ea:	ec57 6b10 	vmov	r6, r7, d0
 80125ee:	f7ee fa9d 	bl	8000b2c <__aeabi_dcmpun>
 80125f2:	2800      	cmp	r0, #0
 80125f4:	d13b      	bne.n	801266e <pow+0xa2>
 80125f6:	ec51 0b18 	vmov	r0, r1, d8
 80125fa:	2200      	movs	r2, #0
 80125fc:	2300      	movs	r3, #0
 80125fe:	f7ee fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 8012602:	b1b8      	cbz	r0, 8012634 <pow+0x68>
 8012604:	2200      	movs	r2, #0
 8012606:	2300      	movs	r3, #0
 8012608:	4620      	mov	r0, r4
 801260a:	4629      	mov	r1, r5
 801260c:	f7ee fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8012610:	2800      	cmp	r0, #0
 8012612:	d146      	bne.n	80126a2 <pow+0xd6>
 8012614:	ec45 4b10 	vmov	d0, r4, r5
 8012618:	f000 fa1f 	bl	8012a5a <finite>
 801261c:	b338      	cbz	r0, 801266e <pow+0xa2>
 801261e:	2200      	movs	r2, #0
 8012620:	2300      	movs	r3, #0
 8012622:	4620      	mov	r0, r4
 8012624:	4629      	mov	r1, r5
 8012626:	f7ee fa59 	bl	8000adc <__aeabi_dcmplt>
 801262a:	b300      	cbz	r0, 801266e <pow+0xa2>
 801262c:	f7fb ff96 	bl	800e55c <__errno>
 8012630:	2322      	movs	r3, #34	; 0x22
 8012632:	e01b      	b.n	801266c <pow+0xa0>
 8012634:	ec47 6b10 	vmov	d0, r6, r7
 8012638:	f000 fa0f 	bl	8012a5a <finite>
 801263c:	b9e0      	cbnz	r0, 8012678 <pow+0xac>
 801263e:	eeb0 0a48 	vmov.f32	s0, s16
 8012642:	eef0 0a68 	vmov.f32	s1, s17
 8012646:	f000 fa08 	bl	8012a5a <finite>
 801264a:	b1a8      	cbz	r0, 8012678 <pow+0xac>
 801264c:	ec45 4b10 	vmov	d0, r4, r5
 8012650:	f000 fa03 	bl	8012a5a <finite>
 8012654:	b180      	cbz	r0, 8012678 <pow+0xac>
 8012656:	4632      	mov	r2, r6
 8012658:	463b      	mov	r3, r7
 801265a:	4630      	mov	r0, r6
 801265c:	4639      	mov	r1, r7
 801265e:	f7ee fa65 	bl	8000b2c <__aeabi_dcmpun>
 8012662:	2800      	cmp	r0, #0
 8012664:	d0e2      	beq.n	801262c <pow+0x60>
 8012666:	f7fb ff79 	bl	800e55c <__errno>
 801266a:	2321      	movs	r3, #33	; 0x21
 801266c:	6003      	str	r3, [r0, #0]
 801266e:	ecbd 8b02 	vpop	{d8}
 8012672:	ec47 6b10 	vmov	d0, r6, r7
 8012676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012678:	2200      	movs	r2, #0
 801267a:	2300      	movs	r3, #0
 801267c:	4630      	mov	r0, r6
 801267e:	4639      	mov	r1, r7
 8012680:	f7ee fa22 	bl	8000ac8 <__aeabi_dcmpeq>
 8012684:	2800      	cmp	r0, #0
 8012686:	d0f2      	beq.n	801266e <pow+0xa2>
 8012688:	eeb0 0a48 	vmov.f32	s0, s16
 801268c:	eef0 0a68 	vmov.f32	s1, s17
 8012690:	f000 f9e3 	bl	8012a5a <finite>
 8012694:	2800      	cmp	r0, #0
 8012696:	d0ea      	beq.n	801266e <pow+0xa2>
 8012698:	ec45 4b10 	vmov	d0, r4, r5
 801269c:	f000 f9dd 	bl	8012a5a <finite>
 80126a0:	e7c3      	b.n	801262a <pow+0x5e>
 80126a2:	4f01      	ldr	r7, [pc, #4]	; (80126a8 <pow+0xdc>)
 80126a4:	2600      	movs	r6, #0
 80126a6:	e7e2      	b.n	801266e <pow+0xa2>
 80126a8:	3ff00000 	.word	0x3ff00000

080126ac <sqrt>:
 80126ac:	b538      	push	{r3, r4, r5, lr}
 80126ae:	ed2d 8b02 	vpush	{d8}
 80126b2:	ec55 4b10 	vmov	r4, r5, d0
 80126b6:	f000 f9db 	bl	8012a70 <__ieee754_sqrt>
 80126ba:	4622      	mov	r2, r4
 80126bc:	462b      	mov	r3, r5
 80126be:	4620      	mov	r0, r4
 80126c0:	4629      	mov	r1, r5
 80126c2:	eeb0 8a40 	vmov.f32	s16, s0
 80126c6:	eef0 8a60 	vmov.f32	s17, s1
 80126ca:	f7ee fa2f 	bl	8000b2c <__aeabi_dcmpun>
 80126ce:	b990      	cbnz	r0, 80126f6 <sqrt+0x4a>
 80126d0:	2200      	movs	r2, #0
 80126d2:	2300      	movs	r3, #0
 80126d4:	4620      	mov	r0, r4
 80126d6:	4629      	mov	r1, r5
 80126d8:	f7ee fa00 	bl	8000adc <__aeabi_dcmplt>
 80126dc:	b158      	cbz	r0, 80126f6 <sqrt+0x4a>
 80126de:	f7fb ff3d 	bl	800e55c <__errno>
 80126e2:	2321      	movs	r3, #33	; 0x21
 80126e4:	6003      	str	r3, [r0, #0]
 80126e6:	2200      	movs	r2, #0
 80126e8:	2300      	movs	r3, #0
 80126ea:	4610      	mov	r0, r2
 80126ec:	4619      	mov	r1, r3
 80126ee:	f7ee f8ad 	bl	800084c <__aeabi_ddiv>
 80126f2:	ec41 0b18 	vmov	d8, r0, r1
 80126f6:	eeb0 0a48 	vmov.f32	s0, s16
 80126fa:	eef0 0a68 	vmov.f32	s1, s17
 80126fe:	ecbd 8b02 	vpop	{d8}
 8012702:	bd38      	pop	{r3, r4, r5, pc}
 8012704:	0000      	movs	r0, r0
	...

08012708 <atan>:
 8012708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801270c:	ec55 4b10 	vmov	r4, r5, d0
 8012710:	4bc3      	ldr	r3, [pc, #780]	; (8012a20 <atan+0x318>)
 8012712:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012716:	429e      	cmp	r6, r3
 8012718:	46ab      	mov	fp, r5
 801271a:	dd18      	ble.n	801274e <atan+0x46>
 801271c:	4bc1      	ldr	r3, [pc, #772]	; (8012a24 <atan+0x31c>)
 801271e:	429e      	cmp	r6, r3
 8012720:	dc01      	bgt.n	8012726 <atan+0x1e>
 8012722:	d109      	bne.n	8012738 <atan+0x30>
 8012724:	b144      	cbz	r4, 8012738 <atan+0x30>
 8012726:	4622      	mov	r2, r4
 8012728:	462b      	mov	r3, r5
 801272a:	4620      	mov	r0, r4
 801272c:	4629      	mov	r1, r5
 801272e:	f7ed fdad 	bl	800028c <__adddf3>
 8012732:	4604      	mov	r4, r0
 8012734:	460d      	mov	r5, r1
 8012736:	e006      	b.n	8012746 <atan+0x3e>
 8012738:	f1bb 0f00 	cmp.w	fp, #0
 801273c:	f300 8131 	bgt.w	80129a2 <atan+0x29a>
 8012740:	a59b      	add	r5, pc, #620	; (adr r5, 80129b0 <atan+0x2a8>)
 8012742:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012746:	ec45 4b10 	vmov	d0, r4, r5
 801274a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801274e:	4bb6      	ldr	r3, [pc, #728]	; (8012a28 <atan+0x320>)
 8012750:	429e      	cmp	r6, r3
 8012752:	dc14      	bgt.n	801277e <atan+0x76>
 8012754:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012758:	429e      	cmp	r6, r3
 801275a:	dc0d      	bgt.n	8012778 <atan+0x70>
 801275c:	a396      	add	r3, pc, #600	; (adr r3, 80129b8 <atan+0x2b0>)
 801275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012762:	ee10 0a10 	vmov	r0, s0
 8012766:	4629      	mov	r1, r5
 8012768:	f7ed fd90 	bl	800028c <__adddf3>
 801276c:	4baf      	ldr	r3, [pc, #700]	; (8012a2c <atan+0x324>)
 801276e:	2200      	movs	r2, #0
 8012770:	f7ee f9d2 	bl	8000b18 <__aeabi_dcmpgt>
 8012774:	2800      	cmp	r0, #0
 8012776:	d1e6      	bne.n	8012746 <atan+0x3e>
 8012778:	f04f 3aff 	mov.w	sl, #4294967295
 801277c:	e02b      	b.n	80127d6 <atan+0xce>
 801277e:	f000 f963 	bl	8012a48 <fabs>
 8012782:	4bab      	ldr	r3, [pc, #684]	; (8012a30 <atan+0x328>)
 8012784:	429e      	cmp	r6, r3
 8012786:	ec55 4b10 	vmov	r4, r5, d0
 801278a:	f300 80bf 	bgt.w	801290c <atan+0x204>
 801278e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012792:	429e      	cmp	r6, r3
 8012794:	f300 80a0 	bgt.w	80128d8 <atan+0x1d0>
 8012798:	ee10 2a10 	vmov	r2, s0
 801279c:	ee10 0a10 	vmov	r0, s0
 80127a0:	462b      	mov	r3, r5
 80127a2:	4629      	mov	r1, r5
 80127a4:	f7ed fd72 	bl	800028c <__adddf3>
 80127a8:	4ba0      	ldr	r3, [pc, #640]	; (8012a2c <atan+0x324>)
 80127aa:	2200      	movs	r2, #0
 80127ac:	f7ed fd6c 	bl	8000288 <__aeabi_dsub>
 80127b0:	2200      	movs	r2, #0
 80127b2:	4606      	mov	r6, r0
 80127b4:	460f      	mov	r7, r1
 80127b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80127ba:	4620      	mov	r0, r4
 80127bc:	4629      	mov	r1, r5
 80127be:	f7ed fd65 	bl	800028c <__adddf3>
 80127c2:	4602      	mov	r2, r0
 80127c4:	460b      	mov	r3, r1
 80127c6:	4630      	mov	r0, r6
 80127c8:	4639      	mov	r1, r7
 80127ca:	f7ee f83f 	bl	800084c <__aeabi_ddiv>
 80127ce:	f04f 0a00 	mov.w	sl, #0
 80127d2:	4604      	mov	r4, r0
 80127d4:	460d      	mov	r5, r1
 80127d6:	4622      	mov	r2, r4
 80127d8:	462b      	mov	r3, r5
 80127da:	4620      	mov	r0, r4
 80127dc:	4629      	mov	r1, r5
 80127de:	f7ed ff0b 	bl	80005f8 <__aeabi_dmul>
 80127e2:	4602      	mov	r2, r0
 80127e4:	460b      	mov	r3, r1
 80127e6:	4680      	mov	r8, r0
 80127e8:	4689      	mov	r9, r1
 80127ea:	f7ed ff05 	bl	80005f8 <__aeabi_dmul>
 80127ee:	a374      	add	r3, pc, #464	; (adr r3, 80129c0 <atan+0x2b8>)
 80127f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f4:	4606      	mov	r6, r0
 80127f6:	460f      	mov	r7, r1
 80127f8:	f7ed fefe 	bl	80005f8 <__aeabi_dmul>
 80127fc:	a372      	add	r3, pc, #456	; (adr r3, 80129c8 <atan+0x2c0>)
 80127fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012802:	f7ed fd43 	bl	800028c <__adddf3>
 8012806:	4632      	mov	r2, r6
 8012808:	463b      	mov	r3, r7
 801280a:	f7ed fef5 	bl	80005f8 <__aeabi_dmul>
 801280e:	a370      	add	r3, pc, #448	; (adr r3, 80129d0 <atan+0x2c8>)
 8012810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012814:	f7ed fd3a 	bl	800028c <__adddf3>
 8012818:	4632      	mov	r2, r6
 801281a:	463b      	mov	r3, r7
 801281c:	f7ed feec 	bl	80005f8 <__aeabi_dmul>
 8012820:	a36d      	add	r3, pc, #436	; (adr r3, 80129d8 <atan+0x2d0>)
 8012822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012826:	f7ed fd31 	bl	800028c <__adddf3>
 801282a:	4632      	mov	r2, r6
 801282c:	463b      	mov	r3, r7
 801282e:	f7ed fee3 	bl	80005f8 <__aeabi_dmul>
 8012832:	a36b      	add	r3, pc, #428	; (adr r3, 80129e0 <atan+0x2d8>)
 8012834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012838:	f7ed fd28 	bl	800028c <__adddf3>
 801283c:	4632      	mov	r2, r6
 801283e:	463b      	mov	r3, r7
 8012840:	f7ed feda 	bl	80005f8 <__aeabi_dmul>
 8012844:	a368      	add	r3, pc, #416	; (adr r3, 80129e8 <atan+0x2e0>)
 8012846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284a:	f7ed fd1f 	bl	800028c <__adddf3>
 801284e:	4642      	mov	r2, r8
 8012850:	464b      	mov	r3, r9
 8012852:	f7ed fed1 	bl	80005f8 <__aeabi_dmul>
 8012856:	a366      	add	r3, pc, #408	; (adr r3, 80129f0 <atan+0x2e8>)
 8012858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801285c:	4680      	mov	r8, r0
 801285e:	4689      	mov	r9, r1
 8012860:	4630      	mov	r0, r6
 8012862:	4639      	mov	r1, r7
 8012864:	f7ed fec8 	bl	80005f8 <__aeabi_dmul>
 8012868:	a363      	add	r3, pc, #396	; (adr r3, 80129f8 <atan+0x2f0>)
 801286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286e:	f7ed fd0b 	bl	8000288 <__aeabi_dsub>
 8012872:	4632      	mov	r2, r6
 8012874:	463b      	mov	r3, r7
 8012876:	f7ed febf 	bl	80005f8 <__aeabi_dmul>
 801287a:	a361      	add	r3, pc, #388	; (adr r3, 8012a00 <atan+0x2f8>)
 801287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012880:	f7ed fd02 	bl	8000288 <__aeabi_dsub>
 8012884:	4632      	mov	r2, r6
 8012886:	463b      	mov	r3, r7
 8012888:	f7ed feb6 	bl	80005f8 <__aeabi_dmul>
 801288c:	a35e      	add	r3, pc, #376	; (adr r3, 8012a08 <atan+0x300>)
 801288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012892:	f7ed fcf9 	bl	8000288 <__aeabi_dsub>
 8012896:	4632      	mov	r2, r6
 8012898:	463b      	mov	r3, r7
 801289a:	f7ed fead 	bl	80005f8 <__aeabi_dmul>
 801289e:	a35c      	add	r3, pc, #368	; (adr r3, 8012a10 <atan+0x308>)
 80128a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a4:	f7ed fcf0 	bl	8000288 <__aeabi_dsub>
 80128a8:	4632      	mov	r2, r6
 80128aa:	463b      	mov	r3, r7
 80128ac:	f7ed fea4 	bl	80005f8 <__aeabi_dmul>
 80128b0:	4602      	mov	r2, r0
 80128b2:	460b      	mov	r3, r1
 80128b4:	4640      	mov	r0, r8
 80128b6:	4649      	mov	r1, r9
 80128b8:	f7ed fce8 	bl	800028c <__adddf3>
 80128bc:	4622      	mov	r2, r4
 80128be:	462b      	mov	r3, r5
 80128c0:	f7ed fe9a 	bl	80005f8 <__aeabi_dmul>
 80128c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80128c8:	4602      	mov	r2, r0
 80128ca:	460b      	mov	r3, r1
 80128cc:	d14b      	bne.n	8012966 <atan+0x25e>
 80128ce:	4620      	mov	r0, r4
 80128d0:	4629      	mov	r1, r5
 80128d2:	f7ed fcd9 	bl	8000288 <__aeabi_dsub>
 80128d6:	e72c      	b.n	8012732 <atan+0x2a>
 80128d8:	ee10 0a10 	vmov	r0, s0
 80128dc:	4b53      	ldr	r3, [pc, #332]	; (8012a2c <atan+0x324>)
 80128de:	2200      	movs	r2, #0
 80128e0:	4629      	mov	r1, r5
 80128e2:	f7ed fcd1 	bl	8000288 <__aeabi_dsub>
 80128e6:	4b51      	ldr	r3, [pc, #324]	; (8012a2c <atan+0x324>)
 80128e8:	4606      	mov	r6, r0
 80128ea:	460f      	mov	r7, r1
 80128ec:	2200      	movs	r2, #0
 80128ee:	4620      	mov	r0, r4
 80128f0:	4629      	mov	r1, r5
 80128f2:	f7ed fccb 	bl	800028c <__adddf3>
 80128f6:	4602      	mov	r2, r0
 80128f8:	460b      	mov	r3, r1
 80128fa:	4630      	mov	r0, r6
 80128fc:	4639      	mov	r1, r7
 80128fe:	f7ed ffa5 	bl	800084c <__aeabi_ddiv>
 8012902:	f04f 0a01 	mov.w	sl, #1
 8012906:	4604      	mov	r4, r0
 8012908:	460d      	mov	r5, r1
 801290a:	e764      	b.n	80127d6 <atan+0xce>
 801290c:	4b49      	ldr	r3, [pc, #292]	; (8012a34 <atan+0x32c>)
 801290e:	429e      	cmp	r6, r3
 8012910:	da1d      	bge.n	801294e <atan+0x246>
 8012912:	ee10 0a10 	vmov	r0, s0
 8012916:	4b48      	ldr	r3, [pc, #288]	; (8012a38 <atan+0x330>)
 8012918:	2200      	movs	r2, #0
 801291a:	4629      	mov	r1, r5
 801291c:	f7ed fcb4 	bl	8000288 <__aeabi_dsub>
 8012920:	4b45      	ldr	r3, [pc, #276]	; (8012a38 <atan+0x330>)
 8012922:	4606      	mov	r6, r0
 8012924:	460f      	mov	r7, r1
 8012926:	2200      	movs	r2, #0
 8012928:	4620      	mov	r0, r4
 801292a:	4629      	mov	r1, r5
 801292c:	f7ed fe64 	bl	80005f8 <__aeabi_dmul>
 8012930:	4b3e      	ldr	r3, [pc, #248]	; (8012a2c <atan+0x324>)
 8012932:	2200      	movs	r2, #0
 8012934:	f7ed fcaa 	bl	800028c <__adddf3>
 8012938:	4602      	mov	r2, r0
 801293a:	460b      	mov	r3, r1
 801293c:	4630      	mov	r0, r6
 801293e:	4639      	mov	r1, r7
 8012940:	f7ed ff84 	bl	800084c <__aeabi_ddiv>
 8012944:	f04f 0a02 	mov.w	sl, #2
 8012948:	4604      	mov	r4, r0
 801294a:	460d      	mov	r5, r1
 801294c:	e743      	b.n	80127d6 <atan+0xce>
 801294e:	462b      	mov	r3, r5
 8012950:	ee10 2a10 	vmov	r2, s0
 8012954:	4939      	ldr	r1, [pc, #228]	; (8012a3c <atan+0x334>)
 8012956:	2000      	movs	r0, #0
 8012958:	f7ed ff78 	bl	800084c <__aeabi_ddiv>
 801295c:	f04f 0a03 	mov.w	sl, #3
 8012960:	4604      	mov	r4, r0
 8012962:	460d      	mov	r5, r1
 8012964:	e737      	b.n	80127d6 <atan+0xce>
 8012966:	4b36      	ldr	r3, [pc, #216]	; (8012a40 <atan+0x338>)
 8012968:	4e36      	ldr	r6, [pc, #216]	; (8012a44 <atan+0x33c>)
 801296a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012972:	f7ed fc89 	bl	8000288 <__aeabi_dsub>
 8012976:	4622      	mov	r2, r4
 8012978:	462b      	mov	r3, r5
 801297a:	f7ed fc85 	bl	8000288 <__aeabi_dsub>
 801297e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012982:	4602      	mov	r2, r0
 8012984:	460b      	mov	r3, r1
 8012986:	e9d6 0100 	ldrd	r0, r1, [r6]
 801298a:	f7ed fc7d 	bl	8000288 <__aeabi_dsub>
 801298e:	f1bb 0f00 	cmp.w	fp, #0
 8012992:	4604      	mov	r4, r0
 8012994:	460d      	mov	r5, r1
 8012996:	f6bf aed6 	bge.w	8012746 <atan+0x3e>
 801299a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801299e:	461d      	mov	r5, r3
 80129a0:	e6d1      	b.n	8012746 <atan+0x3e>
 80129a2:	a51d      	add	r5, pc, #116	; (adr r5, 8012a18 <atan+0x310>)
 80129a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80129a8:	e6cd      	b.n	8012746 <atan+0x3e>
 80129aa:	bf00      	nop
 80129ac:	f3af 8000 	nop.w
 80129b0:	54442d18 	.word	0x54442d18
 80129b4:	bff921fb 	.word	0xbff921fb
 80129b8:	8800759c 	.word	0x8800759c
 80129bc:	7e37e43c 	.word	0x7e37e43c
 80129c0:	e322da11 	.word	0xe322da11
 80129c4:	3f90ad3a 	.word	0x3f90ad3a
 80129c8:	24760deb 	.word	0x24760deb
 80129cc:	3fa97b4b 	.word	0x3fa97b4b
 80129d0:	a0d03d51 	.word	0xa0d03d51
 80129d4:	3fb10d66 	.word	0x3fb10d66
 80129d8:	c54c206e 	.word	0xc54c206e
 80129dc:	3fb745cd 	.word	0x3fb745cd
 80129e0:	920083ff 	.word	0x920083ff
 80129e4:	3fc24924 	.word	0x3fc24924
 80129e8:	5555550d 	.word	0x5555550d
 80129ec:	3fd55555 	.word	0x3fd55555
 80129f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80129f4:	bfa2b444 	.word	0xbfa2b444
 80129f8:	52defd9a 	.word	0x52defd9a
 80129fc:	3fadde2d 	.word	0x3fadde2d
 8012a00:	af749a6d 	.word	0xaf749a6d
 8012a04:	3fb3b0f2 	.word	0x3fb3b0f2
 8012a08:	fe231671 	.word	0xfe231671
 8012a0c:	3fbc71c6 	.word	0x3fbc71c6
 8012a10:	9998ebc4 	.word	0x9998ebc4
 8012a14:	3fc99999 	.word	0x3fc99999
 8012a18:	54442d18 	.word	0x54442d18
 8012a1c:	3ff921fb 	.word	0x3ff921fb
 8012a20:	440fffff 	.word	0x440fffff
 8012a24:	7ff00000 	.word	0x7ff00000
 8012a28:	3fdbffff 	.word	0x3fdbffff
 8012a2c:	3ff00000 	.word	0x3ff00000
 8012a30:	3ff2ffff 	.word	0x3ff2ffff
 8012a34:	40038000 	.word	0x40038000
 8012a38:	3ff80000 	.word	0x3ff80000
 8012a3c:	bff00000 	.word	0xbff00000
 8012a40:	08014258 	.word	0x08014258
 8012a44:	08014238 	.word	0x08014238

08012a48 <fabs>:
 8012a48:	ec51 0b10 	vmov	r0, r1, d0
 8012a4c:	ee10 2a10 	vmov	r2, s0
 8012a50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012a54:	ec43 2b10 	vmov	d0, r2, r3
 8012a58:	4770      	bx	lr

08012a5a <finite>:
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	ed8d 0b00 	vstr	d0, [sp]
 8012a60:	9801      	ldr	r0, [sp, #4]
 8012a62:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012a66:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012a6a:	0fc0      	lsrs	r0, r0, #31
 8012a6c:	b002      	add	sp, #8
 8012a6e:	4770      	bx	lr

08012a70 <__ieee754_sqrt>:
 8012a70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a74:	ec55 4b10 	vmov	r4, r5, d0
 8012a78:	4e67      	ldr	r6, [pc, #412]	; (8012c18 <__ieee754_sqrt+0x1a8>)
 8012a7a:	43ae      	bics	r6, r5
 8012a7c:	ee10 0a10 	vmov	r0, s0
 8012a80:	ee10 2a10 	vmov	r2, s0
 8012a84:	4629      	mov	r1, r5
 8012a86:	462b      	mov	r3, r5
 8012a88:	d10d      	bne.n	8012aa6 <__ieee754_sqrt+0x36>
 8012a8a:	f7ed fdb5 	bl	80005f8 <__aeabi_dmul>
 8012a8e:	4602      	mov	r2, r0
 8012a90:	460b      	mov	r3, r1
 8012a92:	4620      	mov	r0, r4
 8012a94:	4629      	mov	r1, r5
 8012a96:	f7ed fbf9 	bl	800028c <__adddf3>
 8012a9a:	4604      	mov	r4, r0
 8012a9c:	460d      	mov	r5, r1
 8012a9e:	ec45 4b10 	vmov	d0, r4, r5
 8012aa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa6:	2d00      	cmp	r5, #0
 8012aa8:	dc0b      	bgt.n	8012ac2 <__ieee754_sqrt+0x52>
 8012aaa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012aae:	4326      	orrs	r6, r4
 8012ab0:	d0f5      	beq.n	8012a9e <__ieee754_sqrt+0x2e>
 8012ab2:	b135      	cbz	r5, 8012ac2 <__ieee754_sqrt+0x52>
 8012ab4:	f7ed fbe8 	bl	8000288 <__aeabi_dsub>
 8012ab8:	4602      	mov	r2, r0
 8012aba:	460b      	mov	r3, r1
 8012abc:	f7ed fec6 	bl	800084c <__aeabi_ddiv>
 8012ac0:	e7eb      	b.n	8012a9a <__ieee754_sqrt+0x2a>
 8012ac2:	1509      	asrs	r1, r1, #20
 8012ac4:	f000 808d 	beq.w	8012be2 <__ieee754_sqrt+0x172>
 8012ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012acc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8012ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012ad4:	07c9      	lsls	r1, r1, #31
 8012ad6:	bf5c      	itt	pl
 8012ad8:	005b      	lslpl	r3, r3, #1
 8012ada:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8012ade:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012ae2:	bf58      	it	pl
 8012ae4:	0052      	lslpl	r2, r2, #1
 8012ae6:	2500      	movs	r5, #0
 8012ae8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012aec:	1076      	asrs	r6, r6, #1
 8012aee:	0052      	lsls	r2, r2, #1
 8012af0:	f04f 0e16 	mov.w	lr, #22
 8012af4:	46ac      	mov	ip, r5
 8012af6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012afa:	eb0c 0001 	add.w	r0, ip, r1
 8012afe:	4298      	cmp	r0, r3
 8012b00:	bfde      	ittt	le
 8012b02:	1a1b      	suble	r3, r3, r0
 8012b04:	eb00 0c01 	addle.w	ip, r0, r1
 8012b08:	186d      	addle	r5, r5, r1
 8012b0a:	005b      	lsls	r3, r3, #1
 8012b0c:	f1be 0e01 	subs.w	lr, lr, #1
 8012b10:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012b14:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012b18:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012b1c:	d1ed      	bne.n	8012afa <__ieee754_sqrt+0x8a>
 8012b1e:	4674      	mov	r4, lr
 8012b20:	2720      	movs	r7, #32
 8012b22:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8012b26:	4563      	cmp	r3, ip
 8012b28:	eb01 000e 	add.w	r0, r1, lr
 8012b2c:	dc02      	bgt.n	8012b34 <__ieee754_sqrt+0xc4>
 8012b2e:	d113      	bne.n	8012b58 <__ieee754_sqrt+0xe8>
 8012b30:	4290      	cmp	r0, r2
 8012b32:	d811      	bhi.n	8012b58 <__ieee754_sqrt+0xe8>
 8012b34:	2800      	cmp	r0, #0
 8012b36:	eb00 0e01 	add.w	lr, r0, r1
 8012b3a:	da57      	bge.n	8012bec <__ieee754_sqrt+0x17c>
 8012b3c:	f1be 0f00 	cmp.w	lr, #0
 8012b40:	db54      	blt.n	8012bec <__ieee754_sqrt+0x17c>
 8012b42:	f10c 0801 	add.w	r8, ip, #1
 8012b46:	eba3 030c 	sub.w	r3, r3, ip
 8012b4a:	4290      	cmp	r0, r2
 8012b4c:	bf88      	it	hi
 8012b4e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012b52:	1a12      	subs	r2, r2, r0
 8012b54:	440c      	add	r4, r1
 8012b56:	46c4      	mov	ip, r8
 8012b58:	005b      	lsls	r3, r3, #1
 8012b5a:	3f01      	subs	r7, #1
 8012b5c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012b60:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012b64:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012b68:	d1dd      	bne.n	8012b26 <__ieee754_sqrt+0xb6>
 8012b6a:	4313      	orrs	r3, r2
 8012b6c:	d01b      	beq.n	8012ba6 <__ieee754_sqrt+0x136>
 8012b6e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8012c1c <__ieee754_sqrt+0x1ac>
 8012b72:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8012c20 <__ieee754_sqrt+0x1b0>
 8012b76:	e9da 0100 	ldrd	r0, r1, [sl]
 8012b7a:	e9db 2300 	ldrd	r2, r3, [fp]
 8012b7e:	f7ed fb83 	bl	8000288 <__aeabi_dsub>
 8012b82:	e9da 8900 	ldrd	r8, r9, [sl]
 8012b86:	4602      	mov	r2, r0
 8012b88:	460b      	mov	r3, r1
 8012b8a:	4640      	mov	r0, r8
 8012b8c:	4649      	mov	r1, r9
 8012b8e:	f7ed ffaf 	bl	8000af0 <__aeabi_dcmple>
 8012b92:	b140      	cbz	r0, 8012ba6 <__ieee754_sqrt+0x136>
 8012b94:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012b98:	e9da 0100 	ldrd	r0, r1, [sl]
 8012b9c:	e9db 2300 	ldrd	r2, r3, [fp]
 8012ba0:	d126      	bne.n	8012bf0 <__ieee754_sqrt+0x180>
 8012ba2:	3501      	adds	r5, #1
 8012ba4:	463c      	mov	r4, r7
 8012ba6:	106a      	asrs	r2, r5, #1
 8012ba8:	0863      	lsrs	r3, r4, #1
 8012baa:	07e9      	lsls	r1, r5, #31
 8012bac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012bb0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012bb4:	bf48      	it	mi
 8012bb6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8012bba:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8012bbe:	461c      	mov	r4, r3
 8012bc0:	e76d      	b.n	8012a9e <__ieee754_sqrt+0x2e>
 8012bc2:	0ad3      	lsrs	r3, r2, #11
 8012bc4:	3815      	subs	r0, #21
 8012bc6:	0552      	lsls	r2, r2, #21
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d0fa      	beq.n	8012bc2 <__ieee754_sqrt+0x152>
 8012bcc:	02dc      	lsls	r4, r3, #11
 8012bce:	d50a      	bpl.n	8012be6 <__ieee754_sqrt+0x176>
 8012bd0:	f1c1 0420 	rsb	r4, r1, #32
 8012bd4:	fa22 f404 	lsr.w	r4, r2, r4
 8012bd8:	1e4d      	subs	r5, r1, #1
 8012bda:	408a      	lsls	r2, r1
 8012bdc:	4323      	orrs	r3, r4
 8012bde:	1b41      	subs	r1, r0, r5
 8012be0:	e772      	b.n	8012ac8 <__ieee754_sqrt+0x58>
 8012be2:	4608      	mov	r0, r1
 8012be4:	e7f0      	b.n	8012bc8 <__ieee754_sqrt+0x158>
 8012be6:	005b      	lsls	r3, r3, #1
 8012be8:	3101      	adds	r1, #1
 8012bea:	e7ef      	b.n	8012bcc <__ieee754_sqrt+0x15c>
 8012bec:	46e0      	mov	r8, ip
 8012bee:	e7aa      	b.n	8012b46 <__ieee754_sqrt+0xd6>
 8012bf0:	f7ed fb4c 	bl	800028c <__adddf3>
 8012bf4:	e9da 8900 	ldrd	r8, r9, [sl]
 8012bf8:	4602      	mov	r2, r0
 8012bfa:	460b      	mov	r3, r1
 8012bfc:	4640      	mov	r0, r8
 8012bfe:	4649      	mov	r1, r9
 8012c00:	f7ed ff6c 	bl	8000adc <__aeabi_dcmplt>
 8012c04:	b120      	cbz	r0, 8012c10 <__ieee754_sqrt+0x1a0>
 8012c06:	1ca0      	adds	r0, r4, #2
 8012c08:	bf08      	it	eq
 8012c0a:	3501      	addeq	r5, #1
 8012c0c:	3402      	adds	r4, #2
 8012c0e:	e7ca      	b.n	8012ba6 <__ieee754_sqrt+0x136>
 8012c10:	3401      	adds	r4, #1
 8012c12:	f024 0401 	bic.w	r4, r4, #1
 8012c16:	e7c6      	b.n	8012ba6 <__ieee754_sqrt+0x136>
 8012c18:	7ff00000 	.word	0x7ff00000
 8012c1c:	200002a0 	.word	0x200002a0
 8012c20:	200002a8 	.word	0x200002a8
 8012c24:	00000000 	.word	0x00000000

08012c28 <__ieee754_atan2>:
 8012c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c2c:	ec57 6b11 	vmov	r6, r7, d1
 8012c30:	4273      	negs	r3, r6
 8012c32:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8012db0 <__ieee754_atan2+0x188>
 8012c36:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8012c3a:	4333      	orrs	r3, r6
 8012c3c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012c40:	4543      	cmp	r3, r8
 8012c42:	ec51 0b10 	vmov	r0, r1, d0
 8012c46:	ee11 5a10 	vmov	r5, s2
 8012c4a:	d80a      	bhi.n	8012c62 <__ieee754_atan2+0x3a>
 8012c4c:	4244      	negs	r4, r0
 8012c4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012c52:	4304      	orrs	r4, r0
 8012c54:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012c58:	4544      	cmp	r4, r8
 8012c5a:	ee10 9a10 	vmov	r9, s0
 8012c5e:	468e      	mov	lr, r1
 8012c60:	d907      	bls.n	8012c72 <__ieee754_atan2+0x4a>
 8012c62:	4632      	mov	r2, r6
 8012c64:	463b      	mov	r3, r7
 8012c66:	f7ed fb11 	bl	800028c <__adddf3>
 8012c6a:	ec41 0b10 	vmov	d0, r0, r1
 8012c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c72:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8012c76:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012c7a:	4334      	orrs	r4, r6
 8012c7c:	d103      	bne.n	8012c86 <__ieee754_atan2+0x5e>
 8012c7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c82:	f7ff bd41 	b.w	8012708 <atan>
 8012c86:	17bc      	asrs	r4, r7, #30
 8012c88:	f004 0402 	and.w	r4, r4, #2
 8012c8c:	ea53 0909 	orrs.w	r9, r3, r9
 8012c90:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8012c94:	d107      	bne.n	8012ca6 <__ieee754_atan2+0x7e>
 8012c96:	2c02      	cmp	r4, #2
 8012c98:	d05f      	beq.n	8012d5a <__ieee754_atan2+0x132>
 8012c9a:	2c03      	cmp	r4, #3
 8012c9c:	d1e5      	bne.n	8012c6a <__ieee754_atan2+0x42>
 8012c9e:	a140      	add	r1, pc, #256	; (adr r1, 8012da0 <__ieee754_atan2+0x178>)
 8012ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ca4:	e7e1      	b.n	8012c6a <__ieee754_atan2+0x42>
 8012ca6:	4315      	orrs	r5, r2
 8012ca8:	d106      	bne.n	8012cb8 <__ieee754_atan2+0x90>
 8012caa:	f1be 0f00 	cmp.w	lr, #0
 8012cae:	da5f      	bge.n	8012d70 <__ieee754_atan2+0x148>
 8012cb0:	a13d      	add	r1, pc, #244	; (adr r1, 8012da8 <__ieee754_atan2+0x180>)
 8012cb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cb6:	e7d8      	b.n	8012c6a <__ieee754_atan2+0x42>
 8012cb8:	4542      	cmp	r2, r8
 8012cba:	d10f      	bne.n	8012cdc <__ieee754_atan2+0xb4>
 8012cbc:	4293      	cmp	r3, r2
 8012cbe:	f104 34ff 	add.w	r4, r4, #4294967295
 8012cc2:	d107      	bne.n	8012cd4 <__ieee754_atan2+0xac>
 8012cc4:	2c02      	cmp	r4, #2
 8012cc6:	d84c      	bhi.n	8012d62 <__ieee754_atan2+0x13a>
 8012cc8:	4b33      	ldr	r3, [pc, #204]	; (8012d98 <__ieee754_atan2+0x170>)
 8012cca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012cce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012cd2:	e7ca      	b.n	8012c6a <__ieee754_atan2+0x42>
 8012cd4:	2c02      	cmp	r4, #2
 8012cd6:	d848      	bhi.n	8012d6a <__ieee754_atan2+0x142>
 8012cd8:	4b30      	ldr	r3, [pc, #192]	; (8012d9c <__ieee754_atan2+0x174>)
 8012cda:	e7f6      	b.n	8012cca <__ieee754_atan2+0xa2>
 8012cdc:	4543      	cmp	r3, r8
 8012cde:	d0e4      	beq.n	8012caa <__ieee754_atan2+0x82>
 8012ce0:	1a9b      	subs	r3, r3, r2
 8012ce2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8012ce6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012cea:	da1e      	bge.n	8012d2a <__ieee754_atan2+0x102>
 8012cec:	2f00      	cmp	r7, #0
 8012cee:	da01      	bge.n	8012cf4 <__ieee754_atan2+0xcc>
 8012cf0:	323c      	adds	r2, #60	; 0x3c
 8012cf2:	db1e      	blt.n	8012d32 <__ieee754_atan2+0x10a>
 8012cf4:	4632      	mov	r2, r6
 8012cf6:	463b      	mov	r3, r7
 8012cf8:	f7ed fda8 	bl	800084c <__aeabi_ddiv>
 8012cfc:	ec41 0b10 	vmov	d0, r0, r1
 8012d00:	f7ff fea2 	bl	8012a48 <fabs>
 8012d04:	f7ff fd00 	bl	8012708 <atan>
 8012d08:	ec51 0b10 	vmov	r0, r1, d0
 8012d0c:	2c01      	cmp	r4, #1
 8012d0e:	d013      	beq.n	8012d38 <__ieee754_atan2+0x110>
 8012d10:	2c02      	cmp	r4, #2
 8012d12:	d015      	beq.n	8012d40 <__ieee754_atan2+0x118>
 8012d14:	2c00      	cmp	r4, #0
 8012d16:	d0a8      	beq.n	8012c6a <__ieee754_atan2+0x42>
 8012d18:	a317      	add	r3, pc, #92	; (adr r3, 8012d78 <__ieee754_atan2+0x150>)
 8012d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d1e:	f7ed fab3 	bl	8000288 <__aeabi_dsub>
 8012d22:	a317      	add	r3, pc, #92	; (adr r3, 8012d80 <__ieee754_atan2+0x158>)
 8012d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d28:	e014      	b.n	8012d54 <__ieee754_atan2+0x12c>
 8012d2a:	a117      	add	r1, pc, #92	; (adr r1, 8012d88 <__ieee754_atan2+0x160>)
 8012d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d30:	e7ec      	b.n	8012d0c <__ieee754_atan2+0xe4>
 8012d32:	2000      	movs	r0, #0
 8012d34:	2100      	movs	r1, #0
 8012d36:	e7e9      	b.n	8012d0c <__ieee754_atan2+0xe4>
 8012d38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	e794      	b.n	8012c6a <__ieee754_atan2+0x42>
 8012d40:	a30d      	add	r3, pc, #52	; (adr r3, 8012d78 <__ieee754_atan2+0x150>)
 8012d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d46:	f7ed fa9f 	bl	8000288 <__aeabi_dsub>
 8012d4a:	4602      	mov	r2, r0
 8012d4c:	460b      	mov	r3, r1
 8012d4e:	a10c      	add	r1, pc, #48	; (adr r1, 8012d80 <__ieee754_atan2+0x158>)
 8012d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d54:	f7ed fa98 	bl	8000288 <__aeabi_dsub>
 8012d58:	e787      	b.n	8012c6a <__ieee754_atan2+0x42>
 8012d5a:	a109      	add	r1, pc, #36	; (adr r1, 8012d80 <__ieee754_atan2+0x158>)
 8012d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d60:	e783      	b.n	8012c6a <__ieee754_atan2+0x42>
 8012d62:	a10b      	add	r1, pc, #44	; (adr r1, 8012d90 <__ieee754_atan2+0x168>)
 8012d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d68:	e77f      	b.n	8012c6a <__ieee754_atan2+0x42>
 8012d6a:	2000      	movs	r0, #0
 8012d6c:	2100      	movs	r1, #0
 8012d6e:	e77c      	b.n	8012c6a <__ieee754_atan2+0x42>
 8012d70:	a105      	add	r1, pc, #20	; (adr r1, 8012d88 <__ieee754_atan2+0x160>)
 8012d72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d76:	e778      	b.n	8012c6a <__ieee754_atan2+0x42>
 8012d78:	33145c07 	.word	0x33145c07
 8012d7c:	3ca1a626 	.word	0x3ca1a626
 8012d80:	54442d18 	.word	0x54442d18
 8012d84:	400921fb 	.word	0x400921fb
 8012d88:	54442d18 	.word	0x54442d18
 8012d8c:	3ff921fb 	.word	0x3ff921fb
 8012d90:	54442d18 	.word	0x54442d18
 8012d94:	3fe921fb 	.word	0x3fe921fb
 8012d98:	08014278 	.word	0x08014278
 8012d9c:	08014290 	.word	0x08014290
 8012da0:	54442d18 	.word	0x54442d18
 8012da4:	c00921fb 	.word	0xc00921fb
 8012da8:	54442d18 	.word	0x54442d18
 8012dac:	bff921fb 	.word	0xbff921fb
 8012db0:	7ff00000 	.word	0x7ff00000
 8012db4:	00000000 	.word	0x00000000

08012db8 <__ieee754_log>:
 8012db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dbc:	ec51 0b10 	vmov	r0, r1, d0
 8012dc0:	ed2d 8b04 	vpush	{d8-d9}
 8012dc4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8012dc8:	b083      	sub	sp, #12
 8012dca:	460d      	mov	r5, r1
 8012dcc:	da29      	bge.n	8012e22 <__ieee754_log+0x6a>
 8012dce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012dd2:	4303      	orrs	r3, r0
 8012dd4:	ee10 2a10 	vmov	r2, s0
 8012dd8:	d10c      	bne.n	8012df4 <__ieee754_log+0x3c>
 8012dda:	49cf      	ldr	r1, [pc, #828]	; (8013118 <__ieee754_log+0x360>)
 8012ddc:	2200      	movs	r2, #0
 8012dde:	2300      	movs	r3, #0
 8012de0:	2000      	movs	r0, #0
 8012de2:	f7ed fd33 	bl	800084c <__aeabi_ddiv>
 8012de6:	ec41 0b10 	vmov	d0, r0, r1
 8012dea:	b003      	add	sp, #12
 8012dec:	ecbd 8b04 	vpop	{d8-d9}
 8012df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012df4:	2900      	cmp	r1, #0
 8012df6:	da05      	bge.n	8012e04 <__ieee754_log+0x4c>
 8012df8:	460b      	mov	r3, r1
 8012dfa:	f7ed fa45 	bl	8000288 <__aeabi_dsub>
 8012dfe:	2200      	movs	r2, #0
 8012e00:	2300      	movs	r3, #0
 8012e02:	e7ee      	b.n	8012de2 <__ieee754_log+0x2a>
 8012e04:	4bc5      	ldr	r3, [pc, #788]	; (801311c <__ieee754_log+0x364>)
 8012e06:	2200      	movs	r2, #0
 8012e08:	f7ed fbf6 	bl	80005f8 <__aeabi_dmul>
 8012e0c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8012e10:	460d      	mov	r5, r1
 8012e12:	4ac3      	ldr	r2, [pc, #780]	; (8013120 <__ieee754_log+0x368>)
 8012e14:	4295      	cmp	r5, r2
 8012e16:	dd06      	ble.n	8012e26 <__ieee754_log+0x6e>
 8012e18:	4602      	mov	r2, r0
 8012e1a:	460b      	mov	r3, r1
 8012e1c:	f7ed fa36 	bl	800028c <__adddf3>
 8012e20:	e7e1      	b.n	8012de6 <__ieee754_log+0x2e>
 8012e22:	2300      	movs	r3, #0
 8012e24:	e7f5      	b.n	8012e12 <__ieee754_log+0x5a>
 8012e26:	152c      	asrs	r4, r5, #20
 8012e28:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8012e2c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012e30:	441c      	add	r4, r3
 8012e32:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8012e36:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8012e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012e3e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8012e42:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8012e46:	ea42 0105 	orr.w	r1, r2, r5
 8012e4a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8012e4e:	2200      	movs	r2, #0
 8012e50:	4bb4      	ldr	r3, [pc, #720]	; (8013124 <__ieee754_log+0x36c>)
 8012e52:	f7ed fa19 	bl	8000288 <__aeabi_dsub>
 8012e56:	1cab      	adds	r3, r5, #2
 8012e58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e5c:	2b02      	cmp	r3, #2
 8012e5e:	4682      	mov	sl, r0
 8012e60:	468b      	mov	fp, r1
 8012e62:	f04f 0200 	mov.w	r2, #0
 8012e66:	dc53      	bgt.n	8012f10 <__ieee754_log+0x158>
 8012e68:	2300      	movs	r3, #0
 8012e6a:	f7ed fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8012e6e:	b1d0      	cbz	r0, 8012ea6 <__ieee754_log+0xee>
 8012e70:	2c00      	cmp	r4, #0
 8012e72:	f000 8122 	beq.w	80130ba <__ieee754_log+0x302>
 8012e76:	4620      	mov	r0, r4
 8012e78:	f7ed fb54 	bl	8000524 <__aeabi_i2d>
 8012e7c:	a390      	add	r3, pc, #576	; (adr r3, 80130c0 <__ieee754_log+0x308>)
 8012e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e82:	4606      	mov	r6, r0
 8012e84:	460f      	mov	r7, r1
 8012e86:	f7ed fbb7 	bl	80005f8 <__aeabi_dmul>
 8012e8a:	a38f      	add	r3, pc, #572	; (adr r3, 80130c8 <__ieee754_log+0x310>)
 8012e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e90:	4604      	mov	r4, r0
 8012e92:	460d      	mov	r5, r1
 8012e94:	4630      	mov	r0, r6
 8012e96:	4639      	mov	r1, r7
 8012e98:	f7ed fbae 	bl	80005f8 <__aeabi_dmul>
 8012e9c:	4602      	mov	r2, r0
 8012e9e:	460b      	mov	r3, r1
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	4629      	mov	r1, r5
 8012ea4:	e7ba      	b.n	8012e1c <__ieee754_log+0x64>
 8012ea6:	a38a      	add	r3, pc, #552	; (adr r3, 80130d0 <__ieee754_log+0x318>)
 8012ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eac:	4650      	mov	r0, sl
 8012eae:	4659      	mov	r1, fp
 8012eb0:	f7ed fba2 	bl	80005f8 <__aeabi_dmul>
 8012eb4:	4602      	mov	r2, r0
 8012eb6:	460b      	mov	r3, r1
 8012eb8:	2000      	movs	r0, #0
 8012eba:	499b      	ldr	r1, [pc, #620]	; (8013128 <__ieee754_log+0x370>)
 8012ebc:	f7ed f9e4 	bl	8000288 <__aeabi_dsub>
 8012ec0:	4652      	mov	r2, sl
 8012ec2:	4606      	mov	r6, r0
 8012ec4:	460f      	mov	r7, r1
 8012ec6:	465b      	mov	r3, fp
 8012ec8:	4650      	mov	r0, sl
 8012eca:	4659      	mov	r1, fp
 8012ecc:	f7ed fb94 	bl	80005f8 <__aeabi_dmul>
 8012ed0:	4602      	mov	r2, r0
 8012ed2:	460b      	mov	r3, r1
 8012ed4:	4630      	mov	r0, r6
 8012ed6:	4639      	mov	r1, r7
 8012ed8:	f7ed fb8e 	bl	80005f8 <__aeabi_dmul>
 8012edc:	4606      	mov	r6, r0
 8012ede:	460f      	mov	r7, r1
 8012ee0:	b914      	cbnz	r4, 8012ee8 <__ieee754_log+0x130>
 8012ee2:	4632      	mov	r2, r6
 8012ee4:	463b      	mov	r3, r7
 8012ee6:	e0a2      	b.n	801302e <__ieee754_log+0x276>
 8012ee8:	4620      	mov	r0, r4
 8012eea:	f7ed fb1b 	bl	8000524 <__aeabi_i2d>
 8012eee:	a374      	add	r3, pc, #464	; (adr r3, 80130c0 <__ieee754_log+0x308>)
 8012ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef4:	4680      	mov	r8, r0
 8012ef6:	4689      	mov	r9, r1
 8012ef8:	f7ed fb7e 	bl	80005f8 <__aeabi_dmul>
 8012efc:	a372      	add	r3, pc, #456	; (adr r3, 80130c8 <__ieee754_log+0x310>)
 8012efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f02:	4604      	mov	r4, r0
 8012f04:	460d      	mov	r5, r1
 8012f06:	4640      	mov	r0, r8
 8012f08:	4649      	mov	r1, r9
 8012f0a:	f7ed fb75 	bl	80005f8 <__aeabi_dmul>
 8012f0e:	e0a7      	b.n	8013060 <__ieee754_log+0x2a8>
 8012f10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012f14:	f7ed f9ba 	bl	800028c <__adddf3>
 8012f18:	4602      	mov	r2, r0
 8012f1a:	460b      	mov	r3, r1
 8012f1c:	4650      	mov	r0, sl
 8012f1e:	4659      	mov	r1, fp
 8012f20:	f7ed fc94 	bl	800084c <__aeabi_ddiv>
 8012f24:	ec41 0b18 	vmov	d8, r0, r1
 8012f28:	4620      	mov	r0, r4
 8012f2a:	f7ed fafb 	bl	8000524 <__aeabi_i2d>
 8012f2e:	ec53 2b18 	vmov	r2, r3, d8
 8012f32:	ec41 0b19 	vmov	d9, r0, r1
 8012f36:	ec51 0b18 	vmov	r0, r1, d8
 8012f3a:	f7ed fb5d 	bl	80005f8 <__aeabi_dmul>
 8012f3e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8012f42:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8012f46:	9301      	str	r3, [sp, #4]
 8012f48:	4602      	mov	r2, r0
 8012f4a:	460b      	mov	r3, r1
 8012f4c:	4680      	mov	r8, r0
 8012f4e:	4689      	mov	r9, r1
 8012f50:	f7ed fb52 	bl	80005f8 <__aeabi_dmul>
 8012f54:	a360      	add	r3, pc, #384	; (adr r3, 80130d8 <__ieee754_log+0x320>)
 8012f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5a:	4606      	mov	r6, r0
 8012f5c:	460f      	mov	r7, r1
 8012f5e:	f7ed fb4b 	bl	80005f8 <__aeabi_dmul>
 8012f62:	a35f      	add	r3, pc, #380	; (adr r3, 80130e0 <__ieee754_log+0x328>)
 8012f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f68:	f7ed f990 	bl	800028c <__adddf3>
 8012f6c:	4632      	mov	r2, r6
 8012f6e:	463b      	mov	r3, r7
 8012f70:	f7ed fb42 	bl	80005f8 <__aeabi_dmul>
 8012f74:	a35c      	add	r3, pc, #368	; (adr r3, 80130e8 <__ieee754_log+0x330>)
 8012f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f7a:	f7ed f987 	bl	800028c <__adddf3>
 8012f7e:	4632      	mov	r2, r6
 8012f80:	463b      	mov	r3, r7
 8012f82:	f7ed fb39 	bl	80005f8 <__aeabi_dmul>
 8012f86:	a35a      	add	r3, pc, #360	; (adr r3, 80130f0 <__ieee754_log+0x338>)
 8012f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f8c:	f7ed f97e 	bl	800028c <__adddf3>
 8012f90:	4642      	mov	r2, r8
 8012f92:	464b      	mov	r3, r9
 8012f94:	f7ed fb30 	bl	80005f8 <__aeabi_dmul>
 8012f98:	a357      	add	r3, pc, #348	; (adr r3, 80130f8 <__ieee754_log+0x340>)
 8012f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9e:	4680      	mov	r8, r0
 8012fa0:	4689      	mov	r9, r1
 8012fa2:	4630      	mov	r0, r6
 8012fa4:	4639      	mov	r1, r7
 8012fa6:	f7ed fb27 	bl	80005f8 <__aeabi_dmul>
 8012faa:	a355      	add	r3, pc, #340	; (adr r3, 8013100 <__ieee754_log+0x348>)
 8012fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb0:	f7ed f96c 	bl	800028c <__adddf3>
 8012fb4:	4632      	mov	r2, r6
 8012fb6:	463b      	mov	r3, r7
 8012fb8:	f7ed fb1e 	bl	80005f8 <__aeabi_dmul>
 8012fbc:	a352      	add	r3, pc, #328	; (adr r3, 8013108 <__ieee754_log+0x350>)
 8012fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc2:	f7ed f963 	bl	800028c <__adddf3>
 8012fc6:	4632      	mov	r2, r6
 8012fc8:	463b      	mov	r3, r7
 8012fca:	f7ed fb15 	bl	80005f8 <__aeabi_dmul>
 8012fce:	460b      	mov	r3, r1
 8012fd0:	4602      	mov	r2, r0
 8012fd2:	4649      	mov	r1, r9
 8012fd4:	4640      	mov	r0, r8
 8012fd6:	f7ed f959 	bl	800028c <__adddf3>
 8012fda:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8012fde:	9b01      	ldr	r3, [sp, #4]
 8012fe0:	3551      	adds	r5, #81	; 0x51
 8012fe2:	431d      	orrs	r5, r3
 8012fe4:	2d00      	cmp	r5, #0
 8012fe6:	4680      	mov	r8, r0
 8012fe8:	4689      	mov	r9, r1
 8012fea:	dd48      	ble.n	801307e <__ieee754_log+0x2c6>
 8012fec:	4b4e      	ldr	r3, [pc, #312]	; (8013128 <__ieee754_log+0x370>)
 8012fee:	2200      	movs	r2, #0
 8012ff0:	4650      	mov	r0, sl
 8012ff2:	4659      	mov	r1, fp
 8012ff4:	f7ed fb00 	bl	80005f8 <__aeabi_dmul>
 8012ff8:	4652      	mov	r2, sl
 8012ffa:	465b      	mov	r3, fp
 8012ffc:	f7ed fafc 	bl	80005f8 <__aeabi_dmul>
 8013000:	4602      	mov	r2, r0
 8013002:	460b      	mov	r3, r1
 8013004:	4606      	mov	r6, r0
 8013006:	460f      	mov	r7, r1
 8013008:	4640      	mov	r0, r8
 801300a:	4649      	mov	r1, r9
 801300c:	f7ed f93e 	bl	800028c <__adddf3>
 8013010:	ec53 2b18 	vmov	r2, r3, d8
 8013014:	f7ed faf0 	bl	80005f8 <__aeabi_dmul>
 8013018:	4680      	mov	r8, r0
 801301a:	4689      	mov	r9, r1
 801301c:	b964      	cbnz	r4, 8013038 <__ieee754_log+0x280>
 801301e:	4602      	mov	r2, r0
 8013020:	460b      	mov	r3, r1
 8013022:	4630      	mov	r0, r6
 8013024:	4639      	mov	r1, r7
 8013026:	f7ed f92f 	bl	8000288 <__aeabi_dsub>
 801302a:	4602      	mov	r2, r0
 801302c:	460b      	mov	r3, r1
 801302e:	4650      	mov	r0, sl
 8013030:	4659      	mov	r1, fp
 8013032:	f7ed f929 	bl	8000288 <__aeabi_dsub>
 8013036:	e6d6      	b.n	8012de6 <__ieee754_log+0x2e>
 8013038:	a321      	add	r3, pc, #132	; (adr r3, 80130c0 <__ieee754_log+0x308>)
 801303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801303e:	ec51 0b19 	vmov	r0, r1, d9
 8013042:	f7ed fad9 	bl	80005f8 <__aeabi_dmul>
 8013046:	a320      	add	r3, pc, #128	; (adr r3, 80130c8 <__ieee754_log+0x310>)
 8013048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801304c:	4604      	mov	r4, r0
 801304e:	460d      	mov	r5, r1
 8013050:	ec51 0b19 	vmov	r0, r1, d9
 8013054:	f7ed fad0 	bl	80005f8 <__aeabi_dmul>
 8013058:	4642      	mov	r2, r8
 801305a:	464b      	mov	r3, r9
 801305c:	f7ed f916 	bl	800028c <__adddf3>
 8013060:	4602      	mov	r2, r0
 8013062:	460b      	mov	r3, r1
 8013064:	4630      	mov	r0, r6
 8013066:	4639      	mov	r1, r7
 8013068:	f7ed f90e 	bl	8000288 <__aeabi_dsub>
 801306c:	4652      	mov	r2, sl
 801306e:	465b      	mov	r3, fp
 8013070:	f7ed f90a 	bl	8000288 <__aeabi_dsub>
 8013074:	4602      	mov	r2, r0
 8013076:	460b      	mov	r3, r1
 8013078:	4620      	mov	r0, r4
 801307a:	4629      	mov	r1, r5
 801307c:	e7d9      	b.n	8013032 <__ieee754_log+0x27a>
 801307e:	4602      	mov	r2, r0
 8013080:	460b      	mov	r3, r1
 8013082:	4650      	mov	r0, sl
 8013084:	4659      	mov	r1, fp
 8013086:	f7ed f8ff 	bl	8000288 <__aeabi_dsub>
 801308a:	ec53 2b18 	vmov	r2, r3, d8
 801308e:	f7ed fab3 	bl	80005f8 <__aeabi_dmul>
 8013092:	4606      	mov	r6, r0
 8013094:	460f      	mov	r7, r1
 8013096:	2c00      	cmp	r4, #0
 8013098:	f43f af23 	beq.w	8012ee2 <__ieee754_log+0x12a>
 801309c:	a308      	add	r3, pc, #32	; (adr r3, 80130c0 <__ieee754_log+0x308>)
 801309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130a2:	ec51 0b19 	vmov	r0, r1, d9
 80130a6:	f7ed faa7 	bl	80005f8 <__aeabi_dmul>
 80130aa:	a307      	add	r3, pc, #28	; (adr r3, 80130c8 <__ieee754_log+0x310>)
 80130ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b0:	4604      	mov	r4, r0
 80130b2:	460d      	mov	r5, r1
 80130b4:	ec51 0b19 	vmov	r0, r1, d9
 80130b8:	e727      	b.n	8012f0a <__ieee754_log+0x152>
 80130ba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8013110 <__ieee754_log+0x358>
 80130be:	e694      	b.n	8012dea <__ieee754_log+0x32>
 80130c0:	fee00000 	.word	0xfee00000
 80130c4:	3fe62e42 	.word	0x3fe62e42
 80130c8:	35793c76 	.word	0x35793c76
 80130cc:	3dea39ef 	.word	0x3dea39ef
 80130d0:	55555555 	.word	0x55555555
 80130d4:	3fd55555 	.word	0x3fd55555
 80130d8:	df3e5244 	.word	0xdf3e5244
 80130dc:	3fc2f112 	.word	0x3fc2f112
 80130e0:	96cb03de 	.word	0x96cb03de
 80130e4:	3fc74664 	.word	0x3fc74664
 80130e8:	94229359 	.word	0x94229359
 80130ec:	3fd24924 	.word	0x3fd24924
 80130f0:	55555593 	.word	0x55555593
 80130f4:	3fe55555 	.word	0x3fe55555
 80130f8:	d078c69f 	.word	0xd078c69f
 80130fc:	3fc39a09 	.word	0x3fc39a09
 8013100:	1d8e78af 	.word	0x1d8e78af
 8013104:	3fcc71c5 	.word	0x3fcc71c5
 8013108:	9997fa04 	.word	0x9997fa04
 801310c:	3fd99999 	.word	0x3fd99999
	...
 8013118:	c3500000 	.word	0xc3500000
 801311c:	43500000 	.word	0x43500000
 8013120:	7fefffff 	.word	0x7fefffff
 8013124:	3ff00000 	.word	0x3ff00000
 8013128:	3fe00000 	.word	0x3fe00000
 801312c:	00000000 	.word	0x00000000

08013130 <__ieee754_pow>:
 8013130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013134:	ed2d 8b06 	vpush	{d8-d10}
 8013138:	b089      	sub	sp, #36	; 0x24
 801313a:	ed8d 1b00 	vstr	d1, [sp]
 801313e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013142:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013146:	ea58 0102 	orrs.w	r1, r8, r2
 801314a:	ec57 6b10 	vmov	r6, r7, d0
 801314e:	d115      	bne.n	801317c <__ieee754_pow+0x4c>
 8013150:	19b3      	adds	r3, r6, r6
 8013152:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8013156:	4152      	adcs	r2, r2
 8013158:	4299      	cmp	r1, r3
 801315a:	4b89      	ldr	r3, [pc, #548]	; (8013380 <__ieee754_pow+0x250>)
 801315c:	4193      	sbcs	r3, r2
 801315e:	f080 84d1 	bcs.w	8013b04 <__ieee754_pow+0x9d4>
 8013162:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013166:	4630      	mov	r0, r6
 8013168:	4639      	mov	r1, r7
 801316a:	f7ed f88f 	bl	800028c <__adddf3>
 801316e:	ec41 0b10 	vmov	d0, r0, r1
 8013172:	b009      	add	sp, #36	; 0x24
 8013174:	ecbd 8b06 	vpop	{d8-d10}
 8013178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801317c:	4b81      	ldr	r3, [pc, #516]	; (8013384 <__ieee754_pow+0x254>)
 801317e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013182:	429c      	cmp	r4, r3
 8013184:	ee10 aa10 	vmov	sl, s0
 8013188:	463d      	mov	r5, r7
 801318a:	dc06      	bgt.n	801319a <__ieee754_pow+0x6a>
 801318c:	d101      	bne.n	8013192 <__ieee754_pow+0x62>
 801318e:	2e00      	cmp	r6, #0
 8013190:	d1e7      	bne.n	8013162 <__ieee754_pow+0x32>
 8013192:	4598      	cmp	r8, r3
 8013194:	dc01      	bgt.n	801319a <__ieee754_pow+0x6a>
 8013196:	d10f      	bne.n	80131b8 <__ieee754_pow+0x88>
 8013198:	b172      	cbz	r2, 80131b8 <__ieee754_pow+0x88>
 801319a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801319e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80131a2:	ea55 050a 	orrs.w	r5, r5, sl
 80131a6:	d1dc      	bne.n	8013162 <__ieee754_pow+0x32>
 80131a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80131ac:	18db      	adds	r3, r3, r3
 80131ae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80131b2:	4152      	adcs	r2, r2
 80131b4:	429d      	cmp	r5, r3
 80131b6:	e7d0      	b.n	801315a <__ieee754_pow+0x2a>
 80131b8:	2d00      	cmp	r5, #0
 80131ba:	da3b      	bge.n	8013234 <__ieee754_pow+0x104>
 80131bc:	4b72      	ldr	r3, [pc, #456]	; (8013388 <__ieee754_pow+0x258>)
 80131be:	4598      	cmp	r8, r3
 80131c0:	dc51      	bgt.n	8013266 <__ieee754_pow+0x136>
 80131c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80131c6:	4598      	cmp	r8, r3
 80131c8:	f340 84ab 	ble.w	8013b22 <__ieee754_pow+0x9f2>
 80131cc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80131d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80131d4:	2b14      	cmp	r3, #20
 80131d6:	dd0f      	ble.n	80131f8 <__ieee754_pow+0xc8>
 80131d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80131dc:	fa22 f103 	lsr.w	r1, r2, r3
 80131e0:	fa01 f303 	lsl.w	r3, r1, r3
 80131e4:	4293      	cmp	r3, r2
 80131e6:	f040 849c 	bne.w	8013b22 <__ieee754_pow+0x9f2>
 80131ea:	f001 0101 	and.w	r1, r1, #1
 80131ee:	f1c1 0302 	rsb	r3, r1, #2
 80131f2:	9304      	str	r3, [sp, #16]
 80131f4:	b182      	cbz	r2, 8013218 <__ieee754_pow+0xe8>
 80131f6:	e05f      	b.n	80132b8 <__ieee754_pow+0x188>
 80131f8:	2a00      	cmp	r2, #0
 80131fa:	d15b      	bne.n	80132b4 <__ieee754_pow+0x184>
 80131fc:	f1c3 0314 	rsb	r3, r3, #20
 8013200:	fa48 f103 	asr.w	r1, r8, r3
 8013204:	fa01 f303 	lsl.w	r3, r1, r3
 8013208:	4543      	cmp	r3, r8
 801320a:	f040 8487 	bne.w	8013b1c <__ieee754_pow+0x9ec>
 801320e:	f001 0101 	and.w	r1, r1, #1
 8013212:	f1c1 0302 	rsb	r3, r1, #2
 8013216:	9304      	str	r3, [sp, #16]
 8013218:	4b5c      	ldr	r3, [pc, #368]	; (801338c <__ieee754_pow+0x25c>)
 801321a:	4598      	cmp	r8, r3
 801321c:	d132      	bne.n	8013284 <__ieee754_pow+0x154>
 801321e:	f1b9 0f00 	cmp.w	r9, #0
 8013222:	f280 8477 	bge.w	8013b14 <__ieee754_pow+0x9e4>
 8013226:	4959      	ldr	r1, [pc, #356]	; (801338c <__ieee754_pow+0x25c>)
 8013228:	4632      	mov	r2, r6
 801322a:	463b      	mov	r3, r7
 801322c:	2000      	movs	r0, #0
 801322e:	f7ed fb0d 	bl	800084c <__aeabi_ddiv>
 8013232:	e79c      	b.n	801316e <__ieee754_pow+0x3e>
 8013234:	2300      	movs	r3, #0
 8013236:	9304      	str	r3, [sp, #16]
 8013238:	2a00      	cmp	r2, #0
 801323a:	d13d      	bne.n	80132b8 <__ieee754_pow+0x188>
 801323c:	4b51      	ldr	r3, [pc, #324]	; (8013384 <__ieee754_pow+0x254>)
 801323e:	4598      	cmp	r8, r3
 8013240:	d1ea      	bne.n	8013218 <__ieee754_pow+0xe8>
 8013242:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013246:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801324a:	ea53 030a 	orrs.w	r3, r3, sl
 801324e:	f000 8459 	beq.w	8013b04 <__ieee754_pow+0x9d4>
 8013252:	4b4f      	ldr	r3, [pc, #316]	; (8013390 <__ieee754_pow+0x260>)
 8013254:	429c      	cmp	r4, r3
 8013256:	dd08      	ble.n	801326a <__ieee754_pow+0x13a>
 8013258:	f1b9 0f00 	cmp.w	r9, #0
 801325c:	f2c0 8456 	blt.w	8013b0c <__ieee754_pow+0x9dc>
 8013260:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013264:	e783      	b.n	801316e <__ieee754_pow+0x3e>
 8013266:	2302      	movs	r3, #2
 8013268:	e7e5      	b.n	8013236 <__ieee754_pow+0x106>
 801326a:	f1b9 0f00 	cmp.w	r9, #0
 801326e:	f04f 0000 	mov.w	r0, #0
 8013272:	f04f 0100 	mov.w	r1, #0
 8013276:	f6bf af7a 	bge.w	801316e <__ieee754_pow+0x3e>
 801327a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801327e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013282:	e774      	b.n	801316e <__ieee754_pow+0x3e>
 8013284:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013288:	d106      	bne.n	8013298 <__ieee754_pow+0x168>
 801328a:	4632      	mov	r2, r6
 801328c:	463b      	mov	r3, r7
 801328e:	4630      	mov	r0, r6
 8013290:	4639      	mov	r1, r7
 8013292:	f7ed f9b1 	bl	80005f8 <__aeabi_dmul>
 8013296:	e76a      	b.n	801316e <__ieee754_pow+0x3e>
 8013298:	4b3e      	ldr	r3, [pc, #248]	; (8013394 <__ieee754_pow+0x264>)
 801329a:	4599      	cmp	r9, r3
 801329c:	d10c      	bne.n	80132b8 <__ieee754_pow+0x188>
 801329e:	2d00      	cmp	r5, #0
 80132a0:	db0a      	blt.n	80132b8 <__ieee754_pow+0x188>
 80132a2:	ec47 6b10 	vmov	d0, r6, r7
 80132a6:	b009      	add	sp, #36	; 0x24
 80132a8:	ecbd 8b06 	vpop	{d8-d10}
 80132ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132b0:	f7ff bbde 	b.w	8012a70 <__ieee754_sqrt>
 80132b4:	2300      	movs	r3, #0
 80132b6:	9304      	str	r3, [sp, #16]
 80132b8:	ec47 6b10 	vmov	d0, r6, r7
 80132bc:	f7ff fbc4 	bl	8012a48 <fabs>
 80132c0:	ec51 0b10 	vmov	r0, r1, d0
 80132c4:	f1ba 0f00 	cmp.w	sl, #0
 80132c8:	d129      	bne.n	801331e <__ieee754_pow+0x1ee>
 80132ca:	b124      	cbz	r4, 80132d6 <__ieee754_pow+0x1a6>
 80132cc:	4b2f      	ldr	r3, [pc, #188]	; (801338c <__ieee754_pow+0x25c>)
 80132ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80132d2:	429a      	cmp	r2, r3
 80132d4:	d123      	bne.n	801331e <__ieee754_pow+0x1ee>
 80132d6:	f1b9 0f00 	cmp.w	r9, #0
 80132da:	da05      	bge.n	80132e8 <__ieee754_pow+0x1b8>
 80132dc:	4602      	mov	r2, r0
 80132de:	460b      	mov	r3, r1
 80132e0:	2000      	movs	r0, #0
 80132e2:	492a      	ldr	r1, [pc, #168]	; (801338c <__ieee754_pow+0x25c>)
 80132e4:	f7ed fab2 	bl	800084c <__aeabi_ddiv>
 80132e8:	2d00      	cmp	r5, #0
 80132ea:	f6bf af40 	bge.w	801316e <__ieee754_pow+0x3e>
 80132ee:	9b04      	ldr	r3, [sp, #16]
 80132f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80132f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80132f8:	431c      	orrs	r4, r3
 80132fa:	d108      	bne.n	801330e <__ieee754_pow+0x1de>
 80132fc:	4602      	mov	r2, r0
 80132fe:	460b      	mov	r3, r1
 8013300:	4610      	mov	r0, r2
 8013302:	4619      	mov	r1, r3
 8013304:	f7ec ffc0 	bl	8000288 <__aeabi_dsub>
 8013308:	4602      	mov	r2, r0
 801330a:	460b      	mov	r3, r1
 801330c:	e78f      	b.n	801322e <__ieee754_pow+0xfe>
 801330e:	9b04      	ldr	r3, [sp, #16]
 8013310:	2b01      	cmp	r3, #1
 8013312:	f47f af2c 	bne.w	801316e <__ieee754_pow+0x3e>
 8013316:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801331a:	4619      	mov	r1, r3
 801331c:	e727      	b.n	801316e <__ieee754_pow+0x3e>
 801331e:	0feb      	lsrs	r3, r5, #31
 8013320:	3b01      	subs	r3, #1
 8013322:	9306      	str	r3, [sp, #24]
 8013324:	9a06      	ldr	r2, [sp, #24]
 8013326:	9b04      	ldr	r3, [sp, #16]
 8013328:	4313      	orrs	r3, r2
 801332a:	d102      	bne.n	8013332 <__ieee754_pow+0x202>
 801332c:	4632      	mov	r2, r6
 801332e:	463b      	mov	r3, r7
 8013330:	e7e6      	b.n	8013300 <__ieee754_pow+0x1d0>
 8013332:	4b19      	ldr	r3, [pc, #100]	; (8013398 <__ieee754_pow+0x268>)
 8013334:	4598      	cmp	r8, r3
 8013336:	f340 80fb 	ble.w	8013530 <__ieee754_pow+0x400>
 801333a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801333e:	4598      	cmp	r8, r3
 8013340:	4b13      	ldr	r3, [pc, #76]	; (8013390 <__ieee754_pow+0x260>)
 8013342:	dd0c      	ble.n	801335e <__ieee754_pow+0x22e>
 8013344:	429c      	cmp	r4, r3
 8013346:	dc0f      	bgt.n	8013368 <__ieee754_pow+0x238>
 8013348:	f1b9 0f00 	cmp.w	r9, #0
 801334c:	da0f      	bge.n	801336e <__ieee754_pow+0x23e>
 801334e:	2000      	movs	r0, #0
 8013350:	b009      	add	sp, #36	; 0x24
 8013352:	ecbd 8b06 	vpop	{d8-d10}
 8013356:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801335a:	f000 bcba 	b.w	8013cd2 <__math_oflow>
 801335e:	429c      	cmp	r4, r3
 8013360:	dbf2      	blt.n	8013348 <__ieee754_pow+0x218>
 8013362:	4b0a      	ldr	r3, [pc, #40]	; (801338c <__ieee754_pow+0x25c>)
 8013364:	429c      	cmp	r4, r3
 8013366:	dd19      	ble.n	801339c <__ieee754_pow+0x26c>
 8013368:	f1b9 0f00 	cmp.w	r9, #0
 801336c:	dcef      	bgt.n	801334e <__ieee754_pow+0x21e>
 801336e:	2000      	movs	r0, #0
 8013370:	b009      	add	sp, #36	; 0x24
 8013372:	ecbd 8b06 	vpop	{d8-d10}
 8013376:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801337a:	f000 bca1 	b.w	8013cc0 <__math_uflow>
 801337e:	bf00      	nop
 8013380:	fff00000 	.word	0xfff00000
 8013384:	7ff00000 	.word	0x7ff00000
 8013388:	433fffff 	.word	0x433fffff
 801338c:	3ff00000 	.word	0x3ff00000
 8013390:	3fefffff 	.word	0x3fefffff
 8013394:	3fe00000 	.word	0x3fe00000
 8013398:	41e00000 	.word	0x41e00000
 801339c:	4b60      	ldr	r3, [pc, #384]	; (8013520 <__ieee754_pow+0x3f0>)
 801339e:	2200      	movs	r2, #0
 80133a0:	f7ec ff72 	bl	8000288 <__aeabi_dsub>
 80133a4:	a354      	add	r3, pc, #336	; (adr r3, 80134f8 <__ieee754_pow+0x3c8>)
 80133a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133aa:	4604      	mov	r4, r0
 80133ac:	460d      	mov	r5, r1
 80133ae:	f7ed f923 	bl	80005f8 <__aeabi_dmul>
 80133b2:	a353      	add	r3, pc, #332	; (adr r3, 8013500 <__ieee754_pow+0x3d0>)
 80133b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b8:	4606      	mov	r6, r0
 80133ba:	460f      	mov	r7, r1
 80133bc:	4620      	mov	r0, r4
 80133be:	4629      	mov	r1, r5
 80133c0:	f7ed f91a 	bl	80005f8 <__aeabi_dmul>
 80133c4:	4b57      	ldr	r3, [pc, #348]	; (8013524 <__ieee754_pow+0x3f4>)
 80133c6:	4682      	mov	sl, r0
 80133c8:	468b      	mov	fp, r1
 80133ca:	2200      	movs	r2, #0
 80133cc:	4620      	mov	r0, r4
 80133ce:	4629      	mov	r1, r5
 80133d0:	f7ed f912 	bl	80005f8 <__aeabi_dmul>
 80133d4:	4602      	mov	r2, r0
 80133d6:	460b      	mov	r3, r1
 80133d8:	a14b      	add	r1, pc, #300	; (adr r1, 8013508 <__ieee754_pow+0x3d8>)
 80133da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133de:	f7ec ff53 	bl	8000288 <__aeabi_dsub>
 80133e2:	4622      	mov	r2, r4
 80133e4:	462b      	mov	r3, r5
 80133e6:	f7ed f907 	bl	80005f8 <__aeabi_dmul>
 80133ea:	4602      	mov	r2, r0
 80133ec:	460b      	mov	r3, r1
 80133ee:	2000      	movs	r0, #0
 80133f0:	494d      	ldr	r1, [pc, #308]	; (8013528 <__ieee754_pow+0x3f8>)
 80133f2:	f7ec ff49 	bl	8000288 <__aeabi_dsub>
 80133f6:	4622      	mov	r2, r4
 80133f8:	4680      	mov	r8, r0
 80133fa:	4689      	mov	r9, r1
 80133fc:	462b      	mov	r3, r5
 80133fe:	4620      	mov	r0, r4
 8013400:	4629      	mov	r1, r5
 8013402:	f7ed f8f9 	bl	80005f8 <__aeabi_dmul>
 8013406:	4602      	mov	r2, r0
 8013408:	460b      	mov	r3, r1
 801340a:	4640      	mov	r0, r8
 801340c:	4649      	mov	r1, r9
 801340e:	f7ed f8f3 	bl	80005f8 <__aeabi_dmul>
 8013412:	a33f      	add	r3, pc, #252	; (adr r3, 8013510 <__ieee754_pow+0x3e0>)
 8013414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013418:	f7ed f8ee 	bl	80005f8 <__aeabi_dmul>
 801341c:	4602      	mov	r2, r0
 801341e:	460b      	mov	r3, r1
 8013420:	4650      	mov	r0, sl
 8013422:	4659      	mov	r1, fp
 8013424:	f7ec ff30 	bl	8000288 <__aeabi_dsub>
 8013428:	4602      	mov	r2, r0
 801342a:	460b      	mov	r3, r1
 801342c:	4680      	mov	r8, r0
 801342e:	4689      	mov	r9, r1
 8013430:	4630      	mov	r0, r6
 8013432:	4639      	mov	r1, r7
 8013434:	f7ec ff2a 	bl	800028c <__adddf3>
 8013438:	2000      	movs	r0, #0
 801343a:	4632      	mov	r2, r6
 801343c:	463b      	mov	r3, r7
 801343e:	4604      	mov	r4, r0
 8013440:	460d      	mov	r5, r1
 8013442:	f7ec ff21 	bl	8000288 <__aeabi_dsub>
 8013446:	4602      	mov	r2, r0
 8013448:	460b      	mov	r3, r1
 801344a:	4640      	mov	r0, r8
 801344c:	4649      	mov	r1, r9
 801344e:	f7ec ff1b 	bl	8000288 <__aeabi_dsub>
 8013452:	9b04      	ldr	r3, [sp, #16]
 8013454:	9a06      	ldr	r2, [sp, #24]
 8013456:	3b01      	subs	r3, #1
 8013458:	4313      	orrs	r3, r2
 801345a:	4682      	mov	sl, r0
 801345c:	468b      	mov	fp, r1
 801345e:	f040 81e7 	bne.w	8013830 <__ieee754_pow+0x700>
 8013462:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013518 <__ieee754_pow+0x3e8>
 8013466:	eeb0 8a47 	vmov.f32	s16, s14
 801346a:	eef0 8a67 	vmov.f32	s17, s15
 801346e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013472:	2600      	movs	r6, #0
 8013474:	4632      	mov	r2, r6
 8013476:	463b      	mov	r3, r7
 8013478:	e9dd 0100 	ldrd	r0, r1, [sp]
 801347c:	f7ec ff04 	bl	8000288 <__aeabi_dsub>
 8013480:	4622      	mov	r2, r4
 8013482:	462b      	mov	r3, r5
 8013484:	f7ed f8b8 	bl	80005f8 <__aeabi_dmul>
 8013488:	e9dd 2300 	ldrd	r2, r3, [sp]
 801348c:	4680      	mov	r8, r0
 801348e:	4689      	mov	r9, r1
 8013490:	4650      	mov	r0, sl
 8013492:	4659      	mov	r1, fp
 8013494:	f7ed f8b0 	bl	80005f8 <__aeabi_dmul>
 8013498:	4602      	mov	r2, r0
 801349a:	460b      	mov	r3, r1
 801349c:	4640      	mov	r0, r8
 801349e:	4649      	mov	r1, r9
 80134a0:	f7ec fef4 	bl	800028c <__adddf3>
 80134a4:	4632      	mov	r2, r6
 80134a6:	463b      	mov	r3, r7
 80134a8:	4680      	mov	r8, r0
 80134aa:	4689      	mov	r9, r1
 80134ac:	4620      	mov	r0, r4
 80134ae:	4629      	mov	r1, r5
 80134b0:	f7ed f8a2 	bl	80005f8 <__aeabi_dmul>
 80134b4:	460b      	mov	r3, r1
 80134b6:	4604      	mov	r4, r0
 80134b8:	460d      	mov	r5, r1
 80134ba:	4602      	mov	r2, r0
 80134bc:	4649      	mov	r1, r9
 80134be:	4640      	mov	r0, r8
 80134c0:	f7ec fee4 	bl	800028c <__adddf3>
 80134c4:	4b19      	ldr	r3, [pc, #100]	; (801352c <__ieee754_pow+0x3fc>)
 80134c6:	4299      	cmp	r1, r3
 80134c8:	ec45 4b19 	vmov	d9, r4, r5
 80134cc:	4606      	mov	r6, r0
 80134ce:	460f      	mov	r7, r1
 80134d0:	468b      	mov	fp, r1
 80134d2:	f340 82f0 	ble.w	8013ab6 <__ieee754_pow+0x986>
 80134d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80134da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80134de:	4303      	orrs	r3, r0
 80134e0:	f000 81e4 	beq.w	80138ac <__ieee754_pow+0x77c>
 80134e4:	ec51 0b18 	vmov	r0, r1, d8
 80134e8:	2200      	movs	r2, #0
 80134ea:	2300      	movs	r3, #0
 80134ec:	f7ed faf6 	bl	8000adc <__aeabi_dcmplt>
 80134f0:	3800      	subs	r0, #0
 80134f2:	bf18      	it	ne
 80134f4:	2001      	movne	r0, #1
 80134f6:	e72b      	b.n	8013350 <__ieee754_pow+0x220>
 80134f8:	60000000 	.word	0x60000000
 80134fc:	3ff71547 	.word	0x3ff71547
 8013500:	f85ddf44 	.word	0xf85ddf44
 8013504:	3e54ae0b 	.word	0x3e54ae0b
 8013508:	55555555 	.word	0x55555555
 801350c:	3fd55555 	.word	0x3fd55555
 8013510:	652b82fe 	.word	0x652b82fe
 8013514:	3ff71547 	.word	0x3ff71547
 8013518:	00000000 	.word	0x00000000
 801351c:	bff00000 	.word	0xbff00000
 8013520:	3ff00000 	.word	0x3ff00000
 8013524:	3fd00000 	.word	0x3fd00000
 8013528:	3fe00000 	.word	0x3fe00000
 801352c:	408fffff 	.word	0x408fffff
 8013530:	4bd5      	ldr	r3, [pc, #852]	; (8013888 <__ieee754_pow+0x758>)
 8013532:	402b      	ands	r3, r5
 8013534:	2200      	movs	r2, #0
 8013536:	b92b      	cbnz	r3, 8013544 <__ieee754_pow+0x414>
 8013538:	4bd4      	ldr	r3, [pc, #848]	; (801388c <__ieee754_pow+0x75c>)
 801353a:	f7ed f85d 	bl	80005f8 <__aeabi_dmul>
 801353e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013542:	460c      	mov	r4, r1
 8013544:	1523      	asrs	r3, r4, #20
 8013546:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801354a:	4413      	add	r3, r2
 801354c:	9305      	str	r3, [sp, #20]
 801354e:	4bd0      	ldr	r3, [pc, #832]	; (8013890 <__ieee754_pow+0x760>)
 8013550:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013554:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013558:	429c      	cmp	r4, r3
 801355a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801355e:	dd08      	ble.n	8013572 <__ieee754_pow+0x442>
 8013560:	4bcc      	ldr	r3, [pc, #816]	; (8013894 <__ieee754_pow+0x764>)
 8013562:	429c      	cmp	r4, r3
 8013564:	f340 8162 	ble.w	801382c <__ieee754_pow+0x6fc>
 8013568:	9b05      	ldr	r3, [sp, #20]
 801356a:	3301      	adds	r3, #1
 801356c:	9305      	str	r3, [sp, #20]
 801356e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013572:	2400      	movs	r4, #0
 8013574:	00e3      	lsls	r3, r4, #3
 8013576:	9307      	str	r3, [sp, #28]
 8013578:	4bc7      	ldr	r3, [pc, #796]	; (8013898 <__ieee754_pow+0x768>)
 801357a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801357e:	ed93 7b00 	vldr	d7, [r3]
 8013582:	4629      	mov	r1, r5
 8013584:	ec53 2b17 	vmov	r2, r3, d7
 8013588:	eeb0 9a47 	vmov.f32	s18, s14
 801358c:	eef0 9a67 	vmov.f32	s19, s15
 8013590:	4682      	mov	sl, r0
 8013592:	f7ec fe79 	bl	8000288 <__aeabi_dsub>
 8013596:	4652      	mov	r2, sl
 8013598:	4606      	mov	r6, r0
 801359a:	460f      	mov	r7, r1
 801359c:	462b      	mov	r3, r5
 801359e:	ec51 0b19 	vmov	r0, r1, d9
 80135a2:	f7ec fe73 	bl	800028c <__adddf3>
 80135a6:	4602      	mov	r2, r0
 80135a8:	460b      	mov	r3, r1
 80135aa:	2000      	movs	r0, #0
 80135ac:	49bb      	ldr	r1, [pc, #748]	; (801389c <__ieee754_pow+0x76c>)
 80135ae:	f7ed f94d 	bl	800084c <__aeabi_ddiv>
 80135b2:	ec41 0b1a 	vmov	d10, r0, r1
 80135b6:	4602      	mov	r2, r0
 80135b8:	460b      	mov	r3, r1
 80135ba:	4630      	mov	r0, r6
 80135bc:	4639      	mov	r1, r7
 80135be:	f7ed f81b 	bl	80005f8 <__aeabi_dmul>
 80135c2:	2300      	movs	r3, #0
 80135c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135c8:	9302      	str	r3, [sp, #8]
 80135ca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80135ce:	46ab      	mov	fp, r5
 80135d0:	106d      	asrs	r5, r5, #1
 80135d2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80135d6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80135da:	ec41 0b18 	vmov	d8, r0, r1
 80135de:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80135e2:	2200      	movs	r2, #0
 80135e4:	4640      	mov	r0, r8
 80135e6:	4649      	mov	r1, r9
 80135e8:	4614      	mov	r4, r2
 80135ea:	461d      	mov	r5, r3
 80135ec:	f7ed f804 	bl	80005f8 <__aeabi_dmul>
 80135f0:	4602      	mov	r2, r0
 80135f2:	460b      	mov	r3, r1
 80135f4:	4630      	mov	r0, r6
 80135f6:	4639      	mov	r1, r7
 80135f8:	f7ec fe46 	bl	8000288 <__aeabi_dsub>
 80135fc:	ec53 2b19 	vmov	r2, r3, d9
 8013600:	4606      	mov	r6, r0
 8013602:	460f      	mov	r7, r1
 8013604:	4620      	mov	r0, r4
 8013606:	4629      	mov	r1, r5
 8013608:	f7ec fe3e 	bl	8000288 <__aeabi_dsub>
 801360c:	4602      	mov	r2, r0
 801360e:	460b      	mov	r3, r1
 8013610:	4650      	mov	r0, sl
 8013612:	4659      	mov	r1, fp
 8013614:	f7ec fe38 	bl	8000288 <__aeabi_dsub>
 8013618:	4642      	mov	r2, r8
 801361a:	464b      	mov	r3, r9
 801361c:	f7ec ffec 	bl	80005f8 <__aeabi_dmul>
 8013620:	4602      	mov	r2, r0
 8013622:	460b      	mov	r3, r1
 8013624:	4630      	mov	r0, r6
 8013626:	4639      	mov	r1, r7
 8013628:	f7ec fe2e 	bl	8000288 <__aeabi_dsub>
 801362c:	ec53 2b1a 	vmov	r2, r3, d10
 8013630:	f7ec ffe2 	bl	80005f8 <__aeabi_dmul>
 8013634:	ec53 2b18 	vmov	r2, r3, d8
 8013638:	ec41 0b19 	vmov	d9, r0, r1
 801363c:	ec51 0b18 	vmov	r0, r1, d8
 8013640:	f7ec ffda 	bl	80005f8 <__aeabi_dmul>
 8013644:	a37c      	add	r3, pc, #496	; (adr r3, 8013838 <__ieee754_pow+0x708>)
 8013646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364a:	4604      	mov	r4, r0
 801364c:	460d      	mov	r5, r1
 801364e:	f7ec ffd3 	bl	80005f8 <__aeabi_dmul>
 8013652:	a37b      	add	r3, pc, #492	; (adr r3, 8013840 <__ieee754_pow+0x710>)
 8013654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013658:	f7ec fe18 	bl	800028c <__adddf3>
 801365c:	4622      	mov	r2, r4
 801365e:	462b      	mov	r3, r5
 8013660:	f7ec ffca 	bl	80005f8 <__aeabi_dmul>
 8013664:	a378      	add	r3, pc, #480	; (adr r3, 8013848 <__ieee754_pow+0x718>)
 8013666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801366a:	f7ec fe0f 	bl	800028c <__adddf3>
 801366e:	4622      	mov	r2, r4
 8013670:	462b      	mov	r3, r5
 8013672:	f7ec ffc1 	bl	80005f8 <__aeabi_dmul>
 8013676:	a376      	add	r3, pc, #472	; (adr r3, 8013850 <__ieee754_pow+0x720>)
 8013678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801367c:	f7ec fe06 	bl	800028c <__adddf3>
 8013680:	4622      	mov	r2, r4
 8013682:	462b      	mov	r3, r5
 8013684:	f7ec ffb8 	bl	80005f8 <__aeabi_dmul>
 8013688:	a373      	add	r3, pc, #460	; (adr r3, 8013858 <__ieee754_pow+0x728>)
 801368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801368e:	f7ec fdfd 	bl	800028c <__adddf3>
 8013692:	4622      	mov	r2, r4
 8013694:	462b      	mov	r3, r5
 8013696:	f7ec ffaf 	bl	80005f8 <__aeabi_dmul>
 801369a:	a371      	add	r3, pc, #452	; (adr r3, 8013860 <__ieee754_pow+0x730>)
 801369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a0:	f7ec fdf4 	bl	800028c <__adddf3>
 80136a4:	4622      	mov	r2, r4
 80136a6:	4606      	mov	r6, r0
 80136a8:	460f      	mov	r7, r1
 80136aa:	462b      	mov	r3, r5
 80136ac:	4620      	mov	r0, r4
 80136ae:	4629      	mov	r1, r5
 80136b0:	f7ec ffa2 	bl	80005f8 <__aeabi_dmul>
 80136b4:	4602      	mov	r2, r0
 80136b6:	460b      	mov	r3, r1
 80136b8:	4630      	mov	r0, r6
 80136ba:	4639      	mov	r1, r7
 80136bc:	f7ec ff9c 	bl	80005f8 <__aeabi_dmul>
 80136c0:	4642      	mov	r2, r8
 80136c2:	4604      	mov	r4, r0
 80136c4:	460d      	mov	r5, r1
 80136c6:	464b      	mov	r3, r9
 80136c8:	ec51 0b18 	vmov	r0, r1, d8
 80136cc:	f7ec fdde 	bl	800028c <__adddf3>
 80136d0:	ec53 2b19 	vmov	r2, r3, d9
 80136d4:	f7ec ff90 	bl	80005f8 <__aeabi_dmul>
 80136d8:	4622      	mov	r2, r4
 80136da:	462b      	mov	r3, r5
 80136dc:	f7ec fdd6 	bl	800028c <__adddf3>
 80136e0:	4642      	mov	r2, r8
 80136e2:	4682      	mov	sl, r0
 80136e4:	468b      	mov	fp, r1
 80136e6:	464b      	mov	r3, r9
 80136e8:	4640      	mov	r0, r8
 80136ea:	4649      	mov	r1, r9
 80136ec:	f7ec ff84 	bl	80005f8 <__aeabi_dmul>
 80136f0:	4b6b      	ldr	r3, [pc, #428]	; (80138a0 <__ieee754_pow+0x770>)
 80136f2:	2200      	movs	r2, #0
 80136f4:	4606      	mov	r6, r0
 80136f6:	460f      	mov	r7, r1
 80136f8:	f7ec fdc8 	bl	800028c <__adddf3>
 80136fc:	4652      	mov	r2, sl
 80136fe:	465b      	mov	r3, fp
 8013700:	f7ec fdc4 	bl	800028c <__adddf3>
 8013704:	2000      	movs	r0, #0
 8013706:	4604      	mov	r4, r0
 8013708:	460d      	mov	r5, r1
 801370a:	4602      	mov	r2, r0
 801370c:	460b      	mov	r3, r1
 801370e:	4640      	mov	r0, r8
 8013710:	4649      	mov	r1, r9
 8013712:	f7ec ff71 	bl	80005f8 <__aeabi_dmul>
 8013716:	4b62      	ldr	r3, [pc, #392]	; (80138a0 <__ieee754_pow+0x770>)
 8013718:	4680      	mov	r8, r0
 801371a:	4689      	mov	r9, r1
 801371c:	2200      	movs	r2, #0
 801371e:	4620      	mov	r0, r4
 8013720:	4629      	mov	r1, r5
 8013722:	f7ec fdb1 	bl	8000288 <__aeabi_dsub>
 8013726:	4632      	mov	r2, r6
 8013728:	463b      	mov	r3, r7
 801372a:	f7ec fdad 	bl	8000288 <__aeabi_dsub>
 801372e:	4602      	mov	r2, r0
 8013730:	460b      	mov	r3, r1
 8013732:	4650      	mov	r0, sl
 8013734:	4659      	mov	r1, fp
 8013736:	f7ec fda7 	bl	8000288 <__aeabi_dsub>
 801373a:	ec53 2b18 	vmov	r2, r3, d8
 801373e:	f7ec ff5b 	bl	80005f8 <__aeabi_dmul>
 8013742:	4622      	mov	r2, r4
 8013744:	4606      	mov	r6, r0
 8013746:	460f      	mov	r7, r1
 8013748:	462b      	mov	r3, r5
 801374a:	ec51 0b19 	vmov	r0, r1, d9
 801374e:	f7ec ff53 	bl	80005f8 <__aeabi_dmul>
 8013752:	4602      	mov	r2, r0
 8013754:	460b      	mov	r3, r1
 8013756:	4630      	mov	r0, r6
 8013758:	4639      	mov	r1, r7
 801375a:	f7ec fd97 	bl	800028c <__adddf3>
 801375e:	4606      	mov	r6, r0
 8013760:	460f      	mov	r7, r1
 8013762:	4602      	mov	r2, r0
 8013764:	460b      	mov	r3, r1
 8013766:	4640      	mov	r0, r8
 8013768:	4649      	mov	r1, r9
 801376a:	f7ec fd8f 	bl	800028c <__adddf3>
 801376e:	a33e      	add	r3, pc, #248	; (adr r3, 8013868 <__ieee754_pow+0x738>)
 8013770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013774:	2000      	movs	r0, #0
 8013776:	4604      	mov	r4, r0
 8013778:	460d      	mov	r5, r1
 801377a:	f7ec ff3d 	bl	80005f8 <__aeabi_dmul>
 801377e:	4642      	mov	r2, r8
 8013780:	ec41 0b18 	vmov	d8, r0, r1
 8013784:	464b      	mov	r3, r9
 8013786:	4620      	mov	r0, r4
 8013788:	4629      	mov	r1, r5
 801378a:	f7ec fd7d 	bl	8000288 <__aeabi_dsub>
 801378e:	4602      	mov	r2, r0
 8013790:	460b      	mov	r3, r1
 8013792:	4630      	mov	r0, r6
 8013794:	4639      	mov	r1, r7
 8013796:	f7ec fd77 	bl	8000288 <__aeabi_dsub>
 801379a:	a335      	add	r3, pc, #212	; (adr r3, 8013870 <__ieee754_pow+0x740>)
 801379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137a0:	f7ec ff2a 	bl	80005f8 <__aeabi_dmul>
 80137a4:	a334      	add	r3, pc, #208	; (adr r3, 8013878 <__ieee754_pow+0x748>)
 80137a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137aa:	4606      	mov	r6, r0
 80137ac:	460f      	mov	r7, r1
 80137ae:	4620      	mov	r0, r4
 80137b0:	4629      	mov	r1, r5
 80137b2:	f7ec ff21 	bl	80005f8 <__aeabi_dmul>
 80137b6:	4602      	mov	r2, r0
 80137b8:	460b      	mov	r3, r1
 80137ba:	4630      	mov	r0, r6
 80137bc:	4639      	mov	r1, r7
 80137be:	f7ec fd65 	bl	800028c <__adddf3>
 80137c2:	9a07      	ldr	r2, [sp, #28]
 80137c4:	4b37      	ldr	r3, [pc, #220]	; (80138a4 <__ieee754_pow+0x774>)
 80137c6:	4413      	add	r3, r2
 80137c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137cc:	f7ec fd5e 	bl	800028c <__adddf3>
 80137d0:	4682      	mov	sl, r0
 80137d2:	9805      	ldr	r0, [sp, #20]
 80137d4:	468b      	mov	fp, r1
 80137d6:	f7ec fea5 	bl	8000524 <__aeabi_i2d>
 80137da:	9a07      	ldr	r2, [sp, #28]
 80137dc:	4b32      	ldr	r3, [pc, #200]	; (80138a8 <__ieee754_pow+0x778>)
 80137de:	4413      	add	r3, r2
 80137e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80137e4:	4606      	mov	r6, r0
 80137e6:	460f      	mov	r7, r1
 80137e8:	4652      	mov	r2, sl
 80137ea:	465b      	mov	r3, fp
 80137ec:	ec51 0b18 	vmov	r0, r1, d8
 80137f0:	f7ec fd4c 	bl	800028c <__adddf3>
 80137f4:	4642      	mov	r2, r8
 80137f6:	464b      	mov	r3, r9
 80137f8:	f7ec fd48 	bl	800028c <__adddf3>
 80137fc:	4632      	mov	r2, r6
 80137fe:	463b      	mov	r3, r7
 8013800:	f7ec fd44 	bl	800028c <__adddf3>
 8013804:	2000      	movs	r0, #0
 8013806:	4632      	mov	r2, r6
 8013808:	463b      	mov	r3, r7
 801380a:	4604      	mov	r4, r0
 801380c:	460d      	mov	r5, r1
 801380e:	f7ec fd3b 	bl	8000288 <__aeabi_dsub>
 8013812:	4642      	mov	r2, r8
 8013814:	464b      	mov	r3, r9
 8013816:	f7ec fd37 	bl	8000288 <__aeabi_dsub>
 801381a:	ec53 2b18 	vmov	r2, r3, d8
 801381e:	f7ec fd33 	bl	8000288 <__aeabi_dsub>
 8013822:	4602      	mov	r2, r0
 8013824:	460b      	mov	r3, r1
 8013826:	4650      	mov	r0, sl
 8013828:	4659      	mov	r1, fp
 801382a:	e610      	b.n	801344e <__ieee754_pow+0x31e>
 801382c:	2401      	movs	r4, #1
 801382e:	e6a1      	b.n	8013574 <__ieee754_pow+0x444>
 8013830:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013880 <__ieee754_pow+0x750>
 8013834:	e617      	b.n	8013466 <__ieee754_pow+0x336>
 8013836:	bf00      	nop
 8013838:	4a454eef 	.word	0x4a454eef
 801383c:	3fca7e28 	.word	0x3fca7e28
 8013840:	93c9db65 	.word	0x93c9db65
 8013844:	3fcd864a 	.word	0x3fcd864a
 8013848:	a91d4101 	.word	0xa91d4101
 801384c:	3fd17460 	.word	0x3fd17460
 8013850:	518f264d 	.word	0x518f264d
 8013854:	3fd55555 	.word	0x3fd55555
 8013858:	db6fabff 	.word	0xdb6fabff
 801385c:	3fdb6db6 	.word	0x3fdb6db6
 8013860:	33333303 	.word	0x33333303
 8013864:	3fe33333 	.word	0x3fe33333
 8013868:	e0000000 	.word	0xe0000000
 801386c:	3feec709 	.word	0x3feec709
 8013870:	dc3a03fd 	.word	0xdc3a03fd
 8013874:	3feec709 	.word	0x3feec709
 8013878:	145b01f5 	.word	0x145b01f5
 801387c:	be3e2fe0 	.word	0xbe3e2fe0
 8013880:	00000000 	.word	0x00000000
 8013884:	3ff00000 	.word	0x3ff00000
 8013888:	7ff00000 	.word	0x7ff00000
 801388c:	43400000 	.word	0x43400000
 8013890:	0003988e 	.word	0x0003988e
 8013894:	000bb679 	.word	0x000bb679
 8013898:	080142a8 	.word	0x080142a8
 801389c:	3ff00000 	.word	0x3ff00000
 80138a0:	40080000 	.word	0x40080000
 80138a4:	080142c8 	.word	0x080142c8
 80138a8:	080142b8 	.word	0x080142b8
 80138ac:	a3b3      	add	r3, pc, #716	; (adr r3, 8013b7c <__ieee754_pow+0xa4c>)
 80138ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138b2:	4640      	mov	r0, r8
 80138b4:	4649      	mov	r1, r9
 80138b6:	f7ec fce9 	bl	800028c <__adddf3>
 80138ba:	4622      	mov	r2, r4
 80138bc:	ec41 0b1a 	vmov	d10, r0, r1
 80138c0:	462b      	mov	r3, r5
 80138c2:	4630      	mov	r0, r6
 80138c4:	4639      	mov	r1, r7
 80138c6:	f7ec fcdf 	bl	8000288 <__aeabi_dsub>
 80138ca:	4602      	mov	r2, r0
 80138cc:	460b      	mov	r3, r1
 80138ce:	ec51 0b1a 	vmov	r0, r1, d10
 80138d2:	f7ed f921 	bl	8000b18 <__aeabi_dcmpgt>
 80138d6:	2800      	cmp	r0, #0
 80138d8:	f47f ae04 	bne.w	80134e4 <__ieee754_pow+0x3b4>
 80138dc:	4aa2      	ldr	r2, [pc, #648]	; (8013b68 <__ieee754_pow+0xa38>)
 80138de:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80138e2:	4293      	cmp	r3, r2
 80138e4:	f340 8107 	ble.w	8013af6 <__ieee754_pow+0x9c6>
 80138e8:	151b      	asrs	r3, r3, #20
 80138ea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80138ee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80138f2:	fa4a fa03 	asr.w	sl, sl, r3
 80138f6:	44da      	add	sl, fp
 80138f8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80138fc:	489b      	ldr	r0, [pc, #620]	; (8013b6c <__ieee754_pow+0xa3c>)
 80138fe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013902:	4108      	asrs	r0, r1
 8013904:	ea00 030a 	and.w	r3, r0, sl
 8013908:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801390c:	f1c1 0114 	rsb	r1, r1, #20
 8013910:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013914:	fa4a fa01 	asr.w	sl, sl, r1
 8013918:	f1bb 0f00 	cmp.w	fp, #0
 801391c:	f04f 0200 	mov.w	r2, #0
 8013920:	4620      	mov	r0, r4
 8013922:	4629      	mov	r1, r5
 8013924:	bfb8      	it	lt
 8013926:	f1ca 0a00 	rsblt	sl, sl, #0
 801392a:	f7ec fcad 	bl	8000288 <__aeabi_dsub>
 801392e:	ec41 0b19 	vmov	d9, r0, r1
 8013932:	4642      	mov	r2, r8
 8013934:	464b      	mov	r3, r9
 8013936:	ec51 0b19 	vmov	r0, r1, d9
 801393a:	f7ec fca7 	bl	800028c <__adddf3>
 801393e:	a37a      	add	r3, pc, #488	; (adr r3, 8013b28 <__ieee754_pow+0x9f8>)
 8013940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013944:	2000      	movs	r0, #0
 8013946:	4604      	mov	r4, r0
 8013948:	460d      	mov	r5, r1
 801394a:	f7ec fe55 	bl	80005f8 <__aeabi_dmul>
 801394e:	ec53 2b19 	vmov	r2, r3, d9
 8013952:	4606      	mov	r6, r0
 8013954:	460f      	mov	r7, r1
 8013956:	4620      	mov	r0, r4
 8013958:	4629      	mov	r1, r5
 801395a:	f7ec fc95 	bl	8000288 <__aeabi_dsub>
 801395e:	4602      	mov	r2, r0
 8013960:	460b      	mov	r3, r1
 8013962:	4640      	mov	r0, r8
 8013964:	4649      	mov	r1, r9
 8013966:	f7ec fc8f 	bl	8000288 <__aeabi_dsub>
 801396a:	a371      	add	r3, pc, #452	; (adr r3, 8013b30 <__ieee754_pow+0xa00>)
 801396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013970:	f7ec fe42 	bl	80005f8 <__aeabi_dmul>
 8013974:	a370      	add	r3, pc, #448	; (adr r3, 8013b38 <__ieee754_pow+0xa08>)
 8013976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801397a:	4680      	mov	r8, r0
 801397c:	4689      	mov	r9, r1
 801397e:	4620      	mov	r0, r4
 8013980:	4629      	mov	r1, r5
 8013982:	f7ec fe39 	bl	80005f8 <__aeabi_dmul>
 8013986:	4602      	mov	r2, r0
 8013988:	460b      	mov	r3, r1
 801398a:	4640      	mov	r0, r8
 801398c:	4649      	mov	r1, r9
 801398e:	f7ec fc7d 	bl	800028c <__adddf3>
 8013992:	4604      	mov	r4, r0
 8013994:	460d      	mov	r5, r1
 8013996:	4602      	mov	r2, r0
 8013998:	460b      	mov	r3, r1
 801399a:	4630      	mov	r0, r6
 801399c:	4639      	mov	r1, r7
 801399e:	f7ec fc75 	bl	800028c <__adddf3>
 80139a2:	4632      	mov	r2, r6
 80139a4:	463b      	mov	r3, r7
 80139a6:	4680      	mov	r8, r0
 80139a8:	4689      	mov	r9, r1
 80139aa:	f7ec fc6d 	bl	8000288 <__aeabi_dsub>
 80139ae:	4602      	mov	r2, r0
 80139b0:	460b      	mov	r3, r1
 80139b2:	4620      	mov	r0, r4
 80139b4:	4629      	mov	r1, r5
 80139b6:	f7ec fc67 	bl	8000288 <__aeabi_dsub>
 80139ba:	4642      	mov	r2, r8
 80139bc:	4606      	mov	r6, r0
 80139be:	460f      	mov	r7, r1
 80139c0:	464b      	mov	r3, r9
 80139c2:	4640      	mov	r0, r8
 80139c4:	4649      	mov	r1, r9
 80139c6:	f7ec fe17 	bl	80005f8 <__aeabi_dmul>
 80139ca:	a35d      	add	r3, pc, #372	; (adr r3, 8013b40 <__ieee754_pow+0xa10>)
 80139cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d0:	4604      	mov	r4, r0
 80139d2:	460d      	mov	r5, r1
 80139d4:	f7ec fe10 	bl	80005f8 <__aeabi_dmul>
 80139d8:	a35b      	add	r3, pc, #364	; (adr r3, 8013b48 <__ieee754_pow+0xa18>)
 80139da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139de:	f7ec fc53 	bl	8000288 <__aeabi_dsub>
 80139e2:	4622      	mov	r2, r4
 80139e4:	462b      	mov	r3, r5
 80139e6:	f7ec fe07 	bl	80005f8 <__aeabi_dmul>
 80139ea:	a359      	add	r3, pc, #356	; (adr r3, 8013b50 <__ieee754_pow+0xa20>)
 80139ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f0:	f7ec fc4c 	bl	800028c <__adddf3>
 80139f4:	4622      	mov	r2, r4
 80139f6:	462b      	mov	r3, r5
 80139f8:	f7ec fdfe 	bl	80005f8 <__aeabi_dmul>
 80139fc:	a356      	add	r3, pc, #344	; (adr r3, 8013b58 <__ieee754_pow+0xa28>)
 80139fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a02:	f7ec fc41 	bl	8000288 <__aeabi_dsub>
 8013a06:	4622      	mov	r2, r4
 8013a08:	462b      	mov	r3, r5
 8013a0a:	f7ec fdf5 	bl	80005f8 <__aeabi_dmul>
 8013a0e:	a354      	add	r3, pc, #336	; (adr r3, 8013b60 <__ieee754_pow+0xa30>)
 8013a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a14:	f7ec fc3a 	bl	800028c <__adddf3>
 8013a18:	4622      	mov	r2, r4
 8013a1a:	462b      	mov	r3, r5
 8013a1c:	f7ec fdec 	bl	80005f8 <__aeabi_dmul>
 8013a20:	4602      	mov	r2, r0
 8013a22:	460b      	mov	r3, r1
 8013a24:	4640      	mov	r0, r8
 8013a26:	4649      	mov	r1, r9
 8013a28:	f7ec fc2e 	bl	8000288 <__aeabi_dsub>
 8013a2c:	4604      	mov	r4, r0
 8013a2e:	460d      	mov	r5, r1
 8013a30:	4602      	mov	r2, r0
 8013a32:	460b      	mov	r3, r1
 8013a34:	4640      	mov	r0, r8
 8013a36:	4649      	mov	r1, r9
 8013a38:	f7ec fdde 	bl	80005f8 <__aeabi_dmul>
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	ec41 0b19 	vmov	d9, r0, r1
 8013a42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013a46:	4620      	mov	r0, r4
 8013a48:	4629      	mov	r1, r5
 8013a4a:	f7ec fc1d 	bl	8000288 <__aeabi_dsub>
 8013a4e:	4602      	mov	r2, r0
 8013a50:	460b      	mov	r3, r1
 8013a52:	ec51 0b19 	vmov	r0, r1, d9
 8013a56:	f7ec fef9 	bl	800084c <__aeabi_ddiv>
 8013a5a:	4632      	mov	r2, r6
 8013a5c:	4604      	mov	r4, r0
 8013a5e:	460d      	mov	r5, r1
 8013a60:	463b      	mov	r3, r7
 8013a62:	4640      	mov	r0, r8
 8013a64:	4649      	mov	r1, r9
 8013a66:	f7ec fdc7 	bl	80005f8 <__aeabi_dmul>
 8013a6a:	4632      	mov	r2, r6
 8013a6c:	463b      	mov	r3, r7
 8013a6e:	f7ec fc0d 	bl	800028c <__adddf3>
 8013a72:	4602      	mov	r2, r0
 8013a74:	460b      	mov	r3, r1
 8013a76:	4620      	mov	r0, r4
 8013a78:	4629      	mov	r1, r5
 8013a7a:	f7ec fc05 	bl	8000288 <__aeabi_dsub>
 8013a7e:	4642      	mov	r2, r8
 8013a80:	464b      	mov	r3, r9
 8013a82:	f7ec fc01 	bl	8000288 <__aeabi_dsub>
 8013a86:	460b      	mov	r3, r1
 8013a88:	4602      	mov	r2, r0
 8013a8a:	4939      	ldr	r1, [pc, #228]	; (8013b70 <__ieee754_pow+0xa40>)
 8013a8c:	2000      	movs	r0, #0
 8013a8e:	f7ec fbfb 	bl	8000288 <__aeabi_dsub>
 8013a92:	ec41 0b10 	vmov	d0, r0, r1
 8013a96:	ee10 3a90 	vmov	r3, s1
 8013a9a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013aa2:	da2b      	bge.n	8013afc <__ieee754_pow+0x9cc>
 8013aa4:	4650      	mov	r0, sl
 8013aa6:	f000 f86f 	bl	8013b88 <scalbn>
 8013aaa:	ec51 0b10 	vmov	r0, r1, d0
 8013aae:	ec53 2b18 	vmov	r2, r3, d8
 8013ab2:	f7ff bbee 	b.w	8013292 <__ieee754_pow+0x162>
 8013ab6:	4b2f      	ldr	r3, [pc, #188]	; (8013b74 <__ieee754_pow+0xa44>)
 8013ab8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013abc:	429e      	cmp	r6, r3
 8013abe:	f77f af0d 	ble.w	80138dc <__ieee754_pow+0x7ac>
 8013ac2:	4b2d      	ldr	r3, [pc, #180]	; (8013b78 <__ieee754_pow+0xa48>)
 8013ac4:	440b      	add	r3, r1
 8013ac6:	4303      	orrs	r3, r0
 8013ac8:	d009      	beq.n	8013ade <__ieee754_pow+0x9ae>
 8013aca:	ec51 0b18 	vmov	r0, r1, d8
 8013ace:	2200      	movs	r2, #0
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	f7ed f803 	bl	8000adc <__aeabi_dcmplt>
 8013ad6:	3800      	subs	r0, #0
 8013ad8:	bf18      	it	ne
 8013ada:	2001      	movne	r0, #1
 8013adc:	e448      	b.n	8013370 <__ieee754_pow+0x240>
 8013ade:	4622      	mov	r2, r4
 8013ae0:	462b      	mov	r3, r5
 8013ae2:	f7ec fbd1 	bl	8000288 <__aeabi_dsub>
 8013ae6:	4642      	mov	r2, r8
 8013ae8:	464b      	mov	r3, r9
 8013aea:	f7ed f80b 	bl	8000b04 <__aeabi_dcmpge>
 8013aee:	2800      	cmp	r0, #0
 8013af0:	f43f aef4 	beq.w	80138dc <__ieee754_pow+0x7ac>
 8013af4:	e7e9      	b.n	8013aca <__ieee754_pow+0x99a>
 8013af6:	f04f 0a00 	mov.w	sl, #0
 8013afa:	e71a      	b.n	8013932 <__ieee754_pow+0x802>
 8013afc:	ec51 0b10 	vmov	r0, r1, d0
 8013b00:	4619      	mov	r1, r3
 8013b02:	e7d4      	b.n	8013aae <__ieee754_pow+0x97e>
 8013b04:	491a      	ldr	r1, [pc, #104]	; (8013b70 <__ieee754_pow+0xa40>)
 8013b06:	2000      	movs	r0, #0
 8013b08:	f7ff bb31 	b.w	801316e <__ieee754_pow+0x3e>
 8013b0c:	2000      	movs	r0, #0
 8013b0e:	2100      	movs	r1, #0
 8013b10:	f7ff bb2d 	b.w	801316e <__ieee754_pow+0x3e>
 8013b14:	4630      	mov	r0, r6
 8013b16:	4639      	mov	r1, r7
 8013b18:	f7ff bb29 	b.w	801316e <__ieee754_pow+0x3e>
 8013b1c:	9204      	str	r2, [sp, #16]
 8013b1e:	f7ff bb7b 	b.w	8013218 <__ieee754_pow+0xe8>
 8013b22:	2300      	movs	r3, #0
 8013b24:	f7ff bb65 	b.w	80131f2 <__ieee754_pow+0xc2>
 8013b28:	00000000 	.word	0x00000000
 8013b2c:	3fe62e43 	.word	0x3fe62e43
 8013b30:	fefa39ef 	.word	0xfefa39ef
 8013b34:	3fe62e42 	.word	0x3fe62e42
 8013b38:	0ca86c39 	.word	0x0ca86c39
 8013b3c:	be205c61 	.word	0xbe205c61
 8013b40:	72bea4d0 	.word	0x72bea4d0
 8013b44:	3e663769 	.word	0x3e663769
 8013b48:	c5d26bf1 	.word	0xc5d26bf1
 8013b4c:	3ebbbd41 	.word	0x3ebbbd41
 8013b50:	af25de2c 	.word	0xaf25de2c
 8013b54:	3f11566a 	.word	0x3f11566a
 8013b58:	16bebd93 	.word	0x16bebd93
 8013b5c:	3f66c16c 	.word	0x3f66c16c
 8013b60:	5555553e 	.word	0x5555553e
 8013b64:	3fc55555 	.word	0x3fc55555
 8013b68:	3fe00000 	.word	0x3fe00000
 8013b6c:	fff00000 	.word	0xfff00000
 8013b70:	3ff00000 	.word	0x3ff00000
 8013b74:	4090cbff 	.word	0x4090cbff
 8013b78:	3f6f3400 	.word	0x3f6f3400
 8013b7c:	652b82fe 	.word	0x652b82fe
 8013b80:	3c971547 	.word	0x3c971547
 8013b84:	00000000 	.word	0x00000000

08013b88 <scalbn>:
 8013b88:	b570      	push	{r4, r5, r6, lr}
 8013b8a:	ec55 4b10 	vmov	r4, r5, d0
 8013b8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013b92:	4606      	mov	r6, r0
 8013b94:	462b      	mov	r3, r5
 8013b96:	b999      	cbnz	r1, 8013bc0 <scalbn+0x38>
 8013b98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013b9c:	4323      	orrs	r3, r4
 8013b9e:	d03f      	beq.n	8013c20 <scalbn+0x98>
 8013ba0:	4b35      	ldr	r3, [pc, #212]	; (8013c78 <scalbn+0xf0>)
 8013ba2:	4629      	mov	r1, r5
 8013ba4:	ee10 0a10 	vmov	r0, s0
 8013ba8:	2200      	movs	r2, #0
 8013baa:	f7ec fd25 	bl	80005f8 <__aeabi_dmul>
 8013bae:	4b33      	ldr	r3, [pc, #204]	; (8013c7c <scalbn+0xf4>)
 8013bb0:	429e      	cmp	r6, r3
 8013bb2:	4604      	mov	r4, r0
 8013bb4:	460d      	mov	r5, r1
 8013bb6:	da10      	bge.n	8013bda <scalbn+0x52>
 8013bb8:	a327      	add	r3, pc, #156	; (adr r3, 8013c58 <scalbn+0xd0>)
 8013bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bbe:	e01f      	b.n	8013c00 <scalbn+0x78>
 8013bc0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013bc4:	4291      	cmp	r1, r2
 8013bc6:	d10c      	bne.n	8013be2 <scalbn+0x5a>
 8013bc8:	ee10 2a10 	vmov	r2, s0
 8013bcc:	4620      	mov	r0, r4
 8013bce:	4629      	mov	r1, r5
 8013bd0:	f7ec fb5c 	bl	800028c <__adddf3>
 8013bd4:	4604      	mov	r4, r0
 8013bd6:	460d      	mov	r5, r1
 8013bd8:	e022      	b.n	8013c20 <scalbn+0x98>
 8013bda:	460b      	mov	r3, r1
 8013bdc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013be0:	3936      	subs	r1, #54	; 0x36
 8013be2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013be6:	4296      	cmp	r6, r2
 8013be8:	dd0d      	ble.n	8013c06 <scalbn+0x7e>
 8013bea:	2d00      	cmp	r5, #0
 8013bec:	a11c      	add	r1, pc, #112	; (adr r1, 8013c60 <scalbn+0xd8>)
 8013bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bf2:	da02      	bge.n	8013bfa <scalbn+0x72>
 8013bf4:	a11c      	add	r1, pc, #112	; (adr r1, 8013c68 <scalbn+0xe0>)
 8013bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bfa:	a319      	add	r3, pc, #100	; (adr r3, 8013c60 <scalbn+0xd8>)
 8013bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c00:	f7ec fcfa 	bl	80005f8 <__aeabi_dmul>
 8013c04:	e7e6      	b.n	8013bd4 <scalbn+0x4c>
 8013c06:	1872      	adds	r2, r6, r1
 8013c08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013c0c:	428a      	cmp	r2, r1
 8013c0e:	dcec      	bgt.n	8013bea <scalbn+0x62>
 8013c10:	2a00      	cmp	r2, #0
 8013c12:	dd08      	ble.n	8013c26 <scalbn+0x9e>
 8013c14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013c18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013c1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013c20:	ec45 4b10 	vmov	d0, r4, r5
 8013c24:	bd70      	pop	{r4, r5, r6, pc}
 8013c26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013c2a:	da08      	bge.n	8013c3e <scalbn+0xb6>
 8013c2c:	2d00      	cmp	r5, #0
 8013c2e:	a10a      	add	r1, pc, #40	; (adr r1, 8013c58 <scalbn+0xd0>)
 8013c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c34:	dac0      	bge.n	8013bb8 <scalbn+0x30>
 8013c36:	a10e      	add	r1, pc, #56	; (adr r1, 8013c70 <scalbn+0xe8>)
 8013c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c3c:	e7bc      	b.n	8013bb8 <scalbn+0x30>
 8013c3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013c42:	3236      	adds	r2, #54	; 0x36
 8013c44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013c48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013c4c:	4620      	mov	r0, r4
 8013c4e:	4b0c      	ldr	r3, [pc, #48]	; (8013c80 <scalbn+0xf8>)
 8013c50:	2200      	movs	r2, #0
 8013c52:	e7d5      	b.n	8013c00 <scalbn+0x78>
 8013c54:	f3af 8000 	nop.w
 8013c58:	c2f8f359 	.word	0xc2f8f359
 8013c5c:	01a56e1f 	.word	0x01a56e1f
 8013c60:	8800759c 	.word	0x8800759c
 8013c64:	7e37e43c 	.word	0x7e37e43c
 8013c68:	8800759c 	.word	0x8800759c
 8013c6c:	fe37e43c 	.word	0xfe37e43c
 8013c70:	c2f8f359 	.word	0xc2f8f359
 8013c74:	81a56e1f 	.word	0x81a56e1f
 8013c78:	43500000 	.word	0x43500000
 8013c7c:	ffff3cb0 	.word	0xffff3cb0
 8013c80:	3c900000 	.word	0x3c900000

08013c84 <with_errno>:
 8013c84:	b570      	push	{r4, r5, r6, lr}
 8013c86:	4604      	mov	r4, r0
 8013c88:	460d      	mov	r5, r1
 8013c8a:	4616      	mov	r6, r2
 8013c8c:	f7fa fc66 	bl	800e55c <__errno>
 8013c90:	4629      	mov	r1, r5
 8013c92:	6006      	str	r6, [r0, #0]
 8013c94:	4620      	mov	r0, r4
 8013c96:	bd70      	pop	{r4, r5, r6, pc}

08013c98 <xflow>:
 8013c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c9a:	4614      	mov	r4, r2
 8013c9c:	461d      	mov	r5, r3
 8013c9e:	b108      	cbz	r0, 8013ca4 <xflow+0xc>
 8013ca0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013ca4:	e9cd 2300 	strd	r2, r3, [sp]
 8013ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013cac:	4620      	mov	r0, r4
 8013cae:	4629      	mov	r1, r5
 8013cb0:	f7ec fca2 	bl	80005f8 <__aeabi_dmul>
 8013cb4:	2222      	movs	r2, #34	; 0x22
 8013cb6:	b003      	add	sp, #12
 8013cb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cbc:	f7ff bfe2 	b.w	8013c84 <with_errno>

08013cc0 <__math_uflow>:
 8013cc0:	b508      	push	{r3, lr}
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013cc8:	f7ff ffe6 	bl	8013c98 <xflow>
 8013ccc:	ec41 0b10 	vmov	d0, r0, r1
 8013cd0:	bd08      	pop	{r3, pc}

08013cd2 <__math_oflow>:
 8013cd2:	b508      	push	{r3, lr}
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013cda:	f7ff ffdd 	bl	8013c98 <xflow>
 8013cde:	ec41 0b10 	vmov	d0, r0, r1
 8013ce2:	bd08      	pop	{r3, pc}

08013ce4 <_init>:
 8013ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ce6:	bf00      	nop
 8013ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cea:	bc08      	pop	{r3}
 8013cec:	469e      	mov	lr, r3
 8013cee:	4770      	bx	lr

08013cf0 <_fini>:
 8013cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cf2:	bf00      	nop
 8013cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cf6:	bc08      	pop	{r3}
 8013cf8:	469e      	mov	lr, r3
 8013cfa:	4770      	bx	lr
