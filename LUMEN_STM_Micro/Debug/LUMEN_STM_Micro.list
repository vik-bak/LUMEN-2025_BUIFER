
LUMEN_STM_Micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001409c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08014230  08014230  00024230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014828  08014828  000302b0  2**0
                  CONTENTS
  4 .ARM          00000008  08014828  08014828  00024828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014830  08014830  000302b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014830  08014830  00024830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014834  08014834  00024834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  08014838  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000089c8  200002b0  08014ae8  000302b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20008c78  08014ae8  00038c78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002241a  00000000  00000000  00030323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048c5  00000000  00000000  0005273d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ce0  00000000  00000000  00057008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001685  00000000  00000000  00058ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d30c  00000000  00000000  0005a36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024e90  00000000  00000000  00087679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114a73  00000000  00000000  000ac509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009628  00000000  00000000  001c0f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001ca5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b0 	.word	0x200002b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014214 	.word	0x08014214

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b4 	.word	0x200002b4
 80001cc:	08014214 	.word	0x08014214

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <begin>:
float SmokeCurve[3] = {2.3, 0.53, -0.44};
float Ro = -1.0;
int lastReadTime = 0;
float values[3] = {0.0 , 0.0, 0.0};

void begin(ADC_HandleTypeDef *hadc){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	Ro = MQCalibration(hadc);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f8d5 	bl	80011a8 <MQCalibration>
 8000ffe:	eef0 7a40 	vmov.f32	s15, s0
 8001002:	4b03      	ldr	r3, [pc, #12]	; (8001010 <begin+0x20>)
 8001004:	edc3 7a00 	vstr	s15, [r3]
	/*Serial.print("Ro: ");
	Serial.print(Ro);
	Serial.println(" kohm");*/
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000024 	.word	0x20000024

08001014 <checkCalibration>:
	values[0] = 0.0;
	values[1] = 0.0;
	values[2] = 0.0;
}

bool checkCalibration(){
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	if (Ro < 0.0) {
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <checkCalibration+0x24>)
 800101a:	edd3 7a00 	vldr	s15, [r3]
 800101e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001026:	d501      	bpl.n	800102c <checkCalibration+0x18>
			//Serial.println("Device not calibrated, call MQ2::begin before reading any value.");
			return false;
 8001028:	2300      	movs	r3, #0
 800102a:	e000      	b.n	800102e <checkCalibration+0x1a>
		}

		return true;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	20000024 	.word	0x20000024

0800103c <readLPG>:

		//lastReadTime = millis();
	    return values;
}

float readLPG(ADC_HandleTypeDef *hadc){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	if (!checkCalibration()) return 0.0;
 8001044:	f7ff ffe6 	bl	8001014 <checkCalibration>
 8001048:	4603      	mov	r3, r0
 800104a:	f083 0301 	eor.w	r3, r3, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <readLPG+0x1e>
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	e00a      	b.n	8001070 <readLPG+0x34>

	/*if (millis() < (lastReadTime + READ_DELAY) && values[0] > 0)
	        return values[0];
	else*/
	return (values[0] = MQGetPercentage(LPGCurve, hadc));
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <readLPG+0x44>)
 800105e:	f000 f92f 	bl	80012c0 <MQGetPercentage>
 8001062:	eef0 7a40 	vmov.f32	s15, s0
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <readLPG+0x48>)
 8001068:	edc3 7a00 	vstr	s15, [r3]
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <readLPG+0x48>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eeb0 0a67 	vmov.f32	s0, s15
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000000 	.word	0x20000000
 8001084:	200002cc 	.word	0x200002cc

08001088 <readCO>:

float readCO(ADC_HandleTypeDef *hadc){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	if (!checkCalibration()) return 0.0;
 8001090:	f7ff ffc0 	bl	8001014 <checkCalibration>
 8001094:	4603      	mov	r3, r0
 8001096:	f083 0301 	eor.w	r3, r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <readCO+0x1e>
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	e00a      	b.n	80010bc <readCO+0x34>

	/*if (millis() < (lastReadTime + READ_DELAY) && values[1] > 0)
	        return values[1];
	else*/
	return (values[1] = MQGetPercentage(COCurve, hadc));
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <readCO+0x44>)
 80010aa:	f000 f909 	bl	80012c0 <MQGetPercentage>
 80010ae:	eef0 7a40 	vmov.f32	s15, s0
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <readCO+0x48>)
 80010b4:	edc3 7a01 	vstr	s15, [r3, #4]
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <readCO+0x48>)
 80010ba:	685b      	ldr	r3, [r3, #4]
}
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eeb0 0a67 	vmov.f32	s0, s15
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000000c 	.word	0x2000000c
 80010d0:	200002cc 	.word	0x200002cc

080010d4 <readSmoke>:

float readSmoke(ADC_HandleTypeDef *hadc){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	if (!checkCalibration()) return 0.0;
 80010dc:	f7ff ff9a 	bl	8001014 <checkCalibration>
 80010e0:	4603      	mov	r3, r0
 80010e2:	f083 0301 	eor.w	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <readSmoke+0x1e>
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	e00a      	b.n	8001108 <readSmoke+0x34>

	/*if (millis() < (lastReadTime + READ_DELAY) && values[2] > 0)
	        return values[2];
	else*/
	return (values[2] = MQGetPercentage(SmokeCurve, hadc));
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4808      	ldr	r0, [pc, #32]	; (8001118 <readSmoke+0x44>)
 80010f6:	f000 f8e3 	bl	80012c0 <MQGetPercentage>
 80010fa:	eef0 7a40 	vmov.f32	s15, s0
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <readSmoke+0x48>)
 8001100:	edc3 7a02 	vstr	s15, [r3, #8]
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <readSmoke+0x48>)
 8001106:	689b      	ldr	r3, [r3, #8]
}
 8001108:	ee07 3a90 	vmov	s15, r3
 800110c:	eeb0 0a67 	vmov.f32	s0, s15
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000018 	.word	0x20000018
 800111c:	200002cc 	.word	0x200002cc

08001120 <MQResistanceCalculation>:

float MQResistanceCalculation(int raw_adc){
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	float flt_adc = (float) raw_adc;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001132:	edc7 7a03 	vstr	s15, [r7, #12]
    return RL_VALUE * (1023.0 - flt_adc) / flt_adc;
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff fa06 	bl	8000548 <__aeabi_f2d>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	a116      	add	r1, pc, #88	; (adr r1, 800119c <MQResistanceCalculation+0x7c>)
 8001142:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001146:	f7ff f89f 	bl	8000288 <__aeabi_dsub>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MQResistanceCalculation+0x78>)
 8001158:	f7ff fa4e 	bl	80005f8 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4614      	mov	r4, r2
 8001162:	461d      	mov	r5, r3
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f7ff f9ef 	bl	8000548 <__aeabi_f2d>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4620      	mov	r0, r4
 8001170:	4629      	mov	r1, r5
 8001172:	f7ff fb6b 	bl	800084c <__aeabi_ddiv>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fd33 	bl	8000be8 <__aeabi_d2f>
 8001182:	4603      	mov	r3, r0
 8001184:	ee07 3a90 	vmov	s15, r3
}
 8001188:	eeb0 0a67 	vmov.f32	s0, s15
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bdb0      	pop	{r4, r5, r7, pc}
 8001192:	bf00      	nop
 8001194:	f3af 8000 	nop.w
 8001198:	40140000 	.word	0x40140000
 800119c:	00000000 	.word	0x00000000
 80011a0:	408ff800 	.word	0x408ff800
 80011a4:	00000000 	.word	0x00000000

080011a8 <MQCalibration>:

float MQCalibration(ADC_HandleTypeDef *hadc) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	float val = 0.0;
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]

	// take multiple samples
	for (int i = 0; i < CALIBARAION_SAMPLE_TIMES; i++) {
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	e01e      	b.n	80011fa <MQCalibration+0x52>
		HAL_ADC_Start(hadc);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f003 fa69 	bl	8004694 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, 100);
 80011c2:	2164      	movs	r1, #100	; 0x64
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f003 fb53 	bl	8004870 <HAL_ADC_PollForConversion>
		val += MQResistanceCalculation(HAL_ADC_GetValue(hadc));
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f003 fc28 	bl	8004a20 <HAL_ADC_GetValue>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ffa4 	bl	8001120 <MQResistanceCalculation>
 80011d8:	eeb0 7a40 	vmov.f32	s14, s0
 80011dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011e4:	edc7 7a03 	vstr	s15, [r7, #12]
		HAL_ADC_Stop(hadc);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f003 fb0d 	bl	8004808 <HAL_ADC_Stop>
		HAL_Delay(CALIBRATION_SAMPLE_INTERVAL);
 80011ee:	2032      	movs	r0, #50	; 0x32
 80011f0:	f002 feaa 	bl	8003f48 <HAL_Delay>
	for (int i = 0; i < CALIBARAION_SAMPLE_TIMES; i++) {
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	3301      	adds	r3, #1
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2b09      	cmp	r3, #9
 80011fe:	dddd      	ble.n	80011bc <MQCalibration+0x14>
	}

	//calculate the average value
	val = val / ((float) CALIBARAION_SAMPLE_TIMES);
 8001200:	ed97 7a03 	vldr	s14, [r7, #12]
 8001204:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120c:	edc7 7a03 	vstr	s15, [r7, #12]

	//divided by RO_CLEAN_AIR_FACTOR yields the Ro according to the chart in the datasheet
	val = val / RO_CLEAN_AIR_FACTOR;
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f7ff f999 	bl	8000548 <__aeabi_f2d>
 8001216:	a30a      	add	r3, pc, #40	; (adr r3, 8001240 <MQCalibration+0x98>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff fb16 	bl	800084c <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fcde 	bl	8000be8 <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	60fb      	str	r3, [r7, #12]

	return val;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	ee07 3a90 	vmov	s15, r3
}
 8001236:	eeb0 0a67 	vmov.f32	s0, s15
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	c28f5c29 	.word	0xc28f5c29
 8001244:	4023a8f5 	.word	0x4023a8f5

08001248 <MQRead>:

float MQRead(ADC_HandleTypeDef *hadc){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	float rs = 0.0;
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < READ_SAMPLE_TIMES; i++) {
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	e01e      	b.n	800129a <MQRead+0x52>
		HAL_ADC_Start(hadc);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f003 fa19 	bl	8004694 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, 100);
 8001262:	2164      	movs	r1, #100	; 0x64
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f003 fb03 	bl	8004870 <HAL_ADC_PollForConversion>
		rs += MQResistanceCalculation(HAL_ADC_GetValue(hadc));
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f003 fbd8 	bl	8004a20 <HAL_ADC_GetValue>
 8001270:	4603      	mov	r3, r0
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff54 	bl	8001120 <MQResistanceCalculation>
 8001278:	eeb0 7a40 	vmov.f32	s14, s0
 800127c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001280:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001284:	edc7 7a03 	vstr	s15, [r7, #12]
		HAL_ADC_Stop(hadc);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f003 fabd 	bl	8004808 <HAL_ADC_Stop>
		HAL_Delay(READ_SAMPLE_INTERVAL);
 800128e:	2032      	movs	r0, #50	; 0x32
 8001290:	f002 fe5a 	bl	8003f48 <HAL_Delay>
	for (int i = 0; i < READ_SAMPLE_TIMES; i++) {
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	3301      	adds	r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	2b04      	cmp	r3, #4
 800129e:	dddd      	ble.n	800125c <MQRead+0x14>

	}

	return rs / ((float) READ_SAMPLE_TIMES);  // return the average
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80012a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012ac:	eef0 7a66 	vmov.f32	s15, s13
}
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	0000      	movs	r0, r0
 80012bc:	0000      	movs	r0, r0
	...

080012c0 <MQGetPercentage>:

float MQGetPercentage(float *pcurve, ADC_HandleTypeDef *hadc){
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	float rs_ro_ratio = MQRead(hadc) / Ro;
 80012ca:	6838      	ldr	r0, [r7, #0]
 80012cc:	f7ff ffbc 	bl	8001248 <MQRead>
 80012d0:	eef0 6a40 	vmov.f32	s13, s0
 80012d4:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <MQGetPercentage+0xd0>)
 80012d6:	ed93 7a00 	vldr	s14, [r3]
 80012da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012de:	edc7 7a03 	vstr	s15, [r7, #12]
    return pow(10.0, ((log(rs_ro_ratio) - pcurve[1]) / pcurve[2]) + pcurve[0]);
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f7ff f930 	bl	8000548 <__aeabi_f2d>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	ec43 2b10 	vmov	d0, r2, r3
 80012f0:	f011 fbc6 	bl	8012a80 <log>
 80012f4:	ec55 4b10 	vmov	r4, r5, d0
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3304      	adds	r3, #4
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f922 	bl	8000548 <__aeabi_f2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4620      	mov	r0, r4
 800130a:	4629      	mov	r1, r5
 800130c:	f7fe ffbc 	bl	8000288 <__aeabi_dsub>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4614      	mov	r4, r2
 8001316:	461d      	mov	r5, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3308      	adds	r3, #8
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f912 	bl	8000548 <__aeabi_f2d>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4620      	mov	r0, r4
 800132a:	4629      	mov	r1, r5
 800132c:	f7ff fa8e 	bl	800084c <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4614      	mov	r4, r2
 8001336:	461d      	mov	r5, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f903 	bl	8000548 <__aeabi_f2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4620      	mov	r0, r4
 8001348:	4629      	mov	r1, r5
 800134a:	f7fe ff9f 	bl	800028c <__adddf3>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	ec43 2b17 	vmov	d7, r2, r3
 8001356:	eeb0 1a47 	vmov.f32	s2, s14
 800135a:	eef0 1a67 	vmov.f32	s3, s15
 800135e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8001388 <MQGetPercentage+0xc8>
 8001362:	f011 fbcb 	bl	8012afc <pow>
 8001366:	ec53 2b10 	vmov	r2, r3, d0
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fc3b 	bl	8000be8 <__aeabi_d2f>
 8001372:	4603      	mov	r3, r0
 8001374:	ee07 3a90 	vmov	s15, r3
}
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bdb0      	pop	{r4, r5, r7, pc}
 8001382:	bf00      	nop
 8001384:	f3af 8000 	nop.w
 8001388:	00000000 	.word	0x00000000
 800138c:	40240000 	.word	0x40240000
 8001390:	20000024 	.word	0x20000024

08001394 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80013a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <vApplicationGetIdleTaskMemory+0x30>)
 80013aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	200002d8 	.word	0x200002d8
 80013c4:	20000378 	.word	0x20000378

080013c8 <HAL_UART_RxCpltCallback>:
ErrorCode error = NO_ERROR_STATE; // UU

//============================= Callback section

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
    if (huart == &huart5)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a0f      	ldr	r2, [pc, #60]	; (8001410 <HAL_UART_RxCpltCallback+0x48>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d116      	bne.n	8001406 <HAL_UART_RxCpltCallback+0x3e>
    {
        g_GnssRx_Flag = true;
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_UART_RxCpltCallback+0x4c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
        g_openFixedDataTransmition = true;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_UART_RxCpltCallback+0x50>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_DMA(&huart5, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 80013e4:	f240 228a 	movw	r2, #650	; 0x28a
 80013e8:	490c      	ldr	r1, [pc, #48]	; (800141c <HAL_UART_RxCpltCallback+0x54>)
 80013ea:	4809      	ldr	r0, [pc, #36]	; (8001410 <HAL_UART_RxCpltCallback+0x48>)
 80013ec:	f008 fdc4 	bl	8009f78 <HAL_UART_Receive_DMA>
        if (__HAL_UART_GET_FLAG(&huart5, UART_FLAG_ORE))
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <HAL_UART_RxCpltCallback+0x48>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d103      	bne.n	8001406 <HAL_UART_RxCpltCallback+0x3e>
                {
                    __HAL_UART_CLEAR_OREFLAG(&huart5); // Clear overrun
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <HAL_UART_RxCpltCallback+0x48>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2208      	movs	r2, #8
 8001404:	621a      	str	r2, [r3, #32]
    /*if (huart == &huart4)
    {
        HAL_UART_Receive_DMA(&huart4, mosfet_buffer, 3);
    }*/
    // HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20001094 	.word	0x20001094
 8001414:	20000578 	.word	0x20000578
 8001418:	20000579 	.word	0x20000579
 800141c:	20000a58 	.word	0x20000a58

08001420 <UsrGpsL86Init>:

//============================= Initial section

void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 8001428:	f240 228a 	movw	r2, #650	; 0x28a
 800142c:	4903      	ldr	r1, [pc, #12]	; (800143c <UsrGpsL86Init+0x1c>)
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f008 fda2 	bl	8009f78 <HAL_UART_Receive_DMA>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000a58 	.word	0x20000a58

08001440 <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
    getRmc();
 8001448:	f000 f83e 	bl	80014c8 <getRmc>
    getGGA();
 800144c:	f000 f96a 	bl	8001724 <getGGA>
    if (rmcValidFlag)
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <Usr_GpsL86GetValues+0x7c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <Usr_GpsL86GetValues+0x20>
    {
        rmcValidFlag = false;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <Usr_GpsL86GetValues+0x7c>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 8001460:	f000 f8f2 	bl	8001648 <formatLatLong>

    gpsData_->lat = gpsData.lat;
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <Usr_GpsL86GetValues+0x80>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <Usr_GpsL86GetValues+0x80>)
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <Usr_GpsL86GetValues+0x80>)
 8001476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
    gpsData_->speedKN = gpsData.speedKN;
 800147c:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <Usr_GpsL86GetValues+0x80>)
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <Usr_GpsL86GetValues+0x80>)
 8001486:	6a1a      	ldr	r2, [r3, #32]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <Usr_GpsL86GetValues+0x80>)
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <Usr_GpsL86GetValues+0x80>)
 8001496:	69da      	ldr	r2, [r3, #28]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <Usr_GpsL86GetValues+0x80>)
 800149e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
    gpsData_->fixedTime = gpsData.fixedTime;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <Usr_GpsL86GetValues+0x80>)
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	611a      	str	r2, [r3, #16]
    UsrGpsL86Init(&huart5);
 80014ac:	4805      	ldr	r0, [pc, #20]	; (80014c4 <Usr_GpsL86GetValues+0x84>)
 80014ae:	f7ff ffb7 	bl	8001420 <UsrGpsL86Init>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000057a 	.word	0x2000057a
 80014c0:	20000e5c 	.word	0x20000e5c
 80014c4:	20001094 	.word	0x20001094

080014c8 <getRmc>:

//============================= Statics

_io void getRmc(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af02      	add	r7, sp, #8
    if (g_GnssRx_Flag)
 80014ce:	4b4d      	ldr	r3, [pc, #308]	; (8001604 <getRmc+0x13c>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 8091 	beq.w	80015fc <getRmc+0x134>
    {
        MsgIndex = 0;
 80014da:	4b4b      	ldr	r3, [pc, #300]	; (8001608 <getRmc+0x140>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 80014e0:	494a      	ldr	r1, [pc, #296]	; (800160c <getRmc+0x144>)
 80014e2:	484b      	ldr	r0, [pc, #300]	; (8001610 <getRmc+0x148>)
 80014e4:	f00d faff 	bl	800eae6 <strcpy>
        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 80014e8:	494a      	ldr	r1, [pc, #296]	; (8001614 <getRmc+0x14c>)
 80014ea:	4849      	ldr	r0, [pc, #292]	; (8001610 <getRmc+0x148>)
 80014ec:	f00d fa17 	bl	800e91e <strstr>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4a49      	ldr	r2, [pc, #292]	; (8001618 <getRmc+0x150>)
 80014f4:	6013      	str	r3, [r2, #0]
        if (ptr == NULL) {
 80014f6:	4b48      	ldr	r3, [pc, #288]	; (8001618 <getRmc+0x150>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d107      	bne.n	800150e <getRmc+0x46>
            ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 80014fe:	4947      	ldr	r1, [pc, #284]	; (800161c <getRmc+0x154>)
 8001500:	4843      	ldr	r0, [pc, #268]	; (8001610 <getRmc+0x148>)
 8001502:	f00d fa0c 	bl	800e91e <strstr>
 8001506:	4603      	mov	r3, r0
 8001508:	4a43      	ldr	r2, [pc, #268]	; (8001618 <getRmc+0x150>)
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	e002      	b.n	8001514 <getRmc+0x4c>
        } else {
        	naso = 1;
 800150e:	4b44      	ldr	r3, [pc, #272]	; (8001620 <getRmc+0x158>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]
        }
        if (*ptr == 'G' && ptr != NULL)
 8001514:	4b40      	ldr	r3, [pc, #256]	; (8001618 <getRmc+0x150>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b47      	cmp	r3, #71	; 0x47
 800151c:	d16b      	bne.n	80015f6 <getRmc+0x12e>
 800151e:	4b3e      	ldr	r3, [pc, #248]	; (8001618 <getRmc+0x150>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d067      	beq.n	80015f6 <getRmc+0x12e>
        {
            while (1)
            {
                gpsPayload[MsgIndex] = *ptr;
 8001526:	4b3c      	ldr	r3, [pc, #240]	; (8001618 <getRmc+0x150>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <getRmc+0x140>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	7811      	ldrb	r1, [r2, #0]
 8001530:	4a3c      	ldr	r2, [pc, #240]	; (8001624 <getRmc+0x15c>)
 8001532:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 8001534:	4b34      	ldr	r3, [pc, #208]	; (8001608 <getRmc+0x140>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	4a33      	ldr	r2, [pc, #204]	; (8001608 <getRmc+0x140>)
 800153c:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 800153e:	4b36      	ldr	r3, [pc, #216]	; (8001618 <getRmc+0x150>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a31      	ldr	r2, [pc, #196]	; (8001608 <getRmc+0x140>)
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	441a      	add	r2, r3
 8001548:	4b33      	ldr	r3, [pc, #204]	; (8001618 <getRmc+0x150>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	7812      	ldrb	r2, [r2, #0]
 800154e:	701a      	strb	r2, [r3, #0]

                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8001550:	4b31      	ldr	r3, [pc, #196]	; (8001618 <getRmc+0x150>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b0a      	cmp	r3, #10
 8001558:	d003      	beq.n	8001562 <getRmc+0x9a>
 800155a:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <getRmc+0x140>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b5a      	cmp	r3, #90	; 0x5a
 8001560:	dde1      	ble.n	8001526 <getRmc+0x5e>
                {
                    MsgIndex = 0;
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <getRmc+0x140>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
                    // memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
                    //  memset(m_rxData, 0, sizeof(m_rxData));

                    for (int i = 0; i < 100; i++)
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	e014      	b.n	8001598 <getRmc+0xd0>
                    {
                        if (gpsPayload[i] == 'N')
 800156e:	4a2d      	ldr	r2, [pc, #180]	; (8001624 <getRmc+0x15c>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4413      	add	r3, r2
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b4e      	cmp	r3, #78	; 0x4e
 8001578:	d102      	bne.n	8001580 <getRmc+0xb8>
                            f_northFlag = true;
 800157a:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <getRmc+0x160>)
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
                        if (gpsPayload[i] == 'E')
 8001580:	4a28      	ldr	r2, [pc, #160]	; (8001624 <getRmc+0x15c>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b45      	cmp	r3, #69	; 0x45
 800158a:	d102      	bne.n	8001592 <getRmc+0xca>
                            f_eastFlag = true;
 800158c:	4b27      	ldr	r3, [pc, #156]	; (800162c <getRmc+0x164>)
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
                    for (int i = 0; i < 100; i++)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3301      	adds	r3, #1
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b63      	cmp	r3, #99	; 0x63
 800159c:	dde7      	ble.n	800156e <getRmc+0xa6>
                    }
                    if (strlen(gpsPayload) > 10)
 800159e:	4821      	ldr	r0, [pc, #132]	; (8001624 <getRmc+0x15c>)
 80015a0:	f7fe fe66 	bl	8000270 <strlen>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b0a      	cmp	r3, #10
 80015a8:	d91f      	bls.n	80015ea <getRmc+0x122>
                    {
                        if (f_eastFlag && f_northFlag)
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <getRmc+0x164>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d01f      	beq.n	80015f4 <getRmc+0x12c>
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <getRmc+0x160>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d01a      	beq.n	80015f4 <getRmc+0x12c>
                        {
                            f_northFlag = false;
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <getRmc+0x160>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
                            f_eastFlag = false;
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <getRmc+0x164>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <getRmc+0x168>)
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <getRmc+0x16c>)
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <getRmc+0x170>)
 80015d4:	4a19      	ldr	r2, [pc, #100]	; (800163c <getRmc+0x174>)
 80015d6:	491a      	ldr	r1, [pc, #104]	; (8001640 <getRmc+0x178>)
 80015d8:	4812      	ldr	r0, [pc, #72]	; (8001624 <getRmc+0x15c>)
 80015da:	f00d f927 	bl	800e82c <siscanf>
                            rmcValidFlag = true;
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <getRmc+0x17c>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
                            formatLatLong();
 80015e4:	f000 f830 	bl	8001648 <formatLatLong>
                    else
                    {
                        // dataErr Log
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 80015e8:	e004      	b.n	80015f4 <getRmc+0x12c>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 80015ea:	2264      	movs	r2, #100	; 0x64
 80015ec:	2100      	movs	r1, #0
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <getRmc+0x15c>)
 80015f0:	f00d f98d 	bl	800e90e <memset>
                    break;
 80015f4:	bf00      	nop
                }
            }
        }
        g_GnssRx_Flag = false;
 80015f6:	4b03      	ldr	r3, [pc, #12]	; (8001604 <getRmc+0x13c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
    }
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000578 	.word	0x20000578
 8001608:	20000580 	.word	0x20000580
 800160c:	20000a58 	.word	0x20000a58
 8001610:	20000650 	.word	0x20000650
 8001614:	08014230 	.word	0x08014230
 8001618:	20000584 	.word	0x20000584
 800161c:	08014238 	.word	0x08014238
 8001620:	20000e58 	.word	0x20000e58
 8001624:	20000588 	.word	0x20000588
 8001628:	2000057b 	.word	0x2000057b
 800162c:	2000057c 	.word	0x2000057c
 8001630:	20000e64 	.word	0x20000e64
 8001634:	20000a54 	.word	0x20000a54
 8001638:	20000a50 	.word	0x20000a50
 800163c:	20000e68 	.word	0x20000e68
 8001640:	08014240 	.word	0x08014240
 8001644:	2000057a 	.word	0x2000057a

08001648 <formatLatLong>:

_io void formatLatLong(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 800164e:	4b30      	ldr	r3, [pc, #192]	; (8001710 <formatLatLong+0xc8>)
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001658:	ee17 1a90 	vmov	r1, s15
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <formatLatLong+0xcc>)
 800165e:	fb83 2301 	smull	r2, r3, r3, r1
 8001662:	115a      	asrs	r2, r3, #5
 8001664:	17cb      	asrs	r3, r1, #31
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 800166a:	4b29      	ldr	r3, [pc, #164]	; (8001710 <formatLatLong+0xc8>)
 800166c:	ed93 7a00 	vldr	s14, [r3]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2264      	movs	r2, #100	; 0x64
 8001674:	fb02 f303 	mul.w	r3, r2, r3
 8001678:	ee07 3a90 	vmov	s15, r3
 800167c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001684:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001692:	edd7 6a00 	vldr	s13, [r7]
 8001696:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8001718 <formatLatLong+0xd0>
 800169a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <formatLatLong+0xd4>)
 80016a4:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <formatLatLong+0xd8>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b2:	ee17 1a90 	vmov	r1, s15
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <formatLatLong+0xcc>)
 80016b8:	fb83 2301 	smull	r2, r3, r3, r1
 80016bc:	115a      	asrs	r2, r3, #5
 80016be:	17cb      	asrs	r3, r1, #31
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <formatLatLong+0xd8>)
 80016c6:	ed93 7a00 	vldr	s14, [r3]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2264      	movs	r2, #100	; 0x64
 80016ce:	fb02 f303 	mul.w	r3, r2, r3
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016de:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	ee07 3a90 	vmov	s15, r3
 80016e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ec:	edd7 6a00 	vldr	s13, [r7]
 80016f0:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8001718 <formatLatLong+0xd0>
 80016f4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <formatLatLong+0xd4>)
 80016fe:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000a50 	.word	0x20000a50
 8001714:	51eb851f 	.word	0x51eb851f
 8001718:	42700000 	.word	0x42700000
 800171c:	20000e5c 	.word	0x20000e5c
 8001720:	20000a54 	.word	0x20000a54

08001724 <getGGA>:

_io void getGGA(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af06      	add	r7, sp, #24
    if (g_openFixedDataTransmition)
 800172a:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <getGGA+0xf0>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d06c      	beq.n	800180e <getGGA+0xea>
    {
        MsgIndex = 0;
 8001734:	4b38      	ldr	r3, [pc, #224]	; (8001818 <getGGA+0xf4>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 800173a:	4938      	ldr	r1, [pc, #224]	; (800181c <getGGA+0xf8>)
 800173c:	4838      	ldr	r0, [pc, #224]	; (8001820 <getGGA+0xfc>)
 800173e:	f00d f9d2 	bl	800eae6 <strcpy>
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 8001742:	4938      	ldr	r1, [pc, #224]	; (8001824 <getGGA+0x100>)
 8001744:	4836      	ldr	r0, [pc, #216]	; (8001820 <getGGA+0xfc>)
 8001746:	f00d f8ea 	bl	800e91e <strstr>
 800174a:	4603      	mov	r3, r0
 800174c:	4a36      	ldr	r2, [pc, #216]	; (8001828 <getGGA+0x104>)
 800174e:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 8001750:	4b35      	ldr	r3, [pc, #212]	; (8001828 <getGGA+0x104>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b47      	cmp	r3, #71	; 0x47
 8001758:	d14a      	bne.n	80017f0 <getGGA+0xcc>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 800175a:	4b33      	ldr	r3, [pc, #204]	; (8001828 <getGGA+0x104>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <getGGA+0xf4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	7811      	ldrb	r1, [r2, #0]
 8001764:	4a31      	ldr	r2, [pc, #196]	; (800182c <getGGA+0x108>)
 8001766:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <getGGA+0xf4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	4a2a      	ldr	r2, [pc, #168]	; (8001818 <getGGA+0xf4>)
 8001770:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <getGGA+0x104>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a28      	ldr	r2, [pc, #160]	; (8001818 <getGGA+0xf4>)
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	441a      	add	r2, r3
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <getGGA+0x104>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	7812      	ldrb	r2, [r2, #0]
 8001782:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <getGGA+0x104>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b0a      	cmp	r3, #10
 800178c:	d003      	beq.n	8001796 <getGGA+0x72>
 800178e:	4b22      	ldr	r3, [pc, #136]	; (8001818 <getGGA+0xf4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b5a      	cmp	r3, #90	; 0x5a
 8001794:	dde1      	ble.n	800175a <getGGA+0x36>
                {
                    MsgIndex = 0;
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <getGGA+0xf4>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 800179c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a0:	2100      	movs	r1, #0
 80017a2:	481f      	ldr	r0, [pc, #124]	; (8001820 <getGGA+0xfc>)
 80017a4:	f00d f8b3 	bl	800e90e <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 80017a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ac:	2100      	movs	r1, #0
 80017ae:	481b      	ldr	r0, [pc, #108]	; (800181c <getGGA+0xf8>)
 80017b0:	f00d f8ad 	bl	800e90e <memset>

                    if (strlen(gpsGGAPayload) > 10)
 80017b4:	481d      	ldr	r0, [pc, #116]	; (800182c <getGGA+0x108>)
 80017b6:	f7fe fd5b 	bl	8000270 <strlen>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b0a      	cmp	r3, #10
 80017be:	d912      	bls.n	80017e6 <getGGA+0xc2>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <getGGA+0x10c>)
 80017c2:	9305      	str	r3, [sp, #20]
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <getGGA+0x110>)
 80017c6:	9304      	str	r3, [sp, #16]
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <getGGA+0x114>)
 80017ca:	9303      	str	r3, [sp, #12]
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <getGGA+0x118>)
 80017ce:	9302      	str	r3, [sp, #8]
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <getGGA+0x11c>)
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <getGGA+0x120>)
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <getGGA+0x124>)
 80017da:	4a1c      	ldr	r2, [pc, #112]	; (800184c <getGGA+0x128>)
 80017dc:	491c      	ldr	r1, [pc, #112]	; (8001850 <getGGA+0x12c>)
 80017de:	4813      	ldr	r0, [pc, #76]	; (800182c <getGGA+0x108>)
 80017e0:	f00d f824 	bl	800e82c <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 80017e4:	e004      	b.n	80017f0 <getGGA+0xcc>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 80017e6:	2264      	movs	r2, #100	; 0x64
 80017e8:	2100      	movs	r1, #0
 80017ea:	481a      	ldr	r0, [pc, #104]	; (8001854 <getGGA+0x130>)
 80017ec:	f00d f88f 	bl	800e90e <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <getGGA+0xf0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
        memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 80017f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017fa:	2100      	movs	r1, #0
 80017fc:	4808      	ldr	r0, [pc, #32]	; (8001820 <getGGA+0xfc>)
 80017fe:	f00d f886 	bl	800e90e <memset>
        memset(m_rxData, 0, sizeof(m_rxData));
 8001802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001806:	2100      	movs	r1, #0
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <getGGA+0xf8>)
 800180a:	f00d f880 	bl	800e90e <memset>
        // UsrGpsL86Init(&huart2);
    }
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000579 	.word	0x20000579
 8001818:	20000580 	.word	0x20000580
 800181c:	20000a58 	.word	0x20000a58
 8001820:	20000650 	.word	0x20000650
 8001824:	08014238 	.word	0x08014238
 8001828:	20000584 	.word	0x20000584
 800182c:	200005ec 	.word	0x200005ec
 8001830:	20000e88 	.word	0x20000e88
 8001834:	20000e84 	.word	0x20000e84
 8001838:	20000e80 	.word	0x20000e80
 800183c:	20000e7c 	.word	0x20000e7c
 8001840:	20000e78 	.word	0x20000e78
 8001844:	20000e74 	.word	0x20000e74
 8001848:	20000e70 	.word	0x20000e70
 800184c:	20000e6c 	.word	0x20000e6c
 8001850:	0801425c 	.word	0x0801425c
 8001854:	20000588 	.word	0x20000588

08001858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b09c      	sub	sp, #112	; 0x70
 800185c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185e:	f002 fb33 	bl	8003ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001862:	f000 f8a7 	bl	80019b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001866:	f000 f8f6 	bl	8001a56 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186a:	f000 fc49 	bl	8002100 <MX_GPIO_Init>
  MX_DMA_Init();
 800186e:	f000 fc29 	bl	80020c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001872:	f000 fbc7 	bl	8002004 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001876:	f000 f9f3 	bl	8001c60 <MX_I2C2_Init>
  MX_ADC1_Init();
 800187a:	f000 f917 	bl	8001aac <MX_ADC1_Init>
  MX_I2C3_Init();
 800187e:	f000 fa2f 	bl	8001ce0 <MX_I2C3_Init>
  MX_UART5_Init();
 8001882:	f000 fb5f 	bl	8001f44 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001886:	f000 fbed 	bl	8002064 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800188a:	f000 fa69 	bl	8001d60 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800188e:	f000 fb89 	bl	8001fa4 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8001892:	f000 f981 	bl	8001b98 <MX_ADC2_Init>
  MX_TIM3_Init();
 8001896:	f000 faf7 	bl	8001e88 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a0:	4833      	ldr	r0, [pc, #204]	; (8001970 <main+0x118>)
 80018a2:	f004 fc37 	bl	8006114 <HAL_GPIO_WritePin>
  MPU6050_Init(&hi2c3);
 80018a6:	4833      	ldr	r0, [pc, #204]	; (8001974 <main+0x11c>)
 80018a8:	f001 f94f 	bl	8002b4a <MPU6050_Init>
  UsrGpsL86Init(&huart5);
 80018ac:	4832      	ldr	r0, [pc, #200]	; (8001978 <main+0x120>)
 80018ae:	f7ff fdb7 	bl	8001420 <UsrGpsL86Init>
  begin(&hadc1);
 80018b2:	4832      	ldr	r0, [pc, #200]	; (800197c <main+0x124>)
 80018b4:	f7ff fb9c 	bl	8000ff0 <begin>
  char buffer[100] = "80\n";
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <main+0x128>)
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	2260      	movs	r2, #96	; 0x60
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f00d f822 	bl	800e90e <memset>
  HAL_Delay(500);
 80018ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ce:	f002 fb3b 	bl	8003f48 <HAL_Delay>
  HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer), 50);
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fccb 	bl	8000270 <strlen>
 80018da:	4603      	mov	r3, r0
 80018dc:	b29a      	uxth	r2, r3
 80018de:	1d39      	adds	r1, r7, #4
 80018e0:	2332      	movs	r3, #50	; 0x32
 80018e2:	4828      	ldr	r0, [pc, #160]	; (8001984 <main+0x12c>)
 80018e4:	f008 fabd 	bl	8009e62 <HAL_UART_Transmit>
  HAL_Delay(5000);
 80018e8:	f241 3088 	movw	r0, #5000	; 0x1388
 80018ec:	f002 fb2c 	bl	8003f48 <HAL_Delay>
  //HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer), 50);
  /* ------ QUEUE RELATED ------ */
  Queue_Handler = xQueueCreate(2,sizeof(data));
 80018f0:	2200      	movs	r2, #0
 80018f2:	2140      	movs	r1, #64	; 0x40
 80018f4:	2002      	movs	r0, #2
 80018f6:	f009 feaf 	bl	800b658 <xQueueGenericCreate>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a22      	ldr	r2, [pc, #136]	; (8001988 <main+0x130>)
 80018fe:	6013      	str	r3, [r2, #0]
  if (Queue_Handler == NULL) {
 8001900:	4b21      	ldr	r3, [pc, #132]	; (8001988 <main+0x130>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <main+0xb4>

      Error_Handler();
 8001908:	f001 f91a 	bl	8002b40 <Error_Handler>
  }

  /* ------ TASK RELATED ------ */
  xTaskCreate(measurements_task, "measure", 1024, NULL, 3, &Measurements_Handler);
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <main+0x134>)
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	2303      	movs	r3, #3
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2300      	movs	r3, #0
 8001916:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800191a:	491d      	ldr	r1, [pc, #116]	; (8001990 <main+0x138>)
 800191c:	481d      	ldr	r0, [pc, #116]	; (8001994 <main+0x13c>)
 800191e:	f00a fbf2 	bl	800c106 <xTaskCreate>
  xTaskCreate(sender_task, "send data", 1024, NULL, 2, &Sender_Handler);
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <main+0x140>)
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	2302      	movs	r3, #2
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001930:	491a      	ldr	r1, [pc, #104]	; (800199c <main+0x144>)
 8001932:	481b      	ldr	r0, [pc, #108]	; (80019a0 <main+0x148>)
 8001934:	f00a fbe7 	bl	800c106 <xTaskCreate>
  xTaskCreate(LED_task, "toggle LED", 128, NULL, 1, &LED_Handler);
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <main+0x14c>)
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	2301      	movs	r3, #1
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2300      	movs	r3, #0
 8001942:	2280      	movs	r2, #128	; 0x80
 8001944:	4918      	ldr	r1, [pc, #96]	; (80019a8 <main+0x150>)
 8001946:	4819      	ldr	r0, [pc, #100]	; (80019ac <main+0x154>)
 8001948:	f00a fbdd 	bl	800c106 <xTaskCreate>


  /* ------ SEMAPHORE/MUTEX RELATED ------ */
  PWM_Sem_Handler = xSemaphoreCreateBinary();
 800194c:	2203      	movs	r2, #3
 800194e:	2100      	movs	r1, #0
 8001950:	2001      	movs	r0, #1
 8001952:	f009 fe81 	bl	800b658 <xQueueGenericCreate>
 8001956:	4603      	mov	r3, r0
 8001958:	4a15      	ldr	r2, [pc, #84]	; (80019b0 <main+0x158>)
 800195a:	6013      	str	r3, [r2, #0]
  if (PWM_Sem_Handler == NULL) {
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <main+0x158>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <main+0x110>

        Error_Handler();
 8001964:	f001 f8ec 	bl	8002b40 <Error_Handler>
    }

  vTaskStartScheduler();
 8001968:	f00a fd56 	bl	800c418 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800196c:	e7fe      	b.n	800196c <main+0x114>
 800196e:	bf00      	nop
 8001970:	48000400 	.word	0x48000400
 8001974:	20000fa8 	.word	0x20000fa8
 8001978:	20001094 	.word	0x20001094
 800197c:	20000e8c 	.word	0x20000e8c
 8001980:	000a3038 	.word	0x000a3038
 8001984:	2000111c 	.word	0x2000111c
 8001988:	20001444 	.word	0x20001444
 800198c:	20001438 	.word	0x20001438
 8001990:	08014284 	.word	0x08014284
 8001994:	08002291 	.word	0x08002291
 8001998:	2000143c 	.word	0x2000143c
 800199c:	0801428c 	.word	0x0801428c
 80019a0:	080028ed 	.word	0x080028ed
 80019a4:	20001440 	.word	0x20001440
 80019a8:	08014298 	.word	0x08014298
 80019ac:	080029c9 	.word	0x080029c9
 80019b0:	20001448 	.word	0x20001448

080019b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b096      	sub	sp, #88	; 0x58
 80019b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	2244      	movs	r2, #68	; 0x44
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00c ffa3 	bl	800e90e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c8:	463b      	mov	r3, r7
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019da:	f005 fc97 	bl	800730c <HAL_PWREx_ControlVoltageScaling>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019e4:	f001 f8ac 	bl	8002b40 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019e8:	2302      	movs	r3, #2
 80019ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019f2:	2310      	movs	r3, #16
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f6:	2302      	movs	r3, #2
 80019f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019fa:	2302      	movs	r3, #2
 80019fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019fe:	2301      	movs	r3, #1
 8001a00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a02:	230a      	movs	r3, #10
 8001a04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a06:	2307      	movs	r3, #7
 8001a08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4618      	mov	r0, r3
 8001a18:	f005 fcce 	bl	80073b8 <HAL_RCC_OscConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a22:	f001 f88d 	bl	8002b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a26:	230f      	movs	r3, #15
 8001a28:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f006 f896 	bl	8007b70 <HAL_RCC_ClockConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a4a:	f001 f879 	bl	8002b40 <Error_Handler>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	3758      	adds	r7, #88	; 0x58
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b0a2      	sub	sp, #136	; 0x88
 8001a5a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	2288      	movs	r2, #136	; 0x88
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f00c ff53 	bl	800e90e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a6c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a72:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001a74:	2302      	movs	r3, #2
 8001a76:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001a80:	2307      	movs	r3, #7
 8001a82:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a84:	2302      	movs	r3, #2
 8001a86:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a90:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a92:	463b      	mov	r3, r7
 8001a94:	4618      	mov	r0, r3
 8001a96:	f006 fac1 	bl	800801c <HAL_RCCEx_PeriphCLKConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001aa0:	f001 f84e 	bl	8002b40 <Error_Handler>
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3788      	adds	r7, #136	; 0x88
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
 8001acc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ace:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001ad0:	4a2f      	ldr	r2, [pc, #188]	; (8001b90 <MX_ADC1_Init+0xe4>)
 8001ad2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ada:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ae6:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001aee:	2204      	movs	r2, #4
 8001af0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001afe:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b12:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b18:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b2e:	4817      	ldr	r0, [pc, #92]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001b30:	f002 fc60 	bl	80043f4 <HAL_ADC_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001b3a:	f001 f801 	bl	8002b40 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4619      	mov	r1, r3
 8001b48:	4810      	ldr	r0, [pc, #64]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001b4a:	f003 fd31 	bl	80055b0 <HAL_ADCEx_MultiModeConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001b54:	f000 fff4 	bl	8002b40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_ADC1_Init+0xe8>)
 8001b5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b5c:	2306      	movs	r3, #6
 8001b5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b64:	237f      	movs	r3, #127	; 0x7f
 8001b66:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b68:	2304      	movs	r3, #4
 8001b6a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_ADC1_Init+0xe0>)
 8001b76:	f002 ff61 	bl	8004a3c <HAL_ADC_ConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001b80:	f000 ffde 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	3728      	adds	r7, #40	; 0x28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000e8c 	.word	0x20000e8c
 8001b90:	50040000 	.word	0x50040000
 8001b94:	43210000 	.word	0x43210000

08001b98 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001bae:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001bb0:	4a29      	ldr	r2, [pc, #164]	; (8001c58 <MX_ADC2_Init+0xc0>)
 8001bb2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bc6:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001bce:	2204      	movs	r2, #4
 8001bd0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c0e:	4811      	ldr	r0, [pc, #68]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001c10:	f002 fbf0 	bl	80043f4 <HAL_ADC_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8001c1a:	f000 ff91 	bl	8002b40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_ADC2_Init+0xc4>)
 8001c20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c22:	2306      	movs	r3, #6
 8001c24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c2a:	237f      	movs	r3, #127	; 0x7f
 8001c2c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c2e:	2304      	movs	r3, #4
 8001c30:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c36:	463b      	mov	r3, r7
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4806      	ldr	r0, [pc, #24]	; (8001c54 <MX_ADC2_Init+0xbc>)
 8001c3c:	f002 fefe 	bl	8004a3c <HAL_ADC_ConfigChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8001c46:	f000 ff7b 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000ef0 	.word	0x20000ef0
 8001c58:	50040100 	.word	0x50040100
 8001c5c:	3ac04000 	.word	0x3ac04000

08001c60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <MX_I2C2_Init+0x74>)
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <MX_I2C2_Init+0x78>)
 8001c68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <MX_I2C2_Init+0x74>)
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <MX_I2C2_Init+0x7c>)
 8001c6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c70:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <MX_I2C2_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <MX_I2C2_Init+0x74>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <MX_I2C2_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <MX_I2C2_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <MX_I2C2_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_I2C2_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <MX_I2C2_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c9a:	480e      	ldr	r0, [pc, #56]	; (8001cd4 <MX_I2C2_Init+0x74>)
 8001c9c:	f004 fa6a 	bl	8006174 <HAL_I2C_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001ca6:	f000 ff4b 	bl	8002b40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001caa:	2100      	movs	r1, #0
 8001cac:	4809      	ldr	r0, [pc, #36]	; (8001cd4 <MX_I2C2_Init+0x74>)
 8001cae:	f005 fa87 	bl	80071c0 <HAL_I2CEx_ConfigAnalogFilter>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001cb8:	f000 ff42 	bl	8002b40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <MX_I2C2_Init+0x74>)
 8001cc0:	f005 fac9 	bl	8007256 <HAL_I2CEx_ConfigDigitalFilter>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001cca:	f000 ff39 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000f54 	.word	0x20000f54
 8001cd8:	40005800 	.word	0x40005800
 8001cdc:	10909cec 	.word	0x10909cec

08001ce0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <MX_I2C3_Init+0x74>)
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <MX_I2C3_Init+0x78>)
 8001ce8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00702991;
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <MX_I2C3_Init+0x74>)
 8001cec:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <MX_I2C3_Init+0x7c>)
 8001cee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <MX_I2C3_Init+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <MX_I2C3_Init+0x74>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cfc:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <MX_I2C3_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <MX_I2C3_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <MX_I2C3_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_I2C3_Init+0x74>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <MX_I2C3_Init+0x74>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d1a:	480e      	ldr	r0, [pc, #56]	; (8001d54 <MX_I2C3_Init+0x74>)
 8001d1c:	f004 fa2a 	bl	8006174 <HAL_I2C_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001d26:	f000 ff0b 	bl	8002b40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4809      	ldr	r0, [pc, #36]	; (8001d54 <MX_I2C3_Init+0x74>)
 8001d2e:	f005 fa47 	bl	80071c0 <HAL_I2CEx_ConfigAnalogFilter>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001d38:	f000 ff02 	bl	8002b40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_I2C3_Init+0x74>)
 8001d40:	f005 fa89 	bl	8007256 <HAL_I2CEx_ConfigDigitalFilter>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001d4a:	f000 fef9 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000fa8 	.word	0x20000fa8
 8001d58:	40005c00 	.word	0x40005c00
 8001d5c:	00702991 	.word	0x00702991

08001d60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b096      	sub	sp, #88	; 0x58
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	611a      	str	r2, [r3, #16]
 8001d82:	615a      	str	r2, [r3, #20]
 8001d84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	222c      	movs	r2, #44	; 0x2c
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f00c fdbe 	bl	800e90e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <MX_TIM1_Init+0x120>)
 8001d94:	4a3b      	ldr	r2, [pc, #236]	; (8001e84 <MX_TIM1_Init+0x124>)
 8001d96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d98:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <MX_TIM1_Init+0x120>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9e:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <MX_TIM1_Init+0x120>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001da4:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <MX_TIM1_Init+0x120>)
 8001da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001daa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dac:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <MX_TIM1_Init+0x120>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001db2:	4b33      	ldr	r3, [pc, #204]	; (8001e80 <MX_TIM1_Init+0x120>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db8:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <MX_TIM1_Init+0x120>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dbe:	4830      	ldr	r0, [pc, #192]	; (8001e80 <MX_TIM1_Init+0x120>)
 8001dc0:	f006 feba 	bl	8008b38 <HAL_TIM_PWM_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001dca:	f000 feb9 	bl	8002b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dda:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dde:	4619      	mov	r1, r3
 8001de0:	4827      	ldr	r0, [pc, #156]	; (8001e80 <MX_TIM1_Init+0x120>)
 8001de2:	f007 fea7 	bl	8009b34 <HAL_TIMEx_MasterConfigSynchronization>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001dec:	f000 fea8 	bl	8002b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df0:	2360      	movs	r3, #96	; 0x60
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e10:	2200      	movs	r2, #0
 8001e12:	4619      	mov	r1, r3
 8001e14:	481a      	ldr	r0, [pc, #104]	; (8001e80 <MX_TIM1_Init+0x120>)
 8001e16:	f007 f8f5 	bl	8009004 <HAL_TIM_PWM_ConfigChannel>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e20:	f000 fe8e 	bl	8002b40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	4619      	mov	r1, r3
 8001e58:	4809      	ldr	r0, [pc, #36]	; (8001e80 <MX_TIM1_Init+0x120>)
 8001e5a:	f007 fef3 	bl	8009c44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001e64:	f000 fe6c 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_TIM1_Init+0x120>)
 8001e6c:	f007 fda8 	bl	80099c0 <HAL_TIMEx_PWMN_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <MX_TIM1_Init+0x120>)
 8001e72:	f001 fc87 	bl	8003784 <HAL_TIM_MspPostInit>

}
 8001e76:	bf00      	nop
 8001e78:	3758      	adds	r7, #88	; 0x58
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000ffc 	.word	0x20000ffc
 8001e84:	40012c00 	.word	0x40012c00

08001e88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8e:	f107 031c 	add.w	r3, r7, #28
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
 8001ea8:	615a      	str	r2, [r3, #20]
 8001eaa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <MX_TIM3_Init+0xb4>)
 8001eae:	4a24      	ldr	r2, [pc, #144]	; (8001f40 <MX_TIM3_Init+0xb8>)
 8001eb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <MX_TIM3_Init+0xb4>)
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <MX_TIM3_Init+0xb4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <MX_TIM3_Init+0xb4>)
 8001ec0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001ec4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <MX_TIM3_Init+0xb4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <MX_TIM3_Init+0xb4>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ed2:	481a      	ldr	r0, [pc, #104]	; (8001f3c <MX_TIM3_Init+0xb4>)
 8001ed4:	f006 fe30 	bl	8008b38 <HAL_TIM_PWM_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001ede:	f000 fe2f 	bl	8002b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4812      	ldr	r0, [pc, #72]	; (8001f3c <MX_TIM3_Init+0xb4>)
 8001ef2:	f007 fe1f 	bl	8009b34 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001efc:	f000 fe20 	bl	8002b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f00:	2360      	movs	r3, #96	; 0x60
 8001f02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f10:	463b      	mov	r3, r7
 8001f12:	2200      	movs	r2, #0
 8001f14:	4619      	mov	r1, r3
 8001f16:	4809      	ldr	r0, [pc, #36]	; (8001f3c <MX_TIM3_Init+0xb4>)
 8001f18:	f007 f874 	bl	8009004 <HAL_TIM_PWM_ConfigChannel>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001f22:	f000 fe0d 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001f26:	2100      	movs	r1, #0
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <MX_TIM3_Init+0xb4>)
 8001f2a:	f006 fe5d 	bl	8008be8 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f2e:	4803      	ldr	r0, [pc, #12]	; (8001f3c <MX_TIM3_Init+0xb4>)
 8001f30:	f001 fc28 	bl	8003784 <HAL_TIM_MspPostInit>

}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20001048 	.word	0x20001048
 8001f40:	40000400 	.word	0x40000400

08001f44 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <MX_UART5_Init+0x58>)
 8001f4a:	4a15      	ldr	r2, [pc, #84]	; (8001fa0 <MX_UART5_Init+0x5c>)
 8001f4c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <MX_UART5_Init+0x58>)
 8001f50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f54:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_UART5_Init+0x58>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <MX_UART5_Init+0x58>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <MX_UART5_Init+0x58>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_UART5_Init+0x58>)
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <MX_UART5_Init+0x58>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_UART5_Init+0x58>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <MX_UART5_Init+0x58>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <MX_UART5_Init+0x58>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_UART5_Init+0x58>)
 8001f88:	f007 ff1d 	bl	8009dc6 <HAL_UART_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001f92:	f000 fdd5 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20001094 	.word	0x20001094
 8001fa0:	40005000 	.word	0x40005000

08001fa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001faa:	4a15      	ldr	r2, [pc, #84]	; (8002000 <MX_USART1_UART_Init+0x5c>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_USART1_UART_Init+0x58>)
 8001fe8:	f007 feed 	bl	8009dc6 <HAL_UART_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ff2:	f000 fda5 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	2000111c 	.word	0x2000111c
 8002000:	40013800 	.word	0x40013800

08002004 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_USART2_UART_Init+0x58>)
 800200a:	4a15      	ldr	r2, [pc, #84]	; (8002060 <MX_USART2_UART_Init+0x5c>)
 800200c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <MX_USART2_UART_Init+0x58>)
 8002010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002014:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_USART2_UART_Init+0x58>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <MX_USART2_UART_Init+0x58>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <MX_USART2_UART_Init+0x58>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <MX_USART2_UART_Init+0x58>)
 800202a:	220c      	movs	r2, #12
 800202c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <MX_USART2_UART_Init+0x58>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <MX_USART2_UART_Init+0x58>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <MX_USART2_UART_Init+0x58>)
 800203c:	2200      	movs	r2, #0
 800203e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <MX_USART2_UART_Init+0x58>)
 8002042:	2200      	movs	r2, #0
 8002044:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_USART2_UART_Init+0x58>)
 8002048:	f007 febd 	bl	8009dc6 <HAL_UART_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002052:	f000 fd75 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200011a4 	.word	0x200011a4
 8002060:	40004400 	.word	0x40004400

08002064 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <MX_USART3_UART_Init+0x58>)
 800206a:	4a15      	ldr	r2, [pc, #84]	; (80020c0 <MX_USART3_UART_Init+0x5c>)
 800206c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <MX_USART3_UART_Init+0x58>)
 8002070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002074:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <MX_USART3_UART_Init+0x58>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <MX_USART3_UART_Init+0x58>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <MX_USART3_UART_Init+0x58>)
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <MX_USART3_UART_Init+0x58>)
 800208a:	220c      	movs	r2, #12
 800208c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <MX_USART3_UART_Init+0x58>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <MX_USART3_UART_Init+0x58>)
 8002096:	2200      	movs	r2, #0
 8002098:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <MX_USART3_UART_Init+0x58>)
 800209c:	2200      	movs	r2, #0
 800209e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <MX_USART3_UART_Init+0x58>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <MX_USART3_UART_Init+0x58>)
 80020a8:	f007 fe8d 	bl	8009dc6 <HAL_UART_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020b2:	f000 fd45 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000122c 	.word	0x2000122c
 80020c0:	40004800 	.word	0x40004800

080020c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <MX_DMA_Init+0x38>)
 80020cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <MX_DMA_Init+0x38>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	6493      	str	r3, [r2, #72]	; 0x48
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <MX_DMA_Init+0x38>)
 80020d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2105      	movs	r1, #5
 80020e6:	2039      	movs	r0, #57	; 0x39
 80020e8:	f003 fbca 	bl	8005880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80020ec:	2039      	movs	r0, #57	; 0x39
 80020ee:	f003 fbe3 	bl	80058b8 <HAL_NVIC_EnableIRQ>

}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000

08002100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002116:	4b5b      	ldr	r3, [pc, #364]	; (8002284 <MX_GPIO_Init+0x184>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211a:	4a5a      	ldr	r2, [pc, #360]	; (8002284 <MX_GPIO_Init+0x184>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002122:	4b58      	ldr	r3, [pc, #352]	; (8002284 <MX_GPIO_Init+0x184>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800212e:	4b55      	ldr	r3, [pc, #340]	; (8002284 <MX_GPIO_Init+0x184>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002132:	4a54      	ldr	r2, [pc, #336]	; (8002284 <MX_GPIO_Init+0x184>)
 8002134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800213a:	4b52      	ldr	r3, [pc, #328]	; (8002284 <MX_GPIO_Init+0x184>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	4b4f      	ldr	r3, [pc, #316]	; (8002284 <MX_GPIO_Init+0x184>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	4a4e      	ldr	r2, [pc, #312]	; (8002284 <MX_GPIO_Init+0x184>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002152:	4b4c      	ldr	r3, [pc, #304]	; (8002284 <MX_GPIO_Init+0x184>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	4b49      	ldr	r3, [pc, #292]	; (8002284 <MX_GPIO_Init+0x184>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	4a48      	ldr	r2, [pc, #288]	; (8002284 <MX_GPIO_Init+0x184>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800216a:	4b46      	ldr	r3, [pc, #280]	; (8002284 <MX_GPIO_Init+0x184>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002176:	4b43      	ldr	r3, [pc, #268]	; (8002284 <MX_GPIO_Init+0x184>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	4a42      	ldr	r2, [pc, #264]	; (8002284 <MX_GPIO_Init+0x184>)
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002182:	4b40      	ldr	r3, [pc, #256]	; (8002284 <MX_GPIO_Init+0x184>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BAT_FULL_GPIO_Port, BAT_FULL_Pin, GPIO_PIN_RESET);
 800218e:	2200      	movs	r2, #0
 8002190:	2104      	movs	r1, #4
 8002192:	483d      	ldr	r0, [pc, #244]	; (8002288 <MX_GPIO_Init+0x188>)
 8002194:	f003 ffbe 	bl	8006114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_12|BAT_LOW_Pin, GPIO_PIN_RESET);
 8002198:	2200      	movs	r2, #0
 800219a:	f249 0120 	movw	r1, #36896	; 0x9020
 800219e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a2:	f003 ffb7 	bl	8006114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOOST_ENABLE_GPIO_Port, BOOST_ENABLE_Pin, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021ac:	4837      	ldr	r0, [pc, #220]	; (800228c <MX_GPIO_Init+0x18c>)
 80021ae:	f003 ffb1 	bl	8006114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	482f      	ldr	r0, [pc, #188]	; (8002288 <MX_GPIO_Init+0x188>)
 80021ca:	f003 fdf9 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_FULL_Pin */
  GPIO_InitStruct.Pin = BAT_FULL_Pin;
 80021ce:	2304      	movs	r3, #4
 80021d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d2:	2301      	movs	r3, #1
 80021d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BAT_FULL_GPIO_Port, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	4828      	ldr	r0, [pc, #160]	; (8002288 <MX_GPIO_Init+0x188>)
 80021e6:	f003 fdeb 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021ea:	2310      	movs	r3, #16
 80021ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002202:	f003 fddd 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA12 BAT_LOW_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_12|BAT_LOW_Pin;
 8002206:	f249 0320 	movw	r3, #36896	; 0x9020
 800220a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220c:	2301      	movs	r3, #1
 800220e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	4619      	mov	r1, r3
 800221e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002222:	f003 fdcd 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GAS_D_Pin */
  GPIO_InitStruct.Pin = GAS_D_Pin;
 8002226:	2304      	movs	r3, #4
 8002228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GAS_D_GPIO_Port, &GPIO_InitStruct);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	4814      	ldr	r0, [pc, #80]	; (800228c <MX_GPIO_Init+0x18c>)
 800223a:	f003 fdc1 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOST_ENABLE_Pin */
  GPIO_InitStruct.Pin = BOOST_ENABLE_Pin;
 800223e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002244:	2301      	movs	r3, #1
 8002246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BOOST_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	480d      	ldr	r0, [pc, #52]	; (800228c <MX_GPIO_Init+0x18c>)
 8002258:	f003 fdb2 	bl	8005dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800225c:	2200      	movs	r2, #0
 800225e:	2105      	movs	r1, #5
 8002260:	200a      	movs	r0, #10
 8002262:	f003 fb0d 	bl	8005880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002266:	200a      	movs	r0, #10
 8002268:	f003 fb26 	bl	80058b8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	2105      	movs	r1, #5
 8002270:	2028      	movs	r0, #40	; 0x28
 8002272:	f003 fb05 	bl	8005880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002276:	2028      	movs	r0, #40	; 0x28
 8002278:	f003 fb1e 	bl	80058b8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800227c:	bf00      	nop
 800227e:	3728      	adds	r7, #40	; 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	48000800 	.word	0x48000800
 800228c:	48000400 	.word	0x48000400

08002290 <measurements_task>:

/* USER CODE BEGIN 4 */
	void measurements_task(void *pvParameters){
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	ed2d 8b02 	vpush	{d8}
 8002296:	b0a2      	sub	sp, #136	; 0x88
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
		while(1)
		{
			ADC_ChannelConfTypeDef sConfig;
			shtc3_perform_measurements(&hi2c2, &temp, &hum);
 800229c:	4abc      	ldr	r2, [pc, #752]	; (8002590 <measurements_task+0x300>)
 800229e:	49bd      	ldr	r1, [pc, #756]	; (8002594 <measurements_task+0x304>)
 80022a0:	48bd      	ldr	r0, [pc, #756]	; (8002598 <measurements_task+0x308>)
 80022a2:	f001 f8c3 	bl	800342c <shtc3_perform_measurements>

			MPU6050_Read_All(&hi2c3, &imuData);
 80022a6:	49bd      	ldr	r1, [pc, #756]	; (800259c <measurements_task+0x30c>)
 80022a8:	48bd      	ldr	r0, [pc, #756]	; (80025a0 <measurements_task+0x310>)
 80022aa:	f000 fca5 	bl	8002bf8 <MPU6050_Read_All>

			Usr_GpsL86GetValues(&gpsData);
 80022ae:	48bd      	ldr	r0, [pc, #756]	; (80025a4 <measurements_task+0x314>)
 80022b0:	f7ff f8c6 	bl	8001440 <Usr_GpsL86GetValues>
			begin(&hadc1);
 80022b4:	48bc      	ldr	r0, [pc, #752]	; (80025a8 <measurements_task+0x318>)
 80022b6:	f7fe fe9b 	bl	8000ff0 <begin>
			measuredData.lpg = readLPG(&hadc1);
 80022ba:	48bb      	ldr	r0, [pc, #748]	; (80025a8 <measurements_task+0x318>)
 80022bc:	f7fe febe 	bl	800103c <readLPG>
 80022c0:	eef0 7a40 	vmov.f32	s15, s0
 80022c4:	4bb9      	ldr	r3, [pc, #740]	; (80025ac <measurements_task+0x31c>)
 80022c6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			measuredData.smoke = readSmoke(&hadc1);
 80022ca:	48b7      	ldr	r0, [pc, #732]	; (80025a8 <measurements_task+0x318>)
 80022cc:	f7fe ff02 	bl	80010d4 <readSmoke>
 80022d0:	eef0 7a40 	vmov.f32	s15, s0
 80022d4:	4bb5      	ldr	r3, [pc, #724]	; (80025ac <measurements_task+0x31c>)
 80022d6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			measuredData.co = readCO(&hadc1);
 80022da:	48b3      	ldr	r0, [pc, #716]	; (80025a8 <measurements_task+0x318>)
 80022dc:	f7fe fed4 	bl	8001088 <readCO>
 80022e0:	eef0 7a40 	vmov.f32	s15, s0
 80022e4:	4bb1      	ldr	r3, [pc, #708]	; (80025ac <measurements_task+0x31c>)
 80022e6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			HAL_ADC_Stop(&hadc1);
 80022ea:	48af      	ldr	r0, [pc, #700]	; (80025a8 <measurements_task+0x318>)
 80022ec:	f002 fa8c 	bl	8004808 <HAL_ADC_Stop>
			sConfig.Channel = ADC_CHANNEL_13;
 80022f0:	4baf      	ldr	r3, [pc, #700]	; (80025b0 <measurements_task+0x320>)
 80022f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  	  	  	sConfig.Rank = ADC_REGULAR_RANK_1;
 80022f4:	2306      	movs	r3, #6
 80022f6:	673b      	str	r3, [r7, #112]	; 0x70
  	  	  	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80022f8:	2300      	movs	r3, #0
 80022fa:	677b      	str	r3, [r7, #116]	; 0x74
  	  	  	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80022fc:	237f      	movs	r3, #127	; 0x7f
 80022fe:	67bb      	str	r3, [r7, #120]	; 0x78
  	  	  	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002300:	2304      	movs	r3, #4
 8002302:	67fb      	str	r3, [r7, #124]	; 0x7c
  	  	  	sConfig.Offset = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800230a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800230e:	4619      	mov	r1, r3
 8002310:	48a5      	ldr	r0, [pc, #660]	; (80025a8 <measurements_task+0x318>)
 8002312:	f002 fb93 	bl	8004a3c <HAL_ADC_ConfigChannel>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <measurements_task+0x90>
				{
				 Error_Handler();
 800231c:	f000 fc10 	bl	8002b40 <Error_Handler>
				}
			HAL_ADC_Start(&hadc1); // start the adc
 8002320:	48a1      	ldr	r0, [pc, #644]	; (80025a8 <measurements_task+0x318>)
 8002322:	f002 f9b7 	bl	8004694 <HAL_ADC_Start>

			HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8002326:	2164      	movs	r1, #100	; 0x64
 8002328:	489f      	ldr	r0, [pc, #636]	; (80025a8 <measurements_task+0x318>)
 800232a:	f002 faa1 	bl	8004870 <HAL_ADC_PollForConversion>

			FSR_reading= HAL_ADC_GetValue(&hadc1); // get the adc value
 800232e:	489e      	ldr	r0, [pc, #632]	; (80025a8 <measurements_task+0x318>)
 8002330:	f002 fb76 	bl	8004a20 <HAL_ADC_GetValue>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	4b9e      	ldr	r3, [pc, #632]	; (80025b4 <measurements_task+0x324>)
 800233a:	601a      	str	r2, [r3, #0]

			HAL_ADC_Stop(&hadc1); // stop adc*/
 800233c:	489a      	ldr	r0, [pc, #616]	; (80025a8 <measurements_task+0x318>)
 800233e:	f002 fa63 	bl	8004808 <HAL_ADC_Stop>

			measuredData.humidity = hum;
 8002342:	4b93      	ldr	r3, [pc, #588]	; (8002590 <measurements_task+0x300>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a99      	ldr	r2, [pc, #612]	; (80025ac <measurements_task+0x31c>)
 8002348:	6053      	str	r3, [r2, #4]
			measuredData.temperature = temp;
 800234a:	4b92      	ldr	r3, [pc, #584]	; (8002594 <measurements_task+0x304>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a97      	ldr	r2, [pc, #604]	; (80025ac <measurements_task+0x31c>)
 8002350:	6013      	str	r3, [r2, #0]
			measuredData.accelX = imuData.Ax;
 8002352:	4b92      	ldr	r3, [pc, #584]	; (800259c <measurements_task+0x30c>)
 8002354:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002358:	4994      	ldr	r1, [pc, #592]	; (80025ac <measurements_task+0x31c>)
 800235a:	e9c1 2306 	strd	r2, r3, [r1, #24]
			measuredData.accelY = imuData.Ay;
 800235e:	4b8f      	ldr	r3, [pc, #572]	; (800259c <measurements_task+0x30c>)
 8002360:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002364:	4991      	ldr	r1, [pc, #580]	; (80025ac <measurements_task+0x31c>)
 8002366:	e9c1 2308 	strd	r2, r3, [r1, #32]
			measuredData.accelZ = imuData.Az;
 800236a:	4b8c      	ldr	r3, [pc, #560]	; (800259c <measurements_task+0x30c>)
 800236c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002370:	498e      	ldr	r1, [pc, #568]	; (80025ac <measurements_task+0x31c>)
 8002372:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			measuredData.latitude = gpsData.lat;
 8002376:	4b8b      	ldr	r3, [pc, #556]	; (80025a4 <measurements_task+0x314>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a8c      	ldr	r2, [pc, #560]	; (80025ac <measurements_task+0x31c>)
 800237c:	6093      	str	r3, [r2, #8]
			measuredData.longitude = gpsData.lon;
 800237e:	4b89      	ldr	r3, [pc, #548]	; (80025a4 <measurements_task+0x314>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4a8a      	ldr	r2, [pc, #552]	; (80025ac <measurements_task+0x31c>)
 8002384:	60d3      	str	r3, [r2, #12]
			measuredData.altitude = gpsData.altitudeInMeter;
 8002386:	4b87      	ldr	r3, [pc, #540]	; (80025a4 <measurements_task+0x314>)
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	4a88      	ldr	r2, [pc, #544]	; (80025ac <measurements_task+0x31c>)
 800238c:	6113      	str	r3, [r2, #16]
			//float gpsTimeSnapshot = gpsData.fixedTime;
			//measuredData.time = gpsTimeSnapshot;
			measuredData.time = gpsData.fixedTime;
 800238e:	4b85      	ldr	r3, [pc, #532]	; (80025a4 <measurements_task+0x314>)
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	4a86      	ldr	r2, [pc, #536]	; (80025ac <measurements_task+0x31c>)
 8002394:	6153      	str	r3, [r2, #20]
			accx = measuredData.accelZ;
 8002396:	4b85      	ldr	r3, [pc, #532]	; (80025ac <measurements_task+0x31c>)
 8002398:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	f7fe fc22 	bl	8000be8 <__aeabi_d2f>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4a84      	ldr	r2, [pc, #528]	; (80025b8 <measurements_task+0x328>)
 80023a8:	6013      	str	r3, [r2, #0]

			HAL_ADC_Start(&hadc2);
 80023aa:	4884      	ldr	r0, [pc, #528]	; (80025bc <measurements_task+0x32c>)
 80023ac:	f002 f972 	bl	8004694 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc2, 100);
 80023b0:	2164      	movs	r1, #100	; 0x64
 80023b2:	4882      	ldr	r0, [pc, #520]	; (80025bc <measurements_task+0x32c>)
 80023b4:	f002 fa5c 	bl	8004870 <HAL_ADC_PollForConversion>
			measuredData.batStatus = (HAL_ADC_GetValue(&hadc2)*4.2*calValue)/4095;
 80023b8:	4880      	ldr	r0, [pc, #512]	; (80025bc <measurements_task+0x32c>)
 80023ba:	f002 fb31 	bl	8004a20 <HAL_ADC_GetValue>
 80023be:	4603      	mov	r3, r0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe f89f 	bl	8000504 <__aeabi_ui2d>
 80023c6:	a36e      	add	r3, pc, #440	; (adr r3, 8002580 <measurements_task+0x2f0>)
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	f7fe f914 	bl	80005f8 <__aeabi_dmul>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4614      	mov	r4, r2
 80023d6:	461d      	mov	r5, r3
 80023d8:	4b79      	ldr	r3, [pc, #484]	; (80025c0 <measurements_task+0x330>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f8b3 	bl	8000548 <__aeabi_f2d>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4620      	mov	r0, r4
 80023e8:	4629      	mov	r1, r5
 80023ea:	f7fe f905 	bl	80005f8 <__aeabi_dmul>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	a364      	add	r3, pc, #400	; (adr r3, 8002588 <measurements_task+0x2f8>)
 80023f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fc:	f7fe fa26 	bl	800084c <__aeabi_ddiv>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	f7fe fbee 	bl	8000be8 <__aeabi_d2f>
 800240c:	4603      	mov	r3, r0
 800240e:	4a67      	ldr	r2, [pc, #412]	; (80025ac <measurements_task+0x31c>)
 8002410:	63d3      	str	r3, [r2, #60]	; 0x3c
			HAL_ADC_Stop(&hadc2);
 8002412:	486a      	ldr	r0, [pc, #424]	; (80025bc <measurements_task+0x32c>)
 8002414:	f002 f9f8 	bl	8004808 <HAL_ADC_Stop>

			accel = sqrt(square(imuData.Ax) + square(imuData.Ay) + square(imuData.Az));
 8002418:	4b60      	ldr	r3, [pc, #384]	; (800259c <measurements_task+0x30c>)
 800241a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	f7fe fbe1 	bl	8000be8 <__aeabi_d2f>
 8002426:	4603      	mov	r3, r0
 8002428:	ee00 3a10 	vmov	s0, r3
 800242c:	f000 fb66 	bl	8002afc <square>
 8002430:	eeb0 8a40 	vmov.f32	s16, s0
 8002434:	4b59      	ldr	r3, [pc, #356]	; (800259c <measurements_task+0x30c>)
 8002436:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f7fe fbd3 	bl	8000be8 <__aeabi_d2f>
 8002442:	4603      	mov	r3, r0
 8002444:	ee00 3a10 	vmov	s0, r3
 8002448:	f000 fb58 	bl	8002afc <square>
 800244c:	eef0 7a40 	vmov.f32	s15, s0
 8002450:	ee38 8a27 	vadd.f32	s16, s16, s15
 8002454:	4b51      	ldr	r3, [pc, #324]	; (800259c <measurements_task+0x30c>)
 8002456:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f7fe fbc3 	bl	8000be8 <__aeabi_d2f>
 8002462:	4603      	mov	r3, r0
 8002464:	ee00 3a10 	vmov	s0, r3
 8002468:	f000 fb48 	bl	8002afc <square>
 800246c:	eef0 7a40 	vmov.f32	s15, s0
 8002470:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002474:	ee17 0a90 	vmov	r0, s15
 8002478:	f7fe f866 	bl	8000548 <__aeabi_f2d>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	ec43 2b10 	vmov	d0, r2, r3
 8002484:	f010 fbaa 	bl	8012bdc <sqrt>
 8002488:	ec53 2b10 	vmov	r2, r3, d0
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	f7fe fbaa 	bl	8000be8 <__aeabi_d2f>
 8002494:	4603      	mov	r3, r0
 8002496:	4a4b      	ldr	r2, [pc, #300]	; (80025c4 <measurements_task+0x334>)
 8002498:	6013      	str	r3, [r2, #0]
			if (accel >= 2.0 ){
 800249a:	4b4a      	ldr	r3, [pc, #296]	; (80025c4 <measurements_task+0x334>)
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80024a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ac:	db12      	blt.n	80024d4 <measurements_task+0x244>
				char buffer[100];
				sprintf(buffer, "11\n");
 80024ae:	f107 0308 	add.w	r3, r7, #8
 80024b2:	4945      	ldr	r1, [pc, #276]	; (80025c8 <measurements_task+0x338>)
 80024b4:	4618      	mov	r0, r3
 80024b6:	f00c f999 	bl	800e7ec <siprintf>
				HAL_UART_Transmit(&huart3,(uint8_t*)buffer, strlen(buffer), 50);
 80024ba:	f107 0308 	add.w	r3, r7, #8
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fd fed6 	bl	8000270 <strlen>
 80024c4:	4603      	mov	r3, r0
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	f107 0108 	add.w	r1, r7, #8
 80024cc:	2332      	movs	r3, #50	; 0x32
 80024ce:	483f      	ldr	r0, [pc, #252]	; (80025cc <measurements_task+0x33c>)
 80024d0:	f007 fcc7 	bl	8009e62 <HAL_UART_Transmit>
			}

			if (measuredData.batStatus <= voltageThresholdMinimum && !sameValueLow){
 80024d4:	4b35      	ldr	r3, [pc, #212]	; (80025ac <measurements_task+0x31c>)
 80024d6:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80024da:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <measurements_task+0x340>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e8:	d83b      	bhi.n	8002562 <measurements_task+0x2d2>
 80024ea:	4b3a      	ldr	r3, [pc, #232]	; (80025d4 <measurements_task+0x344>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	f083 0301 	eor.w	r3, r3, #1
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d034      	beq.n	8002562 <measurements_task+0x2d2>
				char buffer[100];
				sprintf(buffer,"10\n");
 80024f8:	f107 0308 	add.w	r3, r7, #8
 80024fc:	4936      	ldr	r1, [pc, #216]	; (80025d8 <measurements_task+0x348>)
 80024fe:	4618      	mov	r0, r3
 8002500:	f00c f974 	bl	800e7ec <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer), 50);
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd feb1 	bl	8000270 <strlen>
 800250e:	4603      	mov	r3, r0
 8002510:	b29a      	uxth	r2, r3
 8002512:	f107 0108 	add.w	r1, r7, #8
 8002516:	2332      	movs	r3, #50	; 0x32
 8002518:	4830      	ldr	r0, [pc, #192]	; (80025dc <measurements_task+0x34c>)
 800251a:	f007 fca2 	bl	8009e62 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3,(uint8_t*)buffer,strlen(buffer), 50);
 800251e:	f107 0308 	add.w	r3, r7, #8
 8002522:	4618      	mov	r0, r3
 8002524:	f7fd fea4 	bl	8000270 <strlen>
 8002528:	4603      	mov	r3, r0
 800252a:	b29a      	uxth	r2, r3
 800252c:	f107 0108 	add.w	r1, r7, #8
 8002530:	2332      	movs	r3, #50	; 0x32
 8002532:	4826      	ldr	r0, [pc, #152]	; (80025cc <measurements_task+0x33c>)
 8002534:	f007 fc95 	bl	8009e62 <HAL_UART_Transmit>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002538:	2201      	movs	r2, #1
 800253a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800253e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002542:	f003 fde7 	bl	8006114 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8002546:	2200      	movs	r2, #0
 8002548:	2104      	movs	r1, #4
 800254a:	4825      	ldr	r0, [pc, #148]	; (80025e0 <measurements_task+0x350>)
 800254c:	f003 fde2 	bl	8006114 <HAL_GPIO_WritePin>
				sameValueLow = true;
 8002550:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <measurements_task+0x344>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
				sameValueMedium = false;
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <measurements_task+0x354>)
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
				sameValueHigh = false;
 800255c:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <measurements_task+0x358>)
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
			}

			if (measuredData.batStatus >= voltageThresholdMinimum && measuredData.batStatus <= voltageThresholdMaximum && !sameValueMedium){
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <measurements_task+0x31c>)
 8002564:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002568:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <measurements_task+0x340>)
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002576:	db73      	blt.n	8002660 <measurements_task+0x3d0>
 8002578:	e038      	b.n	80025ec <measurements_task+0x35c>
 800257a:	bf00      	nop
 800257c:	f3af 8000 	nop.w
 8002580:	cccccccd 	.word	0xcccccccd
 8002584:	4010cccc 	.word	0x4010cccc
 8002588:	00000000 	.word	0x00000000
 800258c:	40affe00 	.word	0x40affe00
 8002590:	20001300 	.word	0x20001300
 8002594:	200012fc 	.word	0x200012fc
 8002598:	20000f54 	.word	0x20000f54
 800259c:	20001398 	.word	0x20001398
 80025a0:	20000fa8 	.word	0x20000fa8
 80025a4:	200013f0 	.word	0x200013f0
 80025a8:	20000e8c 	.word	0x20000e8c
 80025ac:	20001350 	.word	0x20001350
 80025b0:	36902000 	.word	0x36902000
 80025b4:	20001434 	.word	0x20001434
 80025b8:	20001428 	.word	0x20001428
 80025bc:	20000ef0 	.word	0x20000ef0
 80025c0:	20000028 	.word	0x20000028
 80025c4:	20001430 	.word	0x20001430
 80025c8:	080142a4 	.word	0x080142a4
 80025cc:	2000122c 	.word	0x2000122c
 80025d0:	20000030 	.word	0x20000030
 80025d4:	20001420 	.word	0x20001420
 80025d8:	080142a8 	.word	0x080142a8
 80025dc:	2000111c 	.word	0x2000111c
 80025e0:	48000800 	.word	0x48000800
 80025e4:	20001421 	.word	0x20001421
 80025e8:	20001422 	.word	0x20001422
 80025ec:	4ba7      	ldr	r3, [pc, #668]	; (800288c <measurements_task+0x5fc>)
 80025ee:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80025f2:	4ba7      	ldr	r3, [pc, #668]	; (8002890 <measurements_task+0x600>)
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002600:	d82e      	bhi.n	8002660 <measurements_task+0x3d0>
 8002602:	4ba4      	ldr	r3, [pc, #656]	; (8002894 <measurements_task+0x604>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	f083 0301 	eor.w	r3, r3, #1
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d027      	beq.n	8002660 <measurements_task+0x3d0>
				char buffer[100];
				sprintf(buffer,"20\n");
 8002610:	f107 0308 	add.w	r3, r7, #8
 8002614:	49a0      	ldr	r1, [pc, #640]	; (8002898 <measurements_task+0x608>)
 8002616:	4618      	mov	r0, r3
 8002618:	f00c f8e8 	bl	800e7ec <siprintf>
				//HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer), 50);
				HAL_UART_Transmit(&huart3,(uint8_t*)buffer,strlen(buffer), 50);
 800261c:	f107 0308 	add.w	r3, r7, #8
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd fe25 	bl	8000270 <strlen>
 8002626:	4603      	mov	r3, r0
 8002628:	b29a      	uxth	r2, r3
 800262a:	f107 0108 	add.w	r1, r7, #8
 800262e:	2332      	movs	r3, #50	; 0x32
 8002630:	489a      	ldr	r0, [pc, #616]	; (800289c <measurements_task+0x60c>)
 8002632:	f007 fc16 	bl	8009e62 <HAL_UART_Transmit>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002636:	2200      	movs	r2, #0
 8002638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800263c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002640:	f003 fd68 	bl	8006114 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8002644:	2200      	movs	r2, #0
 8002646:	2104      	movs	r1, #4
 8002648:	4895      	ldr	r0, [pc, #596]	; (80028a0 <measurements_task+0x610>)
 800264a:	f003 fd63 	bl	8006114 <HAL_GPIO_WritePin>
				sameValueLow = false;
 800264e:	4b95      	ldr	r3, [pc, #596]	; (80028a4 <measurements_task+0x614>)
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
				sameValueMedium = true;
 8002654:	4b8f      	ldr	r3, [pc, #572]	; (8002894 <measurements_task+0x604>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
				sameValueHigh = false;
 800265a:	4b93      	ldr	r3, [pc, #588]	; (80028a8 <measurements_task+0x618>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
			}

			if (measuredData.batStatus >= voltageThresholdMaximum && !sameValueHigh){
 8002660:	4b8a      	ldr	r3, [pc, #552]	; (800288c <measurements_task+0x5fc>)
 8002662:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002666:	4b8a      	ldr	r3, [pc, #552]	; (8002890 <measurements_task+0x600>)
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002674:	db3b      	blt.n	80026ee <measurements_task+0x45e>
 8002676:	4b8c      	ldr	r3, [pc, #560]	; (80028a8 <measurements_task+0x618>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	f083 0301 	eor.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d034      	beq.n	80026ee <measurements_task+0x45e>
				char buffer[100];
				sprintf(buffer,"30\n");
 8002684:	f107 0308 	add.w	r3, r7, #8
 8002688:	4988      	ldr	r1, [pc, #544]	; (80028ac <measurements_task+0x61c>)
 800268a:	4618      	mov	r0, r3
 800268c:	f00c f8ae 	bl	800e7ec <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer), 50);
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd fdeb 	bl	8000270 <strlen>
 800269a:	4603      	mov	r3, r0
 800269c:	b29a      	uxth	r2, r3
 800269e:	f107 0108 	add.w	r1, r7, #8
 80026a2:	2332      	movs	r3, #50	; 0x32
 80026a4:	4882      	ldr	r0, [pc, #520]	; (80028b0 <measurements_task+0x620>)
 80026a6:	f007 fbdc 	bl	8009e62 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3,(uint8_t*)buffer,strlen(buffer), 50);
 80026aa:	f107 0308 	add.w	r3, r7, #8
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd fdde 	bl	8000270 <strlen>
 80026b4:	4603      	mov	r3, r0
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	f107 0108 	add.w	r1, r7, #8
 80026bc:	2332      	movs	r3, #50	; 0x32
 80026be:	4877      	ldr	r0, [pc, #476]	; (800289c <measurements_task+0x60c>)
 80026c0:	f007 fbcf 	bl	8009e62 <HAL_UART_Transmit>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80026c4:	2201      	movs	r2, #1
 80026c6:	2104      	movs	r1, #4
 80026c8:	4875      	ldr	r0, [pc, #468]	; (80028a0 <measurements_task+0x610>)
 80026ca:	f003 fd23 	bl	8006114 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80026ce:	2200      	movs	r2, #0
 80026d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d8:	f003 fd1c 	bl	8006114 <HAL_GPIO_WritePin>
				sameValueLow = false;
 80026dc:	4b71      	ldr	r3, [pc, #452]	; (80028a4 <measurements_task+0x614>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
				sameValueMedium = false;
 80026e2:	4b6c      	ldr	r3, [pc, #432]	; (8002894 <measurements_task+0x604>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
				sameValueHigh = true;
 80026e8:	4b6f      	ldr	r3, [pc, #444]	; (80028a8 <measurements_task+0x618>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
			}

			if (measuredData.temperature >= 3000 && !highTemp){
 80026ee:	4b67      	ldr	r3, [pc, #412]	; (800288c <measurements_task+0x5fc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80026f6:	4293      	cmp	r3, r2
 80026f8:	dd2d      	ble.n	8002756 <measurements_task+0x4c6>
 80026fa:	4b6e      	ldr	r3, [pc, #440]	; (80028b4 <measurements_task+0x624>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	f083 0301 	eor.w	r3, r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d026      	beq.n	8002756 <measurements_task+0x4c6>
				char buffer[100];
				sprintf(buffer,"40\n");
 8002708:	f107 0308 	add.w	r3, r7, #8
 800270c:	496a      	ldr	r1, [pc, #424]	; (80028b8 <measurements_task+0x628>)
 800270e:	4618      	mov	r0, r3
 8002710:	f00c f86c 	bl	800e7ec <siprintf>
				HAL_UART_Transmit(&huart3,(uint8_t*)buffer,strlen(buffer), 50);
 8002714:	f107 0308 	add.w	r3, r7, #8
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd fda9 	bl	8000270 <strlen>
 800271e:	4603      	mov	r3, r0
 8002720:	b29a      	uxth	r2, r3
 8002722:	f107 0108 	add.w	r1, r7, #8
 8002726:	2332      	movs	r3, #50	; 0x32
 8002728:	485c      	ldr	r0, [pc, #368]	; (800289c <measurements_task+0x60c>)
 800272a:	f007 fb9a 	bl	8009e62 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer), 50);
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd fd9c 	bl	8000270 <strlen>
 8002738:	4603      	mov	r3, r0
 800273a:	b29a      	uxth	r2, r3
 800273c:	f107 0108 	add.w	r1, r7, #8
 8002740:	2332      	movs	r3, #50	; 0x32
 8002742:	485b      	ldr	r0, [pc, #364]	; (80028b0 <measurements_task+0x620>)
 8002744:	f007 fb8d 	bl	8009e62 <HAL_UART_Transmit>
				highTemp = true;
 8002748:	4b5a      	ldr	r3, [pc, #360]	; (80028b4 <measurements_task+0x624>)
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
				lowTemp = false;
 800274e:	4b5b      	ldr	r3, [pc, #364]	; (80028bc <measurements_task+0x62c>)
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
			if (measuredData.temperature >= 3000 && !highTemp){
 8002754:	e025      	b.n	80027a2 <measurements_task+0x512>
			}else if(measuredData.temperature <= 3000 && !lowTemp){
 8002756:	4b4d      	ldr	r3, [pc, #308]	; (800288c <measurements_task+0x5fc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800275e:	4293      	cmp	r3, r2
 8002760:	dc1f      	bgt.n	80027a2 <measurements_task+0x512>
 8002762:	4b56      	ldr	r3, [pc, #344]	; (80028bc <measurements_task+0x62c>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	f083 0301 	eor.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d018      	beq.n	80027a2 <measurements_task+0x512>
				char buffer[100];
				sprintf(buffer,"70\n");
 8002770:	f107 0308 	add.w	r3, r7, #8
 8002774:	4952      	ldr	r1, [pc, #328]	; (80028c0 <measurements_task+0x630>)
 8002776:	4618      	mov	r0, r3
 8002778:	f00c f838 	bl	800e7ec <siprintf>
				HAL_UART_Transmit(&huart3,(uint8_t*)buffer,strlen(buffer), 50);
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	4618      	mov	r0, r3
 8002782:	f7fd fd75 	bl	8000270 <strlen>
 8002786:	4603      	mov	r3, r0
 8002788:	b29a      	uxth	r2, r3
 800278a:	f107 0108 	add.w	r1, r7, #8
 800278e:	2332      	movs	r3, #50	; 0x32
 8002790:	4842      	ldr	r0, [pc, #264]	; (800289c <measurements_task+0x60c>)
 8002792:	f007 fb66 	bl	8009e62 <HAL_UART_Transmit>
				highTemp = false;
 8002796:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <measurements_task+0x624>)
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
				lowTemp = true;
 800279c:	4b47      	ldr	r3, [pc, #284]	; (80028bc <measurements_task+0x62c>)
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
			}

			if (FSR_reading >= 700.0 && !helmetOnFlag){
 80027a2:	4b48      	ldr	r3, [pc, #288]	; (80028c4 <measurements_task+0x634>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80027aa:	db20      	blt.n	80027ee <measurements_task+0x55e>
 80027ac:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <measurements_task+0x638>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	f083 0301 	eor.w	r3, r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d019      	beq.n	80027ee <measurements_task+0x55e>
				char buffer[100];
				sprintf(buffer, "50\n");
 80027ba:	f107 0308 	add.w	r3, r7, #8
 80027be:	4943      	ldr	r1, [pc, #268]	; (80028cc <measurements_task+0x63c>)
 80027c0:	4618      	mov	r0, r3
 80027c2:	f00c f813 	bl	800e7ec <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)buffer,strlen(buffer), 50);
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd fd50 	bl	8000270 <strlen>
 80027d0:	4603      	mov	r3, r0
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	f107 0108 	add.w	r1, r7, #8
 80027d8:	2332      	movs	r3, #50	; 0x32
 80027da:	4830      	ldr	r0, [pc, #192]	; (800289c <measurements_task+0x60c>)
 80027dc:	f007 fb41 	bl	8009e62 <HAL_UART_Transmit>
				helmetOnFlag = true;
 80027e0:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <measurements_task+0x638>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
				helmetOffFlag = false;
 80027e6:	4b3a      	ldr	r3, [pc, #232]	; (80028d0 <measurements_task+0x640>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
			if (FSR_reading >= 700.0 && !helmetOnFlag){
 80027ec:	e024      	b.n	8002838 <measurements_task+0x5a8>
			}else if (FSR_reading <= 700.0 && !helmetOffFlag){
 80027ee:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <measurements_task+0x634>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80027f6:	dc1f      	bgt.n	8002838 <measurements_task+0x5a8>
 80027f8:	4b35      	ldr	r3, [pc, #212]	; (80028d0 <measurements_task+0x640>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	f083 0301 	eor.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d018      	beq.n	8002838 <measurements_task+0x5a8>
				char buffer[100];
				sprintf(buffer, "60\n");
 8002806:	f107 0308 	add.w	r3, r7, #8
 800280a:	4932      	ldr	r1, [pc, #200]	; (80028d4 <measurements_task+0x644>)
 800280c:	4618      	mov	r0, r3
 800280e:	f00b ffed 	bl	800e7ec <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)buffer,strlen(buffer), 50);
 8002812:	f107 0308 	add.w	r3, r7, #8
 8002816:	4618      	mov	r0, r3
 8002818:	f7fd fd2a 	bl	8000270 <strlen>
 800281c:	4603      	mov	r3, r0
 800281e:	b29a      	uxth	r2, r3
 8002820:	f107 0108 	add.w	r1, r7, #8
 8002824:	2332      	movs	r3, #50	; 0x32
 8002826:	481d      	ldr	r0, [pc, #116]	; (800289c <measurements_task+0x60c>)
 8002828:	f007 fb1b 	bl	8009e62 <HAL_UART_Transmit>
				helmetOnFlag = false;
 800282c:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <measurements_task+0x638>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
			    helmetOffFlag = true;
 8002832:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <measurements_task+0x640>)
 8002834:	2201      	movs	r2, #1
 8002836:	701a      	strb	r2, [r3, #0]
			}

			unsigned long currentTime =  xTaskGetTickCount();
 8002838:	f009 ff02 	bl	800c640 <xTaskGetTickCount>
 800283c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

			if( currentTime - lastSendTime >= sendInterval){
 8002840:	4b25      	ldr	r3, [pc, #148]	; (80028d8 <measurements_task+0x648>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002848:	1ad2      	subs	r2, r2, r3
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <measurements_task+0x64c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d311      	bcc.n	8002876 <measurements_task+0x5e6>
			if(xQueueSend(Queue_Handler,&measuredData,portMAX_DELAY) == pdPASS){
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <measurements_task+0x650>)
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	2300      	movs	r3, #0
 8002858:	f04f 32ff 	mov.w	r2, #4294967295
 800285c:	490b      	ldr	r1, [pc, #44]	; (800288c <measurements_task+0x5fc>)
 800285e:	f008 ff55 	bl	800b70c <xQueueGenericSend>
 8002862:	4603      	mov	r3, r0
 8002864:	2b01      	cmp	r3, #1
 8002866:	d102      	bne.n	800286e <measurements_task+0x5de>
				flag = 1;
 8002868:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <measurements_task+0x654>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]
			}
			lastSendTime = currentTime;
 800286e:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <measurements_task+0x648>)
 8002870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002874:	6013      	str	r3, [r2, #0]
			}
			watermark = uxTaskGetStackHighWaterMark(NULL);
 8002876:	2000      	movs	r0, #0
 8002878:	f00a f9b8 	bl	800cbec <uxTaskGetStackHighWaterMark>
 800287c:	4603      	mov	r3, r0
 800287e:	4a1a      	ldr	r2, [pc, #104]	; (80028e8 <measurements_task+0x658>)
 8002880:	6013      	str	r3, [r2, #0]
			vTaskDelay(pdMS_TO_TICKS(10));
 8002882:	200a      	movs	r0, #10
 8002884:	f009 fd94 	bl	800c3b0 <vTaskDelay>
		{
 8002888:	e508      	b.n	800229c <measurements_task+0xc>
 800288a:	bf00      	nop
 800288c:	20001350 	.word	0x20001350
 8002890:	2000002c 	.word	0x2000002c
 8002894:	20001421 	.word	0x20001421
 8002898:	080142ac 	.word	0x080142ac
 800289c:	2000122c 	.word	0x2000122c
 80028a0:	48000800 	.word	0x48000800
 80028a4:	20001420 	.word	0x20001420
 80028a8:	20001422 	.word	0x20001422
 80028ac:	080142b0 	.word	0x080142b0
 80028b0:	2000111c 	.word	0x2000111c
 80028b4:	20001425 	.word	0x20001425
 80028b8:	080142b4 	.word	0x080142b4
 80028bc:	20001426 	.word	0x20001426
 80028c0:	080142b8 	.word	0x080142b8
 80028c4:	20001434 	.word	0x20001434
 80028c8:	20001423 	.word	0x20001423
 80028cc:	080142bc 	.word	0x080142bc
 80028d0:	20001424 	.word	0x20001424
 80028d4:	080142c0 	.word	0x080142c0
 80028d8:	2000142c 	.word	0x2000142c
 80028dc:	20000034 	.word	0x20000034
 80028e0:	20001444 	.word	0x20001444
 80028e4:	20001304 	.word	0x20001304
 80028e8:	20001394 	.word	0x20001394

080028ec <sender_task>:
		}
	}

	void sender_task(void *pvParameters){
 80028ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028f0:	b0ad      	sub	sp, #180	; 0xb4
 80028f2:	af0c      	add	r7, sp, #48	; 0x30
 80028f4:	6178      	str	r0, [r7, #20]

		while(1){
			if(xQueueReceive(Queue_Handler, &sendData, portMAX_DELAY) == pdPASS){
 80028f6:	4b2f      	ldr	r3, [pc, #188]	; (80029b4 <sender_task+0xc8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f04f 32ff 	mov.w	r2, #4294967295
 80028fe:	492e      	ldr	r1, [pc, #184]	; (80029b8 <sender_task+0xcc>)
 8002900:	4618      	mov	r0, r3
 8002902:	f009 f88f 	bl	800ba24 <xQueueReceive>
 8002906:	4603      	mov	r3, r0
 8002908:	2b01      	cmp	r3, #1
 800290a:	d1f4      	bne.n	80028f6 <sender_task+0xa>
				char buffer[100];
				sprintf(buffer,"%d %d %f %f %f %f %f %f\n", sendData.humidity, sendData.temperature,sendData.altitude,sendData.latitude,sendData.longitude,sendData.lpg,sendData.smoke,sendData.co);
 800290c:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <sender_task+0xcc>)
 800290e:	685e      	ldr	r6, [r3, #4]
 8002910:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <sender_task+0xcc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <sender_task+0xcc>)
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd fe14 	bl	8000548 <__aeabi_f2d>
 8002920:	4680      	mov	r8, r0
 8002922:	4689      	mov	r9, r1
 8002924:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <sender_task+0xcc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe0d 	bl	8000548 <__aeabi_f2d>
 800292e:	4682      	mov	sl, r0
 8002930:	468b      	mov	fp, r1
 8002932:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <sender_task+0xcc>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fe06 	bl	8000548 <__aeabi_f2d>
 800293c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002940:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <sender_task+0xcc>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fdff 	bl	8000548 <__aeabi_f2d>
 800294a:	e9c7 0100 	strd	r0, r1, [r7]
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <sender_task+0xcc>)
 8002950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002952:	4618      	mov	r0, r3
 8002954:	f7fd fdf8 	bl	8000548 <__aeabi_f2d>
 8002958:	4604      	mov	r4, r0
 800295a:	460d      	mov	r5, r1
 800295c:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <sender_task+0xcc>)
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fdf1 	bl	8000548 <__aeabi_f2d>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	f107 001c 	add.w	r0, r7, #28
 800296e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002972:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002976:	ed97 7b00 	vldr	d7, [r7]
 800297a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800297e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002982:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002986:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800298a:	e9cd 8900 	strd	r8, r9, [sp]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4632      	mov	r2, r6
 8002992:	490a      	ldr	r1, [pc, #40]	; (80029bc <sender_task+0xd0>)
 8002994:	f00b ff2a 	bl	800e7ec <siprintf>
				//xSemaphoreTake(AlarmMutex_Handler,portMAX_DELAY);
				HAL_UART_Transmit(&huart3,(uint8_t*)buffer, strlen(buffer), 50);
 8002998:	f107 031c 	add.w	r3, r7, #28
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fc67 	bl	8000270 <strlen>
 80029a2:	4603      	mov	r3, r0
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	f107 011c 	add.w	r1, r7, #28
 80029aa:	2332      	movs	r3, #50	; 0x32
 80029ac:	4804      	ldr	r0, [pc, #16]	; (80029c0 <sender_task+0xd4>)
 80029ae:	f007 fa58 	bl	8009e62 <HAL_UART_Transmit>
			if(xQueueReceive(Queue_Handler, &sendData, portMAX_DELAY) == pdPASS){
 80029b2:	e7a0      	b.n	80028f6 <sender_task+0xa>
 80029b4:	20001444 	.word	0x20001444
 80029b8:	20001310 	.word	0x20001310
 80029bc:	080142c4 	.word	0x080142c4
 80029c0:	2000122c 	.word	0x2000122c
 80029c4:	00000000 	.word	0x00000000

080029c8 <LED_task>:
			//vTaskDelay(pdMS_TO_TICKS(0.5));
		}
	}


	void LED_task(void *pvParameters){
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

		while(1){
			if(xSemaphoreTake(PWM_Sem_Handler,portMAX_DELAY) == pdTRUE){
 80029d0:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <LED_task+0xd0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f04f 31ff 	mov.w	r1, #4294967295
 80029d8:	4618      	mov	r0, r3
 80029da:	f009 f903 	bl	800bbe4 <xQueueSemaphoreTake>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d1f5      	bne.n	80029d0 <LED_task+0x8>

				if (state < 2){
 80029e4:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <LED_task+0xd4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	dc05      	bgt.n	80029f8 <LED_task+0x30>
							state++;
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <LED_task+0xd4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3301      	adds	r3, #1
 80029f2:	4a2a      	ldr	r2, [pc, #168]	; (8002a9c <LED_task+0xd4>)
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e002      	b.n	80029fe <LED_task+0x36>
						}else state = 0;
 80029f8:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <LED_task+0xd4>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
					switch(state){
 80029fe:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <LED_task+0xd4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d028      	beq.n	8002a58 <LED_task+0x90>
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	dce2      	bgt.n	80029d0 <LED_task+0x8>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <LED_task+0x4c>
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d009      	beq.n	8002a26 <LED_task+0x5e>
 8002a12:	e03a      	b.n	8002a8a <LED_task+0xc2>
							  case 0:
								  cmp_reg = 0;
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <LED_task+0xd8>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
								  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,cmp_reg);
 8002a1a:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <LED_task+0xdc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a20      	ldr	r2, [pc, #128]	; (8002aa0 <LED_task+0xd8>)
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34
								  break;
 8002a24:	e031      	b.n	8002a8a <LED_task+0xc2>
							  case 1:
								  cmp_reg = 0.1 * htim3.Init.Period;
 8002a26:	4b1f      	ldr	r3, [pc, #124]	; (8002aa4 <LED_task+0xdc>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fd6a 	bl	8000504 <__aeabi_ui2d>
 8002a30:	a317      	add	r3, pc, #92	; (adr r3, 8002a90 <LED_task+0xc8>)
 8002a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a36:	f7fd fddf 	bl	80005f8 <__aeabi_dmul>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	f7fe f8b1 	bl	8000ba8 <__aeabi_d2uiz>
 8002a46:	4603      	mov	r3, r0
 8002a48:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <LED_task+0xd8>)
 8002a4a:	6013      	str	r3, [r2, #0]
								  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,cmp_reg);
 8002a4c:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <LED_task+0xdc>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <LED_task+0xd8>)
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	635a      	str	r2, [r3, #52]	; 0x34
								  break;
 8002a56:	e018      	b.n	8002a8a <LED_task+0xc2>
							  case 2:
								  cmp_reg = 0.25 * htim3.Init.Period;
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <LED_task+0xdc>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fd fd51 	bl	8000504 <__aeabi_ui2d>
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <LED_task+0xe0>)
 8002a68:	f7fd fdc6 	bl	80005f8 <__aeabi_dmul>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	f7fe f898 	bl	8000ba8 <__aeabi_d2uiz>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <LED_task+0xd8>)
 8002a7c:	6013      	str	r3, [r2, #0]
								  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,cmp_reg);
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <LED_task+0xdc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <LED_task+0xd8>)
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	635a      	str	r2, [r3, #52]	; 0x34
								  break;
 8002a88:	bf00      	nop
			if(xSemaphoreTake(PWM_Sem_Handler,portMAX_DELAY) == pdTRUE){
 8002a8a:	e7a1      	b.n	80029d0 <LED_task+0x8>
 8002a8c:	f3af 8000 	nop.w
 8002a90:	9999999a 	.word	0x9999999a
 8002a94:	3fb99999 	.word	0x3fb99999
 8002a98:	20001448 	.word	0x20001448
 8002a9c:	20001308 	.word	0x20001308
 8002aa0:	20001390 	.word	0x20001390
 8002aa4:	20001048 	.word	0x20001048
 8002aa8:	3fd00000 	.word	0x3fd00000

08002aac <HAL_GPIO_EXTI_Callback>:
					}
		}
	}
	}

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == GPIO_PIN_4){
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	2b10      	cmp	r3, #16
 8002aba:	d117      	bne.n	8002aec <HAL_GPIO_EXTI_Callback+0x40>
		  BaseType_t task_woken = pdFALSE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
		  xSemaphoreGiveFromISR(PWM_Sem_Handler,&task_woken);
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <HAL_GPIO_EXTI_Callback+0x48>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f107 020c 	add.w	r2, r7, #12
 8002ac8:	4611      	mov	r1, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f008 ff1c 	bl	800b908 <xQueueGiveFromISR>

		  if(task_woken){
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_GPIO_EXTI_Callback+0x40>
			  portYIELD_FROM_ISR(task_woken);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_GPIO_EXTI_Callback+0x40>
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	f3bf 8f6f 	isb	sy

		  }
		}
	  }
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20001448 	.word	0x20001448
 8002af8:	e000ed04 	.word	0xe000ed04

08002afc <square>:

	/* ------- HELPING FUNCTIONS ------- */
	float square(float number){
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	ed87 0a01 	vstr	s0, [r7, #4]
		return number*number;
 8002b06:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
	}
 8002b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b2e:	f001 f9eb 	bl	8003f08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40001000 	.word	0x40001000

08002b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b44:	b672      	cpsid	i
}
 8002b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b48:	e7fe      	b.n	8002b48 <Error_Handler+0x8>

08002b4a <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b088      	sub	sp, #32
 8002b4e:	af04      	add	r7, sp, #16
 8002b50:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002b52:	2364      	movs	r3, #100	; 0x64
 8002b54:	9302      	str	r3, [sp, #8]
 8002b56:	2301      	movs	r3, #1
 8002b58:	9301      	str	r3, [sp, #4]
 8002b5a:	f107 030f 	add.w	r3, r7, #15
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	2301      	movs	r3, #1
 8002b62:	2275      	movs	r2, #117	; 0x75
 8002b64:	21d0      	movs	r1, #208	; 0xd0
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f003 fec2 	bl	80068f0 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b68      	cmp	r3, #104	; 0x68
 8002b70:	d13d      	bne.n	8002bee <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002b76:	2364      	movs	r3, #100	; 0x64
 8002b78:	9302      	str	r3, [sp, #8]
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	f107 030e 	add.w	r3, r7, #14
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2301      	movs	r3, #1
 8002b86:	226b      	movs	r2, #107	; 0x6b
 8002b88:	21d0      	movs	r1, #208	; 0xd0
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f003 fd9c 	bl	80066c8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002b90:	2307      	movs	r3, #7
 8002b92:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002b94:	2364      	movs	r3, #100	; 0x64
 8002b96:	9302      	str	r3, [sp, #8]
 8002b98:	2301      	movs	r3, #1
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	f107 030e 	add.w	r3, r7, #14
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	2219      	movs	r2, #25
 8002ba6:	21d0      	movs	r1, #208	; 0xd0
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f003 fd8d 	bl	80066c8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002bb2:	2364      	movs	r3, #100	; 0x64
 8002bb4:	9302      	str	r3, [sp, #8]
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	f107 030e 	add.w	r3, r7, #14
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	221c      	movs	r2, #28
 8002bc4:	21d0      	movs	r1, #208	; 0xd0
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f003 fd7e 	bl	80066c8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002bd0:	2364      	movs	r3, #100	; 0x64
 8002bd2:	9302      	str	r3, [sp, #8]
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	9301      	str	r3, [sp, #4]
 8002bd8:	f107 030e 	add.w	r3, r7, #14
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	2301      	movs	r3, #1
 8002be0:	221b      	movs	r2, #27
 8002be2:	21d0      	movs	r1, #208	; 0xd0
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f003 fd6f 	bl	80066c8 <HAL_I2C_Mem_Write>
        return 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e000      	b.n	8002bf0 <MPU6050_Init+0xa6>
    }
    return 1;
 8002bee:	2301      	movs	r3, #1
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bfc:	b094      	sub	sp, #80	; 0x50
 8002bfe:	af04      	add	r7, sp, #16
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002c04:	2364      	movs	r3, #100	; 0x64
 8002c06:	9302      	str	r3, [sp, #8]
 8002c08:	230e      	movs	r3, #14
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2301      	movs	r3, #1
 8002c14:	223b      	movs	r2, #59	; 0x3b
 8002c16:	21d0      	movs	r1, #208	; 0xd0
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f003 fe69 	bl	80068f0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002c1e:	7a3b      	ldrb	r3, [r7, #8]
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	b21a      	sxth	r2, r3
 8002c24:	7a7b      	ldrb	r3, [r7, #9]
 8002c26:	b21b      	sxth	r3, r3
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	b21a      	sxth	r2, r3
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002c30:	7abb      	ldrb	r3, [r7, #10]
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	b21a      	sxth	r2, r3
 8002c36:	7afb      	ldrb	r3, [r7, #11]
 8002c38:	b21b      	sxth	r3, r3
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	b21a      	sxth	r2, r3
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002c42:	7b3b      	ldrb	r3, [r7, #12]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	b21a      	sxth	r2, r3
 8002c48:	7b7b      	ldrb	r3, [r7, #13]
 8002c4a:	b21b      	sxth	r3, r3
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	b21a      	sxth	r2, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002c54:	7bbb      	ldrb	r3, [r7, #14]
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	b21a      	sxth	r2, r3
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	b21b      	sxth	r3, r3
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002c62:	7c3b      	ldrb	r3, [r7, #16]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	b21a      	sxth	r2, r3
 8002c68:	7c7b      	ldrb	r3, [r7, #17]
 8002c6a:	b21b      	sxth	r3, r3
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	b21a      	sxth	r2, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002c74:	7cbb      	ldrb	r3, [r7, #18]
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	b21a      	sxth	r2, r3
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	b21b      	sxth	r3, r3
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	b21a      	sxth	r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8002c86:	7d3b      	ldrb	r3, [r7, #20]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	b21a      	sxth	r2, r3
 8002c8c:	7d7b      	ldrb	r3, [r7, #21]
 8002c8e:	b21b      	sxth	r3, r3
 8002c90:	4313      	orrs	r3, r2
 8002c92:	b21a      	sxth	r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fc40 	bl	8000524 <__aeabi_i2d>
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	4bbd      	ldr	r3, [pc, #756]	; (8002fa0 <MPU6050_Read_All+0x3a8>)
 8002caa:	f7fd fdcf 	bl	800084c <__aeabi_ddiv>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	6839      	ldr	r1, [r7, #0]
 8002cb4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fc30 	bl	8000524 <__aeabi_i2d>
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	4bb5      	ldr	r3, [pc, #724]	; (8002fa0 <MPU6050_Read_All+0x3a8>)
 8002cca:	f7fd fdbf 	bl	800084c <__aeabi_ddiv>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	6839      	ldr	r1, [r7, #0]
 8002cd4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fd fc20 	bl	8000524 <__aeabi_i2d>
 8002ce4:	a3a8      	add	r3, pc, #672	; (adr r3, 8002f88 <MPU6050_Read_All+0x390>)
 8002ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cea:	f7fd fdaf 	bl	800084c <__aeabi_ddiv>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	6839      	ldr	r1, [r7, #0]
 8002cf4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002cf8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002cfc:	ee07 3a90 	vmov	s15, r3
 8002d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d04:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8002fa4 <MPU6050_Read_All+0x3ac>
 8002d08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d0c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002fa8 <MPU6050_Read_All+0x3b0>
 8002d10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fbff 	bl	8000524 <__aeabi_i2d>
 8002d26:	a39a      	add	r3, pc, #616	; (adr r3, 8002f90 <MPU6050_Read_All+0x398>)
 8002d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2c:	f7fd fd8e 	bl	800084c <__aeabi_ddiv>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	6839      	ldr	r1, [r7, #0]
 8002d36:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd fbef 	bl	8000524 <__aeabi_i2d>
 8002d46:	a392      	add	r3, pc, #584	; (adr r3, 8002f90 <MPU6050_Read_All+0x398>)
 8002d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4c:	f7fd fd7e 	bl	800084c <__aeabi_ddiv>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	6839      	ldr	r1, [r7, #0]
 8002d56:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd fbdf 	bl	8000524 <__aeabi_i2d>
 8002d66:	a38a      	add	r3, pc, #552	; (adr r3, 8002f90 <MPU6050_Read_All+0x398>)
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	f7fd fd6e 	bl	800084c <__aeabi_ddiv>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	6839      	ldr	r1, [r7, #0]
 8002d76:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002d7a:	f001 f8d9 	bl	8003f30 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	4b8a      	ldr	r3, [pc, #552]	; (8002fac <MPU6050_Read_All+0x3b4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fbbc 	bl	8000504 <__aeabi_ui2d>
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	4b87      	ldr	r3, [pc, #540]	; (8002fb0 <MPU6050_Read_All+0x3b8>)
 8002d92:	f7fd fd5b 	bl	800084c <__aeabi_ddiv>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002d9e:	f001 f8c7 	bl	8003f30 <HAL_GetTick>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4a81      	ldr	r2, [pc, #516]	; (8002fac <MPU6050_Read_All+0x3b4>)
 8002da6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dae:	461a      	mov	r2, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db6:	fb03 f202 	mul.w	r2, r3, r2
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fba8 	bl	8000524 <__aeabi_i2d>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	ec43 2b10 	vmov	d0, r2, r3
 8002ddc:	f00f fefe 	bl	8012bdc <sqrt>
 8002de0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002df0:	f7fd fe6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11f      	bne.n	8002e3a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd fb8f 	bl	8000524 <__aeabi_i2d>
 8002e06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e0a:	f7fd fd1f 	bl	800084c <__aeabi_ddiv>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	ec43 2b17 	vmov	d7, r2, r3
 8002e16:	eeb0 0a47 	vmov.f32	s0, s14
 8002e1a:	eef0 0a67 	vmov.f32	s1, s15
 8002e1e:	f00f ff0b 	bl	8012c38 <atan>
 8002e22:	ec51 0b10 	vmov	r0, r1, d0
 8002e26:	a35c      	add	r3, pc, #368	; (adr r3, 8002f98 <MPU6050_Read_All+0x3a0>)
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f7fd fbe4 	bl	80005f8 <__aeabi_dmul>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002e38:	e005      	b.n	8002e46 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e4c:	425b      	negs	r3, r3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd fb68 	bl	8000524 <__aeabi_i2d>
 8002e54:	4682      	mov	sl, r0
 8002e56:	468b      	mov	fp, r1
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fb60 	bl	8000524 <__aeabi_i2d>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	ec43 2b11 	vmov	d1, r2, r3
 8002e6c:	ec4b ab10 	vmov	d0, sl, fp
 8002e70:	f00f fe02 	bl	8012a78 <atan2>
 8002e74:	ec51 0b10 	vmov	r0, r1, d0
 8002e78:	a347      	add	r3, pc, #284	; (adr r3, 8002f98 <MPU6050_Read_All+0x3a0>)
 8002e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7e:	f7fd fbbb 	bl	80005f8 <__aeabi_dmul>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	4b49      	ldr	r3, [pc, #292]	; (8002fb4 <MPU6050_Read_All+0x3bc>)
 8002e90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e94:	f7fd fe22 	bl	8000adc <__aeabi_dcmplt>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <MPU6050_Read_All+0x2bc>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <MPU6050_Read_All+0x3c0>)
 8002eaa:	f7fd fe35 	bl	8000b18 <__aeabi_dcmpgt>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d114      	bne.n	8002ede <MPU6050_Read_All+0x2e6>
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	4b3f      	ldr	r3, [pc, #252]	; (8002fb8 <MPU6050_Read_All+0x3c0>)
 8002eba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ebe:	f7fd fe2b 	bl	8000b18 <__aeabi_dcmpgt>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d015      	beq.n	8002ef4 <MPU6050_Read_All+0x2fc>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <MPU6050_Read_All+0x3bc>)
 8002ed4:	f7fd fe02 	bl	8000adc <__aeabi_dcmplt>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8002ede:	4937      	ldr	r1, [pc, #220]	; (8002fbc <MPU6050_Read_All+0x3c4>)
 8002ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ee4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002ee8:	6839      	ldr	r1, [r7, #0]
 8002eea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eee:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002ef2:	e014      	b.n	8002f1e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002efa:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002efe:	eeb0 1a47 	vmov.f32	s2, s14
 8002f02:	eef0 1a67 	vmov.f32	s3, s15
 8002f06:	ed97 0b06 	vldr	d0, [r7, #24]
 8002f0a:	482c      	ldr	r0, [pc, #176]	; (8002fbc <MPU6050_Read_All+0x3c4>)
 8002f0c:	f000 f85a 	bl	8002fc4 <Kalman_getAngle>
 8002f10:	eeb0 7a40 	vmov.f32	s14, s0
 8002f14:	eef0 7a60 	vmov.f32	s15, s1
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002f24:	4690      	mov	r8, r2
 8002f26:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <MPU6050_Read_All+0x3c0>)
 8002f30:	4640      	mov	r0, r8
 8002f32:	4649      	mov	r1, r9
 8002f34:	f7fd fdf0 	bl	8000b18 <__aeabi_dcmpgt>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002f44:	4614      	mov	r4, r2
 8002f46:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002f56:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002f5a:	eeb0 1a47 	vmov.f32	s2, s14
 8002f5e:	eef0 1a67 	vmov.f32	s3, s15
 8002f62:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002f66:	4816      	ldr	r0, [pc, #88]	; (8002fc0 <MPU6050_Read_All+0x3c8>)
 8002f68:	f000 f82c 	bl	8002fc4 <Kalman_getAngle>
 8002f6c:	eeb0 7a40 	vmov.f32	s14, s0
 8002f70:	eef0 7a60 	vmov.f32	s15, s1
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8002f7a:	bf00      	nop
 8002f7c:	3740      	adds	r7, #64	; 0x40
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f84:	f3af 8000 	nop.w
 8002f88:	00000000 	.word	0x00000000
 8002f8c:	40cc2900 	.word	0x40cc2900
 8002f90:	00000000 	.word	0x00000000
 8002f94:	40606000 	.word	0x40606000
 8002f98:	1a63c1f8 	.word	0x1a63c1f8
 8002f9c:	404ca5dc 	.word	0x404ca5dc
 8002fa0:	40d00000 	.word	0x40d00000
 8002fa4:	43aa0000 	.word	0x43aa0000
 8002fa8:	42121eb8 	.word	0x42121eb8
 8002fac:	2000144c 	.word	0x2000144c
 8002fb0:	408f4000 	.word	0x408f4000
 8002fb4:	c0568000 	.word	0xc0568000
 8002fb8:	40568000 	.word	0x40568000
 8002fbc:	20000080 	.word	0x20000080
 8002fc0:	20000038 	.word	0x20000038

08002fc4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002fc4:	b5b0      	push	{r4, r5, r7, lr}
 8002fc6:	b096      	sub	sp, #88	; 0x58
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	61f8      	str	r0, [r7, #28]
 8002fcc:	ed87 0b04 	vstr	d0, [r7, #16]
 8002fd0:	ed87 1b02 	vstr	d1, [r7, #8]
 8002fd4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002fde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fe2:	f7fd f951 	bl	8000288 <__aeabi_dsub>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002ff4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ff8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ffc:	f7fd fafc 	bl	80005f8 <__aeabi_dmul>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4620      	mov	r0, r4
 8003006:	4629      	mov	r1, r5
 8003008:	f7fd f940 	bl	800028c <__adddf3>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	69f9      	ldr	r1, [r7, #28]
 8003012:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003026:	f7fd fae7 	bl	80005f8 <__aeabi_dmul>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003038:	f7fd f926 	bl	8000288 <__aeabi_dsub>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800304a:	f7fd f91d 	bl	8000288 <__aeabi_dsub>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f7fd f916 	bl	800028c <__adddf3>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800306c:	f7fd fac4 	bl	80005f8 <__aeabi_dmul>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4620      	mov	r0, r4
 8003076:	4629      	mov	r1, r5
 8003078:	f7fd f908 	bl	800028c <__adddf3>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	69f9      	ldr	r1, [r7, #28]
 8003082:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003092:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003096:	f7fd faaf 	bl	80005f8 <__aeabi_dmul>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4620      	mov	r0, r4
 80030a0:	4629      	mov	r1, r5
 80030a2:	f7fd f8f1 	bl	8000288 <__aeabi_dsub>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	69f9      	ldr	r1, [r7, #28]
 80030ac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80030bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030c0:	f7fd fa9a 	bl	80005f8 <__aeabi_dmul>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4620      	mov	r0, r4
 80030ca:	4629      	mov	r1, r5
 80030cc:	f7fd f8dc 	bl	8000288 <__aeabi_dsub>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	69f9      	ldr	r1, [r7, #28]
 80030d6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80030e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030ea:	f7fd fa85 	bl	80005f8 <__aeabi_dmul>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4620      	mov	r0, r4
 80030f4:	4629      	mov	r1, r5
 80030f6:	f7fd f8c9 	bl	800028c <__adddf3>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	69f9      	ldr	r1, [r7, #28]
 8003100:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003110:	f7fd f8bc 	bl	800028c <__adddf3>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003122:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003126:	f7fd fb91 	bl	800084c <__aeabi_ddiv>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003138:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800313c:	f7fd fb86 	bl	800084c <__aeabi_ddiv>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800314e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003152:	f7fd f899 	bl	8000288 <__aeabi_dsub>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003164:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003168:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800316c:	f7fd fa44 	bl	80005f8 <__aeabi_dmul>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4620      	mov	r0, r4
 8003176:	4629      	mov	r1, r5
 8003178:	f7fd f888 	bl	800028c <__adddf3>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	69f9      	ldr	r1, [r7, #28]
 8003182:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800318c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003190:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003194:	f7fd fa30 	bl	80005f8 <__aeabi_dmul>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4620      	mov	r0, r4
 800319e:	4629      	mov	r1, r5
 80031a0:	f7fd f874 	bl	800028c <__adddf3>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	69f9      	ldr	r1, [r7, #28]
 80031aa:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80031b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80031be:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80031c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031d0:	f7fd fa12 	bl	80005f8 <__aeabi_dmul>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4620      	mov	r0, r4
 80031da:	4629      	mov	r1, r5
 80031dc:	f7fd f854 	bl	8000288 <__aeabi_dsub>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	69f9      	ldr	r1, [r7, #28]
 80031e6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80031f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031f8:	f7fd f9fe 	bl	80005f8 <__aeabi_dmul>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4620      	mov	r0, r4
 8003202:	4629      	mov	r1, r5
 8003204:	f7fd f840 	bl	8000288 <__aeabi_dsub>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	69f9      	ldr	r1, [r7, #28]
 800320e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003218:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800321c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003220:	f7fd f9ea 	bl	80005f8 <__aeabi_dmul>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4620      	mov	r0, r4
 800322a:	4629      	mov	r1, r5
 800322c:	f7fd f82c 	bl	8000288 <__aeabi_dsub>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	69f9      	ldr	r1, [r7, #28]
 8003236:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003240:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003244:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003248:	f7fd f9d6 	bl	80005f8 <__aeabi_dmul>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4620      	mov	r0, r4
 8003252:	4629      	mov	r1, r5
 8003254:	f7fd f818 	bl	8000288 <__aeabi_dsub>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	69f9      	ldr	r1, [r7, #28]
 800325e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003268:	ec43 2b17 	vmov	d7, r2, r3
};
 800326c:	eeb0 0a47 	vmov.f32	s0, s14
 8003270:	eef0 0a67 	vmov.f32	s1, s15
 8003274:	3758      	adds	r7, #88	; 0x58
 8003276:	46bd      	mov	sp, r7
 8003278:	bdb0      	pop	{r4, r5, r7, pc}

0800327a <checkCRC>:
  return res == HAL_OK;
}


static uint32_t checkCRC(uint16_t value, uint8_t expected)
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	460a      	mov	r2, r1
 8003284:	80fb      	strh	r3, [r7, #6]
 8003286:	4613      	mov	r3, r2
 8003288:	717b      	strb	r3, [r7, #5]
	uint8_t data[2] = {value >> 8, value & 0xFF};
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	b29b      	uxth	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	723b      	strb	r3, [r7, #8]
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	727b      	strb	r3, [r7, #9]
	uint8_t crc = 0xFF;
 800329a:	23ff      	movs	r3, #255	; 0xff
 800329c:	73fb      	strb	r3, [r7, #15]
	uint8_t poly = 0x31;
 800329e:	2331      	movs	r3, #49	; 0x31
 80032a0:	733b      	strb	r3, [r7, #12]

	for (uint8_t indi = 0; indi < 2; indi++) {
 80032a2:	2300      	movs	r3, #0
 80032a4:	73bb      	strb	r3, [r7, #14]
 80032a6:	e023      	b.n	80032f0 <checkCRC+0x76>
		crc ^= data[indi];
 80032a8:	7bbb      	ldrb	r3, [r7, #14]
 80032aa:	3310      	adds	r3, #16
 80032ac:	443b      	add	r3, r7
 80032ae:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	4053      	eors	r3, r2
 80032b6:	73fb      	strb	r3, [r7, #15]
		for (uint8_t indj = 0; indj < 8; indj++) {
 80032b8:	2300      	movs	r3, #0
 80032ba:	737b      	strb	r3, [r7, #13]
 80032bc:	e012      	b.n	80032e4 <checkCRC+0x6a>
			if (crc & 0x80) {
 80032be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	da08      	bge.n	80032d8 <checkCRC+0x5e>
				crc = (uint8_t)((crc << 1) ^ poly);
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	b25a      	sxtb	r2, r3
 80032cc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80032d0:	4053      	eors	r3, r2
 80032d2:	b25b      	sxtb	r3, r3
 80032d4:	73fb      	strb	r3, [r7, #15]
 80032d6:	e002      	b.n	80032de <checkCRC+0x64>
			} else {
				crc <<= 1;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
		for (uint8_t indj = 0; indj < 8; indj++) {
 80032de:	7b7b      	ldrb	r3, [r7, #13]
 80032e0:	3301      	adds	r3, #1
 80032e2:	737b      	strb	r3, [r7, #13]
 80032e4:	7b7b      	ldrb	r3, [r7, #13]
 80032e6:	2b07      	cmp	r3, #7
 80032e8:	d9e9      	bls.n	80032be <checkCRC+0x44>
	for (uint8_t indi = 0; indi < 2; indi++) {
 80032ea:	7bbb      	ldrb	r3, [r7, #14]
 80032ec:	3301      	adds	r3, #1
 80032ee:	73bb      	strb	r3, [r7, #14]
 80032f0:	7bbb      	ldrb	r3, [r7, #14]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d9d8      	bls.n	80032a8 <checkCRC+0x2e>
			}
		}
	}

	if (expected ^ crc)	{
 80032f6:	797a      	ldrb	r2, [r7, #5]
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d001      	beq.n	8003302 <checkCRC+0x88>
    return 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	e000      	b.n	8003304 <checkCRC+0x8a>
	}
  return 1;
 8003302:	2301      	movs	r3, #1
}
 8003304:	4618      	mov	r0, r3
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <_read_values>:

static uint32_t _read_values(uint8_t* data, int32_t* out_temp, int32_t* out_hum)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  // Check CRC
  uint32_t raw_hum = data[0] << 8 | data[1];
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	3201      	adds	r2, #1
 8003326:	7812      	ldrb	r2, [r2, #0]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]
  uint32_t raw_temp = data[3] << 8 | data[4];
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3303      	adds	r3, #3
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	3204      	adds	r2, #4
 8003338:	7812      	ldrb	r2, [r2, #0]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]

  if (!checkCRC(raw_hum, data[2])) {
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3302      	adds	r3, #2
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f7ff ff95 	bl	800327a <checkCRC>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <_read_values+0x4a>
    return 0;
 8003356:	2300      	movs	r3, #0
 8003358:	e02e      	b.n	80033b8 <_read_values+0xa8>
  }
  if (!checkCRC(raw_temp, data[5])) {
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3305      	adds	r3, #5
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f7ff ff87 	bl	800327a <checkCRC>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <_read_values+0x66>
    return 0;
 8003372:	2300      	movs	r3, #0
 8003374:	e020      	b.n	80033b8 <_read_values+0xa8>
  }

  // Convert values
  if (out_hum) {
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <_read_values+0x82>
    *out_hum = raw_hum * 100 / 65535;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2264      	movs	r2, #100	; 0x64
 8003380:	fb02 f303 	mul.w	r3, r2, r3
 8003384:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <_read_values+0xb0>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	0bdb      	lsrs	r3, r3, #15
 800338c:	461a      	mov	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	601a      	str	r2, [r3, #0]
  }
  if (out_temp) {
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00e      	beq.n	80033b6 <_read_values+0xa6>
    *out_temp = raw_temp * 17500 / 65535 - 4500;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f244 425c 	movw	r2, #17500	; 0x445c
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <_read_values+0xb0>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	0bdb      	lsrs	r3, r3, #15
 80033aa:	f5a3 538c 	sub.w	r3, r3, #4480	; 0x1180
 80033ae:	3b14      	subs	r3, #20
 80033b0:	461a      	mov	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	601a      	str	r2, [r3, #0]
  }

  return 1;
 80033b6:	2301      	movs	r3, #1
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	80008001 	.word	0x80008001

080033c4 <_perform_measurements>:

static uint32_t _perform_measurements(I2C_HandleTypeDef *hi2c, uint16_t command, int32_t* out_temp, int32_t* out_hum)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	460b      	mov	r3, r1
 80033d2:	817b      	strh	r3, [r7, #10]
  uint8_t result[6];

  uint32_t res = HAL_I2C_Master_Transmit(hi2c, SHTC3_ADDRESS_WRITE, (uint8_t*)&command, 2, 100);
 80033d4:	f107 020a 	add.w	r2, r7, #10
 80033d8:	2364      	movs	r3, #100	; 0x64
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	2302      	movs	r3, #2
 80033de:	21e0      	movs	r1, #224	; 0xe0
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f002 ff63 	bl	80062ac <HAL_I2C_Master_Transmit>
 80033e6:	4603      	mov	r3, r0
 80033e8:	61fb      	str	r3, [r7, #28]
  if (res != HAL_OK) {
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <_perform_measurements+0x30>
    return 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e017      	b.n	8003424 <_perform_measurements+0x60>
  }

  res = HAL_I2C_Master_Receive(hi2c, SHTC3_ADDRESS_READ, result, 6, 100);
 80033f4:	f107 0214 	add.w	r2, r7, #20
 80033f8:	2364      	movs	r3, #100	; 0x64
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2306      	movs	r3, #6
 80033fe:	21e1      	movs	r1, #225	; 0xe1
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f003 f86b 	bl	80064dc <HAL_I2C_Master_Receive>
 8003406:	4603      	mov	r3, r0
 8003408:	61fb      	str	r3, [r7, #28]
  if (res != HAL_OK) {
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <_perform_measurements+0x50>
    return 0;
 8003410:	2300      	movs	r3, #0
 8003412:	e007      	b.n	8003424 <_perform_measurements+0x60>
  }

  return _read_values(result, out_temp, out_hum);
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ff77 	bl	8003310 <_read_values>
 8003422:	4603      	mov	r3, r0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3720      	adds	r7, #32
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <shtc3_perform_measurements>:

uint32_t shtc3_perform_measurements(I2C_HandleTypeDef *hi2c, int32_t* out_temp, int32_t* out_hum)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  return _perform_measurements(hi2c, SHTC3_CMD_CLK_STRETCH_READ_HUM_FIRST, out_temp, out_hum);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	f242 415c 	movw	r1, #9308	; 0x245c
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7ff ffbf 	bl	80033c4 <_perform_measurements>
 8003446:	4603      	mov	r3, r0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003456:	4b11      	ldr	r3, [pc, #68]	; (800349c <HAL_MspInit+0x4c>)
 8003458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345a:	4a10      	ldr	r2, [pc, #64]	; (800349c <HAL_MspInit+0x4c>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6613      	str	r3, [r2, #96]	; 0x60
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <HAL_MspInit+0x4c>)
 8003464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_MspInit+0x4c>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	4a0a      	ldr	r2, [pc, #40]	; (800349c <HAL_MspInit+0x4c>)
 8003474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003478:	6593      	str	r3, [r2, #88]	; 0x58
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_MspInit+0x4c>)
 800347c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003486:	2200      	movs	r2, #0
 8003488:	210f      	movs	r1, #15
 800348a:	f06f 0001 	mvn.w	r0, #1
 800348e:	f002 f9f7 	bl	8005880 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000

080034a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08c      	sub	sp, #48	; 0x30
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a8:	f107 031c 	add.w	r3, r7, #28
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	60da      	str	r2, [r3, #12]
 80034b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a3f      	ldr	r2, [pc, #252]	; (80035bc <HAL_ADC_MspInit+0x11c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d145      	bne.n	800354e <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80034c2:	4b3f      	ldr	r3, [pc, #252]	; (80035c0 <HAL_ADC_MspInit+0x120>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3301      	adds	r3, #1
 80034c8:	4a3d      	ldr	r2, [pc, #244]	; (80035c0 <HAL_ADC_MspInit+0x120>)
 80034ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80034cc:	4b3c      	ldr	r3, [pc, #240]	; (80035c0 <HAL_ADC_MspInit+0x120>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d10b      	bne.n	80034ec <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80034d4:	4b3b      	ldr	r3, [pc, #236]	; (80035c4 <HAL_ADC_MspInit+0x124>)
 80034d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d8:	4a3a      	ldr	r2, [pc, #232]	; (80035c4 <HAL_ADC_MspInit+0x124>)
 80034da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034e0:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <HAL_ADC_MspInit+0x124>)
 80034e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ec:	4b35      	ldr	r3, [pc, #212]	; (80035c4 <HAL_ADC_MspInit+0x124>)
 80034ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f0:	4a34      	ldr	r2, [pc, #208]	; (80035c4 <HAL_ADC_MspInit+0x124>)
 80034f2:	f043 0304 	orr.w	r3, r3, #4
 80034f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034f8:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <HAL_ADC_MspInit+0x124>)
 80034fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003504:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <HAL_ADC_MspInit+0x124>)
 8003506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003508:	4a2e      	ldr	r2, [pc, #184]	; (80035c4 <HAL_ADC_MspInit+0x124>)
 800350a:	f043 0302 	orr.w	r3, r3, #2
 800350e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003510:	4b2c      	ldr	r3, [pc, #176]	; (80035c4 <HAL_ADC_MspInit+0x124>)
 8003512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = FSR_Pin;
 800351c:	2310      	movs	r3, #16
 800351e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003520:	230b      	movs	r3, #11
 8003522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FSR_GPIO_Port, &GPIO_InitStruct);
 8003528:	f107 031c 	add.w	r3, r7, #28
 800352c:	4619      	mov	r1, r3
 800352e:	4826      	ldr	r0, [pc, #152]	; (80035c8 <HAL_ADC_MspInit+0x128>)
 8003530:	f002 fc46 	bl	8005dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GAS_ADC_Pin;
 8003534:	2302      	movs	r3, #2
 8003536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003538:	230b      	movs	r3, #11
 800353a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GAS_ADC_GPIO_Port, &GPIO_InitStruct);
 8003540:	f107 031c 	add.w	r3, r7, #28
 8003544:	4619      	mov	r1, r3
 8003546:	4821      	ldr	r0, [pc, #132]	; (80035cc <HAL_ADC_MspInit+0x12c>)
 8003548:	f002 fc3a 	bl	8005dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800354c:	e031      	b.n	80035b2 <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC2)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_ADC_MspInit+0x130>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d12c      	bne.n	80035b2 <HAL_ADC_MspInit+0x112>
    HAL_RCC_ADC_CLK_ENABLED++;
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_ADC_MspInit+0x120>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3301      	adds	r3, #1
 800355e:	4a18      	ldr	r2, [pc, #96]	; (80035c0 <HAL_ADC_MspInit+0x120>)
 8003560:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8003562:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <HAL_ADC_MspInit+0x120>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d10b      	bne.n	8003582 <HAL_ADC_MspInit+0xe2>
      __HAL_RCC_ADC_CLK_ENABLE();
 800356a:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_ADC_MspInit+0x124>)
 800356c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356e:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <HAL_ADC_MspInit+0x124>)
 8003570:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <HAL_ADC_MspInit+0x124>)
 8003578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003582:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <HAL_ADC_MspInit+0x124>)
 8003584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003586:	4a0f      	ldr	r2, [pc, #60]	; (80035c4 <HAL_ADC_MspInit+0x124>)
 8003588:	f043 0304 	orr.w	r3, r3, #4
 800358c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <HAL_ADC_MspInit+0x124>)
 8003590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BAT_SENSE_Pin;
 800359a:	2320      	movs	r3, #32
 800359c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800359e:	230b      	movs	r3, #11
 80035a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BAT_SENSE_GPIO_Port, &GPIO_InitStruct);
 80035a6:	f107 031c 	add.w	r3, r7, #28
 80035aa:	4619      	mov	r1, r3
 80035ac:	4806      	ldr	r0, [pc, #24]	; (80035c8 <HAL_ADC_MspInit+0x128>)
 80035ae:	f002 fc07 	bl	8005dc0 <HAL_GPIO_Init>
}
 80035b2:	bf00      	nop
 80035b4:	3730      	adds	r7, #48	; 0x30
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	50040000 	.word	0x50040000
 80035c0:	20001450 	.word	0x20001450
 80035c4:	40021000 	.word	0x40021000
 80035c8:	48000800 	.word	0x48000800
 80035cc:	48000400 	.word	0x48000400
 80035d0:	50040100 	.word	0x50040100

080035d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b0ae      	sub	sp, #184	; 0xb8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035ec:	f107 031c 	add.w	r3, r7, #28
 80035f0:	2288      	movs	r2, #136	; 0x88
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f00b f98a 	bl	800e90e <memset>
  if(hi2c->Instance==I2C2)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a42      	ldr	r2, [pc, #264]	; (8003708 <HAL_I2C_MspInit+0x134>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d13c      	bne.n	800367e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003608:	2300      	movs	r3, #0
 800360a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800360c:	f107 031c 	add.w	r3, r7, #28
 8003610:	4618      	mov	r0, r3
 8003612:	f004 fd03 	bl	800801c <HAL_RCCEx_PeriphCLKConfig>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800361c:	f7ff fa90 	bl	8002b40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003620:	4b3a      	ldr	r3, [pc, #232]	; (800370c <HAL_I2C_MspInit+0x138>)
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	4a39      	ldr	r2, [pc, #228]	; (800370c <HAL_I2C_MspInit+0x138>)
 8003626:	f043 0302 	orr.w	r3, r3, #2
 800362a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800362c:	4b37      	ldr	r3, [pc, #220]	; (800370c <HAL_I2C_MspInit+0x138>)
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = TEMP_SCL_Pin|TEMP_SDA_Pin;
 8003638:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800363c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003640:	2312      	movs	r3, #18
 8003642:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003646:	2300      	movs	r3, #0
 8003648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364c:	2303      	movs	r3, #3
 800364e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003652:	2304      	movs	r3, #4
 8003654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003658:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800365c:	4619      	mov	r1, r3
 800365e:	482c      	ldr	r0, [pc, #176]	; (8003710 <HAL_I2C_MspInit+0x13c>)
 8003660:	f002 fbae 	bl	8005dc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003664:	4b29      	ldr	r3, [pc, #164]	; (800370c <HAL_I2C_MspInit+0x138>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003668:	4a28      	ldr	r2, [pc, #160]	; (800370c <HAL_I2C_MspInit+0x138>)
 800366a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800366e:	6593      	str	r3, [r2, #88]	; 0x58
 8003670:	4b26      	ldr	r3, [pc, #152]	; (800370c <HAL_I2C_MspInit+0x138>)
 8003672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800367c:	e040      	b.n	8003700 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C3)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a24      	ldr	r2, [pc, #144]	; (8003714 <HAL_I2C_MspInit+0x140>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d13b      	bne.n	8003700 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800368c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800368e:	2300      	movs	r3, #0
 8003690:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003692:	f107 031c 	add.w	r3, r7, #28
 8003696:	4618      	mov	r0, r3
 8003698:	f004 fcc0 	bl	800801c <HAL_RCCEx_PeriphCLKConfig>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 80036a2:	f7ff fa4d 	bl	8002b40 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036a6:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_I2C_MspInit+0x138>)
 80036a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036aa:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_I2C_MspInit+0x138>)
 80036ac:	f043 0304 	orr.w	r3, r3, #4
 80036b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036b2:	4b16      	ldr	r3, [pc, #88]	; (800370c <HAL_I2C_MspInit+0x138>)
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 80036be:	2303      	movs	r3, #3
 80036c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036c4:	2312      	movs	r3, #18
 80036c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d0:	2303      	movs	r3, #3
 80036d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036d6:	2304      	movs	r3, #4
 80036d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036e0:	4619      	mov	r1, r3
 80036e2:	480d      	ldr	r0, [pc, #52]	; (8003718 <HAL_I2C_MspInit+0x144>)
 80036e4:	f002 fb6c 	bl	8005dc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80036e8:	4b08      	ldr	r3, [pc, #32]	; (800370c <HAL_I2C_MspInit+0x138>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	4a07      	ldr	r2, [pc, #28]	; (800370c <HAL_I2C_MspInit+0x138>)
 80036ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036f2:	6593      	str	r3, [r2, #88]	; 0x58
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <HAL_I2C_MspInit+0x138>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]
}
 8003700:	bf00      	nop
 8003702:	37b8      	adds	r7, #184	; 0xb8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40005800 	.word	0x40005800
 800370c:	40021000 	.word	0x40021000
 8003710:	48000400 	.word	0x48000400
 8003714:	40005c00 	.word	0x40005c00
 8003718:	48000800 	.word	0x48000800

0800371c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <HAL_TIM_PWM_MspInit+0x5c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d10c      	bne.n	8003748 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800372e:	4b13      	ldr	r3, [pc, #76]	; (800377c <HAL_TIM_PWM_MspInit+0x60>)
 8003730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003732:	4a12      	ldr	r2, [pc, #72]	; (800377c <HAL_TIM_PWM_MspInit+0x60>)
 8003734:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003738:	6613      	str	r3, [r2, #96]	; 0x60
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_TIM_PWM_MspInit+0x60>)
 800373c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003746:	e010      	b.n	800376a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <HAL_TIM_PWM_MspInit+0x64>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d10b      	bne.n	800376a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003752:	4b0a      	ldr	r3, [pc, #40]	; (800377c <HAL_TIM_PWM_MspInit+0x60>)
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	4a09      	ldr	r2, [pc, #36]	; (800377c <HAL_TIM_PWM_MspInit+0x60>)
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	6593      	str	r3, [r2, #88]	; 0x58
 800375e:	4b07      	ldr	r3, [pc, #28]	; (800377c <HAL_TIM_PWM_MspInit+0x60>)
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
}
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40021000 	.word	0x40021000
 8003780:	40000400 	.word	0x40000400

08003784 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	; 0x28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a23      	ldr	r2, [pc, #140]	; (8003830 <HAL_TIM_MspPostInit+0xac>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d11d      	bne.n	80037e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a6:	4b23      	ldr	r3, [pc, #140]	; (8003834 <HAL_TIM_MspPostInit+0xb0>)
 80037a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037aa:	4a22      	ldr	r2, [pc, #136]	; (8003834 <HAL_TIM_MspPostInit+0xb0>)
 80037ac:	f043 0302 	orr.w	r3, r3, #2
 80037b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <HAL_TIM_MspPostInit+0xb0>)
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 80037be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c4:	2302      	movs	r3, #2
 80037c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037cc:	2300      	movs	r3, #0
 80037ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037d0:	2301      	movs	r3, #1
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 80037d4:	f107 0314 	add.w	r3, r7, #20
 80037d8:	4619      	mov	r1, r3
 80037da:	4817      	ldr	r0, [pc, #92]	; (8003838 <HAL_TIM_MspPostInit+0xb4>)
 80037dc:	f002 faf0 	bl	8005dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80037e0:	e021      	b.n	8003826 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a15      	ldr	r2, [pc, #84]	; (800383c <HAL_TIM_MspPostInit+0xb8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d11c      	bne.n	8003826 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_TIM_MspPostInit+0xb0>)
 80037ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f0:	4a10      	ldr	r2, [pc, #64]	; (8003834 <HAL_TIM_MspPostInit+0xb0>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037f8:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <HAL_TIM_MspPostInit+0xb0>)
 80037fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003804:	2340      	movs	r3, #64	; 0x40
 8003806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003808:	2302      	movs	r3, #2
 800380a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003810:	2300      	movs	r3, #0
 8003812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003814:	2302      	movs	r3, #2
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003818:	f107 0314 	add.w	r3, r7, #20
 800381c:	4619      	mov	r1, r3
 800381e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003822:	f002 facd 	bl	8005dc0 <HAL_GPIO_Init>
}
 8003826:	bf00      	nop
 8003828:	3728      	adds	r7, #40	; 0x28
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40012c00 	.word	0x40012c00
 8003834:	40021000 	.word	0x40021000
 8003838:	48000400 	.word	0x48000400
 800383c:	40000400 	.word	0x40000400

08003840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b0b2      	sub	sp, #200	; 0xc8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003848:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	60da      	str	r2, [r3, #12]
 8003856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800385c:	2288      	movs	r2, #136	; 0x88
 800385e:	2100      	movs	r1, #0
 8003860:	4618      	mov	r0, r3
 8003862:	f00b f854 	bl	800e90e <memset>
  if(huart->Instance==UART5)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4aae      	ldr	r2, [pc, #696]	; (8003b24 <HAL_UART_MspInit+0x2e4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	f040 808f 	bne.w	8003990 <HAL_UART_MspInit+0x150>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003872:	2310      	movs	r3, #16
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003876:	2300      	movs	r3, #0
 8003878:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800387a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800387e:	4618      	mov	r0, r3
 8003880:	f004 fbcc 	bl	800801c <HAL_RCCEx_PeriphCLKConfig>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800388a:	f7ff f959 	bl	8002b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800388e:	4ba6      	ldr	r3, [pc, #664]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 8003890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003892:	4aa5      	ldr	r2, [pc, #660]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 8003894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003898:	6593      	str	r3, [r2, #88]	; 0x58
 800389a:	4ba3      	ldr	r3, [pc, #652]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038a6:	4ba0      	ldr	r3, [pc, #640]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 80038a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038aa:	4a9f      	ldr	r2, [pc, #636]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 80038ac:	f043 0304 	orr.w	r3, r3, #4
 80038b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038b2:	4b9d      	ldr	r3, [pc, #628]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 80038b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038be:	4b9a      	ldr	r3, [pc, #616]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 80038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c2:	4a99      	ldr	r2, [pc, #612]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038ca:	4b97      	ldr	r3, [pc, #604]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 80038cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	623b      	str	r3, [r7, #32]
 80038d4:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 80038d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038de:	2302      	movs	r3, #2
 80038e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ea:	2303      	movs	r3, #3
 80038ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80038f0:	2308      	movs	r3, #8
 80038f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 80038f6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80038fa:	4619      	mov	r1, r3
 80038fc:	488b      	ldr	r0, [pc, #556]	; (8003b2c <HAL_UART_MspInit+0x2ec>)
 80038fe:	f002 fa5f 	bl	8005dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8003902:	2304      	movs	r3, #4
 8003904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003908:	2302      	movs	r3, #2
 800390a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003914:	2303      	movs	r3, #3
 8003916:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800391a:	2308      	movs	r3, #8
 800391c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8003920:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003924:	4619      	mov	r1, r3
 8003926:	4882      	ldr	r0, [pc, #520]	; (8003b30 <HAL_UART_MspInit+0x2f0>)
 8003928:	f002 fa4a 	bl	8005dc0 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA2_Channel2;
 800392c:	4b81      	ldr	r3, [pc, #516]	; (8003b34 <HAL_UART_MspInit+0x2f4>)
 800392e:	4a82      	ldr	r2, [pc, #520]	; (8003b38 <HAL_UART_MspInit+0x2f8>)
 8003930:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_2;
 8003932:	4b80      	ldr	r3, [pc, #512]	; (8003b34 <HAL_UART_MspInit+0x2f4>)
 8003934:	2202      	movs	r2, #2
 8003936:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003938:	4b7e      	ldr	r3, [pc, #504]	; (8003b34 <HAL_UART_MspInit+0x2f4>)
 800393a:	2200      	movs	r2, #0
 800393c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800393e:	4b7d      	ldr	r3, [pc, #500]	; (8003b34 <HAL_UART_MspInit+0x2f4>)
 8003940:	2200      	movs	r2, #0
 8003942:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003944:	4b7b      	ldr	r3, [pc, #492]	; (8003b34 <HAL_UART_MspInit+0x2f4>)
 8003946:	2280      	movs	r2, #128	; 0x80
 8003948:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800394a:	4b7a      	ldr	r3, [pc, #488]	; (8003b34 <HAL_UART_MspInit+0x2f4>)
 800394c:	2200      	movs	r2, #0
 800394e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003950:	4b78      	ldr	r3, [pc, #480]	; (8003b34 <HAL_UART_MspInit+0x2f4>)
 8003952:	2200      	movs	r2, #0
 8003954:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8003956:	4b77      	ldr	r3, [pc, #476]	; (8003b34 <HAL_UART_MspInit+0x2f4>)
 8003958:	2200      	movs	r2, #0
 800395a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800395c:	4b75      	ldr	r3, [pc, #468]	; (8003b34 <HAL_UART_MspInit+0x2f4>)
 800395e:	2200      	movs	r2, #0
 8003960:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003962:	4874      	ldr	r0, [pc, #464]	; (8003b34 <HAL_UART_MspInit+0x2f4>)
 8003964:	f001 ffb6 	bl	80058d4 <HAL_DMA_Init>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 800396e:	f7ff f8e7 	bl	8002b40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a6f      	ldr	r2, [pc, #444]	; (8003b34 <HAL_UART_MspInit+0x2f4>)
 8003976:	675a      	str	r2, [r3, #116]	; 0x74
 8003978:	4a6e      	ldr	r2, [pc, #440]	; (8003b34 <HAL_UART_MspInit+0x2f4>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	2105      	movs	r1, #5
 8003982:	2035      	movs	r0, #53	; 0x35
 8003984:	f001 ff7c 	bl	8005880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003988:	2035      	movs	r0, #53	; 0x35
 800398a:	f001 ff95 	bl	80058b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800398e:	e0c5      	b.n	8003b1c <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a69      	ldr	r2, [pc, #420]	; (8003b3c <HAL_UART_MspInit+0x2fc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d13d      	bne.n	8003a16 <HAL_UART_MspInit+0x1d6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800399a:	2301      	movs	r3, #1
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800399e:	2300      	movs	r3, #0
 80039a0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039a6:	4618      	mov	r0, r3
 80039a8:	f004 fb38 	bl	800801c <HAL_RCCEx_PeriphCLKConfig>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_UART_MspInit+0x176>
      Error_Handler();
 80039b2:	f7ff f8c5 	bl	8002b40 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80039b6:	4b5c      	ldr	r3, [pc, #368]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 80039b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ba:	4a5b      	ldr	r2, [pc, #364]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 80039bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c0:	6613      	str	r3, [r2, #96]	; 0x60
 80039c2:	4b59      	ldr	r3, [pc, #356]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 80039c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ce:	4b56      	ldr	r3, [pc, #344]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 80039d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d2:	4a55      	ldr	r2, [pc, #340]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039da:	4b53      	ldr	r3, [pc, #332]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 80039dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = WK_RX_Pin|WK_TX_Pin;
 80039e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ee:	2302      	movs	r3, #2
 80039f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fa:	2303      	movs	r3, #3
 80039fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a00:	2307      	movs	r3, #7
 8003a02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a06:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a10:	f002 f9d6 	bl	8005dc0 <HAL_GPIO_Init>
}
 8003a14:	e082      	b.n	8003b1c <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART2)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a49      	ldr	r2, [pc, #292]	; (8003b40 <HAL_UART_MspInit+0x300>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d13c      	bne.n	8003a9a <HAL_UART_MspInit+0x25a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a20:	2302      	movs	r3, #2
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a24:	2300      	movs	r3, #0
 8003a26:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f004 faf5 	bl	800801c <HAL_RCCEx_PeriphCLKConfig>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8003a38:	f7ff f882 	bl	8002b40 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a3c:	4b3a      	ldr	r3, [pc, #232]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	4a39      	ldr	r2, [pc, #228]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 8003a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a46:	6593      	str	r3, [r2, #88]	; 0x58
 8003a48:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a54:	4b34      	ldr	r3, [pc, #208]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 8003a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a58:	4a33      	ldr	r2, [pc, #204]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a60:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 8003a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003a6c:	230c      	movs	r3, #12
 8003a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a72:	2302      	movs	r3, #2
 8003a74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a84:	2307      	movs	r3, #7
 8003a86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a94:	f002 f994 	bl	8005dc0 <HAL_GPIO_Init>
}
 8003a98:	e040      	b.n	8003b1c <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART3)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a29      	ldr	r2, [pc, #164]	; (8003b44 <HAL_UART_MspInit+0x304>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d13b      	bne.n	8003b1c <HAL_UART_MspInit+0x2dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003aac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f004 fab3 	bl	800801c <HAL_RCCEx_PeriphCLKConfig>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_UART_MspInit+0x280>
      Error_Handler();
 8003abc:	f7ff f840 	bl	8002b40 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ac0:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 8003ac6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aca:	6593      	str	r3, [r2, #88]	; 0x58
 8003acc:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ad8:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 8003ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003adc:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 8003ade:	f043 0304 	orr.w	r3, r3, #4
 8003ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ae4:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <HAL_UART_MspInit+0x2e8>)
 8003ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = NET_ESP_RX_Pin|NET_ESP_TX_Pin;
 8003af0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af8:	2302      	movs	r3, #2
 8003afa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b04:	2303      	movs	r3, #3
 8003b06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b0a:	2307      	movs	r3, #7
 8003b0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b14:	4619      	mov	r1, r3
 8003b16:	4805      	ldr	r0, [pc, #20]	; (8003b2c <HAL_UART_MspInit+0x2ec>)
 8003b18:	f002 f952 	bl	8005dc0 <HAL_GPIO_Init>
}
 8003b1c:	bf00      	nop
 8003b1e:	37c8      	adds	r7, #200	; 0xc8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40005000 	.word	0x40005000
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	48000800 	.word	0x48000800
 8003b30:	48000c00 	.word	0x48000c00
 8003b34:	200012b4 	.word	0x200012b4
 8003b38:	4002041c 	.word	0x4002041c
 8003b3c:	40013800 	.word	0x40013800
 8003b40:	40004400 	.word	0x40004400
 8003b44:	40004800 	.word	0x40004800

08003b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08e      	sub	sp, #56	; 0x38
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003b56:	4b34      	ldr	r3, [pc, #208]	; (8003c28 <HAL_InitTick+0xe0>)
 8003b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5a:	4a33      	ldr	r2, [pc, #204]	; (8003c28 <HAL_InitTick+0xe0>)
 8003b5c:	f043 0310 	orr.w	r3, r3, #16
 8003b60:	6593      	str	r3, [r2, #88]	; 0x58
 8003b62:	4b31      	ldr	r3, [pc, #196]	; (8003c28 <HAL_InitTick+0xe0>)
 8003b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b6e:	f107 0210 	add.w	r2, r7, #16
 8003b72:	f107 0314 	add.w	r3, r7, #20
 8003b76:	4611      	mov	r1, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f004 f9bd 	bl	8007ef8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d103      	bne.n	8003b90 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b88:	f004 f98a 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 8003b8c:	6378      	str	r0, [r7, #52]	; 0x34
 8003b8e:	e004      	b.n	8003b9a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b90:	f004 f986 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 8003b94:	4603      	mov	r3, r0
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9c:	4a23      	ldr	r2, [pc, #140]	; (8003c2c <HAL_InitTick+0xe4>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	0c9b      	lsrs	r3, r3, #18
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003ba8:	4b21      	ldr	r3, [pc, #132]	; (8003c30 <HAL_InitTick+0xe8>)
 8003baa:	4a22      	ldr	r2, [pc, #136]	; (8003c34 <HAL_InitTick+0xec>)
 8003bac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003bae:	4b20      	ldr	r3, [pc, #128]	; (8003c30 <HAL_InitTick+0xe8>)
 8003bb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bb4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003bb6:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <HAL_InitTick+0xe8>)
 8003bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003bbc:	4b1c      	ldr	r3, [pc, #112]	; (8003c30 <HAL_InitTick+0xe8>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc2:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <HAL_InitTick+0xe8>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc8:	4b19      	ldr	r3, [pc, #100]	; (8003c30 <HAL_InitTick+0xe8>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003bce:	4818      	ldr	r0, [pc, #96]	; (8003c30 <HAL_InitTick+0xe8>)
 8003bd0:	f004 fee0 	bl	8008994 <HAL_TIM_Base_Init>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003bda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d11b      	bne.n	8003c1a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003be2:	4813      	ldr	r0, [pc, #76]	; (8003c30 <HAL_InitTick+0xe8>)
 8003be4:	f004 ff38 	bl	8008a58 <HAL_TIM_Base_Start_IT>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003bee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d111      	bne.n	8003c1a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003bf6:	2036      	movs	r0, #54	; 0x36
 8003bf8:	f001 fe5e 	bl	80058b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b0f      	cmp	r3, #15
 8003c00:	d808      	bhi.n	8003c14 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003c02:	2200      	movs	r2, #0
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	2036      	movs	r0, #54	; 0x36
 8003c08:	f001 fe3a 	bl	8005880 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c0c:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <HAL_InitTick+0xf0>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e002      	b.n	8003c1a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003c1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3738      	adds	r7, #56	; 0x38
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	431bde83 	.word	0x431bde83
 8003c30:	20001454 	.word	0x20001454
 8003c34:	40001000 	.word	0x40001000
 8003c38:	200000cc 	.word	0x200000cc

08003c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c40:	e7fe      	b.n	8003c40 <NMI_Handler+0x4>

08003c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c42:	b480      	push	{r7}
 8003c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c46:	e7fe      	b.n	8003c46 <HardFault_Handler+0x4>

08003c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c4c:	e7fe      	b.n	8003c4c <MemManage_Handler+0x4>

08003c4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c52:	e7fe      	b.n	8003c52 <BusFault_Handler+0x4>

08003c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c58:	e7fe      	b.n	8003c58 <UsageFault_Handler+0x4>

08003c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003c6c:	2010      	movs	r0, #16
 8003c6e:	f002 fa69 	bl	8006144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003c7a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c7e:	f002 fa61 	bl	8006144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003c8c:	4802      	ldr	r0, [pc, #8]	; (8003c98 <UART5_IRQHandler+0x10>)
 8003c8e:	f006 f9bf 	bl	800a010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20001094 	.word	0x20001094

08003c9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ca0:	4802      	ldr	r0, [pc, #8]	; (8003cac <TIM6_DAC_IRQHandler+0x10>)
 8003ca2:	f005 f8a7 	bl	8008df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20001454 	.word	0x20001454

08003cb0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003cb4:	4802      	ldr	r0, [pc, #8]	; (8003cc0 <DMA2_Channel2_IRQHandler+0x10>)
 8003cb6:	f001 ffa4 	bl	8005c02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	200012b4 	.word	0x200012b4

08003cc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return 1;
 8003cc8:	2301      	movs	r3, #1
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <_kill>:

int _kill(int pid, int sig)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003cde:	f00a fed5 	bl	800ea8c <__errno>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2216      	movs	r2, #22
 8003ce6:	601a      	str	r2, [r3, #0]
  return -1;
 8003ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <_exit>:

void _exit (int status)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ffe7 	bl	8003cd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d06:	e7fe      	b.n	8003d06 <_exit+0x12>

08003d08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e00a      	b.n	8003d30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d1a:	f3af 8000 	nop.w
 8003d1e:	4601      	mov	r1, r0
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	60ba      	str	r2, [r7, #8]
 8003d26:	b2ca      	uxtb	r2, r1
 8003d28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	dbf0      	blt.n	8003d1a <_read+0x12>
  }

  return len;
 8003d38:	687b      	ldr	r3, [r7, #4]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b086      	sub	sp, #24
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	e009      	b.n	8003d68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	60ba      	str	r2, [r7, #8]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	3301      	adds	r3, #1
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	dbf1      	blt.n	8003d54 <_write+0x12>
  }
  return len;
 8003d70:	687b      	ldr	r3, [r7, #4]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <_close>:

int _close(int file)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003da2:	605a      	str	r2, [r3, #4]
  return 0;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <_isatty>:

int _isatty(int file)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003dba:	2301      	movs	r3, #1
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dec:	4a14      	ldr	r2, [pc, #80]	; (8003e40 <_sbrk+0x5c>)
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <_sbrk+0x60>)
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003df8:	4b13      	ldr	r3, [pc, #76]	; (8003e48 <_sbrk+0x64>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d102      	bne.n	8003e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e00:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <_sbrk+0x64>)
 8003e02:	4a12      	ldr	r2, [pc, #72]	; (8003e4c <_sbrk+0x68>)
 8003e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e06:	4b10      	ldr	r3, [pc, #64]	; (8003e48 <_sbrk+0x64>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d207      	bcs.n	8003e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e14:	f00a fe3a 	bl	800ea8c <__errno>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	220c      	movs	r2, #12
 8003e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e22:	e009      	b.n	8003e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e24:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <_sbrk+0x64>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <_sbrk+0x64>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4413      	add	r3, r2
 8003e32:	4a05      	ldr	r2, [pc, #20]	; (8003e48 <_sbrk+0x64>)
 8003e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e36:	68fb      	ldr	r3, [r7, #12]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	20018000 	.word	0x20018000
 8003e44:	00000400 	.word	0x00000400
 8003e48:	200014a0 	.word	0x200014a0
 8003e4c:	20008c78 	.word	0x20008c78

08003e50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <SystemInit+0x20>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	4a05      	ldr	r2, [pc, #20]	; (8003e70 <SystemInit+0x20>)
 8003e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003e64:	bf00      	nop
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003eac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e78:	f7ff ffea 	bl	8003e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e7c:	480c      	ldr	r0, [pc, #48]	; (8003eb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e7e:	490d      	ldr	r1, [pc, #52]	; (8003eb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e80:	4a0d      	ldr	r2, [pc, #52]	; (8003eb8 <LoopForever+0xe>)
  movs r3, #0
 8003e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e84:	e002      	b.n	8003e8c <LoopCopyDataInit>

08003e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e8a:	3304      	adds	r3, #4

08003e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e90:	d3f9      	bcc.n	8003e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e92:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e94:	4c0a      	ldr	r4, [pc, #40]	; (8003ec0 <LoopForever+0x16>)
  movs r3, #0
 8003e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e98:	e001      	b.n	8003e9e <LoopFillZerobss>

08003e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e9c:	3204      	adds	r2, #4

08003e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ea0:	d3fb      	bcc.n	8003e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ea2:	f00a fdf9 	bl	800ea98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ea6:	f7fd fcd7 	bl	8001858 <main>

08003eaa <LoopForever>:

LoopForever:
    b LoopForever
 8003eaa:	e7fe      	b.n	8003eaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003eac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003eb4:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8003eb8:	08014838 	.word	0x08014838
  ldr r2, =_sbss
 8003ebc:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8003ec0:	20008c78 	.word	0x20008c78

08003ec4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ec4:	e7fe      	b.n	8003ec4 <ADC1_2_IRQHandler>
	...

08003ec8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ed2:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <HAL_Init+0x3c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a0b      	ldr	r2, [pc, #44]	; (8003f04 <HAL_Init+0x3c>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003edc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ede:	2003      	movs	r0, #3
 8003ee0:	f001 fcc3 	bl	800586a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ee4:	200f      	movs	r0, #15
 8003ee6:	f7ff fe2f 	bl	8003b48 <HAL_InitTick>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	71fb      	strb	r3, [r7, #7]
 8003ef4:	e001      	b.n	8003efa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ef6:	f7ff faab 	bl	8003450 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003efa:	79fb      	ldrb	r3, [r7, #7]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40022000 	.word	0x40022000

08003f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_IncTick+0x20>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_IncTick+0x24>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4413      	add	r3, r2
 8003f18:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <HAL_IncTick+0x24>)
 8003f1a:	6013      	str	r3, [r2, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	200000d0 	.word	0x200000d0
 8003f2c:	200014a4 	.word	0x200014a4

08003f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return uwTick;
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <HAL_GetTick+0x14>)
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	200014a4 	.word	0x200014a4

08003f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f50:	f7ff ffee 	bl	8003f30 <HAL_GetTick>
 8003f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d005      	beq.n	8003f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003f62:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <HAL_Delay+0x44>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f6e:	bf00      	nop
 8003f70:	f7ff ffde 	bl	8003f30 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d8f7      	bhi.n	8003f70 <HAL_Delay+0x28>
  {
  }
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200000d0 	.word	0x200000d0

08003f90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	609a      	str	r2, [r3, #8]
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	609a      	str	r2, [r3, #8]
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3360      	adds	r3, #96	; 0x60
 800400a:	461a      	mov	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b08      	ldr	r3, [pc, #32]	; (800403c <LL_ADC_SetOffset+0x44>)
 800401a:	4013      	ands	r3, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	4313      	orrs	r3, r2
 8004028:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004030:	bf00      	nop
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	03fff000 	.word	0x03fff000

08004040 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3360      	adds	r3, #96	; 0x60
 800404e:	461a      	mov	r2, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	3360      	adds	r3, #96	; 0x60
 800407c:	461a      	mov	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	431a      	orrs	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3330      	adds	r3, #48	; 0x30
 80040d8:	461a      	mov	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	0a1b      	lsrs	r3, r3, #8
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	f003 030c 	and.w	r3, r3, #12
 80040e4:	4413      	add	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	211f      	movs	r1, #31
 80040f4:	fa01 f303 	lsl.w	r3, r1, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	401a      	ands	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0e9b      	lsrs	r3, r3, #26
 8004100:	f003 011f 	and.w	r1, r3, #31
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	fa01 f303 	lsl.w	r3, r1, r3
 800410e:	431a      	orrs	r2, r3
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004114:	bf00      	nop
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3314      	adds	r3, #20
 8004130:	461a      	mov	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	0e5b      	lsrs	r3, r3, #25
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	4413      	add	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	0d1b      	lsrs	r3, r3, #20
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	2107      	movs	r1, #7
 800414e:	fa01 f303 	lsl.w	r3, r1, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	401a      	ands	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	0d1b      	lsrs	r3, r3, #20
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	431a      	orrs	r2, r3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004190:	43db      	mvns	r3, r3
 8004192:	401a      	ands	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f003 0318 	and.w	r3, r3, #24
 800419a:	4908      	ldr	r1, [pc, #32]	; (80041bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800419c:	40d9      	lsrs	r1, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	400b      	ands	r3, r1
 80041a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a6:	431a      	orrs	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	0007ffff 	.word	0x0007ffff

080041c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 031f 	and.w	r3, r3, #31
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004208:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6093      	str	r3, [r2, #8]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800422c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004230:	d101      	bne.n	8004236 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004258:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004280:	d101      	bne.n	8004286 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042a8:	f043 0201 	orr.w	r2, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042d0:	f043 0202 	orr.w	r2, r3, #2
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <LL_ADC_IsEnabled+0x18>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <LL_ADC_IsEnabled+0x1a>
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b02      	cmp	r3, #2
 800431c:	d101      	bne.n	8004322 <LL_ADC_IsDisableOngoing+0x18>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <LL_ADC_IsDisableOngoing+0x1a>
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004344:	f043 0204 	orr.w	r2, r3, #4
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004368:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800436c:	f043 0210 	orr.w	r2, r3, #16
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b04      	cmp	r3, #4
 8004392:	d101      	bne.n	8004398 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043ba:	f043 0220 	orr.w	r2, r3, #32
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d101      	bne.n	80043e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b089      	sub	sp, #36	; 0x24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e130      	b.n	8004670 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	2b00      	cmp	r3, #0
 800441a:	d109      	bne.n	8004430 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff f83f 	bl	80034a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fef1 	bl	800421c <LL_ADC_IsDeepPowerDownEnabled>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fed7 	bl	80041f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff ff0c 	bl	800426c <LL_ADC_IsInternalRegulatorEnabled>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d115      	bne.n	8004486 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fef0 	bl	8004244 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004464:	4b84      	ldr	r3, [pc, #528]	; (8004678 <HAL_ADC_Init+0x284>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	099b      	lsrs	r3, r3, #6
 800446a:	4a84      	ldr	r2, [pc, #528]	; (800467c <HAL_ADC_Init+0x288>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	099b      	lsrs	r3, r3, #6
 8004472:	3301      	adds	r3, #1
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004478:	e002      	b.n	8004480 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3b01      	subs	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f9      	bne.n	800447a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff feee 	bl	800426c <LL_ADC_IsInternalRegulatorEnabled>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10d      	bne.n	80044b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449a:	f043 0210 	orr.w	r2, r3, #16
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	f043 0201 	orr.w	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff ff62 	bl	8004380 <LL_ADC_REG_IsConversionOngoing>
 80044bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f040 80c9 	bne.w	800465e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f040 80c5 	bne.w	800465e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044dc:	f043 0202 	orr.w	r2, r3, #2
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fefb 	bl	80042e4 <LL_ADC_IsEnabled>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d115      	bne.n	8004520 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044f4:	4862      	ldr	r0, [pc, #392]	; (8004680 <HAL_ADC_Init+0x28c>)
 80044f6:	f7ff fef5 	bl	80042e4 <LL_ADC_IsEnabled>
 80044fa:	4604      	mov	r4, r0
 80044fc:	4861      	ldr	r0, [pc, #388]	; (8004684 <HAL_ADC_Init+0x290>)
 80044fe:	f7ff fef1 	bl	80042e4 <LL_ADC_IsEnabled>
 8004502:	4603      	mov	r3, r0
 8004504:	431c      	orrs	r4, r3
 8004506:	4860      	ldr	r0, [pc, #384]	; (8004688 <HAL_ADC_Init+0x294>)
 8004508:	f7ff feec 	bl	80042e4 <LL_ADC_IsEnabled>
 800450c:	4603      	mov	r3, r0
 800450e:	4323      	orrs	r3, r4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d105      	bne.n	8004520 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	4619      	mov	r1, r3
 800451a:	485c      	ldr	r0, [pc, #368]	; (800468c <HAL_ADC_Init+0x298>)
 800451c:	f7ff fd38 	bl	8003f90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	7e5b      	ldrb	r3, [r3, #25]
 8004524:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800452a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004530:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004536:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800453e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d106      	bne.n	800455c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	3b01      	subs	r3, #1
 8004554:	045b      	lsls	r3, r3, #17
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	2b00      	cmp	r3, #0
 8004562:	d009      	beq.n	8004578 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	4313      	orrs	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	4b44      	ldr	r3, [pc, #272]	; (8004690 <HAL_ADC_Init+0x29c>)
 8004580:	4013      	ands	r3, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	69b9      	ldr	r1, [r7, #24]
 8004588:	430b      	orrs	r3, r1
 800458a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff ff1c 	bl	80043ce <LL_ADC_INJ_IsConversionOngoing>
 8004596:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d13d      	bne.n	800461a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d13a      	bne.n	800461a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80045a8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045b0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045c0:	f023 0302 	bic.w	r3, r3, #2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	69b9      	ldr	r1, [r7, #24]
 80045ca:	430b      	orrs	r3, r1
 80045cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d118      	bne.n	800460a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045e2:	f023 0304 	bic.w	r3, r3, #4
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045ee:	4311      	orrs	r1, r2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80045f4:	4311      	orrs	r1, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80045fa:	430a      	orrs	r2, r1
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	611a      	str	r2, [r3, #16]
 8004608:	e007      	b.n	800461a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d10c      	bne.n	800463c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	f023 010f 	bic.w	r1, r3, #15
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	1e5a      	subs	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
 800463a:	e007      	b.n	800464c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 020f 	bic.w	r2, r2, #15
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004650:	f023 0303 	bic.w	r3, r3, #3
 8004654:	f043 0201 	orr.w	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	655a      	str	r2, [r3, #84]	; 0x54
 800465c:	e007      	b.n	800466e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004662:	f043 0210 	orr.w	r2, r3, #16
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800466e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3724      	adds	r7, #36	; 0x24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd90      	pop	{r4, r7, pc}
 8004678:	200000c8 	.word	0x200000c8
 800467c:	053e2d63 	.word	0x053e2d63
 8004680:	50040000 	.word	0x50040000
 8004684:	50040100 	.word	0x50040100
 8004688:	50040200 	.word	0x50040200
 800468c:	50040300 	.word	0x50040300
 8004690:	fff0c007 	.word	0xfff0c007

08004694 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800469c:	4857      	ldr	r0, [pc, #348]	; (80047fc <HAL_ADC_Start+0x168>)
 800469e:	f7ff fd8f 	bl	80041c0 <LL_ADC_GetMultimode>
 80046a2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff fe69 	bl	8004380 <LL_ADC_REG_IsConversionOngoing>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f040 809c 	bne.w	80047ee <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_ADC_Start+0x30>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e097      	b.n	80047f4 <HAL_ADC_Start+0x160>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fe63 	bl	8005398 <ADC_Enable>
 80046d2:	4603      	mov	r3, r0
 80046d4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f040 8083 	bne.w	80047e4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046e6:	f023 0301 	bic.w	r3, r3, #1
 80046ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a42      	ldr	r2, [pc, #264]	; (8004800 <HAL_ADC_Start+0x16c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d002      	beq.n	8004702 <HAL_ADC_Start+0x6e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	e000      	b.n	8004704 <HAL_ADC_Start+0x70>
 8004702:	4b40      	ldr	r3, [pc, #256]	; (8004804 <HAL_ADC_Start+0x170>)
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	4293      	cmp	r3, r2
 800470a:	d002      	beq.n	8004712 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d105      	bne.n	800471e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472a:	d106      	bne.n	800473a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	f023 0206 	bic.w	r2, r3, #6
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	659a      	str	r2, [r3, #88]	; 0x58
 8004738:	e002      	b.n	8004740 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	221c      	movs	r2, #28
 8004746:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a2a      	ldr	r2, [pc, #168]	; (8004800 <HAL_ADC_Start+0x16c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d002      	beq.n	8004760 <HAL_ADC_Start+0xcc>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	e000      	b.n	8004762 <HAL_ADC_Start+0xce>
 8004760:	4b28      	ldr	r3, [pc, #160]	; (8004804 <HAL_ADC_Start+0x170>)
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	4293      	cmp	r3, r2
 8004768:	d008      	beq.n	800477c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b05      	cmp	r3, #5
 8004774:	d002      	beq.n	800477c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b09      	cmp	r3, #9
 800477a:	d114      	bne.n	80047a6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004792:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fdc6 	bl	8004330 <LL_ADC_REG_StartConversion>
 80047a4:	e025      	b.n	80047f2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a12      	ldr	r2, [pc, #72]	; (8004800 <HAL_ADC_Start+0x16c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d002      	beq.n	80047c2 <HAL_ADC_Start+0x12e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	e000      	b.n	80047c4 <HAL_ADC_Start+0x130>
 80047c2:	4b10      	ldr	r3, [pc, #64]	; (8004804 <HAL_ADC_Start+0x170>)
 80047c4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00f      	beq.n	80047f2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54
 80047e2:	e006      	b.n	80047f2 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80047ec:	e001      	b.n	80047f2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047ee:	2302      	movs	r3, #2
 80047f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	50040300 	.word	0x50040300
 8004800:	50040100 	.word	0x50040100
 8004804:	50040000 	.word	0x50040000

08004808 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004816:	2b01      	cmp	r3, #1
 8004818:	d101      	bne.n	800481e <HAL_ADC_Stop+0x16>
 800481a:	2302      	movs	r3, #2
 800481c:	e023      	b.n	8004866 <HAL_ADC_Stop+0x5e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004826:	2103      	movs	r1, #3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fcf9 	bl	8005220 <ADC_ConversionStop>
 800482e:	4603      	mov	r3, r0
 8004830:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d111      	bne.n	800485c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fe33 	bl	80054a4 <ADC_Disable>
 800483e:	4603      	mov	r3, r0
 8004840:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d109      	bne.n	800485c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004850:	f023 0301 	bic.w	r3, r3, #1
 8004854:	f043 0201 	orr.w	r2, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004864:	7bfb      	ldrb	r3, [r7, #15]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800487a:	4866      	ldr	r0, [pc, #408]	; (8004a14 <HAL_ADC_PollForConversion+0x1a4>)
 800487c:	f7ff fca0 	bl	80041c0 <LL_ADC_GetMultimode>
 8004880:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	2b08      	cmp	r3, #8
 8004888:	d102      	bne.n	8004890 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800488a:	2308      	movs	r3, #8
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	e02a      	b.n	80048e6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b05      	cmp	r3, #5
 800489a:	d002      	beq.n	80048a2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2b09      	cmp	r3, #9
 80048a0:	d111      	bne.n	80048c6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b4:	f043 0220 	orr.w	r2, r3, #32
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0a4      	b.n	8004a0a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80048c0:	2304      	movs	r3, #4
 80048c2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80048c4:	e00f      	b.n	80048e6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80048c6:	4853      	ldr	r0, [pc, #332]	; (8004a14 <HAL_ADC_PollForConversion+0x1a4>)
 80048c8:	f7ff fc88 	bl	80041dc <LL_ADC_GetMultiDMATransfer>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	f043 0220 	orr.w	r2, r3, #32
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e093      	b.n	8004a0a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80048e2:	2304      	movs	r3, #4
 80048e4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80048e6:	f7ff fb23 	bl	8003f30 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80048ec:	e021      	b.n	8004932 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f4:	d01d      	beq.n	8004932 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80048f6:	f7ff fb1b 	bl	8003f30 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d302      	bcc.n	800490c <HAL_ADC_PollForConversion+0x9c>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d112      	bne.n	8004932 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4013      	ands	r3, r2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491e:	f043 0204 	orr.w	r2, r3, #4
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e06b      	b.n	8004a0a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0d6      	beq.n	80048ee <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004944:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fba6 	bl	80040a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01c      	beq.n	8004996 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	7e5b      	ldrb	r3, [r3, #25]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d118      	bne.n	8004996 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b08      	cmp	r3, #8
 8004970:	d111      	bne.n	8004996 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004976:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d105      	bne.n	8004996 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498e:	f043 0201 	orr.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1f      	ldr	r2, [pc, #124]	; (8004a18 <HAL_ADC_PollForConversion+0x1a8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d002      	beq.n	80049a6 <HAL_ADC_PollForConversion+0x136>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	e000      	b.n	80049a8 <HAL_ADC_PollForConversion+0x138>
 80049a6:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <HAL_ADC_PollForConversion+0x1ac>)
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d008      	beq.n	80049c2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b05      	cmp	r3, #5
 80049ba:	d002      	beq.n	80049c2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2b09      	cmp	r3, #9
 80049c0:	d104      	bne.n	80049cc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	e00c      	b.n	80049e6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a11      	ldr	r2, [pc, #68]	; (8004a18 <HAL_ADC_PollForConversion+0x1a8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d002      	beq.n	80049dc <HAL_ADC_PollForConversion+0x16c>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	e000      	b.n	80049de <HAL_ADC_PollForConversion+0x16e>
 80049dc:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <HAL_ADC_PollForConversion+0x1ac>)
 80049de:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d104      	bne.n	80049f6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2208      	movs	r2, #8
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	e008      	b.n	8004a08 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d103      	bne.n	8004a08 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	220c      	movs	r2, #12
 8004a06:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	50040300 	.word	0x50040300
 8004a18:	50040100 	.word	0x50040100
 8004a1c:	50040000 	.word	0x50040000

08004a20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
	...

08004a3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b0b6      	sub	sp, #216	; 0xd8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_ADC_ConfigChannel+0x22>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e3c9      	b.n	80051f2 <HAL_ADC_ConfigChannel+0x7b6>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff fc88 	bl	8004380 <LL_ADC_REG_IsConversionOngoing>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f040 83aa 	bne.w	80051cc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d824      	bhi.n	8004ad2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	3b02      	subs	r3, #2
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d81b      	bhi.n	8004aca <HAL_ADC_ConfigChannel+0x8e>
 8004a92:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <HAL_ADC_ConfigChannel+0x5c>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004aa9 	.word	0x08004aa9
 8004a9c:	08004ab1 	.word	0x08004ab1
 8004aa0:	08004ab9 	.word	0x08004ab9
 8004aa4:	08004ac1 	.word	0x08004ac1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004aa8:	230c      	movs	r3, #12
 8004aaa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004aae:	e010      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004ab0:	2312      	movs	r3, #18
 8004ab2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004ab6:	e00c      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004ab8:	2318      	movs	r3, #24
 8004aba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004abe:	e008      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004ac8:	e003      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004aca:	2306      	movs	r3, #6
 8004acc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004ad0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004ae0:	f7ff faf2 	bl	80040c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff fc49 	bl	8004380 <LL_ADC_REG_IsConversionOngoing>
 8004aee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fc69 	bl	80043ce <LL_ADC_INJ_IsConversionOngoing>
 8004afc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f040 81a4 	bne.w	8004e52 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f040 819f 	bne.w	8004e52 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	6819      	ldr	r1, [r3, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	461a      	mov	r2, r3
 8004b22:	f7ff fafd 	bl	8004120 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	695a      	ldr	r2, [r3, #20]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	08db      	lsrs	r3, r3, #3
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d00a      	beq.n	8004b5e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	6919      	ldr	r1, [r3, #16]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b58:	f7ff fa4e 	bl	8003ff8 <LL_ADC_SetOffset>
 8004b5c:	e179      	b.n	8004e52 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fa6b 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10a      	bne.n	8004b8a <HAL_ADC_ConfigChannel+0x14e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fa60 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004b80:	4603      	mov	r3, r0
 8004b82:	0e9b      	lsrs	r3, r3, #26
 8004b84:	f003 021f 	and.w	r2, r3, #31
 8004b88:	e01e      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x18c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2100      	movs	r1, #0
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff fa55 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ba0:	fa93 f3a3 	rbit	r3, r3
 8004ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ba8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004bac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004bb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004bb8:	2320      	movs	r3, #32
 8004bba:	e004      	b.n	8004bc6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004bbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004bc0:	fab3 f383 	clz	r3, r3
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x1a4>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	0e9b      	lsrs	r3, r3, #26
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	e018      	b.n	8004c12 <HAL_ADC_ConfigChannel+0x1d6>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bec:	fa93 f3a3 	rbit	r3, r3
 8004bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004bf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004bfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004c04:	2320      	movs	r3, #32
 8004c06:	e004      	b.n	8004c12 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004c08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c0c:	fab3 f383 	clz	r3, r3
 8004c10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d106      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff fa24 	bl	800406c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2101      	movs	r1, #1
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff fa08 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004c30:	4603      	mov	r3, r0
 8004c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10a      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x214>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2101      	movs	r1, #1
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff f9fd 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004c46:	4603      	mov	r3, r0
 8004c48:	0e9b      	lsrs	r3, r3, #26
 8004c4a:	f003 021f 	and.w	r2, r3, #31
 8004c4e:	e01e      	b.n	8004c8e <HAL_ADC_ConfigChannel+0x252>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2101      	movs	r1, #1
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff f9f2 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c66:	fa93 f3a3 	rbit	r3, r3
 8004c6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004c6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004c76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004c7e:	2320      	movs	r3, #32
 8004c80:	e004      	b.n	8004c8c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004c82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c86:	fab3 f383 	clz	r3, r3
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d105      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0x26a>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	0e9b      	lsrs	r3, r3, #26
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	e018      	b.n	8004cd8 <HAL_ADC_ConfigChannel+0x29c>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004cb2:	fa93 f3a3 	rbit	r3, r3
 8004cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004cba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004cc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004cca:	2320      	movs	r3, #32
 8004ccc:	e004      	b.n	8004cd8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004cce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cd2:	fab3 f383 	clz	r3, r3
 8004cd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d106      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff f9c1 	bl	800406c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2102      	movs	r1, #2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff f9a5 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <HAL_ADC_ConfigChannel+0x2da>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2102      	movs	r1, #2
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff f99a 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	0e9b      	lsrs	r3, r3, #26
 8004d10:	f003 021f 	and.w	r2, r3, #31
 8004d14:	e01e      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x318>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff f98f 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d2c:	fa93 f3a3 	rbit	r3, r3
 8004d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004d44:	2320      	movs	r3, #32
 8004d46:	e004      	b.n	8004d52 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d4c:	fab3 f383 	clz	r3, r3
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d105      	bne.n	8004d6c <HAL_ADC_ConfigChannel+0x330>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	0e9b      	lsrs	r3, r3, #26
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	e014      	b.n	8004d96 <HAL_ADC_ConfigChannel+0x35a>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d74:	fa93 f3a3 	rbit	r3, r3
 8004d78:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004d80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004d88:	2320      	movs	r3, #32
 8004d8a:	e004      	b.n	8004d96 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004d8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d90:	fab3 f383 	clz	r3, r3
 8004d94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d106      	bne.n	8004da8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2102      	movs	r1, #2
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff f962 	bl	800406c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2103      	movs	r1, #3
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff f946 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10a      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x398>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2103      	movs	r1, #3
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff f93b 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	0e9b      	lsrs	r3, r3, #26
 8004dce:	f003 021f 	and.w	r2, r3, #31
 8004dd2:	e017      	b.n	8004e04 <HAL_ADC_ConfigChannel+0x3c8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2103      	movs	r1, #3
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff f930 	bl	8004040 <LL_ADC_GetOffsetChannel>
 8004de0:	4603      	mov	r3, r0
 8004de2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004de6:	fa93 f3a3 	rbit	r3, r3
 8004dea:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dee:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004df6:	2320      	movs	r3, #32
 8004df8:	e003      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dfc:	fab3 f383 	clz	r3, r3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d105      	bne.n	8004e1c <HAL_ADC_ConfigChannel+0x3e0>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	0e9b      	lsrs	r3, r3, #26
 8004e16:	f003 031f 	and.w	r3, r3, #31
 8004e1a:	e011      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x404>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e24:	fa93 f3a3 	rbit	r3, r3
 8004e28:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e2c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004e2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004e34:	2320      	movs	r3, #32
 8004e36:	e003      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e3a:	fab3 f383 	clz	r3, r3
 8004e3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d106      	bne.n	8004e52 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2103      	movs	r1, #3
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff f90d 	bl	800406c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff fa44 	bl	80042e4 <LL_ADC_IsEnabled>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f040 8140 	bne.w	80050e4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	6819      	ldr	r1, [r3, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	461a      	mov	r2, r3
 8004e72:	f7ff f981 	bl	8004178 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	4a8f      	ldr	r2, [pc, #572]	; (80050b8 <HAL_ADC_ConfigChannel+0x67c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	f040 8131 	bne.w	80050e4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10b      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x46e>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	0e9b      	lsrs	r3, r3, #26
 8004e98:	3301      	adds	r3, #1
 8004e9a:	f003 031f 	and.w	r3, r3, #31
 8004e9e:	2b09      	cmp	r3, #9
 8004ea0:	bf94      	ite	ls
 8004ea2:	2301      	movls	r3, #1
 8004ea4:	2300      	movhi	r3, #0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	e019      	b.n	8004ede <HAL_ADC_ConfigChannel+0x4a2>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eb2:	fa93 f3a3 	rbit	r3, r3
 8004eb6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004ec2:	2320      	movs	r3, #32
 8004ec4:	e003      	b.n	8004ece <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec8:	fab3 f383 	clz	r3, r3
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	3301      	adds	r3, #1
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	2b09      	cmp	r3, #9
 8004ed6:	bf94      	ite	ls
 8004ed8:	2301      	movls	r3, #1
 8004eda:	2300      	movhi	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d079      	beq.n	8004fd6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d107      	bne.n	8004efe <HAL_ADC_ConfigChannel+0x4c2>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	0e9b      	lsrs	r3, r3, #26
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	069b      	lsls	r3, r3, #26
 8004ef8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004efc:	e015      	b.n	8004f2a <HAL_ADC_ConfigChannel+0x4ee>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f06:	fa93 f3a3 	rbit	r3, r3
 8004f0a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f0e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004f16:	2320      	movs	r3, #32
 8004f18:	e003      	b.n	8004f22 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8004f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f1c:	fab3 f383 	clz	r3, r3
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	3301      	adds	r3, #1
 8004f24:	069b      	lsls	r3, r3, #26
 8004f26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d109      	bne.n	8004f4a <HAL_ADC_ConfigChannel+0x50e>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	0e9b      	lsrs	r3, r3, #26
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	f003 031f 	and.w	r3, r3, #31
 8004f42:	2101      	movs	r1, #1
 8004f44:	fa01 f303 	lsl.w	r3, r1, r3
 8004f48:	e017      	b.n	8004f7a <HAL_ADC_ConfigChannel+0x53e>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f52:	fa93 f3a3 	rbit	r3, r3
 8004f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004f62:	2320      	movs	r3, #32
 8004f64:	e003      	b.n	8004f6e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f68:	fab3 f383 	clz	r3, r3
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	3301      	adds	r3, #1
 8004f70:	f003 031f 	and.w	r3, r3, #31
 8004f74:	2101      	movs	r1, #1
 8004f76:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7a:	ea42 0103 	orr.w	r1, r2, r3
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x564>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	0e9b      	lsrs	r3, r3, #26
 8004f90:	3301      	adds	r3, #1
 8004f92:	f003 021f 	and.w	r2, r3, #31
 8004f96:	4613      	mov	r3, r2
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	4413      	add	r3, r2
 8004f9c:	051b      	lsls	r3, r3, #20
 8004f9e:	e018      	b.n	8004fd2 <HAL_ADC_ConfigChannel+0x596>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa8:	fa93 f3a3 	rbit	r3, r3
 8004fac:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004fb8:	2320      	movs	r3, #32
 8004fba:	e003      	b.n	8004fc4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	f003 021f 	and.w	r2, r3, #31
 8004fca:	4613      	mov	r3, r2
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	4413      	add	r3, r2
 8004fd0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	e081      	b.n	80050da <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d107      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x5b6>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	0e9b      	lsrs	r3, r3, #26
 8004fe8:	3301      	adds	r3, #1
 8004fea:	069b      	lsls	r3, r3, #26
 8004fec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ff0:	e015      	b.n	800501e <HAL_ADC_ConfigChannel+0x5e2>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	fa93 f3a3 	rbit	r3, r3
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800500a:	2320      	movs	r3, #32
 800500c:	e003      	b.n	8005016 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800500e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005010:	fab3 f383 	clz	r3, r3
 8005014:	b2db      	uxtb	r3, r3
 8005016:	3301      	adds	r3, #1
 8005018:	069b      	lsls	r3, r3, #26
 800501a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <HAL_ADC_ConfigChannel+0x602>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	0e9b      	lsrs	r3, r3, #26
 8005030:	3301      	adds	r3, #1
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2101      	movs	r1, #1
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	e017      	b.n	800506e <HAL_ADC_ConfigChannel+0x632>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	fa93 f3a3 	rbit	r3, r3
 800504a:	61bb      	str	r3, [r7, #24]
  return result;
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8005056:	2320      	movs	r3, #32
 8005058:	e003      	b.n	8005062 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	fab3 f383 	clz	r3, r3
 8005060:	b2db      	uxtb	r3, r3
 8005062:	3301      	adds	r3, #1
 8005064:	f003 031f 	and.w	r3, r3, #31
 8005068:	2101      	movs	r1, #1
 800506a:	fa01 f303 	lsl.w	r3, r1, r3
 800506e:	ea42 0103 	orr.w	r1, r2, r3
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10d      	bne.n	800509a <HAL_ADC_ConfigChannel+0x65e>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	0e9b      	lsrs	r3, r3, #26
 8005084:	3301      	adds	r3, #1
 8005086:	f003 021f 	and.w	r2, r3, #31
 800508a:	4613      	mov	r3, r2
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	4413      	add	r3, r2
 8005090:	3b1e      	subs	r3, #30
 8005092:	051b      	lsls	r3, r3, #20
 8005094:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005098:	e01e      	b.n	80050d8 <HAL_ADC_ConfigChannel+0x69c>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	fa93 f3a3 	rbit	r3, r3
 80050a6:	60fb      	str	r3, [r7, #12]
  return result;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d104      	bne.n	80050bc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80050b2:	2320      	movs	r3, #32
 80050b4:	e006      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x688>
 80050b6:	bf00      	nop
 80050b8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	fab3 f383 	clz	r3, r3
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	3301      	adds	r3, #1
 80050c6:	f003 021f 	and.w	r2, r3, #31
 80050ca:	4613      	mov	r3, r2
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4413      	add	r3, r2
 80050d0:	3b1e      	subs	r3, #30
 80050d2:	051b      	lsls	r3, r3, #20
 80050d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050de:	4619      	mov	r1, r3
 80050e0:	f7ff f81e 	bl	8004120 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	4b44      	ldr	r3, [pc, #272]	; (80051fc <HAL_ADC_ConfigChannel+0x7c0>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d07a      	beq.n	80051e6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050f0:	4843      	ldr	r0, [pc, #268]	; (8005200 <HAL_ADC_ConfigChannel+0x7c4>)
 80050f2:	f7fe ff73 	bl	8003fdc <LL_ADC_GetCommonPathInternalCh>
 80050f6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a41      	ldr	r2, [pc, #260]	; (8005204 <HAL_ADC_ConfigChannel+0x7c8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d12c      	bne.n	800515e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005104:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d126      	bne.n	800515e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a3c      	ldr	r2, [pc, #240]	; (8005208 <HAL_ADC_ConfigChannel+0x7cc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d004      	beq.n	8005124 <HAL_ADC_ConfigChannel+0x6e8>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a3b      	ldr	r2, [pc, #236]	; (800520c <HAL_ADC_ConfigChannel+0x7d0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d15d      	bne.n	80051e0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005124:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005128:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800512c:	4619      	mov	r1, r3
 800512e:	4834      	ldr	r0, [pc, #208]	; (8005200 <HAL_ADC_ConfigChannel+0x7c4>)
 8005130:	f7fe ff41 	bl	8003fb6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005134:	4b36      	ldr	r3, [pc, #216]	; (8005210 <HAL_ADC_ConfigChannel+0x7d4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	099b      	lsrs	r3, r3, #6
 800513a:	4a36      	ldr	r2, [pc, #216]	; (8005214 <HAL_ADC_ConfigChannel+0x7d8>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	099b      	lsrs	r3, r3, #6
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	4613      	mov	r3, r2
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800514e:	e002      	b.n	8005156 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	3b01      	subs	r3, #1
 8005154:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1f9      	bne.n	8005150 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800515c:	e040      	b.n	80051e0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2d      	ldr	r2, [pc, #180]	; (8005218 <HAL_ADC_ConfigChannel+0x7dc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d118      	bne.n	800519a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800516c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d112      	bne.n	800519a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a23      	ldr	r2, [pc, #140]	; (8005208 <HAL_ADC_ConfigChannel+0x7cc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_ADC_ConfigChannel+0x74c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a22      	ldr	r2, [pc, #136]	; (800520c <HAL_ADC_ConfigChannel+0x7d0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d12d      	bne.n	80051e4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005188:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800518c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005190:	4619      	mov	r1, r3
 8005192:	481b      	ldr	r0, [pc, #108]	; (8005200 <HAL_ADC_ConfigChannel+0x7c4>)
 8005194:	f7fe ff0f 	bl	8003fb6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005198:	e024      	b.n	80051e4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1f      	ldr	r2, [pc, #124]	; (800521c <HAL_ADC_ConfigChannel+0x7e0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d120      	bne.n	80051e6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80051a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d11a      	bne.n	80051e6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a14      	ldr	r2, [pc, #80]	; (8005208 <HAL_ADC_ConfigChannel+0x7cc>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d115      	bne.n	80051e6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051c2:	4619      	mov	r1, r3
 80051c4:	480e      	ldr	r0, [pc, #56]	; (8005200 <HAL_ADC_ConfigChannel+0x7c4>)
 80051c6:	f7fe fef6 	bl	8003fb6 <LL_ADC_SetCommonPathInternalCh>
 80051ca:	e00c      	b.n	80051e6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80051de:	e002      	b.n	80051e6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051e0:	bf00      	nop
 80051e2:	e000      	b.n	80051e6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80051ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	37d8      	adds	r7, #216	; 0xd8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	80080000 	.word	0x80080000
 8005200:	50040300 	.word	0x50040300
 8005204:	c7520000 	.word	0xc7520000
 8005208:	50040000 	.word	0x50040000
 800520c:	50040200 	.word	0x50040200
 8005210:	200000c8 	.word	0x200000c8
 8005214:	053e2d63 	.word	0x053e2d63
 8005218:	cb840000 	.word	0xcb840000
 800521c:	80000001 	.word	0x80000001

08005220 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800522a:	2300      	movs	r3, #0
 800522c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff f8a2 	bl	8004380 <LL_ADC_REG_IsConversionOngoing>
 800523c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff f8c3 	bl	80043ce <LL_ADC_INJ_IsConversionOngoing>
 8005248:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d103      	bne.n	8005258 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 8098 	beq.w	8005388 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d02a      	beq.n	80052bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	7e5b      	ldrb	r3, [r3, #25]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d126      	bne.n	80052bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	7e1b      	ldrb	r3, [r3, #24]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d122      	bne.n	80052bc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005276:	2301      	movs	r3, #1
 8005278:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800527a:	e014      	b.n	80052a6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	4a45      	ldr	r2, [pc, #276]	; (8005394 <ADC_ConversionStop+0x174>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d90d      	bls.n	80052a0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005288:	f043 0210 	orr.w	r2, r3, #16
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005294:	f043 0201 	orr.w	r2, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e074      	b.n	800538a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	3301      	adds	r3, #1
 80052a4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d1e3      	bne.n	800527c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2240      	movs	r2, #64	; 0x40
 80052ba:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d014      	beq.n	80052ec <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff f85a 	bl	8004380 <LL_ADC_REG_IsConversionOngoing>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00c      	beq.n	80052ec <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff f817 	bl	800430a <LL_ADC_IsDisableOngoing>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d104      	bne.n	80052ec <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff f836 	bl	8004358 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d014      	beq.n	800531c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff f869 	bl	80043ce <LL_ADC_INJ_IsConversionOngoing>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f7fe ffff 	bl	800430a <LL_ADC_IsDisableOngoing>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d104      	bne.n	800531c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff f845 	bl	80043a6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d005      	beq.n	800532e <ADC_ConversionStop+0x10e>
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d105      	bne.n	8005334 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005328:	230c      	movs	r3, #12
 800532a:	617b      	str	r3, [r7, #20]
        break;
 800532c:	e005      	b.n	800533a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800532e:	2308      	movs	r3, #8
 8005330:	617b      	str	r3, [r7, #20]
        break;
 8005332:	e002      	b.n	800533a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005334:	2304      	movs	r3, #4
 8005336:	617b      	str	r3, [r7, #20]
        break;
 8005338:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800533a:	f7fe fdf9 	bl	8003f30 <HAL_GetTick>
 800533e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005340:	e01b      	b.n	800537a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005342:	f7fe fdf5 	bl	8003f30 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b05      	cmp	r3, #5
 800534e:	d914      	bls.n	800537a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	4013      	ands	r3, r2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00d      	beq.n	800537a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005362:	f043 0210 	orr.w	r2, r3, #16
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536e:	f043 0201 	orr.w	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e007      	b.n	800538a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	4013      	ands	r3, r2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1dc      	bne.n	8005342 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3720      	adds	r7, #32
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	a33fffff 	.word	0xa33fffff

08005398 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fe ff9b 	bl	80042e4 <LL_ADC_IsEnabled>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d169      	bne.n	8005488 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	4b36      	ldr	r3, [pc, #216]	; (8005494 <ADC_Enable+0xfc>)
 80053bc:	4013      	ands	r3, r2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00d      	beq.n	80053de <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c6:	f043 0210 	orr.w	r2, r3, #16
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d2:	f043 0201 	orr.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e055      	b.n	800548a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe ff56 	bl	8004294 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053e8:	482b      	ldr	r0, [pc, #172]	; (8005498 <ADC_Enable+0x100>)
 80053ea:	f7fe fdf7 	bl	8003fdc <LL_ADC_GetCommonPathInternalCh>
 80053ee:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80053f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d013      	beq.n	8005420 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053f8:	4b28      	ldr	r3, [pc, #160]	; (800549c <ADC_Enable+0x104>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	099b      	lsrs	r3, r3, #6
 80053fe:	4a28      	ldr	r2, [pc, #160]	; (80054a0 <ADC_Enable+0x108>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	099b      	lsrs	r3, r3, #6
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	4613      	mov	r3, r2
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005412:	e002      	b.n	800541a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	3b01      	subs	r3, #1
 8005418:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1f9      	bne.n	8005414 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005420:	f7fe fd86 	bl	8003f30 <HAL_GetTick>
 8005424:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005426:	e028      	b.n	800547a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	f7fe ff59 	bl	80042e4 <LL_ADC_IsEnabled>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d104      	bne.n	8005442 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f7fe ff29 	bl	8004294 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005442:	f7fe fd75 	bl	8003f30 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d914      	bls.n	800547a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b01      	cmp	r3, #1
 800545c:	d00d      	beq.n	800547a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	f043 0210 	orr.w	r2, r3, #16
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546e:	f043 0201 	orr.w	r2, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e007      	b.n	800548a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b01      	cmp	r3, #1
 8005486:	d1cf      	bne.n	8005428 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	8000003f 	.word	0x8000003f
 8005498:	50040300 	.word	0x50040300
 800549c:	200000c8 	.word	0x200000c8
 80054a0:	053e2d63 	.word	0x053e2d63

080054a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fe ff2a 	bl	800430a <LL_ADC_IsDisableOngoing>
 80054b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fe ff11 	bl	80042e4 <LL_ADC_IsEnabled>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d047      	beq.n	8005558 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d144      	bne.n	8005558 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f003 030d 	and.w	r3, r3, #13
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d10c      	bne.n	80054f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7fe feeb 	bl	80042bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2203      	movs	r2, #3
 80054ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80054ee:	f7fe fd1f 	bl	8003f30 <HAL_GetTick>
 80054f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054f4:	e029      	b.n	800554a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fa:	f043 0210 	orr.w	r2, r3, #16
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005506:	f043 0201 	orr.w	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e023      	b.n	800555a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005512:	f7fe fd0d 	bl	8003f30 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d914      	bls.n	800554a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00d      	beq.n	800554a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005532:	f043 0210 	orr.w	r2, r3, #16
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553e:	f043 0201 	orr.w	r2, r3, #1
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e007      	b.n	800555a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1dc      	bne.n	8005512 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <LL_ADC_IsEnabled>:
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <LL_ADC_IsEnabled+0x18>
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <LL_ADC_IsEnabled+0x1a>
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <LL_ADC_REG_IsConversionOngoing>:
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b04      	cmp	r3, #4
 800559a:	d101      	bne.n	80055a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80055b0:	b590      	push	{r4, r7, lr}
 80055b2:	b09f      	sub	sp, #124	; 0x7c
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e093      	b.n	80056f6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80055d6:	2300      	movs	r3, #0
 80055d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80055da:	2300      	movs	r3, #0
 80055dc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a47      	ldr	r2, [pc, #284]	; (8005700 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d102      	bne.n	80055ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80055e8:	4b46      	ldr	r3, [pc, #280]	; (8005704 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80055ea:	60bb      	str	r3, [r7, #8]
 80055ec:	e001      	b.n	80055f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10b      	bne.n	8005610 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fc:	f043 0220 	orr.w	r2, r3, #32
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e072      	b.n	80056f6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff ffb8 	bl	8005588 <LL_ADC_REG_IsConversionOngoing>
 8005618:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f7ff ffb2 	bl	8005588 <LL_ADC_REG_IsConversionOngoing>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d154      	bne.n	80056d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800562a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800562c:	2b00      	cmp	r3, #0
 800562e:	d151      	bne.n	80056d4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005630:	4b35      	ldr	r3, [pc, #212]	; (8005708 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005632:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d02c      	beq.n	8005696 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800563c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	6859      	ldr	r1, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800564e:	035b      	lsls	r3, r3, #13
 8005650:	430b      	orrs	r3, r1
 8005652:	431a      	orrs	r2, r3
 8005654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005656:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005658:	4829      	ldr	r0, [pc, #164]	; (8005700 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800565a:	f7ff ff82 	bl	8005562 <LL_ADC_IsEnabled>
 800565e:	4604      	mov	r4, r0
 8005660:	4828      	ldr	r0, [pc, #160]	; (8005704 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005662:	f7ff ff7e 	bl	8005562 <LL_ADC_IsEnabled>
 8005666:	4603      	mov	r3, r0
 8005668:	431c      	orrs	r4, r3
 800566a:	4828      	ldr	r0, [pc, #160]	; (800570c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800566c:	f7ff ff79 	bl	8005562 <LL_ADC_IsEnabled>
 8005670:	4603      	mov	r3, r0
 8005672:	4323      	orrs	r3, r4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d137      	bne.n	80056e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005680:	f023 030f 	bic.w	r3, r3, #15
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	6811      	ldr	r1, [r2, #0]
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	6892      	ldr	r2, [r2, #8]
 800568c:	430a      	orrs	r2, r1
 800568e:	431a      	orrs	r2, r3
 8005690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005692:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005694:	e028      	b.n	80056e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800569e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056a2:	4817      	ldr	r0, [pc, #92]	; (8005700 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80056a4:	f7ff ff5d 	bl	8005562 <LL_ADC_IsEnabled>
 80056a8:	4604      	mov	r4, r0
 80056aa:	4816      	ldr	r0, [pc, #88]	; (8005704 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80056ac:	f7ff ff59 	bl	8005562 <LL_ADC_IsEnabled>
 80056b0:	4603      	mov	r3, r0
 80056b2:	431c      	orrs	r4, r3
 80056b4:	4815      	ldr	r0, [pc, #84]	; (800570c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80056b6:	f7ff ff54 	bl	8005562 <LL_ADC_IsEnabled>
 80056ba:	4603      	mov	r3, r0
 80056bc:	4323      	orrs	r3, r4
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d112      	bne.n	80056e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80056c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80056ca:	f023 030f 	bic.w	r3, r3, #15
 80056ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056d0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80056d2:	e009      	b.n	80056e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d8:	f043 0220 	orr.w	r2, r3, #32
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80056e6:	e000      	b.n	80056ea <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80056e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80056f2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	377c      	adds	r7, #124	; 0x7c
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd90      	pop	{r4, r7, pc}
 80056fe:	bf00      	nop
 8005700:	50040000 	.word	0x50040000
 8005704:	50040100 	.word	0x50040100
 8005708:	50040300 	.word	0x50040300
 800570c:	50040200 	.word	0x50040200

08005710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005720:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <__NVIC_SetPriorityGrouping+0x44>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800572c:	4013      	ands	r3, r2
 800572e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800573c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005742:	4a04      	ldr	r2, [pc, #16]	; (8005754 <__NVIC_SetPriorityGrouping+0x44>)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	60d3      	str	r3, [r2, #12]
}
 8005748:	bf00      	nop
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	e000ed00 	.word	0xe000ed00

08005758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800575c:	4b04      	ldr	r3, [pc, #16]	; (8005770 <__NVIC_GetPriorityGrouping+0x18>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	0a1b      	lsrs	r3, r3, #8
 8005762:	f003 0307 	and.w	r3, r3, #7
}
 8005766:	4618      	mov	r0, r3
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	e000ed00 	.word	0xe000ed00

08005774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800577e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005782:	2b00      	cmp	r3, #0
 8005784:	db0b      	blt.n	800579e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	f003 021f 	and.w	r2, r3, #31
 800578c:	4907      	ldr	r1, [pc, #28]	; (80057ac <__NVIC_EnableIRQ+0x38>)
 800578e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	2001      	movs	r0, #1
 8005796:	fa00 f202 	lsl.w	r2, r0, r2
 800579a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	e000e100 	.word	0xe000e100

080057b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	6039      	str	r1, [r7, #0]
 80057ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	db0a      	blt.n	80057da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	490c      	ldr	r1, [pc, #48]	; (80057fc <__NVIC_SetPriority+0x4c>)
 80057ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ce:	0112      	lsls	r2, r2, #4
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	440b      	add	r3, r1
 80057d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057d8:	e00a      	b.n	80057f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	4908      	ldr	r1, [pc, #32]	; (8005800 <__NVIC_SetPriority+0x50>)
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	3b04      	subs	r3, #4
 80057e8:	0112      	lsls	r2, r2, #4
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	440b      	add	r3, r1
 80057ee:	761a      	strb	r2, [r3, #24]
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	e000e100 	.word	0xe000e100
 8005800:	e000ed00 	.word	0xe000ed00

08005804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005804:	b480      	push	{r7}
 8005806:	b089      	sub	sp, #36	; 0x24
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f1c3 0307 	rsb	r3, r3, #7
 800581e:	2b04      	cmp	r3, #4
 8005820:	bf28      	it	cs
 8005822:	2304      	movcs	r3, #4
 8005824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	3304      	adds	r3, #4
 800582a:	2b06      	cmp	r3, #6
 800582c:	d902      	bls.n	8005834 <NVIC_EncodePriority+0x30>
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	3b03      	subs	r3, #3
 8005832:	e000      	b.n	8005836 <NVIC_EncodePriority+0x32>
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005838:	f04f 32ff 	mov.w	r2, #4294967295
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	43da      	mvns	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	401a      	ands	r2, r3
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800584c:	f04f 31ff 	mov.w	r1, #4294967295
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	fa01 f303 	lsl.w	r3, r1, r3
 8005856:	43d9      	mvns	r1, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800585c:	4313      	orrs	r3, r2
         );
}
 800585e:	4618      	mov	r0, r3
 8005860:	3724      	adds	r7, #36	; 0x24
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b082      	sub	sp, #8
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff ff4c 	bl	8005710 <__NVIC_SetPriorityGrouping>
}
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005892:	f7ff ff61 	bl	8005758 <__NVIC_GetPriorityGrouping>
 8005896:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	6978      	ldr	r0, [r7, #20]
 800589e:	f7ff ffb1 	bl	8005804 <NVIC_EncodePriority>
 80058a2:	4602      	mov	r2, r0
 80058a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058a8:	4611      	mov	r1, r2
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff ff80 	bl	80057b0 <__NVIC_SetPriority>
}
 80058b0:	bf00      	nop
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff ff54 	bl	8005774 <__NVIC_EnableIRQ>
}
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e098      	b.n	8005a18 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	4b4d      	ldr	r3, [pc, #308]	; (8005a24 <HAL_DMA_Init+0x150>)
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d80f      	bhi.n	8005912 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	4b4b      	ldr	r3, [pc, #300]	; (8005a28 <HAL_DMA_Init+0x154>)
 80058fa:	4413      	add	r3, r2
 80058fc:	4a4b      	ldr	r2, [pc, #300]	; (8005a2c <HAL_DMA_Init+0x158>)
 80058fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005902:	091b      	lsrs	r3, r3, #4
 8005904:	009a      	lsls	r2, r3, #2
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a48      	ldr	r2, [pc, #288]	; (8005a30 <HAL_DMA_Init+0x15c>)
 800590e:	641a      	str	r2, [r3, #64]	; 0x40
 8005910:	e00e      	b.n	8005930 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	4b46      	ldr	r3, [pc, #280]	; (8005a34 <HAL_DMA_Init+0x160>)
 800591a:	4413      	add	r3, r2
 800591c:	4a43      	ldr	r2, [pc, #268]	; (8005a2c <HAL_DMA_Init+0x158>)
 800591e:	fba2 2303 	umull	r2, r3, r2, r3
 8005922:	091b      	lsrs	r3, r3, #4
 8005924:	009a      	lsls	r2, r3, #2
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a42      	ldr	r2, [pc, #264]	; (8005a38 <HAL_DMA_Init+0x164>)
 800592e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005954:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005960:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800596c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800598a:	d039      	beq.n	8005a00 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	4a27      	ldr	r2, [pc, #156]	; (8005a30 <HAL_DMA_Init+0x15c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d11a      	bne.n	80059cc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005996:	4b29      	ldr	r3, [pc, #164]	; (8005a3c <HAL_DMA_Init+0x168>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	f003 031c 	and.w	r3, r3, #28
 80059a2:	210f      	movs	r1, #15
 80059a4:	fa01 f303 	lsl.w	r3, r1, r3
 80059a8:	43db      	mvns	r3, r3
 80059aa:	4924      	ldr	r1, [pc, #144]	; (8005a3c <HAL_DMA_Init+0x168>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80059b0:	4b22      	ldr	r3, [pc, #136]	; (8005a3c <HAL_DMA_Init+0x168>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6859      	ldr	r1, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059bc:	f003 031c 	and.w	r3, r3, #28
 80059c0:	fa01 f303 	lsl.w	r3, r1, r3
 80059c4:	491d      	ldr	r1, [pc, #116]	; (8005a3c <HAL_DMA_Init+0x168>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	600b      	str	r3, [r1, #0]
 80059ca:	e019      	b.n	8005a00 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80059cc:	4b1c      	ldr	r3, [pc, #112]	; (8005a40 <HAL_DMA_Init+0x16c>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d4:	f003 031c 	and.w	r3, r3, #28
 80059d8:	210f      	movs	r1, #15
 80059da:	fa01 f303 	lsl.w	r3, r1, r3
 80059de:	43db      	mvns	r3, r3
 80059e0:	4917      	ldr	r1, [pc, #92]	; (8005a40 <HAL_DMA_Init+0x16c>)
 80059e2:	4013      	ands	r3, r2
 80059e4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80059e6:	4b16      	ldr	r3, [pc, #88]	; (8005a40 <HAL_DMA_Init+0x16c>)
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6859      	ldr	r1, [r3, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f2:	f003 031c 	and.w	r3, r3, #28
 80059f6:	fa01 f303 	lsl.w	r3, r1, r3
 80059fa:	4911      	ldr	r1, [pc, #68]	; (8005a40 <HAL_DMA_Init+0x16c>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	40020407 	.word	0x40020407
 8005a28:	bffdfff8 	.word	0xbffdfff8
 8005a2c:	cccccccd 	.word	0xcccccccd
 8005a30:	40020000 	.word	0x40020000
 8005a34:	bffdfbf8 	.word	0xbffdfbf8
 8005a38:	40020400 	.word	0x40020400
 8005a3c:	400200a8 	.word	0x400200a8
 8005a40:	400204a8 	.word	0x400204a8

08005a44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_DMA_Start_IT+0x20>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e04b      	b.n	8005afc <HAL_DMA_Start_IT+0xb8>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d13a      	bne.n	8005aee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0201 	bic.w	r2, r2, #1
 8005a94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 f95f 	bl	8005d60 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d008      	beq.n	8005abc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 020e 	orr.w	r2, r2, #14
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	e00f      	b.n	8005adc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0204 	bic.w	r2, r2, #4
 8005aca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 020a 	orr.w	r2, r2, #10
 8005ada:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0201 	orr.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	e005      	b.n	8005afa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005af6:	2302      	movs	r3, #2
 8005af8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d008      	beq.n	8005b2e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2204      	movs	r2, #4
 8005b20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e022      	b.n	8005b74 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 020e 	bic.w	r2, r2, #14
 8005b3c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0201 	bic.w	r2, r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b52:	f003 021c 	and.w	r2, r3, #28
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b60:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d005      	beq.n	8005ba4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	73fb      	strb	r3, [r7, #15]
 8005ba2:	e029      	b.n	8005bf8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 020e 	bic.w	r2, r2, #14
 8005bb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0201 	bic.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc8:	f003 021c 	and.w	r2, r3, #28
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8005bd6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	4798      	blx	r3
    }
  }
  return status;
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1e:	f003 031c 	and.w	r3, r3, #28
 8005c22:	2204      	movs	r2, #4
 8005c24:	409a      	lsls	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d026      	beq.n	8005c7c <HAL_DMA_IRQHandler+0x7a>
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d021      	beq.n	8005c7c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d107      	bne.n	8005c56 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0204 	bic.w	r2, r2, #4
 8005c54:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5a:	f003 021c 	and.w	r2, r3, #28
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	2104      	movs	r1, #4
 8005c64:	fa01 f202 	lsl.w	r2, r1, r2
 8005c68:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d071      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005c7a:	e06c      	b.n	8005d56 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c80:	f003 031c 	and.w	r3, r3, #28
 8005c84:	2202      	movs	r2, #2
 8005c86:	409a      	lsls	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d02e      	beq.n	8005cee <HAL_DMA_IRQHandler+0xec>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d029      	beq.n	8005cee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0320 	and.w	r3, r3, #32
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10b      	bne.n	8005cc0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 020a 	bic.w	r2, r2, #10
 8005cb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc4:	f003 021c 	and.w	r2, r3, #28
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	2102      	movs	r1, #2
 8005cce:	fa01 f202 	lsl.w	r2, r1, r2
 8005cd2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d038      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005cec:	e033      	b.n	8005d56 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf2:	f003 031c 	and.w	r3, r3, #28
 8005cf6:	2208      	movs	r2, #8
 8005cf8:	409a      	lsls	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d02a      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x156>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d025      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 020e 	bic.w	r2, r2, #14
 8005d1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d20:	f003 021c 	and.w	r2, r3, #28
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	2101      	movs	r1, #1
 8005d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8005d2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d004      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005d56:	bf00      	nop
 8005d58:	bf00      	nop
}
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d72:	f003 021c 	and.w	r2, r3, #28
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2b10      	cmp	r3, #16
 8005d90:	d108      	bne.n	8005da4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005da2:	e007      	b.n	8005db4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	60da      	str	r2, [r3, #12]
}
 8005db4:	bf00      	nop
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dce:	e17f      	b.n	80060d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 8171 	beq.w	80060ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f003 0303 	and.w	r3, r3, #3
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d005      	beq.n	8005e00 <HAL_GPIO_Init+0x40>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d130      	bne.n	8005e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	43db      	mvns	r3, r3
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4013      	ands	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e36:	2201      	movs	r2, #1
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4013      	ands	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	091b      	lsrs	r3, r3, #4
 8005e4c:	f003 0201 	and.w	r2, r3, #1
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d118      	bne.n	8005ea0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005e74:	2201      	movs	r2, #1
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4013      	ands	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	08db      	lsrs	r3, r3, #3
 8005e8a:	f003 0201 	and.w	r2, r3, #1
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f003 0303 	and.w	r3, r3, #3
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d017      	beq.n	8005edc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	2203      	movs	r2, #3
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d123      	bne.n	8005f30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	08da      	lsrs	r2, r3, #3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3208      	adds	r2, #8
 8005ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	220f      	movs	r2, #15
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	43db      	mvns	r3, r3
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	691a      	ldr	r2, [r3, #16]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	08da      	lsrs	r2, r3, #3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3208      	adds	r2, #8
 8005f2a:	6939      	ldr	r1, [r7, #16]
 8005f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	43db      	mvns	r3, r3
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4013      	ands	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f003 0203 	and.w	r2, r3, #3
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	fa02 f303 	lsl.w	r3, r2, r3
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80ac 	beq.w	80060ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f72:	4b5f      	ldr	r3, [pc, #380]	; (80060f0 <HAL_GPIO_Init+0x330>)
 8005f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f76:	4a5e      	ldr	r2, [pc, #376]	; (80060f0 <HAL_GPIO_Init+0x330>)
 8005f78:	f043 0301 	orr.w	r3, r3, #1
 8005f7c:	6613      	str	r3, [r2, #96]	; 0x60
 8005f7e:	4b5c      	ldr	r3, [pc, #368]	; (80060f0 <HAL_GPIO_Init+0x330>)
 8005f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	60bb      	str	r3, [r7, #8]
 8005f88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005f8a:	4a5a      	ldr	r2, [pc, #360]	; (80060f4 <HAL_GPIO_Init+0x334>)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	089b      	lsrs	r3, r3, #2
 8005f90:	3302      	adds	r3, #2
 8005f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f003 0303 	and.w	r3, r3, #3
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	220f      	movs	r2, #15
 8005fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4013      	ands	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005fb4:	d025      	beq.n	8006002 <HAL_GPIO_Init+0x242>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a4f      	ldr	r2, [pc, #316]	; (80060f8 <HAL_GPIO_Init+0x338>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01f      	beq.n	8005ffe <HAL_GPIO_Init+0x23e>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a4e      	ldr	r2, [pc, #312]	; (80060fc <HAL_GPIO_Init+0x33c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d019      	beq.n	8005ffa <HAL_GPIO_Init+0x23a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a4d      	ldr	r2, [pc, #308]	; (8006100 <HAL_GPIO_Init+0x340>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d013      	beq.n	8005ff6 <HAL_GPIO_Init+0x236>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a4c      	ldr	r2, [pc, #304]	; (8006104 <HAL_GPIO_Init+0x344>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00d      	beq.n	8005ff2 <HAL_GPIO_Init+0x232>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a4b      	ldr	r2, [pc, #300]	; (8006108 <HAL_GPIO_Init+0x348>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d007      	beq.n	8005fee <HAL_GPIO_Init+0x22e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a4a      	ldr	r2, [pc, #296]	; (800610c <HAL_GPIO_Init+0x34c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d101      	bne.n	8005fea <HAL_GPIO_Init+0x22a>
 8005fe6:	2306      	movs	r3, #6
 8005fe8:	e00c      	b.n	8006004 <HAL_GPIO_Init+0x244>
 8005fea:	2307      	movs	r3, #7
 8005fec:	e00a      	b.n	8006004 <HAL_GPIO_Init+0x244>
 8005fee:	2305      	movs	r3, #5
 8005ff0:	e008      	b.n	8006004 <HAL_GPIO_Init+0x244>
 8005ff2:	2304      	movs	r3, #4
 8005ff4:	e006      	b.n	8006004 <HAL_GPIO_Init+0x244>
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e004      	b.n	8006004 <HAL_GPIO_Init+0x244>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e002      	b.n	8006004 <HAL_GPIO_Init+0x244>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <HAL_GPIO_Init+0x244>
 8006002:	2300      	movs	r3, #0
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	f002 0203 	and.w	r2, r2, #3
 800600a:	0092      	lsls	r2, r2, #2
 800600c:	4093      	lsls	r3, r2
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006014:	4937      	ldr	r1, [pc, #220]	; (80060f4 <HAL_GPIO_Init+0x334>)
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	089b      	lsrs	r3, r3, #2
 800601a:	3302      	adds	r3, #2
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006022:	4b3b      	ldr	r3, [pc, #236]	; (8006110 <HAL_GPIO_Init+0x350>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	43db      	mvns	r3, r3
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4013      	ands	r3, r2
 8006030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006046:	4a32      	ldr	r2, [pc, #200]	; (8006110 <HAL_GPIO_Init+0x350>)
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800604c:	4b30      	ldr	r3, [pc, #192]	; (8006110 <HAL_GPIO_Init+0x350>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	43db      	mvns	r3, r3
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4013      	ands	r3, r2
 800605a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006070:	4a27      	ldr	r2, [pc, #156]	; (8006110 <HAL_GPIO_Init+0x350>)
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006076:	4b26      	ldr	r3, [pc, #152]	; (8006110 <HAL_GPIO_Init+0x350>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	43db      	mvns	r3, r3
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	4013      	ands	r3, r2
 8006084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800609a:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <HAL_GPIO_Init+0x350>)
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80060a0:	4b1b      	ldr	r3, [pc, #108]	; (8006110 <HAL_GPIO_Init+0x350>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	43db      	mvns	r3, r3
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	4013      	ands	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80060c4:	4a12      	ldr	r2, [pc, #72]	; (8006110 <HAL_GPIO_Init+0x350>)
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	3301      	adds	r3, #1
 80060ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	fa22 f303 	lsr.w	r3, r2, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f47f ae78 	bne.w	8005dd0 <HAL_GPIO_Init+0x10>
  }
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40021000 	.word	0x40021000
 80060f4:	40010000 	.word	0x40010000
 80060f8:	48000400 	.word	0x48000400
 80060fc:	48000800 	.word	0x48000800
 8006100:	48000c00 	.word	0x48000c00
 8006104:	48001000 	.word	0x48001000
 8006108:	48001400 	.word	0x48001400
 800610c:	48001800 	.word	0x48001800
 8006110:	40010400 	.word	0x40010400

08006114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	807b      	strh	r3, [r7, #2]
 8006120:	4613      	mov	r3, r2
 8006122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006124:	787b      	ldrb	r3, [r7, #1]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800612a:	887a      	ldrh	r2, [r7, #2]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006130:	e002      	b.n	8006138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006132:	887a      	ldrh	r2, [r7, #2]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	4603      	mov	r3, r0
 800614c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800614e:	4b08      	ldr	r3, [pc, #32]	; (8006170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006150:	695a      	ldr	r2, [r3, #20]
 8006152:	88fb      	ldrh	r3, [r7, #6]
 8006154:	4013      	ands	r3, r2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d006      	beq.n	8006168 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800615a:	4a05      	ldr	r2, [pc, #20]	; (8006170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800615c:	88fb      	ldrh	r3, [r7, #6]
 800615e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	4618      	mov	r0, r3
 8006164:	f7fc fca2 	bl	8002aac <HAL_GPIO_EXTI_Callback>
  }
}
 8006168:	bf00      	nop
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	40010400 	.word	0x40010400

08006174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e08d      	b.n	80062a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fd fa1a 	bl	80035d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2224      	movs	r2, #36	; 0x24
 80061a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0201 	bic.w	r2, r2, #1
 80061b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d107      	bne.n	80061ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ea:	609a      	str	r2, [r3, #8]
 80061ec:	e006      	b.n	80061fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80061fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d108      	bne.n	8006216 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006212:	605a      	str	r2, [r3, #4]
 8006214:	e007      	b.n	8006226 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006224:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006238:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006248:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69d9      	ldr	r1, [r3, #28]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a1a      	ldr	r2, [r3, #32]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2220      	movs	r2, #32
 800628e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	461a      	mov	r2, r3
 80062b8:	460b      	mov	r3, r1
 80062ba:	817b      	strh	r3, [r7, #10]
 80062bc:	4613      	mov	r3, r2
 80062be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	f040 80fd 	bne.w	80064c8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_I2C_Master_Transmit+0x30>
 80062d8:	2302      	movs	r3, #2
 80062da:	e0f6      	b.n	80064ca <HAL_I2C_Master_Transmit+0x21e>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062e4:	f7fd fe24 	bl	8003f30 <HAL_GetTick>
 80062e8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	2319      	movs	r3, #25
 80062f0:	2201      	movs	r2, #1
 80062f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 fce0 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e0e1      	b.n	80064ca <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2221      	movs	r2, #33	; 0x21
 800630a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2210      	movs	r2, #16
 8006312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	893a      	ldrh	r2, [r7, #8]
 8006326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006332:	b29b      	uxth	r3, r3
 8006334:	2bff      	cmp	r3, #255	; 0xff
 8006336:	d906      	bls.n	8006346 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	22ff      	movs	r2, #255	; 0xff
 800633c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800633e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	e007      	b.n	8006356 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006350:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006354:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800635a:	2b00      	cmp	r3, #0
 800635c:	d024      	beq.n	80063a8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	781a      	ldrb	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006378:	b29b      	uxth	r3, r3
 800637a:	3b01      	subs	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006386:	3b01      	subs	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006392:	b2db      	uxtb	r3, r3
 8006394:	3301      	adds	r3, #1
 8006396:	b2da      	uxtb	r2, r3
 8006398:	8979      	ldrh	r1, [r7, #10]
 800639a:	4b4e      	ldr	r3, [pc, #312]	; (80064d4 <HAL_I2C_Master_Transmit+0x228>)
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 fedb 	bl	800715c <I2C_TransferConfig>
 80063a6:	e066      	b.n	8006476 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	8979      	ldrh	r1, [r7, #10]
 80063b0:	4b48      	ldr	r3, [pc, #288]	; (80064d4 <HAL_I2C_Master_Transmit+0x228>)
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 fed0 	bl	800715c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80063bc:	e05b      	b.n	8006476 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	6a39      	ldr	r1, [r7, #32]
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 fcd3 	bl	8006d6e <I2C_WaitOnTXISFlagUntilTimeout>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e07b      	b.n	80064ca <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	781a      	ldrb	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d034      	beq.n	8006476 <HAL_I2C_Master_Transmit+0x1ca>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006410:	2b00      	cmp	r3, #0
 8006412:	d130      	bne.n	8006476 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	2200      	movs	r2, #0
 800641c:	2180      	movs	r1, #128	; 0x80
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 fc4c 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e04d      	b.n	80064ca <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006432:	b29b      	uxth	r3, r3
 8006434:	2bff      	cmp	r3, #255	; 0xff
 8006436:	d90e      	bls.n	8006456 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	22ff      	movs	r2, #255	; 0xff
 800643c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006442:	b2da      	uxtb	r2, r3
 8006444:	8979      	ldrh	r1, [r7, #10]
 8006446:	2300      	movs	r3, #0
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fe84 	bl	800715c <I2C_TransferConfig>
 8006454:	e00f      	b.n	8006476 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645a:	b29a      	uxth	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006464:	b2da      	uxtb	r2, r3
 8006466:	8979      	ldrh	r1, [r7, #10]
 8006468:	2300      	movs	r3, #0
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 fe73 	bl	800715c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800647a:	b29b      	uxth	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d19e      	bne.n	80063be <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	6a39      	ldr	r1, [r7, #32]
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fcb9 	bl	8006dfc <I2C_WaitOnSTOPFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e01a      	b.n	80064ca <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2220      	movs	r2, #32
 800649a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6859      	ldr	r1, [r3, #4]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <HAL_I2C_Master_Transmit+0x22c>)
 80064a8:	400b      	ands	r3, r1
 80064aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	e000      	b.n	80064ca <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80064c8:	2302      	movs	r3, #2
  }
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	80002000 	.word	0x80002000
 80064d8:	fe00e800 	.word	0xfe00e800

080064dc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	607a      	str	r2, [r7, #4]
 80064e6:	461a      	mov	r2, r3
 80064e8:	460b      	mov	r3, r1
 80064ea:	817b      	strh	r3, [r7, #10]
 80064ec:	4613      	mov	r3, r2
 80064ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	f040 80db 	bne.w	80066b4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_I2C_Master_Receive+0x30>
 8006508:	2302      	movs	r3, #2
 800650a:	e0d4      	b.n	80066b6 <HAL_I2C_Master_Receive+0x1da>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006514:	f7fd fd0c 	bl	8003f30 <HAL_GetTick>
 8006518:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	2319      	movs	r3, #25
 8006520:	2201      	movs	r2, #1
 8006522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fbc8 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e0bf      	b.n	80066b6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2222      	movs	r2, #34	; 0x22
 800653a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2210      	movs	r2, #16
 8006542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	893a      	ldrh	r2, [r7, #8]
 8006556:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006562:	b29b      	uxth	r3, r3
 8006564:	2bff      	cmp	r3, #255	; 0xff
 8006566:	d90e      	bls.n	8006586 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2201      	movs	r2, #1
 800656c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006572:	b2da      	uxtb	r2, r3
 8006574:	8979      	ldrh	r1, [r7, #10]
 8006576:	4b52      	ldr	r3, [pc, #328]	; (80066c0 <HAL_I2C_Master_Receive+0x1e4>)
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 fdec 	bl	800715c <I2C_TransferConfig>
 8006584:	e06d      	b.n	8006662 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006594:	b2da      	uxtb	r2, r3
 8006596:	8979      	ldrh	r1, [r7, #10]
 8006598:	4b49      	ldr	r3, [pc, #292]	; (80066c0 <HAL_I2C_Master_Receive+0x1e4>)
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 fddb 	bl	800715c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80065a6:	e05c      	b.n	8006662 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	6a39      	ldr	r1, [r7, #32]
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 fc69 	bl	8006e84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e07c      	b.n	80066b6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d034      	beq.n	8006662 <HAL_I2C_Master_Receive+0x186>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d130      	bne.n	8006662 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	2200      	movs	r2, #0
 8006608:	2180      	movs	r1, #128	; 0x80
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fb56 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e04d      	b.n	80066b6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661e:	b29b      	uxth	r3, r3
 8006620:	2bff      	cmp	r3, #255	; 0xff
 8006622:	d90e      	bls.n	8006642 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	22ff      	movs	r2, #255	; 0xff
 8006628:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662e:	b2da      	uxtb	r2, r3
 8006630:	8979      	ldrh	r1, [r7, #10]
 8006632:	2300      	movs	r3, #0
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 fd8e 	bl	800715c <I2C_TransferConfig>
 8006640:	e00f      	b.n	8006662 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006646:	b29a      	uxth	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006650:	b2da      	uxtb	r2, r3
 8006652:	8979      	ldrh	r1, [r7, #10]
 8006654:	2300      	movs	r3, #0
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fd7d 	bl	800715c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006666:	b29b      	uxth	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d19d      	bne.n	80065a8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	6a39      	ldr	r1, [r7, #32]
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 fbc3 	bl	8006dfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e01a      	b.n	80066b6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2220      	movs	r2, #32
 8006686:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6859      	ldr	r1, [r3, #4]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4b0c      	ldr	r3, [pc, #48]	; (80066c4 <HAL_I2C_Master_Receive+0x1e8>)
 8006694:	400b      	ands	r3, r1
 8006696:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2220      	movs	r2, #32
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e000      	b.n	80066b6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
  }
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	80002400 	.word	0x80002400
 80066c4:	fe00e800 	.word	0xfe00e800

080066c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	4608      	mov	r0, r1
 80066d2:	4611      	mov	r1, r2
 80066d4:	461a      	mov	r2, r3
 80066d6:	4603      	mov	r3, r0
 80066d8:	817b      	strh	r3, [r7, #10]
 80066da:	460b      	mov	r3, r1
 80066dc:	813b      	strh	r3, [r7, #8]
 80066de:	4613      	mov	r3, r2
 80066e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	f040 80f9 	bne.w	80068e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <HAL_I2C_Mem_Write+0x34>
 80066f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d105      	bne.n	8006708 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006702:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e0ed      	b.n	80068e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800670e:	2b01      	cmp	r3, #1
 8006710:	d101      	bne.n	8006716 <HAL_I2C_Mem_Write+0x4e>
 8006712:	2302      	movs	r3, #2
 8006714:	e0e6      	b.n	80068e4 <HAL_I2C_Mem_Write+0x21c>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800671e:	f7fd fc07 	bl	8003f30 <HAL_GetTick>
 8006722:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	2319      	movs	r3, #25
 800672a:	2201      	movs	r2, #1
 800672c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fac3 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e0d1      	b.n	80068e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2221      	movs	r2, #33	; 0x21
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2240      	movs	r2, #64	; 0x40
 800674c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6a3a      	ldr	r2, [r7, #32]
 800675a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006760:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006768:	88f8      	ldrh	r0, [r7, #6]
 800676a:	893a      	ldrh	r2, [r7, #8]
 800676c:	8979      	ldrh	r1, [r7, #10]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	4603      	mov	r3, r0
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 f9d3 	bl	8006b24 <I2C_RequestMemoryWrite>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e0a9      	b.n	80068e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006794:	b29b      	uxth	r3, r3
 8006796:	2bff      	cmp	r3, #255	; 0xff
 8006798:	d90e      	bls.n	80067b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	22ff      	movs	r2, #255	; 0xff
 800679e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	8979      	ldrh	r1, [r7, #10]
 80067a8:	2300      	movs	r3, #0
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 fcd3 	bl	800715c <I2C_TransferConfig>
 80067b6:	e00f      	b.n	80067d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	8979      	ldrh	r1, [r7, #10]
 80067ca:	2300      	movs	r3, #0
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 fcc2 	bl	800715c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 fac6 	bl	8006d6e <I2C_WaitOnTXISFlagUntilTimeout>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e07b      	b.n	80068e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	781a      	ldrb	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006806:	b29b      	uxth	r3, r3
 8006808:	3b01      	subs	r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006820:	b29b      	uxth	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d034      	beq.n	8006890 <HAL_I2C_Mem_Write+0x1c8>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800682a:	2b00      	cmp	r3, #0
 800682c:	d130      	bne.n	8006890 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	2200      	movs	r2, #0
 8006836:	2180      	movs	r1, #128	; 0x80
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 fa3f 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e04d      	b.n	80068e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684c:	b29b      	uxth	r3, r3
 800684e:	2bff      	cmp	r3, #255	; 0xff
 8006850:	d90e      	bls.n	8006870 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	22ff      	movs	r2, #255	; 0xff
 8006856:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685c:	b2da      	uxtb	r2, r3
 800685e:	8979      	ldrh	r1, [r7, #10]
 8006860:	2300      	movs	r3, #0
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 fc77 	bl	800715c <I2C_TransferConfig>
 800686e:	e00f      	b.n	8006890 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800687e:	b2da      	uxtb	r2, r3
 8006880:	8979      	ldrh	r1, [r7, #10]
 8006882:	2300      	movs	r3, #0
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 fc66 	bl	800715c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d19e      	bne.n	80067d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 faac 	bl	8006dfc <I2C_WaitOnSTOPFlagUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e01a      	b.n	80068e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2220      	movs	r2, #32
 80068b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6859      	ldr	r1, [r3, #4]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <HAL_I2C_Mem_Write+0x224>)
 80068c2:	400b      	ands	r3, r1
 80068c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	e000      	b.n	80068e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80068e2:	2302      	movs	r3, #2
  }
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	fe00e800 	.word	0xfe00e800

080068f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af02      	add	r7, sp, #8
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	4608      	mov	r0, r1
 80068fa:	4611      	mov	r1, r2
 80068fc:	461a      	mov	r2, r3
 80068fe:	4603      	mov	r3, r0
 8006900:	817b      	strh	r3, [r7, #10]
 8006902:	460b      	mov	r3, r1
 8006904:	813b      	strh	r3, [r7, #8]
 8006906:	4613      	mov	r3, r2
 8006908:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b20      	cmp	r3, #32
 8006914:	f040 80fd 	bne.w	8006b12 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <HAL_I2C_Mem_Read+0x34>
 800691e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006920:	2b00      	cmp	r3, #0
 8006922:	d105      	bne.n	8006930 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800692a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e0f1      	b.n	8006b14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006936:	2b01      	cmp	r3, #1
 8006938:	d101      	bne.n	800693e <HAL_I2C_Mem_Read+0x4e>
 800693a:	2302      	movs	r3, #2
 800693c:	e0ea      	b.n	8006b14 <HAL_I2C_Mem_Read+0x224>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006946:	f7fd faf3 	bl	8003f30 <HAL_GetTick>
 800694a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	2319      	movs	r3, #25
 8006952:	2201      	movs	r2, #1
 8006954:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 f9af 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e0d5      	b.n	8006b14 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2222      	movs	r2, #34	; 0x22
 800696c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2240      	movs	r2, #64	; 0x40
 8006974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a3a      	ldr	r2, [r7, #32]
 8006982:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006988:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006990:	88f8      	ldrh	r0, [r7, #6]
 8006992:	893a      	ldrh	r2, [r7, #8]
 8006994:	8979      	ldrh	r1, [r7, #10]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	9301      	str	r3, [sp, #4]
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	4603      	mov	r3, r0
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 f913 	bl	8006bcc <I2C_RequestMemoryRead>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e0ad      	b.n	8006b14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2bff      	cmp	r3, #255	; 0xff
 80069c0:	d90e      	bls.n	80069e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2201      	movs	r2, #1
 80069c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	8979      	ldrh	r1, [r7, #10]
 80069d0:	4b52      	ldr	r3, [pc, #328]	; (8006b1c <HAL_I2C_Mem_Read+0x22c>)
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 fbbf 	bl	800715c <I2C_TransferConfig>
 80069de:	e00f      	b.n	8006a00 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	8979      	ldrh	r1, [r7, #10]
 80069f2:	4b4a      	ldr	r3, [pc, #296]	; (8006b1c <HAL_I2C_Mem_Read+0x22c>)
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 fbae 	bl	800715c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	2200      	movs	r2, #0
 8006a08:	2104      	movs	r1, #4
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f956 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e07c      	b.n	8006b14 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a36:	3b01      	subs	r3, #1
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d034      	beq.n	8006ac0 <HAL_I2C_Mem_Read+0x1d0>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d130      	bne.n	8006ac0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	2200      	movs	r2, #0
 8006a66:	2180      	movs	r1, #128	; 0x80
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f927 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e04d      	b.n	8006b14 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2bff      	cmp	r3, #255	; 0xff
 8006a80:	d90e      	bls.n	8006aa0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	8979      	ldrh	r1, [r7, #10]
 8006a90:	2300      	movs	r3, #0
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 fb5f 	bl	800715c <I2C_TransferConfig>
 8006a9e:	e00f      	b.n	8006ac0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	8979      	ldrh	r1, [r7, #10]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 fb4e 	bl	800715c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d19a      	bne.n	8006a00 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 f994 	bl	8006dfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e01a      	b.n	8006b14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6859      	ldr	r1, [r3, #4]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <HAL_I2C_Mem_Read+0x230>)
 8006af2:	400b      	ands	r3, r1
 8006af4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e000      	b.n	8006b14 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006b12:	2302      	movs	r3, #2
  }
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	80002400 	.word	0x80002400
 8006b20:	fe00e800 	.word	0xfe00e800

08006b24 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	4611      	mov	r1, r2
 8006b30:	461a      	mov	r2, r3
 8006b32:	4603      	mov	r3, r0
 8006b34:	817b      	strh	r3, [r7, #10]
 8006b36:	460b      	mov	r3, r1
 8006b38:	813b      	strh	r3, [r7, #8]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	8979      	ldrh	r1, [r7, #10]
 8006b44:	4b20      	ldr	r3, [pc, #128]	; (8006bc8 <I2C_RequestMemoryWrite+0xa4>)
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 fb05 	bl	800715c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	69b9      	ldr	r1, [r7, #24]
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 f909 	bl	8006d6e <I2C_WaitOnTXISFlagUntilTimeout>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e02c      	b.n	8006bc0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d105      	bne.n	8006b78 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b6c:	893b      	ldrh	r3, [r7, #8]
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	629a      	str	r2, [r3, #40]	; 0x28
 8006b76:	e015      	b.n	8006ba4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b78:	893b      	ldrh	r3, [r7, #8]
 8006b7a:	0a1b      	lsrs	r3, r3, #8
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b86:	69fa      	ldr	r2, [r7, #28]
 8006b88:	69b9      	ldr	r1, [r7, #24]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 f8ef 	bl	8006d6e <I2C_WaitOnTXISFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e012      	b.n	8006bc0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b9a:	893b      	ldrh	r3, [r7, #8]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	2200      	movs	r2, #0
 8006bac:	2180      	movs	r1, #128	; 0x80
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 f884 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	80002000 	.word	0x80002000

08006bcc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	817b      	strh	r3, [r7, #10]
 8006bde:	460b      	mov	r3, r1
 8006be0:	813b      	strh	r3, [r7, #8]
 8006be2:	4613      	mov	r3, r2
 8006be4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	8979      	ldrh	r1, [r7, #10]
 8006bec:	4b20      	ldr	r3, [pc, #128]	; (8006c70 <I2C_RequestMemoryRead+0xa4>)
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 fab2 	bl	800715c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	69b9      	ldr	r1, [r7, #24]
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 f8b6 	bl	8006d6e <I2C_WaitOnTXISFlagUntilTimeout>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e02c      	b.n	8006c66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c0c:	88fb      	ldrh	r3, [r7, #6]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d105      	bne.n	8006c1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c12:	893b      	ldrh	r3, [r7, #8]
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c1c:	e015      	b.n	8006c4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c1e:	893b      	ldrh	r3, [r7, #8]
 8006c20:	0a1b      	lsrs	r3, r3, #8
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	69b9      	ldr	r1, [r7, #24]
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 f89c 	bl	8006d6e <I2C_WaitOnTXISFlagUntilTimeout>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e012      	b.n	8006c66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c40:	893b      	ldrh	r3, [r7, #8]
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2200      	movs	r2, #0
 8006c52:	2140      	movs	r1, #64	; 0x40
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 f831 	bl	8006cbc <I2C_WaitOnFlagUntilTimeout>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e000      	b.n	8006c66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	80002000 	.word	0x80002000

08006c74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d103      	bne.n	8006c92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d007      	beq.n	8006cb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	619a      	str	r2, [r3, #24]
  }
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ccc:	e03b      	b.n	8006d46 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 f962 	bl	8006f9c <I2C_IsErrorOccurred>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e041      	b.n	8006d66 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce8:	d02d      	beq.n	8006d46 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cea:	f7fd f921 	bl	8003f30 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d302      	bcc.n	8006d00 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d122      	bne.n	8006d46 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	4013      	ands	r3, r2
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	bf0c      	ite	eq
 8006d10:	2301      	moveq	r3, #1
 8006d12:	2300      	movne	r3, #0
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	461a      	mov	r2, r3
 8006d18:	79fb      	ldrb	r3, [r7, #7]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d113      	bne.n	8006d46 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d22:	f043 0220 	orr.w	r2, r3, #32
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e00f      	b.n	8006d66 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	699a      	ldr	r2, [r3, #24]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	4013      	ands	r3, r2
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	bf0c      	ite	eq
 8006d56:	2301      	moveq	r3, #1
 8006d58:	2300      	movne	r3, #0
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	79fb      	ldrb	r3, [r7, #7]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d0b4      	beq.n	8006cce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d7a:	e033      	b.n	8006de4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	68b9      	ldr	r1, [r7, #8]
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 f90b 	bl	8006f9c <I2C_IsErrorOccurred>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e031      	b.n	8006df4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d96:	d025      	beq.n	8006de4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d98:	f7fd f8ca 	bl	8003f30 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d302      	bcc.n	8006dae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d11a      	bne.n	8006de4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d013      	beq.n	8006de4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc0:	f043 0220 	orr.w	r2, r3, #32
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e007      	b.n	8006df4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d1c4      	bne.n	8006d7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e08:	e02f      	b.n	8006e6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 f8c4 	bl	8006f9c <I2C_IsErrorOccurred>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e02d      	b.n	8006e7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e1e:	f7fd f887 	bl	8003f30 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d302      	bcc.n	8006e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d11a      	bne.n	8006e6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	f003 0320 	and.w	r3, r3, #32
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d013      	beq.n	8006e6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e46:	f043 0220 	orr.w	r2, r3, #32
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e007      	b.n	8006e7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	f003 0320 	and.w	r3, r3, #32
 8006e74:	2b20      	cmp	r3, #32
 8006e76:	d1c8      	bne.n	8006e0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
	...

08006e84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006e94:	e071      	b.n	8006f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	68b9      	ldr	r1, [r7, #8]
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 f87e 	bl	8006f9c <I2C_IsErrorOccurred>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	d13b      	bne.n	8006f30 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d138      	bne.n	8006f30 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d105      	bne.n	8006ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	f003 0310 	and.w	r3, r3, #16
 8006ee2:	2b10      	cmp	r3, #16
 8006ee4:	d121      	bne.n	8006f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2210      	movs	r2, #16
 8006eec:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2204      	movs	r2, #4
 8006ef2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6859      	ldr	r1, [r3, #4]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	4b24      	ldr	r3, [pc, #144]	; (8006f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006f08:	400b      	ands	r3, r1
 8006f0a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	75fb      	strb	r3, [r7, #23]
 8006f28:	e002      	b.n	8006f30 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006f30:	f7fc fffe 	bl	8003f30 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d302      	bcc.n	8006f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d119      	bne.n	8006f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d116      	bne.n	8006f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	2b04      	cmp	r3, #4
 8006f58:	d00f      	beq.n	8006f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5e:	f043 0220 	orr.w	r2, r3, #32
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	d002      	beq.n	8006f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d083      	beq.n	8006e96 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	fe00e800 	.word	0xfe00e800

08006f9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08a      	sub	sp, #40	; 0x28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	f003 0310 	and.w	r3, r3, #16
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d068      	beq.n	800709a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2210      	movs	r2, #16
 8006fce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fd0:	e049      	b.n	8007066 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd8:	d045      	beq.n	8007066 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006fda:	f7fc ffa9 	bl	8003f30 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d302      	bcc.n	8006ff0 <I2C_IsErrorOccurred+0x54>
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d13a      	bne.n	8007066 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ffa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007002:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800700e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007012:	d121      	bne.n	8007058 <I2C_IsErrorOccurred+0xbc>
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800701a:	d01d      	beq.n	8007058 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800701c:	7cfb      	ldrb	r3, [r7, #19]
 800701e:	2b20      	cmp	r3, #32
 8007020:	d01a      	beq.n	8007058 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007030:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007032:	f7fc ff7d 	bl	8003f30 <HAL_GetTick>
 8007036:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007038:	e00e      	b.n	8007058 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800703a:	f7fc ff79 	bl	8003f30 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	2b19      	cmp	r3, #25
 8007046:	d907      	bls.n	8007058 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	f043 0320 	orr.w	r3, r3, #32
 800704e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007056:	e006      	b.n	8007066 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b20      	cmp	r3, #32
 8007064:	d1e9      	bne.n	800703a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	f003 0320 	and.w	r3, r3, #32
 8007070:	2b20      	cmp	r3, #32
 8007072:	d003      	beq.n	800707c <I2C_IsErrorOccurred+0xe0>
 8007074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007078:	2b00      	cmp	r3, #0
 800707a:	d0aa      	beq.n	8006fd2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800707c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007080:	2b00      	cmp	r3, #0
 8007082:	d103      	bne.n	800708c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2220      	movs	r2, #32
 800708a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	f043 0304 	orr.w	r3, r3, #4
 8007092:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00b      	beq.n	80070c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	f043 0301 	orr.w	r3, r3, #1
 80070b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00b      	beq.n	80070e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	f043 0308 	orr.w	r3, r3, #8
 80070d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00b      	beq.n	8007108 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	f043 0302 	orr.w	r3, r3, #2
 80070f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007100:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800710c:	2b00      	cmp	r3, #0
 800710e:	d01c      	beq.n	800714a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f7ff fdaf 	bl	8006c74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6859      	ldr	r1, [r3, #4]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	4b0d      	ldr	r3, [pc, #52]	; (8007158 <I2C_IsErrorOccurred+0x1bc>)
 8007122:	400b      	ands	r3, r1
 8007124:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	431a      	orrs	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2220      	movs	r2, #32
 8007136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800714a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800714e:	4618      	mov	r0, r3
 8007150:	3728      	adds	r7, #40	; 0x28
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	fe00e800 	.word	0xfe00e800

0800715c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	607b      	str	r3, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	817b      	strh	r3, [r7, #10]
 800716a:	4613      	mov	r3, r2
 800716c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800716e:	897b      	ldrh	r3, [r7, #10]
 8007170:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007174:	7a7b      	ldrb	r3, [r7, #9]
 8007176:	041b      	lsls	r3, r3, #16
 8007178:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800717c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	4313      	orrs	r3, r2
 8007186:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800718a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	0d5b      	lsrs	r3, r3, #21
 8007196:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800719a:	4b08      	ldr	r3, [pc, #32]	; (80071bc <I2C_TransferConfig+0x60>)
 800719c:	430b      	orrs	r3, r1
 800719e:	43db      	mvns	r3, r3
 80071a0:	ea02 0103 	and.w	r1, r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80071ae:	bf00      	nop
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	03ff63ff 	.word	0x03ff63ff

080071c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	d138      	bne.n	8007248 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e032      	b.n	800724a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2224      	movs	r2, #36	; 0x24
 80071f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0201 	bic.w	r2, r2, #1
 8007202:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007212:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6819      	ldr	r1, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0201 	orr.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2220      	movs	r2, #32
 8007238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	e000      	b.n	800724a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007248:	2302      	movs	r3, #2
  }
}
 800724a:	4618      	mov	r0, r3
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007256:	b480      	push	{r7}
 8007258:	b085      	sub	sp, #20
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b20      	cmp	r3, #32
 800726a:	d139      	bne.n	80072e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007272:	2b01      	cmp	r3, #1
 8007274:	d101      	bne.n	800727a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007276:	2302      	movs	r3, #2
 8007278:	e033      	b.n	80072e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2224      	movs	r2, #36	; 0x24
 8007286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80072a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	021b      	lsls	r3, r3, #8
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0201 	orr.w	r2, r2, #1
 80072ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	e000      	b.n	80072e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80072e0:	2302      	movs	r3, #2
  }
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
	...

080072f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80072f0:	b480      	push	{r7}
 80072f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80072f4:	4b04      	ldr	r3, [pc, #16]	; (8007308 <HAL_PWREx_GetVoltageRange+0x18>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	40007000 	.word	0x40007000

0800730c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800731a:	d130      	bne.n	800737e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800731c:	4b23      	ldr	r3, [pc, #140]	; (80073ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007328:	d038      	beq.n	800739c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800732a:	4b20      	ldr	r3, [pc, #128]	; (80073ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007332:	4a1e      	ldr	r2, [pc, #120]	; (80073ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007338:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800733a:	4b1d      	ldr	r3, [pc, #116]	; (80073b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2232      	movs	r2, #50	; 0x32
 8007340:	fb02 f303 	mul.w	r3, r2, r3
 8007344:	4a1b      	ldr	r2, [pc, #108]	; (80073b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007346:	fba2 2303 	umull	r2, r3, r2, r3
 800734a:	0c9b      	lsrs	r3, r3, #18
 800734c:	3301      	adds	r3, #1
 800734e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007350:	e002      	b.n	8007358 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3b01      	subs	r3, #1
 8007356:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007358:	4b14      	ldr	r3, [pc, #80]	; (80073ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007364:	d102      	bne.n	800736c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1f2      	bne.n	8007352 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800736c:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007378:	d110      	bne.n	800739c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e00f      	b.n	800739e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800737e:	4b0b      	ldr	r3, [pc, #44]	; (80073ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800738a:	d007      	beq.n	800739c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800738c:	4b07      	ldr	r3, [pc, #28]	; (80073ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007394:	4a05      	ldr	r2, [pc, #20]	; (80073ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800739a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	40007000 	.word	0x40007000
 80073b0:	200000c8 	.word	0x200000c8
 80073b4:	431bde83 	.word	0x431bde83

080073b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e3ca      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073ca:	4b97      	ldr	r3, [pc, #604]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 030c 	and.w	r3, r3, #12
 80073d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073d4:	4b94      	ldr	r3, [pc, #592]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f003 0303 	and.w	r3, r3, #3
 80073dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0310 	and.w	r3, r3, #16
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 80e4 	beq.w	80075b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d007      	beq.n	8007402 <HAL_RCC_OscConfig+0x4a>
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	2b0c      	cmp	r3, #12
 80073f6:	f040 808b 	bne.w	8007510 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	f040 8087 	bne.w	8007510 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007402:	4b89      	ldr	r3, [pc, #548]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <HAL_RCC_OscConfig+0x62>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e3a2      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1a      	ldr	r2, [r3, #32]
 800741e:	4b82      	ldr	r3, [pc, #520]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0308 	and.w	r3, r3, #8
 8007426:	2b00      	cmp	r3, #0
 8007428:	d004      	beq.n	8007434 <HAL_RCC_OscConfig+0x7c>
 800742a:	4b7f      	ldr	r3, [pc, #508]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007432:	e005      	b.n	8007440 <HAL_RCC_OscConfig+0x88>
 8007434:	4b7c      	ldr	r3, [pc, #496]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800743a:	091b      	lsrs	r3, r3, #4
 800743c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007440:	4293      	cmp	r3, r2
 8007442:	d223      	bcs.n	800748c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	4618      	mov	r0, r3
 800744a:	f000 fd87 	bl	8007f5c <RCC_SetFlashLatencyFromMSIRange>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e383      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007458:	4b73      	ldr	r3, [pc, #460]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a72      	ldr	r2, [pc, #456]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 800745e:	f043 0308 	orr.w	r3, r3, #8
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	4b70      	ldr	r3, [pc, #448]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	496d      	ldr	r1, [pc, #436]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007472:	4313      	orrs	r3, r2
 8007474:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007476:	4b6c      	ldr	r3, [pc, #432]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	021b      	lsls	r3, r3, #8
 8007484:	4968      	ldr	r1, [pc, #416]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007486:	4313      	orrs	r3, r2
 8007488:	604b      	str	r3, [r1, #4]
 800748a:	e025      	b.n	80074d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800748c:	4b66      	ldr	r3, [pc, #408]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a65      	ldr	r2, [pc, #404]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007492:	f043 0308 	orr.w	r3, r3, #8
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	4b63      	ldr	r3, [pc, #396]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	4960      	ldr	r1, [pc, #384]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074aa:	4b5f      	ldr	r3, [pc, #380]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	021b      	lsls	r3, r3, #8
 80074b8:	495b      	ldr	r1, [pc, #364]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d109      	bne.n	80074d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 fd47 	bl	8007f5c <RCC_SetFlashLatencyFromMSIRange>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e343      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80074d8:	f000 fc4a 	bl	8007d70 <HAL_RCC_GetSysClockFreq>
 80074dc:	4602      	mov	r2, r0
 80074de:	4b52      	ldr	r3, [pc, #328]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	091b      	lsrs	r3, r3, #4
 80074e4:	f003 030f 	and.w	r3, r3, #15
 80074e8:	4950      	ldr	r1, [pc, #320]	; (800762c <HAL_RCC_OscConfig+0x274>)
 80074ea:	5ccb      	ldrb	r3, [r1, r3]
 80074ec:	f003 031f 	and.w	r3, r3, #31
 80074f0:	fa22 f303 	lsr.w	r3, r2, r3
 80074f4:	4a4e      	ldr	r2, [pc, #312]	; (8007630 <HAL_RCC_OscConfig+0x278>)
 80074f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80074f8:	4b4e      	ldr	r3, [pc, #312]	; (8007634 <HAL_RCC_OscConfig+0x27c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fc fb23 	bl	8003b48 <HAL_InitTick>
 8007502:	4603      	mov	r3, r0
 8007504:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d052      	beq.n	80075b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	e327      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d032      	beq.n	800757e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007518:	4b43      	ldr	r3, [pc, #268]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a42      	ldr	r2, [pc, #264]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 800751e:	f043 0301 	orr.w	r3, r3, #1
 8007522:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007524:	f7fc fd04 	bl	8003f30 <HAL_GetTick>
 8007528:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800752a:	e008      	b.n	800753e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800752c:	f7fc fd00 	bl	8003f30 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	2b02      	cmp	r3, #2
 8007538:	d901      	bls.n	800753e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e310      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800753e:	4b3a      	ldr	r3, [pc, #232]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0f0      	beq.n	800752c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800754a:	4b37      	ldr	r3, [pc, #220]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a36      	ldr	r2, [pc, #216]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007550:	f043 0308 	orr.w	r3, r3, #8
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	4b34      	ldr	r3, [pc, #208]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	4931      	ldr	r1, [pc, #196]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007564:	4313      	orrs	r3, r2
 8007566:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007568:	4b2f      	ldr	r3, [pc, #188]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	021b      	lsls	r3, r3, #8
 8007576:	492c      	ldr	r1, [pc, #176]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007578:	4313      	orrs	r3, r2
 800757a:	604b      	str	r3, [r1, #4]
 800757c:	e01a      	b.n	80075b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800757e:	4b2a      	ldr	r3, [pc, #168]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a29      	ldr	r2, [pc, #164]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007584:	f023 0301 	bic.w	r3, r3, #1
 8007588:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800758a:	f7fc fcd1 	bl	8003f30 <HAL_GetTick>
 800758e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007590:	e008      	b.n	80075a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007592:	f7fc fccd 	bl	8003f30 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b02      	cmp	r3, #2
 800759e:	d901      	bls.n	80075a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e2dd      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80075a4:	4b20      	ldr	r3, [pc, #128]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1f0      	bne.n	8007592 <HAL_RCC_OscConfig+0x1da>
 80075b0:	e000      	b.n	80075b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80075b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d074      	beq.n	80076aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	2b08      	cmp	r3, #8
 80075c4:	d005      	beq.n	80075d2 <HAL_RCC_OscConfig+0x21a>
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	2b0c      	cmp	r3, #12
 80075ca:	d10e      	bne.n	80075ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d10b      	bne.n	80075ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075d2:	4b15      	ldr	r3, [pc, #84]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d064      	beq.n	80076a8 <HAL_RCC_OscConfig+0x2f0>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d160      	bne.n	80076a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e2ba      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075f2:	d106      	bne.n	8007602 <HAL_RCC_OscConfig+0x24a>
 80075f4:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a0b      	ldr	r2, [pc, #44]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 80075fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	e026      	b.n	8007650 <HAL_RCC_OscConfig+0x298>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800760a:	d115      	bne.n	8007638 <HAL_RCC_OscConfig+0x280>
 800760c:	4b06      	ldr	r3, [pc, #24]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a05      	ldr	r2, [pc, #20]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 8007612:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	4b03      	ldr	r3, [pc, #12]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a02      	ldr	r2, [pc, #8]	; (8007628 <HAL_RCC_OscConfig+0x270>)
 800761e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	e014      	b.n	8007650 <HAL_RCC_OscConfig+0x298>
 8007626:	bf00      	nop
 8007628:	40021000 	.word	0x40021000
 800762c:	080142f4 	.word	0x080142f4
 8007630:	200000c8 	.word	0x200000c8
 8007634:	200000cc 	.word	0x200000cc
 8007638:	4ba0      	ldr	r3, [pc, #640]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a9f      	ldr	r2, [pc, #636]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 800763e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	4b9d      	ldr	r3, [pc, #628]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a9c      	ldr	r2, [pc, #624]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 800764a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800764e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d013      	beq.n	8007680 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007658:	f7fc fc6a 	bl	8003f30 <HAL_GetTick>
 800765c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800765e:	e008      	b.n	8007672 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007660:	f7fc fc66 	bl	8003f30 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b64      	cmp	r3, #100	; 0x64
 800766c:	d901      	bls.n	8007672 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e276      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007672:	4b92      	ldr	r3, [pc, #584]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0f0      	beq.n	8007660 <HAL_RCC_OscConfig+0x2a8>
 800767e:	e014      	b.n	80076aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007680:	f7fc fc56 	bl	8003f30 <HAL_GetTick>
 8007684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007686:	e008      	b.n	800769a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007688:	f7fc fc52 	bl	8003f30 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b64      	cmp	r3, #100	; 0x64
 8007694:	d901      	bls.n	800769a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e262      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800769a:	4b88      	ldr	r3, [pc, #544]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1f0      	bne.n	8007688 <HAL_RCC_OscConfig+0x2d0>
 80076a6:	e000      	b.n	80076aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d060      	beq.n	8007778 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	2b04      	cmp	r3, #4
 80076ba:	d005      	beq.n	80076c8 <HAL_RCC_OscConfig+0x310>
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	2b0c      	cmp	r3, #12
 80076c0:	d119      	bne.n	80076f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d116      	bne.n	80076f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076c8:	4b7c      	ldr	r3, [pc, #496]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d005      	beq.n	80076e0 <HAL_RCC_OscConfig+0x328>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e23f      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076e0:	4b76      	ldr	r3, [pc, #472]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	061b      	lsls	r3, r3, #24
 80076ee:	4973      	ldr	r1, [pc, #460]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076f4:	e040      	b.n	8007778 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d023      	beq.n	8007746 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076fe:	4b6f      	ldr	r3, [pc, #444]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a6e      	ldr	r2, [pc, #440]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 8007704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800770a:	f7fc fc11 	bl	8003f30 <HAL_GetTick>
 800770e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007710:	e008      	b.n	8007724 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007712:	f7fc fc0d 	bl	8003f30 <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	2b02      	cmp	r3, #2
 800771e:	d901      	bls.n	8007724 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e21d      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007724:	4b65      	ldr	r3, [pc, #404]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0f0      	beq.n	8007712 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007730:	4b62      	ldr	r3, [pc, #392]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	061b      	lsls	r3, r3, #24
 800773e:	495f      	ldr	r1, [pc, #380]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 8007740:	4313      	orrs	r3, r2
 8007742:	604b      	str	r3, [r1, #4]
 8007744:	e018      	b.n	8007778 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007746:	4b5d      	ldr	r3, [pc, #372]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a5c      	ldr	r2, [pc, #368]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 800774c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007752:	f7fc fbed 	bl	8003f30 <HAL_GetTick>
 8007756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007758:	e008      	b.n	800776c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800775a:	f7fc fbe9 	bl	8003f30 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d901      	bls.n	800776c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e1f9      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800776c:	4b53      	ldr	r3, [pc, #332]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1f0      	bne.n	800775a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0308 	and.w	r3, r3, #8
 8007780:	2b00      	cmp	r3, #0
 8007782:	d03c      	beq.n	80077fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d01c      	beq.n	80077c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800778c:	4b4b      	ldr	r3, [pc, #300]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 800778e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007792:	4a4a      	ldr	r2, [pc, #296]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 8007794:	f043 0301 	orr.w	r3, r3, #1
 8007798:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800779c:	f7fc fbc8 	bl	8003f30 <HAL_GetTick>
 80077a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077a2:	e008      	b.n	80077b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077a4:	f7fc fbc4 	bl	8003f30 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e1d4      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077b6:	4b41      	ldr	r3, [pc, #260]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 80077b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d0ef      	beq.n	80077a4 <HAL_RCC_OscConfig+0x3ec>
 80077c4:	e01b      	b.n	80077fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077c6:	4b3d      	ldr	r3, [pc, #244]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 80077c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077cc:	4a3b      	ldr	r2, [pc, #236]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 80077ce:	f023 0301 	bic.w	r3, r3, #1
 80077d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077d6:	f7fc fbab 	bl	8003f30 <HAL_GetTick>
 80077da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077dc:	e008      	b.n	80077f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077de:	f7fc fba7 	bl	8003f30 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d901      	bls.n	80077f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e1b7      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077f0:	4b32      	ldr	r3, [pc, #200]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 80077f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1ef      	bne.n	80077de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 80a6 	beq.w	8007958 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800780c:	2300      	movs	r3, #0
 800780e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007810:	4b2a      	ldr	r3, [pc, #168]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 8007812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10d      	bne.n	8007838 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800781c:	4b27      	ldr	r3, [pc, #156]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 800781e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007820:	4a26      	ldr	r2, [pc, #152]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 8007822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007826:	6593      	str	r3, [r2, #88]	; 0x58
 8007828:	4b24      	ldr	r3, [pc, #144]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 800782a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007830:	60bb      	str	r3, [r7, #8]
 8007832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007834:	2301      	movs	r3, #1
 8007836:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007838:	4b21      	ldr	r3, [pc, #132]	; (80078c0 <HAL_RCC_OscConfig+0x508>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007840:	2b00      	cmp	r3, #0
 8007842:	d118      	bne.n	8007876 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007844:	4b1e      	ldr	r3, [pc, #120]	; (80078c0 <HAL_RCC_OscConfig+0x508>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a1d      	ldr	r2, [pc, #116]	; (80078c0 <HAL_RCC_OscConfig+0x508>)
 800784a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800784e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007850:	f7fc fb6e 	bl	8003f30 <HAL_GetTick>
 8007854:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007856:	e008      	b.n	800786a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007858:	f7fc fb6a 	bl	8003f30 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b02      	cmp	r3, #2
 8007864:	d901      	bls.n	800786a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e17a      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800786a:	4b15      	ldr	r3, [pc, #84]	; (80078c0 <HAL_RCC_OscConfig+0x508>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0f0      	beq.n	8007858 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d108      	bne.n	8007890 <HAL_RCC_OscConfig+0x4d8>
 800787e:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 8007880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007884:	4a0d      	ldr	r2, [pc, #52]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 8007886:	f043 0301 	orr.w	r3, r3, #1
 800788a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800788e:	e029      	b.n	80078e4 <HAL_RCC_OscConfig+0x52c>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	2b05      	cmp	r3, #5
 8007896:	d115      	bne.n	80078c4 <HAL_RCC_OscConfig+0x50c>
 8007898:	4b08      	ldr	r3, [pc, #32]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 800789a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800789e:	4a07      	ldr	r2, [pc, #28]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 80078a0:	f043 0304 	orr.w	r3, r3, #4
 80078a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078a8:	4b04      	ldr	r3, [pc, #16]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 80078aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ae:	4a03      	ldr	r2, [pc, #12]	; (80078bc <HAL_RCC_OscConfig+0x504>)
 80078b0:	f043 0301 	orr.w	r3, r3, #1
 80078b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078b8:	e014      	b.n	80078e4 <HAL_RCC_OscConfig+0x52c>
 80078ba:	bf00      	nop
 80078bc:	40021000 	.word	0x40021000
 80078c0:	40007000 	.word	0x40007000
 80078c4:	4b9c      	ldr	r3, [pc, #624]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 80078c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ca:	4a9b      	ldr	r2, [pc, #620]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 80078cc:	f023 0301 	bic.w	r3, r3, #1
 80078d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078d4:	4b98      	ldr	r3, [pc, #608]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 80078d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078da:	4a97      	ldr	r2, [pc, #604]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 80078dc:	f023 0304 	bic.w	r3, r3, #4
 80078e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d016      	beq.n	800791a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ec:	f7fc fb20 	bl	8003f30 <HAL_GetTick>
 80078f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078f2:	e00a      	b.n	800790a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078f4:	f7fc fb1c 	bl	8003f30 <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007902:	4293      	cmp	r3, r2
 8007904:	d901      	bls.n	800790a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e12a      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800790a:	4b8b      	ldr	r3, [pc, #556]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 800790c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d0ed      	beq.n	80078f4 <HAL_RCC_OscConfig+0x53c>
 8007918:	e015      	b.n	8007946 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800791a:	f7fc fb09 	bl	8003f30 <HAL_GetTick>
 800791e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007920:	e00a      	b.n	8007938 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007922:	f7fc fb05 	bl	8003f30 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007930:	4293      	cmp	r3, r2
 8007932:	d901      	bls.n	8007938 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e113      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007938:	4b7f      	ldr	r3, [pc, #508]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 800793a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1ed      	bne.n	8007922 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007946:	7ffb      	ldrb	r3, [r7, #31]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d105      	bne.n	8007958 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800794c:	4b7a      	ldr	r3, [pc, #488]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 800794e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007950:	4a79      	ldr	r2, [pc, #484]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007956:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 80fe 	beq.w	8007b5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007966:	2b02      	cmp	r3, #2
 8007968:	f040 80d0 	bne.w	8007b0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800796c:	4b72      	ldr	r3, [pc, #456]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f003 0203 	and.w	r2, r3, #3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	429a      	cmp	r2, r3
 800797e:	d130      	bne.n	80079e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798a:	3b01      	subs	r3, #1
 800798c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800798e:	429a      	cmp	r2, r3
 8007990:	d127      	bne.n	80079e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800799e:	429a      	cmp	r2, r3
 80079a0:	d11f      	bne.n	80079e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079ac:	2a07      	cmp	r2, #7
 80079ae:	bf14      	ite	ne
 80079b0:	2201      	movne	r2, #1
 80079b2:	2200      	moveq	r2, #0
 80079b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d113      	bne.n	80079e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c4:	085b      	lsrs	r3, r3, #1
 80079c6:	3b01      	subs	r3, #1
 80079c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d109      	bne.n	80079e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d8:	085b      	lsrs	r3, r3, #1
 80079da:	3b01      	subs	r3, #1
 80079dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079de:	429a      	cmp	r2, r3
 80079e0:	d06e      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	2b0c      	cmp	r3, #12
 80079e6:	d069      	beq.n	8007abc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80079e8:	4b53      	ldr	r3, [pc, #332]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d105      	bne.n	8007a00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80079f4:	4b50      	ldr	r3, [pc, #320]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e0ad      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007a04:	4b4c      	ldr	r3, [pc, #304]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a4b      	ldr	r2, [pc, #300]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a10:	f7fc fa8e 	bl	8003f30 <HAL_GetTick>
 8007a14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a16:	e008      	b.n	8007a2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a18:	f7fc fa8a 	bl	8003f30 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d901      	bls.n	8007a2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e09a      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a2a:	4b43      	ldr	r3, [pc, #268]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1f0      	bne.n	8007a18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a36:	4b40      	ldr	r3, [pc, #256]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	4b40      	ldr	r3, [pc, #256]	; (8007b3c <HAL_RCC_OscConfig+0x784>)
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007a46:	3a01      	subs	r2, #1
 8007a48:	0112      	lsls	r2, r2, #4
 8007a4a:	4311      	orrs	r1, r2
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a50:	0212      	lsls	r2, r2, #8
 8007a52:	4311      	orrs	r1, r2
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a58:	0852      	lsrs	r2, r2, #1
 8007a5a:	3a01      	subs	r2, #1
 8007a5c:	0552      	lsls	r2, r2, #21
 8007a5e:	4311      	orrs	r1, r2
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007a64:	0852      	lsrs	r2, r2, #1
 8007a66:	3a01      	subs	r2, #1
 8007a68:	0652      	lsls	r2, r2, #25
 8007a6a:	4311      	orrs	r1, r2
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a70:	0912      	lsrs	r2, r2, #4
 8007a72:	0452      	lsls	r2, r2, #17
 8007a74:	430a      	orrs	r2, r1
 8007a76:	4930      	ldr	r1, [pc, #192]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007a7c:	4b2e      	ldr	r3, [pc, #184]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a2d      	ldr	r2, [pc, #180]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a88:	4b2b      	ldr	r3, [pc, #172]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	4a2a      	ldr	r2, [pc, #168]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a94:	f7fc fa4c 	bl	8003f30 <HAL_GetTick>
 8007a98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a9a:	e008      	b.n	8007aae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a9c:	f7fc fa48 	bl	8003f30 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e058      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007aae:	4b22      	ldr	r3, [pc, #136]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0f0      	beq.n	8007a9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007aba:	e050      	b.n	8007b5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e04f      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ac0:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d148      	bne.n	8007b5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007acc:	4b1a      	ldr	r3, [pc, #104]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a19      	ldr	r2, [pc, #100]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ad6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ad8:	4b17      	ldr	r3, [pc, #92]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	4a16      	ldr	r2, [pc, #88]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ae2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ae4:	f7fc fa24 	bl	8003f30 <HAL_GetTick>
 8007ae8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007aea:	e008      	b.n	8007afe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aec:	f7fc fa20 	bl	8003f30 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d901      	bls.n	8007afe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e030      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007afe:	4b0e      	ldr	r3, [pc, #56]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0f0      	beq.n	8007aec <HAL_RCC_OscConfig+0x734>
 8007b0a:	e028      	b.n	8007b5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	2b0c      	cmp	r3, #12
 8007b10:	d023      	beq.n	8007b5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b12:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a08      	ldr	r2, [pc, #32]	; (8007b38 <HAL_RCC_OscConfig+0x780>)
 8007b18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b1e:	f7fc fa07 	bl	8003f30 <HAL_GetTick>
 8007b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b24:	e00c      	b.n	8007b40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b26:	f7fc fa03 	bl	8003f30 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d905      	bls.n	8007b40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e013      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
 8007b38:	40021000 	.word	0x40021000
 8007b3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b40:	4b09      	ldr	r3, [pc, #36]	; (8007b68 <HAL_RCC_OscConfig+0x7b0>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1ec      	bne.n	8007b26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007b4c:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <HAL_RCC_OscConfig+0x7b0>)
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	4905      	ldr	r1, [pc, #20]	; (8007b68 <HAL_RCC_OscConfig+0x7b0>)
 8007b52:	4b06      	ldr	r3, [pc, #24]	; (8007b6c <HAL_RCC_OscConfig+0x7b4>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	60cb      	str	r3, [r1, #12]
 8007b58:	e001      	b.n	8007b5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e000      	b.n	8007b60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3720      	adds	r7, #32
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	40021000 	.word	0x40021000
 8007b6c:	feeefffc 	.word	0xfeeefffc

08007b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e0e7      	b.n	8007d54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b84:	4b75      	ldr	r3, [pc, #468]	; (8007d5c <HAL_RCC_ClockConfig+0x1ec>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d910      	bls.n	8007bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b92:	4b72      	ldr	r3, [pc, #456]	; (8007d5c <HAL_RCC_ClockConfig+0x1ec>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f023 0207 	bic.w	r2, r3, #7
 8007b9a:	4970      	ldr	r1, [pc, #448]	; (8007d5c <HAL_RCC_ClockConfig+0x1ec>)
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ba2:	4b6e      	ldr	r3, [pc, #440]	; (8007d5c <HAL_RCC_ClockConfig+0x1ec>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d001      	beq.n	8007bb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e0cf      	b.n	8007d54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d010      	beq.n	8007be2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	4b66      	ldr	r3, [pc, #408]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d908      	bls.n	8007be2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bd0:	4b63      	ldr	r3, [pc, #396]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	4960      	ldr	r1, [pc, #384]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d04c      	beq.n	8007c88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d107      	bne.n	8007c06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bf6:	4b5a      	ldr	r3, [pc, #360]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d121      	bne.n	8007c46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e0a6      	b.n	8007d54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d107      	bne.n	8007c1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c0e:	4b54      	ldr	r3, [pc, #336]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d115      	bne.n	8007c46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e09a      	b.n	8007d54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d107      	bne.n	8007c36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c26:	4b4e      	ldr	r3, [pc, #312]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d109      	bne.n	8007c46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e08e      	b.n	8007d54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c36:	4b4a      	ldr	r3, [pc, #296]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e086      	b.n	8007d54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c46:	4b46      	ldr	r3, [pc, #280]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f023 0203 	bic.w	r2, r3, #3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	4943      	ldr	r1, [pc, #268]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c58:	f7fc f96a 	bl	8003f30 <HAL_GetTick>
 8007c5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c5e:	e00a      	b.n	8007c76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c60:	f7fc f966 	bl	8003f30 <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e06e      	b.n	8007d54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c76:	4b3a      	ldr	r3, [pc, #232]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f003 020c 	and.w	r2, r3, #12
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d1eb      	bne.n	8007c60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d010      	beq.n	8007cb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	4b31      	ldr	r3, [pc, #196]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d208      	bcs.n	8007cb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ca4:	4b2e      	ldr	r3, [pc, #184]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	492b      	ldr	r1, [pc, #172]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cb6:	4b29      	ldr	r3, [pc, #164]	; (8007d5c <HAL_RCC_ClockConfig+0x1ec>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0307 	and.w	r3, r3, #7
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d210      	bcs.n	8007ce6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cc4:	4b25      	ldr	r3, [pc, #148]	; (8007d5c <HAL_RCC_ClockConfig+0x1ec>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f023 0207 	bic.w	r2, r3, #7
 8007ccc:	4923      	ldr	r1, [pc, #140]	; (8007d5c <HAL_RCC_ClockConfig+0x1ec>)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cd4:	4b21      	ldr	r3, [pc, #132]	; (8007d5c <HAL_RCC_ClockConfig+0x1ec>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0307 	and.w	r3, r3, #7
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d001      	beq.n	8007ce6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e036      	b.n	8007d54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0304 	and.w	r3, r3, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d008      	beq.n	8007d04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cf2:	4b1b      	ldr	r3, [pc, #108]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	4918      	ldr	r1, [pc, #96]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0308 	and.w	r3, r3, #8
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d009      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d10:	4b13      	ldr	r3, [pc, #76]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	00db      	lsls	r3, r3, #3
 8007d1e:	4910      	ldr	r1, [pc, #64]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d24:	f000 f824 	bl	8007d70 <HAL_RCC_GetSysClockFreq>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	4b0d      	ldr	r3, [pc, #52]	; (8007d60 <HAL_RCC_ClockConfig+0x1f0>)
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	091b      	lsrs	r3, r3, #4
 8007d30:	f003 030f 	and.w	r3, r3, #15
 8007d34:	490b      	ldr	r1, [pc, #44]	; (8007d64 <HAL_RCC_ClockConfig+0x1f4>)
 8007d36:	5ccb      	ldrb	r3, [r1, r3]
 8007d38:	f003 031f 	and.w	r3, r3, #31
 8007d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d40:	4a09      	ldr	r2, [pc, #36]	; (8007d68 <HAL_RCC_ClockConfig+0x1f8>)
 8007d42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007d44:	4b09      	ldr	r3, [pc, #36]	; (8007d6c <HAL_RCC_ClockConfig+0x1fc>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fb fefd 	bl	8003b48 <HAL_InitTick>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	72fb      	strb	r3, [r7, #11]

  return status;
 8007d52:	7afb      	ldrb	r3, [r7, #11]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	40022000 	.word	0x40022000
 8007d60:	40021000 	.word	0x40021000
 8007d64:	080142f4 	.word	0x080142f4
 8007d68:	200000c8 	.word	0x200000c8
 8007d6c:	200000cc 	.word	0x200000cc

08007d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b089      	sub	sp, #36	; 0x24
 8007d74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	61fb      	str	r3, [r7, #28]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d7e:	4b3e      	ldr	r3, [pc, #248]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f003 030c 	and.w	r3, r3, #12
 8007d86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d88:	4b3b      	ldr	r3, [pc, #236]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f003 0303 	and.w	r3, r3, #3
 8007d90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d005      	beq.n	8007da4 <HAL_RCC_GetSysClockFreq+0x34>
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2b0c      	cmp	r3, #12
 8007d9c:	d121      	bne.n	8007de2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d11e      	bne.n	8007de2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007da4:	4b34      	ldr	r3, [pc, #208]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0308 	and.w	r3, r3, #8
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d107      	bne.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007db0:	4b31      	ldr	r3, [pc, #196]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8007db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007db6:	0a1b      	lsrs	r3, r3, #8
 8007db8:	f003 030f 	and.w	r3, r3, #15
 8007dbc:	61fb      	str	r3, [r7, #28]
 8007dbe:	e005      	b.n	8007dcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007dc0:	4b2d      	ldr	r3, [pc, #180]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	091b      	lsrs	r3, r3, #4
 8007dc6:	f003 030f 	and.w	r3, r3, #15
 8007dca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007dcc:	4a2b      	ldr	r2, [pc, #172]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10d      	bne.n	8007df8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007de0:	e00a      	b.n	8007df8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	d102      	bne.n	8007dee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007de8:	4b25      	ldr	r3, [pc, #148]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x110>)
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	e004      	b.n	8007df8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	d101      	bne.n	8007df8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007df4:	4b23      	ldr	r3, [pc, #140]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x114>)
 8007df6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	2b0c      	cmp	r3, #12
 8007dfc:	d134      	bne.n	8007e68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007dfe:	4b1e      	ldr	r3, [pc, #120]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f003 0303 	and.w	r3, r3, #3
 8007e06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d003      	beq.n	8007e16 <HAL_RCC_GetSysClockFreq+0xa6>
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d003      	beq.n	8007e1c <HAL_RCC_GetSysClockFreq+0xac>
 8007e14:	e005      	b.n	8007e22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007e16:	4b1a      	ldr	r3, [pc, #104]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x110>)
 8007e18:	617b      	str	r3, [r7, #20]
      break;
 8007e1a:	e005      	b.n	8007e28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007e1c:	4b19      	ldr	r3, [pc, #100]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x114>)
 8007e1e:	617b      	str	r3, [r7, #20]
      break;
 8007e20:	e002      	b.n	8007e28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	617b      	str	r3, [r7, #20]
      break;
 8007e26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e28:	4b13      	ldr	r3, [pc, #76]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	091b      	lsrs	r3, r3, #4
 8007e2e:	f003 0307 	and.w	r3, r3, #7
 8007e32:	3301      	adds	r3, #1
 8007e34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007e36:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	0a1b      	lsrs	r3, r3, #8
 8007e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	fb03 f202 	mul.w	r2, r3, r2
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e4e:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	0e5b      	lsrs	r3, r3, #25
 8007e54:	f003 0303 	and.w	r3, r3, #3
 8007e58:	3301      	adds	r3, #1
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007e68:	69bb      	ldr	r3, [r7, #24]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3724      	adds	r7, #36	; 0x24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	40021000 	.word	0x40021000
 8007e7c:	0801430c 	.word	0x0801430c
 8007e80:	00f42400 	.word	0x00f42400
 8007e84:	007a1200 	.word	0x007a1200

08007e88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e8c:	4b03      	ldr	r3, [pc, #12]	; (8007e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	200000c8 	.word	0x200000c8

08007ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007ea4:	f7ff fff0 	bl	8007e88 <HAL_RCC_GetHCLKFreq>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	0a1b      	lsrs	r3, r3, #8
 8007eb0:	f003 0307 	and.w	r3, r3, #7
 8007eb4:	4904      	ldr	r1, [pc, #16]	; (8007ec8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007eb6:	5ccb      	ldrb	r3, [r1, r3]
 8007eb8:	f003 031f 	and.w	r3, r3, #31
 8007ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	40021000 	.word	0x40021000
 8007ec8:	08014304 	.word	0x08014304

08007ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007ed0:	f7ff ffda 	bl	8007e88 <HAL_RCC_GetHCLKFreq>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	0adb      	lsrs	r3, r3, #11
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	4904      	ldr	r1, [pc, #16]	; (8007ef4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007ee2:	5ccb      	ldrb	r3, [r1, r3]
 8007ee4:	f003 031f 	and.w	r3, r3, #31
 8007ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	40021000 	.word	0x40021000
 8007ef4:	08014304 	.word	0x08014304

08007ef8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	220f      	movs	r2, #15
 8007f06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007f08:	4b12      	ldr	r3, [pc, #72]	; (8007f54 <HAL_RCC_GetClockConfig+0x5c>)
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f003 0203 	and.w	r2, r3, #3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007f14:	4b0f      	ldr	r3, [pc, #60]	; (8007f54 <HAL_RCC_GetClockConfig+0x5c>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007f20:	4b0c      	ldr	r3, [pc, #48]	; (8007f54 <HAL_RCC_GetClockConfig+0x5c>)
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007f2c:	4b09      	ldr	r3, [pc, #36]	; (8007f54 <HAL_RCC_GetClockConfig+0x5c>)
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	08db      	lsrs	r3, r3, #3
 8007f32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007f3a:	4b07      	ldr	r3, [pc, #28]	; (8007f58 <HAL_RCC_GetClockConfig+0x60>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0207 	and.w	r2, r3, #7
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	601a      	str	r2, [r3, #0]
}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	40021000 	.word	0x40021000
 8007f58:	40022000 	.word	0x40022000

08007f5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007f64:	2300      	movs	r3, #0
 8007f66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007f68:	4b2a      	ldr	r3, [pc, #168]	; (8008014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007f74:	f7ff f9bc 	bl	80072f0 <HAL_PWREx_GetVoltageRange>
 8007f78:	6178      	str	r0, [r7, #20]
 8007f7a:	e014      	b.n	8007fa6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f7c:	4b25      	ldr	r3, [pc, #148]	; (8008014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f80:	4a24      	ldr	r2, [pc, #144]	; (8008014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f86:	6593      	str	r3, [r2, #88]	; 0x58
 8007f88:	4b22      	ldr	r3, [pc, #136]	; (8008014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f90:	60fb      	str	r3, [r7, #12]
 8007f92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007f94:	f7ff f9ac 	bl	80072f0 <HAL_PWREx_GetVoltageRange>
 8007f98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007f9a:	4b1e      	ldr	r3, [pc, #120]	; (8008014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9e:	4a1d      	ldr	r2, [pc, #116]	; (8008014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fa4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fac:	d10b      	bne.n	8007fc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2b80      	cmp	r3, #128	; 0x80
 8007fb2:	d919      	bls.n	8007fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2ba0      	cmp	r3, #160	; 0xa0
 8007fb8:	d902      	bls.n	8007fc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007fba:	2302      	movs	r3, #2
 8007fbc:	613b      	str	r3, [r7, #16]
 8007fbe:	e013      	b.n	8007fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	613b      	str	r3, [r7, #16]
 8007fc4:	e010      	b.n	8007fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b80      	cmp	r3, #128	; 0x80
 8007fca:	d902      	bls.n	8007fd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007fcc:	2303      	movs	r3, #3
 8007fce:	613b      	str	r3, [r7, #16]
 8007fd0:	e00a      	b.n	8007fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b80      	cmp	r3, #128	; 0x80
 8007fd6:	d102      	bne.n	8007fde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007fd8:	2302      	movs	r3, #2
 8007fda:	613b      	str	r3, [r7, #16]
 8007fdc:	e004      	b.n	8007fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b70      	cmp	r3, #112	; 0x70
 8007fe2:	d101      	bne.n	8007fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007fe8:	4b0b      	ldr	r3, [pc, #44]	; (8008018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f023 0207 	bic.w	r2, r3, #7
 8007ff0:	4909      	ldr	r1, [pc, #36]	; (8008018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007ff8:	4b07      	ldr	r3, [pc, #28]	; (8008018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0307 	and.w	r3, r3, #7
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	429a      	cmp	r2, r3
 8008004:	d001      	beq.n	800800a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e000      	b.n	800800c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	40021000 	.word	0x40021000
 8008018:	40022000 	.word	0x40022000

0800801c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008024:	2300      	movs	r3, #0
 8008026:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008028:	2300      	movs	r3, #0
 800802a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008034:	2b00      	cmp	r3, #0
 8008036:	d041      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800803c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008040:	d02a      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008042:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008046:	d824      	bhi.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008048:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800804c:	d008      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800804e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008052:	d81e      	bhi.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00a      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800805c:	d010      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800805e:	e018      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008060:	4b86      	ldr	r3, [pc, #536]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	4a85      	ldr	r2, [pc, #532]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800806a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800806c:	e015      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3304      	adds	r3, #4
 8008072:	2100      	movs	r1, #0
 8008074:	4618      	mov	r0, r3
 8008076:	f000 fabb 	bl	80085f0 <RCCEx_PLLSAI1_Config>
 800807a:	4603      	mov	r3, r0
 800807c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800807e:	e00c      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3320      	adds	r3, #32
 8008084:	2100      	movs	r1, #0
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fba6 	bl	80087d8 <RCCEx_PLLSAI2_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008090:	e003      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	74fb      	strb	r3, [r7, #19]
      break;
 8008096:	e000      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800809a:	7cfb      	ldrb	r3, [r7, #19]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10b      	bne.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080a0:	4b76      	ldr	r3, [pc, #472]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ae:	4973      	ldr	r1, [pc, #460]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80080b6:	e001      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b8:	7cfb      	ldrb	r3, [r7, #19]
 80080ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d041      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080d0:	d02a      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80080d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080d6:	d824      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80080d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080dc:	d008      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80080de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080e2:	d81e      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00a      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80080e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080ec:	d010      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80080ee:	e018      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80080f0:	4b62      	ldr	r3, [pc, #392]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	4a61      	ldr	r2, [pc, #388]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80080f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80080fc:	e015      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3304      	adds	r3, #4
 8008102:	2100      	movs	r1, #0
 8008104:	4618      	mov	r0, r3
 8008106:	f000 fa73 	bl	80085f0 <RCCEx_PLLSAI1_Config>
 800810a:	4603      	mov	r3, r0
 800810c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800810e:	e00c      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3320      	adds	r3, #32
 8008114:	2100      	movs	r1, #0
 8008116:	4618      	mov	r0, r3
 8008118:	f000 fb5e 	bl	80087d8 <RCCEx_PLLSAI2_Config>
 800811c:	4603      	mov	r3, r0
 800811e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008120:	e003      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	74fb      	strb	r3, [r7, #19]
      break;
 8008126:	e000      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800812a:	7cfb      	ldrb	r3, [r7, #19]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10b      	bne.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008130:	4b52      	ldr	r3, [pc, #328]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008136:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800813e:	494f      	ldr	r1, [pc, #316]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008140:	4313      	orrs	r3, r2
 8008142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008146:	e001      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008148:	7cfb      	ldrb	r3, [r7, #19]
 800814a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 80a0 	beq.w	800829a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800815a:	2300      	movs	r3, #0
 800815c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800815e:	4b47      	ldr	r3, [pc, #284]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800816a:	2301      	movs	r3, #1
 800816c:	e000      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800816e:	2300      	movs	r3, #0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00d      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008174:	4b41      	ldr	r3, [pc, #260]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008178:	4a40      	ldr	r2, [pc, #256]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800817a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800817e:	6593      	str	r3, [r2, #88]	; 0x58
 8008180:	4b3e      	ldr	r3, [pc, #248]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008188:	60bb      	str	r3, [r7, #8]
 800818a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800818c:	2301      	movs	r3, #1
 800818e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008190:	4b3b      	ldr	r3, [pc, #236]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a3a      	ldr	r2, [pc, #232]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800819a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800819c:	f7fb fec8 	bl	8003f30 <HAL_GetTick>
 80081a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80081a2:	e009      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081a4:	f7fb fec4 	bl	8003f30 <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d902      	bls.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	74fb      	strb	r3, [r7, #19]
        break;
 80081b6:	e005      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80081b8:	4b31      	ldr	r3, [pc, #196]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d0ef      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80081c4:	7cfb      	ldrb	r3, [r7, #19]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d15c      	bne.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80081ca:	4b2c      	ldr	r3, [pc, #176]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01f      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d019      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80081e8:	4b24      	ldr	r3, [pc, #144]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081f4:	4b21      	ldr	r3, [pc, #132]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081fa:	4a20      	ldr	r2, [pc, #128]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008204:	4b1d      	ldr	r3, [pc, #116]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820a:	4a1c      	ldr	r2, [pc, #112]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800820c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008214:	4a19      	ldr	r2, [pc, #100]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	2b00      	cmp	r3, #0
 8008224:	d016      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008226:	f7fb fe83 	bl	8003f30 <HAL_GetTick>
 800822a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800822c:	e00b      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800822e:	f7fb fe7f 	bl	8003f30 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	f241 3288 	movw	r2, #5000	; 0x1388
 800823c:	4293      	cmp	r3, r2
 800823e:	d902      	bls.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	74fb      	strb	r3, [r7, #19]
            break;
 8008244:	e006      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008246:	4b0d      	ldr	r3, [pc, #52]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d0ec      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008254:	7cfb      	ldrb	r3, [r7, #19]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10c      	bne.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800825a:	4b08      	ldr	r3, [pc, #32]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800825c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800826a:	4904      	ldr	r1, [pc, #16]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800826c:	4313      	orrs	r3, r2
 800826e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008272:	e009      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008274:	7cfb      	ldrb	r3, [r7, #19]
 8008276:	74bb      	strb	r3, [r7, #18]
 8008278:	e006      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800827a:	bf00      	nop
 800827c:	40021000 	.word	0x40021000
 8008280:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008284:	7cfb      	ldrb	r3, [r7, #19]
 8008286:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008288:	7c7b      	ldrb	r3, [r7, #17]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d105      	bne.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800828e:	4b9e      	ldr	r3, [pc, #632]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008292:	4a9d      	ldr	r2, [pc, #628]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008298:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082a6:	4b98      	ldr	r3, [pc, #608]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ac:	f023 0203 	bic.w	r2, r3, #3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b4:	4994      	ldr	r1, [pc, #592]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00a      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80082c8:	4b8f      	ldr	r3, [pc, #572]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ce:	f023 020c 	bic.w	r2, r3, #12
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d6:	498c      	ldr	r1, [pc, #560]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0304 	and.w	r3, r3, #4
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80082ea:	4b87      	ldr	r3, [pc, #540]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f8:	4983      	ldr	r1, [pc, #524]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00a      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800830c:	4b7e      	ldr	r3, [pc, #504]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800830e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008312:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831a:	497b      	ldr	r1, [pc, #492]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800831c:	4313      	orrs	r3, r2
 800831e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0310 	and.w	r3, r3, #16
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800832e:	4b76      	ldr	r3, [pc, #472]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800833c:	4972      	ldr	r1, [pc, #456]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800833e:	4313      	orrs	r3, r2
 8008340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0320 	and.w	r3, r3, #32
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00a      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008350:	4b6d      	ldr	r3, [pc, #436]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008356:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800835e:	496a      	ldr	r1, [pc, #424]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008360:	4313      	orrs	r3, r2
 8008362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00a      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008372:	4b65      	ldr	r3, [pc, #404]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008378:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008380:	4961      	ldr	r1, [pc, #388]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008382:	4313      	orrs	r3, r2
 8008384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00a      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008394:	4b5c      	ldr	r3, [pc, #368]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800839a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a2:	4959      	ldr	r1, [pc, #356]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00a      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80083b6:	4b54      	ldr	r3, [pc, #336]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c4:	4950      	ldr	r1, [pc, #320]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00a      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80083d8:	4b4b      	ldr	r3, [pc, #300]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e6:	4948      	ldr	r1, [pc, #288]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00a      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80083fa:	4b43      	ldr	r3, [pc, #268]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008408:	493f      	ldr	r1, [pc, #252]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800840a:	4313      	orrs	r3, r2
 800840c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d028      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800841c:	4b3a      	ldr	r3, [pc, #232]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800841e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008422:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800842a:	4937      	ldr	r1, [pc, #220]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800842c:	4313      	orrs	r3, r2
 800842e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800843a:	d106      	bne.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800843c:	4b32      	ldr	r3, [pc, #200]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	4a31      	ldr	r2, [pc, #196]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008446:	60d3      	str	r3, [r2, #12]
 8008448:	e011      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800844e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008452:	d10c      	bne.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3304      	adds	r3, #4
 8008458:	2101      	movs	r1, #1
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f8c8 	bl	80085f0 <RCCEx_PLLSAI1_Config>
 8008460:	4603      	mov	r3, r0
 8008462:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008464:	7cfb      	ldrb	r3, [r7, #19]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800846a:	7cfb      	ldrb	r3, [r7, #19]
 800846c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d028      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800847a:	4b23      	ldr	r3, [pc, #140]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800847c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008480:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008488:	491f      	ldr	r1, [pc, #124]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800848a:	4313      	orrs	r3, r2
 800848c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008498:	d106      	bne.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800849a:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	4a1a      	ldr	r2, [pc, #104]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a4:	60d3      	str	r3, [r2, #12]
 80084a6:	e011      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084b0:	d10c      	bne.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	3304      	adds	r3, #4
 80084b6:	2101      	movs	r1, #1
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 f899 	bl	80085f0 <RCCEx_PLLSAI1_Config>
 80084be:	4603      	mov	r3, r0
 80084c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80084c2:	7cfb      	ldrb	r3, [r7, #19]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80084c8:	7cfb      	ldrb	r3, [r7, #19]
 80084ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d02b      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084d8:	4b0b      	ldr	r3, [pc, #44]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084e6:	4908      	ldr	r1, [pc, #32]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084f6:	d109      	bne.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084f8:	4b03      	ldr	r3, [pc, #12]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	4a02      	ldr	r2, [pc, #8]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008502:	60d3      	str	r3, [r2, #12]
 8008504:	e014      	b.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008506:	bf00      	nop
 8008508:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008514:	d10c      	bne.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	3304      	adds	r3, #4
 800851a:	2101      	movs	r1, #1
 800851c:	4618      	mov	r0, r3
 800851e:	f000 f867 	bl	80085f0 <RCCEx_PLLSAI1_Config>
 8008522:	4603      	mov	r3, r0
 8008524:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008526:	7cfb      	ldrb	r3, [r7, #19]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800852c:	7cfb      	ldrb	r3, [r7, #19]
 800852e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d02f      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800853c:	4b2b      	ldr	r3, [pc, #172]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800853e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008542:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800854a:	4928      	ldr	r1, [pc, #160]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800854c:	4313      	orrs	r3, r2
 800854e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008556:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800855a:	d10d      	bne.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3304      	adds	r3, #4
 8008560:	2102      	movs	r1, #2
 8008562:	4618      	mov	r0, r3
 8008564:	f000 f844 	bl	80085f0 <RCCEx_PLLSAI1_Config>
 8008568:	4603      	mov	r3, r0
 800856a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800856c:	7cfb      	ldrb	r3, [r7, #19]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d014      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008572:	7cfb      	ldrb	r3, [r7, #19]
 8008574:	74bb      	strb	r3, [r7, #18]
 8008576:	e011      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800857c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008580:	d10c      	bne.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	3320      	adds	r3, #32
 8008586:	2102      	movs	r1, #2
 8008588:	4618      	mov	r0, r3
 800858a:	f000 f925 	bl	80087d8 <RCCEx_PLLSAI2_Config>
 800858e:	4603      	mov	r3, r0
 8008590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008592:	7cfb      	ldrb	r3, [r7, #19]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008598:	7cfb      	ldrb	r3, [r7, #19]
 800859a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00a      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80085a8:	4b10      	ldr	r3, [pc, #64]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80085aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085b6:	490d      	ldr	r1, [pc, #52]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00b      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80085ca:	4b08      	ldr	r3, [pc, #32]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80085cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085da:	4904      	ldr	r1, [pc, #16]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80085e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	40021000 	.word	0x40021000

080085f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80085fe:	4b75      	ldr	r3, [pc, #468]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	f003 0303 	and.w	r3, r3, #3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d018      	beq.n	800863c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800860a:	4b72      	ldr	r3, [pc, #456]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f003 0203 	and.w	r2, r3, #3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d10d      	bne.n	8008636 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
       ||
 800861e:	2b00      	cmp	r3, #0
 8008620:	d009      	beq.n	8008636 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008622:	4b6c      	ldr	r3, [pc, #432]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	091b      	lsrs	r3, r3, #4
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	1c5a      	adds	r2, r3, #1
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
       ||
 8008632:	429a      	cmp	r2, r3
 8008634:	d047      	beq.n	80086c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	73fb      	strb	r3, [r7, #15]
 800863a:	e044      	b.n	80086c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2b03      	cmp	r3, #3
 8008642:	d018      	beq.n	8008676 <RCCEx_PLLSAI1_Config+0x86>
 8008644:	2b03      	cmp	r3, #3
 8008646:	d825      	bhi.n	8008694 <RCCEx_PLLSAI1_Config+0xa4>
 8008648:	2b01      	cmp	r3, #1
 800864a:	d002      	beq.n	8008652 <RCCEx_PLLSAI1_Config+0x62>
 800864c:	2b02      	cmp	r3, #2
 800864e:	d009      	beq.n	8008664 <RCCEx_PLLSAI1_Config+0x74>
 8008650:	e020      	b.n	8008694 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008652:	4b60      	ldr	r3, [pc, #384]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d11d      	bne.n	800869a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008662:	e01a      	b.n	800869a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008664:	4b5b      	ldr	r3, [pc, #364]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800866c:	2b00      	cmp	r3, #0
 800866e:	d116      	bne.n	800869e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008674:	e013      	b.n	800869e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008676:	4b57      	ldr	r3, [pc, #348]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10f      	bne.n	80086a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008682:	4b54      	ldr	r3, [pc, #336]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d109      	bne.n	80086a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008692:	e006      	b.n	80086a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	73fb      	strb	r3, [r7, #15]
      break;
 8008698:	e004      	b.n	80086a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800869a:	bf00      	nop
 800869c:	e002      	b.n	80086a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800869e:	bf00      	nop
 80086a0:	e000      	b.n	80086a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80086a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10d      	bne.n	80086c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80086aa:	4b4a      	ldr	r3, [pc, #296]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6819      	ldr	r1, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	430b      	orrs	r3, r1
 80086c0:	4944      	ldr	r1, [pc, #272]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d17d      	bne.n	80087c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80086cc:	4b41      	ldr	r3, [pc, #260]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a40      	ldr	r2, [pc, #256]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086d8:	f7fb fc2a 	bl	8003f30 <HAL_GetTick>
 80086dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80086de:	e009      	b.n	80086f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80086e0:	f7fb fc26 	bl	8003f30 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d902      	bls.n	80086f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	73fb      	strb	r3, [r7, #15]
        break;
 80086f2:	e005      	b.n	8008700 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80086f4:	4b37      	ldr	r3, [pc, #220]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1ef      	bne.n	80086e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d160      	bne.n	80087c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d111      	bne.n	8008730 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800870c:	4b31      	ldr	r3, [pc, #196]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	6892      	ldr	r2, [r2, #8]
 800871c:	0211      	lsls	r1, r2, #8
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	68d2      	ldr	r2, [r2, #12]
 8008722:	0912      	lsrs	r2, r2, #4
 8008724:	0452      	lsls	r2, r2, #17
 8008726:	430a      	orrs	r2, r1
 8008728:	492a      	ldr	r1, [pc, #168]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800872a:	4313      	orrs	r3, r2
 800872c:	610b      	str	r3, [r1, #16]
 800872e:	e027      	b.n	8008780 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d112      	bne.n	800875c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008736:	4b27      	ldr	r3, [pc, #156]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800873e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	6892      	ldr	r2, [r2, #8]
 8008746:	0211      	lsls	r1, r2, #8
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	6912      	ldr	r2, [r2, #16]
 800874c:	0852      	lsrs	r2, r2, #1
 800874e:	3a01      	subs	r2, #1
 8008750:	0552      	lsls	r2, r2, #21
 8008752:	430a      	orrs	r2, r1
 8008754:	491f      	ldr	r1, [pc, #124]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008756:	4313      	orrs	r3, r2
 8008758:	610b      	str	r3, [r1, #16]
 800875a:	e011      	b.n	8008780 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800875c:	4b1d      	ldr	r3, [pc, #116]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008764:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	6892      	ldr	r2, [r2, #8]
 800876c:	0211      	lsls	r1, r2, #8
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	6952      	ldr	r2, [r2, #20]
 8008772:	0852      	lsrs	r2, r2, #1
 8008774:	3a01      	subs	r2, #1
 8008776:	0652      	lsls	r2, r2, #25
 8008778:	430a      	orrs	r2, r1
 800877a:	4916      	ldr	r1, [pc, #88]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800877c:	4313      	orrs	r3, r2
 800877e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008780:	4b14      	ldr	r3, [pc, #80]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a13      	ldr	r2, [pc, #76]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008786:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800878a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800878c:	f7fb fbd0 	bl	8003f30 <HAL_GetTick>
 8008790:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008792:	e009      	b.n	80087a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008794:	f7fb fbcc 	bl	8003f30 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d902      	bls.n	80087a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	73fb      	strb	r3, [r7, #15]
          break;
 80087a6:	e005      	b.n	80087b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80087a8:	4b0a      	ldr	r3, [pc, #40]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d0ef      	beq.n	8008794 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d106      	bne.n	80087c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80087ba:	4b06      	ldr	r3, [pc, #24]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087bc:	691a      	ldr	r2, [r3, #16]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	4904      	ldr	r1, [pc, #16]	; (80087d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	40021000 	.word	0x40021000

080087d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80087e6:	4b6a      	ldr	r3, [pc, #424]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f003 0303 	and.w	r3, r3, #3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d018      	beq.n	8008824 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80087f2:	4b67      	ldr	r3, [pc, #412]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	f003 0203 	and.w	r2, r3, #3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d10d      	bne.n	800881e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
       ||
 8008806:	2b00      	cmp	r3, #0
 8008808:	d009      	beq.n	800881e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800880a:	4b61      	ldr	r3, [pc, #388]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	091b      	lsrs	r3, r3, #4
 8008810:	f003 0307 	and.w	r3, r3, #7
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
       ||
 800881a:	429a      	cmp	r2, r3
 800881c:	d047      	beq.n	80088ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	73fb      	strb	r3, [r7, #15]
 8008822:	e044      	b.n	80088ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b03      	cmp	r3, #3
 800882a:	d018      	beq.n	800885e <RCCEx_PLLSAI2_Config+0x86>
 800882c:	2b03      	cmp	r3, #3
 800882e:	d825      	bhi.n	800887c <RCCEx_PLLSAI2_Config+0xa4>
 8008830:	2b01      	cmp	r3, #1
 8008832:	d002      	beq.n	800883a <RCCEx_PLLSAI2_Config+0x62>
 8008834:	2b02      	cmp	r3, #2
 8008836:	d009      	beq.n	800884c <RCCEx_PLLSAI2_Config+0x74>
 8008838:	e020      	b.n	800887c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800883a:	4b55      	ldr	r3, [pc, #340]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d11d      	bne.n	8008882 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800884a:	e01a      	b.n	8008882 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800884c:	4b50      	ldr	r3, [pc, #320]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008854:	2b00      	cmp	r3, #0
 8008856:	d116      	bne.n	8008886 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800885c:	e013      	b.n	8008886 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800885e:	4b4c      	ldr	r3, [pc, #304]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10f      	bne.n	800888a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800886a:	4b49      	ldr	r3, [pc, #292]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d109      	bne.n	800888a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800887a:	e006      	b.n	800888a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	73fb      	strb	r3, [r7, #15]
      break;
 8008880:	e004      	b.n	800888c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008882:	bf00      	nop
 8008884:	e002      	b.n	800888c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008886:	bf00      	nop
 8008888:	e000      	b.n	800888c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800888a:	bf00      	nop
    }

    if(status == HAL_OK)
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10d      	bne.n	80088ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008892:	4b3f      	ldr	r3, [pc, #252]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6819      	ldr	r1, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	011b      	lsls	r3, r3, #4
 80088a6:	430b      	orrs	r3, r1
 80088a8:	4939      	ldr	r1, [pc, #228]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d167      	bne.n	8008984 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80088b4:	4b36      	ldr	r3, [pc, #216]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a35      	ldr	r2, [pc, #212]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088c0:	f7fb fb36 	bl	8003f30 <HAL_GetTick>
 80088c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80088c6:	e009      	b.n	80088dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80088c8:	f7fb fb32 	bl	8003f30 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d902      	bls.n	80088dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	73fb      	strb	r3, [r7, #15]
        break;
 80088da:	e005      	b.n	80088e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80088dc:	4b2c      	ldr	r3, [pc, #176]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1ef      	bne.n	80088c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d14a      	bne.n	8008984 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d111      	bne.n	8008918 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80088f4:	4b26      	ldr	r3, [pc, #152]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80088fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	6892      	ldr	r2, [r2, #8]
 8008904:	0211      	lsls	r1, r2, #8
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	68d2      	ldr	r2, [r2, #12]
 800890a:	0912      	lsrs	r2, r2, #4
 800890c:	0452      	lsls	r2, r2, #17
 800890e:	430a      	orrs	r2, r1
 8008910:	491f      	ldr	r1, [pc, #124]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008912:	4313      	orrs	r3, r2
 8008914:	614b      	str	r3, [r1, #20]
 8008916:	e011      	b.n	800893c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008918:	4b1d      	ldr	r3, [pc, #116]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008920:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	6892      	ldr	r2, [r2, #8]
 8008928:	0211      	lsls	r1, r2, #8
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	6912      	ldr	r2, [r2, #16]
 800892e:	0852      	lsrs	r2, r2, #1
 8008930:	3a01      	subs	r2, #1
 8008932:	0652      	lsls	r2, r2, #25
 8008934:	430a      	orrs	r2, r1
 8008936:	4916      	ldr	r1, [pc, #88]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008938:	4313      	orrs	r3, r2
 800893a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800893c:	4b14      	ldr	r3, [pc, #80]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a13      	ldr	r2, [pc, #76]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008946:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008948:	f7fb faf2 	bl	8003f30 <HAL_GetTick>
 800894c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800894e:	e009      	b.n	8008964 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008950:	f7fb faee 	bl	8003f30 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	2b02      	cmp	r3, #2
 800895c:	d902      	bls.n	8008964 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	73fb      	strb	r3, [r7, #15]
          break;
 8008962:	e005      	b.n	8008970 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008964:	4b0a      	ldr	r3, [pc, #40]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d0ef      	beq.n	8008950 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d106      	bne.n	8008984 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008976:	4b06      	ldr	r3, [pc, #24]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008978:	695a      	ldr	r2, [r3, #20]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	4904      	ldr	r1, [pc, #16]	; (8008990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008980:	4313      	orrs	r3, r2
 8008982:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008984:	7bfb      	ldrb	r3, [r7, #15]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	40021000 	.word	0x40021000

08008994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e049      	b.n	8008a3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d106      	bne.n	80089c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f841 	bl	8008a42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2202      	movs	r2, #2
 80089c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3304      	adds	r3, #4
 80089d0:	4619      	mov	r1, r3
 80089d2:	4610      	mov	r0, r2
 80089d4:	f000 fc52 	bl	800927c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b083      	sub	sp, #12
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008a4a:	bf00      	nop
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
	...

08008a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d001      	beq.n	8008a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e04f      	b.n	8008b10 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f042 0201 	orr.w	r2, r2, #1
 8008a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a23      	ldr	r2, [pc, #140]	; (8008b1c <HAL_TIM_Base_Start_IT+0xc4>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d01d      	beq.n	8008ace <HAL_TIM_Base_Start_IT+0x76>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a9a:	d018      	beq.n	8008ace <HAL_TIM_Base_Start_IT+0x76>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a1f      	ldr	r2, [pc, #124]	; (8008b20 <HAL_TIM_Base_Start_IT+0xc8>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d013      	beq.n	8008ace <HAL_TIM_Base_Start_IT+0x76>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a1e      	ldr	r2, [pc, #120]	; (8008b24 <HAL_TIM_Base_Start_IT+0xcc>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d00e      	beq.n	8008ace <HAL_TIM_Base_Start_IT+0x76>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a1c      	ldr	r2, [pc, #112]	; (8008b28 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d009      	beq.n	8008ace <HAL_TIM_Base_Start_IT+0x76>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a1b      	ldr	r2, [pc, #108]	; (8008b2c <HAL_TIM_Base_Start_IT+0xd4>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d004      	beq.n	8008ace <HAL_TIM_Base_Start_IT+0x76>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a19      	ldr	r2, [pc, #100]	; (8008b30 <HAL_TIM_Base_Start_IT+0xd8>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d115      	bne.n	8008afa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	4b17      	ldr	r3, [pc, #92]	; (8008b34 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2b06      	cmp	r3, #6
 8008ade:	d015      	beq.n	8008b0c <HAL_TIM_Base_Start_IT+0xb4>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ae6:	d011      	beq.n	8008b0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f042 0201 	orr.w	r2, r2, #1
 8008af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008af8:	e008      	b.n	8008b0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f042 0201 	orr.w	r2, r2, #1
 8008b08:	601a      	str	r2, [r3, #0]
 8008b0a:	e000      	b.n	8008b0e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	40012c00 	.word	0x40012c00
 8008b20:	40000400 	.word	0x40000400
 8008b24:	40000800 	.word	0x40000800
 8008b28:	40000c00 	.word	0x40000c00
 8008b2c:	40013400 	.word	0x40013400
 8008b30:	40014000 	.word	0x40014000
 8008b34:	00010007 	.word	0x00010007

08008b38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e049      	b.n	8008bde <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d106      	bne.n	8008b64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7fa fddc 	bl	800371c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2202      	movs	r2, #2
 8008b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3304      	adds	r3, #4
 8008b74:	4619      	mov	r1, r3
 8008b76:	4610      	mov	r0, r2
 8008b78:	f000 fb80 	bl	800927c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
	...

08008be8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d109      	bne.n	8008c0c <HAL_TIM_PWM_Start+0x24>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	bf14      	ite	ne
 8008c04:	2301      	movne	r3, #1
 8008c06:	2300      	moveq	r3, #0
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	e03c      	b.n	8008c86 <HAL_TIM_PWM_Start+0x9e>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2b04      	cmp	r3, #4
 8008c10:	d109      	bne.n	8008c26 <HAL_TIM_PWM_Start+0x3e>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	bf14      	ite	ne
 8008c1e:	2301      	movne	r3, #1
 8008c20:	2300      	moveq	r3, #0
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	e02f      	b.n	8008c86 <HAL_TIM_PWM_Start+0x9e>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b08      	cmp	r3, #8
 8008c2a:	d109      	bne.n	8008c40 <HAL_TIM_PWM_Start+0x58>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	bf14      	ite	ne
 8008c38:	2301      	movne	r3, #1
 8008c3a:	2300      	moveq	r3, #0
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	e022      	b.n	8008c86 <HAL_TIM_PWM_Start+0x9e>
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2b0c      	cmp	r3, #12
 8008c44:	d109      	bne.n	8008c5a <HAL_TIM_PWM_Start+0x72>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	bf14      	ite	ne
 8008c52:	2301      	movne	r3, #1
 8008c54:	2300      	moveq	r3, #0
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	e015      	b.n	8008c86 <HAL_TIM_PWM_Start+0x9e>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b10      	cmp	r3, #16
 8008c5e:	d109      	bne.n	8008c74 <HAL_TIM_PWM_Start+0x8c>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	bf14      	ite	ne
 8008c6c:	2301      	movne	r3, #1
 8008c6e:	2300      	moveq	r3, #0
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	e008      	b.n	8008c86 <HAL_TIM_PWM_Start+0x9e>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	bf14      	ite	ne
 8008c80:	2301      	movne	r3, #1
 8008c82:	2300      	moveq	r3, #0
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e09c      	b.n	8008dc8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d104      	bne.n	8008c9e <HAL_TIM_PWM_Start+0xb6>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2202      	movs	r2, #2
 8008c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c9c:	e023      	b.n	8008ce6 <HAL_TIM_PWM_Start+0xfe>
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2b04      	cmp	r3, #4
 8008ca2:	d104      	bne.n	8008cae <HAL_TIM_PWM_Start+0xc6>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cac:	e01b      	b.n	8008ce6 <HAL_TIM_PWM_Start+0xfe>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b08      	cmp	r3, #8
 8008cb2:	d104      	bne.n	8008cbe <HAL_TIM_PWM_Start+0xd6>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cbc:	e013      	b.n	8008ce6 <HAL_TIM_PWM_Start+0xfe>
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b0c      	cmp	r3, #12
 8008cc2:	d104      	bne.n	8008cce <HAL_TIM_PWM_Start+0xe6>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ccc:	e00b      	b.n	8008ce6 <HAL_TIM_PWM_Start+0xfe>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b10      	cmp	r3, #16
 8008cd2:	d104      	bne.n	8008cde <HAL_TIM_PWM_Start+0xf6>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cdc:	e003      	b.n	8008ce6 <HAL_TIM_PWM_Start+0xfe>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2201      	movs	r2, #1
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 fe40 	bl	8009974 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a35      	ldr	r2, [pc, #212]	; (8008dd0 <HAL_TIM_PWM_Start+0x1e8>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d013      	beq.n	8008d26 <HAL_TIM_PWM_Start+0x13e>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a34      	ldr	r2, [pc, #208]	; (8008dd4 <HAL_TIM_PWM_Start+0x1ec>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d00e      	beq.n	8008d26 <HAL_TIM_PWM_Start+0x13e>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a32      	ldr	r2, [pc, #200]	; (8008dd8 <HAL_TIM_PWM_Start+0x1f0>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d009      	beq.n	8008d26 <HAL_TIM_PWM_Start+0x13e>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a31      	ldr	r2, [pc, #196]	; (8008ddc <HAL_TIM_PWM_Start+0x1f4>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d004      	beq.n	8008d26 <HAL_TIM_PWM_Start+0x13e>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a2f      	ldr	r2, [pc, #188]	; (8008de0 <HAL_TIM_PWM_Start+0x1f8>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d101      	bne.n	8008d2a <HAL_TIM_PWM_Start+0x142>
 8008d26:	2301      	movs	r3, #1
 8008d28:	e000      	b.n	8008d2c <HAL_TIM_PWM_Start+0x144>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d007      	beq.n	8008d40 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a22      	ldr	r2, [pc, #136]	; (8008dd0 <HAL_TIM_PWM_Start+0x1e8>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d01d      	beq.n	8008d86 <HAL_TIM_PWM_Start+0x19e>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d52:	d018      	beq.n	8008d86 <HAL_TIM_PWM_Start+0x19e>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a22      	ldr	r2, [pc, #136]	; (8008de4 <HAL_TIM_PWM_Start+0x1fc>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d013      	beq.n	8008d86 <HAL_TIM_PWM_Start+0x19e>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a21      	ldr	r2, [pc, #132]	; (8008de8 <HAL_TIM_PWM_Start+0x200>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d00e      	beq.n	8008d86 <HAL_TIM_PWM_Start+0x19e>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a1f      	ldr	r2, [pc, #124]	; (8008dec <HAL_TIM_PWM_Start+0x204>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d009      	beq.n	8008d86 <HAL_TIM_PWM_Start+0x19e>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a17      	ldr	r2, [pc, #92]	; (8008dd4 <HAL_TIM_PWM_Start+0x1ec>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d004      	beq.n	8008d86 <HAL_TIM_PWM_Start+0x19e>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a15      	ldr	r2, [pc, #84]	; (8008dd8 <HAL_TIM_PWM_Start+0x1f0>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d115      	bne.n	8008db2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689a      	ldr	r2, [r3, #8]
 8008d8c:	4b18      	ldr	r3, [pc, #96]	; (8008df0 <HAL_TIM_PWM_Start+0x208>)
 8008d8e:	4013      	ands	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2b06      	cmp	r3, #6
 8008d96:	d015      	beq.n	8008dc4 <HAL_TIM_PWM_Start+0x1dc>
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d9e:	d011      	beq.n	8008dc4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f042 0201 	orr.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db0:	e008      	b.n	8008dc4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f042 0201 	orr.w	r2, r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	e000      	b.n	8008dc6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	40012c00 	.word	0x40012c00
 8008dd4:	40013400 	.word	0x40013400
 8008dd8:	40014000 	.word	0x40014000
 8008ddc:	40014400 	.word	0x40014400
 8008de0:	40014800 	.word	0x40014800
 8008de4:	40000400 	.word	0x40000400
 8008de8:	40000800 	.word	0x40000800
 8008dec:	40000c00 	.word	0x40000c00
 8008df0:	00010007 	.word	0x00010007

08008df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	f003 0302 	and.w	r3, r3, #2
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d020      	beq.n	8008e58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d01b      	beq.n	8008e58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f06f 0202 	mvn.w	r2, #2
 8008e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	f003 0303 	and.w	r3, r3, #3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f9fe 	bl	8009240 <HAL_TIM_IC_CaptureCallback>
 8008e44:	e005      	b.n	8008e52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f9f0 	bl	800922c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fa01 	bl	8009254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	f003 0304 	and.w	r3, r3, #4
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d020      	beq.n	8008ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f003 0304 	and.w	r3, r3, #4
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d01b      	beq.n	8008ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f06f 0204 	mvn.w	r2, #4
 8008e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2202      	movs	r2, #2
 8008e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f9d8 	bl	8009240 <HAL_TIM_IC_CaptureCallback>
 8008e90:	e005      	b.n	8008e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f9ca 	bl	800922c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f9db 	bl	8009254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	f003 0308 	and.w	r3, r3, #8
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d020      	beq.n	8008ef0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f003 0308 	and.w	r3, r3, #8
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d01b      	beq.n	8008ef0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f06f 0208 	mvn.w	r2, #8
 8008ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2204      	movs	r2, #4
 8008ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	f003 0303 	and.w	r3, r3, #3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d003      	beq.n	8008ede <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f9b2 	bl	8009240 <HAL_TIM_IC_CaptureCallback>
 8008edc:	e005      	b.n	8008eea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f9a4 	bl	800922c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f9b5 	bl	8009254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	f003 0310 	and.w	r3, r3, #16
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d020      	beq.n	8008f3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f003 0310 	and.w	r3, r3, #16
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d01b      	beq.n	8008f3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f06f 0210 	mvn.w	r2, #16
 8008f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2208      	movs	r2, #8
 8008f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d003      	beq.n	8008f2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f98c 	bl	8009240 <HAL_TIM_IC_CaptureCallback>
 8008f28:	e005      	b.n	8008f36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f97e 	bl	800922c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f98f 	bl	8009254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00c      	beq.n	8008f60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d007      	beq.n	8008f60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f06f 0201 	mvn.w	r2, #1
 8008f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7f9 fdde 	bl	8002b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d104      	bne.n	8008f74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00c      	beq.n	8008f8e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d007      	beq.n	8008f8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8008f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fee3 	bl	8009d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00c      	beq.n	8008fb2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d007      	beq.n	8008fb2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 fedb 	bl	8009d68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00c      	beq.n	8008fd6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d007      	beq.n	8008fd6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f949 	bl	8009268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00c      	beq.n	8008ffa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f003 0320 	and.w	r3, r3, #32
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d007      	beq.n	8008ffa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f06f 0220 	mvn.w	r2, #32
 8008ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fea3 	bl	8009d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800901a:	2b01      	cmp	r3, #1
 800901c:	d101      	bne.n	8009022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800901e:	2302      	movs	r3, #2
 8009020:	e0ff      	b.n	8009222 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b14      	cmp	r3, #20
 800902e:	f200 80f0 	bhi.w	8009212 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009032:	a201      	add	r2, pc, #4	; (adr r2, 8009038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009038:	0800908d 	.word	0x0800908d
 800903c:	08009213 	.word	0x08009213
 8009040:	08009213 	.word	0x08009213
 8009044:	08009213 	.word	0x08009213
 8009048:	080090cd 	.word	0x080090cd
 800904c:	08009213 	.word	0x08009213
 8009050:	08009213 	.word	0x08009213
 8009054:	08009213 	.word	0x08009213
 8009058:	0800910f 	.word	0x0800910f
 800905c:	08009213 	.word	0x08009213
 8009060:	08009213 	.word	0x08009213
 8009064:	08009213 	.word	0x08009213
 8009068:	0800914f 	.word	0x0800914f
 800906c:	08009213 	.word	0x08009213
 8009070:	08009213 	.word	0x08009213
 8009074:	08009213 	.word	0x08009213
 8009078:	08009191 	.word	0x08009191
 800907c:	08009213 	.word	0x08009213
 8009080:	08009213 	.word	0x08009213
 8009084:	08009213 	.word	0x08009213
 8009088:	080091d1 	.word	0x080091d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68b9      	ldr	r1, [r7, #8]
 8009092:	4618      	mov	r0, r3
 8009094:	f000 f998 	bl	80093c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	699a      	ldr	r2, [r3, #24]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f042 0208 	orr.w	r2, r2, #8
 80090a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	699a      	ldr	r2, [r3, #24]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f022 0204 	bic.w	r2, r2, #4
 80090b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6999      	ldr	r1, [r3, #24]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	691a      	ldr	r2, [r3, #16]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	619a      	str	r2, [r3, #24]
      break;
 80090ca:	e0a5      	b.n	8009218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68b9      	ldr	r1, [r7, #8]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fa08 	bl	80094e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	699a      	ldr	r2, [r3, #24]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	699a      	ldr	r2, [r3, #24]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6999      	ldr	r1, [r3, #24]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	021a      	lsls	r2, r3, #8
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	430a      	orrs	r2, r1
 800910a:	619a      	str	r2, [r3, #24]
      break;
 800910c:	e084      	b.n	8009218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68b9      	ldr	r1, [r7, #8]
 8009114:	4618      	mov	r0, r3
 8009116:	f000 fa71 	bl	80095fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	69da      	ldr	r2, [r3, #28]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f042 0208 	orr.w	r2, r2, #8
 8009128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	69da      	ldr	r2, [r3, #28]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f022 0204 	bic.w	r2, r2, #4
 8009138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	69d9      	ldr	r1, [r3, #28]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	691a      	ldr	r2, [r3, #16]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	430a      	orrs	r2, r1
 800914a:	61da      	str	r2, [r3, #28]
      break;
 800914c:	e064      	b.n	8009218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68b9      	ldr	r1, [r7, #8]
 8009154:	4618      	mov	r0, r3
 8009156:	f000 fad9 	bl	800970c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	69da      	ldr	r2, [r3, #28]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	69da      	ldr	r2, [r3, #28]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	69d9      	ldr	r1, [r3, #28]
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	021a      	lsls	r2, r3, #8
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	430a      	orrs	r2, r1
 800918c:	61da      	str	r2, [r3, #28]
      break;
 800918e:	e043      	b.n	8009218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68b9      	ldr	r1, [r7, #8]
 8009196:	4618      	mov	r0, r3
 8009198:	f000 fb22 	bl	80097e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f042 0208 	orr.w	r2, r2, #8
 80091aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 0204 	bic.w	r2, r2, #4
 80091ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	691a      	ldr	r2, [r3, #16]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80091ce:	e023      	b.n	8009218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68b9      	ldr	r1, [r7, #8]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 fb66 	bl	80098a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	021a      	lsls	r2, r3, #8
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	430a      	orrs	r2, r1
 800920e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009210:	e002      	b.n	8009218 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	75fb      	strb	r3, [r7, #23]
      break;
 8009216:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009220:	7dfb      	ldrb	r3, [r7, #23]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3718      	adds	r7, #24
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop

0800922c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a46      	ldr	r2, [pc, #280]	; (80093a8 <TIM_Base_SetConfig+0x12c>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d013      	beq.n	80092bc <TIM_Base_SetConfig+0x40>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800929a:	d00f      	beq.n	80092bc <TIM_Base_SetConfig+0x40>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a43      	ldr	r2, [pc, #268]	; (80093ac <TIM_Base_SetConfig+0x130>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d00b      	beq.n	80092bc <TIM_Base_SetConfig+0x40>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a42      	ldr	r2, [pc, #264]	; (80093b0 <TIM_Base_SetConfig+0x134>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d007      	beq.n	80092bc <TIM_Base_SetConfig+0x40>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a41      	ldr	r2, [pc, #260]	; (80093b4 <TIM_Base_SetConfig+0x138>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d003      	beq.n	80092bc <TIM_Base_SetConfig+0x40>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a40      	ldr	r2, [pc, #256]	; (80093b8 <TIM_Base_SetConfig+0x13c>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d108      	bne.n	80092ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a35      	ldr	r2, [pc, #212]	; (80093a8 <TIM_Base_SetConfig+0x12c>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d01f      	beq.n	8009316 <TIM_Base_SetConfig+0x9a>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092dc:	d01b      	beq.n	8009316 <TIM_Base_SetConfig+0x9a>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a32      	ldr	r2, [pc, #200]	; (80093ac <TIM_Base_SetConfig+0x130>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d017      	beq.n	8009316 <TIM_Base_SetConfig+0x9a>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a31      	ldr	r2, [pc, #196]	; (80093b0 <TIM_Base_SetConfig+0x134>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d013      	beq.n	8009316 <TIM_Base_SetConfig+0x9a>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a30      	ldr	r2, [pc, #192]	; (80093b4 <TIM_Base_SetConfig+0x138>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d00f      	beq.n	8009316 <TIM_Base_SetConfig+0x9a>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a2f      	ldr	r2, [pc, #188]	; (80093b8 <TIM_Base_SetConfig+0x13c>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d00b      	beq.n	8009316 <TIM_Base_SetConfig+0x9a>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a2e      	ldr	r2, [pc, #184]	; (80093bc <TIM_Base_SetConfig+0x140>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d007      	beq.n	8009316 <TIM_Base_SetConfig+0x9a>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a2d      	ldr	r2, [pc, #180]	; (80093c0 <TIM_Base_SetConfig+0x144>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d003      	beq.n	8009316 <TIM_Base_SetConfig+0x9a>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a2c      	ldr	r2, [pc, #176]	; (80093c4 <TIM_Base_SetConfig+0x148>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d108      	bne.n	8009328 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800931c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	4313      	orrs	r3, r2
 8009326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	4313      	orrs	r3, r2
 8009334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	689a      	ldr	r2, [r3, #8]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a16      	ldr	r2, [pc, #88]	; (80093a8 <TIM_Base_SetConfig+0x12c>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d00f      	beq.n	8009374 <TIM_Base_SetConfig+0xf8>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a18      	ldr	r2, [pc, #96]	; (80093b8 <TIM_Base_SetConfig+0x13c>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d00b      	beq.n	8009374 <TIM_Base_SetConfig+0xf8>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a17      	ldr	r2, [pc, #92]	; (80093bc <TIM_Base_SetConfig+0x140>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d007      	beq.n	8009374 <TIM_Base_SetConfig+0xf8>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a16      	ldr	r2, [pc, #88]	; (80093c0 <TIM_Base_SetConfig+0x144>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d003      	beq.n	8009374 <TIM_Base_SetConfig+0xf8>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a15      	ldr	r2, [pc, #84]	; (80093c4 <TIM_Base_SetConfig+0x148>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d103      	bne.n	800937c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	691a      	ldr	r2, [r3, #16]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b01      	cmp	r3, #1
 800938c:	d105      	bne.n	800939a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	f023 0201 	bic.w	r2, r3, #1
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	611a      	str	r2, [r3, #16]
  }
}
 800939a:	bf00      	nop
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	40012c00 	.word	0x40012c00
 80093ac:	40000400 	.word	0x40000400
 80093b0:	40000800 	.word	0x40000800
 80093b4:	40000c00 	.word	0x40000c00
 80093b8:	40013400 	.word	0x40013400
 80093bc:	40014000 	.word	0x40014000
 80093c0:	40014400 	.word	0x40014400
 80093c4:	40014800 	.word	0x40014800

080093c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a1b      	ldr	r3, [r3, #32]
 80093dc:	f023 0201 	bic.w	r2, r3, #1
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f023 0303 	bic.w	r3, r3, #3
 8009402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	4313      	orrs	r3, r2
 800940c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f023 0302 	bic.w	r3, r3, #2
 8009414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	4313      	orrs	r3, r2
 800941e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a2c      	ldr	r2, [pc, #176]	; (80094d4 <TIM_OC1_SetConfig+0x10c>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d00f      	beq.n	8009448 <TIM_OC1_SetConfig+0x80>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a2b      	ldr	r2, [pc, #172]	; (80094d8 <TIM_OC1_SetConfig+0x110>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d00b      	beq.n	8009448 <TIM_OC1_SetConfig+0x80>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a2a      	ldr	r2, [pc, #168]	; (80094dc <TIM_OC1_SetConfig+0x114>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d007      	beq.n	8009448 <TIM_OC1_SetConfig+0x80>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a29      	ldr	r2, [pc, #164]	; (80094e0 <TIM_OC1_SetConfig+0x118>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d003      	beq.n	8009448 <TIM_OC1_SetConfig+0x80>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a28      	ldr	r2, [pc, #160]	; (80094e4 <TIM_OC1_SetConfig+0x11c>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d10c      	bne.n	8009462 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	f023 0308 	bic.w	r3, r3, #8
 800944e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	697a      	ldr	r2, [r7, #20]
 8009456:	4313      	orrs	r3, r2
 8009458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f023 0304 	bic.w	r3, r3, #4
 8009460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a1b      	ldr	r2, [pc, #108]	; (80094d4 <TIM_OC1_SetConfig+0x10c>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d00f      	beq.n	800948a <TIM_OC1_SetConfig+0xc2>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a1a      	ldr	r2, [pc, #104]	; (80094d8 <TIM_OC1_SetConfig+0x110>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d00b      	beq.n	800948a <TIM_OC1_SetConfig+0xc2>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a19      	ldr	r2, [pc, #100]	; (80094dc <TIM_OC1_SetConfig+0x114>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d007      	beq.n	800948a <TIM_OC1_SetConfig+0xc2>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a18      	ldr	r2, [pc, #96]	; (80094e0 <TIM_OC1_SetConfig+0x118>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d003      	beq.n	800948a <TIM_OC1_SetConfig+0xc2>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a17      	ldr	r2, [pc, #92]	; (80094e4 <TIM_OC1_SetConfig+0x11c>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d111      	bne.n	80094ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	685a      	ldr	r2, [r3, #4]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	621a      	str	r2, [r3, #32]
}
 80094c8:	bf00      	nop
 80094ca:	371c      	adds	r7, #28
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr
 80094d4:	40012c00 	.word	0x40012c00
 80094d8:	40013400 	.word	0x40013400
 80094dc:	40014000 	.word	0x40014000
 80094e0:	40014400 	.word	0x40014400
 80094e4:	40014800 	.word	0x40014800

080094e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b087      	sub	sp, #28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a1b      	ldr	r3, [r3, #32]
 80094fc:	f023 0210 	bic.w	r2, r3, #16
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800951a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	021b      	lsls	r3, r3, #8
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	4313      	orrs	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	f023 0320 	bic.w	r3, r3, #32
 8009536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	011b      	lsls	r3, r3, #4
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	4313      	orrs	r3, r2
 8009542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a28      	ldr	r2, [pc, #160]	; (80095e8 <TIM_OC2_SetConfig+0x100>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d003      	beq.n	8009554 <TIM_OC2_SetConfig+0x6c>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a27      	ldr	r2, [pc, #156]	; (80095ec <TIM_OC2_SetConfig+0x104>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d10d      	bne.n	8009570 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800955a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	011b      	lsls	r3, r3, #4
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	4313      	orrs	r3, r2
 8009566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800956e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a1d      	ldr	r2, [pc, #116]	; (80095e8 <TIM_OC2_SetConfig+0x100>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d00f      	beq.n	8009598 <TIM_OC2_SetConfig+0xb0>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a1c      	ldr	r2, [pc, #112]	; (80095ec <TIM_OC2_SetConfig+0x104>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d00b      	beq.n	8009598 <TIM_OC2_SetConfig+0xb0>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a1b      	ldr	r2, [pc, #108]	; (80095f0 <TIM_OC2_SetConfig+0x108>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d007      	beq.n	8009598 <TIM_OC2_SetConfig+0xb0>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a1a      	ldr	r2, [pc, #104]	; (80095f4 <TIM_OC2_SetConfig+0x10c>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d003      	beq.n	8009598 <TIM_OC2_SetConfig+0xb0>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a19      	ldr	r2, [pc, #100]	; (80095f8 <TIM_OC2_SetConfig+0x110>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d113      	bne.n	80095c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800959e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	4313      	orrs	r3, r2
 80095be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	621a      	str	r2, [r3, #32]
}
 80095da:	bf00      	nop
 80095dc:	371c      	adds	r7, #28
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	40012c00 	.word	0x40012c00
 80095ec:	40013400 	.word	0x40013400
 80095f0:	40014000 	.word	0x40014000
 80095f4:	40014400 	.word	0x40014400
 80095f8:	40014800 	.word	0x40014800

080095fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b087      	sub	sp, #28
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a1b      	ldr	r3, [r3, #32]
 8009610:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	69db      	ldr	r3, [r3, #28]
 8009622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800962a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800962e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 0303 	bic.w	r3, r3, #3
 8009636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	4313      	orrs	r3, r2
 8009640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	021b      	lsls	r3, r3, #8
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	4313      	orrs	r3, r2
 8009654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a27      	ldr	r2, [pc, #156]	; (80096f8 <TIM_OC3_SetConfig+0xfc>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d003      	beq.n	8009666 <TIM_OC3_SetConfig+0x6a>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a26      	ldr	r2, [pc, #152]	; (80096fc <TIM_OC3_SetConfig+0x100>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d10d      	bne.n	8009682 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800966c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	021b      	lsls	r3, r3, #8
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	4313      	orrs	r3, r2
 8009678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a1c      	ldr	r2, [pc, #112]	; (80096f8 <TIM_OC3_SetConfig+0xfc>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d00f      	beq.n	80096aa <TIM_OC3_SetConfig+0xae>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a1b      	ldr	r2, [pc, #108]	; (80096fc <TIM_OC3_SetConfig+0x100>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d00b      	beq.n	80096aa <TIM_OC3_SetConfig+0xae>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a1a      	ldr	r2, [pc, #104]	; (8009700 <TIM_OC3_SetConfig+0x104>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d007      	beq.n	80096aa <TIM_OC3_SetConfig+0xae>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a19      	ldr	r2, [pc, #100]	; (8009704 <TIM_OC3_SetConfig+0x108>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d003      	beq.n	80096aa <TIM_OC3_SetConfig+0xae>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a18      	ldr	r2, [pc, #96]	; (8009708 <TIM_OC3_SetConfig+0x10c>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d113      	bne.n	80096d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	011b      	lsls	r3, r3, #4
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	011b      	lsls	r3, r3, #4
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	685a      	ldr	r2, [r3, #4]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	697a      	ldr	r2, [r7, #20]
 80096ea:	621a      	str	r2, [r3, #32]
}
 80096ec:	bf00      	nop
 80096ee:	371c      	adds	r7, #28
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr
 80096f8:	40012c00 	.word	0x40012c00
 80096fc:	40013400 	.word	0x40013400
 8009700:	40014000 	.word	0x40014000
 8009704:	40014400 	.word	0x40014400
 8009708:	40014800 	.word	0x40014800

0800970c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800970c:	b480      	push	{r7}
 800970e:	b087      	sub	sp, #28
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a1b      	ldr	r3, [r3, #32]
 8009720:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800973a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800973e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	021b      	lsls	r3, r3, #8
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	4313      	orrs	r3, r2
 8009752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800975a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	031b      	lsls	r3, r3, #12
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	4313      	orrs	r3, r2
 8009766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a18      	ldr	r2, [pc, #96]	; (80097cc <TIM_OC4_SetConfig+0xc0>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d00f      	beq.n	8009790 <TIM_OC4_SetConfig+0x84>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a17      	ldr	r2, [pc, #92]	; (80097d0 <TIM_OC4_SetConfig+0xc4>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00b      	beq.n	8009790 <TIM_OC4_SetConfig+0x84>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a16      	ldr	r2, [pc, #88]	; (80097d4 <TIM_OC4_SetConfig+0xc8>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d007      	beq.n	8009790 <TIM_OC4_SetConfig+0x84>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a15      	ldr	r2, [pc, #84]	; (80097d8 <TIM_OC4_SetConfig+0xcc>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d003      	beq.n	8009790 <TIM_OC4_SetConfig+0x84>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a14      	ldr	r2, [pc, #80]	; (80097dc <TIM_OC4_SetConfig+0xd0>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d109      	bne.n	80097a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	695b      	ldr	r3, [r3, #20]
 800979c:	019b      	lsls	r3, r3, #6
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	621a      	str	r2, [r3, #32]
}
 80097be:	bf00      	nop
 80097c0:	371c      	adds	r7, #28
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	40012c00 	.word	0x40012c00
 80097d0:	40013400 	.word	0x40013400
 80097d4:	40014000 	.word	0x40014000
 80097d8:	40014400 	.word	0x40014400
 80097dc:	40014800 	.word	0x40014800

080097e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b087      	sub	sp, #28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a1b      	ldr	r3, [r3, #32]
 80097f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800980e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	4313      	orrs	r3, r2
 800981c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009824:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	041b      	lsls	r3, r3, #16
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	4313      	orrs	r3, r2
 8009830:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a17      	ldr	r2, [pc, #92]	; (8009894 <TIM_OC5_SetConfig+0xb4>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d00f      	beq.n	800985a <TIM_OC5_SetConfig+0x7a>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a16      	ldr	r2, [pc, #88]	; (8009898 <TIM_OC5_SetConfig+0xb8>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00b      	beq.n	800985a <TIM_OC5_SetConfig+0x7a>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a15      	ldr	r2, [pc, #84]	; (800989c <TIM_OC5_SetConfig+0xbc>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d007      	beq.n	800985a <TIM_OC5_SetConfig+0x7a>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a14      	ldr	r2, [pc, #80]	; (80098a0 <TIM_OC5_SetConfig+0xc0>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d003      	beq.n	800985a <TIM_OC5_SetConfig+0x7a>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a13      	ldr	r2, [pc, #76]	; (80098a4 <TIM_OC5_SetConfig+0xc4>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d109      	bne.n	800986e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009860:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	021b      	lsls	r3, r3, #8
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	4313      	orrs	r3, r2
 800986c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	697a      	ldr	r2, [r7, #20]
 8009872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	685a      	ldr	r2, [r3, #4]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	621a      	str	r2, [r3, #32]
}
 8009888:	bf00      	nop
 800988a:	371c      	adds	r7, #28
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	40012c00 	.word	0x40012c00
 8009898:	40013400 	.word	0x40013400
 800989c:	40014000 	.word	0x40014000
 80098a0:	40014400 	.word	0x40014400
 80098a4:	40014800 	.word	0x40014800

080098a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a1b      	ldr	r3, [r3, #32]
 80098bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	021b      	lsls	r3, r3, #8
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	051b      	lsls	r3, r3, #20
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a18      	ldr	r2, [pc, #96]	; (8009960 <TIM_OC6_SetConfig+0xb8>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d00f      	beq.n	8009924 <TIM_OC6_SetConfig+0x7c>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a17      	ldr	r2, [pc, #92]	; (8009964 <TIM_OC6_SetConfig+0xbc>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d00b      	beq.n	8009924 <TIM_OC6_SetConfig+0x7c>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a16      	ldr	r2, [pc, #88]	; (8009968 <TIM_OC6_SetConfig+0xc0>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d007      	beq.n	8009924 <TIM_OC6_SetConfig+0x7c>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a15      	ldr	r2, [pc, #84]	; (800996c <TIM_OC6_SetConfig+0xc4>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d003      	beq.n	8009924 <TIM_OC6_SetConfig+0x7c>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a14      	ldr	r2, [pc, #80]	; (8009970 <TIM_OC6_SetConfig+0xc8>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d109      	bne.n	8009938 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800992a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	029b      	lsls	r3, r3, #10
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	4313      	orrs	r3, r2
 8009936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	621a      	str	r2, [r3, #32]
}
 8009952:	bf00      	nop
 8009954:	371c      	adds	r7, #28
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	40012c00 	.word	0x40012c00
 8009964:	40013400 	.word	0x40013400
 8009968:	40014000 	.word	0x40014000
 800996c:	40014400 	.word	0x40014400
 8009970:	40014800 	.word	0x40014800

08009974 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009974:	b480      	push	{r7}
 8009976:	b087      	sub	sp, #28
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	f003 031f 	and.w	r3, r3, #31
 8009986:	2201      	movs	r2, #1
 8009988:	fa02 f303 	lsl.w	r3, r2, r3
 800998c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6a1a      	ldr	r2, [r3, #32]
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	43db      	mvns	r3, r3
 8009996:	401a      	ands	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6a1a      	ldr	r2, [r3, #32]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	f003 031f 	and.w	r3, r3, #31
 80099a6:	6879      	ldr	r1, [r7, #4]
 80099a8:	fa01 f303 	lsl.w	r3, r1, r3
 80099ac:	431a      	orrs	r2, r3
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	621a      	str	r2, [r3, #32]
}
 80099b2:	bf00      	nop
 80099b4:	371c      	adds	r7, #28
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
	...

080099c0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d109      	bne.n	80099e4 <HAL_TIMEx_PWMN_Start+0x24>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b01      	cmp	r3, #1
 80099da:	bf14      	ite	ne
 80099dc:	2301      	movne	r3, #1
 80099de:	2300      	moveq	r3, #0
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	e022      	b.n	8009a2a <HAL_TIMEx_PWMN_Start+0x6a>
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2b04      	cmp	r3, #4
 80099e8:	d109      	bne.n	80099fe <HAL_TIMEx_PWMN_Start+0x3e>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	bf14      	ite	ne
 80099f6:	2301      	movne	r3, #1
 80099f8:	2300      	moveq	r3, #0
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	e015      	b.n	8009a2a <HAL_TIMEx_PWMN_Start+0x6a>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	2b08      	cmp	r3, #8
 8009a02:	d109      	bne.n	8009a18 <HAL_TIMEx_PWMN_Start+0x58>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	bf14      	ite	ne
 8009a10:	2301      	movne	r3, #1
 8009a12:	2300      	moveq	r3, #0
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	e008      	b.n	8009a2a <HAL_TIMEx_PWMN_Start+0x6a>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	bf14      	ite	ne
 8009a24:	2301      	movne	r3, #1
 8009a26:	2300      	moveq	r3, #0
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e06e      	b.n	8009b10 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d104      	bne.n	8009a42 <HAL_TIMEx_PWMN_Start+0x82>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2202      	movs	r2, #2
 8009a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a40:	e013      	b.n	8009a6a <HAL_TIMEx_PWMN_Start+0xaa>
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b04      	cmp	r3, #4
 8009a46:	d104      	bne.n	8009a52 <HAL_TIMEx_PWMN_Start+0x92>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a50:	e00b      	b.n	8009a6a <HAL_TIMEx_PWMN_Start+0xaa>
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b08      	cmp	r3, #8
 8009a56:	d104      	bne.n	8009a62 <HAL_TIMEx_PWMN_Start+0xa2>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a60:	e003      	b.n	8009a6a <HAL_TIMEx_PWMN_Start+0xaa>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2202      	movs	r2, #2
 8009a66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2204      	movs	r2, #4
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 f982 	bl	8009d7c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a22      	ldr	r2, [pc, #136]	; (8009b18 <HAL_TIMEx_PWMN_Start+0x158>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d01d      	beq.n	8009ace <HAL_TIMEx_PWMN_Start+0x10e>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a9a:	d018      	beq.n	8009ace <HAL_TIMEx_PWMN_Start+0x10e>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a1e      	ldr	r2, [pc, #120]	; (8009b1c <HAL_TIMEx_PWMN_Start+0x15c>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d013      	beq.n	8009ace <HAL_TIMEx_PWMN_Start+0x10e>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a1d      	ldr	r2, [pc, #116]	; (8009b20 <HAL_TIMEx_PWMN_Start+0x160>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d00e      	beq.n	8009ace <HAL_TIMEx_PWMN_Start+0x10e>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a1b      	ldr	r2, [pc, #108]	; (8009b24 <HAL_TIMEx_PWMN_Start+0x164>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d009      	beq.n	8009ace <HAL_TIMEx_PWMN_Start+0x10e>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a1a      	ldr	r2, [pc, #104]	; (8009b28 <HAL_TIMEx_PWMN_Start+0x168>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d004      	beq.n	8009ace <HAL_TIMEx_PWMN_Start+0x10e>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a18      	ldr	r2, [pc, #96]	; (8009b2c <HAL_TIMEx_PWMN_Start+0x16c>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d115      	bne.n	8009afa <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	4b16      	ldr	r3, [pc, #88]	; (8009b30 <HAL_TIMEx_PWMN_Start+0x170>)
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2b06      	cmp	r3, #6
 8009ade:	d015      	beq.n	8009b0c <HAL_TIMEx_PWMN_Start+0x14c>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ae6:	d011      	beq.n	8009b0c <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f042 0201 	orr.w	r2, r2, #1
 8009af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009af8:	e008      	b.n	8009b0c <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f042 0201 	orr.w	r2, r2, #1
 8009b08:	601a      	str	r2, [r3, #0]
 8009b0a:	e000      	b.n	8009b0e <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	40012c00 	.word	0x40012c00
 8009b1c:	40000400 	.word	0x40000400
 8009b20:	40000800 	.word	0x40000800
 8009b24:	40000c00 	.word	0x40000c00
 8009b28:	40013400 	.word	0x40013400
 8009b2c:	40014000 	.word	0x40014000
 8009b30:	00010007 	.word	0x00010007

08009b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d101      	bne.n	8009b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b48:	2302      	movs	r3, #2
 8009b4a:	e068      	b.n	8009c1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2202      	movs	r2, #2
 8009b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a2e      	ldr	r2, [pc, #184]	; (8009c2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d004      	beq.n	8009b80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a2d      	ldr	r2, [pc, #180]	; (8009c30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d108      	bne.n	8009b92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a1e      	ldr	r2, [pc, #120]	; (8009c2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d01d      	beq.n	8009bf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bbe:	d018      	beq.n	8009bf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a1b      	ldr	r2, [pc, #108]	; (8009c34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d013      	beq.n	8009bf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a1a      	ldr	r2, [pc, #104]	; (8009c38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d00e      	beq.n	8009bf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a18      	ldr	r2, [pc, #96]	; (8009c3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d009      	beq.n	8009bf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a13      	ldr	r2, [pc, #76]	; (8009c30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d004      	beq.n	8009bf2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a14      	ldr	r2, [pc, #80]	; (8009c40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d10c      	bne.n	8009c0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3714      	adds	r7, #20
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	40012c00 	.word	0x40012c00
 8009c30:	40013400 	.word	0x40013400
 8009c34:	40000400 	.word	0x40000400
 8009c38:	40000800 	.word	0x40000800
 8009c3c:	40000c00 	.word	0x40000c00
 8009c40:	40014000 	.word	0x40014000

08009c44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d101      	bne.n	8009c60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	e065      	b.n	8009d2c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	4313      	orrs	r3, r2
 8009c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	041b      	lsls	r3, r3, #16
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a16      	ldr	r2, [pc, #88]	; (8009d38 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d004      	beq.n	8009cee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a14      	ldr	r2, [pc, #80]	; (8009d3c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d115      	bne.n	8009d1a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	051b      	lsls	r3, r3, #20
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr
 8009d38:	40012c00 	.word	0x40012c00
 8009d3c:	40013400 	.word	0x40013400

08009d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	f003 030f 	and.w	r3, r3, #15
 8009d8e:	2204      	movs	r2, #4
 8009d90:	fa02 f303 	lsl.w	r3, r2, r3
 8009d94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6a1a      	ldr	r2, [r3, #32]
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	43db      	mvns	r3, r3
 8009d9e:	401a      	ands	r2, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6a1a      	ldr	r2, [r3, #32]
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	f003 030f 	and.w	r3, r3, #15
 8009dae:	6879      	ldr	r1, [r7, #4]
 8009db0:	fa01 f303 	lsl.w	r3, r1, r3
 8009db4:	431a      	orrs	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	621a      	str	r2, [r3, #32]
}
 8009dba:	bf00      	nop
 8009dbc:	371c      	adds	r7, #28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b082      	sub	sp, #8
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d101      	bne.n	8009dd8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e040      	b.n	8009e5a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d106      	bne.n	8009dee <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f7f9 fd29 	bl	8003840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2224      	movs	r2, #36	; 0x24
 8009df2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f022 0201 	bic.w	r2, r2, #1
 8009e02:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fee7 	bl	800abe0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fc2c 	bl	800a670 <UART_SetConfig>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d101      	bne.n	8009e22 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e01b      	b.n	8009e5a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	689a      	ldr	r2, [r3, #8]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f042 0201 	orr.w	r2, r2, #1
 8009e50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 ff66 	bl	800ad24 <UART_CheckIdleState>
 8009e58:	4603      	mov	r3, r0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b08a      	sub	sp, #40	; 0x28
 8009e66:	af02      	add	r7, sp, #8
 8009e68:	60f8      	str	r0, [r7, #12]
 8009e6a:	60b9      	str	r1, [r7, #8]
 8009e6c:	603b      	str	r3, [r7, #0]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e76:	2b20      	cmp	r3, #32
 8009e78:	d178      	bne.n	8009f6c <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d002      	beq.n	8009e86 <HAL_UART_Transmit+0x24>
 8009e80:	88fb      	ldrh	r3, [r7, #6]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	e071      	b.n	8009f6e <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2221      	movs	r2, #33	; 0x21
 8009e96:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e98:	f7fa f84a 	bl	8003f30 <HAL_GetTick>
 8009e9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	88fa      	ldrh	r2, [r7, #6]
 8009ea2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	88fa      	ldrh	r2, [r7, #6]
 8009eaa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eb6:	d108      	bne.n	8009eca <HAL_UART_Transmit+0x68>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d104      	bne.n	8009eca <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	61bb      	str	r3, [r7, #24]
 8009ec8:	e003      	b.n	8009ed2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009ed2:	e030      	b.n	8009f36 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	2200      	movs	r2, #0
 8009edc:	2180      	movs	r1, #128	; 0x80
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f000 ffc8 	bl	800ae74 <UART_WaitOnFlagUntilTimeout>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d004      	beq.n	8009ef4 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2220      	movs	r2, #32
 8009eee:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e03c      	b.n	8009f6e <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10b      	bne.n	8009f12 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	881a      	ldrh	r2, [r3, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f06:	b292      	uxth	r2, r2
 8009f08:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	3302      	adds	r3, #2
 8009f0e:	61bb      	str	r3, [r7, #24]
 8009f10:	e008      	b.n	8009f24 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	781a      	ldrb	r2, [r3, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	b292      	uxth	r2, r2
 8009f1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	3301      	adds	r3, #1
 8009f22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1c8      	bne.n	8009ed4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	2140      	movs	r1, #64	; 0x40
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f000 ff91 	bl	800ae74 <UART_WaitOnFlagUntilTimeout>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d004      	beq.n	8009f62 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2220      	movs	r2, #32
 8009f5c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	e005      	b.n	8009f6e <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2220      	movs	r2, #32
 8009f66:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	e000      	b.n	8009f6e <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009f6c:	2302      	movs	r3, #2
  }
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3720      	adds	r7, #32
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b08a      	sub	sp, #40	; 0x28
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	4613      	mov	r3, r2
 8009f84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f8c:	2b20      	cmp	r3, #32
 8009f8e:	d137      	bne.n	800a000 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d002      	beq.n	8009f9c <HAL_UART_Receive_DMA+0x24>
 8009f96:	88fb      	ldrh	r3, [r7, #6]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d101      	bne.n	8009fa0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e030      	b.n	800a002 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a18      	ldr	r2, [pc, #96]	; (800a00c <HAL_UART_Receive_DMA+0x94>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d01f      	beq.n	8009ff0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d018      	beq.n	8009ff0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	e853 3f00 	ldrex	r3, [r3]
 8009fca:	613b      	str	r3, [r7, #16]
   return(result);
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fdc:	623b      	str	r3, [r7, #32]
 8009fde:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe0:	69f9      	ldr	r1, [r7, #28]
 8009fe2:	6a3a      	ldr	r2, [r7, #32]
 8009fe4:	e841 2300 	strex	r3, r2, [r1]
 8009fe8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1e6      	bne.n	8009fbe <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009ff0:	88fb      	ldrh	r3, [r7, #6]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	68b9      	ldr	r1, [r7, #8]
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 ffaa 	bl	800af50 <UART_Start_Receive_DMA>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	e000      	b.n	800a002 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a000:	2302      	movs	r3, #2
  }
}
 800a002:	4618      	mov	r0, r3
 800a004:	3728      	adds	r7, #40	; 0x28
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	40008000 	.word	0x40008000

0800a010 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b0ba      	sub	sp, #232	; 0xe8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a036:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a03a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a03e:	4013      	ands	r3, r2
 800a040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d115      	bne.n	800a078 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a050:	f003 0320 	and.w	r3, r3, #32
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00f      	beq.n	800a078 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a05c:	f003 0320 	and.w	r3, r3, #32
 800a060:	2b00      	cmp	r3, #0
 800a062:	d009      	beq.n	800a078 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 82ca 	beq.w	800a602 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	4798      	blx	r3
      }
      return;
 800a076:	e2c4      	b.n	800a602 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800a078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 8117 	beq.w	800a2b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a086:	f003 0301 	and.w	r3, r3, #1
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d106      	bne.n	800a09c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a08e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a092:	4b85      	ldr	r3, [pc, #532]	; (800a2a8 <HAL_UART_IRQHandler+0x298>)
 800a094:	4013      	ands	r3, r2
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 810a 	beq.w	800a2b0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a09c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0a0:	f003 0301 	and.w	r3, r3, #1
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d011      	beq.n	800a0cc <HAL_UART_IRQHandler+0xbc>
 800a0a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00b      	beq.n	800a0cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0c2:	f043 0201 	orr.w	r2, r3, #1
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0d0:	f003 0302 	and.w	r3, r3, #2
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d011      	beq.n	800a0fc <HAL_UART_IRQHandler+0xec>
 800a0d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00b      	beq.n	800a0fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2202      	movs	r2, #2
 800a0ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0f2:	f043 0204 	orr.w	r2, r3, #4
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a100:	f003 0304 	and.w	r3, r3, #4
 800a104:	2b00      	cmp	r3, #0
 800a106:	d011      	beq.n	800a12c <HAL_UART_IRQHandler+0x11c>
 800a108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a10c:	f003 0301 	and.w	r3, r3, #1
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00b      	beq.n	800a12c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2204      	movs	r2, #4
 800a11a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a122:	f043 0202 	orr.w	r2, r3, #2
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a12c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a130:	f003 0308 	and.w	r3, r3, #8
 800a134:	2b00      	cmp	r3, #0
 800a136:	d017      	beq.n	800a168 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a13c:	f003 0320 	and.w	r3, r3, #32
 800a140:	2b00      	cmp	r3, #0
 800a142:	d105      	bne.n	800a150 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a148:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00b      	beq.n	800a168 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2208      	movs	r2, #8
 800a156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a15e:	f043 0208 	orr.w	r2, r3, #8
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a16c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a170:	2b00      	cmp	r3, #0
 800a172:	d012      	beq.n	800a19a <HAL_UART_IRQHandler+0x18a>
 800a174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a178:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00c      	beq.n	800a19a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a188:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a190:	f043 0220 	orr.w	r2, r3, #32
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 8230 	beq.w	800a606 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a1a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1aa:	f003 0320 	and.w	r3, r3, #32
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00d      	beq.n	800a1ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a1b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1b6:	f003 0320 	and.w	r3, r3, #32
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d007      	beq.n	800a1ce <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1e2:	2b40      	cmp	r3, #64	; 0x40
 800a1e4:	d005      	beq.n	800a1f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a1e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d04f      	beq.n	800a292 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 ff72 	bl	800b0dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a202:	2b40      	cmp	r3, #64	; 0x40
 800a204:	d141      	bne.n	800a28a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3308      	adds	r3, #8
 800a20c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a210:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a214:	e853 3f00 	ldrex	r3, [r3]
 800a218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a21c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3308      	adds	r3, #8
 800a22e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a232:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a23e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a242:	e841 2300 	strex	r3, r2, [r1]
 800a246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a24a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1d9      	bne.n	800a206 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a256:	2b00      	cmp	r3, #0
 800a258:	d013      	beq.n	800a282 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a25e:	4a13      	ldr	r2, [pc, #76]	; (800a2ac <HAL_UART_IRQHandler+0x29c>)
 800a260:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a266:	4618      	mov	r0, r3
 800a268:	f7fb fc8a 	bl	8005b80 <HAL_DMA_Abort_IT>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d017      	beq.n	800a2a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a27c:	4610      	mov	r0, r2
 800a27e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a280:	e00f      	b.n	800a2a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f9de 	bl	800a644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a288:	e00b      	b.n	800a2a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f9da 	bl	800a644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a290:	e007      	b.n	800a2a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f9d6 	bl	800a644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a2a0:	e1b1      	b.n	800a606 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2a2:	bf00      	nop
    return;
 800a2a4:	e1af      	b.n	800a606 <HAL_UART_IRQHandler+0x5f6>
 800a2a6:	bf00      	nop
 800a2a8:	04000120 	.word	0x04000120
 800a2ac:	0800b38d 	.word	0x0800b38d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	f040 816a 	bne.w	800a58e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2be:	f003 0310 	and.w	r3, r3, #16
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f000 8163 	beq.w	800a58e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a2c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2cc:	f003 0310 	and.w	r3, r3, #16
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 815c 	beq.w	800a58e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2210      	movs	r2, #16
 800a2dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e8:	2b40      	cmp	r3, #64	; 0x40
 800a2ea:	f040 80d4 	bne.w	800a496 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a2fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 80ad 	beq.w	800a45e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a30a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a30e:	429a      	cmp	r2, r3
 800a310:	f080 80a5 	bcs.w	800a45e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a31a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 0320 	and.w	r3, r3, #32
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f040 8086 	bne.w	800a43c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a338:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a33c:	e853 3f00 	ldrex	r3, [r3]
 800a340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a344:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a34c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	461a      	mov	r2, r3
 800a356:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a35a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a35e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a362:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a366:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a36a:	e841 2300 	strex	r3, r2, [r1]
 800a36e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1da      	bne.n	800a330 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	3308      	adds	r3, #8
 800a380:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a384:	e853 3f00 	ldrex	r3, [r3]
 800a388:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a38a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a38c:	f023 0301 	bic.w	r3, r3, #1
 800a390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3308      	adds	r3, #8
 800a39a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a39e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a3a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a3a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a3b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e1      	bne.n	800a37a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3308      	adds	r3, #8
 800a3bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3c0:	e853 3f00 	ldrex	r3, [r3]
 800a3c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a3c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3308      	adds	r3, #8
 800a3d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a3da:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a3dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a3e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a3e2:	e841 2300 	strex	r3, r2, [r1]
 800a3e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a3e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1e3      	bne.n	800a3b6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2220      	movs	r2, #32
 800a3f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a404:	e853 3f00 	ldrex	r3, [r3]
 800a408:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a40a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a40c:	f023 0310 	bic.w	r3, r3, #16
 800a410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	461a      	mov	r2, r3
 800a41a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a41e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a420:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a422:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a424:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a426:	e841 2300 	strex	r3, r2, [r1]
 800a42a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a42c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1e4      	bne.n	800a3fc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a436:	4618      	mov	r0, r3
 800a438:	f7fb fb64 	bl	8005b04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2202      	movs	r2, #2
 800a440:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a44e:	b29b      	uxth	r3, r3
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	b29b      	uxth	r3, r3
 800a454:	4619      	mov	r1, r3
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f8fe 	bl	800a658 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a45c:	e0d5      	b.n	800a60a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a464:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a468:	429a      	cmp	r2, r3
 800a46a:	f040 80ce 	bne.w	800a60a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0320 	and.w	r3, r3, #32
 800a47a:	2b20      	cmp	r3, #32
 800a47c:	f040 80c5 	bne.w	800a60a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2202      	movs	r2, #2
 800a484:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a48c:	4619      	mov	r1, r3
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 f8e2 	bl	800a658 <HAL_UARTEx_RxEventCallback>
      return;
 800a494:	e0b9      	b.n	800a60a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f000 80ab 	beq.w	800a60e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800a4b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f000 80a6 	beq.w	800a60e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	e853 3f00 	ldrex	r3, [r3]
 800a4ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4e4:	647b      	str	r3, [r7, #68]	; 0x44
 800a4e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4ec:	e841 2300 	strex	r3, r2, [r1]
 800a4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1e4      	bne.n	800a4c2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3308      	adds	r3, #8
 800a4fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	e853 3f00 	ldrex	r3, [r3]
 800a506:	623b      	str	r3, [r7, #32]
   return(result);
 800a508:	6a3b      	ldr	r3, [r7, #32]
 800a50a:	f023 0301 	bic.w	r3, r3, #1
 800a50e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3308      	adds	r3, #8
 800a518:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a51c:	633a      	str	r2, [r7, #48]	; 0x30
 800a51e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a520:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a524:	e841 2300 	strex	r3, r2, [r1]
 800a528:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d1e3      	bne.n	800a4f8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2220      	movs	r2, #32
 800a534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	e853 3f00 	ldrex	r3, [r3]
 800a550:	60fb      	str	r3, [r7, #12]
   return(result);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f023 0310 	bic.w	r3, r3, #16
 800a558:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	461a      	mov	r2, r3
 800a562:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a566:	61fb      	str	r3, [r7, #28]
 800a568:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56a:	69b9      	ldr	r1, [r7, #24]
 800a56c:	69fa      	ldr	r2, [r7, #28]
 800a56e:	e841 2300 	strex	r3, r2, [r1]
 800a572:	617b      	str	r3, [r7, #20]
   return(result);
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1e4      	bne.n	800a544 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2202      	movs	r2, #2
 800a57e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a584:	4619      	mov	r1, r3
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f866 	bl	800a658 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a58c:	e03f      	b.n	800a60e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00e      	beq.n	800a5b8 <HAL_UART_IRQHandler+0x5a8>
 800a59a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a59e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d008      	beq.n	800a5b8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a5ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 ff2b 	bl	800b40c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5b6:	e02d      	b.n	800a614 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a5b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00e      	beq.n	800a5e2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a5c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d008      	beq.n	800a5e2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d01c      	beq.n	800a612 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	4798      	blx	r3
    }
    return;
 800a5e0:	e017      	b.n	800a612 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a5e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d012      	beq.n	800a614 <HAL_UART_IRQHandler+0x604>
 800a5ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00c      	beq.n	800a614 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 fedc 	bl	800b3b8 <UART_EndTransmit_IT>
    return;
 800a600:	e008      	b.n	800a614 <HAL_UART_IRQHandler+0x604>
      return;
 800a602:	bf00      	nop
 800a604:	e006      	b.n	800a614 <HAL_UART_IRQHandler+0x604>
    return;
 800a606:	bf00      	nop
 800a608:	e004      	b.n	800a614 <HAL_UART_IRQHandler+0x604>
      return;
 800a60a:	bf00      	nop
 800a60c:	e002      	b.n	800a614 <HAL_UART_IRQHandler+0x604>
      return;
 800a60e:	bf00      	nop
 800a610:	e000      	b.n	800a614 <HAL_UART_IRQHandler+0x604>
    return;
 800a612:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a614:	37e8      	adds	r7, #232	; 0xe8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop

0800a61c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a674:	b08a      	sub	sp, #40	; 0x28
 800a676:	af00      	add	r7, sp, #0
 800a678:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	689a      	ldr	r2, [r3, #8]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	431a      	orrs	r2, r3
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	431a      	orrs	r2, r3
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	69db      	ldr	r3, [r3, #28]
 800a694:	4313      	orrs	r3, r2
 800a696:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	4ba4      	ldr	r3, [pc, #656]	; (800a930 <UART_SetConfig+0x2c0>)
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	6812      	ldr	r2, [r2, #0]
 800a6a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6a8:	430b      	orrs	r3, r1
 800a6aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	68da      	ldr	r2, [r3, #12]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a99      	ldr	r2, [pc, #612]	; (800a934 <UART_SetConfig+0x2c4>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d004      	beq.n	800a6dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6a1b      	ldr	r3, [r3, #32]
 800a6d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ec:	430a      	orrs	r2, r1
 800a6ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a90      	ldr	r2, [pc, #576]	; (800a938 <UART_SetConfig+0x2c8>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d126      	bne.n	800a748 <UART_SetConfig+0xd8>
 800a6fa:	4b90      	ldr	r3, [pc, #576]	; (800a93c <UART_SetConfig+0x2cc>)
 800a6fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a700:	f003 0303 	and.w	r3, r3, #3
 800a704:	2b03      	cmp	r3, #3
 800a706:	d81b      	bhi.n	800a740 <UART_SetConfig+0xd0>
 800a708:	a201      	add	r2, pc, #4	; (adr r2, 800a710 <UART_SetConfig+0xa0>)
 800a70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70e:	bf00      	nop
 800a710:	0800a721 	.word	0x0800a721
 800a714:	0800a731 	.word	0x0800a731
 800a718:	0800a729 	.word	0x0800a729
 800a71c:	0800a739 	.word	0x0800a739
 800a720:	2301      	movs	r3, #1
 800a722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a726:	e116      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a728:	2302      	movs	r3, #2
 800a72a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a72e:	e112      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a730:	2304      	movs	r3, #4
 800a732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a736:	e10e      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a738:	2308      	movs	r3, #8
 800a73a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a73e:	e10a      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a740:	2310      	movs	r3, #16
 800a742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a746:	e106      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a7c      	ldr	r2, [pc, #496]	; (800a940 <UART_SetConfig+0x2d0>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d138      	bne.n	800a7c4 <UART_SetConfig+0x154>
 800a752:	4b7a      	ldr	r3, [pc, #488]	; (800a93c <UART_SetConfig+0x2cc>)
 800a754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a758:	f003 030c 	and.w	r3, r3, #12
 800a75c:	2b0c      	cmp	r3, #12
 800a75e:	d82d      	bhi.n	800a7bc <UART_SetConfig+0x14c>
 800a760:	a201      	add	r2, pc, #4	; (adr r2, 800a768 <UART_SetConfig+0xf8>)
 800a762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a766:	bf00      	nop
 800a768:	0800a79d 	.word	0x0800a79d
 800a76c:	0800a7bd 	.word	0x0800a7bd
 800a770:	0800a7bd 	.word	0x0800a7bd
 800a774:	0800a7bd 	.word	0x0800a7bd
 800a778:	0800a7ad 	.word	0x0800a7ad
 800a77c:	0800a7bd 	.word	0x0800a7bd
 800a780:	0800a7bd 	.word	0x0800a7bd
 800a784:	0800a7bd 	.word	0x0800a7bd
 800a788:	0800a7a5 	.word	0x0800a7a5
 800a78c:	0800a7bd 	.word	0x0800a7bd
 800a790:	0800a7bd 	.word	0x0800a7bd
 800a794:	0800a7bd 	.word	0x0800a7bd
 800a798:	0800a7b5 	.word	0x0800a7b5
 800a79c:	2300      	movs	r3, #0
 800a79e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7a2:	e0d8      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a7a4:	2302      	movs	r3, #2
 800a7a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7aa:	e0d4      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a7ac:	2304      	movs	r3, #4
 800a7ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7b2:	e0d0      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a7b4:	2308      	movs	r3, #8
 800a7b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7ba:	e0cc      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a7bc:	2310      	movs	r3, #16
 800a7be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7c2:	e0c8      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a5e      	ldr	r2, [pc, #376]	; (800a944 <UART_SetConfig+0x2d4>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d125      	bne.n	800a81a <UART_SetConfig+0x1aa>
 800a7ce:	4b5b      	ldr	r3, [pc, #364]	; (800a93c <UART_SetConfig+0x2cc>)
 800a7d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a7d8:	2b30      	cmp	r3, #48	; 0x30
 800a7da:	d016      	beq.n	800a80a <UART_SetConfig+0x19a>
 800a7dc:	2b30      	cmp	r3, #48	; 0x30
 800a7de:	d818      	bhi.n	800a812 <UART_SetConfig+0x1a2>
 800a7e0:	2b20      	cmp	r3, #32
 800a7e2:	d00a      	beq.n	800a7fa <UART_SetConfig+0x18a>
 800a7e4:	2b20      	cmp	r3, #32
 800a7e6:	d814      	bhi.n	800a812 <UART_SetConfig+0x1a2>
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d002      	beq.n	800a7f2 <UART_SetConfig+0x182>
 800a7ec:	2b10      	cmp	r3, #16
 800a7ee:	d008      	beq.n	800a802 <UART_SetConfig+0x192>
 800a7f0:	e00f      	b.n	800a812 <UART_SetConfig+0x1a2>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7f8:	e0ad      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a800:	e0a9      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a802:	2304      	movs	r3, #4
 800a804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a808:	e0a5      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a80a:	2308      	movs	r3, #8
 800a80c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a810:	e0a1      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a812:	2310      	movs	r3, #16
 800a814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a818:	e09d      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a4a      	ldr	r2, [pc, #296]	; (800a948 <UART_SetConfig+0x2d8>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d125      	bne.n	800a870 <UART_SetConfig+0x200>
 800a824:	4b45      	ldr	r3, [pc, #276]	; (800a93c <UART_SetConfig+0x2cc>)
 800a826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a82a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a82e:	2bc0      	cmp	r3, #192	; 0xc0
 800a830:	d016      	beq.n	800a860 <UART_SetConfig+0x1f0>
 800a832:	2bc0      	cmp	r3, #192	; 0xc0
 800a834:	d818      	bhi.n	800a868 <UART_SetConfig+0x1f8>
 800a836:	2b80      	cmp	r3, #128	; 0x80
 800a838:	d00a      	beq.n	800a850 <UART_SetConfig+0x1e0>
 800a83a:	2b80      	cmp	r3, #128	; 0x80
 800a83c:	d814      	bhi.n	800a868 <UART_SetConfig+0x1f8>
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d002      	beq.n	800a848 <UART_SetConfig+0x1d8>
 800a842:	2b40      	cmp	r3, #64	; 0x40
 800a844:	d008      	beq.n	800a858 <UART_SetConfig+0x1e8>
 800a846:	e00f      	b.n	800a868 <UART_SetConfig+0x1f8>
 800a848:	2300      	movs	r3, #0
 800a84a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a84e:	e082      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a850:	2302      	movs	r3, #2
 800a852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a856:	e07e      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a858:	2304      	movs	r3, #4
 800a85a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a85e:	e07a      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a860:	2308      	movs	r3, #8
 800a862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a866:	e076      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a868:	2310      	movs	r3, #16
 800a86a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a86e:	e072      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a35      	ldr	r2, [pc, #212]	; (800a94c <UART_SetConfig+0x2dc>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d12a      	bne.n	800a8d0 <UART_SetConfig+0x260>
 800a87a:	4b30      	ldr	r3, [pc, #192]	; (800a93c <UART_SetConfig+0x2cc>)
 800a87c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a884:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a888:	d01a      	beq.n	800a8c0 <UART_SetConfig+0x250>
 800a88a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a88e:	d81b      	bhi.n	800a8c8 <UART_SetConfig+0x258>
 800a890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a894:	d00c      	beq.n	800a8b0 <UART_SetConfig+0x240>
 800a896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a89a:	d815      	bhi.n	800a8c8 <UART_SetConfig+0x258>
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d003      	beq.n	800a8a8 <UART_SetConfig+0x238>
 800a8a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8a4:	d008      	beq.n	800a8b8 <UART_SetConfig+0x248>
 800a8a6:	e00f      	b.n	800a8c8 <UART_SetConfig+0x258>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8ae:	e052      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8b6:	e04e      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a8b8:	2304      	movs	r3, #4
 800a8ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8be:	e04a      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a8c0:	2308      	movs	r3, #8
 800a8c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8c6:	e046      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a8c8:	2310      	movs	r3, #16
 800a8ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8ce:	e042      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a17      	ldr	r2, [pc, #92]	; (800a934 <UART_SetConfig+0x2c4>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d13a      	bne.n	800a950 <UART_SetConfig+0x2e0>
 800a8da:	4b18      	ldr	r3, [pc, #96]	; (800a93c <UART_SetConfig+0x2cc>)
 800a8dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a8e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a8e8:	d01a      	beq.n	800a920 <UART_SetConfig+0x2b0>
 800a8ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a8ee:	d81b      	bhi.n	800a928 <UART_SetConfig+0x2b8>
 800a8f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8f4:	d00c      	beq.n	800a910 <UART_SetConfig+0x2a0>
 800a8f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8fa:	d815      	bhi.n	800a928 <UART_SetConfig+0x2b8>
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d003      	beq.n	800a908 <UART_SetConfig+0x298>
 800a900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a904:	d008      	beq.n	800a918 <UART_SetConfig+0x2a8>
 800a906:	e00f      	b.n	800a928 <UART_SetConfig+0x2b8>
 800a908:	2300      	movs	r3, #0
 800a90a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a90e:	e022      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a910:	2302      	movs	r3, #2
 800a912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a916:	e01e      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a918:	2304      	movs	r3, #4
 800a91a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a91e:	e01a      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a920:	2308      	movs	r3, #8
 800a922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a926:	e016      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a928:	2310      	movs	r3, #16
 800a92a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a92e:	e012      	b.n	800a956 <UART_SetConfig+0x2e6>
 800a930:	efff69f3 	.word	0xefff69f3
 800a934:	40008000 	.word	0x40008000
 800a938:	40013800 	.word	0x40013800
 800a93c:	40021000 	.word	0x40021000
 800a940:	40004400 	.word	0x40004400
 800a944:	40004800 	.word	0x40004800
 800a948:	40004c00 	.word	0x40004c00
 800a94c:	40005000 	.word	0x40005000
 800a950:	2310      	movs	r3, #16
 800a952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a9f      	ldr	r2, [pc, #636]	; (800abd8 <UART_SetConfig+0x568>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d17a      	bne.n	800aa56 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a960:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a964:	2b08      	cmp	r3, #8
 800a966:	d824      	bhi.n	800a9b2 <UART_SetConfig+0x342>
 800a968:	a201      	add	r2, pc, #4	; (adr r2, 800a970 <UART_SetConfig+0x300>)
 800a96a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96e:	bf00      	nop
 800a970:	0800a995 	.word	0x0800a995
 800a974:	0800a9b3 	.word	0x0800a9b3
 800a978:	0800a99d 	.word	0x0800a99d
 800a97c:	0800a9b3 	.word	0x0800a9b3
 800a980:	0800a9a3 	.word	0x0800a9a3
 800a984:	0800a9b3 	.word	0x0800a9b3
 800a988:	0800a9b3 	.word	0x0800a9b3
 800a98c:	0800a9b3 	.word	0x0800a9b3
 800a990:	0800a9ab 	.word	0x0800a9ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a994:	f7fd fa84 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 800a998:	61f8      	str	r0, [r7, #28]
        break;
 800a99a:	e010      	b.n	800a9be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a99c:	4b8f      	ldr	r3, [pc, #572]	; (800abdc <UART_SetConfig+0x56c>)
 800a99e:	61fb      	str	r3, [r7, #28]
        break;
 800a9a0:	e00d      	b.n	800a9be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9a2:	f7fd f9e5 	bl	8007d70 <HAL_RCC_GetSysClockFreq>
 800a9a6:	61f8      	str	r0, [r7, #28]
        break;
 800a9a8:	e009      	b.n	800a9be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9ae:	61fb      	str	r3, [r7, #28]
        break;
 800a9b0:	e005      	b.n	800a9be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a9bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 80fb 	beq.w	800abbc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	685a      	ldr	r2, [r3, #4]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	005b      	lsls	r3, r3, #1
 800a9ce:	4413      	add	r3, r2
 800a9d0:	69fa      	ldr	r2, [r7, #28]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d305      	bcc.n	800a9e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a9dc:	69fa      	ldr	r2, [r7, #28]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d903      	bls.n	800a9ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a9e8:	e0e8      	b.n	800abbc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	461c      	mov	r4, r3
 800a9f0:	4615      	mov	r5, r2
 800a9f2:	f04f 0200 	mov.w	r2, #0
 800a9f6:	f04f 0300 	mov.w	r3, #0
 800a9fa:	022b      	lsls	r3, r5, #8
 800a9fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800aa00:	0222      	lsls	r2, r4, #8
 800aa02:	68f9      	ldr	r1, [r7, #12]
 800aa04:	6849      	ldr	r1, [r1, #4]
 800aa06:	0849      	lsrs	r1, r1, #1
 800aa08:	2000      	movs	r0, #0
 800aa0a:	4688      	mov	r8, r1
 800aa0c:	4681      	mov	r9, r0
 800aa0e:	eb12 0a08 	adds.w	sl, r2, r8
 800aa12:	eb43 0b09 	adc.w	fp, r3, r9
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	603b      	str	r3, [r7, #0]
 800aa1e:	607a      	str	r2, [r7, #4]
 800aa20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa24:	4650      	mov	r0, sl
 800aa26:	4659      	mov	r1, fp
 800aa28:	f7f6 f92e 	bl	8000c88 <__aeabi_uldivmod>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	460b      	mov	r3, r1
 800aa30:	4613      	mov	r3, r2
 800aa32:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa3a:	d308      	bcc.n	800aa4e <UART_SetConfig+0x3de>
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa42:	d204      	bcs.n	800aa4e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	69ba      	ldr	r2, [r7, #24]
 800aa4a:	60da      	str	r2, [r3, #12]
 800aa4c:	e0b6      	b.n	800abbc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800aa54:	e0b2      	b.n	800abbc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	69db      	ldr	r3, [r3, #28]
 800aa5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa5e:	d15e      	bne.n	800ab1e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800aa60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa64:	2b08      	cmp	r3, #8
 800aa66:	d828      	bhi.n	800aaba <UART_SetConfig+0x44a>
 800aa68:	a201      	add	r2, pc, #4	; (adr r2, 800aa70 <UART_SetConfig+0x400>)
 800aa6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6e:	bf00      	nop
 800aa70:	0800aa95 	.word	0x0800aa95
 800aa74:	0800aa9d 	.word	0x0800aa9d
 800aa78:	0800aaa5 	.word	0x0800aaa5
 800aa7c:	0800aabb 	.word	0x0800aabb
 800aa80:	0800aaab 	.word	0x0800aaab
 800aa84:	0800aabb 	.word	0x0800aabb
 800aa88:	0800aabb 	.word	0x0800aabb
 800aa8c:	0800aabb 	.word	0x0800aabb
 800aa90:	0800aab3 	.word	0x0800aab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa94:	f7fd fa04 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 800aa98:	61f8      	str	r0, [r7, #28]
        break;
 800aa9a:	e014      	b.n	800aac6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa9c:	f7fd fa16 	bl	8007ecc <HAL_RCC_GetPCLK2Freq>
 800aaa0:	61f8      	str	r0, [r7, #28]
        break;
 800aaa2:	e010      	b.n	800aac6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aaa4:	4b4d      	ldr	r3, [pc, #308]	; (800abdc <UART_SetConfig+0x56c>)
 800aaa6:	61fb      	str	r3, [r7, #28]
        break;
 800aaa8:	e00d      	b.n	800aac6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aaaa:	f7fd f961 	bl	8007d70 <HAL_RCC_GetSysClockFreq>
 800aaae:	61f8      	str	r0, [r7, #28]
        break;
 800aab0:	e009      	b.n	800aac6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aab6:	61fb      	str	r3, [r7, #28]
        break;
 800aab8:	e005      	b.n	800aac6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800aaba:	2300      	movs	r3, #0
 800aabc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800aac4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d077      	beq.n	800abbc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	005a      	lsls	r2, r3, #1
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	085b      	lsrs	r3, r3, #1
 800aad6:	441a      	add	r2, r3
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aae0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	2b0f      	cmp	r3, #15
 800aae6:	d916      	bls.n	800ab16 <UART_SetConfig+0x4a6>
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaee:	d212      	bcs.n	800ab16 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	f023 030f 	bic.w	r3, r3, #15
 800aaf8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	085b      	lsrs	r3, r3, #1
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	f003 0307 	and.w	r3, r3, #7
 800ab04:	b29a      	uxth	r2, r3
 800ab06:	8afb      	ldrh	r3, [r7, #22]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	8afa      	ldrh	r2, [r7, #22]
 800ab12:	60da      	str	r2, [r3, #12]
 800ab14:	e052      	b.n	800abbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ab1c:	e04e      	b.n	800abbc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab22:	2b08      	cmp	r3, #8
 800ab24:	d827      	bhi.n	800ab76 <UART_SetConfig+0x506>
 800ab26:	a201      	add	r2, pc, #4	; (adr r2, 800ab2c <UART_SetConfig+0x4bc>)
 800ab28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2c:	0800ab51 	.word	0x0800ab51
 800ab30:	0800ab59 	.word	0x0800ab59
 800ab34:	0800ab61 	.word	0x0800ab61
 800ab38:	0800ab77 	.word	0x0800ab77
 800ab3c:	0800ab67 	.word	0x0800ab67
 800ab40:	0800ab77 	.word	0x0800ab77
 800ab44:	0800ab77 	.word	0x0800ab77
 800ab48:	0800ab77 	.word	0x0800ab77
 800ab4c:	0800ab6f 	.word	0x0800ab6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab50:	f7fd f9a6 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 800ab54:	61f8      	str	r0, [r7, #28]
        break;
 800ab56:	e014      	b.n	800ab82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab58:	f7fd f9b8 	bl	8007ecc <HAL_RCC_GetPCLK2Freq>
 800ab5c:	61f8      	str	r0, [r7, #28]
        break;
 800ab5e:	e010      	b.n	800ab82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab60:	4b1e      	ldr	r3, [pc, #120]	; (800abdc <UART_SetConfig+0x56c>)
 800ab62:	61fb      	str	r3, [r7, #28]
        break;
 800ab64:	e00d      	b.n	800ab82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab66:	f7fd f903 	bl	8007d70 <HAL_RCC_GetSysClockFreq>
 800ab6a:	61f8      	str	r0, [r7, #28]
        break;
 800ab6c:	e009      	b.n	800ab82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab72:	61fb      	str	r3, [r7, #28]
        break;
 800ab74:	e005      	b.n	800ab82 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800ab76:	2300      	movs	r3, #0
 800ab78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ab80:	bf00      	nop
    }

    if (pclk != 0U)
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d019      	beq.n	800abbc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	085a      	lsrs	r2, r3, #1
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	441a      	add	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	2b0f      	cmp	r3, #15
 800aba0:	d909      	bls.n	800abb6 <UART_SetConfig+0x546>
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aba8:	d205      	bcs.n	800abb6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	b29a      	uxth	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	60da      	str	r2, [r3, #12]
 800abb4:	e002      	b.n	800abbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2200      	movs	r2, #0
 800abc6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800abc8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3728      	adds	r7, #40	; 0x28
 800abd0:	46bd      	mov	sp, r7
 800abd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abd6:	bf00      	nop
 800abd8:	40008000 	.word	0x40008000
 800abdc:	00f42400 	.word	0x00f42400

0800abe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abec:	f003 0308 	and.w	r3, r3, #8
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00a      	beq.n	800ac0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	430a      	orrs	r2, r1
 800ac08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0e:	f003 0301 	and.w	r3, r3, #1
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00a      	beq.n	800ac2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	430a      	orrs	r2, r1
 800ac2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac30:	f003 0302 	and.w	r3, r3, #2
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00a      	beq.n	800ac4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	430a      	orrs	r2, r1
 800ac4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac52:	f003 0304 	and.w	r3, r3, #4
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00a      	beq.n	800ac70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	430a      	orrs	r2, r1
 800ac6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac74:	f003 0310 	and.w	r3, r3, #16
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d00a      	beq.n	800ac92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac96:	f003 0320 	and.w	r3, r3, #32
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00a      	beq.n	800acb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	430a      	orrs	r2, r1
 800acb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d01a      	beq.n	800acf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	430a      	orrs	r2, r1
 800acd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acde:	d10a      	bne.n	800acf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	430a      	orrs	r2, r1
 800acf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00a      	beq.n	800ad18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	430a      	orrs	r2, r1
 800ad16:	605a      	str	r2, [r3, #4]
  }
}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b098      	sub	sp, #96	; 0x60
 800ad28:	af02      	add	r7, sp, #8
 800ad2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad34:	f7f9 f8fc 	bl	8003f30 <HAL_GetTick>
 800ad38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f003 0308 	and.w	r3, r3, #8
 800ad44:	2b08      	cmp	r3, #8
 800ad46:	d12e      	bne.n	800ada6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad50:	2200      	movs	r2, #0
 800ad52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f88c 	bl	800ae74 <UART_WaitOnFlagUntilTimeout>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d021      	beq.n	800ada6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6a:	e853 3f00 	ldrex	r3, [r3]
 800ad6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad76:	653b      	str	r3, [r7, #80]	; 0x50
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad80:	647b      	str	r3, [r7, #68]	; 0x44
 800ad82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad88:	e841 2300 	strex	r3, r2, [r1]
 800ad8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1e6      	bne.n	800ad62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2220      	movs	r2, #32
 800ad98:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ada2:	2303      	movs	r3, #3
 800ada4:	e062      	b.n	800ae6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 0304 	and.w	r3, r3, #4
 800adb0:	2b04      	cmp	r3, #4
 800adb2:	d149      	bne.n	800ae48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adbc:	2200      	movs	r2, #0
 800adbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f856 	bl	800ae74 <UART_WaitOnFlagUntilTimeout>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d03c      	beq.n	800ae48 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add6:	e853 3f00 	ldrex	r3, [r3]
 800adda:	623b      	str	r3, [r7, #32]
   return(result);
 800addc:	6a3b      	ldr	r3, [r7, #32]
 800adde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ade2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	461a      	mov	r2, r3
 800adea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adec:	633b      	str	r3, [r7, #48]	; 0x30
 800adee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800adf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adf4:	e841 2300 	strex	r3, r2, [r1]
 800adf8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800adfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1e6      	bne.n	800adce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3308      	adds	r3, #8
 800ae06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	e853 3f00 	ldrex	r3, [r3]
 800ae0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f023 0301 	bic.w	r3, r3, #1
 800ae16:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	3308      	adds	r3, #8
 800ae1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae20:	61fa      	str	r2, [r7, #28]
 800ae22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae24:	69b9      	ldr	r1, [r7, #24]
 800ae26:	69fa      	ldr	r2, [r7, #28]
 800ae28:	e841 2300 	strex	r3, r2, [r1]
 800ae2c:	617b      	str	r3, [r7, #20]
   return(result);
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1e5      	bne.n	800ae00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2220      	movs	r2, #32
 800ae38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e011      	b.n	800ae6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2220      	movs	r2, #32
 800ae4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2220      	movs	r2, #32
 800ae52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3758      	adds	r7, #88	; 0x58
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	603b      	str	r3, [r7, #0]
 800ae80:	4613      	mov	r3, r2
 800ae82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae84:	e04f      	b.n	800af26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8c:	d04b      	beq.n	800af26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae8e:	f7f9 f84f 	bl	8003f30 <HAL_GetTick>
 800ae92:	4602      	mov	r2, r0
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	69ba      	ldr	r2, [r7, #24]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d302      	bcc.n	800aea4 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d101      	bne.n	800aea8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aea4:	2303      	movs	r3, #3
 800aea6:	e04e      	b.n	800af46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 0304 	and.w	r3, r3, #4
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d037      	beq.n	800af26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	2b80      	cmp	r3, #128	; 0x80
 800aeba:	d034      	beq.n	800af26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	2b40      	cmp	r3, #64	; 0x40
 800aec0:	d031      	beq.n	800af26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	69db      	ldr	r3, [r3, #28]
 800aec8:	f003 0308 	and.w	r3, r3, #8
 800aecc:	2b08      	cmp	r3, #8
 800aece:	d110      	bne.n	800aef2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2208      	movs	r2, #8
 800aed6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f000 f8ff 	bl	800b0dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2208      	movs	r2, #8
 800aee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	e029      	b.n	800af46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	69db      	ldr	r3, [r3, #28]
 800aef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aefc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af00:	d111      	bne.n	800af26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f000 f8e5 	bl	800b0dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2220      	movs	r2, #32
 800af16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2200      	movs	r2, #0
 800af1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800af22:	2303      	movs	r3, #3
 800af24:	e00f      	b.n	800af46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	69da      	ldr	r2, [r3, #28]
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	4013      	ands	r3, r2
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	429a      	cmp	r2, r3
 800af34:	bf0c      	ite	eq
 800af36:	2301      	moveq	r3, #1
 800af38:	2300      	movne	r3, #0
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	461a      	mov	r2, r3
 800af3e:	79fb      	ldrb	r3, [r7, #7]
 800af40:	429a      	cmp	r2, r3
 800af42:	d0a0      	beq.n	800ae86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
	...

0800af50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b096      	sub	sp, #88	; 0x58
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	4613      	mov	r3, r2
 800af5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	68ba      	ldr	r2, [r7, #8]
 800af62:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	88fa      	ldrh	r2, [r7, #6]
 800af68:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2200      	movs	r2, #0
 800af70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2222      	movs	r2, #34	; 0x22
 800af78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af80:	2b00      	cmp	r3, #0
 800af82:	d028      	beq.n	800afd6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af88:	4a3e      	ldr	r2, [pc, #248]	; (800b084 <UART_Start_Receive_DMA+0x134>)
 800af8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af90:	4a3d      	ldr	r2, [pc, #244]	; (800b088 <UART_Start_Receive_DMA+0x138>)
 800af92:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af98:	4a3c      	ldr	r2, [pc, #240]	; (800b08c <UART_Start_Receive_DMA+0x13c>)
 800af9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afa0:	2200      	movs	r2, #0
 800afa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	3324      	adds	r3, #36	; 0x24
 800afae:	4619      	mov	r1, r3
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afb4:	461a      	mov	r2, r3
 800afb6:	88fb      	ldrh	r3, [r7, #6]
 800afb8:	f7fa fd44 	bl	8005a44 <HAL_DMA_Start_IT>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d009      	beq.n	800afd6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2210      	movs	r2, #16
 800afc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2220      	movs	r2, #32
 800afce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	e051      	b.n	800b07a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d018      	beq.n	800b010 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe6:	e853 3f00 	ldrex	r3, [r3]
 800afea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800afec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aff2:	657b      	str	r3, [r7, #84]	; 0x54
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	461a      	mov	r2, r3
 800affa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800affc:	64bb      	str	r3, [r7, #72]	; 0x48
 800affe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b000:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b004:	e841 2300 	strex	r3, r2, [r1]
 800b008:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b00a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1e6      	bne.n	800afde <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	3308      	adds	r3, #8
 800b016:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01a:	e853 3f00 	ldrex	r3, [r3]
 800b01e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b022:	f043 0301 	orr.w	r3, r3, #1
 800b026:	653b      	str	r3, [r7, #80]	; 0x50
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	3308      	adds	r3, #8
 800b02e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b030:	637a      	str	r2, [r7, #52]	; 0x34
 800b032:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b034:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b038:	e841 2300 	strex	r3, r2, [r1]
 800b03c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1e5      	bne.n	800b010 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	3308      	adds	r3, #8
 800b04a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	e853 3f00 	ldrex	r3, [r3]
 800b052:	613b      	str	r3, [r7, #16]
   return(result);
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b05a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	3308      	adds	r3, #8
 800b062:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b064:	623a      	str	r2, [r7, #32]
 800b066:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b068:	69f9      	ldr	r1, [r7, #28]
 800b06a:	6a3a      	ldr	r2, [r7, #32]
 800b06c:	e841 2300 	strex	r3, r2, [r1]
 800b070:	61bb      	str	r3, [r7, #24]
   return(result);
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1e5      	bne.n	800b044 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3758      	adds	r7, #88	; 0x58
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	0800b1a5 	.word	0x0800b1a5
 800b088:	0800b2d1 	.word	0x0800b2d1
 800b08c:	0800b30f 	.word	0x0800b30f

0800b090 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b090:	b480      	push	{r7}
 800b092:	b089      	sub	sp, #36	; 0x24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	e853 3f00 	ldrex	r3, [r3]
 800b0a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b0ac:	61fb      	str	r3, [r7, #28]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	61bb      	str	r3, [r7, #24]
 800b0b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ba:	6979      	ldr	r1, [r7, #20]
 800b0bc:	69ba      	ldr	r2, [r7, #24]
 800b0be:	e841 2300 	strex	r3, r2, [r1]
 800b0c2:	613b      	str	r3, [r7, #16]
   return(result);
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1e6      	bne.n	800b098 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2220      	movs	r2, #32
 800b0ce:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800b0d0:	bf00      	nop
 800b0d2:	3724      	adds	r7, #36	; 0x24
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b095      	sub	sp, #84	; 0x54
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ec:	e853 3f00 	ldrex	r3, [r3]
 800b0f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	461a      	mov	r2, r3
 800b100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b102:	643b      	str	r3, [r7, #64]	; 0x40
 800b104:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b106:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b108:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b10a:	e841 2300 	strex	r3, r2, [r1]
 800b10e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1e6      	bne.n	800b0e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	3308      	adds	r3, #8
 800b11c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11e:	6a3b      	ldr	r3, [r7, #32]
 800b120:	e853 3f00 	ldrex	r3, [r3]
 800b124:	61fb      	str	r3, [r7, #28]
   return(result);
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	f023 0301 	bic.w	r3, r3, #1
 800b12c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	3308      	adds	r3, #8
 800b134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b136:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b138:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b13c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b13e:	e841 2300 	strex	r3, r2, [r1]
 800b142:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1e5      	bne.n	800b116 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d118      	bne.n	800b184 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	e853 3f00 	ldrex	r3, [r3]
 800b15e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	f023 0310 	bic.w	r3, r3, #16
 800b166:	647b      	str	r3, [r7, #68]	; 0x44
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	461a      	mov	r2, r3
 800b16e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b170:	61bb      	str	r3, [r7, #24]
 800b172:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b174:	6979      	ldr	r1, [r7, #20]
 800b176:	69ba      	ldr	r2, [r7, #24]
 800b178:	e841 2300 	strex	r3, r2, [r1]
 800b17c:	613b      	str	r3, [r7, #16]
   return(result);
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d1e6      	bne.n	800b152 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2220      	movs	r2, #32
 800b188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b198:	bf00      	nop
 800b19a:	3754      	adds	r7, #84	; 0x54
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b09c      	sub	sp, #112	; 0x70
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 0320 	and.w	r3, r3, #32
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d171      	bne.n	800b2a4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b1c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1d0:	e853 3f00 	ldrex	r3, [r3]
 800b1d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b1d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b1e6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b1e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1ee:	e841 2300 	strex	r3, r2, [r1]
 800b1f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b1f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1e6      	bne.n	800b1c8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	3308      	adds	r3, #8
 800b200:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b204:	e853 3f00 	ldrex	r3, [r3]
 800b208:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b20c:	f023 0301 	bic.w	r3, r3, #1
 800b210:	667b      	str	r3, [r7, #100]	; 0x64
 800b212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	3308      	adds	r3, #8
 800b218:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b21a:	647a      	str	r2, [r7, #68]	; 0x44
 800b21c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b220:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b222:	e841 2300 	strex	r3, r2, [r1]
 800b226:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1e5      	bne.n	800b1fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b22e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	3308      	adds	r3, #8
 800b234:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	e853 3f00 	ldrex	r3, [r3]
 800b23c:	623b      	str	r3, [r7, #32]
   return(result);
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b244:	663b      	str	r3, [r7, #96]	; 0x60
 800b246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	3308      	adds	r3, #8
 800b24c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b24e:	633a      	str	r2, [r7, #48]	; 0x30
 800b250:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b252:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b256:	e841 2300 	strex	r3, r2, [r1]
 800b25a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1e5      	bne.n	800b22e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b264:	2220      	movs	r2, #32
 800b266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b26a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b26c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d118      	bne.n	800b2a4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	e853 3f00 	ldrex	r3, [r3]
 800b27e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f023 0310 	bic.w	r3, r3, #16
 800b286:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	461a      	mov	r2, r3
 800b28e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b290:	61fb      	str	r3, [r7, #28]
 800b292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b294:	69b9      	ldr	r1, [r7, #24]
 800b296:	69fa      	ldr	r2, [r7, #28]
 800b298:	e841 2300 	strex	r3, r2, [r1]
 800b29c:	617b      	str	r3, [r7, #20]
   return(result);
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d1e6      	bne.n	800b272 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d107      	bne.n	800b2c2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b2bc:	f7ff f9cc 	bl	800a658 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2c0:	e002      	b.n	800b2c8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b2c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b2c4:	f7f6 f880 	bl	80013c8 <HAL_UART_RxCpltCallback>
}
 800b2c8:	bf00      	nop
 800b2ca:	3770      	adds	r7, #112	; 0x70
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d109      	bne.n	800b300 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b2f2:	085b      	lsrs	r3, r3, #1
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f7ff f9ad 	bl	800a658 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2fe:	e002      	b.n	800b306 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f7ff f995 	bl	800a630 <HAL_UART_RxHalfCpltCallback>
}
 800b306:	bf00      	nop
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b086      	sub	sp, #24
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b31a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b320:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b328:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b334:	2b80      	cmp	r3, #128	; 0x80
 800b336:	d109      	bne.n	800b34c <UART_DMAError+0x3e>
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	2b21      	cmp	r3, #33	; 0x21
 800b33c:	d106      	bne.n	800b34c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	2200      	movs	r2, #0
 800b342:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b346:	6978      	ldr	r0, [r7, #20]
 800b348:	f7ff fea2 	bl	800b090 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b356:	2b40      	cmp	r3, #64	; 0x40
 800b358:	d109      	bne.n	800b36e <UART_DMAError+0x60>
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2b22      	cmp	r3, #34	; 0x22
 800b35e:	d106      	bne.n	800b36e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	2200      	movs	r2, #0
 800b364:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b368:	6978      	ldr	r0, [r7, #20]
 800b36a:	f7ff feb7 	bl	800b0dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b374:	f043 0210 	orr.w	r2, r3, #16
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b37e:	6978      	ldr	r0, [r7, #20]
 800b380:	f7ff f960 	bl	800a644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b384:	bf00      	nop
 800b386:	3718      	adds	r7, #24
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b398:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f7ff f94a 	bl	800a644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3b0:	bf00      	nop
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b088      	sub	sp, #32
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	e853 3f00 	ldrex	r3, [r3]
 800b3cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3d4:	61fb      	str	r3, [r7, #28]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	61bb      	str	r3, [r7, #24]
 800b3e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e2:	6979      	ldr	r1, [r7, #20]
 800b3e4:	69ba      	ldr	r2, [r7, #24]
 800b3e6:	e841 2300 	strex	r3, r2, [r1]
 800b3ea:	613b      	str	r3, [r7, #16]
   return(result);
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1e6      	bne.n	800b3c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2220      	movs	r2, #32
 800b3f6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f7ff f90c 	bl	800a61c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b404:	bf00      	nop
 800b406:	3720      	adds	r7, #32
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f103 0208 	add.w	r2, r3, #8
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f04f 32ff 	mov.w	r2, #4294967295
 800b438:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f103 0208 	add.w	r2, r3, #8
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f103 0208 	add.w	r2, r3, #8
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b454:	bf00      	nop
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b46e:	bf00      	nop
 800b470:	370c      	adds	r7, #12
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr

0800b47a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b47a:	b480      	push	{r7}
 800b47c:	b085      	sub	sp, #20
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	689a      	ldr	r2, [r3, #8]
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	683a      	ldr	r2, [r7, #0]
 800b49e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	1c5a      	adds	r2, r3, #1
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	601a      	str	r2, [r3, #0]
}
 800b4b6:	bf00      	nop
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr

0800b4c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4c2:	b480      	push	{r7}
 800b4c4:	b085      	sub	sp, #20
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
 800b4ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d8:	d103      	bne.n	800b4e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	60fb      	str	r3, [r7, #12]
 800b4e0:	e00c      	b.n	800b4fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	3308      	adds	r3, #8
 800b4e6:	60fb      	str	r3, [r7, #12]
 800b4e8:	e002      	b.n	800b4f0 <vListInsert+0x2e>
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	60fb      	str	r3, [r7, #12]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d2f6      	bcs.n	800b4ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	685a      	ldr	r2, [r3, #4]
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	683a      	ldr	r2, [r7, #0]
 800b50a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	601a      	str	r2, [r3, #0]
}
 800b528:	bf00      	nop
 800b52a:	3714      	adds	r7, #20
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	691b      	ldr	r3, [r3, #16]
 800b540:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	6892      	ldr	r2, [r2, #8]
 800b54a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	6852      	ldr	r2, [r2, #4]
 800b554:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d103      	bne.n	800b568 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	689a      	ldr	r2, [r3, #8]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	1e5a      	subs	r2, r3, #1
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3714      	adds	r7, #20
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d10a      	bne.n	800b5b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a0:	f383 8811 	msr	BASEPRI, r3
 800b5a4:	f3bf 8f6f 	isb	sy
 800b5a8:	f3bf 8f4f 	dsb	sy
 800b5ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b5ae:	bf00      	nop
 800b5b0:	e7fe      	b.n	800b5b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b5b2:	f001 fed7 	bl	800d364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5be:	68f9      	ldr	r1, [r7, #12]
 800b5c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b5c2:	fb01 f303 	mul.w	r3, r1, r3
 800b5c6:	441a      	add	r2, r3
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5e2:	3b01      	subs	r3, #1
 800b5e4:	68f9      	ldr	r1, [r7, #12]
 800b5e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b5e8:	fb01 f303 	mul.w	r3, r1, r3
 800b5ec:	441a      	add	r2, r3
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	22ff      	movs	r2, #255	; 0xff
 800b5f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	22ff      	movs	r2, #255	; 0xff
 800b5fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d114      	bne.n	800b632 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d01a      	beq.n	800b646 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	3310      	adds	r3, #16
 800b614:	4618      	mov	r0, r3
 800b616:	f001 f961 	bl	800c8dc <xTaskRemoveFromEventList>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d012      	beq.n	800b646 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b620:	4b0c      	ldr	r3, [pc, #48]	; (800b654 <xQueueGenericReset+0xcc>)
 800b622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b626:	601a      	str	r2, [r3, #0]
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	f3bf 8f6f 	isb	sy
 800b630:	e009      	b.n	800b646 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	3310      	adds	r3, #16
 800b636:	4618      	mov	r0, r3
 800b638:	f7ff fef2 	bl	800b420 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	3324      	adds	r3, #36	; 0x24
 800b640:	4618      	mov	r0, r3
 800b642:	f7ff feed 	bl	800b420 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b646:	f001 febd 	bl	800d3c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b64a:	2301      	movs	r3, #1
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	e000ed04 	.word	0xe000ed04

0800b658 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b08a      	sub	sp, #40	; 0x28
 800b65c:	af02      	add	r7, sp, #8
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	4613      	mov	r3, r2
 800b664:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10a      	bne.n	800b682 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	613b      	str	r3, [r7, #16]
}
 800b67e:	bf00      	nop
 800b680:	e7fe      	b.n	800b680 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	fb02 f303 	mul.w	r3, r2, r3
 800b68a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	3348      	adds	r3, #72	; 0x48
 800b690:	4618      	mov	r0, r3
 800b692:	f001 ff89 	bl	800d5a8 <pvPortMalloc>
 800b696:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d011      	beq.n	800b6c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	3348      	adds	r3, #72	; 0x48
 800b6a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b6b0:	79fa      	ldrb	r2, [r7, #7]
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	697a      	ldr	r2, [r7, #20]
 800b6ba:	68b9      	ldr	r1, [r7, #8]
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f000 f805 	bl	800b6cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b6c2:	69bb      	ldr	r3, [r7, #24]
	}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3720      	adds	r7, #32
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
 800b6d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d103      	bne.n	800b6e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	69ba      	ldr	r2, [r7, #24]
 800b6e4:	601a      	str	r2, [r3, #0]
 800b6e6:	e002      	b.n	800b6ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b6f4:	69bb      	ldr	r3, [r7, #24]
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b6fa:	2101      	movs	r1, #1
 800b6fc:	69b8      	ldr	r0, [r7, #24]
 800b6fe:	f7ff ff43 	bl	800b588 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b702:	bf00      	nop
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
	...

0800b70c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b08e      	sub	sp, #56	; 0x38
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
 800b718:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b71a:	2300      	movs	r3, #0
 800b71c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b724:	2b00      	cmp	r3, #0
 800b726:	d10a      	bne.n	800b73e <xQueueGenericSend+0x32>
	__asm volatile
 800b728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72c:	f383 8811 	msr	BASEPRI, r3
 800b730:	f3bf 8f6f 	isb	sy
 800b734:	f3bf 8f4f 	dsb	sy
 800b738:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b73a:	bf00      	nop
 800b73c:	e7fe      	b.n	800b73c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d103      	bne.n	800b74c <xQueueGenericSend+0x40>
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d101      	bne.n	800b750 <xQueueGenericSend+0x44>
 800b74c:	2301      	movs	r3, #1
 800b74e:	e000      	b.n	800b752 <xQueueGenericSend+0x46>
 800b750:	2300      	movs	r3, #0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10a      	bne.n	800b76c <xQueueGenericSend+0x60>
	__asm volatile
 800b756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75a:	f383 8811 	msr	BASEPRI, r3
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	f3bf 8f4f 	dsb	sy
 800b766:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b768:	bf00      	nop
 800b76a:	e7fe      	b.n	800b76a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	2b02      	cmp	r3, #2
 800b770:	d103      	bne.n	800b77a <xQueueGenericSend+0x6e>
 800b772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b776:	2b01      	cmp	r3, #1
 800b778:	d101      	bne.n	800b77e <xQueueGenericSend+0x72>
 800b77a:	2301      	movs	r3, #1
 800b77c:	e000      	b.n	800b780 <xQueueGenericSend+0x74>
 800b77e:	2300      	movs	r3, #0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d10a      	bne.n	800b79a <xQueueGenericSend+0x8e>
	__asm volatile
 800b784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b788:	f383 8811 	msr	BASEPRI, r3
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f3bf 8f4f 	dsb	sy
 800b794:	623b      	str	r3, [r7, #32]
}
 800b796:	bf00      	nop
 800b798:	e7fe      	b.n	800b798 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b79a:	f001 fa97 	bl	800cccc <xTaskGetSchedulerState>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d102      	bne.n	800b7aa <xQueueGenericSend+0x9e>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d101      	bne.n	800b7ae <xQueueGenericSend+0xa2>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e000      	b.n	800b7b0 <xQueueGenericSend+0xa4>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <xQueueGenericSend+0xbe>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	61fb      	str	r3, [r7, #28]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7ca:	f001 fdcb 	bl	800d364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d302      	bcc.n	800b7e0 <xQueueGenericSend+0xd4>
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d129      	bne.n	800b834 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b7e0:	683a      	ldr	r2, [r7, #0]
 800b7e2:	68b9      	ldr	r1, [r7, #8]
 800b7e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7e6:	f000 fb21 	bl	800be2c <prvCopyDataToQueue>
 800b7ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d010      	beq.n	800b816 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f6:	3324      	adds	r3, #36	; 0x24
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f001 f86f 	bl	800c8dc <xTaskRemoveFromEventList>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d013      	beq.n	800b82c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b804:	4b3f      	ldr	r3, [pc, #252]	; (800b904 <xQueueGenericSend+0x1f8>)
 800b806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b80a:	601a      	str	r2, [r3, #0]
 800b80c:	f3bf 8f4f 	dsb	sy
 800b810:	f3bf 8f6f 	isb	sy
 800b814:	e00a      	b.n	800b82c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d007      	beq.n	800b82c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b81c:	4b39      	ldr	r3, [pc, #228]	; (800b904 <xQueueGenericSend+0x1f8>)
 800b81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b822:	601a      	str	r2, [r3, #0]
 800b824:	f3bf 8f4f 	dsb	sy
 800b828:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b82c:	f001 fdca 	bl	800d3c4 <vPortExitCritical>
				return pdPASS;
 800b830:	2301      	movs	r3, #1
 800b832:	e063      	b.n	800b8fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d103      	bne.n	800b842 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b83a:	f001 fdc3 	bl	800d3c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b83e:	2300      	movs	r3, #0
 800b840:	e05c      	b.n	800b8fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b844:	2b00      	cmp	r3, #0
 800b846:	d106      	bne.n	800b856 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b848:	f107 0314 	add.w	r3, r7, #20
 800b84c:	4618      	mov	r0, r3
 800b84e:	f001 f8a7 	bl	800c9a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b852:	2301      	movs	r3, #1
 800b854:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b856:	f001 fdb5 	bl	800d3c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b85a:	f000 fe47 	bl	800c4ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b85e:	f001 fd81 	bl	800d364 <vPortEnterCritical>
 800b862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b868:	b25b      	sxtb	r3, r3
 800b86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b86e:	d103      	bne.n	800b878 <xQueueGenericSend+0x16c>
 800b870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b872:	2200      	movs	r2, #0
 800b874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b87e:	b25b      	sxtb	r3, r3
 800b880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b884:	d103      	bne.n	800b88e <xQueueGenericSend+0x182>
 800b886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b88e:	f001 fd99 	bl	800d3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b892:	1d3a      	adds	r2, r7, #4
 800b894:	f107 0314 	add.w	r3, r7, #20
 800b898:	4611      	mov	r1, r2
 800b89a:	4618      	mov	r0, r3
 800b89c:	f001 f896 	bl	800c9cc <xTaskCheckForTimeOut>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d124      	bne.n	800b8f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b8a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8a8:	f000 fbb8 	bl	800c01c <prvIsQueueFull>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d018      	beq.n	800b8e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b4:	3310      	adds	r3, #16
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f000 ffea 	bl	800c894 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b8c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8c2:	f000 fb43 	bl	800bf4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b8c6:	f000 fe1f 	bl	800c508 <xTaskResumeAll>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f47f af7c 	bne.w	800b7ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b8d2:	4b0c      	ldr	r3, [pc, #48]	; (800b904 <xQueueGenericSend+0x1f8>)
 800b8d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	e772      	b.n	800b7ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b8e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8e6:	f000 fb31 	bl	800bf4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8ea:	f000 fe0d 	bl	800c508 <xTaskResumeAll>
 800b8ee:	e76c      	b.n	800b7ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b8f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8f2:	f000 fb2b 	bl	800bf4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8f6:	f000 fe07 	bl	800c508 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b8fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3738      	adds	r7, #56	; 0x38
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	e000ed04 	.word	0xe000ed04

0800b908 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b08e      	sub	sp, #56	; 0x38
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d10a      	bne.n	800b932 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	623b      	str	r3, [r7, #32]
}
 800b92e:	bf00      	nop
 800b930:	e7fe      	b.n	800b930 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00a      	beq.n	800b950 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	61fb      	str	r3, [r7, #28]
}
 800b94c:	bf00      	nop
 800b94e:	e7fe      	b.n	800b94e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d103      	bne.n	800b960 <xQueueGiveFromISR+0x58>
 800b958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d101      	bne.n	800b964 <xQueueGiveFromISR+0x5c>
 800b960:	2301      	movs	r3, #1
 800b962:	e000      	b.n	800b966 <xQueueGiveFromISR+0x5e>
 800b964:	2300      	movs	r3, #0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10a      	bne.n	800b980 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	61bb      	str	r3, [r7, #24]
}
 800b97c:	bf00      	nop
 800b97e:	e7fe      	b.n	800b97e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b980:	f001 fdd2 	bl	800d528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b984:	f3ef 8211 	mrs	r2, BASEPRI
 800b988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	617a      	str	r2, [r7, #20]
 800b99a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b99c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b99e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d22b      	bcs.n	800ba08 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9bc:	1c5a      	adds	r2, r3, #1
 800b9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b9c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ca:	d112      	bne.n	800b9f2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d016      	beq.n	800ba02 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d6:	3324      	adds	r3, #36	; 0x24
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f000 ff7f 	bl	800c8dc <xTaskRemoveFromEventList>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d00e      	beq.n	800ba02 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00b      	beq.n	800ba02 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	601a      	str	r2, [r3, #0]
 800b9f0:	e007      	b.n	800ba02 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b9f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	b25a      	sxtb	r2, r3
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba02:	2301      	movs	r3, #1
 800ba04:	637b      	str	r3, [r7, #52]	; 0x34
 800ba06:	e001      	b.n	800ba0c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ba16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3738      	adds	r7, #56	; 0x38
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
	...

0800ba24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b08c      	sub	sp, #48	; 0x30
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba30:	2300      	movs	r3, #0
 800ba32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10a      	bne.n	800ba54 <xQueueReceive+0x30>
	__asm volatile
 800ba3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	623b      	str	r3, [r7, #32]
}
 800ba50:	bf00      	nop
 800ba52:	e7fe      	b.n	800ba52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d103      	bne.n	800ba62 <xQueueReceive+0x3e>
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <xQueueReceive+0x42>
 800ba62:	2301      	movs	r3, #1
 800ba64:	e000      	b.n	800ba68 <xQueueReceive+0x44>
 800ba66:	2300      	movs	r3, #0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d10a      	bne.n	800ba82 <xQueueReceive+0x5e>
	__asm volatile
 800ba6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	61fb      	str	r3, [r7, #28]
}
 800ba7e:	bf00      	nop
 800ba80:	e7fe      	b.n	800ba80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba82:	f001 f923 	bl	800cccc <xTaskGetSchedulerState>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d102      	bne.n	800ba92 <xQueueReceive+0x6e>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d101      	bne.n	800ba96 <xQueueReceive+0x72>
 800ba92:	2301      	movs	r3, #1
 800ba94:	e000      	b.n	800ba98 <xQueueReceive+0x74>
 800ba96:	2300      	movs	r3, #0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10a      	bne.n	800bab2 <xQueueReceive+0x8e>
	__asm volatile
 800ba9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa0:	f383 8811 	msr	BASEPRI, r3
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	61bb      	str	r3, [r7, #24]
}
 800baae:	bf00      	nop
 800bab0:	e7fe      	b.n	800bab0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bab2:	f001 fc57 	bl	800d364 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d01f      	beq.n	800bb02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bac2:	68b9      	ldr	r1, [r7, #8]
 800bac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bac6:	f000 fa1b 	bl	800bf00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800baca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bacc:	1e5a      	subs	r2, r3, #1
 800bace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00f      	beq.n	800bafa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800badc:	3310      	adds	r3, #16
 800bade:	4618      	mov	r0, r3
 800bae0:	f000 fefc 	bl	800c8dc <xTaskRemoveFromEventList>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d007      	beq.n	800bafa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800baea:	4b3d      	ldr	r3, [pc, #244]	; (800bbe0 <xQueueReceive+0x1bc>)
 800baec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf0:	601a      	str	r2, [r3, #0]
 800baf2:	f3bf 8f4f 	dsb	sy
 800baf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bafa:	f001 fc63 	bl	800d3c4 <vPortExitCritical>
				return pdPASS;
 800bafe:	2301      	movs	r3, #1
 800bb00:	e069      	b.n	800bbd6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d103      	bne.n	800bb10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb08:	f001 fc5c 	bl	800d3c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	e062      	b.n	800bbd6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d106      	bne.n	800bb24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb16:	f107 0310 	add.w	r3, r7, #16
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f000 ff40 	bl	800c9a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb20:	2301      	movs	r3, #1
 800bb22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb24:	f001 fc4e 	bl	800d3c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb28:	f000 fce0 	bl	800c4ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb2c:	f001 fc1a 	bl	800d364 <vPortEnterCritical>
 800bb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb36:	b25b      	sxtb	r3, r3
 800bb38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb3c:	d103      	bne.n	800bb46 <xQueueReceive+0x122>
 800bb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb4c:	b25b      	sxtb	r3, r3
 800bb4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb52:	d103      	bne.n	800bb5c <xQueueReceive+0x138>
 800bb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb5c:	f001 fc32 	bl	800d3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb60:	1d3a      	adds	r2, r7, #4
 800bb62:	f107 0310 	add.w	r3, r7, #16
 800bb66:	4611      	mov	r1, r2
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 ff2f 	bl	800c9cc <xTaskCheckForTimeOut>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d123      	bne.n	800bbbc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb76:	f000 fa3b 	bl	800bff0 <prvIsQueueEmpty>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d017      	beq.n	800bbb0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb82:	3324      	adds	r3, #36	; 0x24
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	4611      	mov	r1, r2
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f000 fe83 	bl	800c894 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb90:	f000 f9dc 	bl	800bf4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb94:	f000 fcb8 	bl	800c508 <xTaskResumeAll>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d189      	bne.n	800bab2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bb9e:	4b10      	ldr	r3, [pc, #64]	; (800bbe0 <xQueueReceive+0x1bc>)
 800bba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bba4:	601a      	str	r2, [r3, #0]
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	e780      	b.n	800bab2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bbb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbb2:	f000 f9cb 	bl	800bf4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbb6:	f000 fca7 	bl	800c508 <xTaskResumeAll>
 800bbba:	e77a      	b.n	800bab2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bbbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbbe:	f000 f9c5 	bl	800bf4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbc2:	f000 fca1 	bl	800c508 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbc8:	f000 fa12 	bl	800bff0 <prvIsQueueEmpty>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f43f af6f 	beq.w	800bab2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bbd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3730      	adds	r7, #48	; 0x30
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	e000ed04 	.word	0xe000ed04

0800bbe4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b08e      	sub	sp, #56	; 0x38
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d10a      	bne.n	800bc16 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc04:	f383 8811 	msr	BASEPRI, r3
 800bc08:	f3bf 8f6f 	isb	sy
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	623b      	str	r3, [r7, #32]
}
 800bc12:	bf00      	nop
 800bc14:	e7fe      	b.n	800bc14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00a      	beq.n	800bc34 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	61fb      	str	r3, [r7, #28]
}
 800bc30:	bf00      	nop
 800bc32:	e7fe      	b.n	800bc32 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc34:	f001 f84a 	bl	800cccc <xTaskGetSchedulerState>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d102      	bne.n	800bc44 <xQueueSemaphoreTake+0x60>
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d101      	bne.n	800bc48 <xQueueSemaphoreTake+0x64>
 800bc44:	2301      	movs	r3, #1
 800bc46:	e000      	b.n	800bc4a <xQueueSemaphoreTake+0x66>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10a      	bne.n	800bc64 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc52:	f383 8811 	msr	BASEPRI, r3
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	61bb      	str	r3, [r7, #24]
}
 800bc60:	bf00      	nop
 800bc62:	e7fe      	b.n	800bc62 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc64:	f001 fb7e 	bl	800d364 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d024      	beq.n	800bcbe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc76:	1e5a      	subs	r2, r3, #1
 800bc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d104      	bne.n	800bc8e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bc84:	f001 f9ca 	bl	800d01c <pvTaskIncrementMutexHeldCount>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc90:	691b      	ldr	r3, [r3, #16]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00f      	beq.n	800bcb6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc98:	3310      	adds	r3, #16
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f000 fe1e 	bl	800c8dc <xTaskRemoveFromEventList>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d007      	beq.n	800bcb6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bca6:	4b54      	ldr	r3, [pc, #336]	; (800bdf8 <xQueueSemaphoreTake+0x214>)
 800bca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcac:	601a      	str	r2, [r3, #0]
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bcb6:	f001 fb85 	bl	800d3c4 <vPortExitCritical>
				return pdPASS;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e097      	b.n	800bdee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d111      	bne.n	800bce8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00a      	beq.n	800bce0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	617b      	str	r3, [r7, #20]
}
 800bcdc:	bf00      	nop
 800bcde:	e7fe      	b.n	800bcde <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bce0:	f001 fb70 	bl	800d3c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bce4:	2300      	movs	r3, #0
 800bce6:	e082      	b.n	800bdee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d106      	bne.n	800bcfc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcee:	f107 030c 	add.w	r3, r7, #12
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f000 fe54 	bl	800c9a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bcfc:	f001 fb62 	bl	800d3c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd00:	f000 fbf4 	bl	800c4ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd04:	f001 fb2e 	bl	800d364 <vPortEnterCritical>
 800bd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd0e:	b25b      	sxtb	r3, r3
 800bd10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd14:	d103      	bne.n	800bd1e <xQueueSemaphoreTake+0x13a>
 800bd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd24:	b25b      	sxtb	r3, r3
 800bd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2a:	d103      	bne.n	800bd34 <xQueueSemaphoreTake+0x150>
 800bd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd34:	f001 fb46 	bl	800d3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd38:	463a      	mov	r2, r7
 800bd3a:	f107 030c 	add.w	r3, r7, #12
 800bd3e:	4611      	mov	r1, r2
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 fe43 	bl	800c9cc <xTaskCheckForTimeOut>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d132      	bne.n	800bdb2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd4e:	f000 f94f 	bl	800bff0 <prvIsQueueEmpty>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d026      	beq.n	800bda6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d109      	bne.n	800bd74 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bd60:	f001 fb00 	bl	800d364 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f000 ffcd 	bl	800cd08 <xTaskPriorityInherit>
 800bd6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bd70:	f001 fb28 	bl	800d3c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd76:	3324      	adds	r3, #36	; 0x24
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	4611      	mov	r1, r2
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f000 fd89 	bl	800c894 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd84:	f000 f8e2 	bl	800bf4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd88:	f000 fbbe 	bl	800c508 <xTaskResumeAll>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f47f af68 	bne.w	800bc64 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bd94:	4b18      	ldr	r3, [pc, #96]	; (800bdf8 <xQueueSemaphoreTake+0x214>)
 800bd96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd9a:	601a      	str	r2, [r3, #0]
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	f3bf 8f6f 	isb	sy
 800bda4:	e75e      	b.n	800bc64 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bda6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bda8:	f000 f8d0 	bl	800bf4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdac:	f000 fbac 	bl	800c508 <xTaskResumeAll>
 800bdb0:	e758      	b.n	800bc64 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bdb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdb4:	f000 f8ca 	bl	800bf4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdb8:	f000 fba6 	bl	800c508 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdbe:	f000 f917 	bl	800bff0 <prvIsQueueEmpty>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f43f af4d 	beq.w	800bc64 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d00d      	beq.n	800bdec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bdd0:	f001 fac8 	bl	800d364 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bdd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdd6:	f000 f811 	bl	800bdfc <prvGetDisinheritPriorityAfterTimeout>
 800bdda:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bde2:	4618      	mov	r0, r3
 800bde4:	f001 f88c 	bl	800cf00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bde8:	f001 faec 	bl	800d3c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bdec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3738      	adds	r7, #56	; 0x38
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	e000ed04 	.word	0xe000ed04

0800bdfc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d006      	beq.n	800be1a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f1c3 0307 	rsb	r3, r3, #7
 800be16:	60fb      	str	r3, [r7, #12]
 800be18:	e001      	b.n	800be1e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800be1a:	2300      	movs	r3, #0
 800be1c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800be1e:	68fb      	ldr	r3, [r7, #12]
	}
 800be20:	4618      	mov	r0, r3
 800be22:	3714      	adds	r7, #20
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800be38:	2300      	movs	r3, #0
 800be3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be46:	2b00      	cmp	r3, #0
 800be48:	d10d      	bne.n	800be66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d14d      	bne.n	800beee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	4618      	mov	r0, r3
 800be58:	f000 ffcc 	bl	800cdf4 <xTaskPriorityDisinherit>
 800be5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	609a      	str	r2, [r3, #8]
 800be64:	e043      	b.n	800beee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d119      	bne.n	800bea0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6858      	ldr	r0, [r3, #4]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be74:	461a      	mov	r2, r3
 800be76:	68b9      	ldr	r1, [r7, #8]
 800be78:	f002 fe3d 	bl	800eaf6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	685a      	ldr	r2, [r3, #4]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be84:	441a      	add	r2, r3
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	685a      	ldr	r2, [r3, #4]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	429a      	cmp	r2, r3
 800be94:	d32b      	bcc.n	800beee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	605a      	str	r2, [r3, #4]
 800be9e:	e026      	b.n	800beee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	68d8      	ldr	r0, [r3, #12]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea8:	461a      	mov	r2, r3
 800beaa:	68b9      	ldr	r1, [r7, #8]
 800beac:	f002 fe23 	bl	800eaf6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	68da      	ldr	r2, [r3, #12]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb8:	425b      	negs	r3, r3
 800beba:	441a      	add	r2, r3
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	68da      	ldr	r2, [r3, #12]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d207      	bcs.n	800bedc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	689a      	ldr	r2, [r3, #8]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed4:	425b      	negs	r3, r3
 800bed6:	441a      	add	r2, r3
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2b02      	cmp	r3, #2
 800bee0:	d105      	bne.n	800beee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d002      	beq.n	800beee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	3b01      	subs	r3, #1
 800beec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	1c5a      	adds	r2, r3, #1
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bef6:	697b      	ldr	r3, [r7, #20]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3718      	adds	r7, #24
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d018      	beq.n	800bf44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	68da      	ldr	r2, [r3, #12]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1a:	441a      	add	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	68da      	ldr	r2, [r3, #12]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d303      	bcc.n	800bf34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	68d9      	ldr	r1, [r3, #12]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	6838      	ldr	r0, [r7, #0]
 800bf40:	f002 fdd9 	bl	800eaf6 <memcpy>
	}
}
 800bf44:	bf00      	nop
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bf54:	f001 fa06 	bl	800d364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf60:	e011      	b.n	800bf86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d012      	beq.n	800bf90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	3324      	adds	r3, #36	; 0x24
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 fcb4 	bl	800c8dc <xTaskRemoveFromEventList>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d001      	beq.n	800bf7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bf7a:	f000 fd89 	bl	800ca90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bf7e:	7bfb      	ldrb	r3, [r7, #15]
 800bf80:	3b01      	subs	r3, #1
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	dce9      	bgt.n	800bf62 <prvUnlockQueue+0x16>
 800bf8e:	e000      	b.n	800bf92 <prvUnlockQueue+0x46>
					break;
 800bf90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	22ff      	movs	r2, #255	; 0xff
 800bf96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bf9a:	f001 fa13 	bl	800d3c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bf9e:	f001 f9e1 	bl	800d364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfa8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bfaa:	e011      	b.n	800bfd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d012      	beq.n	800bfda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	3310      	adds	r3, #16
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f000 fc8f 	bl	800c8dc <xTaskRemoveFromEventList>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d001      	beq.n	800bfc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bfc4:	f000 fd64 	bl	800ca90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bfc8:	7bbb      	ldrb	r3, [r7, #14]
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bfd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	dce9      	bgt.n	800bfac <prvUnlockQueue+0x60>
 800bfd8:	e000      	b.n	800bfdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bfda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	22ff      	movs	r2, #255	; 0xff
 800bfe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bfe4:	f001 f9ee 	bl	800d3c4 <vPortExitCritical>
}
 800bfe8:	bf00      	nop
 800bfea:	3710      	adds	r7, #16
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bff8:	f001 f9b4 	bl	800d364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c000:	2b00      	cmp	r3, #0
 800c002:	d102      	bne.n	800c00a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c004:	2301      	movs	r3, #1
 800c006:	60fb      	str	r3, [r7, #12]
 800c008:	e001      	b.n	800c00e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c00a:	2300      	movs	r3, #0
 800c00c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c00e:	f001 f9d9 	bl	800d3c4 <vPortExitCritical>

	return xReturn;
 800c012:	68fb      	ldr	r3, [r7, #12]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c024:	f001 f99e 	bl	800d364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c030:	429a      	cmp	r2, r3
 800c032:	d102      	bne.n	800c03a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c034:	2301      	movs	r3, #1
 800c036:	60fb      	str	r3, [r7, #12]
 800c038:	e001      	b.n	800c03e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c03a:	2300      	movs	r3, #0
 800c03c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c03e:	f001 f9c1 	bl	800d3c4 <vPortExitCritical>

	return xReturn;
 800c042:	68fb      	ldr	r3, [r7, #12]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b08e      	sub	sp, #56	; 0x38
 800c050:	af04      	add	r7, sp, #16
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
 800c058:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10a      	bne.n	800c076 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	623b      	str	r3, [r7, #32]
}
 800c072:	bf00      	nop
 800c074:	e7fe      	b.n	800c074 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10a      	bne.n	800c092 <xTaskCreateStatic+0x46>
	__asm volatile
 800c07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c080:	f383 8811 	msr	BASEPRI, r3
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	f3bf 8f4f 	dsb	sy
 800c08c:	61fb      	str	r3, [r7, #28]
}
 800c08e:	bf00      	nop
 800c090:	e7fe      	b.n	800c090 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c092:	23a0      	movs	r3, #160	; 0xa0
 800c094:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	2ba0      	cmp	r3, #160	; 0xa0
 800c09a:	d00a      	beq.n	800c0b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800c09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	61bb      	str	r3, [r7, #24]
}
 800c0ae:	bf00      	nop
 800c0b0:	e7fe      	b.n	800c0b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c0b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d01e      	beq.n	800c0f8 <xTaskCreateStatic+0xac>
 800c0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d01b      	beq.n	800c0f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0cc:	2202      	movs	r2, #2
 800c0ce:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	9303      	str	r3, [sp, #12]
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d8:	9302      	str	r3, [sp, #8]
 800c0da:	f107 0314 	add.w	r3, r7, #20
 800c0de:	9301      	str	r3, [sp, #4]
 800c0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	68b9      	ldr	r1, [r7, #8]
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	f000 f850 	bl	800c190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0f2:	f000 f8f3 	bl	800c2dc <prvAddNewTaskToReadyList>
 800c0f6:	e001      	b.n	800c0fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c0fc:	697b      	ldr	r3, [r7, #20]
	}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3728      	adds	r7, #40	; 0x28
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c106:	b580      	push	{r7, lr}
 800c108:	b08c      	sub	sp, #48	; 0x30
 800c10a:	af04      	add	r7, sp, #16
 800c10c:	60f8      	str	r0, [r7, #12]
 800c10e:	60b9      	str	r1, [r7, #8]
 800c110:	603b      	str	r3, [r7, #0]
 800c112:	4613      	mov	r3, r2
 800c114:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c116:	88fb      	ldrh	r3, [r7, #6]
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	4618      	mov	r0, r3
 800c11c:	f001 fa44 	bl	800d5a8 <pvPortMalloc>
 800c120:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00e      	beq.n	800c146 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c128:	20a0      	movs	r0, #160	; 0xa0
 800c12a:	f001 fa3d 	bl	800d5a8 <pvPortMalloc>
 800c12e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	697a      	ldr	r2, [r7, #20]
 800c13a:	631a      	str	r2, [r3, #48]	; 0x30
 800c13c:	e005      	b.n	800c14a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c13e:	6978      	ldr	r0, [r7, #20]
 800c140:	f001 fafe 	bl	800d740 <vPortFree>
 800c144:	e001      	b.n	800c14a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c146:	2300      	movs	r3, #0
 800c148:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d017      	beq.n	800c180 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	2200      	movs	r2, #0
 800c154:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c158:	88fa      	ldrh	r2, [r7, #6]
 800c15a:	2300      	movs	r3, #0
 800c15c:	9303      	str	r3, [sp, #12]
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	9302      	str	r3, [sp, #8]
 800c162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c164:	9301      	str	r3, [sp, #4]
 800c166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c168:	9300      	str	r3, [sp, #0]
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	68b9      	ldr	r1, [r7, #8]
 800c16e:	68f8      	ldr	r0, [r7, #12]
 800c170:	f000 f80e 	bl	800c190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c174:	69f8      	ldr	r0, [r7, #28]
 800c176:	f000 f8b1 	bl	800c2dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c17a:	2301      	movs	r3, #1
 800c17c:	61bb      	str	r3, [r7, #24]
 800c17e:	e002      	b.n	800c186 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c180:	f04f 33ff 	mov.w	r3, #4294967295
 800c184:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c186:	69bb      	ldr	r3, [r7, #24]
	}
 800c188:	4618      	mov	r0, r3
 800c18a:	3720      	adds	r7, #32
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b088      	sub	sp, #32
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
 800c19c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	21a5      	movs	r1, #165	; 0xa5
 800c1aa:	f002 fbb0 	bl	800e90e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	4413      	add	r3, r2
 800c1be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	f023 0307 	bic.w	r3, r3, #7
 800c1c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	f003 0307 	and.w	r3, r3, #7
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00a      	beq.n	800c1e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	617b      	str	r3, [r7, #20]
}
 800c1e4:	bf00      	nop
 800c1e6:	e7fe      	b.n	800c1e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d01f      	beq.n	800c22e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	61fb      	str	r3, [r7, #28]
 800c1f2:	e012      	b.n	800c21a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	69fb      	ldr	r3, [r7, #28]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	7819      	ldrb	r1, [r3, #0]
 800c1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	4413      	add	r3, r2
 800c202:	3334      	adds	r3, #52	; 0x34
 800c204:	460a      	mov	r2, r1
 800c206:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c208:	68ba      	ldr	r2, [r7, #8]
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	4413      	add	r3, r2
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d006      	beq.n	800c222 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	3301      	adds	r3, #1
 800c218:	61fb      	str	r3, [r7, #28]
 800c21a:	69fb      	ldr	r3, [r7, #28]
 800c21c:	2b0f      	cmp	r3, #15
 800c21e:	d9e9      	bls.n	800c1f4 <prvInitialiseNewTask+0x64>
 800c220:	e000      	b.n	800c224 <prvInitialiseNewTask+0x94>
			{
				break;
 800c222:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c226:	2200      	movs	r2, #0
 800c228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c22c:	e003      	b.n	800c236 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c230:	2200      	movs	r2, #0
 800c232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c238:	2b06      	cmp	r3, #6
 800c23a:	d901      	bls.n	800c240 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c23c:	2306      	movs	r3, #6
 800c23e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c244:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c24a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24e:	2200      	movs	r2, #0
 800c250:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c254:	3304      	adds	r3, #4
 800c256:	4618      	mov	r0, r3
 800c258:	f7ff f902 	bl	800b460 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25e:	3318      	adds	r3, #24
 800c260:	4618      	mov	r0, r3
 800c262:	f7ff f8fd 	bl	800b460 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c26a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26e:	f1c3 0207 	rsb	r2, r3, #7
 800c272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c274:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c27a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27e:	2200      	movs	r2, #0
 800c280:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c286:	2200      	movs	r2, #0
 800c288:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28e:	334c      	adds	r3, #76	; 0x4c
 800c290:	224c      	movs	r2, #76	; 0x4c
 800c292:	2100      	movs	r1, #0
 800c294:	4618      	mov	r0, r3
 800c296:	f002 fb3a 	bl	800e90e <memset>
 800c29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29c:	4a0c      	ldr	r2, [pc, #48]	; (800c2d0 <prvInitialiseNewTask+0x140>)
 800c29e:	651a      	str	r2, [r3, #80]	; 0x50
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a2:	4a0c      	ldr	r2, [pc, #48]	; (800c2d4 <prvInitialiseNewTask+0x144>)
 800c2a4:	655a      	str	r2, [r3, #84]	; 0x54
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a8:	4a0b      	ldr	r2, [pc, #44]	; (800c2d8 <prvInitialiseNewTask+0x148>)
 800c2aa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c2ac:	683a      	ldr	r2, [r7, #0]
 800c2ae:	68f9      	ldr	r1, [r7, #12]
 800c2b0:	69b8      	ldr	r0, [r7, #24]
 800c2b2:	f000 ff2d 	bl	800d110 <pxPortInitialiseStack>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d002      	beq.n	800c2c8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2c8:	bf00      	nop
 800c2ca:	3720      	adds	r7, #32
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	20008b2c 	.word	0x20008b2c
 800c2d4:	20008b94 	.word	0x20008b94
 800c2d8:	20008bfc 	.word	0x20008bfc

0800c2dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c2e4:	f001 f83e 	bl	800d364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c2e8:	4b2a      	ldr	r3, [pc, #168]	; (800c394 <prvAddNewTaskToReadyList+0xb8>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	4a29      	ldr	r2, [pc, #164]	; (800c394 <prvAddNewTaskToReadyList+0xb8>)
 800c2f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c2f2:	4b29      	ldr	r3, [pc, #164]	; (800c398 <prvAddNewTaskToReadyList+0xbc>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d109      	bne.n	800c30e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c2fa:	4a27      	ldr	r2, [pc, #156]	; (800c398 <prvAddNewTaskToReadyList+0xbc>)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c300:	4b24      	ldr	r3, [pc, #144]	; (800c394 <prvAddNewTaskToReadyList+0xb8>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b01      	cmp	r3, #1
 800c306:	d110      	bne.n	800c32a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c308:	f000 fbe6 	bl	800cad8 <prvInitialiseTaskLists>
 800c30c:	e00d      	b.n	800c32a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c30e:	4b23      	ldr	r3, [pc, #140]	; (800c39c <prvAddNewTaskToReadyList+0xc0>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d109      	bne.n	800c32a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c316:	4b20      	ldr	r3, [pc, #128]	; (800c398 <prvAddNewTaskToReadyList+0xbc>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c320:	429a      	cmp	r2, r3
 800c322:	d802      	bhi.n	800c32a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c324:	4a1c      	ldr	r2, [pc, #112]	; (800c398 <prvAddNewTaskToReadyList+0xbc>)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c32a:	4b1d      	ldr	r3, [pc, #116]	; (800c3a0 <prvAddNewTaskToReadyList+0xc4>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	3301      	adds	r3, #1
 800c330:	4a1b      	ldr	r2, [pc, #108]	; (800c3a0 <prvAddNewTaskToReadyList+0xc4>)
 800c332:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c338:	2201      	movs	r2, #1
 800c33a:	409a      	lsls	r2, r3
 800c33c:	4b19      	ldr	r3, [pc, #100]	; (800c3a4 <prvAddNewTaskToReadyList+0xc8>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4313      	orrs	r3, r2
 800c342:	4a18      	ldr	r2, [pc, #96]	; (800c3a4 <prvAddNewTaskToReadyList+0xc8>)
 800c344:	6013      	str	r3, [r2, #0]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c34a:	4613      	mov	r3, r2
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	4413      	add	r3, r2
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	4a15      	ldr	r2, [pc, #84]	; (800c3a8 <prvAddNewTaskToReadyList+0xcc>)
 800c354:	441a      	add	r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	3304      	adds	r3, #4
 800c35a:	4619      	mov	r1, r3
 800c35c:	4610      	mov	r0, r2
 800c35e:	f7ff f88c 	bl	800b47a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c362:	f001 f82f 	bl	800d3c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c366:	4b0d      	ldr	r3, [pc, #52]	; (800c39c <prvAddNewTaskToReadyList+0xc0>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00e      	beq.n	800c38c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c36e:	4b0a      	ldr	r3, [pc, #40]	; (800c398 <prvAddNewTaskToReadyList+0xbc>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c378:	429a      	cmp	r2, r3
 800c37a:	d207      	bcs.n	800c38c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c37c:	4b0b      	ldr	r3, [pc, #44]	; (800c3ac <prvAddNewTaskToReadyList+0xd0>)
 800c37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c38c:	bf00      	nop
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	200015a8 	.word	0x200015a8
 800c398:	200014a8 	.word	0x200014a8
 800c39c:	200015b4 	.word	0x200015b4
 800c3a0:	200015c4 	.word	0x200015c4
 800c3a4:	200015b0 	.word	0x200015b0
 800c3a8:	200014ac 	.word	0x200014ac
 800c3ac:	e000ed04 	.word	0xe000ed04

0800c3b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d017      	beq.n	800c3f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c3c2:	4b13      	ldr	r3, [pc, #76]	; (800c410 <vTaskDelay+0x60>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d00a      	beq.n	800c3e0 <vTaskDelay+0x30>
	__asm volatile
 800c3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ce:	f383 8811 	msr	BASEPRI, r3
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	60bb      	str	r3, [r7, #8]
}
 800c3dc:	bf00      	nop
 800c3de:	e7fe      	b.n	800c3de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c3e0:	f000 f884 	bl	800c4ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fe2c 	bl	800d044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c3ec:	f000 f88c 	bl	800c508 <xTaskResumeAll>
 800c3f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d107      	bne.n	800c408 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c3f8:	4b06      	ldr	r3, [pc, #24]	; (800c414 <vTaskDelay+0x64>)
 800c3fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3fe:	601a      	str	r2, [r3, #0]
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c408:	bf00      	nop
 800c40a:	3710      	adds	r7, #16
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	200015d0 	.word	0x200015d0
 800c414:	e000ed04 	.word	0xe000ed04

0800c418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b08a      	sub	sp, #40	; 0x28
 800c41c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c41e:	2300      	movs	r3, #0
 800c420:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c422:	2300      	movs	r3, #0
 800c424:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c426:	463a      	mov	r2, r7
 800c428:	1d39      	adds	r1, r7, #4
 800c42a:	f107 0308 	add.w	r3, r7, #8
 800c42e:	4618      	mov	r0, r3
 800c430:	f7f4 ffb0 	bl	8001394 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c434:	6839      	ldr	r1, [r7, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	9202      	str	r2, [sp, #8]
 800c43c:	9301      	str	r3, [sp, #4]
 800c43e:	2300      	movs	r3, #0
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	2300      	movs	r3, #0
 800c444:	460a      	mov	r2, r1
 800c446:	4921      	ldr	r1, [pc, #132]	; (800c4cc <vTaskStartScheduler+0xb4>)
 800c448:	4821      	ldr	r0, [pc, #132]	; (800c4d0 <vTaskStartScheduler+0xb8>)
 800c44a:	f7ff fdff 	bl	800c04c <xTaskCreateStatic>
 800c44e:	4603      	mov	r3, r0
 800c450:	4a20      	ldr	r2, [pc, #128]	; (800c4d4 <vTaskStartScheduler+0xbc>)
 800c452:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c454:	4b1f      	ldr	r3, [pc, #124]	; (800c4d4 <vTaskStartScheduler+0xbc>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d002      	beq.n	800c462 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c45c:	2301      	movs	r3, #1
 800c45e:	617b      	str	r3, [r7, #20]
 800c460:	e001      	b.n	800c466 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c462:	2300      	movs	r3, #0
 800c464:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d11b      	bne.n	800c4a4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	613b      	str	r3, [r7, #16]
}
 800c47e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c480:	4b15      	ldr	r3, [pc, #84]	; (800c4d8 <vTaskStartScheduler+0xc0>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	334c      	adds	r3, #76	; 0x4c
 800c486:	4a15      	ldr	r2, [pc, #84]	; (800c4dc <vTaskStartScheduler+0xc4>)
 800c488:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c48a:	4b15      	ldr	r3, [pc, #84]	; (800c4e0 <vTaskStartScheduler+0xc8>)
 800c48c:	f04f 32ff 	mov.w	r2, #4294967295
 800c490:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c492:	4b14      	ldr	r3, [pc, #80]	; (800c4e4 <vTaskStartScheduler+0xcc>)
 800c494:	2201      	movs	r2, #1
 800c496:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c498:	4b13      	ldr	r3, [pc, #76]	; (800c4e8 <vTaskStartScheduler+0xd0>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c49e:	f000 febf 	bl	800d220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c4a2:	e00e      	b.n	800c4c2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4aa:	d10a      	bne.n	800c4c2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800c4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b0:	f383 8811 	msr	BASEPRI, r3
 800c4b4:	f3bf 8f6f 	isb	sy
 800c4b8:	f3bf 8f4f 	dsb	sy
 800c4bc:	60fb      	str	r3, [r7, #12]
}
 800c4be:	bf00      	nop
 800c4c0:	e7fe      	b.n	800c4c0 <vTaskStartScheduler+0xa8>
}
 800c4c2:	bf00      	nop
 800c4c4:	3718      	adds	r7, #24
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	080142e0 	.word	0x080142e0
 800c4d0:	0800caa9 	.word	0x0800caa9
 800c4d4:	200015cc 	.word	0x200015cc
 800c4d8:	200014a8 	.word	0x200014a8
 800c4dc:	20000130 	.word	0x20000130
 800c4e0:	200015c8 	.word	0x200015c8
 800c4e4:	200015b4 	.word	0x200015b4
 800c4e8:	200015ac 	.word	0x200015ac

0800c4ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c4f0:	4b04      	ldr	r3, [pc, #16]	; (800c504 <vTaskSuspendAll+0x18>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	4a03      	ldr	r2, [pc, #12]	; (800c504 <vTaskSuspendAll+0x18>)
 800c4f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c4fa:	bf00      	nop
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr
 800c504:	200015d0 	.word	0x200015d0

0800c508 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c50e:	2300      	movs	r3, #0
 800c510:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c512:	2300      	movs	r3, #0
 800c514:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c516:	4b41      	ldr	r3, [pc, #260]	; (800c61c <xTaskResumeAll+0x114>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d10a      	bne.n	800c534 <xTaskResumeAll+0x2c>
	__asm volatile
 800c51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	603b      	str	r3, [r7, #0]
}
 800c530:	bf00      	nop
 800c532:	e7fe      	b.n	800c532 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c534:	f000 ff16 	bl	800d364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c538:	4b38      	ldr	r3, [pc, #224]	; (800c61c <xTaskResumeAll+0x114>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	3b01      	subs	r3, #1
 800c53e:	4a37      	ldr	r2, [pc, #220]	; (800c61c <xTaskResumeAll+0x114>)
 800c540:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c542:	4b36      	ldr	r3, [pc, #216]	; (800c61c <xTaskResumeAll+0x114>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d161      	bne.n	800c60e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c54a:	4b35      	ldr	r3, [pc, #212]	; (800c620 <xTaskResumeAll+0x118>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d05d      	beq.n	800c60e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c552:	e02e      	b.n	800c5b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c554:	4b33      	ldr	r3, [pc, #204]	; (800c624 <xTaskResumeAll+0x11c>)
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	3318      	adds	r3, #24
 800c560:	4618      	mov	r0, r3
 800c562:	f7fe ffe7 	bl	800b534 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	3304      	adds	r3, #4
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fe ffe2 	bl	800b534 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c574:	2201      	movs	r2, #1
 800c576:	409a      	lsls	r2, r3
 800c578:	4b2b      	ldr	r3, [pc, #172]	; (800c628 <xTaskResumeAll+0x120>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	4a2a      	ldr	r2, [pc, #168]	; (800c628 <xTaskResumeAll+0x120>)
 800c580:	6013      	str	r3, [r2, #0]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c586:	4613      	mov	r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	4413      	add	r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	4a27      	ldr	r2, [pc, #156]	; (800c62c <xTaskResumeAll+0x124>)
 800c590:	441a      	add	r2, r3
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	3304      	adds	r3, #4
 800c596:	4619      	mov	r1, r3
 800c598:	4610      	mov	r0, r2
 800c59a:	f7fe ff6e 	bl	800b47a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a2:	4b23      	ldr	r3, [pc, #140]	; (800c630 <xTaskResumeAll+0x128>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d302      	bcc.n	800c5b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c5ac:	4b21      	ldr	r3, [pc, #132]	; (800c634 <xTaskResumeAll+0x12c>)
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c5b2:	4b1c      	ldr	r3, [pc, #112]	; (800c624 <xTaskResumeAll+0x11c>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d1cc      	bne.n	800c554 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c5c0:	f000 fb64 	bl	800cc8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c5c4:	4b1c      	ldr	r3, [pc, #112]	; (800c638 <xTaskResumeAll+0x130>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d010      	beq.n	800c5f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c5d0:	f000 f846 	bl	800c660 <xTaskIncrementTick>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d002      	beq.n	800c5e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c5da:	4b16      	ldr	r3, [pc, #88]	; (800c634 <xTaskResumeAll+0x12c>)
 800c5dc:	2201      	movs	r2, #1
 800c5de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1f1      	bne.n	800c5d0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c5ec:	4b12      	ldr	r3, [pc, #72]	; (800c638 <xTaskResumeAll+0x130>)
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c5f2:	4b10      	ldr	r3, [pc, #64]	; (800c634 <xTaskResumeAll+0x12c>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d009      	beq.n	800c60e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c5fe:	4b0f      	ldr	r3, [pc, #60]	; (800c63c <xTaskResumeAll+0x134>)
 800c600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c604:	601a      	str	r2, [r3, #0]
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c60e:	f000 fed9 	bl	800d3c4 <vPortExitCritical>

	return xAlreadyYielded;
 800c612:	68bb      	ldr	r3, [r7, #8]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	200015d0 	.word	0x200015d0
 800c620:	200015a8 	.word	0x200015a8
 800c624:	20001568 	.word	0x20001568
 800c628:	200015b0 	.word	0x200015b0
 800c62c:	200014ac 	.word	0x200014ac
 800c630:	200014a8 	.word	0x200014a8
 800c634:	200015bc 	.word	0x200015bc
 800c638:	200015b8 	.word	0x200015b8
 800c63c:	e000ed04 	.word	0xe000ed04

0800c640 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c646:	4b05      	ldr	r3, [pc, #20]	; (800c65c <xTaskGetTickCount+0x1c>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c64c:	687b      	ldr	r3, [r7, #4]
}
 800c64e:	4618      	mov	r0, r3
 800c650:	370c      	adds	r7, #12
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr
 800c65a:	bf00      	nop
 800c65c:	200015ac 	.word	0x200015ac

0800c660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c666:	2300      	movs	r3, #0
 800c668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c66a:	4b4e      	ldr	r3, [pc, #312]	; (800c7a4 <xTaskIncrementTick+0x144>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f040 808e 	bne.w	800c790 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c674:	4b4c      	ldr	r3, [pc, #304]	; (800c7a8 <xTaskIncrementTick+0x148>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	3301      	adds	r3, #1
 800c67a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c67c:	4a4a      	ldr	r2, [pc, #296]	; (800c7a8 <xTaskIncrementTick+0x148>)
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d120      	bne.n	800c6ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c688:	4b48      	ldr	r3, [pc, #288]	; (800c7ac <xTaskIncrementTick+0x14c>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d00a      	beq.n	800c6a8 <xTaskIncrementTick+0x48>
	__asm volatile
 800c692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c696:	f383 8811 	msr	BASEPRI, r3
 800c69a:	f3bf 8f6f 	isb	sy
 800c69e:	f3bf 8f4f 	dsb	sy
 800c6a2:	603b      	str	r3, [r7, #0]
}
 800c6a4:	bf00      	nop
 800c6a6:	e7fe      	b.n	800c6a6 <xTaskIncrementTick+0x46>
 800c6a8:	4b40      	ldr	r3, [pc, #256]	; (800c7ac <xTaskIncrementTick+0x14c>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	60fb      	str	r3, [r7, #12]
 800c6ae:	4b40      	ldr	r3, [pc, #256]	; (800c7b0 <xTaskIncrementTick+0x150>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a3e      	ldr	r2, [pc, #248]	; (800c7ac <xTaskIncrementTick+0x14c>)
 800c6b4:	6013      	str	r3, [r2, #0]
 800c6b6:	4a3e      	ldr	r2, [pc, #248]	; (800c7b0 <xTaskIncrementTick+0x150>)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6013      	str	r3, [r2, #0]
 800c6bc:	4b3d      	ldr	r3, [pc, #244]	; (800c7b4 <xTaskIncrementTick+0x154>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	4a3c      	ldr	r2, [pc, #240]	; (800c7b4 <xTaskIncrementTick+0x154>)
 800c6c4:	6013      	str	r3, [r2, #0]
 800c6c6:	f000 fae1 	bl	800cc8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c6ca:	4b3b      	ldr	r3, [pc, #236]	; (800c7b8 <xTaskIncrementTick+0x158>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	693a      	ldr	r2, [r7, #16]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d348      	bcc.n	800c766 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6d4:	4b35      	ldr	r3, [pc, #212]	; (800c7ac <xTaskIncrementTick+0x14c>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d104      	bne.n	800c6e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6de:	4b36      	ldr	r3, [pc, #216]	; (800c7b8 <xTaskIncrementTick+0x158>)
 800c6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6e4:	601a      	str	r2, [r3, #0]
					break;
 800c6e6:	e03e      	b.n	800c766 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6e8:	4b30      	ldr	r3, [pc, #192]	; (800c7ac <xTaskIncrementTick+0x14c>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	68db      	ldr	r3, [r3, #12]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c6f8:	693a      	ldr	r2, [r7, #16]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d203      	bcs.n	800c708 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c700:	4a2d      	ldr	r2, [pc, #180]	; (800c7b8 <xTaskIncrementTick+0x158>)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c706:	e02e      	b.n	800c766 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	3304      	adds	r3, #4
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7fe ff11 	bl	800b534 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c716:	2b00      	cmp	r3, #0
 800c718:	d004      	beq.n	800c724 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	3318      	adds	r3, #24
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fe ff08 	bl	800b534 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c728:	2201      	movs	r2, #1
 800c72a:	409a      	lsls	r2, r3
 800c72c:	4b23      	ldr	r3, [pc, #140]	; (800c7bc <xTaskIncrementTick+0x15c>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4313      	orrs	r3, r2
 800c732:	4a22      	ldr	r2, [pc, #136]	; (800c7bc <xTaskIncrementTick+0x15c>)
 800c734:	6013      	str	r3, [r2, #0]
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c73a:	4613      	mov	r3, r2
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	4413      	add	r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	4a1f      	ldr	r2, [pc, #124]	; (800c7c0 <xTaskIncrementTick+0x160>)
 800c744:	441a      	add	r2, r3
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	3304      	adds	r3, #4
 800c74a:	4619      	mov	r1, r3
 800c74c:	4610      	mov	r0, r2
 800c74e:	f7fe fe94 	bl	800b47a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c756:	4b1b      	ldr	r3, [pc, #108]	; (800c7c4 <xTaskIncrementTick+0x164>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d3b9      	bcc.n	800c6d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c760:	2301      	movs	r3, #1
 800c762:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c764:	e7b6      	b.n	800c6d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c766:	4b17      	ldr	r3, [pc, #92]	; (800c7c4 <xTaskIncrementTick+0x164>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c76c:	4914      	ldr	r1, [pc, #80]	; (800c7c0 <xTaskIncrementTick+0x160>)
 800c76e:	4613      	mov	r3, r2
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	4413      	add	r3, r2
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	440b      	add	r3, r1
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d901      	bls.n	800c782 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c77e:	2301      	movs	r3, #1
 800c780:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c782:	4b11      	ldr	r3, [pc, #68]	; (800c7c8 <xTaskIncrementTick+0x168>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d007      	beq.n	800c79a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c78a:	2301      	movs	r3, #1
 800c78c:	617b      	str	r3, [r7, #20]
 800c78e:	e004      	b.n	800c79a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c790:	4b0e      	ldr	r3, [pc, #56]	; (800c7cc <xTaskIncrementTick+0x16c>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	3301      	adds	r3, #1
 800c796:	4a0d      	ldr	r2, [pc, #52]	; (800c7cc <xTaskIncrementTick+0x16c>)
 800c798:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c79a:	697b      	ldr	r3, [r7, #20]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3718      	adds	r7, #24
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	200015d0 	.word	0x200015d0
 800c7a8:	200015ac 	.word	0x200015ac
 800c7ac:	20001560 	.word	0x20001560
 800c7b0:	20001564 	.word	0x20001564
 800c7b4:	200015c0 	.word	0x200015c0
 800c7b8:	200015c8 	.word	0x200015c8
 800c7bc:	200015b0 	.word	0x200015b0
 800c7c0:	200014ac 	.word	0x200014ac
 800c7c4:	200014a8 	.word	0x200014a8
 800c7c8:	200015bc 	.word	0x200015bc
 800c7cc:	200015b8 	.word	0x200015b8

0800c7d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b087      	sub	sp, #28
 800c7d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c7d6:	4b29      	ldr	r3, [pc, #164]	; (800c87c <vTaskSwitchContext+0xac>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d003      	beq.n	800c7e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c7de:	4b28      	ldr	r3, [pc, #160]	; (800c880 <vTaskSwitchContext+0xb0>)
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c7e4:	e044      	b.n	800c870 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c7e6:	4b26      	ldr	r3, [pc, #152]	; (800c880 <vTaskSwitchContext+0xb0>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7ec:	4b25      	ldr	r3, [pc, #148]	; (800c884 <vTaskSwitchContext+0xb4>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	fab3 f383 	clz	r3, r3
 800c7f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c7fa:	7afb      	ldrb	r3, [r7, #11]
 800c7fc:	f1c3 031f 	rsb	r3, r3, #31
 800c800:	617b      	str	r3, [r7, #20]
 800c802:	4921      	ldr	r1, [pc, #132]	; (800c888 <vTaskSwitchContext+0xb8>)
 800c804:	697a      	ldr	r2, [r7, #20]
 800c806:	4613      	mov	r3, r2
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	4413      	add	r3, r2
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	440b      	add	r3, r1
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10a      	bne.n	800c82c <vTaskSwitchContext+0x5c>
	__asm volatile
 800c816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81a:	f383 8811 	msr	BASEPRI, r3
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f3bf 8f4f 	dsb	sy
 800c826:	607b      	str	r3, [r7, #4]
}
 800c828:	bf00      	nop
 800c82a:	e7fe      	b.n	800c82a <vTaskSwitchContext+0x5a>
 800c82c:	697a      	ldr	r2, [r7, #20]
 800c82e:	4613      	mov	r3, r2
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	4413      	add	r3, r2
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	4a14      	ldr	r2, [pc, #80]	; (800c888 <vTaskSwitchContext+0xb8>)
 800c838:	4413      	add	r3, r2
 800c83a:	613b      	str	r3, [r7, #16]
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	685a      	ldr	r2, [r3, #4]
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	605a      	str	r2, [r3, #4]
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	685a      	ldr	r2, [r3, #4]
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	3308      	adds	r3, #8
 800c84e:	429a      	cmp	r2, r3
 800c850:	d104      	bne.n	800c85c <vTaskSwitchContext+0x8c>
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	685a      	ldr	r2, [r3, #4]
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	605a      	str	r2, [r3, #4]
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	4a0a      	ldr	r2, [pc, #40]	; (800c88c <vTaskSwitchContext+0xbc>)
 800c864:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c866:	4b09      	ldr	r3, [pc, #36]	; (800c88c <vTaskSwitchContext+0xbc>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	334c      	adds	r3, #76	; 0x4c
 800c86c:	4a08      	ldr	r2, [pc, #32]	; (800c890 <vTaskSwitchContext+0xc0>)
 800c86e:	6013      	str	r3, [r2, #0]
}
 800c870:	bf00      	nop
 800c872:	371c      	adds	r7, #28
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr
 800c87c:	200015d0 	.word	0x200015d0
 800c880:	200015bc 	.word	0x200015bc
 800c884:	200015b0 	.word	0x200015b0
 800c888:	200014ac 	.word	0x200014ac
 800c88c:	200014a8 	.word	0x200014a8
 800c890:	20000130 	.word	0x20000130

0800c894 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d10a      	bne.n	800c8ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a8:	f383 8811 	msr	BASEPRI, r3
 800c8ac:	f3bf 8f6f 	isb	sy
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	60fb      	str	r3, [r7, #12]
}
 800c8b6:	bf00      	nop
 800c8b8:	e7fe      	b.n	800c8b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8ba:	4b07      	ldr	r3, [pc, #28]	; (800c8d8 <vTaskPlaceOnEventList+0x44>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	3318      	adds	r3, #24
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f7fe fdfd 	bl	800b4c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c8c8:	2101      	movs	r1, #1
 800c8ca:	6838      	ldr	r0, [r7, #0]
 800c8cc:	f000 fbba 	bl	800d044 <prvAddCurrentTaskToDelayedList>
}
 800c8d0:	bf00      	nop
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	200014a8 	.word	0x200014a8

0800c8dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	68db      	ldr	r3, [r3, #12]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d10a      	bne.n	800c908 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	60fb      	str	r3, [r7, #12]
}
 800c904:	bf00      	nop
 800c906:	e7fe      	b.n	800c906 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	3318      	adds	r3, #24
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fe fe11 	bl	800b534 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c912:	4b1d      	ldr	r3, [pc, #116]	; (800c988 <xTaskRemoveFromEventList+0xac>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d11c      	bne.n	800c954 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	3304      	adds	r3, #4
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fe fe08 	bl	800b534 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c928:	2201      	movs	r2, #1
 800c92a:	409a      	lsls	r2, r3
 800c92c:	4b17      	ldr	r3, [pc, #92]	; (800c98c <xTaskRemoveFromEventList+0xb0>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4313      	orrs	r3, r2
 800c932:	4a16      	ldr	r2, [pc, #88]	; (800c98c <xTaskRemoveFromEventList+0xb0>)
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c93a:	4613      	mov	r3, r2
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	4413      	add	r3, r2
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	4a13      	ldr	r2, [pc, #76]	; (800c990 <xTaskRemoveFromEventList+0xb4>)
 800c944:	441a      	add	r2, r3
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	3304      	adds	r3, #4
 800c94a:	4619      	mov	r1, r3
 800c94c:	4610      	mov	r0, r2
 800c94e:	f7fe fd94 	bl	800b47a <vListInsertEnd>
 800c952:	e005      	b.n	800c960 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	3318      	adds	r3, #24
 800c958:	4619      	mov	r1, r3
 800c95a:	480e      	ldr	r0, [pc, #56]	; (800c994 <xTaskRemoveFromEventList+0xb8>)
 800c95c:	f7fe fd8d 	bl	800b47a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c964:	4b0c      	ldr	r3, [pc, #48]	; (800c998 <xTaskRemoveFromEventList+0xbc>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d905      	bls.n	800c97a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c96e:	2301      	movs	r3, #1
 800c970:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c972:	4b0a      	ldr	r3, [pc, #40]	; (800c99c <xTaskRemoveFromEventList+0xc0>)
 800c974:	2201      	movs	r2, #1
 800c976:	601a      	str	r2, [r3, #0]
 800c978:	e001      	b.n	800c97e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c97a:	2300      	movs	r3, #0
 800c97c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c97e:	697b      	ldr	r3, [r7, #20]
}
 800c980:	4618      	mov	r0, r3
 800c982:	3718      	adds	r7, #24
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	200015d0 	.word	0x200015d0
 800c98c:	200015b0 	.word	0x200015b0
 800c990:	200014ac 	.word	0x200014ac
 800c994:	20001568 	.word	0x20001568
 800c998:	200014a8 	.word	0x200014a8
 800c99c:	200015bc 	.word	0x200015bc

0800c9a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b083      	sub	sp, #12
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c9a8:	4b06      	ldr	r3, [pc, #24]	; (800c9c4 <vTaskInternalSetTimeOutState+0x24>)
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c9b0:	4b05      	ldr	r3, [pc, #20]	; (800c9c8 <vTaskInternalSetTimeOutState+0x28>)
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	605a      	str	r2, [r3, #4]
}
 800c9b8:	bf00      	nop
 800c9ba:	370c      	adds	r7, #12
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr
 800c9c4:	200015c0 	.word	0x200015c0
 800c9c8:	200015ac 	.word	0x200015ac

0800c9cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b088      	sub	sp, #32
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10a      	bne.n	800c9f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e0:	f383 8811 	msr	BASEPRI, r3
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	613b      	str	r3, [r7, #16]
}
 800c9ee:	bf00      	nop
 800c9f0:	e7fe      	b.n	800c9f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d10a      	bne.n	800ca0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fc:	f383 8811 	msr	BASEPRI, r3
 800ca00:	f3bf 8f6f 	isb	sy
 800ca04:	f3bf 8f4f 	dsb	sy
 800ca08:	60fb      	str	r3, [r7, #12]
}
 800ca0a:	bf00      	nop
 800ca0c:	e7fe      	b.n	800ca0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ca0e:	f000 fca9 	bl	800d364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca12:	4b1d      	ldr	r3, [pc, #116]	; (800ca88 <xTaskCheckForTimeOut+0xbc>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	69ba      	ldr	r2, [r7, #24]
 800ca1e:	1ad3      	subs	r3, r2, r3
 800ca20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca2a:	d102      	bne.n	800ca32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	61fb      	str	r3, [r7, #28]
 800ca30:	e023      	b.n	800ca7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	4b15      	ldr	r3, [pc, #84]	; (800ca8c <xTaskCheckForTimeOut+0xc0>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d007      	beq.n	800ca4e <xTaskCheckForTimeOut+0x82>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	69ba      	ldr	r2, [r7, #24]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d302      	bcc.n	800ca4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	61fb      	str	r3, [r7, #28]
 800ca4c:	e015      	b.n	800ca7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	697a      	ldr	r2, [r7, #20]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d20b      	bcs.n	800ca70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	1ad2      	subs	r2, r2, r3
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f7ff ff9b 	bl	800c9a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	61fb      	str	r3, [r7, #28]
 800ca6e:	e004      	b.n	800ca7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	2200      	movs	r2, #0
 800ca74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ca76:	2301      	movs	r3, #1
 800ca78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ca7a:	f000 fca3 	bl	800d3c4 <vPortExitCritical>

	return xReturn;
 800ca7e:	69fb      	ldr	r3, [r7, #28]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3720      	adds	r7, #32
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	200015ac 	.word	0x200015ac
 800ca8c:	200015c0 	.word	0x200015c0

0800ca90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ca90:	b480      	push	{r7}
 800ca92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ca94:	4b03      	ldr	r3, [pc, #12]	; (800caa4 <vTaskMissedYield+0x14>)
 800ca96:	2201      	movs	r2, #1
 800ca98:	601a      	str	r2, [r3, #0]
}
 800ca9a:	bf00      	nop
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr
 800caa4:	200015bc 	.word	0x200015bc

0800caa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cab0:	f000 f852 	bl	800cb58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cab4:	4b06      	ldr	r3, [pc, #24]	; (800cad0 <prvIdleTask+0x28>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d9f9      	bls.n	800cab0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cabc:	4b05      	ldr	r3, [pc, #20]	; (800cad4 <prvIdleTask+0x2c>)
 800cabe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cac2:	601a      	str	r2, [r3, #0]
 800cac4:	f3bf 8f4f 	dsb	sy
 800cac8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cacc:	e7f0      	b.n	800cab0 <prvIdleTask+0x8>
 800cace:	bf00      	nop
 800cad0:	200014ac 	.word	0x200014ac
 800cad4:	e000ed04 	.word	0xe000ed04

0800cad8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cade:	2300      	movs	r3, #0
 800cae0:	607b      	str	r3, [r7, #4]
 800cae2:	e00c      	b.n	800cafe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	4613      	mov	r3, r2
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	4413      	add	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4a12      	ldr	r2, [pc, #72]	; (800cb38 <prvInitialiseTaskLists+0x60>)
 800caf0:	4413      	add	r3, r2
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fe fc94 	bl	800b420 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	3301      	adds	r3, #1
 800cafc:	607b      	str	r3, [r7, #4]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2b06      	cmp	r3, #6
 800cb02:	d9ef      	bls.n	800cae4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb04:	480d      	ldr	r0, [pc, #52]	; (800cb3c <prvInitialiseTaskLists+0x64>)
 800cb06:	f7fe fc8b 	bl	800b420 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb0a:	480d      	ldr	r0, [pc, #52]	; (800cb40 <prvInitialiseTaskLists+0x68>)
 800cb0c:	f7fe fc88 	bl	800b420 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb10:	480c      	ldr	r0, [pc, #48]	; (800cb44 <prvInitialiseTaskLists+0x6c>)
 800cb12:	f7fe fc85 	bl	800b420 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb16:	480c      	ldr	r0, [pc, #48]	; (800cb48 <prvInitialiseTaskLists+0x70>)
 800cb18:	f7fe fc82 	bl	800b420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb1c:	480b      	ldr	r0, [pc, #44]	; (800cb4c <prvInitialiseTaskLists+0x74>)
 800cb1e:	f7fe fc7f 	bl	800b420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb22:	4b0b      	ldr	r3, [pc, #44]	; (800cb50 <prvInitialiseTaskLists+0x78>)
 800cb24:	4a05      	ldr	r2, [pc, #20]	; (800cb3c <prvInitialiseTaskLists+0x64>)
 800cb26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb28:	4b0a      	ldr	r3, [pc, #40]	; (800cb54 <prvInitialiseTaskLists+0x7c>)
 800cb2a:	4a05      	ldr	r2, [pc, #20]	; (800cb40 <prvInitialiseTaskLists+0x68>)
 800cb2c:	601a      	str	r2, [r3, #0]
}
 800cb2e:	bf00      	nop
 800cb30:	3708      	adds	r7, #8
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	200014ac 	.word	0x200014ac
 800cb3c:	20001538 	.word	0x20001538
 800cb40:	2000154c 	.word	0x2000154c
 800cb44:	20001568 	.word	0x20001568
 800cb48:	2000157c 	.word	0x2000157c
 800cb4c:	20001594 	.word	0x20001594
 800cb50:	20001560 	.word	0x20001560
 800cb54:	20001564 	.word	0x20001564

0800cb58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb5e:	e019      	b.n	800cb94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cb60:	f000 fc00 	bl	800d364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb64:	4b10      	ldr	r3, [pc, #64]	; (800cba8 <prvCheckTasksWaitingTermination+0x50>)
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	3304      	adds	r3, #4
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7fe fcdf 	bl	800b534 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cb76:	4b0d      	ldr	r3, [pc, #52]	; (800cbac <prvCheckTasksWaitingTermination+0x54>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	4a0b      	ldr	r2, [pc, #44]	; (800cbac <prvCheckTasksWaitingTermination+0x54>)
 800cb7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cb80:	4b0b      	ldr	r3, [pc, #44]	; (800cbb0 <prvCheckTasksWaitingTermination+0x58>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3b01      	subs	r3, #1
 800cb86:	4a0a      	ldr	r2, [pc, #40]	; (800cbb0 <prvCheckTasksWaitingTermination+0x58>)
 800cb88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cb8a:	f000 fc1b 	bl	800d3c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 f848 	bl	800cc24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb94:	4b06      	ldr	r3, [pc, #24]	; (800cbb0 <prvCheckTasksWaitingTermination+0x58>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1e1      	bne.n	800cb60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cb9c:	bf00      	nop
 800cb9e:	bf00      	nop
 800cba0:	3708      	adds	r7, #8
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	2000157c 	.word	0x2000157c
 800cbac:	200015a8 	.word	0x200015a8
 800cbb0:	20001590 	.word	0x20001590

0800cbb4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800cbc0:	e005      	b.n	800cbce <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	607b      	str	r3, [r7, #4]
			ulCount++;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	2ba5      	cmp	r3, #165	; 0xa5
 800cbd4:	d0f5      	beq.n	800cbc2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	089b      	lsrs	r3, r3, #2
 800cbda:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	b29b      	uxth	r3, r3
	}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3714      	adds	r7, #20
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b086      	sub	sp, #24
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d102      	bne.n	800cc00 <uxTaskGetStackHighWaterMark+0x14>
 800cbfa:	4b09      	ldr	r3, [pc, #36]	; (800cc20 <uxTaskGetStackHighWaterMark+0x34>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	e000      	b.n	800cc02 <uxTaskGetStackHighWaterMark+0x16>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc08:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800cc0a:	6938      	ldr	r0, [r7, #16]
 800cc0c:	f7ff ffd2 	bl	800cbb4 <prvTaskCheckFreeStackSpace>
 800cc10:	4603      	mov	r3, r0
 800cc12:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800cc14:	68fb      	ldr	r3, [r7, #12]
	}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3718      	adds	r7, #24
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	200014a8 	.word	0x200014a8

0800cc24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	334c      	adds	r3, #76	; 0x4c
 800cc30:	4618      	mov	r0, r3
 800cc32:	f001 fe9f 	bl	800e974 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d108      	bne.n	800cc52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc44:	4618      	mov	r0, r3
 800cc46:	f000 fd7b 	bl	800d740 <vPortFree>
				vPortFree( pxTCB );
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 fd78 	bl	800d740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cc50:	e018      	b.n	800cc84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d103      	bne.n	800cc64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 fd6f 	bl	800d740 <vPortFree>
	}
 800cc62:	e00f      	b.n	800cc84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800cc6a:	2b02      	cmp	r3, #2
 800cc6c:	d00a      	beq.n	800cc84 <prvDeleteTCB+0x60>
	__asm volatile
 800cc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc72:	f383 8811 	msr	BASEPRI, r3
 800cc76:	f3bf 8f6f 	isb	sy
 800cc7a:	f3bf 8f4f 	dsb	sy
 800cc7e:	60fb      	str	r3, [r7, #12]
}
 800cc80:	bf00      	nop
 800cc82:	e7fe      	b.n	800cc82 <prvDeleteTCB+0x5e>
	}
 800cc84:	bf00      	nop
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc92:	4b0c      	ldr	r3, [pc, #48]	; (800ccc4 <prvResetNextTaskUnblockTime+0x38>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d104      	bne.n	800cca6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc9c:	4b0a      	ldr	r3, [pc, #40]	; (800ccc8 <prvResetNextTaskUnblockTime+0x3c>)
 800cc9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cca2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cca4:	e008      	b.n	800ccb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cca6:	4b07      	ldr	r3, [pc, #28]	; (800ccc4 <prvResetNextTaskUnblockTime+0x38>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	4a04      	ldr	r2, [pc, #16]	; (800ccc8 <prvResetNextTaskUnblockTime+0x3c>)
 800ccb6:	6013      	str	r3, [r2, #0]
}
 800ccb8:	bf00      	nop
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr
 800ccc4:	20001560 	.word	0x20001560
 800ccc8:	200015c8 	.word	0x200015c8

0800cccc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ccd2:	4b0b      	ldr	r3, [pc, #44]	; (800cd00 <xTaskGetSchedulerState+0x34>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d102      	bne.n	800cce0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	607b      	str	r3, [r7, #4]
 800ccde:	e008      	b.n	800ccf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cce0:	4b08      	ldr	r3, [pc, #32]	; (800cd04 <xTaskGetSchedulerState+0x38>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d102      	bne.n	800ccee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cce8:	2302      	movs	r3, #2
 800ccea:	607b      	str	r3, [r7, #4]
 800ccec:	e001      	b.n	800ccf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ccf2:	687b      	ldr	r3, [r7, #4]
	}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	200015b4 	.word	0x200015b4
 800cd04:	200015d0 	.word	0x200015d0

0800cd08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cd14:	2300      	movs	r3, #0
 800cd16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d05e      	beq.n	800cddc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd22:	4b31      	ldr	r3, [pc, #196]	; (800cde8 <xTaskPriorityInherit+0xe0>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d24e      	bcs.n	800cdca <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	699b      	ldr	r3, [r3, #24]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	db06      	blt.n	800cd42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd34:	4b2c      	ldr	r3, [pc, #176]	; (800cde8 <xTaskPriorityInherit+0xe0>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3a:	f1c3 0207 	rsb	r2, r3, #7
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	6959      	ldr	r1, [r3, #20]
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	4413      	add	r3, r2
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	4a26      	ldr	r2, [pc, #152]	; (800cdec <xTaskPriorityInherit+0xe4>)
 800cd54:	4413      	add	r3, r2
 800cd56:	4299      	cmp	r1, r3
 800cd58:	d12f      	bne.n	800cdba <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	3304      	adds	r3, #4
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7fe fbe8 	bl	800b534 <uxListRemove>
 800cd64:	4603      	mov	r3, r0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d10a      	bne.n	800cd80 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6e:	2201      	movs	r2, #1
 800cd70:	fa02 f303 	lsl.w	r3, r2, r3
 800cd74:	43da      	mvns	r2, r3
 800cd76:	4b1e      	ldr	r3, [pc, #120]	; (800cdf0 <xTaskPriorityInherit+0xe8>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4013      	ands	r3, r2
 800cd7c:	4a1c      	ldr	r2, [pc, #112]	; (800cdf0 <xTaskPriorityInherit+0xe8>)
 800cd7e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd80:	4b19      	ldr	r3, [pc, #100]	; (800cde8 <xTaskPriorityInherit+0xe0>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd8e:	2201      	movs	r2, #1
 800cd90:	409a      	lsls	r2, r3
 800cd92:	4b17      	ldr	r3, [pc, #92]	; (800cdf0 <xTaskPriorityInherit+0xe8>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4313      	orrs	r3, r2
 800cd98:	4a15      	ldr	r2, [pc, #84]	; (800cdf0 <xTaskPriorityInherit+0xe8>)
 800cd9a:	6013      	str	r3, [r2, #0]
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda0:	4613      	mov	r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	4413      	add	r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4a10      	ldr	r2, [pc, #64]	; (800cdec <xTaskPriorityInherit+0xe4>)
 800cdaa:	441a      	add	r2, r3
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	3304      	adds	r3, #4
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	4610      	mov	r0, r2
 800cdb4:	f7fe fb61 	bl	800b47a <vListInsertEnd>
 800cdb8:	e004      	b.n	800cdc4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cdba:	4b0b      	ldr	r3, [pc, #44]	; (800cde8 <xTaskPriorityInherit+0xe0>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	60fb      	str	r3, [r7, #12]
 800cdc8:	e008      	b.n	800cddc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdce:	4b06      	ldr	r3, [pc, #24]	; (800cde8 <xTaskPriorityInherit+0xe0>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d201      	bcs.n	800cddc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cddc:	68fb      	ldr	r3, [r7, #12]
	}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	200014a8 	.word	0x200014a8
 800cdec:	200014ac 	.word	0x200014ac
 800cdf0:	200015b0 	.word	0x200015b0

0800cdf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b086      	sub	sp, #24
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ce00:	2300      	movs	r3, #0
 800ce02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d06e      	beq.n	800cee8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ce0a:	4b3a      	ldr	r3, [pc, #232]	; (800cef4 <xTaskPriorityDisinherit+0x100>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	693a      	ldr	r2, [r7, #16]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d00a      	beq.n	800ce2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ce14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce18:	f383 8811 	msr	BASEPRI, r3
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	60fb      	str	r3, [r7, #12]
}
 800ce26:	bf00      	nop
 800ce28:	e7fe      	b.n	800ce28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d10a      	bne.n	800ce48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ce32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce36:	f383 8811 	msr	BASEPRI, r3
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	60bb      	str	r3, [r7, #8]
}
 800ce44:	bf00      	nop
 800ce46:	e7fe      	b.n	800ce46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce4c:	1e5a      	subs	r2, r3, #1
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d044      	beq.n	800cee8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d140      	bne.n	800cee8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	3304      	adds	r3, #4
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fe fb62 	bl	800b534 <uxListRemove>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d115      	bne.n	800cea2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce7a:	491f      	ldr	r1, [pc, #124]	; (800cef8 <xTaskPriorityDisinherit+0x104>)
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	4413      	add	r3, r2
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	440b      	add	r3, r1
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d10a      	bne.n	800cea2 <xTaskPriorityDisinherit+0xae>
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce90:	2201      	movs	r2, #1
 800ce92:	fa02 f303 	lsl.w	r3, r2, r3
 800ce96:	43da      	mvns	r2, r3
 800ce98:	4b18      	ldr	r3, [pc, #96]	; (800cefc <xTaskPriorityDisinherit+0x108>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4013      	ands	r3, r2
 800ce9e:	4a17      	ldr	r2, [pc, #92]	; (800cefc <xTaskPriorityDisinherit+0x108>)
 800cea0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceae:	f1c3 0207 	rsb	r2, r3, #7
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceba:	2201      	movs	r2, #1
 800cebc:	409a      	lsls	r2, r3
 800cebe:	4b0f      	ldr	r3, [pc, #60]	; (800cefc <xTaskPriorityDisinherit+0x108>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4313      	orrs	r3, r2
 800cec4:	4a0d      	ldr	r2, [pc, #52]	; (800cefc <xTaskPriorityDisinherit+0x108>)
 800cec6:	6013      	str	r3, [r2, #0]
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cecc:	4613      	mov	r3, r2
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	4413      	add	r3, r2
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	4a08      	ldr	r2, [pc, #32]	; (800cef8 <xTaskPriorityDisinherit+0x104>)
 800ced6:	441a      	add	r2, r3
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	3304      	adds	r3, #4
 800cedc:	4619      	mov	r1, r3
 800cede:	4610      	mov	r0, r2
 800cee0:	f7fe facb 	bl	800b47a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cee4:	2301      	movs	r3, #1
 800cee6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cee8:	697b      	ldr	r3, [r7, #20]
	}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3718      	adds	r7, #24
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	200014a8 	.word	0x200014a8
 800cef8:	200014ac 	.word	0x200014ac
 800cefc:	200015b0 	.word	0x200015b0

0800cf00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b088      	sub	sp, #32
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d077      	beq.n	800d008 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10a      	bne.n	800cf36 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	60fb      	str	r3, [r7, #12]
}
 800cf32:	bf00      	nop
 800cf34:	e7fe      	b.n	800cf34 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf3a:	683a      	ldr	r2, [r7, #0]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d902      	bls.n	800cf46 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	61fb      	str	r3, [r7, #28]
 800cf44:	e002      	b.n	800cf4c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf4a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf50:	69fa      	ldr	r2, [r7, #28]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d058      	beq.n	800d008 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf5a:	697a      	ldr	r2, [r7, #20]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d153      	bne.n	800d008 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cf60:	4b2b      	ldr	r3, [pc, #172]	; (800d010 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	69ba      	ldr	r2, [r7, #24]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d10a      	bne.n	800cf80 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6e:	f383 8811 	msr	BASEPRI, r3
 800cf72:	f3bf 8f6f 	isb	sy
 800cf76:	f3bf 8f4f 	dsb	sy
 800cf7a:	60bb      	str	r3, [r7, #8]
}
 800cf7c:	bf00      	nop
 800cf7e:	e7fe      	b.n	800cf7e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	69fa      	ldr	r2, [r7, #28]
 800cf8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	699b      	ldr	r3, [r3, #24]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	db04      	blt.n	800cf9e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	f1c3 0207 	rsb	r2, r3, #7
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	6959      	ldr	r1, [r3, #20]
 800cfa2:	693a      	ldr	r2, [r7, #16]
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4413      	add	r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	4a19      	ldr	r2, [pc, #100]	; (800d014 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cfae:	4413      	add	r3, r2
 800cfb0:	4299      	cmp	r1, r3
 800cfb2:	d129      	bne.n	800d008 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	3304      	adds	r3, #4
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7fe fabb 	bl	800b534 <uxListRemove>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d10a      	bne.n	800cfda <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc8:	2201      	movs	r2, #1
 800cfca:	fa02 f303 	lsl.w	r3, r2, r3
 800cfce:	43da      	mvns	r2, r3
 800cfd0:	4b11      	ldr	r3, [pc, #68]	; (800d018 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4013      	ands	r3, r2
 800cfd6:	4a10      	ldr	r2, [pc, #64]	; (800d018 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cfd8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfde:	2201      	movs	r2, #1
 800cfe0:	409a      	lsls	r2, r3
 800cfe2:	4b0d      	ldr	r3, [pc, #52]	; (800d018 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	4a0b      	ldr	r2, [pc, #44]	; (800d018 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cfea:	6013      	str	r3, [r2, #0]
 800cfec:	69bb      	ldr	r3, [r7, #24]
 800cfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff0:	4613      	mov	r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4413      	add	r3, r2
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	4a06      	ldr	r2, [pc, #24]	; (800d014 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cffa:	441a      	add	r2, r3
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	3304      	adds	r3, #4
 800d000:	4619      	mov	r1, r3
 800d002:	4610      	mov	r0, r2
 800d004:	f7fe fa39 	bl	800b47a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d008:	bf00      	nop
 800d00a:	3720      	adds	r7, #32
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	200014a8 	.word	0x200014a8
 800d014:	200014ac 	.word	0x200014ac
 800d018:	200015b0 	.word	0x200015b0

0800d01c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d01c:	b480      	push	{r7}
 800d01e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d020:	4b07      	ldr	r3, [pc, #28]	; (800d040 <pvTaskIncrementMutexHeldCount+0x24>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d004      	beq.n	800d032 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d028:	4b05      	ldr	r3, [pc, #20]	; (800d040 <pvTaskIncrementMutexHeldCount+0x24>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d02e:	3201      	adds	r2, #1
 800d030:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d032:	4b03      	ldr	r3, [pc, #12]	; (800d040 <pvTaskIncrementMutexHeldCount+0x24>)
 800d034:	681b      	ldr	r3, [r3, #0]
	}
 800d036:	4618      	mov	r0, r3
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr
 800d040:	200014a8 	.word	0x200014a8

0800d044 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d04e:	4b29      	ldr	r3, [pc, #164]	; (800d0f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d054:	4b28      	ldr	r3, [pc, #160]	; (800d0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	3304      	adds	r3, #4
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7fe fa6a 	bl	800b534 <uxListRemove>
 800d060:	4603      	mov	r3, r0
 800d062:	2b00      	cmp	r3, #0
 800d064:	d10b      	bne.n	800d07e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d066:	4b24      	ldr	r3, [pc, #144]	; (800d0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d06c:	2201      	movs	r2, #1
 800d06e:	fa02 f303 	lsl.w	r3, r2, r3
 800d072:	43da      	mvns	r2, r3
 800d074:	4b21      	ldr	r3, [pc, #132]	; (800d0fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4013      	ands	r3, r2
 800d07a:	4a20      	ldr	r2, [pc, #128]	; (800d0fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800d07c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d084:	d10a      	bne.n	800d09c <prvAddCurrentTaskToDelayedList+0x58>
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d007      	beq.n	800d09c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d08c:	4b1a      	ldr	r3, [pc, #104]	; (800d0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	3304      	adds	r3, #4
 800d092:	4619      	mov	r1, r3
 800d094:	481a      	ldr	r0, [pc, #104]	; (800d100 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d096:	f7fe f9f0 	bl	800b47a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d09a:	e026      	b.n	800d0ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d09c:	68fa      	ldr	r2, [r7, #12]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d0a4:	4b14      	ldr	r3, [pc, #80]	; (800d0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d209      	bcs.n	800d0c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0b4:	4b13      	ldr	r3, [pc, #76]	; (800d104 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	4b0f      	ldr	r3, [pc, #60]	; (800d0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	3304      	adds	r3, #4
 800d0be:	4619      	mov	r1, r3
 800d0c0:	4610      	mov	r0, r2
 800d0c2:	f7fe f9fe 	bl	800b4c2 <vListInsert>
}
 800d0c6:	e010      	b.n	800d0ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0c8:	4b0f      	ldr	r3, [pc, #60]	; (800d108 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	4b0a      	ldr	r3, [pc, #40]	; (800d0f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	3304      	adds	r3, #4
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	4610      	mov	r0, r2
 800d0d6:	f7fe f9f4 	bl	800b4c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d0da:	4b0c      	ldr	r3, [pc, #48]	; (800d10c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	68ba      	ldr	r2, [r7, #8]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d202      	bcs.n	800d0ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d0e4:	4a09      	ldr	r2, [pc, #36]	; (800d10c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	6013      	str	r3, [r2, #0]
}
 800d0ea:	bf00      	nop
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	200015ac 	.word	0x200015ac
 800d0f8:	200014a8 	.word	0x200014a8
 800d0fc:	200015b0 	.word	0x200015b0
 800d100:	20001594 	.word	0x20001594
 800d104:	20001564 	.word	0x20001564
 800d108:	20001560 	.word	0x20001560
 800d10c:	200015c8 	.word	0x200015c8

0800d110 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d110:	b480      	push	{r7}
 800d112:	b085      	sub	sp, #20
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	3b04      	subs	r3, #4
 800d120:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	3b04      	subs	r3, #4
 800d12e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	f023 0201 	bic.w	r2, r3, #1
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	3b04      	subs	r3, #4
 800d13e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d140:	4a0c      	ldr	r2, [pc, #48]	; (800d174 <pxPortInitialiseStack+0x64>)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	3b14      	subs	r3, #20
 800d14a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	3b04      	subs	r3, #4
 800d156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f06f 0202 	mvn.w	r2, #2
 800d15e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	3b20      	subs	r3, #32
 800d164:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d166:	68fb      	ldr	r3, [r7, #12]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3714      	adds	r7, #20
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr
 800d174:	0800d179 	.word	0x0800d179

0800d178 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d182:	4b12      	ldr	r3, [pc, #72]	; (800d1cc <prvTaskExitError+0x54>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d18a:	d00a      	beq.n	800d1a2 <prvTaskExitError+0x2a>
	__asm volatile
 800d18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d190:	f383 8811 	msr	BASEPRI, r3
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	60fb      	str	r3, [r7, #12]
}
 800d19e:	bf00      	nop
 800d1a0:	e7fe      	b.n	800d1a0 <prvTaskExitError+0x28>
	__asm volatile
 800d1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a6:	f383 8811 	msr	BASEPRI, r3
 800d1aa:	f3bf 8f6f 	isb	sy
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	60bb      	str	r3, [r7, #8]
}
 800d1b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d1b6:	bf00      	nop
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d0fc      	beq.n	800d1b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d1be:	bf00      	nop
 800d1c0:	bf00      	nop
 800d1c2:	3714      	adds	r7, #20
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr
 800d1cc:	200000d4 	.word	0x200000d4

0800d1d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d1d0:	4b07      	ldr	r3, [pc, #28]	; (800d1f0 <pxCurrentTCBConst2>)
 800d1d2:	6819      	ldr	r1, [r3, #0]
 800d1d4:	6808      	ldr	r0, [r1, #0]
 800d1d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1da:	f380 8809 	msr	PSP, r0
 800d1de:	f3bf 8f6f 	isb	sy
 800d1e2:	f04f 0000 	mov.w	r0, #0
 800d1e6:	f380 8811 	msr	BASEPRI, r0
 800d1ea:	4770      	bx	lr
 800d1ec:	f3af 8000 	nop.w

0800d1f0 <pxCurrentTCBConst2>:
 800d1f0:	200014a8 	.word	0x200014a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d1f4:	bf00      	nop
 800d1f6:	bf00      	nop

0800d1f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d1f8:	4808      	ldr	r0, [pc, #32]	; (800d21c <prvPortStartFirstTask+0x24>)
 800d1fa:	6800      	ldr	r0, [r0, #0]
 800d1fc:	6800      	ldr	r0, [r0, #0]
 800d1fe:	f380 8808 	msr	MSP, r0
 800d202:	f04f 0000 	mov.w	r0, #0
 800d206:	f380 8814 	msr	CONTROL, r0
 800d20a:	b662      	cpsie	i
 800d20c:	b661      	cpsie	f
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	f3bf 8f6f 	isb	sy
 800d216:	df00      	svc	0
 800d218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d21a:	bf00      	nop
 800d21c:	e000ed08 	.word	0xe000ed08

0800d220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d226:	4b46      	ldr	r3, [pc, #280]	; (800d340 <xPortStartScheduler+0x120>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a46      	ldr	r2, [pc, #280]	; (800d344 <xPortStartScheduler+0x124>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d10a      	bne.n	800d246 <xPortStartScheduler+0x26>
	__asm volatile
 800d230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d234:	f383 8811 	msr	BASEPRI, r3
 800d238:	f3bf 8f6f 	isb	sy
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	613b      	str	r3, [r7, #16]
}
 800d242:	bf00      	nop
 800d244:	e7fe      	b.n	800d244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d246:	4b3e      	ldr	r3, [pc, #248]	; (800d340 <xPortStartScheduler+0x120>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4a3f      	ldr	r2, [pc, #252]	; (800d348 <xPortStartScheduler+0x128>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d10a      	bne.n	800d266 <xPortStartScheduler+0x46>
	__asm volatile
 800d250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d254:	f383 8811 	msr	BASEPRI, r3
 800d258:	f3bf 8f6f 	isb	sy
 800d25c:	f3bf 8f4f 	dsb	sy
 800d260:	60fb      	str	r3, [r7, #12]
}
 800d262:	bf00      	nop
 800d264:	e7fe      	b.n	800d264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d266:	4b39      	ldr	r3, [pc, #228]	; (800d34c <xPortStartScheduler+0x12c>)
 800d268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	22ff      	movs	r2, #255	; 0xff
 800d276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d280:	78fb      	ldrb	r3, [r7, #3]
 800d282:	b2db      	uxtb	r3, r3
 800d284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d288:	b2da      	uxtb	r2, r3
 800d28a:	4b31      	ldr	r3, [pc, #196]	; (800d350 <xPortStartScheduler+0x130>)
 800d28c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d28e:	4b31      	ldr	r3, [pc, #196]	; (800d354 <xPortStartScheduler+0x134>)
 800d290:	2207      	movs	r2, #7
 800d292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d294:	e009      	b.n	800d2aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d296:	4b2f      	ldr	r3, [pc, #188]	; (800d354 <xPortStartScheduler+0x134>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	3b01      	subs	r3, #1
 800d29c:	4a2d      	ldr	r2, [pc, #180]	; (800d354 <xPortStartScheduler+0x134>)
 800d29e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d2a0:	78fb      	ldrb	r3, [r7, #3]
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	005b      	lsls	r3, r3, #1
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d2aa:	78fb      	ldrb	r3, [r7, #3]
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2b2:	2b80      	cmp	r3, #128	; 0x80
 800d2b4:	d0ef      	beq.n	800d296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d2b6:	4b27      	ldr	r3, [pc, #156]	; (800d354 <xPortStartScheduler+0x134>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f1c3 0307 	rsb	r3, r3, #7
 800d2be:	2b04      	cmp	r3, #4
 800d2c0:	d00a      	beq.n	800d2d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c6:	f383 8811 	msr	BASEPRI, r3
 800d2ca:	f3bf 8f6f 	isb	sy
 800d2ce:	f3bf 8f4f 	dsb	sy
 800d2d2:	60bb      	str	r3, [r7, #8]
}
 800d2d4:	bf00      	nop
 800d2d6:	e7fe      	b.n	800d2d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d2d8:	4b1e      	ldr	r3, [pc, #120]	; (800d354 <xPortStartScheduler+0x134>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	021b      	lsls	r3, r3, #8
 800d2de:	4a1d      	ldr	r2, [pc, #116]	; (800d354 <xPortStartScheduler+0x134>)
 800d2e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d2e2:	4b1c      	ldr	r3, [pc, #112]	; (800d354 <xPortStartScheduler+0x134>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d2ea:	4a1a      	ldr	r2, [pc, #104]	; (800d354 <xPortStartScheduler+0x134>)
 800d2ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	b2da      	uxtb	r2, r3
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d2f6:	4b18      	ldr	r3, [pc, #96]	; (800d358 <xPortStartScheduler+0x138>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a17      	ldr	r2, [pc, #92]	; (800d358 <xPortStartScheduler+0x138>)
 800d2fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d302:	4b15      	ldr	r3, [pc, #84]	; (800d358 <xPortStartScheduler+0x138>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4a14      	ldr	r2, [pc, #80]	; (800d358 <xPortStartScheduler+0x138>)
 800d308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d30c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d30e:	f000 f8dd 	bl	800d4cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d312:	4b12      	ldr	r3, [pc, #72]	; (800d35c <xPortStartScheduler+0x13c>)
 800d314:	2200      	movs	r2, #0
 800d316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d318:	f000 f8fc 	bl	800d514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d31c:	4b10      	ldr	r3, [pc, #64]	; (800d360 <xPortStartScheduler+0x140>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4a0f      	ldr	r2, [pc, #60]	; (800d360 <xPortStartScheduler+0x140>)
 800d322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d328:	f7ff ff66 	bl	800d1f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d32c:	f7ff fa50 	bl	800c7d0 <vTaskSwitchContext>
	prvTaskExitError();
 800d330:	f7ff ff22 	bl	800d178 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d334:	2300      	movs	r3, #0
}
 800d336:	4618      	mov	r0, r3
 800d338:	3718      	adds	r7, #24
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	e000ed00 	.word	0xe000ed00
 800d344:	410fc271 	.word	0x410fc271
 800d348:	410fc270 	.word	0x410fc270
 800d34c:	e000e400 	.word	0xe000e400
 800d350:	200015d4 	.word	0x200015d4
 800d354:	200015d8 	.word	0x200015d8
 800d358:	e000ed20 	.word	0xe000ed20
 800d35c:	200000d4 	.word	0x200000d4
 800d360:	e000ef34 	.word	0xe000ef34

0800d364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
	__asm volatile
 800d36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36e:	f383 8811 	msr	BASEPRI, r3
 800d372:	f3bf 8f6f 	isb	sy
 800d376:	f3bf 8f4f 	dsb	sy
 800d37a:	607b      	str	r3, [r7, #4]
}
 800d37c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d37e:	4b0f      	ldr	r3, [pc, #60]	; (800d3bc <vPortEnterCritical+0x58>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	3301      	adds	r3, #1
 800d384:	4a0d      	ldr	r2, [pc, #52]	; (800d3bc <vPortEnterCritical+0x58>)
 800d386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d388:	4b0c      	ldr	r3, [pc, #48]	; (800d3bc <vPortEnterCritical+0x58>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d10f      	bne.n	800d3b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d390:	4b0b      	ldr	r3, [pc, #44]	; (800d3c0 <vPortEnterCritical+0x5c>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	b2db      	uxtb	r3, r3
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00a      	beq.n	800d3b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39e:	f383 8811 	msr	BASEPRI, r3
 800d3a2:	f3bf 8f6f 	isb	sy
 800d3a6:	f3bf 8f4f 	dsb	sy
 800d3aa:	603b      	str	r3, [r7, #0]
}
 800d3ac:	bf00      	nop
 800d3ae:	e7fe      	b.n	800d3ae <vPortEnterCritical+0x4a>
	}
}
 800d3b0:	bf00      	nop
 800d3b2:	370c      	adds	r7, #12
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr
 800d3bc:	200000d4 	.word	0x200000d4
 800d3c0:	e000ed04 	.word	0xe000ed04

0800d3c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d3ca:	4b12      	ldr	r3, [pc, #72]	; (800d414 <vPortExitCritical+0x50>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10a      	bne.n	800d3e8 <vPortExitCritical+0x24>
	__asm volatile
 800d3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d6:	f383 8811 	msr	BASEPRI, r3
 800d3da:	f3bf 8f6f 	isb	sy
 800d3de:	f3bf 8f4f 	dsb	sy
 800d3e2:	607b      	str	r3, [r7, #4]
}
 800d3e4:	bf00      	nop
 800d3e6:	e7fe      	b.n	800d3e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d3e8:	4b0a      	ldr	r3, [pc, #40]	; (800d414 <vPortExitCritical+0x50>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	3b01      	subs	r3, #1
 800d3ee:	4a09      	ldr	r2, [pc, #36]	; (800d414 <vPortExitCritical+0x50>)
 800d3f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d3f2:	4b08      	ldr	r3, [pc, #32]	; (800d414 <vPortExitCritical+0x50>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d105      	bne.n	800d406 <vPortExitCritical+0x42>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	f383 8811 	msr	BASEPRI, r3
}
 800d404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d406:	bf00      	nop
 800d408:	370c      	adds	r7, #12
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	200000d4 	.word	0x200000d4
	...

0800d420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d420:	f3ef 8009 	mrs	r0, PSP
 800d424:	f3bf 8f6f 	isb	sy
 800d428:	4b15      	ldr	r3, [pc, #84]	; (800d480 <pxCurrentTCBConst>)
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	f01e 0f10 	tst.w	lr, #16
 800d430:	bf08      	it	eq
 800d432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d43a:	6010      	str	r0, [r2, #0]
 800d43c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d440:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d444:	f380 8811 	msr	BASEPRI, r0
 800d448:	f3bf 8f4f 	dsb	sy
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f7ff f9be 	bl	800c7d0 <vTaskSwitchContext>
 800d454:	f04f 0000 	mov.w	r0, #0
 800d458:	f380 8811 	msr	BASEPRI, r0
 800d45c:	bc09      	pop	{r0, r3}
 800d45e:	6819      	ldr	r1, [r3, #0]
 800d460:	6808      	ldr	r0, [r1, #0]
 800d462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d466:	f01e 0f10 	tst.w	lr, #16
 800d46a:	bf08      	it	eq
 800d46c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d470:	f380 8809 	msr	PSP, r0
 800d474:	f3bf 8f6f 	isb	sy
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop
 800d47c:	f3af 8000 	nop.w

0800d480 <pxCurrentTCBConst>:
 800d480:	200014a8 	.word	0x200014a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d484:	bf00      	nop
 800d486:	bf00      	nop

0800d488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
	__asm volatile
 800d48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	607b      	str	r3, [r7, #4]
}
 800d4a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d4a2:	f7ff f8dd 	bl	800c660 <xTaskIncrementTick>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d003      	beq.n	800d4b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d4ac:	4b06      	ldr	r3, [pc, #24]	; (800d4c8 <SysTick_Handler+0x40>)
 800d4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4b2:	601a      	str	r2, [r3, #0]
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	f383 8811 	msr	BASEPRI, r3
}
 800d4be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d4c0:	bf00      	nop
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	e000ed04 	.word	0xe000ed04

0800d4cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d4d0:	4b0b      	ldr	r3, [pc, #44]	; (800d500 <vPortSetupTimerInterrupt+0x34>)
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d4d6:	4b0b      	ldr	r3, [pc, #44]	; (800d504 <vPortSetupTimerInterrupt+0x38>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d4dc:	4b0a      	ldr	r3, [pc, #40]	; (800d508 <vPortSetupTimerInterrupt+0x3c>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a0a      	ldr	r2, [pc, #40]	; (800d50c <vPortSetupTimerInterrupt+0x40>)
 800d4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d4e6:	099b      	lsrs	r3, r3, #6
 800d4e8:	4a09      	ldr	r2, [pc, #36]	; (800d510 <vPortSetupTimerInterrupt+0x44>)
 800d4ea:	3b01      	subs	r3, #1
 800d4ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d4ee:	4b04      	ldr	r3, [pc, #16]	; (800d500 <vPortSetupTimerInterrupt+0x34>)
 800d4f0:	2207      	movs	r2, #7
 800d4f2:	601a      	str	r2, [r3, #0]
}
 800d4f4:	bf00      	nop
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	e000e010 	.word	0xe000e010
 800d504:	e000e018 	.word	0xe000e018
 800d508:	200000c8 	.word	0x200000c8
 800d50c:	10624dd3 	.word	0x10624dd3
 800d510:	e000e014 	.word	0xe000e014

0800d514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d524 <vPortEnableVFP+0x10>
 800d518:	6801      	ldr	r1, [r0, #0]
 800d51a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d51e:	6001      	str	r1, [r0, #0]
 800d520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d522:	bf00      	nop
 800d524:	e000ed88 	.word	0xe000ed88

0800d528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d52e:	f3ef 8305 	mrs	r3, IPSR
 800d532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2b0f      	cmp	r3, #15
 800d538:	d914      	bls.n	800d564 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d53a:	4a17      	ldr	r2, [pc, #92]	; (800d598 <vPortValidateInterruptPriority+0x70>)
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	4413      	add	r3, r2
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d544:	4b15      	ldr	r3, [pc, #84]	; (800d59c <vPortValidateInterruptPriority+0x74>)
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	7afa      	ldrb	r2, [r7, #11]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d20a      	bcs.n	800d564 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d552:	f383 8811 	msr	BASEPRI, r3
 800d556:	f3bf 8f6f 	isb	sy
 800d55a:	f3bf 8f4f 	dsb	sy
 800d55e:	607b      	str	r3, [r7, #4]
}
 800d560:	bf00      	nop
 800d562:	e7fe      	b.n	800d562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d564:	4b0e      	ldr	r3, [pc, #56]	; (800d5a0 <vPortValidateInterruptPriority+0x78>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d56c:	4b0d      	ldr	r3, [pc, #52]	; (800d5a4 <vPortValidateInterruptPriority+0x7c>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	429a      	cmp	r2, r3
 800d572:	d90a      	bls.n	800d58a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d578:	f383 8811 	msr	BASEPRI, r3
 800d57c:	f3bf 8f6f 	isb	sy
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	603b      	str	r3, [r7, #0]
}
 800d586:	bf00      	nop
 800d588:	e7fe      	b.n	800d588 <vPortValidateInterruptPriority+0x60>
	}
 800d58a:	bf00      	nop
 800d58c:	3714      	adds	r7, #20
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop
 800d598:	e000e3f0 	.word	0xe000e3f0
 800d59c:	200015d4 	.word	0x200015d4
 800d5a0:	e000ed0c 	.word	0xe000ed0c
 800d5a4:	200015d8 	.word	0x200015d8

0800d5a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b08a      	sub	sp, #40	; 0x28
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d5b4:	f7fe ff9a 	bl	800c4ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d5b8:	4b5b      	ldr	r3, [pc, #364]	; (800d728 <pvPortMalloc+0x180>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d101      	bne.n	800d5c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d5c0:	f000 f920 	bl	800d804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d5c4:	4b59      	ldr	r3, [pc, #356]	; (800d72c <pvPortMalloc+0x184>)
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4013      	ands	r3, r2
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f040 8093 	bne.w	800d6f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d01d      	beq.n	800d614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d5d8:	2208      	movs	r2, #8
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	4413      	add	r3, r2
 800d5de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f003 0307 	and.w	r3, r3, #7
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d014      	beq.n	800d614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f023 0307 	bic.w	r3, r3, #7
 800d5f0:	3308      	adds	r3, #8
 800d5f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f003 0307 	and.w	r3, r3, #7
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00a      	beq.n	800d614 <pvPortMalloc+0x6c>
	__asm volatile
 800d5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d602:	f383 8811 	msr	BASEPRI, r3
 800d606:	f3bf 8f6f 	isb	sy
 800d60a:	f3bf 8f4f 	dsb	sy
 800d60e:	617b      	str	r3, [r7, #20]
}
 800d610:	bf00      	nop
 800d612:	e7fe      	b.n	800d612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d06e      	beq.n	800d6f8 <pvPortMalloc+0x150>
 800d61a:	4b45      	ldr	r3, [pc, #276]	; (800d730 <pvPortMalloc+0x188>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	429a      	cmp	r2, r3
 800d622:	d869      	bhi.n	800d6f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d624:	4b43      	ldr	r3, [pc, #268]	; (800d734 <pvPortMalloc+0x18c>)
 800d626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d628:	4b42      	ldr	r3, [pc, #264]	; (800d734 <pvPortMalloc+0x18c>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d62e:	e004      	b.n	800d63a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	429a      	cmp	r2, r3
 800d642:	d903      	bls.n	800d64c <pvPortMalloc+0xa4>
 800d644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d1f1      	bne.n	800d630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d64c:	4b36      	ldr	r3, [pc, #216]	; (800d728 <pvPortMalloc+0x180>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d652:	429a      	cmp	r2, r3
 800d654:	d050      	beq.n	800d6f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2208      	movs	r2, #8
 800d65c:	4413      	add	r3, r2
 800d65e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	6a3b      	ldr	r3, [r7, #32]
 800d666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66a:	685a      	ldr	r2, [r3, #4]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	1ad2      	subs	r2, r2, r3
 800d670:	2308      	movs	r3, #8
 800d672:	005b      	lsls	r3, r3, #1
 800d674:	429a      	cmp	r2, r3
 800d676:	d91f      	bls.n	800d6b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4413      	add	r3, r2
 800d67e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	f003 0307 	and.w	r3, r3, #7
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00a      	beq.n	800d6a0 <pvPortMalloc+0xf8>
	__asm volatile
 800d68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68e:	f383 8811 	msr	BASEPRI, r3
 800d692:	f3bf 8f6f 	isb	sy
 800d696:	f3bf 8f4f 	dsb	sy
 800d69a:	613b      	str	r3, [r7, #16]
}
 800d69c:	bf00      	nop
 800d69e:	e7fe      	b.n	800d69e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a2:	685a      	ldr	r2, [r3, #4]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	1ad2      	subs	r2, r2, r3
 800d6a8:	69bb      	ldr	r3, [r7, #24]
 800d6aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d6b2:	69b8      	ldr	r0, [r7, #24]
 800d6b4:	f000 f908 	bl	800d8c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d6b8:	4b1d      	ldr	r3, [pc, #116]	; (800d730 <pvPortMalloc+0x188>)
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	1ad3      	subs	r3, r2, r3
 800d6c2:	4a1b      	ldr	r2, [pc, #108]	; (800d730 <pvPortMalloc+0x188>)
 800d6c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d6c6:	4b1a      	ldr	r3, [pc, #104]	; (800d730 <pvPortMalloc+0x188>)
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	4b1b      	ldr	r3, [pc, #108]	; (800d738 <pvPortMalloc+0x190>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d203      	bcs.n	800d6da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d6d2:	4b17      	ldr	r3, [pc, #92]	; (800d730 <pvPortMalloc+0x188>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a18      	ldr	r2, [pc, #96]	; (800d738 <pvPortMalloc+0x190>)
 800d6d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6dc:	685a      	ldr	r2, [r3, #4]
 800d6de:	4b13      	ldr	r3, [pc, #76]	; (800d72c <pvPortMalloc+0x184>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	431a      	orrs	r2, r3
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d6ee:	4b13      	ldr	r3, [pc, #76]	; (800d73c <pvPortMalloc+0x194>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	4a11      	ldr	r2, [pc, #68]	; (800d73c <pvPortMalloc+0x194>)
 800d6f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d6f8:	f7fe ff06 	bl	800c508 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	f003 0307 	and.w	r3, r3, #7
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00a      	beq.n	800d71c <pvPortMalloc+0x174>
	__asm volatile
 800d706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70a:	f383 8811 	msr	BASEPRI, r3
 800d70e:	f3bf 8f6f 	isb	sy
 800d712:	f3bf 8f4f 	dsb	sy
 800d716:	60fb      	str	r3, [r7, #12]
}
 800d718:	bf00      	nop
 800d71a:	e7fe      	b.n	800d71a <pvPortMalloc+0x172>
	return pvReturn;
 800d71c:	69fb      	ldr	r3, [r7, #28]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3728      	adds	r7, #40	; 0x28
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	20008b14 	.word	0x20008b14
 800d72c:	20008b28 	.word	0x20008b28
 800d730:	20008b18 	.word	0x20008b18
 800d734:	20008b0c 	.word	0x20008b0c
 800d738:	20008b1c 	.word	0x20008b1c
 800d73c:	20008b20 	.word	0x20008b20

0800d740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d04d      	beq.n	800d7ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d752:	2308      	movs	r3, #8
 800d754:	425b      	negs	r3, r3
 800d756:	697a      	ldr	r2, [r7, #20]
 800d758:	4413      	add	r3, r2
 800d75a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	685a      	ldr	r2, [r3, #4]
 800d764:	4b24      	ldr	r3, [pc, #144]	; (800d7f8 <vPortFree+0xb8>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4013      	ands	r3, r2
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10a      	bne.n	800d784 <vPortFree+0x44>
	__asm volatile
 800d76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d772:	f383 8811 	msr	BASEPRI, r3
 800d776:	f3bf 8f6f 	isb	sy
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	60fb      	str	r3, [r7, #12]
}
 800d780:	bf00      	nop
 800d782:	e7fe      	b.n	800d782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d00a      	beq.n	800d7a2 <vPortFree+0x62>
	__asm volatile
 800d78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d790:	f383 8811 	msr	BASEPRI, r3
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	60bb      	str	r3, [r7, #8]
}
 800d79e:	bf00      	nop
 800d7a0:	e7fe      	b.n	800d7a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	685a      	ldr	r2, [r3, #4]
 800d7a6:	4b14      	ldr	r3, [pc, #80]	; (800d7f8 <vPortFree+0xb8>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4013      	ands	r3, r2
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d01e      	beq.n	800d7ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d11a      	bne.n	800d7ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	685a      	ldr	r2, [r3, #4]
 800d7bc:	4b0e      	ldr	r3, [pc, #56]	; (800d7f8 <vPortFree+0xb8>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	43db      	mvns	r3, r3
 800d7c2:	401a      	ands	r2, r3
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d7c8:	f7fe fe90 	bl	800c4ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	685a      	ldr	r2, [r3, #4]
 800d7d0:	4b0a      	ldr	r3, [pc, #40]	; (800d7fc <vPortFree+0xbc>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	4a09      	ldr	r2, [pc, #36]	; (800d7fc <vPortFree+0xbc>)
 800d7d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d7da:	6938      	ldr	r0, [r7, #16]
 800d7dc:	f000 f874 	bl	800d8c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d7e0:	4b07      	ldr	r3, [pc, #28]	; (800d800 <vPortFree+0xc0>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	4a06      	ldr	r2, [pc, #24]	; (800d800 <vPortFree+0xc0>)
 800d7e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d7ea:	f7fe fe8d 	bl	800c508 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d7ee:	bf00      	nop
 800d7f0:	3718      	adds	r7, #24
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	20008b28 	.word	0x20008b28
 800d7fc:	20008b18 	.word	0x20008b18
 800d800:	20008b24 	.word	0x20008b24

0800d804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d804:	b480      	push	{r7}
 800d806:	b085      	sub	sp, #20
 800d808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d80a:	f247 5330 	movw	r3, #30000	; 0x7530
 800d80e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d810:	4b27      	ldr	r3, [pc, #156]	; (800d8b0 <prvHeapInit+0xac>)
 800d812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f003 0307 	and.w	r3, r3, #7
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00c      	beq.n	800d838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	3307      	adds	r3, #7
 800d822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f023 0307 	bic.w	r3, r3, #7
 800d82a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d82c:	68ba      	ldr	r2, [r7, #8]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	1ad3      	subs	r3, r2, r3
 800d832:	4a1f      	ldr	r2, [pc, #124]	; (800d8b0 <prvHeapInit+0xac>)
 800d834:	4413      	add	r3, r2
 800d836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d83c:	4a1d      	ldr	r2, [pc, #116]	; (800d8b4 <prvHeapInit+0xb0>)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d842:	4b1c      	ldr	r3, [pc, #112]	; (800d8b4 <prvHeapInit+0xb0>)
 800d844:	2200      	movs	r2, #0
 800d846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	68ba      	ldr	r2, [r7, #8]
 800d84c:	4413      	add	r3, r2
 800d84e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d850:	2208      	movs	r2, #8
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	1a9b      	subs	r3, r3, r2
 800d856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f023 0307 	bic.w	r3, r3, #7
 800d85e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	4a15      	ldr	r2, [pc, #84]	; (800d8b8 <prvHeapInit+0xb4>)
 800d864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d866:	4b14      	ldr	r3, [pc, #80]	; (800d8b8 <prvHeapInit+0xb4>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2200      	movs	r2, #0
 800d86c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d86e:	4b12      	ldr	r3, [pc, #72]	; (800d8b8 <prvHeapInit+0xb4>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	2200      	movs	r2, #0
 800d874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	1ad2      	subs	r2, r2, r3
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d884:	4b0c      	ldr	r3, [pc, #48]	; (800d8b8 <prvHeapInit+0xb4>)
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	685b      	ldr	r3, [r3, #4]
 800d890:	4a0a      	ldr	r2, [pc, #40]	; (800d8bc <prvHeapInit+0xb8>)
 800d892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	4a09      	ldr	r2, [pc, #36]	; (800d8c0 <prvHeapInit+0xbc>)
 800d89a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d89c:	4b09      	ldr	r3, [pc, #36]	; (800d8c4 <prvHeapInit+0xc0>)
 800d89e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d8a2:	601a      	str	r2, [r3, #0]
}
 800d8a4:	bf00      	nop
 800d8a6:	3714      	adds	r7, #20
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr
 800d8b0:	200015dc 	.word	0x200015dc
 800d8b4:	20008b0c 	.word	0x20008b0c
 800d8b8:	20008b14 	.word	0x20008b14
 800d8bc:	20008b1c 	.word	0x20008b1c
 800d8c0:	20008b18 	.word	0x20008b18
 800d8c4:	20008b28 	.word	0x20008b28

0800d8c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b085      	sub	sp, #20
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d8d0:	4b28      	ldr	r3, [pc, #160]	; (800d974 <prvInsertBlockIntoFreeList+0xac>)
 800d8d2:	60fb      	str	r3, [r7, #12]
 800d8d4:	e002      	b.n	800d8dc <prvInsertBlockIntoFreeList+0x14>
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	60fb      	str	r3, [r7, #12]
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d8f7      	bhi.n	800d8d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	68ba      	ldr	r2, [r7, #8]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d108      	bne.n	800d90a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	685a      	ldr	r2, [r3, #4]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	441a      	add	r2, r3
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	68ba      	ldr	r2, [r7, #8]
 800d914:	441a      	add	r2, r3
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d118      	bne.n	800d950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	4b15      	ldr	r3, [pc, #84]	; (800d978 <prvInsertBlockIntoFreeList+0xb0>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	429a      	cmp	r2, r3
 800d928:	d00d      	beq.n	800d946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	685a      	ldr	r2, [r3, #4]
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	441a      	add	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	601a      	str	r2, [r3, #0]
 800d944:	e008      	b.n	800d958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d946:	4b0c      	ldr	r3, [pc, #48]	; (800d978 <prvInsertBlockIntoFreeList+0xb0>)
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	601a      	str	r2, [r3, #0]
 800d94e:	e003      	b.n	800d958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d002      	beq.n	800d966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d966:	bf00      	nop
 800d968:	3714      	adds	r7, #20
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr
 800d972:	bf00      	nop
 800d974:	20008b0c 	.word	0x20008b0c
 800d978:	20008b14 	.word	0x20008b14

0800d97c <__cvt>:
 800d97c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d980:	ec55 4b10 	vmov	r4, r5, d0
 800d984:	2d00      	cmp	r5, #0
 800d986:	460e      	mov	r6, r1
 800d988:	4619      	mov	r1, r3
 800d98a:	462b      	mov	r3, r5
 800d98c:	bfbb      	ittet	lt
 800d98e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d992:	461d      	movlt	r5, r3
 800d994:	2300      	movge	r3, #0
 800d996:	232d      	movlt	r3, #45	; 0x2d
 800d998:	700b      	strb	r3, [r1, #0]
 800d99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d99c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d9a0:	4691      	mov	r9, r2
 800d9a2:	f023 0820 	bic.w	r8, r3, #32
 800d9a6:	bfbc      	itt	lt
 800d9a8:	4622      	movlt	r2, r4
 800d9aa:	4614      	movlt	r4, r2
 800d9ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d9b0:	d005      	beq.n	800d9be <__cvt+0x42>
 800d9b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d9b6:	d100      	bne.n	800d9ba <__cvt+0x3e>
 800d9b8:	3601      	adds	r6, #1
 800d9ba:	2102      	movs	r1, #2
 800d9bc:	e000      	b.n	800d9c0 <__cvt+0x44>
 800d9be:	2103      	movs	r1, #3
 800d9c0:	ab03      	add	r3, sp, #12
 800d9c2:	9301      	str	r3, [sp, #4]
 800d9c4:	ab02      	add	r3, sp, #8
 800d9c6:	9300      	str	r3, [sp, #0]
 800d9c8:	ec45 4b10 	vmov	d0, r4, r5
 800d9cc:	4653      	mov	r3, sl
 800d9ce:	4632      	mov	r2, r6
 800d9d0:	f001 f92e 	bl	800ec30 <_dtoa_r>
 800d9d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d9d8:	4607      	mov	r7, r0
 800d9da:	d102      	bne.n	800d9e2 <__cvt+0x66>
 800d9dc:	f019 0f01 	tst.w	r9, #1
 800d9e0:	d022      	beq.n	800da28 <__cvt+0xac>
 800d9e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d9e6:	eb07 0906 	add.w	r9, r7, r6
 800d9ea:	d110      	bne.n	800da0e <__cvt+0x92>
 800d9ec:	783b      	ldrb	r3, [r7, #0]
 800d9ee:	2b30      	cmp	r3, #48	; 0x30
 800d9f0:	d10a      	bne.n	800da08 <__cvt+0x8c>
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	4629      	mov	r1, r5
 800d9fa:	f7f3 f865 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9fe:	b918      	cbnz	r0, 800da08 <__cvt+0x8c>
 800da00:	f1c6 0601 	rsb	r6, r6, #1
 800da04:	f8ca 6000 	str.w	r6, [sl]
 800da08:	f8da 3000 	ldr.w	r3, [sl]
 800da0c:	4499      	add	r9, r3
 800da0e:	2200      	movs	r2, #0
 800da10:	2300      	movs	r3, #0
 800da12:	4620      	mov	r0, r4
 800da14:	4629      	mov	r1, r5
 800da16:	f7f3 f857 	bl	8000ac8 <__aeabi_dcmpeq>
 800da1a:	b108      	cbz	r0, 800da20 <__cvt+0xa4>
 800da1c:	f8cd 900c 	str.w	r9, [sp, #12]
 800da20:	2230      	movs	r2, #48	; 0x30
 800da22:	9b03      	ldr	r3, [sp, #12]
 800da24:	454b      	cmp	r3, r9
 800da26:	d307      	bcc.n	800da38 <__cvt+0xbc>
 800da28:	9b03      	ldr	r3, [sp, #12]
 800da2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da2c:	1bdb      	subs	r3, r3, r7
 800da2e:	4638      	mov	r0, r7
 800da30:	6013      	str	r3, [r2, #0]
 800da32:	b004      	add	sp, #16
 800da34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da38:	1c59      	adds	r1, r3, #1
 800da3a:	9103      	str	r1, [sp, #12]
 800da3c:	701a      	strb	r2, [r3, #0]
 800da3e:	e7f0      	b.n	800da22 <__cvt+0xa6>

0800da40 <__exponent>:
 800da40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da42:	4603      	mov	r3, r0
 800da44:	2900      	cmp	r1, #0
 800da46:	bfb8      	it	lt
 800da48:	4249      	neglt	r1, r1
 800da4a:	f803 2b02 	strb.w	r2, [r3], #2
 800da4e:	bfb4      	ite	lt
 800da50:	222d      	movlt	r2, #45	; 0x2d
 800da52:	222b      	movge	r2, #43	; 0x2b
 800da54:	2909      	cmp	r1, #9
 800da56:	7042      	strb	r2, [r0, #1]
 800da58:	dd2a      	ble.n	800dab0 <__exponent+0x70>
 800da5a:	f10d 0207 	add.w	r2, sp, #7
 800da5e:	4617      	mov	r7, r2
 800da60:	260a      	movs	r6, #10
 800da62:	4694      	mov	ip, r2
 800da64:	fb91 f5f6 	sdiv	r5, r1, r6
 800da68:	fb06 1415 	mls	r4, r6, r5, r1
 800da6c:	3430      	adds	r4, #48	; 0x30
 800da6e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800da72:	460c      	mov	r4, r1
 800da74:	2c63      	cmp	r4, #99	; 0x63
 800da76:	f102 32ff 	add.w	r2, r2, #4294967295
 800da7a:	4629      	mov	r1, r5
 800da7c:	dcf1      	bgt.n	800da62 <__exponent+0x22>
 800da7e:	3130      	adds	r1, #48	; 0x30
 800da80:	f1ac 0402 	sub.w	r4, ip, #2
 800da84:	f802 1c01 	strb.w	r1, [r2, #-1]
 800da88:	1c41      	adds	r1, r0, #1
 800da8a:	4622      	mov	r2, r4
 800da8c:	42ba      	cmp	r2, r7
 800da8e:	d30a      	bcc.n	800daa6 <__exponent+0x66>
 800da90:	f10d 0209 	add.w	r2, sp, #9
 800da94:	eba2 020c 	sub.w	r2, r2, ip
 800da98:	42bc      	cmp	r4, r7
 800da9a:	bf88      	it	hi
 800da9c:	2200      	movhi	r2, #0
 800da9e:	4413      	add	r3, r2
 800daa0:	1a18      	subs	r0, r3, r0
 800daa2:	b003      	add	sp, #12
 800daa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daa6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800daaa:	f801 5f01 	strb.w	r5, [r1, #1]!
 800daae:	e7ed      	b.n	800da8c <__exponent+0x4c>
 800dab0:	2330      	movs	r3, #48	; 0x30
 800dab2:	3130      	adds	r1, #48	; 0x30
 800dab4:	7083      	strb	r3, [r0, #2]
 800dab6:	70c1      	strb	r1, [r0, #3]
 800dab8:	1d03      	adds	r3, r0, #4
 800daba:	e7f1      	b.n	800daa0 <__exponent+0x60>

0800dabc <_printf_float>:
 800dabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac0:	ed2d 8b02 	vpush	{d8}
 800dac4:	b08d      	sub	sp, #52	; 0x34
 800dac6:	460c      	mov	r4, r1
 800dac8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dacc:	4616      	mov	r6, r2
 800dace:	461f      	mov	r7, r3
 800dad0:	4605      	mov	r5, r0
 800dad2:	f000 ff3b 	bl	800e94c <_localeconv_r>
 800dad6:	f8d0 a000 	ldr.w	sl, [r0]
 800dada:	4650      	mov	r0, sl
 800dadc:	f7f2 fbc8 	bl	8000270 <strlen>
 800dae0:	2300      	movs	r3, #0
 800dae2:	930a      	str	r3, [sp, #40]	; 0x28
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	9305      	str	r3, [sp, #20]
 800dae8:	f8d8 3000 	ldr.w	r3, [r8]
 800daec:	f894 b018 	ldrb.w	fp, [r4, #24]
 800daf0:	3307      	adds	r3, #7
 800daf2:	f023 0307 	bic.w	r3, r3, #7
 800daf6:	f103 0208 	add.w	r2, r3, #8
 800dafa:	f8c8 2000 	str.w	r2, [r8]
 800dafe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800db06:	9307      	str	r3, [sp, #28]
 800db08:	f8cd 8018 	str.w	r8, [sp, #24]
 800db0c:	ee08 0a10 	vmov	s16, r0
 800db10:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800db14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db18:	4b9e      	ldr	r3, [pc, #632]	; (800dd94 <_printf_float+0x2d8>)
 800db1a:	f04f 32ff 	mov.w	r2, #4294967295
 800db1e:	f7f3 f805 	bl	8000b2c <__aeabi_dcmpun>
 800db22:	bb88      	cbnz	r0, 800db88 <_printf_float+0xcc>
 800db24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db28:	4b9a      	ldr	r3, [pc, #616]	; (800dd94 <_printf_float+0x2d8>)
 800db2a:	f04f 32ff 	mov.w	r2, #4294967295
 800db2e:	f7f2 ffdf 	bl	8000af0 <__aeabi_dcmple>
 800db32:	bb48      	cbnz	r0, 800db88 <_printf_float+0xcc>
 800db34:	2200      	movs	r2, #0
 800db36:	2300      	movs	r3, #0
 800db38:	4640      	mov	r0, r8
 800db3a:	4649      	mov	r1, r9
 800db3c:	f7f2 ffce 	bl	8000adc <__aeabi_dcmplt>
 800db40:	b110      	cbz	r0, 800db48 <_printf_float+0x8c>
 800db42:	232d      	movs	r3, #45	; 0x2d
 800db44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db48:	4a93      	ldr	r2, [pc, #588]	; (800dd98 <_printf_float+0x2dc>)
 800db4a:	4b94      	ldr	r3, [pc, #592]	; (800dd9c <_printf_float+0x2e0>)
 800db4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800db50:	bf94      	ite	ls
 800db52:	4690      	movls	r8, r2
 800db54:	4698      	movhi	r8, r3
 800db56:	2303      	movs	r3, #3
 800db58:	6123      	str	r3, [r4, #16]
 800db5a:	9b05      	ldr	r3, [sp, #20]
 800db5c:	f023 0304 	bic.w	r3, r3, #4
 800db60:	6023      	str	r3, [r4, #0]
 800db62:	f04f 0900 	mov.w	r9, #0
 800db66:	9700      	str	r7, [sp, #0]
 800db68:	4633      	mov	r3, r6
 800db6a:	aa0b      	add	r2, sp, #44	; 0x2c
 800db6c:	4621      	mov	r1, r4
 800db6e:	4628      	mov	r0, r5
 800db70:	f000 f9da 	bl	800df28 <_printf_common>
 800db74:	3001      	adds	r0, #1
 800db76:	f040 8090 	bne.w	800dc9a <_printf_float+0x1de>
 800db7a:	f04f 30ff 	mov.w	r0, #4294967295
 800db7e:	b00d      	add	sp, #52	; 0x34
 800db80:	ecbd 8b02 	vpop	{d8}
 800db84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db88:	4642      	mov	r2, r8
 800db8a:	464b      	mov	r3, r9
 800db8c:	4640      	mov	r0, r8
 800db8e:	4649      	mov	r1, r9
 800db90:	f7f2 ffcc 	bl	8000b2c <__aeabi_dcmpun>
 800db94:	b140      	cbz	r0, 800dba8 <_printf_float+0xec>
 800db96:	464b      	mov	r3, r9
 800db98:	2b00      	cmp	r3, #0
 800db9a:	bfbc      	itt	lt
 800db9c:	232d      	movlt	r3, #45	; 0x2d
 800db9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dba2:	4a7f      	ldr	r2, [pc, #508]	; (800dda0 <_printf_float+0x2e4>)
 800dba4:	4b7f      	ldr	r3, [pc, #508]	; (800dda4 <_printf_float+0x2e8>)
 800dba6:	e7d1      	b.n	800db4c <_printf_float+0x90>
 800dba8:	6863      	ldr	r3, [r4, #4]
 800dbaa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dbae:	9206      	str	r2, [sp, #24]
 800dbb0:	1c5a      	adds	r2, r3, #1
 800dbb2:	d13f      	bne.n	800dc34 <_printf_float+0x178>
 800dbb4:	2306      	movs	r3, #6
 800dbb6:	6063      	str	r3, [r4, #4]
 800dbb8:	9b05      	ldr	r3, [sp, #20]
 800dbba:	6861      	ldr	r1, [r4, #4]
 800dbbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	9303      	str	r3, [sp, #12]
 800dbc4:	ab0a      	add	r3, sp, #40	; 0x28
 800dbc6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dbca:	ab09      	add	r3, sp, #36	; 0x24
 800dbcc:	ec49 8b10 	vmov	d0, r8, r9
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	6022      	str	r2, [r4, #0]
 800dbd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dbd8:	4628      	mov	r0, r5
 800dbda:	f7ff fecf 	bl	800d97c <__cvt>
 800dbde:	9b06      	ldr	r3, [sp, #24]
 800dbe0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dbe2:	2b47      	cmp	r3, #71	; 0x47
 800dbe4:	4680      	mov	r8, r0
 800dbe6:	d108      	bne.n	800dbfa <_printf_float+0x13e>
 800dbe8:	1cc8      	adds	r0, r1, #3
 800dbea:	db02      	blt.n	800dbf2 <_printf_float+0x136>
 800dbec:	6863      	ldr	r3, [r4, #4]
 800dbee:	4299      	cmp	r1, r3
 800dbf0:	dd41      	ble.n	800dc76 <_printf_float+0x1ba>
 800dbf2:	f1ab 0302 	sub.w	r3, fp, #2
 800dbf6:	fa5f fb83 	uxtb.w	fp, r3
 800dbfa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dbfe:	d820      	bhi.n	800dc42 <_printf_float+0x186>
 800dc00:	3901      	subs	r1, #1
 800dc02:	465a      	mov	r2, fp
 800dc04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dc08:	9109      	str	r1, [sp, #36]	; 0x24
 800dc0a:	f7ff ff19 	bl	800da40 <__exponent>
 800dc0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc10:	1813      	adds	r3, r2, r0
 800dc12:	2a01      	cmp	r2, #1
 800dc14:	4681      	mov	r9, r0
 800dc16:	6123      	str	r3, [r4, #16]
 800dc18:	dc02      	bgt.n	800dc20 <_printf_float+0x164>
 800dc1a:	6822      	ldr	r2, [r4, #0]
 800dc1c:	07d2      	lsls	r2, r2, #31
 800dc1e:	d501      	bpl.n	800dc24 <_printf_float+0x168>
 800dc20:	3301      	adds	r3, #1
 800dc22:	6123      	str	r3, [r4, #16]
 800dc24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d09c      	beq.n	800db66 <_printf_float+0xaa>
 800dc2c:	232d      	movs	r3, #45	; 0x2d
 800dc2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc32:	e798      	b.n	800db66 <_printf_float+0xaa>
 800dc34:	9a06      	ldr	r2, [sp, #24]
 800dc36:	2a47      	cmp	r2, #71	; 0x47
 800dc38:	d1be      	bne.n	800dbb8 <_printf_float+0xfc>
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d1bc      	bne.n	800dbb8 <_printf_float+0xfc>
 800dc3e:	2301      	movs	r3, #1
 800dc40:	e7b9      	b.n	800dbb6 <_printf_float+0xfa>
 800dc42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dc46:	d118      	bne.n	800dc7a <_printf_float+0x1be>
 800dc48:	2900      	cmp	r1, #0
 800dc4a:	6863      	ldr	r3, [r4, #4]
 800dc4c:	dd0b      	ble.n	800dc66 <_printf_float+0x1aa>
 800dc4e:	6121      	str	r1, [r4, #16]
 800dc50:	b913      	cbnz	r3, 800dc58 <_printf_float+0x19c>
 800dc52:	6822      	ldr	r2, [r4, #0]
 800dc54:	07d0      	lsls	r0, r2, #31
 800dc56:	d502      	bpl.n	800dc5e <_printf_float+0x1a2>
 800dc58:	3301      	adds	r3, #1
 800dc5a:	440b      	add	r3, r1
 800dc5c:	6123      	str	r3, [r4, #16]
 800dc5e:	65a1      	str	r1, [r4, #88]	; 0x58
 800dc60:	f04f 0900 	mov.w	r9, #0
 800dc64:	e7de      	b.n	800dc24 <_printf_float+0x168>
 800dc66:	b913      	cbnz	r3, 800dc6e <_printf_float+0x1b2>
 800dc68:	6822      	ldr	r2, [r4, #0]
 800dc6a:	07d2      	lsls	r2, r2, #31
 800dc6c:	d501      	bpl.n	800dc72 <_printf_float+0x1b6>
 800dc6e:	3302      	adds	r3, #2
 800dc70:	e7f4      	b.n	800dc5c <_printf_float+0x1a0>
 800dc72:	2301      	movs	r3, #1
 800dc74:	e7f2      	b.n	800dc5c <_printf_float+0x1a0>
 800dc76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dc7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc7c:	4299      	cmp	r1, r3
 800dc7e:	db05      	blt.n	800dc8c <_printf_float+0x1d0>
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	6121      	str	r1, [r4, #16]
 800dc84:	07d8      	lsls	r0, r3, #31
 800dc86:	d5ea      	bpl.n	800dc5e <_printf_float+0x1a2>
 800dc88:	1c4b      	adds	r3, r1, #1
 800dc8a:	e7e7      	b.n	800dc5c <_printf_float+0x1a0>
 800dc8c:	2900      	cmp	r1, #0
 800dc8e:	bfd4      	ite	le
 800dc90:	f1c1 0202 	rsble	r2, r1, #2
 800dc94:	2201      	movgt	r2, #1
 800dc96:	4413      	add	r3, r2
 800dc98:	e7e0      	b.n	800dc5c <_printf_float+0x1a0>
 800dc9a:	6823      	ldr	r3, [r4, #0]
 800dc9c:	055a      	lsls	r2, r3, #21
 800dc9e:	d407      	bmi.n	800dcb0 <_printf_float+0x1f4>
 800dca0:	6923      	ldr	r3, [r4, #16]
 800dca2:	4642      	mov	r2, r8
 800dca4:	4631      	mov	r1, r6
 800dca6:	4628      	mov	r0, r5
 800dca8:	47b8      	blx	r7
 800dcaa:	3001      	adds	r0, #1
 800dcac:	d12c      	bne.n	800dd08 <_printf_float+0x24c>
 800dcae:	e764      	b.n	800db7a <_printf_float+0xbe>
 800dcb0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dcb4:	f240 80e0 	bls.w	800de78 <_printf_float+0x3bc>
 800dcb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	f7f2 ff02 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	d034      	beq.n	800dd32 <_printf_float+0x276>
 800dcc8:	4a37      	ldr	r2, [pc, #220]	; (800dda8 <_printf_float+0x2ec>)
 800dcca:	2301      	movs	r3, #1
 800dccc:	4631      	mov	r1, r6
 800dcce:	4628      	mov	r0, r5
 800dcd0:	47b8      	blx	r7
 800dcd2:	3001      	adds	r0, #1
 800dcd4:	f43f af51 	beq.w	800db7a <_printf_float+0xbe>
 800dcd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	db02      	blt.n	800dce6 <_printf_float+0x22a>
 800dce0:	6823      	ldr	r3, [r4, #0]
 800dce2:	07d8      	lsls	r0, r3, #31
 800dce4:	d510      	bpl.n	800dd08 <_printf_float+0x24c>
 800dce6:	ee18 3a10 	vmov	r3, s16
 800dcea:	4652      	mov	r2, sl
 800dcec:	4631      	mov	r1, r6
 800dcee:	4628      	mov	r0, r5
 800dcf0:	47b8      	blx	r7
 800dcf2:	3001      	adds	r0, #1
 800dcf4:	f43f af41 	beq.w	800db7a <_printf_float+0xbe>
 800dcf8:	f04f 0800 	mov.w	r8, #0
 800dcfc:	f104 091a 	add.w	r9, r4, #26
 800dd00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd02:	3b01      	subs	r3, #1
 800dd04:	4543      	cmp	r3, r8
 800dd06:	dc09      	bgt.n	800dd1c <_printf_float+0x260>
 800dd08:	6823      	ldr	r3, [r4, #0]
 800dd0a:	079b      	lsls	r3, r3, #30
 800dd0c:	f100 8107 	bmi.w	800df1e <_printf_float+0x462>
 800dd10:	68e0      	ldr	r0, [r4, #12]
 800dd12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd14:	4298      	cmp	r0, r3
 800dd16:	bfb8      	it	lt
 800dd18:	4618      	movlt	r0, r3
 800dd1a:	e730      	b.n	800db7e <_printf_float+0xc2>
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	464a      	mov	r2, r9
 800dd20:	4631      	mov	r1, r6
 800dd22:	4628      	mov	r0, r5
 800dd24:	47b8      	blx	r7
 800dd26:	3001      	adds	r0, #1
 800dd28:	f43f af27 	beq.w	800db7a <_printf_float+0xbe>
 800dd2c:	f108 0801 	add.w	r8, r8, #1
 800dd30:	e7e6      	b.n	800dd00 <_printf_float+0x244>
 800dd32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	dc39      	bgt.n	800ddac <_printf_float+0x2f0>
 800dd38:	4a1b      	ldr	r2, [pc, #108]	; (800dda8 <_printf_float+0x2ec>)
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	4631      	mov	r1, r6
 800dd3e:	4628      	mov	r0, r5
 800dd40:	47b8      	blx	r7
 800dd42:	3001      	adds	r0, #1
 800dd44:	f43f af19 	beq.w	800db7a <_printf_float+0xbe>
 800dd48:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	d102      	bne.n	800dd56 <_printf_float+0x29a>
 800dd50:	6823      	ldr	r3, [r4, #0]
 800dd52:	07d9      	lsls	r1, r3, #31
 800dd54:	d5d8      	bpl.n	800dd08 <_printf_float+0x24c>
 800dd56:	ee18 3a10 	vmov	r3, s16
 800dd5a:	4652      	mov	r2, sl
 800dd5c:	4631      	mov	r1, r6
 800dd5e:	4628      	mov	r0, r5
 800dd60:	47b8      	blx	r7
 800dd62:	3001      	adds	r0, #1
 800dd64:	f43f af09 	beq.w	800db7a <_printf_float+0xbe>
 800dd68:	f04f 0900 	mov.w	r9, #0
 800dd6c:	f104 0a1a 	add.w	sl, r4, #26
 800dd70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd72:	425b      	negs	r3, r3
 800dd74:	454b      	cmp	r3, r9
 800dd76:	dc01      	bgt.n	800dd7c <_printf_float+0x2c0>
 800dd78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd7a:	e792      	b.n	800dca2 <_printf_float+0x1e6>
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	4652      	mov	r2, sl
 800dd80:	4631      	mov	r1, r6
 800dd82:	4628      	mov	r0, r5
 800dd84:	47b8      	blx	r7
 800dd86:	3001      	adds	r0, #1
 800dd88:	f43f aef7 	beq.w	800db7a <_printf_float+0xbe>
 800dd8c:	f109 0901 	add.w	r9, r9, #1
 800dd90:	e7ee      	b.n	800dd70 <_printf_float+0x2b4>
 800dd92:	bf00      	nop
 800dd94:	7fefffff 	.word	0x7fefffff
 800dd98:	0801433c 	.word	0x0801433c
 800dd9c:	08014340 	.word	0x08014340
 800dda0:	08014344 	.word	0x08014344
 800dda4:	08014348 	.word	0x08014348
 800dda8:	080146d8 	.word	0x080146d8
 800ddac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	bfa8      	it	ge
 800ddb4:	461a      	movge	r2, r3
 800ddb6:	2a00      	cmp	r2, #0
 800ddb8:	4691      	mov	r9, r2
 800ddba:	dc37      	bgt.n	800de2c <_printf_float+0x370>
 800ddbc:	f04f 0b00 	mov.w	fp, #0
 800ddc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ddc4:	f104 021a 	add.w	r2, r4, #26
 800ddc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ddca:	9305      	str	r3, [sp, #20]
 800ddcc:	eba3 0309 	sub.w	r3, r3, r9
 800ddd0:	455b      	cmp	r3, fp
 800ddd2:	dc33      	bgt.n	800de3c <_printf_float+0x380>
 800ddd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	db3b      	blt.n	800de54 <_printf_float+0x398>
 800dddc:	6823      	ldr	r3, [r4, #0]
 800ddde:	07da      	lsls	r2, r3, #31
 800dde0:	d438      	bmi.n	800de54 <_printf_float+0x398>
 800dde2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dde6:	eba2 0903 	sub.w	r9, r2, r3
 800ddea:	9b05      	ldr	r3, [sp, #20]
 800ddec:	1ad2      	subs	r2, r2, r3
 800ddee:	4591      	cmp	r9, r2
 800ddf0:	bfa8      	it	ge
 800ddf2:	4691      	movge	r9, r2
 800ddf4:	f1b9 0f00 	cmp.w	r9, #0
 800ddf8:	dc35      	bgt.n	800de66 <_printf_float+0x3aa>
 800ddfa:	f04f 0800 	mov.w	r8, #0
 800ddfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de02:	f104 0a1a 	add.w	sl, r4, #26
 800de06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de0a:	1a9b      	subs	r3, r3, r2
 800de0c:	eba3 0309 	sub.w	r3, r3, r9
 800de10:	4543      	cmp	r3, r8
 800de12:	f77f af79 	ble.w	800dd08 <_printf_float+0x24c>
 800de16:	2301      	movs	r3, #1
 800de18:	4652      	mov	r2, sl
 800de1a:	4631      	mov	r1, r6
 800de1c:	4628      	mov	r0, r5
 800de1e:	47b8      	blx	r7
 800de20:	3001      	adds	r0, #1
 800de22:	f43f aeaa 	beq.w	800db7a <_printf_float+0xbe>
 800de26:	f108 0801 	add.w	r8, r8, #1
 800de2a:	e7ec      	b.n	800de06 <_printf_float+0x34a>
 800de2c:	4613      	mov	r3, r2
 800de2e:	4631      	mov	r1, r6
 800de30:	4642      	mov	r2, r8
 800de32:	4628      	mov	r0, r5
 800de34:	47b8      	blx	r7
 800de36:	3001      	adds	r0, #1
 800de38:	d1c0      	bne.n	800ddbc <_printf_float+0x300>
 800de3a:	e69e      	b.n	800db7a <_printf_float+0xbe>
 800de3c:	2301      	movs	r3, #1
 800de3e:	4631      	mov	r1, r6
 800de40:	4628      	mov	r0, r5
 800de42:	9205      	str	r2, [sp, #20]
 800de44:	47b8      	blx	r7
 800de46:	3001      	adds	r0, #1
 800de48:	f43f ae97 	beq.w	800db7a <_printf_float+0xbe>
 800de4c:	9a05      	ldr	r2, [sp, #20]
 800de4e:	f10b 0b01 	add.w	fp, fp, #1
 800de52:	e7b9      	b.n	800ddc8 <_printf_float+0x30c>
 800de54:	ee18 3a10 	vmov	r3, s16
 800de58:	4652      	mov	r2, sl
 800de5a:	4631      	mov	r1, r6
 800de5c:	4628      	mov	r0, r5
 800de5e:	47b8      	blx	r7
 800de60:	3001      	adds	r0, #1
 800de62:	d1be      	bne.n	800dde2 <_printf_float+0x326>
 800de64:	e689      	b.n	800db7a <_printf_float+0xbe>
 800de66:	9a05      	ldr	r2, [sp, #20]
 800de68:	464b      	mov	r3, r9
 800de6a:	4442      	add	r2, r8
 800de6c:	4631      	mov	r1, r6
 800de6e:	4628      	mov	r0, r5
 800de70:	47b8      	blx	r7
 800de72:	3001      	adds	r0, #1
 800de74:	d1c1      	bne.n	800ddfa <_printf_float+0x33e>
 800de76:	e680      	b.n	800db7a <_printf_float+0xbe>
 800de78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de7a:	2a01      	cmp	r2, #1
 800de7c:	dc01      	bgt.n	800de82 <_printf_float+0x3c6>
 800de7e:	07db      	lsls	r3, r3, #31
 800de80:	d53a      	bpl.n	800def8 <_printf_float+0x43c>
 800de82:	2301      	movs	r3, #1
 800de84:	4642      	mov	r2, r8
 800de86:	4631      	mov	r1, r6
 800de88:	4628      	mov	r0, r5
 800de8a:	47b8      	blx	r7
 800de8c:	3001      	adds	r0, #1
 800de8e:	f43f ae74 	beq.w	800db7a <_printf_float+0xbe>
 800de92:	ee18 3a10 	vmov	r3, s16
 800de96:	4652      	mov	r2, sl
 800de98:	4631      	mov	r1, r6
 800de9a:	4628      	mov	r0, r5
 800de9c:	47b8      	blx	r7
 800de9e:	3001      	adds	r0, #1
 800dea0:	f43f ae6b 	beq.w	800db7a <_printf_float+0xbe>
 800dea4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dea8:	2200      	movs	r2, #0
 800deaa:	2300      	movs	r3, #0
 800deac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800deb0:	f7f2 fe0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800deb4:	b9d8      	cbnz	r0, 800deee <_printf_float+0x432>
 800deb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800deba:	f108 0201 	add.w	r2, r8, #1
 800debe:	4631      	mov	r1, r6
 800dec0:	4628      	mov	r0, r5
 800dec2:	47b8      	blx	r7
 800dec4:	3001      	adds	r0, #1
 800dec6:	d10e      	bne.n	800dee6 <_printf_float+0x42a>
 800dec8:	e657      	b.n	800db7a <_printf_float+0xbe>
 800deca:	2301      	movs	r3, #1
 800decc:	4652      	mov	r2, sl
 800dece:	4631      	mov	r1, r6
 800ded0:	4628      	mov	r0, r5
 800ded2:	47b8      	blx	r7
 800ded4:	3001      	adds	r0, #1
 800ded6:	f43f ae50 	beq.w	800db7a <_printf_float+0xbe>
 800deda:	f108 0801 	add.w	r8, r8, #1
 800dede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dee0:	3b01      	subs	r3, #1
 800dee2:	4543      	cmp	r3, r8
 800dee4:	dcf1      	bgt.n	800deca <_printf_float+0x40e>
 800dee6:	464b      	mov	r3, r9
 800dee8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800deec:	e6da      	b.n	800dca4 <_printf_float+0x1e8>
 800deee:	f04f 0800 	mov.w	r8, #0
 800def2:	f104 0a1a 	add.w	sl, r4, #26
 800def6:	e7f2      	b.n	800dede <_printf_float+0x422>
 800def8:	2301      	movs	r3, #1
 800defa:	4642      	mov	r2, r8
 800defc:	e7df      	b.n	800debe <_printf_float+0x402>
 800defe:	2301      	movs	r3, #1
 800df00:	464a      	mov	r2, r9
 800df02:	4631      	mov	r1, r6
 800df04:	4628      	mov	r0, r5
 800df06:	47b8      	blx	r7
 800df08:	3001      	adds	r0, #1
 800df0a:	f43f ae36 	beq.w	800db7a <_printf_float+0xbe>
 800df0e:	f108 0801 	add.w	r8, r8, #1
 800df12:	68e3      	ldr	r3, [r4, #12]
 800df14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df16:	1a5b      	subs	r3, r3, r1
 800df18:	4543      	cmp	r3, r8
 800df1a:	dcf0      	bgt.n	800defe <_printf_float+0x442>
 800df1c:	e6f8      	b.n	800dd10 <_printf_float+0x254>
 800df1e:	f04f 0800 	mov.w	r8, #0
 800df22:	f104 0919 	add.w	r9, r4, #25
 800df26:	e7f4      	b.n	800df12 <_printf_float+0x456>

0800df28 <_printf_common>:
 800df28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df2c:	4616      	mov	r6, r2
 800df2e:	4699      	mov	r9, r3
 800df30:	688a      	ldr	r2, [r1, #8]
 800df32:	690b      	ldr	r3, [r1, #16]
 800df34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800df38:	4293      	cmp	r3, r2
 800df3a:	bfb8      	it	lt
 800df3c:	4613      	movlt	r3, r2
 800df3e:	6033      	str	r3, [r6, #0]
 800df40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800df44:	4607      	mov	r7, r0
 800df46:	460c      	mov	r4, r1
 800df48:	b10a      	cbz	r2, 800df4e <_printf_common+0x26>
 800df4a:	3301      	adds	r3, #1
 800df4c:	6033      	str	r3, [r6, #0]
 800df4e:	6823      	ldr	r3, [r4, #0]
 800df50:	0699      	lsls	r1, r3, #26
 800df52:	bf42      	ittt	mi
 800df54:	6833      	ldrmi	r3, [r6, #0]
 800df56:	3302      	addmi	r3, #2
 800df58:	6033      	strmi	r3, [r6, #0]
 800df5a:	6825      	ldr	r5, [r4, #0]
 800df5c:	f015 0506 	ands.w	r5, r5, #6
 800df60:	d106      	bne.n	800df70 <_printf_common+0x48>
 800df62:	f104 0a19 	add.w	sl, r4, #25
 800df66:	68e3      	ldr	r3, [r4, #12]
 800df68:	6832      	ldr	r2, [r6, #0]
 800df6a:	1a9b      	subs	r3, r3, r2
 800df6c:	42ab      	cmp	r3, r5
 800df6e:	dc26      	bgt.n	800dfbe <_printf_common+0x96>
 800df70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800df74:	1e13      	subs	r3, r2, #0
 800df76:	6822      	ldr	r2, [r4, #0]
 800df78:	bf18      	it	ne
 800df7a:	2301      	movne	r3, #1
 800df7c:	0692      	lsls	r2, r2, #26
 800df7e:	d42b      	bmi.n	800dfd8 <_printf_common+0xb0>
 800df80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df84:	4649      	mov	r1, r9
 800df86:	4638      	mov	r0, r7
 800df88:	47c0      	blx	r8
 800df8a:	3001      	adds	r0, #1
 800df8c:	d01e      	beq.n	800dfcc <_printf_common+0xa4>
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	6922      	ldr	r2, [r4, #16]
 800df92:	f003 0306 	and.w	r3, r3, #6
 800df96:	2b04      	cmp	r3, #4
 800df98:	bf02      	ittt	eq
 800df9a:	68e5      	ldreq	r5, [r4, #12]
 800df9c:	6833      	ldreq	r3, [r6, #0]
 800df9e:	1aed      	subeq	r5, r5, r3
 800dfa0:	68a3      	ldr	r3, [r4, #8]
 800dfa2:	bf0c      	ite	eq
 800dfa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dfa8:	2500      	movne	r5, #0
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	bfc4      	itt	gt
 800dfae:	1a9b      	subgt	r3, r3, r2
 800dfb0:	18ed      	addgt	r5, r5, r3
 800dfb2:	2600      	movs	r6, #0
 800dfb4:	341a      	adds	r4, #26
 800dfb6:	42b5      	cmp	r5, r6
 800dfb8:	d11a      	bne.n	800dff0 <_printf_common+0xc8>
 800dfba:	2000      	movs	r0, #0
 800dfbc:	e008      	b.n	800dfd0 <_printf_common+0xa8>
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	4652      	mov	r2, sl
 800dfc2:	4649      	mov	r1, r9
 800dfc4:	4638      	mov	r0, r7
 800dfc6:	47c0      	blx	r8
 800dfc8:	3001      	adds	r0, #1
 800dfca:	d103      	bne.n	800dfd4 <_printf_common+0xac>
 800dfcc:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfd4:	3501      	adds	r5, #1
 800dfd6:	e7c6      	b.n	800df66 <_printf_common+0x3e>
 800dfd8:	18e1      	adds	r1, r4, r3
 800dfda:	1c5a      	adds	r2, r3, #1
 800dfdc:	2030      	movs	r0, #48	; 0x30
 800dfde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dfe2:	4422      	add	r2, r4
 800dfe4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dfe8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dfec:	3302      	adds	r3, #2
 800dfee:	e7c7      	b.n	800df80 <_printf_common+0x58>
 800dff0:	2301      	movs	r3, #1
 800dff2:	4622      	mov	r2, r4
 800dff4:	4649      	mov	r1, r9
 800dff6:	4638      	mov	r0, r7
 800dff8:	47c0      	blx	r8
 800dffa:	3001      	adds	r0, #1
 800dffc:	d0e6      	beq.n	800dfcc <_printf_common+0xa4>
 800dffe:	3601      	adds	r6, #1
 800e000:	e7d9      	b.n	800dfb6 <_printf_common+0x8e>
	...

0800e004 <_printf_i>:
 800e004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e008:	7e0f      	ldrb	r7, [r1, #24]
 800e00a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e00c:	2f78      	cmp	r7, #120	; 0x78
 800e00e:	4691      	mov	r9, r2
 800e010:	4680      	mov	r8, r0
 800e012:	460c      	mov	r4, r1
 800e014:	469a      	mov	sl, r3
 800e016:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e01a:	d807      	bhi.n	800e02c <_printf_i+0x28>
 800e01c:	2f62      	cmp	r7, #98	; 0x62
 800e01e:	d80a      	bhi.n	800e036 <_printf_i+0x32>
 800e020:	2f00      	cmp	r7, #0
 800e022:	f000 80d4 	beq.w	800e1ce <_printf_i+0x1ca>
 800e026:	2f58      	cmp	r7, #88	; 0x58
 800e028:	f000 80c0 	beq.w	800e1ac <_printf_i+0x1a8>
 800e02c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e030:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e034:	e03a      	b.n	800e0ac <_printf_i+0xa8>
 800e036:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e03a:	2b15      	cmp	r3, #21
 800e03c:	d8f6      	bhi.n	800e02c <_printf_i+0x28>
 800e03e:	a101      	add	r1, pc, #4	; (adr r1, 800e044 <_printf_i+0x40>)
 800e040:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e044:	0800e09d 	.word	0x0800e09d
 800e048:	0800e0b1 	.word	0x0800e0b1
 800e04c:	0800e02d 	.word	0x0800e02d
 800e050:	0800e02d 	.word	0x0800e02d
 800e054:	0800e02d 	.word	0x0800e02d
 800e058:	0800e02d 	.word	0x0800e02d
 800e05c:	0800e0b1 	.word	0x0800e0b1
 800e060:	0800e02d 	.word	0x0800e02d
 800e064:	0800e02d 	.word	0x0800e02d
 800e068:	0800e02d 	.word	0x0800e02d
 800e06c:	0800e02d 	.word	0x0800e02d
 800e070:	0800e1b5 	.word	0x0800e1b5
 800e074:	0800e0dd 	.word	0x0800e0dd
 800e078:	0800e16f 	.word	0x0800e16f
 800e07c:	0800e02d 	.word	0x0800e02d
 800e080:	0800e02d 	.word	0x0800e02d
 800e084:	0800e1d7 	.word	0x0800e1d7
 800e088:	0800e02d 	.word	0x0800e02d
 800e08c:	0800e0dd 	.word	0x0800e0dd
 800e090:	0800e02d 	.word	0x0800e02d
 800e094:	0800e02d 	.word	0x0800e02d
 800e098:	0800e177 	.word	0x0800e177
 800e09c:	682b      	ldr	r3, [r5, #0]
 800e09e:	1d1a      	adds	r2, r3, #4
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	602a      	str	r2, [r5, #0]
 800e0a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	e09f      	b.n	800e1f0 <_printf_i+0x1ec>
 800e0b0:	6820      	ldr	r0, [r4, #0]
 800e0b2:	682b      	ldr	r3, [r5, #0]
 800e0b4:	0607      	lsls	r7, r0, #24
 800e0b6:	f103 0104 	add.w	r1, r3, #4
 800e0ba:	6029      	str	r1, [r5, #0]
 800e0bc:	d501      	bpl.n	800e0c2 <_printf_i+0xbe>
 800e0be:	681e      	ldr	r6, [r3, #0]
 800e0c0:	e003      	b.n	800e0ca <_printf_i+0xc6>
 800e0c2:	0646      	lsls	r6, r0, #25
 800e0c4:	d5fb      	bpl.n	800e0be <_printf_i+0xba>
 800e0c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e0ca:	2e00      	cmp	r6, #0
 800e0cc:	da03      	bge.n	800e0d6 <_printf_i+0xd2>
 800e0ce:	232d      	movs	r3, #45	; 0x2d
 800e0d0:	4276      	negs	r6, r6
 800e0d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0d6:	485a      	ldr	r0, [pc, #360]	; (800e240 <_printf_i+0x23c>)
 800e0d8:	230a      	movs	r3, #10
 800e0da:	e012      	b.n	800e102 <_printf_i+0xfe>
 800e0dc:	682b      	ldr	r3, [r5, #0]
 800e0de:	6820      	ldr	r0, [r4, #0]
 800e0e0:	1d19      	adds	r1, r3, #4
 800e0e2:	6029      	str	r1, [r5, #0]
 800e0e4:	0605      	lsls	r5, r0, #24
 800e0e6:	d501      	bpl.n	800e0ec <_printf_i+0xe8>
 800e0e8:	681e      	ldr	r6, [r3, #0]
 800e0ea:	e002      	b.n	800e0f2 <_printf_i+0xee>
 800e0ec:	0641      	lsls	r1, r0, #25
 800e0ee:	d5fb      	bpl.n	800e0e8 <_printf_i+0xe4>
 800e0f0:	881e      	ldrh	r6, [r3, #0]
 800e0f2:	4853      	ldr	r0, [pc, #332]	; (800e240 <_printf_i+0x23c>)
 800e0f4:	2f6f      	cmp	r7, #111	; 0x6f
 800e0f6:	bf0c      	ite	eq
 800e0f8:	2308      	moveq	r3, #8
 800e0fa:	230a      	movne	r3, #10
 800e0fc:	2100      	movs	r1, #0
 800e0fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e102:	6865      	ldr	r5, [r4, #4]
 800e104:	60a5      	str	r5, [r4, #8]
 800e106:	2d00      	cmp	r5, #0
 800e108:	bfa2      	ittt	ge
 800e10a:	6821      	ldrge	r1, [r4, #0]
 800e10c:	f021 0104 	bicge.w	r1, r1, #4
 800e110:	6021      	strge	r1, [r4, #0]
 800e112:	b90e      	cbnz	r6, 800e118 <_printf_i+0x114>
 800e114:	2d00      	cmp	r5, #0
 800e116:	d04b      	beq.n	800e1b0 <_printf_i+0x1ac>
 800e118:	4615      	mov	r5, r2
 800e11a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e11e:	fb03 6711 	mls	r7, r3, r1, r6
 800e122:	5dc7      	ldrb	r7, [r0, r7]
 800e124:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e128:	4637      	mov	r7, r6
 800e12a:	42bb      	cmp	r3, r7
 800e12c:	460e      	mov	r6, r1
 800e12e:	d9f4      	bls.n	800e11a <_printf_i+0x116>
 800e130:	2b08      	cmp	r3, #8
 800e132:	d10b      	bne.n	800e14c <_printf_i+0x148>
 800e134:	6823      	ldr	r3, [r4, #0]
 800e136:	07de      	lsls	r6, r3, #31
 800e138:	d508      	bpl.n	800e14c <_printf_i+0x148>
 800e13a:	6923      	ldr	r3, [r4, #16]
 800e13c:	6861      	ldr	r1, [r4, #4]
 800e13e:	4299      	cmp	r1, r3
 800e140:	bfde      	ittt	le
 800e142:	2330      	movle	r3, #48	; 0x30
 800e144:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e148:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e14c:	1b52      	subs	r2, r2, r5
 800e14e:	6122      	str	r2, [r4, #16]
 800e150:	f8cd a000 	str.w	sl, [sp]
 800e154:	464b      	mov	r3, r9
 800e156:	aa03      	add	r2, sp, #12
 800e158:	4621      	mov	r1, r4
 800e15a:	4640      	mov	r0, r8
 800e15c:	f7ff fee4 	bl	800df28 <_printf_common>
 800e160:	3001      	adds	r0, #1
 800e162:	d14a      	bne.n	800e1fa <_printf_i+0x1f6>
 800e164:	f04f 30ff 	mov.w	r0, #4294967295
 800e168:	b004      	add	sp, #16
 800e16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e16e:	6823      	ldr	r3, [r4, #0]
 800e170:	f043 0320 	orr.w	r3, r3, #32
 800e174:	6023      	str	r3, [r4, #0]
 800e176:	4833      	ldr	r0, [pc, #204]	; (800e244 <_printf_i+0x240>)
 800e178:	2778      	movs	r7, #120	; 0x78
 800e17a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e17e:	6823      	ldr	r3, [r4, #0]
 800e180:	6829      	ldr	r1, [r5, #0]
 800e182:	061f      	lsls	r7, r3, #24
 800e184:	f851 6b04 	ldr.w	r6, [r1], #4
 800e188:	d402      	bmi.n	800e190 <_printf_i+0x18c>
 800e18a:	065f      	lsls	r7, r3, #25
 800e18c:	bf48      	it	mi
 800e18e:	b2b6      	uxthmi	r6, r6
 800e190:	07df      	lsls	r7, r3, #31
 800e192:	bf48      	it	mi
 800e194:	f043 0320 	orrmi.w	r3, r3, #32
 800e198:	6029      	str	r1, [r5, #0]
 800e19a:	bf48      	it	mi
 800e19c:	6023      	strmi	r3, [r4, #0]
 800e19e:	b91e      	cbnz	r6, 800e1a8 <_printf_i+0x1a4>
 800e1a0:	6823      	ldr	r3, [r4, #0]
 800e1a2:	f023 0320 	bic.w	r3, r3, #32
 800e1a6:	6023      	str	r3, [r4, #0]
 800e1a8:	2310      	movs	r3, #16
 800e1aa:	e7a7      	b.n	800e0fc <_printf_i+0xf8>
 800e1ac:	4824      	ldr	r0, [pc, #144]	; (800e240 <_printf_i+0x23c>)
 800e1ae:	e7e4      	b.n	800e17a <_printf_i+0x176>
 800e1b0:	4615      	mov	r5, r2
 800e1b2:	e7bd      	b.n	800e130 <_printf_i+0x12c>
 800e1b4:	682b      	ldr	r3, [r5, #0]
 800e1b6:	6826      	ldr	r6, [r4, #0]
 800e1b8:	6961      	ldr	r1, [r4, #20]
 800e1ba:	1d18      	adds	r0, r3, #4
 800e1bc:	6028      	str	r0, [r5, #0]
 800e1be:	0635      	lsls	r5, r6, #24
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	d501      	bpl.n	800e1c8 <_printf_i+0x1c4>
 800e1c4:	6019      	str	r1, [r3, #0]
 800e1c6:	e002      	b.n	800e1ce <_printf_i+0x1ca>
 800e1c8:	0670      	lsls	r0, r6, #25
 800e1ca:	d5fb      	bpl.n	800e1c4 <_printf_i+0x1c0>
 800e1cc:	8019      	strh	r1, [r3, #0]
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	6123      	str	r3, [r4, #16]
 800e1d2:	4615      	mov	r5, r2
 800e1d4:	e7bc      	b.n	800e150 <_printf_i+0x14c>
 800e1d6:	682b      	ldr	r3, [r5, #0]
 800e1d8:	1d1a      	adds	r2, r3, #4
 800e1da:	602a      	str	r2, [r5, #0]
 800e1dc:	681d      	ldr	r5, [r3, #0]
 800e1de:	6862      	ldr	r2, [r4, #4]
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	f7f1 fff4 	bl	80001d0 <memchr>
 800e1e8:	b108      	cbz	r0, 800e1ee <_printf_i+0x1ea>
 800e1ea:	1b40      	subs	r0, r0, r5
 800e1ec:	6060      	str	r0, [r4, #4]
 800e1ee:	6863      	ldr	r3, [r4, #4]
 800e1f0:	6123      	str	r3, [r4, #16]
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1f8:	e7aa      	b.n	800e150 <_printf_i+0x14c>
 800e1fa:	6923      	ldr	r3, [r4, #16]
 800e1fc:	462a      	mov	r2, r5
 800e1fe:	4649      	mov	r1, r9
 800e200:	4640      	mov	r0, r8
 800e202:	47d0      	blx	sl
 800e204:	3001      	adds	r0, #1
 800e206:	d0ad      	beq.n	800e164 <_printf_i+0x160>
 800e208:	6823      	ldr	r3, [r4, #0]
 800e20a:	079b      	lsls	r3, r3, #30
 800e20c:	d413      	bmi.n	800e236 <_printf_i+0x232>
 800e20e:	68e0      	ldr	r0, [r4, #12]
 800e210:	9b03      	ldr	r3, [sp, #12]
 800e212:	4298      	cmp	r0, r3
 800e214:	bfb8      	it	lt
 800e216:	4618      	movlt	r0, r3
 800e218:	e7a6      	b.n	800e168 <_printf_i+0x164>
 800e21a:	2301      	movs	r3, #1
 800e21c:	4632      	mov	r2, r6
 800e21e:	4649      	mov	r1, r9
 800e220:	4640      	mov	r0, r8
 800e222:	47d0      	blx	sl
 800e224:	3001      	adds	r0, #1
 800e226:	d09d      	beq.n	800e164 <_printf_i+0x160>
 800e228:	3501      	adds	r5, #1
 800e22a:	68e3      	ldr	r3, [r4, #12]
 800e22c:	9903      	ldr	r1, [sp, #12]
 800e22e:	1a5b      	subs	r3, r3, r1
 800e230:	42ab      	cmp	r3, r5
 800e232:	dcf2      	bgt.n	800e21a <_printf_i+0x216>
 800e234:	e7eb      	b.n	800e20e <_printf_i+0x20a>
 800e236:	2500      	movs	r5, #0
 800e238:	f104 0619 	add.w	r6, r4, #25
 800e23c:	e7f5      	b.n	800e22a <_printf_i+0x226>
 800e23e:	bf00      	nop
 800e240:	0801434c 	.word	0x0801434c
 800e244:	0801435d 	.word	0x0801435d

0800e248 <_scanf_float>:
 800e248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e24c:	b087      	sub	sp, #28
 800e24e:	4617      	mov	r7, r2
 800e250:	9303      	str	r3, [sp, #12]
 800e252:	688b      	ldr	r3, [r1, #8]
 800e254:	1e5a      	subs	r2, r3, #1
 800e256:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e25a:	bf83      	ittte	hi
 800e25c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e260:	195b      	addhi	r3, r3, r5
 800e262:	9302      	strhi	r3, [sp, #8]
 800e264:	2300      	movls	r3, #0
 800e266:	bf86      	itte	hi
 800e268:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e26c:	608b      	strhi	r3, [r1, #8]
 800e26e:	9302      	strls	r3, [sp, #8]
 800e270:	680b      	ldr	r3, [r1, #0]
 800e272:	468b      	mov	fp, r1
 800e274:	2500      	movs	r5, #0
 800e276:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e27a:	f84b 3b1c 	str.w	r3, [fp], #28
 800e27e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e282:	4680      	mov	r8, r0
 800e284:	460c      	mov	r4, r1
 800e286:	465e      	mov	r6, fp
 800e288:	46aa      	mov	sl, r5
 800e28a:	46a9      	mov	r9, r5
 800e28c:	9501      	str	r5, [sp, #4]
 800e28e:	68a2      	ldr	r2, [r4, #8]
 800e290:	b152      	cbz	r2, 800e2a8 <_scanf_float+0x60>
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	2b4e      	cmp	r3, #78	; 0x4e
 800e298:	d864      	bhi.n	800e364 <_scanf_float+0x11c>
 800e29a:	2b40      	cmp	r3, #64	; 0x40
 800e29c:	d83c      	bhi.n	800e318 <_scanf_float+0xd0>
 800e29e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e2a2:	b2c8      	uxtb	r0, r1
 800e2a4:	280e      	cmp	r0, #14
 800e2a6:	d93a      	bls.n	800e31e <_scanf_float+0xd6>
 800e2a8:	f1b9 0f00 	cmp.w	r9, #0
 800e2ac:	d003      	beq.n	800e2b6 <_scanf_float+0x6e>
 800e2ae:	6823      	ldr	r3, [r4, #0]
 800e2b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2b4:	6023      	str	r3, [r4, #0]
 800e2b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2ba:	f1ba 0f01 	cmp.w	sl, #1
 800e2be:	f200 8113 	bhi.w	800e4e8 <_scanf_float+0x2a0>
 800e2c2:	455e      	cmp	r6, fp
 800e2c4:	f200 8105 	bhi.w	800e4d2 <_scanf_float+0x28a>
 800e2c8:	2501      	movs	r5, #1
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	b007      	add	sp, #28
 800e2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e2d6:	2a0d      	cmp	r2, #13
 800e2d8:	d8e6      	bhi.n	800e2a8 <_scanf_float+0x60>
 800e2da:	a101      	add	r1, pc, #4	; (adr r1, 800e2e0 <_scanf_float+0x98>)
 800e2dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e2e0:	0800e41f 	.word	0x0800e41f
 800e2e4:	0800e2a9 	.word	0x0800e2a9
 800e2e8:	0800e2a9 	.word	0x0800e2a9
 800e2ec:	0800e2a9 	.word	0x0800e2a9
 800e2f0:	0800e47f 	.word	0x0800e47f
 800e2f4:	0800e457 	.word	0x0800e457
 800e2f8:	0800e2a9 	.word	0x0800e2a9
 800e2fc:	0800e2a9 	.word	0x0800e2a9
 800e300:	0800e42d 	.word	0x0800e42d
 800e304:	0800e2a9 	.word	0x0800e2a9
 800e308:	0800e2a9 	.word	0x0800e2a9
 800e30c:	0800e2a9 	.word	0x0800e2a9
 800e310:	0800e2a9 	.word	0x0800e2a9
 800e314:	0800e3e5 	.word	0x0800e3e5
 800e318:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e31c:	e7db      	b.n	800e2d6 <_scanf_float+0x8e>
 800e31e:	290e      	cmp	r1, #14
 800e320:	d8c2      	bhi.n	800e2a8 <_scanf_float+0x60>
 800e322:	a001      	add	r0, pc, #4	; (adr r0, 800e328 <_scanf_float+0xe0>)
 800e324:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e328:	0800e3d7 	.word	0x0800e3d7
 800e32c:	0800e2a9 	.word	0x0800e2a9
 800e330:	0800e3d7 	.word	0x0800e3d7
 800e334:	0800e46b 	.word	0x0800e46b
 800e338:	0800e2a9 	.word	0x0800e2a9
 800e33c:	0800e385 	.word	0x0800e385
 800e340:	0800e3c1 	.word	0x0800e3c1
 800e344:	0800e3c1 	.word	0x0800e3c1
 800e348:	0800e3c1 	.word	0x0800e3c1
 800e34c:	0800e3c1 	.word	0x0800e3c1
 800e350:	0800e3c1 	.word	0x0800e3c1
 800e354:	0800e3c1 	.word	0x0800e3c1
 800e358:	0800e3c1 	.word	0x0800e3c1
 800e35c:	0800e3c1 	.word	0x0800e3c1
 800e360:	0800e3c1 	.word	0x0800e3c1
 800e364:	2b6e      	cmp	r3, #110	; 0x6e
 800e366:	d809      	bhi.n	800e37c <_scanf_float+0x134>
 800e368:	2b60      	cmp	r3, #96	; 0x60
 800e36a:	d8b2      	bhi.n	800e2d2 <_scanf_float+0x8a>
 800e36c:	2b54      	cmp	r3, #84	; 0x54
 800e36e:	d077      	beq.n	800e460 <_scanf_float+0x218>
 800e370:	2b59      	cmp	r3, #89	; 0x59
 800e372:	d199      	bne.n	800e2a8 <_scanf_float+0x60>
 800e374:	2d07      	cmp	r5, #7
 800e376:	d197      	bne.n	800e2a8 <_scanf_float+0x60>
 800e378:	2508      	movs	r5, #8
 800e37a:	e029      	b.n	800e3d0 <_scanf_float+0x188>
 800e37c:	2b74      	cmp	r3, #116	; 0x74
 800e37e:	d06f      	beq.n	800e460 <_scanf_float+0x218>
 800e380:	2b79      	cmp	r3, #121	; 0x79
 800e382:	e7f6      	b.n	800e372 <_scanf_float+0x12a>
 800e384:	6821      	ldr	r1, [r4, #0]
 800e386:	05c8      	lsls	r0, r1, #23
 800e388:	d51a      	bpl.n	800e3c0 <_scanf_float+0x178>
 800e38a:	9b02      	ldr	r3, [sp, #8]
 800e38c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e390:	6021      	str	r1, [r4, #0]
 800e392:	f109 0901 	add.w	r9, r9, #1
 800e396:	b11b      	cbz	r3, 800e3a0 <_scanf_float+0x158>
 800e398:	3b01      	subs	r3, #1
 800e39a:	3201      	adds	r2, #1
 800e39c:	9302      	str	r3, [sp, #8]
 800e39e:	60a2      	str	r2, [r4, #8]
 800e3a0:	68a3      	ldr	r3, [r4, #8]
 800e3a2:	3b01      	subs	r3, #1
 800e3a4:	60a3      	str	r3, [r4, #8]
 800e3a6:	6923      	ldr	r3, [r4, #16]
 800e3a8:	3301      	adds	r3, #1
 800e3aa:	6123      	str	r3, [r4, #16]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	3b01      	subs	r3, #1
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	607b      	str	r3, [r7, #4]
 800e3b4:	f340 8084 	ble.w	800e4c0 <_scanf_float+0x278>
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	603b      	str	r3, [r7, #0]
 800e3be:	e766      	b.n	800e28e <_scanf_float+0x46>
 800e3c0:	eb1a 0f05 	cmn.w	sl, r5
 800e3c4:	f47f af70 	bne.w	800e2a8 <_scanf_float+0x60>
 800e3c8:	6822      	ldr	r2, [r4, #0]
 800e3ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e3ce:	6022      	str	r2, [r4, #0]
 800e3d0:	f806 3b01 	strb.w	r3, [r6], #1
 800e3d4:	e7e4      	b.n	800e3a0 <_scanf_float+0x158>
 800e3d6:	6822      	ldr	r2, [r4, #0]
 800e3d8:	0610      	lsls	r0, r2, #24
 800e3da:	f57f af65 	bpl.w	800e2a8 <_scanf_float+0x60>
 800e3de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e3e2:	e7f4      	b.n	800e3ce <_scanf_float+0x186>
 800e3e4:	f1ba 0f00 	cmp.w	sl, #0
 800e3e8:	d10e      	bne.n	800e408 <_scanf_float+0x1c0>
 800e3ea:	f1b9 0f00 	cmp.w	r9, #0
 800e3ee:	d10e      	bne.n	800e40e <_scanf_float+0x1c6>
 800e3f0:	6822      	ldr	r2, [r4, #0]
 800e3f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e3f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e3fa:	d108      	bne.n	800e40e <_scanf_float+0x1c6>
 800e3fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e400:	6022      	str	r2, [r4, #0]
 800e402:	f04f 0a01 	mov.w	sl, #1
 800e406:	e7e3      	b.n	800e3d0 <_scanf_float+0x188>
 800e408:	f1ba 0f02 	cmp.w	sl, #2
 800e40c:	d055      	beq.n	800e4ba <_scanf_float+0x272>
 800e40e:	2d01      	cmp	r5, #1
 800e410:	d002      	beq.n	800e418 <_scanf_float+0x1d0>
 800e412:	2d04      	cmp	r5, #4
 800e414:	f47f af48 	bne.w	800e2a8 <_scanf_float+0x60>
 800e418:	3501      	adds	r5, #1
 800e41a:	b2ed      	uxtb	r5, r5
 800e41c:	e7d8      	b.n	800e3d0 <_scanf_float+0x188>
 800e41e:	f1ba 0f01 	cmp.w	sl, #1
 800e422:	f47f af41 	bne.w	800e2a8 <_scanf_float+0x60>
 800e426:	f04f 0a02 	mov.w	sl, #2
 800e42a:	e7d1      	b.n	800e3d0 <_scanf_float+0x188>
 800e42c:	b97d      	cbnz	r5, 800e44e <_scanf_float+0x206>
 800e42e:	f1b9 0f00 	cmp.w	r9, #0
 800e432:	f47f af3c 	bne.w	800e2ae <_scanf_float+0x66>
 800e436:	6822      	ldr	r2, [r4, #0]
 800e438:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e43c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e440:	f47f af39 	bne.w	800e2b6 <_scanf_float+0x6e>
 800e444:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e448:	6022      	str	r2, [r4, #0]
 800e44a:	2501      	movs	r5, #1
 800e44c:	e7c0      	b.n	800e3d0 <_scanf_float+0x188>
 800e44e:	2d03      	cmp	r5, #3
 800e450:	d0e2      	beq.n	800e418 <_scanf_float+0x1d0>
 800e452:	2d05      	cmp	r5, #5
 800e454:	e7de      	b.n	800e414 <_scanf_float+0x1cc>
 800e456:	2d02      	cmp	r5, #2
 800e458:	f47f af26 	bne.w	800e2a8 <_scanf_float+0x60>
 800e45c:	2503      	movs	r5, #3
 800e45e:	e7b7      	b.n	800e3d0 <_scanf_float+0x188>
 800e460:	2d06      	cmp	r5, #6
 800e462:	f47f af21 	bne.w	800e2a8 <_scanf_float+0x60>
 800e466:	2507      	movs	r5, #7
 800e468:	e7b2      	b.n	800e3d0 <_scanf_float+0x188>
 800e46a:	6822      	ldr	r2, [r4, #0]
 800e46c:	0591      	lsls	r1, r2, #22
 800e46e:	f57f af1b 	bpl.w	800e2a8 <_scanf_float+0x60>
 800e472:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e476:	6022      	str	r2, [r4, #0]
 800e478:	f8cd 9004 	str.w	r9, [sp, #4]
 800e47c:	e7a8      	b.n	800e3d0 <_scanf_float+0x188>
 800e47e:	6822      	ldr	r2, [r4, #0]
 800e480:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e484:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e488:	d006      	beq.n	800e498 <_scanf_float+0x250>
 800e48a:	0550      	lsls	r0, r2, #21
 800e48c:	f57f af0c 	bpl.w	800e2a8 <_scanf_float+0x60>
 800e490:	f1b9 0f00 	cmp.w	r9, #0
 800e494:	f43f af0f 	beq.w	800e2b6 <_scanf_float+0x6e>
 800e498:	0591      	lsls	r1, r2, #22
 800e49a:	bf58      	it	pl
 800e49c:	9901      	ldrpl	r1, [sp, #4]
 800e49e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e4a2:	bf58      	it	pl
 800e4a4:	eba9 0101 	subpl.w	r1, r9, r1
 800e4a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e4ac:	bf58      	it	pl
 800e4ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e4b2:	6022      	str	r2, [r4, #0]
 800e4b4:	f04f 0900 	mov.w	r9, #0
 800e4b8:	e78a      	b.n	800e3d0 <_scanf_float+0x188>
 800e4ba:	f04f 0a03 	mov.w	sl, #3
 800e4be:	e787      	b.n	800e3d0 <_scanf_float+0x188>
 800e4c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e4c4:	4639      	mov	r1, r7
 800e4c6:	4640      	mov	r0, r8
 800e4c8:	4798      	blx	r3
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	f43f aedf 	beq.w	800e28e <_scanf_float+0x46>
 800e4d0:	e6ea      	b.n	800e2a8 <_scanf_float+0x60>
 800e4d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e4d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e4da:	463a      	mov	r2, r7
 800e4dc:	4640      	mov	r0, r8
 800e4de:	4798      	blx	r3
 800e4e0:	6923      	ldr	r3, [r4, #16]
 800e4e2:	3b01      	subs	r3, #1
 800e4e4:	6123      	str	r3, [r4, #16]
 800e4e6:	e6ec      	b.n	800e2c2 <_scanf_float+0x7a>
 800e4e8:	1e6b      	subs	r3, r5, #1
 800e4ea:	2b06      	cmp	r3, #6
 800e4ec:	d825      	bhi.n	800e53a <_scanf_float+0x2f2>
 800e4ee:	2d02      	cmp	r5, #2
 800e4f0:	d836      	bhi.n	800e560 <_scanf_float+0x318>
 800e4f2:	455e      	cmp	r6, fp
 800e4f4:	f67f aee8 	bls.w	800e2c8 <_scanf_float+0x80>
 800e4f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e4fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e500:	463a      	mov	r2, r7
 800e502:	4640      	mov	r0, r8
 800e504:	4798      	blx	r3
 800e506:	6923      	ldr	r3, [r4, #16]
 800e508:	3b01      	subs	r3, #1
 800e50a:	6123      	str	r3, [r4, #16]
 800e50c:	e7f1      	b.n	800e4f2 <_scanf_float+0x2aa>
 800e50e:	9802      	ldr	r0, [sp, #8]
 800e510:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e514:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e518:	9002      	str	r0, [sp, #8]
 800e51a:	463a      	mov	r2, r7
 800e51c:	4640      	mov	r0, r8
 800e51e:	4798      	blx	r3
 800e520:	6923      	ldr	r3, [r4, #16]
 800e522:	3b01      	subs	r3, #1
 800e524:	6123      	str	r3, [r4, #16]
 800e526:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e52a:	fa5f fa8a 	uxtb.w	sl, sl
 800e52e:	f1ba 0f02 	cmp.w	sl, #2
 800e532:	d1ec      	bne.n	800e50e <_scanf_float+0x2c6>
 800e534:	3d03      	subs	r5, #3
 800e536:	b2ed      	uxtb	r5, r5
 800e538:	1b76      	subs	r6, r6, r5
 800e53a:	6823      	ldr	r3, [r4, #0]
 800e53c:	05da      	lsls	r2, r3, #23
 800e53e:	d52f      	bpl.n	800e5a0 <_scanf_float+0x358>
 800e540:	055b      	lsls	r3, r3, #21
 800e542:	d510      	bpl.n	800e566 <_scanf_float+0x31e>
 800e544:	455e      	cmp	r6, fp
 800e546:	f67f aebf 	bls.w	800e2c8 <_scanf_float+0x80>
 800e54a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e54e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e552:	463a      	mov	r2, r7
 800e554:	4640      	mov	r0, r8
 800e556:	4798      	blx	r3
 800e558:	6923      	ldr	r3, [r4, #16]
 800e55a:	3b01      	subs	r3, #1
 800e55c:	6123      	str	r3, [r4, #16]
 800e55e:	e7f1      	b.n	800e544 <_scanf_float+0x2fc>
 800e560:	46aa      	mov	sl, r5
 800e562:	9602      	str	r6, [sp, #8]
 800e564:	e7df      	b.n	800e526 <_scanf_float+0x2de>
 800e566:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e56a:	6923      	ldr	r3, [r4, #16]
 800e56c:	2965      	cmp	r1, #101	; 0x65
 800e56e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e572:	f106 35ff 	add.w	r5, r6, #4294967295
 800e576:	6123      	str	r3, [r4, #16]
 800e578:	d00c      	beq.n	800e594 <_scanf_float+0x34c>
 800e57a:	2945      	cmp	r1, #69	; 0x45
 800e57c:	d00a      	beq.n	800e594 <_scanf_float+0x34c>
 800e57e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e582:	463a      	mov	r2, r7
 800e584:	4640      	mov	r0, r8
 800e586:	4798      	blx	r3
 800e588:	6923      	ldr	r3, [r4, #16]
 800e58a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e58e:	3b01      	subs	r3, #1
 800e590:	1eb5      	subs	r5, r6, #2
 800e592:	6123      	str	r3, [r4, #16]
 800e594:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e598:	463a      	mov	r2, r7
 800e59a:	4640      	mov	r0, r8
 800e59c:	4798      	blx	r3
 800e59e:	462e      	mov	r6, r5
 800e5a0:	6825      	ldr	r5, [r4, #0]
 800e5a2:	f015 0510 	ands.w	r5, r5, #16
 800e5a6:	d158      	bne.n	800e65a <_scanf_float+0x412>
 800e5a8:	7035      	strb	r5, [r6, #0]
 800e5aa:	6823      	ldr	r3, [r4, #0]
 800e5ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e5b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5b4:	d11c      	bne.n	800e5f0 <_scanf_float+0x3a8>
 800e5b6:	9b01      	ldr	r3, [sp, #4]
 800e5b8:	454b      	cmp	r3, r9
 800e5ba:	eba3 0209 	sub.w	r2, r3, r9
 800e5be:	d124      	bne.n	800e60a <_scanf_float+0x3c2>
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	4659      	mov	r1, fp
 800e5c4:	4640      	mov	r0, r8
 800e5c6:	f002 fcdf 	bl	8010f88 <_strtod_r>
 800e5ca:	9b03      	ldr	r3, [sp, #12]
 800e5cc:	6821      	ldr	r1, [r4, #0]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f011 0f02 	tst.w	r1, #2
 800e5d4:	ec57 6b10 	vmov	r6, r7, d0
 800e5d8:	f103 0204 	add.w	r2, r3, #4
 800e5dc:	d020      	beq.n	800e620 <_scanf_float+0x3d8>
 800e5de:	9903      	ldr	r1, [sp, #12]
 800e5e0:	600a      	str	r2, [r1, #0]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	e9c3 6700 	strd	r6, r7, [r3]
 800e5e8:	68e3      	ldr	r3, [r4, #12]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	60e3      	str	r3, [r4, #12]
 800e5ee:	e66c      	b.n	800e2ca <_scanf_float+0x82>
 800e5f0:	9b04      	ldr	r3, [sp, #16]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d0e4      	beq.n	800e5c0 <_scanf_float+0x378>
 800e5f6:	9905      	ldr	r1, [sp, #20]
 800e5f8:	230a      	movs	r3, #10
 800e5fa:	462a      	mov	r2, r5
 800e5fc:	3101      	adds	r1, #1
 800e5fe:	4640      	mov	r0, r8
 800e600:	f002 fd4a 	bl	8011098 <_strtol_r>
 800e604:	9b04      	ldr	r3, [sp, #16]
 800e606:	9e05      	ldr	r6, [sp, #20]
 800e608:	1ac2      	subs	r2, r0, r3
 800e60a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e60e:	429e      	cmp	r6, r3
 800e610:	bf28      	it	cs
 800e612:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e616:	4912      	ldr	r1, [pc, #72]	; (800e660 <_scanf_float+0x418>)
 800e618:	4630      	mov	r0, r6
 800e61a:	f000 f8e7 	bl	800e7ec <siprintf>
 800e61e:	e7cf      	b.n	800e5c0 <_scanf_float+0x378>
 800e620:	f011 0f04 	tst.w	r1, #4
 800e624:	9903      	ldr	r1, [sp, #12]
 800e626:	600a      	str	r2, [r1, #0]
 800e628:	d1db      	bne.n	800e5e2 <_scanf_float+0x39a>
 800e62a:	f8d3 8000 	ldr.w	r8, [r3]
 800e62e:	ee10 2a10 	vmov	r2, s0
 800e632:	ee10 0a10 	vmov	r0, s0
 800e636:	463b      	mov	r3, r7
 800e638:	4639      	mov	r1, r7
 800e63a:	f7f2 fa77 	bl	8000b2c <__aeabi_dcmpun>
 800e63e:	b128      	cbz	r0, 800e64c <_scanf_float+0x404>
 800e640:	4808      	ldr	r0, [pc, #32]	; (800e664 <_scanf_float+0x41c>)
 800e642:	f000 fa67 	bl	800eb14 <nanf>
 800e646:	ed88 0a00 	vstr	s0, [r8]
 800e64a:	e7cd      	b.n	800e5e8 <_scanf_float+0x3a0>
 800e64c:	4630      	mov	r0, r6
 800e64e:	4639      	mov	r1, r7
 800e650:	f7f2 faca 	bl	8000be8 <__aeabi_d2f>
 800e654:	f8c8 0000 	str.w	r0, [r8]
 800e658:	e7c6      	b.n	800e5e8 <_scanf_float+0x3a0>
 800e65a:	2500      	movs	r5, #0
 800e65c:	e635      	b.n	800e2ca <_scanf_float+0x82>
 800e65e:	bf00      	nop
 800e660:	0801436e 	.word	0x0801436e
 800e664:	08014720 	.word	0x08014720

0800e668 <std>:
 800e668:	2300      	movs	r3, #0
 800e66a:	b510      	push	{r4, lr}
 800e66c:	4604      	mov	r4, r0
 800e66e:	e9c0 3300 	strd	r3, r3, [r0]
 800e672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e676:	6083      	str	r3, [r0, #8]
 800e678:	8181      	strh	r1, [r0, #12]
 800e67a:	6643      	str	r3, [r0, #100]	; 0x64
 800e67c:	81c2      	strh	r2, [r0, #14]
 800e67e:	6183      	str	r3, [r0, #24]
 800e680:	4619      	mov	r1, r3
 800e682:	2208      	movs	r2, #8
 800e684:	305c      	adds	r0, #92	; 0x5c
 800e686:	f000 f942 	bl	800e90e <memset>
 800e68a:	4b0d      	ldr	r3, [pc, #52]	; (800e6c0 <std+0x58>)
 800e68c:	6263      	str	r3, [r4, #36]	; 0x24
 800e68e:	4b0d      	ldr	r3, [pc, #52]	; (800e6c4 <std+0x5c>)
 800e690:	62a3      	str	r3, [r4, #40]	; 0x28
 800e692:	4b0d      	ldr	r3, [pc, #52]	; (800e6c8 <std+0x60>)
 800e694:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e696:	4b0d      	ldr	r3, [pc, #52]	; (800e6cc <std+0x64>)
 800e698:	6323      	str	r3, [r4, #48]	; 0x30
 800e69a:	4b0d      	ldr	r3, [pc, #52]	; (800e6d0 <std+0x68>)
 800e69c:	6224      	str	r4, [r4, #32]
 800e69e:	429c      	cmp	r4, r3
 800e6a0:	d006      	beq.n	800e6b0 <std+0x48>
 800e6a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e6a6:	4294      	cmp	r4, r2
 800e6a8:	d002      	beq.n	800e6b0 <std+0x48>
 800e6aa:	33d0      	adds	r3, #208	; 0xd0
 800e6ac:	429c      	cmp	r4, r3
 800e6ae:	d105      	bne.n	800e6bc <std+0x54>
 800e6b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6b8:	f000 ba12 	b.w	800eae0 <__retarget_lock_init_recursive>
 800e6bc:	bd10      	pop	{r4, pc}
 800e6be:	bf00      	nop
 800e6c0:	0800e885 	.word	0x0800e885
 800e6c4:	0800e8ab 	.word	0x0800e8ab
 800e6c8:	0800e8e3 	.word	0x0800e8e3
 800e6cc:	0800e907 	.word	0x0800e907
 800e6d0:	20008b2c 	.word	0x20008b2c

0800e6d4 <stdio_exit_handler>:
 800e6d4:	4a02      	ldr	r2, [pc, #8]	; (800e6e0 <stdio_exit_handler+0xc>)
 800e6d6:	4903      	ldr	r1, [pc, #12]	; (800e6e4 <stdio_exit_handler+0x10>)
 800e6d8:	4803      	ldr	r0, [pc, #12]	; (800e6e8 <stdio_exit_handler+0x14>)
 800e6da:	f000 b869 	b.w	800e7b0 <_fwalk_sglue>
 800e6de:	bf00      	nop
 800e6e0:	200000d8 	.word	0x200000d8
 800e6e4:	08011a99 	.word	0x08011a99
 800e6e8:	200000e4 	.word	0x200000e4

0800e6ec <cleanup_stdio>:
 800e6ec:	6841      	ldr	r1, [r0, #4]
 800e6ee:	4b0c      	ldr	r3, [pc, #48]	; (800e720 <cleanup_stdio+0x34>)
 800e6f0:	4299      	cmp	r1, r3
 800e6f2:	b510      	push	{r4, lr}
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	d001      	beq.n	800e6fc <cleanup_stdio+0x10>
 800e6f8:	f003 f9ce 	bl	8011a98 <_fflush_r>
 800e6fc:	68a1      	ldr	r1, [r4, #8]
 800e6fe:	4b09      	ldr	r3, [pc, #36]	; (800e724 <cleanup_stdio+0x38>)
 800e700:	4299      	cmp	r1, r3
 800e702:	d002      	beq.n	800e70a <cleanup_stdio+0x1e>
 800e704:	4620      	mov	r0, r4
 800e706:	f003 f9c7 	bl	8011a98 <_fflush_r>
 800e70a:	68e1      	ldr	r1, [r4, #12]
 800e70c:	4b06      	ldr	r3, [pc, #24]	; (800e728 <cleanup_stdio+0x3c>)
 800e70e:	4299      	cmp	r1, r3
 800e710:	d004      	beq.n	800e71c <cleanup_stdio+0x30>
 800e712:	4620      	mov	r0, r4
 800e714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e718:	f003 b9be 	b.w	8011a98 <_fflush_r>
 800e71c:	bd10      	pop	{r4, pc}
 800e71e:	bf00      	nop
 800e720:	20008b2c 	.word	0x20008b2c
 800e724:	20008b94 	.word	0x20008b94
 800e728:	20008bfc 	.word	0x20008bfc

0800e72c <global_stdio_init.part.0>:
 800e72c:	b510      	push	{r4, lr}
 800e72e:	4b0b      	ldr	r3, [pc, #44]	; (800e75c <global_stdio_init.part.0+0x30>)
 800e730:	4c0b      	ldr	r4, [pc, #44]	; (800e760 <global_stdio_init.part.0+0x34>)
 800e732:	4a0c      	ldr	r2, [pc, #48]	; (800e764 <global_stdio_init.part.0+0x38>)
 800e734:	601a      	str	r2, [r3, #0]
 800e736:	4620      	mov	r0, r4
 800e738:	2200      	movs	r2, #0
 800e73a:	2104      	movs	r1, #4
 800e73c:	f7ff ff94 	bl	800e668 <std>
 800e740:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e744:	2201      	movs	r2, #1
 800e746:	2109      	movs	r1, #9
 800e748:	f7ff ff8e 	bl	800e668 <std>
 800e74c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e750:	2202      	movs	r2, #2
 800e752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e756:	2112      	movs	r1, #18
 800e758:	f7ff bf86 	b.w	800e668 <std>
 800e75c:	20008c64 	.word	0x20008c64
 800e760:	20008b2c 	.word	0x20008b2c
 800e764:	0800e6d5 	.word	0x0800e6d5

0800e768 <__sfp_lock_acquire>:
 800e768:	4801      	ldr	r0, [pc, #4]	; (800e770 <__sfp_lock_acquire+0x8>)
 800e76a:	f000 b9ba 	b.w	800eae2 <__retarget_lock_acquire_recursive>
 800e76e:	bf00      	nop
 800e770:	20008c6d 	.word	0x20008c6d

0800e774 <__sfp_lock_release>:
 800e774:	4801      	ldr	r0, [pc, #4]	; (800e77c <__sfp_lock_release+0x8>)
 800e776:	f000 b9b5 	b.w	800eae4 <__retarget_lock_release_recursive>
 800e77a:	bf00      	nop
 800e77c:	20008c6d 	.word	0x20008c6d

0800e780 <__sinit>:
 800e780:	b510      	push	{r4, lr}
 800e782:	4604      	mov	r4, r0
 800e784:	f7ff fff0 	bl	800e768 <__sfp_lock_acquire>
 800e788:	6a23      	ldr	r3, [r4, #32]
 800e78a:	b11b      	cbz	r3, 800e794 <__sinit+0x14>
 800e78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e790:	f7ff bff0 	b.w	800e774 <__sfp_lock_release>
 800e794:	4b04      	ldr	r3, [pc, #16]	; (800e7a8 <__sinit+0x28>)
 800e796:	6223      	str	r3, [r4, #32]
 800e798:	4b04      	ldr	r3, [pc, #16]	; (800e7ac <__sinit+0x2c>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d1f5      	bne.n	800e78c <__sinit+0xc>
 800e7a0:	f7ff ffc4 	bl	800e72c <global_stdio_init.part.0>
 800e7a4:	e7f2      	b.n	800e78c <__sinit+0xc>
 800e7a6:	bf00      	nop
 800e7a8:	0800e6ed 	.word	0x0800e6ed
 800e7ac:	20008c64 	.word	0x20008c64

0800e7b0 <_fwalk_sglue>:
 800e7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7b4:	4607      	mov	r7, r0
 800e7b6:	4688      	mov	r8, r1
 800e7b8:	4614      	mov	r4, r2
 800e7ba:	2600      	movs	r6, #0
 800e7bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e7c0:	f1b9 0901 	subs.w	r9, r9, #1
 800e7c4:	d505      	bpl.n	800e7d2 <_fwalk_sglue+0x22>
 800e7c6:	6824      	ldr	r4, [r4, #0]
 800e7c8:	2c00      	cmp	r4, #0
 800e7ca:	d1f7      	bne.n	800e7bc <_fwalk_sglue+0xc>
 800e7cc:	4630      	mov	r0, r6
 800e7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7d2:	89ab      	ldrh	r3, [r5, #12]
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d907      	bls.n	800e7e8 <_fwalk_sglue+0x38>
 800e7d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7dc:	3301      	adds	r3, #1
 800e7de:	d003      	beq.n	800e7e8 <_fwalk_sglue+0x38>
 800e7e0:	4629      	mov	r1, r5
 800e7e2:	4638      	mov	r0, r7
 800e7e4:	47c0      	blx	r8
 800e7e6:	4306      	orrs	r6, r0
 800e7e8:	3568      	adds	r5, #104	; 0x68
 800e7ea:	e7e9      	b.n	800e7c0 <_fwalk_sglue+0x10>

0800e7ec <siprintf>:
 800e7ec:	b40e      	push	{r1, r2, r3}
 800e7ee:	b500      	push	{lr}
 800e7f0:	b09c      	sub	sp, #112	; 0x70
 800e7f2:	ab1d      	add	r3, sp, #116	; 0x74
 800e7f4:	9002      	str	r0, [sp, #8]
 800e7f6:	9006      	str	r0, [sp, #24]
 800e7f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e7fc:	4809      	ldr	r0, [pc, #36]	; (800e824 <siprintf+0x38>)
 800e7fe:	9107      	str	r1, [sp, #28]
 800e800:	9104      	str	r1, [sp, #16]
 800e802:	4909      	ldr	r1, [pc, #36]	; (800e828 <siprintf+0x3c>)
 800e804:	f853 2b04 	ldr.w	r2, [r3], #4
 800e808:	9105      	str	r1, [sp, #20]
 800e80a:	6800      	ldr	r0, [r0, #0]
 800e80c:	9301      	str	r3, [sp, #4]
 800e80e:	a902      	add	r1, sp, #8
 800e810:	f002 fc9e 	bl	8011150 <_svfiprintf_r>
 800e814:	9b02      	ldr	r3, [sp, #8]
 800e816:	2200      	movs	r2, #0
 800e818:	701a      	strb	r2, [r3, #0]
 800e81a:	b01c      	add	sp, #112	; 0x70
 800e81c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e820:	b003      	add	sp, #12
 800e822:	4770      	bx	lr
 800e824:	20000130 	.word	0x20000130
 800e828:	ffff0208 	.word	0xffff0208

0800e82c <siscanf>:
 800e82c:	b40e      	push	{r1, r2, r3}
 800e82e:	b510      	push	{r4, lr}
 800e830:	b09f      	sub	sp, #124	; 0x7c
 800e832:	ac21      	add	r4, sp, #132	; 0x84
 800e834:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e838:	f854 2b04 	ldr.w	r2, [r4], #4
 800e83c:	9201      	str	r2, [sp, #4]
 800e83e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e842:	9004      	str	r0, [sp, #16]
 800e844:	9008      	str	r0, [sp, #32]
 800e846:	f7f1 fd13 	bl	8000270 <strlen>
 800e84a:	4b0c      	ldr	r3, [pc, #48]	; (800e87c <siscanf+0x50>)
 800e84c:	9005      	str	r0, [sp, #20]
 800e84e:	9009      	str	r0, [sp, #36]	; 0x24
 800e850:	930d      	str	r3, [sp, #52]	; 0x34
 800e852:	480b      	ldr	r0, [pc, #44]	; (800e880 <siscanf+0x54>)
 800e854:	9a01      	ldr	r2, [sp, #4]
 800e856:	6800      	ldr	r0, [r0, #0]
 800e858:	9403      	str	r4, [sp, #12]
 800e85a:	2300      	movs	r3, #0
 800e85c:	9311      	str	r3, [sp, #68]	; 0x44
 800e85e:	9316      	str	r3, [sp, #88]	; 0x58
 800e860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e864:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e868:	a904      	add	r1, sp, #16
 800e86a:	4623      	mov	r3, r4
 800e86c:	f002 fdc8 	bl	8011400 <__ssvfiscanf_r>
 800e870:	b01f      	add	sp, #124	; 0x7c
 800e872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e876:	b003      	add	sp, #12
 800e878:	4770      	bx	lr
 800e87a:	bf00      	nop
 800e87c:	0800e8a7 	.word	0x0800e8a7
 800e880:	20000130 	.word	0x20000130

0800e884 <__sread>:
 800e884:	b510      	push	{r4, lr}
 800e886:	460c      	mov	r4, r1
 800e888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e88c:	f000 f8da 	bl	800ea44 <_read_r>
 800e890:	2800      	cmp	r0, #0
 800e892:	bfab      	itete	ge
 800e894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e896:	89a3      	ldrhlt	r3, [r4, #12]
 800e898:	181b      	addge	r3, r3, r0
 800e89a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e89e:	bfac      	ite	ge
 800e8a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e8a2:	81a3      	strhlt	r3, [r4, #12]
 800e8a4:	bd10      	pop	{r4, pc}

0800e8a6 <__seofread>:
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	4770      	bx	lr

0800e8aa <__swrite>:
 800e8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8ae:	461f      	mov	r7, r3
 800e8b0:	898b      	ldrh	r3, [r1, #12]
 800e8b2:	05db      	lsls	r3, r3, #23
 800e8b4:	4605      	mov	r5, r0
 800e8b6:	460c      	mov	r4, r1
 800e8b8:	4616      	mov	r6, r2
 800e8ba:	d505      	bpl.n	800e8c8 <__swrite+0x1e>
 800e8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8c0:	2302      	movs	r3, #2
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f000 f8ac 	bl	800ea20 <_lseek_r>
 800e8c8:	89a3      	ldrh	r3, [r4, #12]
 800e8ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e8d2:	81a3      	strh	r3, [r4, #12]
 800e8d4:	4632      	mov	r2, r6
 800e8d6:	463b      	mov	r3, r7
 800e8d8:	4628      	mov	r0, r5
 800e8da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8de:	f000 b8c3 	b.w	800ea68 <_write_r>

0800e8e2 <__sseek>:
 800e8e2:	b510      	push	{r4, lr}
 800e8e4:	460c      	mov	r4, r1
 800e8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8ea:	f000 f899 	bl	800ea20 <_lseek_r>
 800e8ee:	1c43      	adds	r3, r0, #1
 800e8f0:	89a3      	ldrh	r3, [r4, #12]
 800e8f2:	bf15      	itete	ne
 800e8f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e8f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e8fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e8fe:	81a3      	strheq	r3, [r4, #12]
 800e900:	bf18      	it	ne
 800e902:	81a3      	strhne	r3, [r4, #12]
 800e904:	bd10      	pop	{r4, pc}

0800e906 <__sclose>:
 800e906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e90a:	f000 b823 	b.w	800e954 <_close_r>

0800e90e <memset>:
 800e90e:	4402      	add	r2, r0
 800e910:	4603      	mov	r3, r0
 800e912:	4293      	cmp	r3, r2
 800e914:	d100      	bne.n	800e918 <memset+0xa>
 800e916:	4770      	bx	lr
 800e918:	f803 1b01 	strb.w	r1, [r3], #1
 800e91c:	e7f9      	b.n	800e912 <memset+0x4>

0800e91e <strstr>:
 800e91e:	780a      	ldrb	r2, [r1, #0]
 800e920:	b570      	push	{r4, r5, r6, lr}
 800e922:	b96a      	cbnz	r2, 800e940 <strstr+0x22>
 800e924:	bd70      	pop	{r4, r5, r6, pc}
 800e926:	429a      	cmp	r2, r3
 800e928:	d109      	bne.n	800e93e <strstr+0x20>
 800e92a:	460c      	mov	r4, r1
 800e92c:	4605      	mov	r5, r0
 800e92e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e932:	2b00      	cmp	r3, #0
 800e934:	d0f6      	beq.n	800e924 <strstr+0x6>
 800e936:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e93a:	429e      	cmp	r6, r3
 800e93c:	d0f7      	beq.n	800e92e <strstr+0x10>
 800e93e:	3001      	adds	r0, #1
 800e940:	7803      	ldrb	r3, [r0, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d1ef      	bne.n	800e926 <strstr+0x8>
 800e946:	4618      	mov	r0, r3
 800e948:	e7ec      	b.n	800e924 <strstr+0x6>
	...

0800e94c <_localeconv_r>:
 800e94c:	4800      	ldr	r0, [pc, #0]	; (800e950 <_localeconv_r+0x4>)
 800e94e:	4770      	bx	lr
 800e950:	20000224 	.word	0x20000224

0800e954 <_close_r>:
 800e954:	b538      	push	{r3, r4, r5, lr}
 800e956:	4d06      	ldr	r5, [pc, #24]	; (800e970 <_close_r+0x1c>)
 800e958:	2300      	movs	r3, #0
 800e95a:	4604      	mov	r4, r0
 800e95c:	4608      	mov	r0, r1
 800e95e:	602b      	str	r3, [r5, #0]
 800e960:	f7f5 fa0b 	bl	8003d7a <_close>
 800e964:	1c43      	adds	r3, r0, #1
 800e966:	d102      	bne.n	800e96e <_close_r+0x1a>
 800e968:	682b      	ldr	r3, [r5, #0]
 800e96a:	b103      	cbz	r3, 800e96e <_close_r+0x1a>
 800e96c:	6023      	str	r3, [r4, #0]
 800e96e:	bd38      	pop	{r3, r4, r5, pc}
 800e970:	20008c68 	.word	0x20008c68

0800e974 <_reclaim_reent>:
 800e974:	4b29      	ldr	r3, [pc, #164]	; (800ea1c <_reclaim_reent+0xa8>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4283      	cmp	r3, r0
 800e97a:	b570      	push	{r4, r5, r6, lr}
 800e97c:	4604      	mov	r4, r0
 800e97e:	d04b      	beq.n	800ea18 <_reclaim_reent+0xa4>
 800e980:	69c3      	ldr	r3, [r0, #28]
 800e982:	b143      	cbz	r3, 800e996 <_reclaim_reent+0x22>
 800e984:	68db      	ldr	r3, [r3, #12]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d144      	bne.n	800ea14 <_reclaim_reent+0xa0>
 800e98a:	69e3      	ldr	r3, [r4, #28]
 800e98c:	6819      	ldr	r1, [r3, #0]
 800e98e:	b111      	cbz	r1, 800e996 <_reclaim_reent+0x22>
 800e990:	4620      	mov	r0, r4
 800e992:	f000 ff3f 	bl	800f814 <_free_r>
 800e996:	6961      	ldr	r1, [r4, #20]
 800e998:	b111      	cbz	r1, 800e9a0 <_reclaim_reent+0x2c>
 800e99a:	4620      	mov	r0, r4
 800e99c:	f000 ff3a 	bl	800f814 <_free_r>
 800e9a0:	69e1      	ldr	r1, [r4, #28]
 800e9a2:	b111      	cbz	r1, 800e9aa <_reclaim_reent+0x36>
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f000 ff35 	bl	800f814 <_free_r>
 800e9aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e9ac:	b111      	cbz	r1, 800e9b4 <_reclaim_reent+0x40>
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f000 ff30 	bl	800f814 <_free_r>
 800e9b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9b6:	b111      	cbz	r1, 800e9be <_reclaim_reent+0x4a>
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	f000 ff2b 	bl	800f814 <_free_r>
 800e9be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e9c0:	b111      	cbz	r1, 800e9c8 <_reclaim_reent+0x54>
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f000 ff26 	bl	800f814 <_free_r>
 800e9c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e9ca:	b111      	cbz	r1, 800e9d2 <_reclaim_reent+0x5e>
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	f000 ff21 	bl	800f814 <_free_r>
 800e9d2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e9d4:	b111      	cbz	r1, 800e9dc <_reclaim_reent+0x68>
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f000 ff1c 	bl	800f814 <_free_r>
 800e9dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e9de:	b111      	cbz	r1, 800e9e6 <_reclaim_reent+0x72>
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	f000 ff17 	bl	800f814 <_free_r>
 800e9e6:	6a23      	ldr	r3, [r4, #32]
 800e9e8:	b1b3      	cbz	r3, 800ea18 <_reclaim_reent+0xa4>
 800e9ea:	4620      	mov	r0, r4
 800e9ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e9f0:	4718      	bx	r3
 800e9f2:	5949      	ldr	r1, [r1, r5]
 800e9f4:	b941      	cbnz	r1, 800ea08 <_reclaim_reent+0x94>
 800e9f6:	3504      	adds	r5, #4
 800e9f8:	69e3      	ldr	r3, [r4, #28]
 800e9fa:	2d80      	cmp	r5, #128	; 0x80
 800e9fc:	68d9      	ldr	r1, [r3, #12]
 800e9fe:	d1f8      	bne.n	800e9f2 <_reclaim_reent+0x7e>
 800ea00:	4620      	mov	r0, r4
 800ea02:	f000 ff07 	bl	800f814 <_free_r>
 800ea06:	e7c0      	b.n	800e98a <_reclaim_reent+0x16>
 800ea08:	680e      	ldr	r6, [r1, #0]
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	f000 ff02 	bl	800f814 <_free_r>
 800ea10:	4631      	mov	r1, r6
 800ea12:	e7ef      	b.n	800e9f4 <_reclaim_reent+0x80>
 800ea14:	2500      	movs	r5, #0
 800ea16:	e7ef      	b.n	800e9f8 <_reclaim_reent+0x84>
 800ea18:	bd70      	pop	{r4, r5, r6, pc}
 800ea1a:	bf00      	nop
 800ea1c:	20000130 	.word	0x20000130

0800ea20 <_lseek_r>:
 800ea20:	b538      	push	{r3, r4, r5, lr}
 800ea22:	4d07      	ldr	r5, [pc, #28]	; (800ea40 <_lseek_r+0x20>)
 800ea24:	4604      	mov	r4, r0
 800ea26:	4608      	mov	r0, r1
 800ea28:	4611      	mov	r1, r2
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	602a      	str	r2, [r5, #0]
 800ea2e:	461a      	mov	r2, r3
 800ea30:	f7f5 f9ca 	bl	8003dc8 <_lseek>
 800ea34:	1c43      	adds	r3, r0, #1
 800ea36:	d102      	bne.n	800ea3e <_lseek_r+0x1e>
 800ea38:	682b      	ldr	r3, [r5, #0]
 800ea3a:	b103      	cbz	r3, 800ea3e <_lseek_r+0x1e>
 800ea3c:	6023      	str	r3, [r4, #0]
 800ea3e:	bd38      	pop	{r3, r4, r5, pc}
 800ea40:	20008c68 	.word	0x20008c68

0800ea44 <_read_r>:
 800ea44:	b538      	push	{r3, r4, r5, lr}
 800ea46:	4d07      	ldr	r5, [pc, #28]	; (800ea64 <_read_r+0x20>)
 800ea48:	4604      	mov	r4, r0
 800ea4a:	4608      	mov	r0, r1
 800ea4c:	4611      	mov	r1, r2
 800ea4e:	2200      	movs	r2, #0
 800ea50:	602a      	str	r2, [r5, #0]
 800ea52:	461a      	mov	r2, r3
 800ea54:	f7f5 f958 	bl	8003d08 <_read>
 800ea58:	1c43      	adds	r3, r0, #1
 800ea5a:	d102      	bne.n	800ea62 <_read_r+0x1e>
 800ea5c:	682b      	ldr	r3, [r5, #0]
 800ea5e:	b103      	cbz	r3, 800ea62 <_read_r+0x1e>
 800ea60:	6023      	str	r3, [r4, #0]
 800ea62:	bd38      	pop	{r3, r4, r5, pc}
 800ea64:	20008c68 	.word	0x20008c68

0800ea68 <_write_r>:
 800ea68:	b538      	push	{r3, r4, r5, lr}
 800ea6a:	4d07      	ldr	r5, [pc, #28]	; (800ea88 <_write_r+0x20>)
 800ea6c:	4604      	mov	r4, r0
 800ea6e:	4608      	mov	r0, r1
 800ea70:	4611      	mov	r1, r2
 800ea72:	2200      	movs	r2, #0
 800ea74:	602a      	str	r2, [r5, #0]
 800ea76:	461a      	mov	r2, r3
 800ea78:	f7f5 f963 	bl	8003d42 <_write>
 800ea7c:	1c43      	adds	r3, r0, #1
 800ea7e:	d102      	bne.n	800ea86 <_write_r+0x1e>
 800ea80:	682b      	ldr	r3, [r5, #0]
 800ea82:	b103      	cbz	r3, 800ea86 <_write_r+0x1e>
 800ea84:	6023      	str	r3, [r4, #0]
 800ea86:	bd38      	pop	{r3, r4, r5, pc}
 800ea88:	20008c68 	.word	0x20008c68

0800ea8c <__errno>:
 800ea8c:	4b01      	ldr	r3, [pc, #4]	; (800ea94 <__errno+0x8>)
 800ea8e:	6818      	ldr	r0, [r3, #0]
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	20000130 	.word	0x20000130

0800ea98 <__libc_init_array>:
 800ea98:	b570      	push	{r4, r5, r6, lr}
 800ea9a:	4d0d      	ldr	r5, [pc, #52]	; (800ead0 <__libc_init_array+0x38>)
 800ea9c:	4c0d      	ldr	r4, [pc, #52]	; (800ead4 <__libc_init_array+0x3c>)
 800ea9e:	1b64      	subs	r4, r4, r5
 800eaa0:	10a4      	asrs	r4, r4, #2
 800eaa2:	2600      	movs	r6, #0
 800eaa4:	42a6      	cmp	r6, r4
 800eaa6:	d109      	bne.n	800eabc <__libc_init_array+0x24>
 800eaa8:	4d0b      	ldr	r5, [pc, #44]	; (800ead8 <__libc_init_array+0x40>)
 800eaaa:	4c0c      	ldr	r4, [pc, #48]	; (800eadc <__libc_init_array+0x44>)
 800eaac:	f005 fbb2 	bl	8014214 <_init>
 800eab0:	1b64      	subs	r4, r4, r5
 800eab2:	10a4      	asrs	r4, r4, #2
 800eab4:	2600      	movs	r6, #0
 800eab6:	42a6      	cmp	r6, r4
 800eab8:	d105      	bne.n	800eac6 <__libc_init_array+0x2e>
 800eaba:	bd70      	pop	{r4, r5, r6, pc}
 800eabc:	f855 3b04 	ldr.w	r3, [r5], #4
 800eac0:	4798      	blx	r3
 800eac2:	3601      	adds	r6, #1
 800eac4:	e7ee      	b.n	800eaa4 <__libc_init_array+0xc>
 800eac6:	f855 3b04 	ldr.w	r3, [r5], #4
 800eaca:	4798      	blx	r3
 800eacc:	3601      	adds	r6, #1
 800eace:	e7f2      	b.n	800eab6 <__libc_init_array+0x1e>
 800ead0:	08014830 	.word	0x08014830
 800ead4:	08014830 	.word	0x08014830
 800ead8:	08014830 	.word	0x08014830
 800eadc:	08014834 	.word	0x08014834

0800eae0 <__retarget_lock_init_recursive>:
 800eae0:	4770      	bx	lr

0800eae2 <__retarget_lock_acquire_recursive>:
 800eae2:	4770      	bx	lr

0800eae4 <__retarget_lock_release_recursive>:
 800eae4:	4770      	bx	lr

0800eae6 <strcpy>:
 800eae6:	4603      	mov	r3, r0
 800eae8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eaec:	f803 2b01 	strb.w	r2, [r3], #1
 800eaf0:	2a00      	cmp	r2, #0
 800eaf2:	d1f9      	bne.n	800eae8 <strcpy+0x2>
 800eaf4:	4770      	bx	lr

0800eaf6 <memcpy>:
 800eaf6:	440a      	add	r2, r1
 800eaf8:	4291      	cmp	r1, r2
 800eafa:	f100 33ff 	add.w	r3, r0, #4294967295
 800eafe:	d100      	bne.n	800eb02 <memcpy+0xc>
 800eb00:	4770      	bx	lr
 800eb02:	b510      	push	{r4, lr}
 800eb04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb0c:	4291      	cmp	r1, r2
 800eb0e:	d1f9      	bne.n	800eb04 <memcpy+0xe>
 800eb10:	bd10      	pop	{r4, pc}
	...

0800eb14 <nanf>:
 800eb14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eb1c <nanf+0x8>
 800eb18:	4770      	bx	lr
 800eb1a:	bf00      	nop
 800eb1c:	7fc00000 	.word	0x7fc00000

0800eb20 <quorem>:
 800eb20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb24:	6903      	ldr	r3, [r0, #16]
 800eb26:	690c      	ldr	r4, [r1, #16]
 800eb28:	42a3      	cmp	r3, r4
 800eb2a:	4607      	mov	r7, r0
 800eb2c:	db7e      	blt.n	800ec2c <quorem+0x10c>
 800eb2e:	3c01      	subs	r4, #1
 800eb30:	f101 0814 	add.w	r8, r1, #20
 800eb34:	f100 0514 	add.w	r5, r0, #20
 800eb38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb3c:	9301      	str	r3, [sp, #4]
 800eb3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eb42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb46:	3301      	adds	r3, #1
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eb4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eb52:	fbb2 f6f3 	udiv	r6, r2, r3
 800eb56:	d331      	bcc.n	800ebbc <quorem+0x9c>
 800eb58:	f04f 0e00 	mov.w	lr, #0
 800eb5c:	4640      	mov	r0, r8
 800eb5e:	46ac      	mov	ip, r5
 800eb60:	46f2      	mov	sl, lr
 800eb62:	f850 2b04 	ldr.w	r2, [r0], #4
 800eb66:	b293      	uxth	r3, r2
 800eb68:	fb06 e303 	mla	r3, r6, r3, lr
 800eb6c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eb70:	0c1a      	lsrs	r2, r3, #16
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	ebaa 0303 	sub.w	r3, sl, r3
 800eb78:	f8dc a000 	ldr.w	sl, [ip]
 800eb7c:	fa13 f38a 	uxtah	r3, r3, sl
 800eb80:	fb06 220e 	mla	r2, r6, lr, r2
 800eb84:	9300      	str	r3, [sp, #0]
 800eb86:	9b00      	ldr	r3, [sp, #0]
 800eb88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eb8c:	b292      	uxth	r2, r2
 800eb8e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800eb92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eb96:	f8bd 3000 	ldrh.w	r3, [sp]
 800eb9a:	4581      	cmp	r9, r0
 800eb9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eba0:	f84c 3b04 	str.w	r3, [ip], #4
 800eba4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eba8:	d2db      	bcs.n	800eb62 <quorem+0x42>
 800ebaa:	f855 300b 	ldr.w	r3, [r5, fp]
 800ebae:	b92b      	cbnz	r3, 800ebbc <quorem+0x9c>
 800ebb0:	9b01      	ldr	r3, [sp, #4]
 800ebb2:	3b04      	subs	r3, #4
 800ebb4:	429d      	cmp	r5, r3
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	d32c      	bcc.n	800ec14 <quorem+0xf4>
 800ebba:	613c      	str	r4, [r7, #16]
 800ebbc:	4638      	mov	r0, r7
 800ebbe:	f001 f9ef 	bl	800ffa0 <__mcmp>
 800ebc2:	2800      	cmp	r0, #0
 800ebc4:	db22      	blt.n	800ec0c <quorem+0xec>
 800ebc6:	3601      	adds	r6, #1
 800ebc8:	4629      	mov	r1, r5
 800ebca:	2000      	movs	r0, #0
 800ebcc:	f858 2b04 	ldr.w	r2, [r8], #4
 800ebd0:	f8d1 c000 	ldr.w	ip, [r1]
 800ebd4:	b293      	uxth	r3, r2
 800ebd6:	1ac3      	subs	r3, r0, r3
 800ebd8:	0c12      	lsrs	r2, r2, #16
 800ebda:	fa13 f38c 	uxtah	r3, r3, ip
 800ebde:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ebe2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ebec:	45c1      	cmp	r9, r8
 800ebee:	f841 3b04 	str.w	r3, [r1], #4
 800ebf2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ebf6:	d2e9      	bcs.n	800ebcc <quorem+0xac>
 800ebf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ebfc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec00:	b922      	cbnz	r2, 800ec0c <quorem+0xec>
 800ec02:	3b04      	subs	r3, #4
 800ec04:	429d      	cmp	r5, r3
 800ec06:	461a      	mov	r2, r3
 800ec08:	d30a      	bcc.n	800ec20 <quorem+0x100>
 800ec0a:	613c      	str	r4, [r7, #16]
 800ec0c:	4630      	mov	r0, r6
 800ec0e:	b003      	add	sp, #12
 800ec10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec14:	6812      	ldr	r2, [r2, #0]
 800ec16:	3b04      	subs	r3, #4
 800ec18:	2a00      	cmp	r2, #0
 800ec1a:	d1ce      	bne.n	800ebba <quorem+0x9a>
 800ec1c:	3c01      	subs	r4, #1
 800ec1e:	e7c9      	b.n	800ebb4 <quorem+0x94>
 800ec20:	6812      	ldr	r2, [r2, #0]
 800ec22:	3b04      	subs	r3, #4
 800ec24:	2a00      	cmp	r2, #0
 800ec26:	d1f0      	bne.n	800ec0a <quorem+0xea>
 800ec28:	3c01      	subs	r4, #1
 800ec2a:	e7eb      	b.n	800ec04 <quorem+0xe4>
 800ec2c:	2000      	movs	r0, #0
 800ec2e:	e7ee      	b.n	800ec0e <quorem+0xee>

0800ec30 <_dtoa_r>:
 800ec30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec34:	ed2d 8b04 	vpush	{d8-d9}
 800ec38:	69c5      	ldr	r5, [r0, #28]
 800ec3a:	b093      	sub	sp, #76	; 0x4c
 800ec3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ec40:	ec57 6b10 	vmov	r6, r7, d0
 800ec44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ec48:	9107      	str	r1, [sp, #28]
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	920a      	str	r2, [sp, #40]	; 0x28
 800ec4e:	930d      	str	r3, [sp, #52]	; 0x34
 800ec50:	b975      	cbnz	r5, 800ec70 <_dtoa_r+0x40>
 800ec52:	2010      	movs	r0, #16
 800ec54:	f000 fe2a 	bl	800f8ac <malloc>
 800ec58:	4602      	mov	r2, r0
 800ec5a:	61e0      	str	r0, [r4, #28]
 800ec5c:	b920      	cbnz	r0, 800ec68 <_dtoa_r+0x38>
 800ec5e:	4bae      	ldr	r3, [pc, #696]	; (800ef18 <_dtoa_r+0x2e8>)
 800ec60:	21ef      	movs	r1, #239	; 0xef
 800ec62:	48ae      	ldr	r0, [pc, #696]	; (800ef1c <_dtoa_r+0x2ec>)
 800ec64:	f002 fff8 	bl	8011c58 <__assert_func>
 800ec68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ec6c:	6005      	str	r5, [r0, #0]
 800ec6e:	60c5      	str	r5, [r0, #12]
 800ec70:	69e3      	ldr	r3, [r4, #28]
 800ec72:	6819      	ldr	r1, [r3, #0]
 800ec74:	b151      	cbz	r1, 800ec8c <_dtoa_r+0x5c>
 800ec76:	685a      	ldr	r2, [r3, #4]
 800ec78:	604a      	str	r2, [r1, #4]
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	4093      	lsls	r3, r2
 800ec7e:	608b      	str	r3, [r1, #8]
 800ec80:	4620      	mov	r0, r4
 800ec82:	f000 ff07 	bl	800fa94 <_Bfree>
 800ec86:	69e3      	ldr	r3, [r4, #28]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	601a      	str	r2, [r3, #0]
 800ec8c:	1e3b      	subs	r3, r7, #0
 800ec8e:	bfbb      	ittet	lt
 800ec90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ec94:	9303      	strlt	r3, [sp, #12]
 800ec96:	2300      	movge	r3, #0
 800ec98:	2201      	movlt	r2, #1
 800ec9a:	bfac      	ite	ge
 800ec9c:	f8c8 3000 	strge.w	r3, [r8]
 800eca0:	f8c8 2000 	strlt.w	r2, [r8]
 800eca4:	4b9e      	ldr	r3, [pc, #632]	; (800ef20 <_dtoa_r+0x2f0>)
 800eca6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ecaa:	ea33 0308 	bics.w	r3, r3, r8
 800ecae:	d11b      	bne.n	800ece8 <_dtoa_r+0xb8>
 800ecb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ecb2:	f242 730f 	movw	r3, #9999	; 0x270f
 800ecb6:	6013      	str	r3, [r2, #0]
 800ecb8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ecbc:	4333      	orrs	r3, r6
 800ecbe:	f000 8593 	beq.w	800f7e8 <_dtoa_r+0xbb8>
 800ecc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ecc4:	b963      	cbnz	r3, 800ece0 <_dtoa_r+0xb0>
 800ecc6:	4b97      	ldr	r3, [pc, #604]	; (800ef24 <_dtoa_r+0x2f4>)
 800ecc8:	e027      	b.n	800ed1a <_dtoa_r+0xea>
 800ecca:	4b97      	ldr	r3, [pc, #604]	; (800ef28 <_dtoa_r+0x2f8>)
 800eccc:	9300      	str	r3, [sp, #0]
 800ecce:	3308      	adds	r3, #8
 800ecd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ecd2:	6013      	str	r3, [r2, #0]
 800ecd4:	9800      	ldr	r0, [sp, #0]
 800ecd6:	b013      	add	sp, #76	; 0x4c
 800ecd8:	ecbd 8b04 	vpop	{d8-d9}
 800ecdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ece0:	4b90      	ldr	r3, [pc, #576]	; (800ef24 <_dtoa_r+0x2f4>)
 800ece2:	9300      	str	r3, [sp, #0]
 800ece4:	3303      	adds	r3, #3
 800ece6:	e7f3      	b.n	800ecd0 <_dtoa_r+0xa0>
 800ece8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ecec:	2200      	movs	r2, #0
 800ecee:	ec51 0b17 	vmov	r0, r1, d7
 800ecf2:	eeb0 8a47 	vmov.f32	s16, s14
 800ecf6:	eef0 8a67 	vmov.f32	s17, s15
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	f7f1 fee4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed00:	4681      	mov	r9, r0
 800ed02:	b160      	cbz	r0, 800ed1e <_dtoa_r+0xee>
 800ed04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed06:	2301      	movs	r3, #1
 800ed08:	6013      	str	r3, [r2, #0]
 800ed0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	f000 8568 	beq.w	800f7e2 <_dtoa_r+0xbb2>
 800ed12:	4b86      	ldr	r3, [pc, #536]	; (800ef2c <_dtoa_r+0x2fc>)
 800ed14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ed16:	6013      	str	r3, [r2, #0]
 800ed18:	3b01      	subs	r3, #1
 800ed1a:	9300      	str	r3, [sp, #0]
 800ed1c:	e7da      	b.n	800ecd4 <_dtoa_r+0xa4>
 800ed1e:	aa10      	add	r2, sp, #64	; 0x40
 800ed20:	a911      	add	r1, sp, #68	; 0x44
 800ed22:	4620      	mov	r0, r4
 800ed24:	eeb0 0a48 	vmov.f32	s0, s16
 800ed28:	eef0 0a68 	vmov.f32	s1, s17
 800ed2c:	f001 fa4e 	bl	80101cc <__d2b>
 800ed30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ed34:	4682      	mov	sl, r0
 800ed36:	2d00      	cmp	r5, #0
 800ed38:	d07f      	beq.n	800ee3a <_dtoa_r+0x20a>
 800ed3a:	ee18 3a90 	vmov	r3, s17
 800ed3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed42:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ed46:	ec51 0b18 	vmov	r0, r1, d8
 800ed4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ed4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ed52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ed56:	4619      	mov	r1, r3
 800ed58:	2200      	movs	r2, #0
 800ed5a:	4b75      	ldr	r3, [pc, #468]	; (800ef30 <_dtoa_r+0x300>)
 800ed5c:	f7f1 fa94 	bl	8000288 <__aeabi_dsub>
 800ed60:	a367      	add	r3, pc, #412	; (adr r3, 800ef00 <_dtoa_r+0x2d0>)
 800ed62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed66:	f7f1 fc47 	bl	80005f8 <__aeabi_dmul>
 800ed6a:	a367      	add	r3, pc, #412	; (adr r3, 800ef08 <_dtoa_r+0x2d8>)
 800ed6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed70:	f7f1 fa8c 	bl	800028c <__adddf3>
 800ed74:	4606      	mov	r6, r0
 800ed76:	4628      	mov	r0, r5
 800ed78:	460f      	mov	r7, r1
 800ed7a:	f7f1 fbd3 	bl	8000524 <__aeabi_i2d>
 800ed7e:	a364      	add	r3, pc, #400	; (adr r3, 800ef10 <_dtoa_r+0x2e0>)
 800ed80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed84:	f7f1 fc38 	bl	80005f8 <__aeabi_dmul>
 800ed88:	4602      	mov	r2, r0
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	4630      	mov	r0, r6
 800ed8e:	4639      	mov	r1, r7
 800ed90:	f7f1 fa7c 	bl	800028c <__adddf3>
 800ed94:	4606      	mov	r6, r0
 800ed96:	460f      	mov	r7, r1
 800ed98:	f7f1 fede 	bl	8000b58 <__aeabi_d2iz>
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	4683      	mov	fp, r0
 800eda0:	2300      	movs	r3, #0
 800eda2:	4630      	mov	r0, r6
 800eda4:	4639      	mov	r1, r7
 800eda6:	f7f1 fe99 	bl	8000adc <__aeabi_dcmplt>
 800edaa:	b148      	cbz	r0, 800edc0 <_dtoa_r+0x190>
 800edac:	4658      	mov	r0, fp
 800edae:	f7f1 fbb9 	bl	8000524 <__aeabi_i2d>
 800edb2:	4632      	mov	r2, r6
 800edb4:	463b      	mov	r3, r7
 800edb6:	f7f1 fe87 	bl	8000ac8 <__aeabi_dcmpeq>
 800edba:	b908      	cbnz	r0, 800edc0 <_dtoa_r+0x190>
 800edbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800edc0:	f1bb 0f16 	cmp.w	fp, #22
 800edc4:	d857      	bhi.n	800ee76 <_dtoa_r+0x246>
 800edc6:	4b5b      	ldr	r3, [pc, #364]	; (800ef34 <_dtoa_r+0x304>)
 800edc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800edcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd0:	ec51 0b18 	vmov	r0, r1, d8
 800edd4:	f7f1 fe82 	bl	8000adc <__aeabi_dcmplt>
 800edd8:	2800      	cmp	r0, #0
 800edda:	d04e      	beq.n	800ee7a <_dtoa_r+0x24a>
 800eddc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ede0:	2300      	movs	r3, #0
 800ede2:	930c      	str	r3, [sp, #48]	; 0x30
 800ede4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ede6:	1b5b      	subs	r3, r3, r5
 800ede8:	1e5a      	subs	r2, r3, #1
 800edea:	bf45      	ittet	mi
 800edec:	f1c3 0301 	rsbmi	r3, r3, #1
 800edf0:	9305      	strmi	r3, [sp, #20]
 800edf2:	2300      	movpl	r3, #0
 800edf4:	2300      	movmi	r3, #0
 800edf6:	9206      	str	r2, [sp, #24]
 800edf8:	bf54      	ite	pl
 800edfa:	9305      	strpl	r3, [sp, #20]
 800edfc:	9306      	strmi	r3, [sp, #24]
 800edfe:	f1bb 0f00 	cmp.w	fp, #0
 800ee02:	db3c      	blt.n	800ee7e <_dtoa_r+0x24e>
 800ee04:	9b06      	ldr	r3, [sp, #24]
 800ee06:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ee0a:	445b      	add	r3, fp
 800ee0c:	9306      	str	r3, [sp, #24]
 800ee0e:	2300      	movs	r3, #0
 800ee10:	9308      	str	r3, [sp, #32]
 800ee12:	9b07      	ldr	r3, [sp, #28]
 800ee14:	2b09      	cmp	r3, #9
 800ee16:	d868      	bhi.n	800eeea <_dtoa_r+0x2ba>
 800ee18:	2b05      	cmp	r3, #5
 800ee1a:	bfc4      	itt	gt
 800ee1c:	3b04      	subgt	r3, #4
 800ee1e:	9307      	strgt	r3, [sp, #28]
 800ee20:	9b07      	ldr	r3, [sp, #28]
 800ee22:	f1a3 0302 	sub.w	r3, r3, #2
 800ee26:	bfcc      	ite	gt
 800ee28:	2500      	movgt	r5, #0
 800ee2a:	2501      	movle	r5, #1
 800ee2c:	2b03      	cmp	r3, #3
 800ee2e:	f200 8085 	bhi.w	800ef3c <_dtoa_r+0x30c>
 800ee32:	e8df f003 	tbb	[pc, r3]
 800ee36:	3b2e      	.short	0x3b2e
 800ee38:	5839      	.short	0x5839
 800ee3a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ee3e:	441d      	add	r5, r3
 800ee40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ee44:	2b20      	cmp	r3, #32
 800ee46:	bfc1      	itttt	gt
 800ee48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ee4c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ee50:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ee54:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ee58:	bfd6      	itet	le
 800ee5a:	f1c3 0320 	rsble	r3, r3, #32
 800ee5e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ee62:	fa06 f003 	lslle.w	r0, r6, r3
 800ee66:	f7f1 fb4d 	bl	8000504 <__aeabi_ui2d>
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ee70:	3d01      	subs	r5, #1
 800ee72:	920e      	str	r2, [sp, #56]	; 0x38
 800ee74:	e76f      	b.n	800ed56 <_dtoa_r+0x126>
 800ee76:	2301      	movs	r3, #1
 800ee78:	e7b3      	b.n	800ede2 <_dtoa_r+0x1b2>
 800ee7a:	900c      	str	r0, [sp, #48]	; 0x30
 800ee7c:	e7b2      	b.n	800ede4 <_dtoa_r+0x1b4>
 800ee7e:	9b05      	ldr	r3, [sp, #20]
 800ee80:	eba3 030b 	sub.w	r3, r3, fp
 800ee84:	9305      	str	r3, [sp, #20]
 800ee86:	f1cb 0300 	rsb	r3, fp, #0
 800ee8a:	9308      	str	r3, [sp, #32]
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee90:	e7bf      	b.n	800ee12 <_dtoa_r+0x1e2>
 800ee92:	2300      	movs	r3, #0
 800ee94:	9309      	str	r3, [sp, #36]	; 0x24
 800ee96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	dc52      	bgt.n	800ef42 <_dtoa_r+0x312>
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	9301      	str	r3, [sp, #4]
 800eea0:	9304      	str	r3, [sp, #16]
 800eea2:	461a      	mov	r2, r3
 800eea4:	920a      	str	r2, [sp, #40]	; 0x28
 800eea6:	e00b      	b.n	800eec0 <_dtoa_r+0x290>
 800eea8:	2301      	movs	r3, #1
 800eeaa:	e7f3      	b.n	800ee94 <_dtoa_r+0x264>
 800eeac:	2300      	movs	r3, #0
 800eeae:	9309      	str	r3, [sp, #36]	; 0x24
 800eeb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eeb2:	445b      	add	r3, fp
 800eeb4:	9301      	str	r3, [sp, #4]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	9304      	str	r3, [sp, #16]
 800eebc:	bfb8      	it	lt
 800eebe:	2301      	movlt	r3, #1
 800eec0:	69e0      	ldr	r0, [r4, #28]
 800eec2:	2100      	movs	r1, #0
 800eec4:	2204      	movs	r2, #4
 800eec6:	f102 0614 	add.w	r6, r2, #20
 800eeca:	429e      	cmp	r6, r3
 800eecc:	d93d      	bls.n	800ef4a <_dtoa_r+0x31a>
 800eece:	6041      	str	r1, [r0, #4]
 800eed0:	4620      	mov	r0, r4
 800eed2:	f000 fd9f 	bl	800fa14 <_Balloc>
 800eed6:	9000      	str	r0, [sp, #0]
 800eed8:	2800      	cmp	r0, #0
 800eeda:	d139      	bne.n	800ef50 <_dtoa_r+0x320>
 800eedc:	4b16      	ldr	r3, [pc, #88]	; (800ef38 <_dtoa_r+0x308>)
 800eede:	4602      	mov	r2, r0
 800eee0:	f240 11af 	movw	r1, #431	; 0x1af
 800eee4:	e6bd      	b.n	800ec62 <_dtoa_r+0x32>
 800eee6:	2301      	movs	r3, #1
 800eee8:	e7e1      	b.n	800eeae <_dtoa_r+0x27e>
 800eeea:	2501      	movs	r5, #1
 800eeec:	2300      	movs	r3, #0
 800eeee:	9307      	str	r3, [sp, #28]
 800eef0:	9509      	str	r5, [sp, #36]	; 0x24
 800eef2:	f04f 33ff 	mov.w	r3, #4294967295
 800eef6:	9301      	str	r3, [sp, #4]
 800eef8:	9304      	str	r3, [sp, #16]
 800eefa:	2200      	movs	r2, #0
 800eefc:	2312      	movs	r3, #18
 800eefe:	e7d1      	b.n	800eea4 <_dtoa_r+0x274>
 800ef00:	636f4361 	.word	0x636f4361
 800ef04:	3fd287a7 	.word	0x3fd287a7
 800ef08:	8b60c8b3 	.word	0x8b60c8b3
 800ef0c:	3fc68a28 	.word	0x3fc68a28
 800ef10:	509f79fb 	.word	0x509f79fb
 800ef14:	3fd34413 	.word	0x3fd34413
 800ef18:	08014380 	.word	0x08014380
 800ef1c:	08014397 	.word	0x08014397
 800ef20:	7ff00000 	.word	0x7ff00000
 800ef24:	0801437c 	.word	0x0801437c
 800ef28:	08014373 	.word	0x08014373
 800ef2c:	080146d9 	.word	0x080146d9
 800ef30:	3ff80000 	.word	0x3ff80000
 800ef34:	08014488 	.word	0x08014488
 800ef38:	080143ef 	.word	0x080143ef
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ef40:	e7d7      	b.n	800eef2 <_dtoa_r+0x2c2>
 800ef42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef44:	9301      	str	r3, [sp, #4]
 800ef46:	9304      	str	r3, [sp, #16]
 800ef48:	e7ba      	b.n	800eec0 <_dtoa_r+0x290>
 800ef4a:	3101      	adds	r1, #1
 800ef4c:	0052      	lsls	r2, r2, #1
 800ef4e:	e7ba      	b.n	800eec6 <_dtoa_r+0x296>
 800ef50:	69e3      	ldr	r3, [r4, #28]
 800ef52:	9a00      	ldr	r2, [sp, #0]
 800ef54:	601a      	str	r2, [r3, #0]
 800ef56:	9b04      	ldr	r3, [sp, #16]
 800ef58:	2b0e      	cmp	r3, #14
 800ef5a:	f200 80a8 	bhi.w	800f0ae <_dtoa_r+0x47e>
 800ef5e:	2d00      	cmp	r5, #0
 800ef60:	f000 80a5 	beq.w	800f0ae <_dtoa_r+0x47e>
 800ef64:	f1bb 0f00 	cmp.w	fp, #0
 800ef68:	dd38      	ble.n	800efdc <_dtoa_r+0x3ac>
 800ef6a:	4bc0      	ldr	r3, [pc, #768]	; (800f26c <_dtoa_r+0x63c>)
 800ef6c:	f00b 020f 	and.w	r2, fp, #15
 800ef70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ef78:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ef7c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ef80:	d019      	beq.n	800efb6 <_dtoa_r+0x386>
 800ef82:	4bbb      	ldr	r3, [pc, #748]	; (800f270 <_dtoa_r+0x640>)
 800ef84:	ec51 0b18 	vmov	r0, r1, d8
 800ef88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ef8c:	f7f1 fc5e 	bl	800084c <__aeabi_ddiv>
 800ef90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef94:	f008 080f 	and.w	r8, r8, #15
 800ef98:	2503      	movs	r5, #3
 800ef9a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f270 <_dtoa_r+0x640>
 800ef9e:	f1b8 0f00 	cmp.w	r8, #0
 800efa2:	d10a      	bne.n	800efba <_dtoa_r+0x38a>
 800efa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efa8:	4632      	mov	r2, r6
 800efaa:	463b      	mov	r3, r7
 800efac:	f7f1 fc4e 	bl	800084c <__aeabi_ddiv>
 800efb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efb4:	e02b      	b.n	800f00e <_dtoa_r+0x3de>
 800efb6:	2502      	movs	r5, #2
 800efb8:	e7ef      	b.n	800ef9a <_dtoa_r+0x36a>
 800efba:	f018 0f01 	tst.w	r8, #1
 800efbe:	d008      	beq.n	800efd2 <_dtoa_r+0x3a2>
 800efc0:	4630      	mov	r0, r6
 800efc2:	4639      	mov	r1, r7
 800efc4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800efc8:	f7f1 fb16 	bl	80005f8 <__aeabi_dmul>
 800efcc:	3501      	adds	r5, #1
 800efce:	4606      	mov	r6, r0
 800efd0:	460f      	mov	r7, r1
 800efd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800efd6:	f109 0908 	add.w	r9, r9, #8
 800efda:	e7e0      	b.n	800ef9e <_dtoa_r+0x36e>
 800efdc:	f000 809f 	beq.w	800f11e <_dtoa_r+0x4ee>
 800efe0:	f1cb 0600 	rsb	r6, fp, #0
 800efe4:	4ba1      	ldr	r3, [pc, #644]	; (800f26c <_dtoa_r+0x63c>)
 800efe6:	4fa2      	ldr	r7, [pc, #648]	; (800f270 <_dtoa_r+0x640>)
 800efe8:	f006 020f 	and.w	r2, r6, #15
 800efec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff4:	ec51 0b18 	vmov	r0, r1, d8
 800eff8:	f7f1 fafe 	bl	80005f8 <__aeabi_dmul>
 800effc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f000:	1136      	asrs	r6, r6, #4
 800f002:	2300      	movs	r3, #0
 800f004:	2502      	movs	r5, #2
 800f006:	2e00      	cmp	r6, #0
 800f008:	d17e      	bne.n	800f108 <_dtoa_r+0x4d8>
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d1d0      	bne.n	800efb0 <_dtoa_r+0x380>
 800f00e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f010:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f014:	2b00      	cmp	r3, #0
 800f016:	f000 8084 	beq.w	800f122 <_dtoa_r+0x4f2>
 800f01a:	4b96      	ldr	r3, [pc, #600]	; (800f274 <_dtoa_r+0x644>)
 800f01c:	2200      	movs	r2, #0
 800f01e:	4640      	mov	r0, r8
 800f020:	4649      	mov	r1, r9
 800f022:	f7f1 fd5b 	bl	8000adc <__aeabi_dcmplt>
 800f026:	2800      	cmp	r0, #0
 800f028:	d07b      	beq.n	800f122 <_dtoa_r+0x4f2>
 800f02a:	9b04      	ldr	r3, [sp, #16]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d078      	beq.n	800f122 <_dtoa_r+0x4f2>
 800f030:	9b01      	ldr	r3, [sp, #4]
 800f032:	2b00      	cmp	r3, #0
 800f034:	dd39      	ble.n	800f0aa <_dtoa_r+0x47a>
 800f036:	4b90      	ldr	r3, [pc, #576]	; (800f278 <_dtoa_r+0x648>)
 800f038:	2200      	movs	r2, #0
 800f03a:	4640      	mov	r0, r8
 800f03c:	4649      	mov	r1, r9
 800f03e:	f7f1 fadb 	bl	80005f8 <__aeabi_dmul>
 800f042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f046:	9e01      	ldr	r6, [sp, #4]
 800f048:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f04c:	3501      	adds	r5, #1
 800f04e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f052:	4628      	mov	r0, r5
 800f054:	f7f1 fa66 	bl	8000524 <__aeabi_i2d>
 800f058:	4642      	mov	r2, r8
 800f05a:	464b      	mov	r3, r9
 800f05c:	f7f1 facc 	bl	80005f8 <__aeabi_dmul>
 800f060:	4b86      	ldr	r3, [pc, #536]	; (800f27c <_dtoa_r+0x64c>)
 800f062:	2200      	movs	r2, #0
 800f064:	f7f1 f912 	bl	800028c <__adddf3>
 800f068:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f06c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f070:	9303      	str	r3, [sp, #12]
 800f072:	2e00      	cmp	r6, #0
 800f074:	d158      	bne.n	800f128 <_dtoa_r+0x4f8>
 800f076:	4b82      	ldr	r3, [pc, #520]	; (800f280 <_dtoa_r+0x650>)
 800f078:	2200      	movs	r2, #0
 800f07a:	4640      	mov	r0, r8
 800f07c:	4649      	mov	r1, r9
 800f07e:	f7f1 f903 	bl	8000288 <__aeabi_dsub>
 800f082:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f086:	4680      	mov	r8, r0
 800f088:	4689      	mov	r9, r1
 800f08a:	f7f1 fd45 	bl	8000b18 <__aeabi_dcmpgt>
 800f08e:	2800      	cmp	r0, #0
 800f090:	f040 8296 	bne.w	800f5c0 <_dtoa_r+0x990>
 800f094:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f098:	4640      	mov	r0, r8
 800f09a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f09e:	4649      	mov	r1, r9
 800f0a0:	f7f1 fd1c 	bl	8000adc <__aeabi_dcmplt>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	f040 8289 	bne.w	800f5bc <_dtoa_r+0x98c>
 800f0aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f0ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	f2c0 814e 	blt.w	800f352 <_dtoa_r+0x722>
 800f0b6:	f1bb 0f0e 	cmp.w	fp, #14
 800f0ba:	f300 814a 	bgt.w	800f352 <_dtoa_r+0x722>
 800f0be:	4b6b      	ldr	r3, [pc, #428]	; (800f26c <_dtoa_r+0x63c>)
 800f0c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f0c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	f280 80dc 	bge.w	800f288 <_dtoa_r+0x658>
 800f0d0:	9b04      	ldr	r3, [sp, #16]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	f300 80d8 	bgt.w	800f288 <_dtoa_r+0x658>
 800f0d8:	f040 826f 	bne.w	800f5ba <_dtoa_r+0x98a>
 800f0dc:	4b68      	ldr	r3, [pc, #416]	; (800f280 <_dtoa_r+0x650>)
 800f0de:	2200      	movs	r2, #0
 800f0e0:	4640      	mov	r0, r8
 800f0e2:	4649      	mov	r1, r9
 800f0e4:	f7f1 fa88 	bl	80005f8 <__aeabi_dmul>
 800f0e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f0ec:	f7f1 fd0a 	bl	8000b04 <__aeabi_dcmpge>
 800f0f0:	9e04      	ldr	r6, [sp, #16]
 800f0f2:	4637      	mov	r7, r6
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	f040 8245 	bne.w	800f584 <_dtoa_r+0x954>
 800f0fa:	9d00      	ldr	r5, [sp, #0]
 800f0fc:	2331      	movs	r3, #49	; 0x31
 800f0fe:	f805 3b01 	strb.w	r3, [r5], #1
 800f102:	f10b 0b01 	add.w	fp, fp, #1
 800f106:	e241      	b.n	800f58c <_dtoa_r+0x95c>
 800f108:	07f2      	lsls	r2, r6, #31
 800f10a:	d505      	bpl.n	800f118 <_dtoa_r+0x4e8>
 800f10c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f110:	f7f1 fa72 	bl	80005f8 <__aeabi_dmul>
 800f114:	3501      	adds	r5, #1
 800f116:	2301      	movs	r3, #1
 800f118:	1076      	asrs	r6, r6, #1
 800f11a:	3708      	adds	r7, #8
 800f11c:	e773      	b.n	800f006 <_dtoa_r+0x3d6>
 800f11e:	2502      	movs	r5, #2
 800f120:	e775      	b.n	800f00e <_dtoa_r+0x3de>
 800f122:	9e04      	ldr	r6, [sp, #16]
 800f124:	465f      	mov	r7, fp
 800f126:	e792      	b.n	800f04e <_dtoa_r+0x41e>
 800f128:	9900      	ldr	r1, [sp, #0]
 800f12a:	4b50      	ldr	r3, [pc, #320]	; (800f26c <_dtoa_r+0x63c>)
 800f12c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f130:	4431      	add	r1, r6
 800f132:	9102      	str	r1, [sp, #8]
 800f134:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f136:	eeb0 9a47 	vmov.f32	s18, s14
 800f13a:	eef0 9a67 	vmov.f32	s19, s15
 800f13e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f142:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f146:	2900      	cmp	r1, #0
 800f148:	d044      	beq.n	800f1d4 <_dtoa_r+0x5a4>
 800f14a:	494e      	ldr	r1, [pc, #312]	; (800f284 <_dtoa_r+0x654>)
 800f14c:	2000      	movs	r0, #0
 800f14e:	f7f1 fb7d 	bl	800084c <__aeabi_ddiv>
 800f152:	ec53 2b19 	vmov	r2, r3, d9
 800f156:	f7f1 f897 	bl	8000288 <__aeabi_dsub>
 800f15a:	9d00      	ldr	r5, [sp, #0]
 800f15c:	ec41 0b19 	vmov	d9, r0, r1
 800f160:	4649      	mov	r1, r9
 800f162:	4640      	mov	r0, r8
 800f164:	f7f1 fcf8 	bl	8000b58 <__aeabi_d2iz>
 800f168:	4606      	mov	r6, r0
 800f16a:	f7f1 f9db 	bl	8000524 <__aeabi_i2d>
 800f16e:	4602      	mov	r2, r0
 800f170:	460b      	mov	r3, r1
 800f172:	4640      	mov	r0, r8
 800f174:	4649      	mov	r1, r9
 800f176:	f7f1 f887 	bl	8000288 <__aeabi_dsub>
 800f17a:	3630      	adds	r6, #48	; 0x30
 800f17c:	f805 6b01 	strb.w	r6, [r5], #1
 800f180:	ec53 2b19 	vmov	r2, r3, d9
 800f184:	4680      	mov	r8, r0
 800f186:	4689      	mov	r9, r1
 800f188:	f7f1 fca8 	bl	8000adc <__aeabi_dcmplt>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d164      	bne.n	800f25a <_dtoa_r+0x62a>
 800f190:	4642      	mov	r2, r8
 800f192:	464b      	mov	r3, r9
 800f194:	4937      	ldr	r1, [pc, #220]	; (800f274 <_dtoa_r+0x644>)
 800f196:	2000      	movs	r0, #0
 800f198:	f7f1 f876 	bl	8000288 <__aeabi_dsub>
 800f19c:	ec53 2b19 	vmov	r2, r3, d9
 800f1a0:	f7f1 fc9c 	bl	8000adc <__aeabi_dcmplt>
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	f040 80b6 	bne.w	800f316 <_dtoa_r+0x6e6>
 800f1aa:	9b02      	ldr	r3, [sp, #8]
 800f1ac:	429d      	cmp	r5, r3
 800f1ae:	f43f af7c 	beq.w	800f0aa <_dtoa_r+0x47a>
 800f1b2:	4b31      	ldr	r3, [pc, #196]	; (800f278 <_dtoa_r+0x648>)
 800f1b4:	ec51 0b19 	vmov	r0, r1, d9
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f7f1 fa1d 	bl	80005f8 <__aeabi_dmul>
 800f1be:	4b2e      	ldr	r3, [pc, #184]	; (800f278 <_dtoa_r+0x648>)
 800f1c0:	ec41 0b19 	vmov	d9, r0, r1
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	4640      	mov	r0, r8
 800f1c8:	4649      	mov	r1, r9
 800f1ca:	f7f1 fa15 	bl	80005f8 <__aeabi_dmul>
 800f1ce:	4680      	mov	r8, r0
 800f1d0:	4689      	mov	r9, r1
 800f1d2:	e7c5      	b.n	800f160 <_dtoa_r+0x530>
 800f1d4:	ec51 0b17 	vmov	r0, r1, d7
 800f1d8:	f7f1 fa0e 	bl	80005f8 <__aeabi_dmul>
 800f1dc:	9b02      	ldr	r3, [sp, #8]
 800f1de:	9d00      	ldr	r5, [sp, #0]
 800f1e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1e2:	ec41 0b19 	vmov	d9, r0, r1
 800f1e6:	4649      	mov	r1, r9
 800f1e8:	4640      	mov	r0, r8
 800f1ea:	f7f1 fcb5 	bl	8000b58 <__aeabi_d2iz>
 800f1ee:	4606      	mov	r6, r0
 800f1f0:	f7f1 f998 	bl	8000524 <__aeabi_i2d>
 800f1f4:	3630      	adds	r6, #48	; 0x30
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	460b      	mov	r3, r1
 800f1fa:	4640      	mov	r0, r8
 800f1fc:	4649      	mov	r1, r9
 800f1fe:	f7f1 f843 	bl	8000288 <__aeabi_dsub>
 800f202:	f805 6b01 	strb.w	r6, [r5], #1
 800f206:	9b02      	ldr	r3, [sp, #8]
 800f208:	429d      	cmp	r5, r3
 800f20a:	4680      	mov	r8, r0
 800f20c:	4689      	mov	r9, r1
 800f20e:	f04f 0200 	mov.w	r2, #0
 800f212:	d124      	bne.n	800f25e <_dtoa_r+0x62e>
 800f214:	4b1b      	ldr	r3, [pc, #108]	; (800f284 <_dtoa_r+0x654>)
 800f216:	ec51 0b19 	vmov	r0, r1, d9
 800f21a:	f7f1 f837 	bl	800028c <__adddf3>
 800f21e:	4602      	mov	r2, r0
 800f220:	460b      	mov	r3, r1
 800f222:	4640      	mov	r0, r8
 800f224:	4649      	mov	r1, r9
 800f226:	f7f1 fc77 	bl	8000b18 <__aeabi_dcmpgt>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	d173      	bne.n	800f316 <_dtoa_r+0x6e6>
 800f22e:	ec53 2b19 	vmov	r2, r3, d9
 800f232:	4914      	ldr	r1, [pc, #80]	; (800f284 <_dtoa_r+0x654>)
 800f234:	2000      	movs	r0, #0
 800f236:	f7f1 f827 	bl	8000288 <__aeabi_dsub>
 800f23a:	4602      	mov	r2, r0
 800f23c:	460b      	mov	r3, r1
 800f23e:	4640      	mov	r0, r8
 800f240:	4649      	mov	r1, r9
 800f242:	f7f1 fc4b 	bl	8000adc <__aeabi_dcmplt>
 800f246:	2800      	cmp	r0, #0
 800f248:	f43f af2f 	beq.w	800f0aa <_dtoa_r+0x47a>
 800f24c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f24e:	1e6b      	subs	r3, r5, #1
 800f250:	930f      	str	r3, [sp, #60]	; 0x3c
 800f252:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f256:	2b30      	cmp	r3, #48	; 0x30
 800f258:	d0f8      	beq.n	800f24c <_dtoa_r+0x61c>
 800f25a:	46bb      	mov	fp, r7
 800f25c:	e04a      	b.n	800f2f4 <_dtoa_r+0x6c4>
 800f25e:	4b06      	ldr	r3, [pc, #24]	; (800f278 <_dtoa_r+0x648>)
 800f260:	f7f1 f9ca 	bl	80005f8 <__aeabi_dmul>
 800f264:	4680      	mov	r8, r0
 800f266:	4689      	mov	r9, r1
 800f268:	e7bd      	b.n	800f1e6 <_dtoa_r+0x5b6>
 800f26a:	bf00      	nop
 800f26c:	08014488 	.word	0x08014488
 800f270:	08014460 	.word	0x08014460
 800f274:	3ff00000 	.word	0x3ff00000
 800f278:	40240000 	.word	0x40240000
 800f27c:	401c0000 	.word	0x401c0000
 800f280:	40140000 	.word	0x40140000
 800f284:	3fe00000 	.word	0x3fe00000
 800f288:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f28c:	9d00      	ldr	r5, [sp, #0]
 800f28e:	4642      	mov	r2, r8
 800f290:	464b      	mov	r3, r9
 800f292:	4630      	mov	r0, r6
 800f294:	4639      	mov	r1, r7
 800f296:	f7f1 fad9 	bl	800084c <__aeabi_ddiv>
 800f29a:	f7f1 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800f29e:	9001      	str	r0, [sp, #4]
 800f2a0:	f7f1 f940 	bl	8000524 <__aeabi_i2d>
 800f2a4:	4642      	mov	r2, r8
 800f2a6:	464b      	mov	r3, r9
 800f2a8:	f7f1 f9a6 	bl	80005f8 <__aeabi_dmul>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	4639      	mov	r1, r7
 800f2b4:	f7f0 ffe8 	bl	8000288 <__aeabi_dsub>
 800f2b8:	9e01      	ldr	r6, [sp, #4]
 800f2ba:	9f04      	ldr	r7, [sp, #16]
 800f2bc:	3630      	adds	r6, #48	; 0x30
 800f2be:	f805 6b01 	strb.w	r6, [r5], #1
 800f2c2:	9e00      	ldr	r6, [sp, #0]
 800f2c4:	1bae      	subs	r6, r5, r6
 800f2c6:	42b7      	cmp	r7, r6
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	d134      	bne.n	800f338 <_dtoa_r+0x708>
 800f2ce:	f7f0 ffdd 	bl	800028c <__adddf3>
 800f2d2:	4642      	mov	r2, r8
 800f2d4:	464b      	mov	r3, r9
 800f2d6:	4606      	mov	r6, r0
 800f2d8:	460f      	mov	r7, r1
 800f2da:	f7f1 fc1d 	bl	8000b18 <__aeabi_dcmpgt>
 800f2de:	b9c8      	cbnz	r0, 800f314 <_dtoa_r+0x6e4>
 800f2e0:	4642      	mov	r2, r8
 800f2e2:	464b      	mov	r3, r9
 800f2e4:	4630      	mov	r0, r6
 800f2e6:	4639      	mov	r1, r7
 800f2e8:	f7f1 fbee 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2ec:	b110      	cbz	r0, 800f2f4 <_dtoa_r+0x6c4>
 800f2ee:	9b01      	ldr	r3, [sp, #4]
 800f2f0:	07db      	lsls	r3, r3, #31
 800f2f2:	d40f      	bmi.n	800f314 <_dtoa_r+0x6e4>
 800f2f4:	4651      	mov	r1, sl
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f000 fbcc 	bl	800fa94 <_Bfree>
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f300:	702b      	strb	r3, [r5, #0]
 800f302:	f10b 0301 	add.w	r3, fp, #1
 800f306:	6013      	str	r3, [r2, #0]
 800f308:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	f43f ace2 	beq.w	800ecd4 <_dtoa_r+0xa4>
 800f310:	601d      	str	r5, [r3, #0]
 800f312:	e4df      	b.n	800ecd4 <_dtoa_r+0xa4>
 800f314:	465f      	mov	r7, fp
 800f316:	462b      	mov	r3, r5
 800f318:	461d      	mov	r5, r3
 800f31a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f31e:	2a39      	cmp	r2, #57	; 0x39
 800f320:	d106      	bne.n	800f330 <_dtoa_r+0x700>
 800f322:	9a00      	ldr	r2, [sp, #0]
 800f324:	429a      	cmp	r2, r3
 800f326:	d1f7      	bne.n	800f318 <_dtoa_r+0x6e8>
 800f328:	9900      	ldr	r1, [sp, #0]
 800f32a:	2230      	movs	r2, #48	; 0x30
 800f32c:	3701      	adds	r7, #1
 800f32e:	700a      	strb	r2, [r1, #0]
 800f330:	781a      	ldrb	r2, [r3, #0]
 800f332:	3201      	adds	r2, #1
 800f334:	701a      	strb	r2, [r3, #0]
 800f336:	e790      	b.n	800f25a <_dtoa_r+0x62a>
 800f338:	4ba3      	ldr	r3, [pc, #652]	; (800f5c8 <_dtoa_r+0x998>)
 800f33a:	2200      	movs	r2, #0
 800f33c:	f7f1 f95c 	bl	80005f8 <__aeabi_dmul>
 800f340:	2200      	movs	r2, #0
 800f342:	2300      	movs	r3, #0
 800f344:	4606      	mov	r6, r0
 800f346:	460f      	mov	r7, r1
 800f348:	f7f1 fbbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	d09e      	beq.n	800f28e <_dtoa_r+0x65e>
 800f350:	e7d0      	b.n	800f2f4 <_dtoa_r+0x6c4>
 800f352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f354:	2a00      	cmp	r2, #0
 800f356:	f000 80ca 	beq.w	800f4ee <_dtoa_r+0x8be>
 800f35a:	9a07      	ldr	r2, [sp, #28]
 800f35c:	2a01      	cmp	r2, #1
 800f35e:	f300 80ad 	bgt.w	800f4bc <_dtoa_r+0x88c>
 800f362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f364:	2a00      	cmp	r2, #0
 800f366:	f000 80a5 	beq.w	800f4b4 <_dtoa_r+0x884>
 800f36a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f36e:	9e08      	ldr	r6, [sp, #32]
 800f370:	9d05      	ldr	r5, [sp, #20]
 800f372:	9a05      	ldr	r2, [sp, #20]
 800f374:	441a      	add	r2, r3
 800f376:	9205      	str	r2, [sp, #20]
 800f378:	9a06      	ldr	r2, [sp, #24]
 800f37a:	2101      	movs	r1, #1
 800f37c:	441a      	add	r2, r3
 800f37e:	4620      	mov	r0, r4
 800f380:	9206      	str	r2, [sp, #24]
 800f382:	f000 fc87 	bl	800fc94 <__i2b>
 800f386:	4607      	mov	r7, r0
 800f388:	b165      	cbz	r5, 800f3a4 <_dtoa_r+0x774>
 800f38a:	9b06      	ldr	r3, [sp, #24]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	dd09      	ble.n	800f3a4 <_dtoa_r+0x774>
 800f390:	42ab      	cmp	r3, r5
 800f392:	9a05      	ldr	r2, [sp, #20]
 800f394:	bfa8      	it	ge
 800f396:	462b      	movge	r3, r5
 800f398:	1ad2      	subs	r2, r2, r3
 800f39a:	9205      	str	r2, [sp, #20]
 800f39c:	9a06      	ldr	r2, [sp, #24]
 800f39e:	1aed      	subs	r5, r5, r3
 800f3a0:	1ad3      	subs	r3, r2, r3
 800f3a2:	9306      	str	r3, [sp, #24]
 800f3a4:	9b08      	ldr	r3, [sp, #32]
 800f3a6:	b1f3      	cbz	r3, 800f3e6 <_dtoa_r+0x7b6>
 800f3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	f000 80a3 	beq.w	800f4f6 <_dtoa_r+0x8c6>
 800f3b0:	2e00      	cmp	r6, #0
 800f3b2:	dd10      	ble.n	800f3d6 <_dtoa_r+0x7a6>
 800f3b4:	4639      	mov	r1, r7
 800f3b6:	4632      	mov	r2, r6
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	f000 fd2b 	bl	800fe14 <__pow5mult>
 800f3be:	4652      	mov	r2, sl
 800f3c0:	4601      	mov	r1, r0
 800f3c2:	4607      	mov	r7, r0
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	f000 fc7b 	bl	800fcc0 <__multiply>
 800f3ca:	4651      	mov	r1, sl
 800f3cc:	4680      	mov	r8, r0
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	f000 fb60 	bl	800fa94 <_Bfree>
 800f3d4:	46c2      	mov	sl, r8
 800f3d6:	9b08      	ldr	r3, [sp, #32]
 800f3d8:	1b9a      	subs	r2, r3, r6
 800f3da:	d004      	beq.n	800f3e6 <_dtoa_r+0x7b6>
 800f3dc:	4651      	mov	r1, sl
 800f3de:	4620      	mov	r0, r4
 800f3e0:	f000 fd18 	bl	800fe14 <__pow5mult>
 800f3e4:	4682      	mov	sl, r0
 800f3e6:	2101      	movs	r1, #1
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	f000 fc53 	bl	800fc94 <__i2b>
 800f3ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	4606      	mov	r6, r0
 800f3f4:	f340 8081 	ble.w	800f4fa <_dtoa_r+0x8ca>
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	4601      	mov	r1, r0
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	f000 fd09 	bl	800fe14 <__pow5mult>
 800f402:	9b07      	ldr	r3, [sp, #28]
 800f404:	2b01      	cmp	r3, #1
 800f406:	4606      	mov	r6, r0
 800f408:	dd7a      	ble.n	800f500 <_dtoa_r+0x8d0>
 800f40a:	f04f 0800 	mov.w	r8, #0
 800f40e:	6933      	ldr	r3, [r6, #16]
 800f410:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f414:	6918      	ldr	r0, [r3, #16]
 800f416:	f000 fbef 	bl	800fbf8 <__hi0bits>
 800f41a:	f1c0 0020 	rsb	r0, r0, #32
 800f41e:	9b06      	ldr	r3, [sp, #24]
 800f420:	4418      	add	r0, r3
 800f422:	f010 001f 	ands.w	r0, r0, #31
 800f426:	f000 8094 	beq.w	800f552 <_dtoa_r+0x922>
 800f42a:	f1c0 0320 	rsb	r3, r0, #32
 800f42e:	2b04      	cmp	r3, #4
 800f430:	f340 8085 	ble.w	800f53e <_dtoa_r+0x90e>
 800f434:	9b05      	ldr	r3, [sp, #20]
 800f436:	f1c0 001c 	rsb	r0, r0, #28
 800f43a:	4403      	add	r3, r0
 800f43c:	9305      	str	r3, [sp, #20]
 800f43e:	9b06      	ldr	r3, [sp, #24]
 800f440:	4403      	add	r3, r0
 800f442:	4405      	add	r5, r0
 800f444:	9306      	str	r3, [sp, #24]
 800f446:	9b05      	ldr	r3, [sp, #20]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	dd05      	ble.n	800f458 <_dtoa_r+0x828>
 800f44c:	4651      	mov	r1, sl
 800f44e:	461a      	mov	r2, r3
 800f450:	4620      	mov	r0, r4
 800f452:	f000 fd39 	bl	800fec8 <__lshift>
 800f456:	4682      	mov	sl, r0
 800f458:	9b06      	ldr	r3, [sp, #24]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	dd05      	ble.n	800f46a <_dtoa_r+0x83a>
 800f45e:	4631      	mov	r1, r6
 800f460:	461a      	mov	r2, r3
 800f462:	4620      	mov	r0, r4
 800f464:	f000 fd30 	bl	800fec8 <__lshift>
 800f468:	4606      	mov	r6, r0
 800f46a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d072      	beq.n	800f556 <_dtoa_r+0x926>
 800f470:	4631      	mov	r1, r6
 800f472:	4650      	mov	r0, sl
 800f474:	f000 fd94 	bl	800ffa0 <__mcmp>
 800f478:	2800      	cmp	r0, #0
 800f47a:	da6c      	bge.n	800f556 <_dtoa_r+0x926>
 800f47c:	2300      	movs	r3, #0
 800f47e:	4651      	mov	r1, sl
 800f480:	220a      	movs	r2, #10
 800f482:	4620      	mov	r0, r4
 800f484:	f000 fb28 	bl	800fad8 <__multadd>
 800f488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f48a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f48e:	4682      	mov	sl, r0
 800f490:	2b00      	cmp	r3, #0
 800f492:	f000 81b0 	beq.w	800f7f6 <_dtoa_r+0xbc6>
 800f496:	2300      	movs	r3, #0
 800f498:	4639      	mov	r1, r7
 800f49a:	220a      	movs	r2, #10
 800f49c:	4620      	mov	r0, r4
 800f49e:	f000 fb1b 	bl	800fad8 <__multadd>
 800f4a2:	9b01      	ldr	r3, [sp, #4]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	4607      	mov	r7, r0
 800f4a8:	f300 8096 	bgt.w	800f5d8 <_dtoa_r+0x9a8>
 800f4ac:	9b07      	ldr	r3, [sp, #28]
 800f4ae:	2b02      	cmp	r3, #2
 800f4b0:	dc59      	bgt.n	800f566 <_dtoa_r+0x936>
 800f4b2:	e091      	b.n	800f5d8 <_dtoa_r+0x9a8>
 800f4b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f4b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f4ba:	e758      	b.n	800f36e <_dtoa_r+0x73e>
 800f4bc:	9b04      	ldr	r3, [sp, #16]
 800f4be:	1e5e      	subs	r6, r3, #1
 800f4c0:	9b08      	ldr	r3, [sp, #32]
 800f4c2:	42b3      	cmp	r3, r6
 800f4c4:	bfbf      	itttt	lt
 800f4c6:	9b08      	ldrlt	r3, [sp, #32]
 800f4c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f4ca:	9608      	strlt	r6, [sp, #32]
 800f4cc:	1af3      	sublt	r3, r6, r3
 800f4ce:	bfb4      	ite	lt
 800f4d0:	18d2      	addlt	r2, r2, r3
 800f4d2:	1b9e      	subge	r6, r3, r6
 800f4d4:	9b04      	ldr	r3, [sp, #16]
 800f4d6:	bfbc      	itt	lt
 800f4d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f4da:	2600      	movlt	r6, #0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	bfb7      	itett	lt
 800f4e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f4e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f4e8:	1a9d      	sublt	r5, r3, r2
 800f4ea:	2300      	movlt	r3, #0
 800f4ec:	e741      	b.n	800f372 <_dtoa_r+0x742>
 800f4ee:	9e08      	ldr	r6, [sp, #32]
 800f4f0:	9d05      	ldr	r5, [sp, #20]
 800f4f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f4f4:	e748      	b.n	800f388 <_dtoa_r+0x758>
 800f4f6:	9a08      	ldr	r2, [sp, #32]
 800f4f8:	e770      	b.n	800f3dc <_dtoa_r+0x7ac>
 800f4fa:	9b07      	ldr	r3, [sp, #28]
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	dc19      	bgt.n	800f534 <_dtoa_r+0x904>
 800f500:	9b02      	ldr	r3, [sp, #8]
 800f502:	b9bb      	cbnz	r3, 800f534 <_dtoa_r+0x904>
 800f504:	9b03      	ldr	r3, [sp, #12]
 800f506:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f50a:	b99b      	cbnz	r3, 800f534 <_dtoa_r+0x904>
 800f50c:	9b03      	ldr	r3, [sp, #12]
 800f50e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f512:	0d1b      	lsrs	r3, r3, #20
 800f514:	051b      	lsls	r3, r3, #20
 800f516:	b183      	cbz	r3, 800f53a <_dtoa_r+0x90a>
 800f518:	9b05      	ldr	r3, [sp, #20]
 800f51a:	3301      	adds	r3, #1
 800f51c:	9305      	str	r3, [sp, #20]
 800f51e:	9b06      	ldr	r3, [sp, #24]
 800f520:	3301      	adds	r3, #1
 800f522:	9306      	str	r3, [sp, #24]
 800f524:	f04f 0801 	mov.w	r8, #1
 800f528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	f47f af6f 	bne.w	800f40e <_dtoa_r+0x7de>
 800f530:	2001      	movs	r0, #1
 800f532:	e774      	b.n	800f41e <_dtoa_r+0x7ee>
 800f534:	f04f 0800 	mov.w	r8, #0
 800f538:	e7f6      	b.n	800f528 <_dtoa_r+0x8f8>
 800f53a:	4698      	mov	r8, r3
 800f53c:	e7f4      	b.n	800f528 <_dtoa_r+0x8f8>
 800f53e:	d082      	beq.n	800f446 <_dtoa_r+0x816>
 800f540:	9a05      	ldr	r2, [sp, #20]
 800f542:	331c      	adds	r3, #28
 800f544:	441a      	add	r2, r3
 800f546:	9205      	str	r2, [sp, #20]
 800f548:	9a06      	ldr	r2, [sp, #24]
 800f54a:	441a      	add	r2, r3
 800f54c:	441d      	add	r5, r3
 800f54e:	9206      	str	r2, [sp, #24]
 800f550:	e779      	b.n	800f446 <_dtoa_r+0x816>
 800f552:	4603      	mov	r3, r0
 800f554:	e7f4      	b.n	800f540 <_dtoa_r+0x910>
 800f556:	9b04      	ldr	r3, [sp, #16]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	dc37      	bgt.n	800f5cc <_dtoa_r+0x99c>
 800f55c:	9b07      	ldr	r3, [sp, #28]
 800f55e:	2b02      	cmp	r3, #2
 800f560:	dd34      	ble.n	800f5cc <_dtoa_r+0x99c>
 800f562:	9b04      	ldr	r3, [sp, #16]
 800f564:	9301      	str	r3, [sp, #4]
 800f566:	9b01      	ldr	r3, [sp, #4]
 800f568:	b963      	cbnz	r3, 800f584 <_dtoa_r+0x954>
 800f56a:	4631      	mov	r1, r6
 800f56c:	2205      	movs	r2, #5
 800f56e:	4620      	mov	r0, r4
 800f570:	f000 fab2 	bl	800fad8 <__multadd>
 800f574:	4601      	mov	r1, r0
 800f576:	4606      	mov	r6, r0
 800f578:	4650      	mov	r0, sl
 800f57a:	f000 fd11 	bl	800ffa0 <__mcmp>
 800f57e:	2800      	cmp	r0, #0
 800f580:	f73f adbb 	bgt.w	800f0fa <_dtoa_r+0x4ca>
 800f584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f586:	9d00      	ldr	r5, [sp, #0]
 800f588:	ea6f 0b03 	mvn.w	fp, r3
 800f58c:	f04f 0800 	mov.w	r8, #0
 800f590:	4631      	mov	r1, r6
 800f592:	4620      	mov	r0, r4
 800f594:	f000 fa7e 	bl	800fa94 <_Bfree>
 800f598:	2f00      	cmp	r7, #0
 800f59a:	f43f aeab 	beq.w	800f2f4 <_dtoa_r+0x6c4>
 800f59e:	f1b8 0f00 	cmp.w	r8, #0
 800f5a2:	d005      	beq.n	800f5b0 <_dtoa_r+0x980>
 800f5a4:	45b8      	cmp	r8, r7
 800f5a6:	d003      	beq.n	800f5b0 <_dtoa_r+0x980>
 800f5a8:	4641      	mov	r1, r8
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f000 fa72 	bl	800fa94 <_Bfree>
 800f5b0:	4639      	mov	r1, r7
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	f000 fa6e 	bl	800fa94 <_Bfree>
 800f5b8:	e69c      	b.n	800f2f4 <_dtoa_r+0x6c4>
 800f5ba:	2600      	movs	r6, #0
 800f5bc:	4637      	mov	r7, r6
 800f5be:	e7e1      	b.n	800f584 <_dtoa_r+0x954>
 800f5c0:	46bb      	mov	fp, r7
 800f5c2:	4637      	mov	r7, r6
 800f5c4:	e599      	b.n	800f0fa <_dtoa_r+0x4ca>
 800f5c6:	bf00      	nop
 800f5c8:	40240000 	.word	0x40240000
 800f5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	f000 80c8 	beq.w	800f764 <_dtoa_r+0xb34>
 800f5d4:	9b04      	ldr	r3, [sp, #16]
 800f5d6:	9301      	str	r3, [sp, #4]
 800f5d8:	2d00      	cmp	r5, #0
 800f5da:	dd05      	ble.n	800f5e8 <_dtoa_r+0x9b8>
 800f5dc:	4639      	mov	r1, r7
 800f5de:	462a      	mov	r2, r5
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	f000 fc71 	bl	800fec8 <__lshift>
 800f5e6:	4607      	mov	r7, r0
 800f5e8:	f1b8 0f00 	cmp.w	r8, #0
 800f5ec:	d05b      	beq.n	800f6a6 <_dtoa_r+0xa76>
 800f5ee:	6879      	ldr	r1, [r7, #4]
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	f000 fa0f 	bl	800fa14 <_Balloc>
 800f5f6:	4605      	mov	r5, r0
 800f5f8:	b928      	cbnz	r0, 800f606 <_dtoa_r+0x9d6>
 800f5fa:	4b83      	ldr	r3, [pc, #524]	; (800f808 <_dtoa_r+0xbd8>)
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f602:	f7ff bb2e 	b.w	800ec62 <_dtoa_r+0x32>
 800f606:	693a      	ldr	r2, [r7, #16]
 800f608:	3202      	adds	r2, #2
 800f60a:	0092      	lsls	r2, r2, #2
 800f60c:	f107 010c 	add.w	r1, r7, #12
 800f610:	300c      	adds	r0, #12
 800f612:	f7ff fa70 	bl	800eaf6 <memcpy>
 800f616:	2201      	movs	r2, #1
 800f618:	4629      	mov	r1, r5
 800f61a:	4620      	mov	r0, r4
 800f61c:	f000 fc54 	bl	800fec8 <__lshift>
 800f620:	9b00      	ldr	r3, [sp, #0]
 800f622:	3301      	adds	r3, #1
 800f624:	9304      	str	r3, [sp, #16]
 800f626:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f62a:	4413      	add	r3, r2
 800f62c:	9308      	str	r3, [sp, #32]
 800f62e:	9b02      	ldr	r3, [sp, #8]
 800f630:	f003 0301 	and.w	r3, r3, #1
 800f634:	46b8      	mov	r8, r7
 800f636:	9306      	str	r3, [sp, #24]
 800f638:	4607      	mov	r7, r0
 800f63a:	9b04      	ldr	r3, [sp, #16]
 800f63c:	4631      	mov	r1, r6
 800f63e:	3b01      	subs	r3, #1
 800f640:	4650      	mov	r0, sl
 800f642:	9301      	str	r3, [sp, #4]
 800f644:	f7ff fa6c 	bl	800eb20 <quorem>
 800f648:	4641      	mov	r1, r8
 800f64a:	9002      	str	r0, [sp, #8]
 800f64c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f650:	4650      	mov	r0, sl
 800f652:	f000 fca5 	bl	800ffa0 <__mcmp>
 800f656:	463a      	mov	r2, r7
 800f658:	9005      	str	r0, [sp, #20]
 800f65a:	4631      	mov	r1, r6
 800f65c:	4620      	mov	r0, r4
 800f65e:	f000 fcbb 	bl	800ffd8 <__mdiff>
 800f662:	68c2      	ldr	r2, [r0, #12]
 800f664:	4605      	mov	r5, r0
 800f666:	bb02      	cbnz	r2, 800f6aa <_dtoa_r+0xa7a>
 800f668:	4601      	mov	r1, r0
 800f66a:	4650      	mov	r0, sl
 800f66c:	f000 fc98 	bl	800ffa0 <__mcmp>
 800f670:	4602      	mov	r2, r0
 800f672:	4629      	mov	r1, r5
 800f674:	4620      	mov	r0, r4
 800f676:	9209      	str	r2, [sp, #36]	; 0x24
 800f678:	f000 fa0c 	bl	800fa94 <_Bfree>
 800f67c:	9b07      	ldr	r3, [sp, #28]
 800f67e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f680:	9d04      	ldr	r5, [sp, #16]
 800f682:	ea43 0102 	orr.w	r1, r3, r2
 800f686:	9b06      	ldr	r3, [sp, #24]
 800f688:	4319      	orrs	r1, r3
 800f68a:	d110      	bne.n	800f6ae <_dtoa_r+0xa7e>
 800f68c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f690:	d029      	beq.n	800f6e6 <_dtoa_r+0xab6>
 800f692:	9b05      	ldr	r3, [sp, #20]
 800f694:	2b00      	cmp	r3, #0
 800f696:	dd02      	ble.n	800f69e <_dtoa_r+0xa6e>
 800f698:	9b02      	ldr	r3, [sp, #8]
 800f69a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f69e:	9b01      	ldr	r3, [sp, #4]
 800f6a0:	f883 9000 	strb.w	r9, [r3]
 800f6a4:	e774      	b.n	800f590 <_dtoa_r+0x960>
 800f6a6:	4638      	mov	r0, r7
 800f6a8:	e7ba      	b.n	800f620 <_dtoa_r+0x9f0>
 800f6aa:	2201      	movs	r2, #1
 800f6ac:	e7e1      	b.n	800f672 <_dtoa_r+0xa42>
 800f6ae:	9b05      	ldr	r3, [sp, #20]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	db04      	blt.n	800f6be <_dtoa_r+0xa8e>
 800f6b4:	9907      	ldr	r1, [sp, #28]
 800f6b6:	430b      	orrs	r3, r1
 800f6b8:	9906      	ldr	r1, [sp, #24]
 800f6ba:	430b      	orrs	r3, r1
 800f6bc:	d120      	bne.n	800f700 <_dtoa_r+0xad0>
 800f6be:	2a00      	cmp	r2, #0
 800f6c0:	dded      	ble.n	800f69e <_dtoa_r+0xa6e>
 800f6c2:	4651      	mov	r1, sl
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f000 fbfe 	bl	800fec8 <__lshift>
 800f6cc:	4631      	mov	r1, r6
 800f6ce:	4682      	mov	sl, r0
 800f6d0:	f000 fc66 	bl	800ffa0 <__mcmp>
 800f6d4:	2800      	cmp	r0, #0
 800f6d6:	dc03      	bgt.n	800f6e0 <_dtoa_r+0xab0>
 800f6d8:	d1e1      	bne.n	800f69e <_dtoa_r+0xa6e>
 800f6da:	f019 0f01 	tst.w	r9, #1
 800f6de:	d0de      	beq.n	800f69e <_dtoa_r+0xa6e>
 800f6e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f6e4:	d1d8      	bne.n	800f698 <_dtoa_r+0xa68>
 800f6e6:	9a01      	ldr	r2, [sp, #4]
 800f6e8:	2339      	movs	r3, #57	; 0x39
 800f6ea:	7013      	strb	r3, [r2, #0]
 800f6ec:	462b      	mov	r3, r5
 800f6ee:	461d      	mov	r5, r3
 800f6f0:	3b01      	subs	r3, #1
 800f6f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f6f6:	2a39      	cmp	r2, #57	; 0x39
 800f6f8:	d06c      	beq.n	800f7d4 <_dtoa_r+0xba4>
 800f6fa:	3201      	adds	r2, #1
 800f6fc:	701a      	strb	r2, [r3, #0]
 800f6fe:	e747      	b.n	800f590 <_dtoa_r+0x960>
 800f700:	2a00      	cmp	r2, #0
 800f702:	dd07      	ble.n	800f714 <_dtoa_r+0xae4>
 800f704:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f708:	d0ed      	beq.n	800f6e6 <_dtoa_r+0xab6>
 800f70a:	9a01      	ldr	r2, [sp, #4]
 800f70c:	f109 0301 	add.w	r3, r9, #1
 800f710:	7013      	strb	r3, [r2, #0]
 800f712:	e73d      	b.n	800f590 <_dtoa_r+0x960>
 800f714:	9b04      	ldr	r3, [sp, #16]
 800f716:	9a08      	ldr	r2, [sp, #32]
 800f718:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d043      	beq.n	800f7a8 <_dtoa_r+0xb78>
 800f720:	4651      	mov	r1, sl
 800f722:	2300      	movs	r3, #0
 800f724:	220a      	movs	r2, #10
 800f726:	4620      	mov	r0, r4
 800f728:	f000 f9d6 	bl	800fad8 <__multadd>
 800f72c:	45b8      	cmp	r8, r7
 800f72e:	4682      	mov	sl, r0
 800f730:	f04f 0300 	mov.w	r3, #0
 800f734:	f04f 020a 	mov.w	r2, #10
 800f738:	4641      	mov	r1, r8
 800f73a:	4620      	mov	r0, r4
 800f73c:	d107      	bne.n	800f74e <_dtoa_r+0xb1e>
 800f73e:	f000 f9cb 	bl	800fad8 <__multadd>
 800f742:	4680      	mov	r8, r0
 800f744:	4607      	mov	r7, r0
 800f746:	9b04      	ldr	r3, [sp, #16]
 800f748:	3301      	adds	r3, #1
 800f74a:	9304      	str	r3, [sp, #16]
 800f74c:	e775      	b.n	800f63a <_dtoa_r+0xa0a>
 800f74e:	f000 f9c3 	bl	800fad8 <__multadd>
 800f752:	4639      	mov	r1, r7
 800f754:	4680      	mov	r8, r0
 800f756:	2300      	movs	r3, #0
 800f758:	220a      	movs	r2, #10
 800f75a:	4620      	mov	r0, r4
 800f75c:	f000 f9bc 	bl	800fad8 <__multadd>
 800f760:	4607      	mov	r7, r0
 800f762:	e7f0      	b.n	800f746 <_dtoa_r+0xb16>
 800f764:	9b04      	ldr	r3, [sp, #16]
 800f766:	9301      	str	r3, [sp, #4]
 800f768:	9d00      	ldr	r5, [sp, #0]
 800f76a:	4631      	mov	r1, r6
 800f76c:	4650      	mov	r0, sl
 800f76e:	f7ff f9d7 	bl	800eb20 <quorem>
 800f772:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f776:	9b00      	ldr	r3, [sp, #0]
 800f778:	f805 9b01 	strb.w	r9, [r5], #1
 800f77c:	1aea      	subs	r2, r5, r3
 800f77e:	9b01      	ldr	r3, [sp, #4]
 800f780:	4293      	cmp	r3, r2
 800f782:	dd07      	ble.n	800f794 <_dtoa_r+0xb64>
 800f784:	4651      	mov	r1, sl
 800f786:	2300      	movs	r3, #0
 800f788:	220a      	movs	r2, #10
 800f78a:	4620      	mov	r0, r4
 800f78c:	f000 f9a4 	bl	800fad8 <__multadd>
 800f790:	4682      	mov	sl, r0
 800f792:	e7ea      	b.n	800f76a <_dtoa_r+0xb3a>
 800f794:	9b01      	ldr	r3, [sp, #4]
 800f796:	2b00      	cmp	r3, #0
 800f798:	bfc8      	it	gt
 800f79a:	461d      	movgt	r5, r3
 800f79c:	9b00      	ldr	r3, [sp, #0]
 800f79e:	bfd8      	it	le
 800f7a0:	2501      	movle	r5, #1
 800f7a2:	441d      	add	r5, r3
 800f7a4:	f04f 0800 	mov.w	r8, #0
 800f7a8:	4651      	mov	r1, sl
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f000 fb8b 	bl	800fec8 <__lshift>
 800f7b2:	4631      	mov	r1, r6
 800f7b4:	4682      	mov	sl, r0
 800f7b6:	f000 fbf3 	bl	800ffa0 <__mcmp>
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	dc96      	bgt.n	800f6ec <_dtoa_r+0xabc>
 800f7be:	d102      	bne.n	800f7c6 <_dtoa_r+0xb96>
 800f7c0:	f019 0f01 	tst.w	r9, #1
 800f7c4:	d192      	bne.n	800f6ec <_dtoa_r+0xabc>
 800f7c6:	462b      	mov	r3, r5
 800f7c8:	461d      	mov	r5, r3
 800f7ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7ce:	2a30      	cmp	r2, #48	; 0x30
 800f7d0:	d0fa      	beq.n	800f7c8 <_dtoa_r+0xb98>
 800f7d2:	e6dd      	b.n	800f590 <_dtoa_r+0x960>
 800f7d4:	9a00      	ldr	r2, [sp, #0]
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d189      	bne.n	800f6ee <_dtoa_r+0xabe>
 800f7da:	f10b 0b01 	add.w	fp, fp, #1
 800f7de:	2331      	movs	r3, #49	; 0x31
 800f7e0:	e796      	b.n	800f710 <_dtoa_r+0xae0>
 800f7e2:	4b0a      	ldr	r3, [pc, #40]	; (800f80c <_dtoa_r+0xbdc>)
 800f7e4:	f7ff ba99 	b.w	800ed1a <_dtoa_r+0xea>
 800f7e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	f47f aa6d 	bne.w	800ecca <_dtoa_r+0x9a>
 800f7f0:	4b07      	ldr	r3, [pc, #28]	; (800f810 <_dtoa_r+0xbe0>)
 800f7f2:	f7ff ba92 	b.w	800ed1a <_dtoa_r+0xea>
 800f7f6:	9b01      	ldr	r3, [sp, #4]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	dcb5      	bgt.n	800f768 <_dtoa_r+0xb38>
 800f7fc:	9b07      	ldr	r3, [sp, #28]
 800f7fe:	2b02      	cmp	r3, #2
 800f800:	f73f aeb1 	bgt.w	800f566 <_dtoa_r+0x936>
 800f804:	e7b0      	b.n	800f768 <_dtoa_r+0xb38>
 800f806:	bf00      	nop
 800f808:	080143ef 	.word	0x080143ef
 800f80c:	080146d8 	.word	0x080146d8
 800f810:	08014373 	.word	0x08014373

0800f814 <_free_r>:
 800f814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f816:	2900      	cmp	r1, #0
 800f818:	d044      	beq.n	800f8a4 <_free_r+0x90>
 800f81a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f81e:	9001      	str	r0, [sp, #4]
 800f820:	2b00      	cmp	r3, #0
 800f822:	f1a1 0404 	sub.w	r4, r1, #4
 800f826:	bfb8      	it	lt
 800f828:	18e4      	addlt	r4, r4, r3
 800f82a:	f000 f8e7 	bl	800f9fc <__malloc_lock>
 800f82e:	4a1e      	ldr	r2, [pc, #120]	; (800f8a8 <_free_r+0x94>)
 800f830:	9801      	ldr	r0, [sp, #4]
 800f832:	6813      	ldr	r3, [r2, #0]
 800f834:	b933      	cbnz	r3, 800f844 <_free_r+0x30>
 800f836:	6063      	str	r3, [r4, #4]
 800f838:	6014      	str	r4, [r2, #0]
 800f83a:	b003      	add	sp, #12
 800f83c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f840:	f000 b8e2 	b.w	800fa08 <__malloc_unlock>
 800f844:	42a3      	cmp	r3, r4
 800f846:	d908      	bls.n	800f85a <_free_r+0x46>
 800f848:	6825      	ldr	r5, [r4, #0]
 800f84a:	1961      	adds	r1, r4, r5
 800f84c:	428b      	cmp	r3, r1
 800f84e:	bf01      	itttt	eq
 800f850:	6819      	ldreq	r1, [r3, #0]
 800f852:	685b      	ldreq	r3, [r3, #4]
 800f854:	1949      	addeq	r1, r1, r5
 800f856:	6021      	streq	r1, [r4, #0]
 800f858:	e7ed      	b.n	800f836 <_free_r+0x22>
 800f85a:	461a      	mov	r2, r3
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	b10b      	cbz	r3, 800f864 <_free_r+0x50>
 800f860:	42a3      	cmp	r3, r4
 800f862:	d9fa      	bls.n	800f85a <_free_r+0x46>
 800f864:	6811      	ldr	r1, [r2, #0]
 800f866:	1855      	adds	r5, r2, r1
 800f868:	42a5      	cmp	r5, r4
 800f86a:	d10b      	bne.n	800f884 <_free_r+0x70>
 800f86c:	6824      	ldr	r4, [r4, #0]
 800f86e:	4421      	add	r1, r4
 800f870:	1854      	adds	r4, r2, r1
 800f872:	42a3      	cmp	r3, r4
 800f874:	6011      	str	r1, [r2, #0]
 800f876:	d1e0      	bne.n	800f83a <_free_r+0x26>
 800f878:	681c      	ldr	r4, [r3, #0]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	6053      	str	r3, [r2, #4]
 800f87e:	440c      	add	r4, r1
 800f880:	6014      	str	r4, [r2, #0]
 800f882:	e7da      	b.n	800f83a <_free_r+0x26>
 800f884:	d902      	bls.n	800f88c <_free_r+0x78>
 800f886:	230c      	movs	r3, #12
 800f888:	6003      	str	r3, [r0, #0]
 800f88a:	e7d6      	b.n	800f83a <_free_r+0x26>
 800f88c:	6825      	ldr	r5, [r4, #0]
 800f88e:	1961      	adds	r1, r4, r5
 800f890:	428b      	cmp	r3, r1
 800f892:	bf04      	itt	eq
 800f894:	6819      	ldreq	r1, [r3, #0]
 800f896:	685b      	ldreq	r3, [r3, #4]
 800f898:	6063      	str	r3, [r4, #4]
 800f89a:	bf04      	itt	eq
 800f89c:	1949      	addeq	r1, r1, r5
 800f89e:	6021      	streq	r1, [r4, #0]
 800f8a0:	6054      	str	r4, [r2, #4]
 800f8a2:	e7ca      	b.n	800f83a <_free_r+0x26>
 800f8a4:	b003      	add	sp, #12
 800f8a6:	bd30      	pop	{r4, r5, pc}
 800f8a8:	20008c70 	.word	0x20008c70

0800f8ac <malloc>:
 800f8ac:	4b02      	ldr	r3, [pc, #8]	; (800f8b8 <malloc+0xc>)
 800f8ae:	4601      	mov	r1, r0
 800f8b0:	6818      	ldr	r0, [r3, #0]
 800f8b2:	f000 b823 	b.w	800f8fc <_malloc_r>
 800f8b6:	bf00      	nop
 800f8b8:	20000130 	.word	0x20000130

0800f8bc <sbrk_aligned>:
 800f8bc:	b570      	push	{r4, r5, r6, lr}
 800f8be:	4e0e      	ldr	r6, [pc, #56]	; (800f8f8 <sbrk_aligned+0x3c>)
 800f8c0:	460c      	mov	r4, r1
 800f8c2:	6831      	ldr	r1, [r6, #0]
 800f8c4:	4605      	mov	r5, r0
 800f8c6:	b911      	cbnz	r1, 800f8ce <sbrk_aligned+0x12>
 800f8c8:	f002 f9ae 	bl	8011c28 <_sbrk_r>
 800f8cc:	6030      	str	r0, [r6, #0]
 800f8ce:	4621      	mov	r1, r4
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	f002 f9a9 	bl	8011c28 <_sbrk_r>
 800f8d6:	1c43      	adds	r3, r0, #1
 800f8d8:	d00a      	beq.n	800f8f0 <sbrk_aligned+0x34>
 800f8da:	1cc4      	adds	r4, r0, #3
 800f8dc:	f024 0403 	bic.w	r4, r4, #3
 800f8e0:	42a0      	cmp	r0, r4
 800f8e2:	d007      	beq.n	800f8f4 <sbrk_aligned+0x38>
 800f8e4:	1a21      	subs	r1, r4, r0
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	f002 f99e 	bl	8011c28 <_sbrk_r>
 800f8ec:	3001      	adds	r0, #1
 800f8ee:	d101      	bne.n	800f8f4 <sbrk_aligned+0x38>
 800f8f0:	f04f 34ff 	mov.w	r4, #4294967295
 800f8f4:	4620      	mov	r0, r4
 800f8f6:	bd70      	pop	{r4, r5, r6, pc}
 800f8f8:	20008c74 	.word	0x20008c74

0800f8fc <_malloc_r>:
 800f8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f900:	1ccd      	adds	r5, r1, #3
 800f902:	f025 0503 	bic.w	r5, r5, #3
 800f906:	3508      	adds	r5, #8
 800f908:	2d0c      	cmp	r5, #12
 800f90a:	bf38      	it	cc
 800f90c:	250c      	movcc	r5, #12
 800f90e:	2d00      	cmp	r5, #0
 800f910:	4607      	mov	r7, r0
 800f912:	db01      	blt.n	800f918 <_malloc_r+0x1c>
 800f914:	42a9      	cmp	r1, r5
 800f916:	d905      	bls.n	800f924 <_malloc_r+0x28>
 800f918:	230c      	movs	r3, #12
 800f91a:	603b      	str	r3, [r7, #0]
 800f91c:	2600      	movs	r6, #0
 800f91e:	4630      	mov	r0, r6
 800f920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f924:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f9f8 <_malloc_r+0xfc>
 800f928:	f000 f868 	bl	800f9fc <__malloc_lock>
 800f92c:	f8d8 3000 	ldr.w	r3, [r8]
 800f930:	461c      	mov	r4, r3
 800f932:	bb5c      	cbnz	r4, 800f98c <_malloc_r+0x90>
 800f934:	4629      	mov	r1, r5
 800f936:	4638      	mov	r0, r7
 800f938:	f7ff ffc0 	bl	800f8bc <sbrk_aligned>
 800f93c:	1c43      	adds	r3, r0, #1
 800f93e:	4604      	mov	r4, r0
 800f940:	d155      	bne.n	800f9ee <_malloc_r+0xf2>
 800f942:	f8d8 4000 	ldr.w	r4, [r8]
 800f946:	4626      	mov	r6, r4
 800f948:	2e00      	cmp	r6, #0
 800f94a:	d145      	bne.n	800f9d8 <_malloc_r+0xdc>
 800f94c:	2c00      	cmp	r4, #0
 800f94e:	d048      	beq.n	800f9e2 <_malloc_r+0xe6>
 800f950:	6823      	ldr	r3, [r4, #0]
 800f952:	4631      	mov	r1, r6
 800f954:	4638      	mov	r0, r7
 800f956:	eb04 0903 	add.w	r9, r4, r3
 800f95a:	f002 f965 	bl	8011c28 <_sbrk_r>
 800f95e:	4581      	cmp	r9, r0
 800f960:	d13f      	bne.n	800f9e2 <_malloc_r+0xe6>
 800f962:	6821      	ldr	r1, [r4, #0]
 800f964:	1a6d      	subs	r5, r5, r1
 800f966:	4629      	mov	r1, r5
 800f968:	4638      	mov	r0, r7
 800f96a:	f7ff ffa7 	bl	800f8bc <sbrk_aligned>
 800f96e:	3001      	adds	r0, #1
 800f970:	d037      	beq.n	800f9e2 <_malloc_r+0xe6>
 800f972:	6823      	ldr	r3, [r4, #0]
 800f974:	442b      	add	r3, r5
 800f976:	6023      	str	r3, [r4, #0]
 800f978:	f8d8 3000 	ldr.w	r3, [r8]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d038      	beq.n	800f9f2 <_malloc_r+0xf6>
 800f980:	685a      	ldr	r2, [r3, #4]
 800f982:	42a2      	cmp	r2, r4
 800f984:	d12b      	bne.n	800f9de <_malloc_r+0xe2>
 800f986:	2200      	movs	r2, #0
 800f988:	605a      	str	r2, [r3, #4]
 800f98a:	e00f      	b.n	800f9ac <_malloc_r+0xb0>
 800f98c:	6822      	ldr	r2, [r4, #0]
 800f98e:	1b52      	subs	r2, r2, r5
 800f990:	d41f      	bmi.n	800f9d2 <_malloc_r+0xd6>
 800f992:	2a0b      	cmp	r2, #11
 800f994:	d917      	bls.n	800f9c6 <_malloc_r+0xca>
 800f996:	1961      	adds	r1, r4, r5
 800f998:	42a3      	cmp	r3, r4
 800f99a:	6025      	str	r5, [r4, #0]
 800f99c:	bf18      	it	ne
 800f99e:	6059      	strne	r1, [r3, #4]
 800f9a0:	6863      	ldr	r3, [r4, #4]
 800f9a2:	bf08      	it	eq
 800f9a4:	f8c8 1000 	streq.w	r1, [r8]
 800f9a8:	5162      	str	r2, [r4, r5]
 800f9aa:	604b      	str	r3, [r1, #4]
 800f9ac:	4638      	mov	r0, r7
 800f9ae:	f104 060b 	add.w	r6, r4, #11
 800f9b2:	f000 f829 	bl	800fa08 <__malloc_unlock>
 800f9b6:	f026 0607 	bic.w	r6, r6, #7
 800f9ba:	1d23      	adds	r3, r4, #4
 800f9bc:	1af2      	subs	r2, r6, r3
 800f9be:	d0ae      	beq.n	800f91e <_malloc_r+0x22>
 800f9c0:	1b9b      	subs	r3, r3, r6
 800f9c2:	50a3      	str	r3, [r4, r2]
 800f9c4:	e7ab      	b.n	800f91e <_malloc_r+0x22>
 800f9c6:	42a3      	cmp	r3, r4
 800f9c8:	6862      	ldr	r2, [r4, #4]
 800f9ca:	d1dd      	bne.n	800f988 <_malloc_r+0x8c>
 800f9cc:	f8c8 2000 	str.w	r2, [r8]
 800f9d0:	e7ec      	b.n	800f9ac <_malloc_r+0xb0>
 800f9d2:	4623      	mov	r3, r4
 800f9d4:	6864      	ldr	r4, [r4, #4]
 800f9d6:	e7ac      	b.n	800f932 <_malloc_r+0x36>
 800f9d8:	4634      	mov	r4, r6
 800f9da:	6876      	ldr	r6, [r6, #4]
 800f9dc:	e7b4      	b.n	800f948 <_malloc_r+0x4c>
 800f9de:	4613      	mov	r3, r2
 800f9e0:	e7cc      	b.n	800f97c <_malloc_r+0x80>
 800f9e2:	230c      	movs	r3, #12
 800f9e4:	603b      	str	r3, [r7, #0]
 800f9e6:	4638      	mov	r0, r7
 800f9e8:	f000 f80e 	bl	800fa08 <__malloc_unlock>
 800f9ec:	e797      	b.n	800f91e <_malloc_r+0x22>
 800f9ee:	6025      	str	r5, [r4, #0]
 800f9f0:	e7dc      	b.n	800f9ac <_malloc_r+0xb0>
 800f9f2:	605b      	str	r3, [r3, #4]
 800f9f4:	deff      	udf	#255	; 0xff
 800f9f6:	bf00      	nop
 800f9f8:	20008c70 	.word	0x20008c70

0800f9fc <__malloc_lock>:
 800f9fc:	4801      	ldr	r0, [pc, #4]	; (800fa04 <__malloc_lock+0x8>)
 800f9fe:	f7ff b870 	b.w	800eae2 <__retarget_lock_acquire_recursive>
 800fa02:	bf00      	nop
 800fa04:	20008c6c 	.word	0x20008c6c

0800fa08 <__malloc_unlock>:
 800fa08:	4801      	ldr	r0, [pc, #4]	; (800fa10 <__malloc_unlock+0x8>)
 800fa0a:	f7ff b86b 	b.w	800eae4 <__retarget_lock_release_recursive>
 800fa0e:	bf00      	nop
 800fa10:	20008c6c 	.word	0x20008c6c

0800fa14 <_Balloc>:
 800fa14:	b570      	push	{r4, r5, r6, lr}
 800fa16:	69c6      	ldr	r6, [r0, #28]
 800fa18:	4604      	mov	r4, r0
 800fa1a:	460d      	mov	r5, r1
 800fa1c:	b976      	cbnz	r6, 800fa3c <_Balloc+0x28>
 800fa1e:	2010      	movs	r0, #16
 800fa20:	f7ff ff44 	bl	800f8ac <malloc>
 800fa24:	4602      	mov	r2, r0
 800fa26:	61e0      	str	r0, [r4, #28]
 800fa28:	b920      	cbnz	r0, 800fa34 <_Balloc+0x20>
 800fa2a:	4b18      	ldr	r3, [pc, #96]	; (800fa8c <_Balloc+0x78>)
 800fa2c:	4818      	ldr	r0, [pc, #96]	; (800fa90 <_Balloc+0x7c>)
 800fa2e:	216b      	movs	r1, #107	; 0x6b
 800fa30:	f002 f912 	bl	8011c58 <__assert_func>
 800fa34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa38:	6006      	str	r6, [r0, #0]
 800fa3a:	60c6      	str	r6, [r0, #12]
 800fa3c:	69e6      	ldr	r6, [r4, #28]
 800fa3e:	68f3      	ldr	r3, [r6, #12]
 800fa40:	b183      	cbz	r3, 800fa64 <_Balloc+0x50>
 800fa42:	69e3      	ldr	r3, [r4, #28]
 800fa44:	68db      	ldr	r3, [r3, #12]
 800fa46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fa4a:	b9b8      	cbnz	r0, 800fa7c <_Balloc+0x68>
 800fa4c:	2101      	movs	r1, #1
 800fa4e:	fa01 f605 	lsl.w	r6, r1, r5
 800fa52:	1d72      	adds	r2, r6, #5
 800fa54:	0092      	lsls	r2, r2, #2
 800fa56:	4620      	mov	r0, r4
 800fa58:	f002 f91c 	bl	8011c94 <_calloc_r>
 800fa5c:	b160      	cbz	r0, 800fa78 <_Balloc+0x64>
 800fa5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fa62:	e00e      	b.n	800fa82 <_Balloc+0x6e>
 800fa64:	2221      	movs	r2, #33	; 0x21
 800fa66:	2104      	movs	r1, #4
 800fa68:	4620      	mov	r0, r4
 800fa6a:	f002 f913 	bl	8011c94 <_calloc_r>
 800fa6e:	69e3      	ldr	r3, [r4, #28]
 800fa70:	60f0      	str	r0, [r6, #12]
 800fa72:	68db      	ldr	r3, [r3, #12]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d1e4      	bne.n	800fa42 <_Balloc+0x2e>
 800fa78:	2000      	movs	r0, #0
 800fa7a:	bd70      	pop	{r4, r5, r6, pc}
 800fa7c:	6802      	ldr	r2, [r0, #0]
 800fa7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fa82:	2300      	movs	r3, #0
 800fa84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fa88:	e7f7      	b.n	800fa7a <_Balloc+0x66>
 800fa8a:	bf00      	nop
 800fa8c:	08014380 	.word	0x08014380
 800fa90:	08014400 	.word	0x08014400

0800fa94 <_Bfree>:
 800fa94:	b570      	push	{r4, r5, r6, lr}
 800fa96:	69c6      	ldr	r6, [r0, #28]
 800fa98:	4605      	mov	r5, r0
 800fa9a:	460c      	mov	r4, r1
 800fa9c:	b976      	cbnz	r6, 800fabc <_Bfree+0x28>
 800fa9e:	2010      	movs	r0, #16
 800faa0:	f7ff ff04 	bl	800f8ac <malloc>
 800faa4:	4602      	mov	r2, r0
 800faa6:	61e8      	str	r0, [r5, #28]
 800faa8:	b920      	cbnz	r0, 800fab4 <_Bfree+0x20>
 800faaa:	4b09      	ldr	r3, [pc, #36]	; (800fad0 <_Bfree+0x3c>)
 800faac:	4809      	ldr	r0, [pc, #36]	; (800fad4 <_Bfree+0x40>)
 800faae:	218f      	movs	r1, #143	; 0x8f
 800fab0:	f002 f8d2 	bl	8011c58 <__assert_func>
 800fab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fab8:	6006      	str	r6, [r0, #0]
 800faba:	60c6      	str	r6, [r0, #12]
 800fabc:	b13c      	cbz	r4, 800face <_Bfree+0x3a>
 800fabe:	69eb      	ldr	r3, [r5, #28]
 800fac0:	6862      	ldr	r2, [r4, #4]
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fac8:	6021      	str	r1, [r4, #0]
 800faca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800face:	bd70      	pop	{r4, r5, r6, pc}
 800fad0:	08014380 	.word	0x08014380
 800fad4:	08014400 	.word	0x08014400

0800fad8 <__multadd>:
 800fad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fadc:	690d      	ldr	r5, [r1, #16]
 800fade:	4607      	mov	r7, r0
 800fae0:	460c      	mov	r4, r1
 800fae2:	461e      	mov	r6, r3
 800fae4:	f101 0c14 	add.w	ip, r1, #20
 800fae8:	2000      	movs	r0, #0
 800faea:	f8dc 3000 	ldr.w	r3, [ip]
 800faee:	b299      	uxth	r1, r3
 800faf0:	fb02 6101 	mla	r1, r2, r1, r6
 800faf4:	0c1e      	lsrs	r6, r3, #16
 800faf6:	0c0b      	lsrs	r3, r1, #16
 800faf8:	fb02 3306 	mla	r3, r2, r6, r3
 800fafc:	b289      	uxth	r1, r1
 800fafe:	3001      	adds	r0, #1
 800fb00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fb04:	4285      	cmp	r5, r0
 800fb06:	f84c 1b04 	str.w	r1, [ip], #4
 800fb0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fb0e:	dcec      	bgt.n	800faea <__multadd+0x12>
 800fb10:	b30e      	cbz	r6, 800fb56 <__multadd+0x7e>
 800fb12:	68a3      	ldr	r3, [r4, #8]
 800fb14:	42ab      	cmp	r3, r5
 800fb16:	dc19      	bgt.n	800fb4c <__multadd+0x74>
 800fb18:	6861      	ldr	r1, [r4, #4]
 800fb1a:	4638      	mov	r0, r7
 800fb1c:	3101      	adds	r1, #1
 800fb1e:	f7ff ff79 	bl	800fa14 <_Balloc>
 800fb22:	4680      	mov	r8, r0
 800fb24:	b928      	cbnz	r0, 800fb32 <__multadd+0x5a>
 800fb26:	4602      	mov	r2, r0
 800fb28:	4b0c      	ldr	r3, [pc, #48]	; (800fb5c <__multadd+0x84>)
 800fb2a:	480d      	ldr	r0, [pc, #52]	; (800fb60 <__multadd+0x88>)
 800fb2c:	21ba      	movs	r1, #186	; 0xba
 800fb2e:	f002 f893 	bl	8011c58 <__assert_func>
 800fb32:	6922      	ldr	r2, [r4, #16]
 800fb34:	3202      	adds	r2, #2
 800fb36:	f104 010c 	add.w	r1, r4, #12
 800fb3a:	0092      	lsls	r2, r2, #2
 800fb3c:	300c      	adds	r0, #12
 800fb3e:	f7fe ffda 	bl	800eaf6 <memcpy>
 800fb42:	4621      	mov	r1, r4
 800fb44:	4638      	mov	r0, r7
 800fb46:	f7ff ffa5 	bl	800fa94 <_Bfree>
 800fb4a:	4644      	mov	r4, r8
 800fb4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fb50:	3501      	adds	r5, #1
 800fb52:	615e      	str	r6, [r3, #20]
 800fb54:	6125      	str	r5, [r4, #16]
 800fb56:	4620      	mov	r0, r4
 800fb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb5c:	080143ef 	.word	0x080143ef
 800fb60:	08014400 	.word	0x08014400

0800fb64 <__s2b>:
 800fb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb68:	460c      	mov	r4, r1
 800fb6a:	4615      	mov	r5, r2
 800fb6c:	461f      	mov	r7, r3
 800fb6e:	2209      	movs	r2, #9
 800fb70:	3308      	adds	r3, #8
 800fb72:	4606      	mov	r6, r0
 800fb74:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb78:	2100      	movs	r1, #0
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	db09      	blt.n	800fb94 <__s2b+0x30>
 800fb80:	4630      	mov	r0, r6
 800fb82:	f7ff ff47 	bl	800fa14 <_Balloc>
 800fb86:	b940      	cbnz	r0, 800fb9a <__s2b+0x36>
 800fb88:	4602      	mov	r2, r0
 800fb8a:	4b19      	ldr	r3, [pc, #100]	; (800fbf0 <__s2b+0x8c>)
 800fb8c:	4819      	ldr	r0, [pc, #100]	; (800fbf4 <__s2b+0x90>)
 800fb8e:	21d3      	movs	r1, #211	; 0xd3
 800fb90:	f002 f862 	bl	8011c58 <__assert_func>
 800fb94:	0052      	lsls	r2, r2, #1
 800fb96:	3101      	adds	r1, #1
 800fb98:	e7f0      	b.n	800fb7c <__s2b+0x18>
 800fb9a:	9b08      	ldr	r3, [sp, #32]
 800fb9c:	6143      	str	r3, [r0, #20]
 800fb9e:	2d09      	cmp	r5, #9
 800fba0:	f04f 0301 	mov.w	r3, #1
 800fba4:	6103      	str	r3, [r0, #16]
 800fba6:	dd16      	ble.n	800fbd6 <__s2b+0x72>
 800fba8:	f104 0909 	add.w	r9, r4, #9
 800fbac:	46c8      	mov	r8, r9
 800fbae:	442c      	add	r4, r5
 800fbb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fbb4:	4601      	mov	r1, r0
 800fbb6:	3b30      	subs	r3, #48	; 0x30
 800fbb8:	220a      	movs	r2, #10
 800fbba:	4630      	mov	r0, r6
 800fbbc:	f7ff ff8c 	bl	800fad8 <__multadd>
 800fbc0:	45a0      	cmp	r8, r4
 800fbc2:	d1f5      	bne.n	800fbb0 <__s2b+0x4c>
 800fbc4:	f1a5 0408 	sub.w	r4, r5, #8
 800fbc8:	444c      	add	r4, r9
 800fbca:	1b2d      	subs	r5, r5, r4
 800fbcc:	1963      	adds	r3, r4, r5
 800fbce:	42bb      	cmp	r3, r7
 800fbd0:	db04      	blt.n	800fbdc <__s2b+0x78>
 800fbd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbd6:	340a      	adds	r4, #10
 800fbd8:	2509      	movs	r5, #9
 800fbda:	e7f6      	b.n	800fbca <__s2b+0x66>
 800fbdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fbe0:	4601      	mov	r1, r0
 800fbe2:	3b30      	subs	r3, #48	; 0x30
 800fbe4:	220a      	movs	r2, #10
 800fbe6:	4630      	mov	r0, r6
 800fbe8:	f7ff ff76 	bl	800fad8 <__multadd>
 800fbec:	e7ee      	b.n	800fbcc <__s2b+0x68>
 800fbee:	bf00      	nop
 800fbf0:	080143ef 	.word	0x080143ef
 800fbf4:	08014400 	.word	0x08014400

0800fbf8 <__hi0bits>:
 800fbf8:	0c03      	lsrs	r3, r0, #16
 800fbfa:	041b      	lsls	r3, r3, #16
 800fbfc:	b9d3      	cbnz	r3, 800fc34 <__hi0bits+0x3c>
 800fbfe:	0400      	lsls	r0, r0, #16
 800fc00:	2310      	movs	r3, #16
 800fc02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fc06:	bf04      	itt	eq
 800fc08:	0200      	lsleq	r0, r0, #8
 800fc0a:	3308      	addeq	r3, #8
 800fc0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fc10:	bf04      	itt	eq
 800fc12:	0100      	lsleq	r0, r0, #4
 800fc14:	3304      	addeq	r3, #4
 800fc16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fc1a:	bf04      	itt	eq
 800fc1c:	0080      	lsleq	r0, r0, #2
 800fc1e:	3302      	addeq	r3, #2
 800fc20:	2800      	cmp	r0, #0
 800fc22:	db05      	blt.n	800fc30 <__hi0bits+0x38>
 800fc24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fc28:	f103 0301 	add.w	r3, r3, #1
 800fc2c:	bf08      	it	eq
 800fc2e:	2320      	moveq	r3, #32
 800fc30:	4618      	mov	r0, r3
 800fc32:	4770      	bx	lr
 800fc34:	2300      	movs	r3, #0
 800fc36:	e7e4      	b.n	800fc02 <__hi0bits+0xa>

0800fc38 <__lo0bits>:
 800fc38:	6803      	ldr	r3, [r0, #0]
 800fc3a:	f013 0207 	ands.w	r2, r3, #7
 800fc3e:	d00c      	beq.n	800fc5a <__lo0bits+0x22>
 800fc40:	07d9      	lsls	r1, r3, #31
 800fc42:	d422      	bmi.n	800fc8a <__lo0bits+0x52>
 800fc44:	079a      	lsls	r2, r3, #30
 800fc46:	bf49      	itett	mi
 800fc48:	085b      	lsrmi	r3, r3, #1
 800fc4a:	089b      	lsrpl	r3, r3, #2
 800fc4c:	6003      	strmi	r3, [r0, #0]
 800fc4e:	2201      	movmi	r2, #1
 800fc50:	bf5c      	itt	pl
 800fc52:	6003      	strpl	r3, [r0, #0]
 800fc54:	2202      	movpl	r2, #2
 800fc56:	4610      	mov	r0, r2
 800fc58:	4770      	bx	lr
 800fc5a:	b299      	uxth	r1, r3
 800fc5c:	b909      	cbnz	r1, 800fc62 <__lo0bits+0x2a>
 800fc5e:	0c1b      	lsrs	r3, r3, #16
 800fc60:	2210      	movs	r2, #16
 800fc62:	b2d9      	uxtb	r1, r3
 800fc64:	b909      	cbnz	r1, 800fc6a <__lo0bits+0x32>
 800fc66:	3208      	adds	r2, #8
 800fc68:	0a1b      	lsrs	r3, r3, #8
 800fc6a:	0719      	lsls	r1, r3, #28
 800fc6c:	bf04      	itt	eq
 800fc6e:	091b      	lsreq	r3, r3, #4
 800fc70:	3204      	addeq	r2, #4
 800fc72:	0799      	lsls	r1, r3, #30
 800fc74:	bf04      	itt	eq
 800fc76:	089b      	lsreq	r3, r3, #2
 800fc78:	3202      	addeq	r2, #2
 800fc7a:	07d9      	lsls	r1, r3, #31
 800fc7c:	d403      	bmi.n	800fc86 <__lo0bits+0x4e>
 800fc7e:	085b      	lsrs	r3, r3, #1
 800fc80:	f102 0201 	add.w	r2, r2, #1
 800fc84:	d003      	beq.n	800fc8e <__lo0bits+0x56>
 800fc86:	6003      	str	r3, [r0, #0]
 800fc88:	e7e5      	b.n	800fc56 <__lo0bits+0x1e>
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	e7e3      	b.n	800fc56 <__lo0bits+0x1e>
 800fc8e:	2220      	movs	r2, #32
 800fc90:	e7e1      	b.n	800fc56 <__lo0bits+0x1e>
	...

0800fc94 <__i2b>:
 800fc94:	b510      	push	{r4, lr}
 800fc96:	460c      	mov	r4, r1
 800fc98:	2101      	movs	r1, #1
 800fc9a:	f7ff febb 	bl	800fa14 <_Balloc>
 800fc9e:	4602      	mov	r2, r0
 800fca0:	b928      	cbnz	r0, 800fcae <__i2b+0x1a>
 800fca2:	4b05      	ldr	r3, [pc, #20]	; (800fcb8 <__i2b+0x24>)
 800fca4:	4805      	ldr	r0, [pc, #20]	; (800fcbc <__i2b+0x28>)
 800fca6:	f240 1145 	movw	r1, #325	; 0x145
 800fcaa:	f001 ffd5 	bl	8011c58 <__assert_func>
 800fcae:	2301      	movs	r3, #1
 800fcb0:	6144      	str	r4, [r0, #20]
 800fcb2:	6103      	str	r3, [r0, #16]
 800fcb4:	bd10      	pop	{r4, pc}
 800fcb6:	bf00      	nop
 800fcb8:	080143ef 	.word	0x080143ef
 800fcbc:	08014400 	.word	0x08014400

0800fcc0 <__multiply>:
 800fcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc4:	4691      	mov	r9, r2
 800fcc6:	690a      	ldr	r2, [r1, #16]
 800fcc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	bfb8      	it	lt
 800fcd0:	460b      	movlt	r3, r1
 800fcd2:	460c      	mov	r4, r1
 800fcd4:	bfbc      	itt	lt
 800fcd6:	464c      	movlt	r4, r9
 800fcd8:	4699      	movlt	r9, r3
 800fcda:	6927      	ldr	r7, [r4, #16]
 800fcdc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fce0:	68a3      	ldr	r3, [r4, #8]
 800fce2:	6861      	ldr	r1, [r4, #4]
 800fce4:	eb07 060a 	add.w	r6, r7, sl
 800fce8:	42b3      	cmp	r3, r6
 800fcea:	b085      	sub	sp, #20
 800fcec:	bfb8      	it	lt
 800fcee:	3101      	addlt	r1, #1
 800fcf0:	f7ff fe90 	bl	800fa14 <_Balloc>
 800fcf4:	b930      	cbnz	r0, 800fd04 <__multiply+0x44>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	4b44      	ldr	r3, [pc, #272]	; (800fe0c <__multiply+0x14c>)
 800fcfa:	4845      	ldr	r0, [pc, #276]	; (800fe10 <__multiply+0x150>)
 800fcfc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fd00:	f001 ffaa 	bl	8011c58 <__assert_func>
 800fd04:	f100 0514 	add.w	r5, r0, #20
 800fd08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fd0c:	462b      	mov	r3, r5
 800fd0e:	2200      	movs	r2, #0
 800fd10:	4543      	cmp	r3, r8
 800fd12:	d321      	bcc.n	800fd58 <__multiply+0x98>
 800fd14:	f104 0314 	add.w	r3, r4, #20
 800fd18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fd1c:	f109 0314 	add.w	r3, r9, #20
 800fd20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fd24:	9202      	str	r2, [sp, #8]
 800fd26:	1b3a      	subs	r2, r7, r4
 800fd28:	3a15      	subs	r2, #21
 800fd2a:	f022 0203 	bic.w	r2, r2, #3
 800fd2e:	3204      	adds	r2, #4
 800fd30:	f104 0115 	add.w	r1, r4, #21
 800fd34:	428f      	cmp	r7, r1
 800fd36:	bf38      	it	cc
 800fd38:	2204      	movcc	r2, #4
 800fd3a:	9201      	str	r2, [sp, #4]
 800fd3c:	9a02      	ldr	r2, [sp, #8]
 800fd3e:	9303      	str	r3, [sp, #12]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d80c      	bhi.n	800fd5e <__multiply+0x9e>
 800fd44:	2e00      	cmp	r6, #0
 800fd46:	dd03      	ble.n	800fd50 <__multiply+0x90>
 800fd48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d05b      	beq.n	800fe08 <__multiply+0x148>
 800fd50:	6106      	str	r6, [r0, #16]
 800fd52:	b005      	add	sp, #20
 800fd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd58:	f843 2b04 	str.w	r2, [r3], #4
 800fd5c:	e7d8      	b.n	800fd10 <__multiply+0x50>
 800fd5e:	f8b3 a000 	ldrh.w	sl, [r3]
 800fd62:	f1ba 0f00 	cmp.w	sl, #0
 800fd66:	d024      	beq.n	800fdb2 <__multiply+0xf2>
 800fd68:	f104 0e14 	add.w	lr, r4, #20
 800fd6c:	46a9      	mov	r9, r5
 800fd6e:	f04f 0c00 	mov.w	ip, #0
 800fd72:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fd76:	f8d9 1000 	ldr.w	r1, [r9]
 800fd7a:	fa1f fb82 	uxth.w	fp, r2
 800fd7e:	b289      	uxth	r1, r1
 800fd80:	fb0a 110b 	mla	r1, sl, fp, r1
 800fd84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fd88:	f8d9 2000 	ldr.w	r2, [r9]
 800fd8c:	4461      	add	r1, ip
 800fd8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fd92:	fb0a c20b 	mla	r2, sl, fp, ip
 800fd96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fd9a:	b289      	uxth	r1, r1
 800fd9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fda0:	4577      	cmp	r7, lr
 800fda2:	f849 1b04 	str.w	r1, [r9], #4
 800fda6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fdaa:	d8e2      	bhi.n	800fd72 <__multiply+0xb2>
 800fdac:	9a01      	ldr	r2, [sp, #4]
 800fdae:	f845 c002 	str.w	ip, [r5, r2]
 800fdb2:	9a03      	ldr	r2, [sp, #12]
 800fdb4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fdb8:	3304      	adds	r3, #4
 800fdba:	f1b9 0f00 	cmp.w	r9, #0
 800fdbe:	d021      	beq.n	800fe04 <__multiply+0x144>
 800fdc0:	6829      	ldr	r1, [r5, #0]
 800fdc2:	f104 0c14 	add.w	ip, r4, #20
 800fdc6:	46ae      	mov	lr, r5
 800fdc8:	f04f 0a00 	mov.w	sl, #0
 800fdcc:	f8bc b000 	ldrh.w	fp, [ip]
 800fdd0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fdd4:	fb09 220b 	mla	r2, r9, fp, r2
 800fdd8:	4452      	add	r2, sl
 800fdda:	b289      	uxth	r1, r1
 800fddc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fde0:	f84e 1b04 	str.w	r1, [lr], #4
 800fde4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fde8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fdec:	f8be 1000 	ldrh.w	r1, [lr]
 800fdf0:	fb09 110a 	mla	r1, r9, sl, r1
 800fdf4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800fdf8:	4567      	cmp	r7, ip
 800fdfa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fdfe:	d8e5      	bhi.n	800fdcc <__multiply+0x10c>
 800fe00:	9a01      	ldr	r2, [sp, #4]
 800fe02:	50a9      	str	r1, [r5, r2]
 800fe04:	3504      	adds	r5, #4
 800fe06:	e799      	b.n	800fd3c <__multiply+0x7c>
 800fe08:	3e01      	subs	r6, #1
 800fe0a:	e79b      	b.n	800fd44 <__multiply+0x84>
 800fe0c:	080143ef 	.word	0x080143ef
 800fe10:	08014400 	.word	0x08014400

0800fe14 <__pow5mult>:
 800fe14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe18:	4615      	mov	r5, r2
 800fe1a:	f012 0203 	ands.w	r2, r2, #3
 800fe1e:	4606      	mov	r6, r0
 800fe20:	460f      	mov	r7, r1
 800fe22:	d007      	beq.n	800fe34 <__pow5mult+0x20>
 800fe24:	4c25      	ldr	r4, [pc, #148]	; (800febc <__pow5mult+0xa8>)
 800fe26:	3a01      	subs	r2, #1
 800fe28:	2300      	movs	r3, #0
 800fe2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fe2e:	f7ff fe53 	bl	800fad8 <__multadd>
 800fe32:	4607      	mov	r7, r0
 800fe34:	10ad      	asrs	r5, r5, #2
 800fe36:	d03d      	beq.n	800feb4 <__pow5mult+0xa0>
 800fe38:	69f4      	ldr	r4, [r6, #28]
 800fe3a:	b97c      	cbnz	r4, 800fe5c <__pow5mult+0x48>
 800fe3c:	2010      	movs	r0, #16
 800fe3e:	f7ff fd35 	bl	800f8ac <malloc>
 800fe42:	4602      	mov	r2, r0
 800fe44:	61f0      	str	r0, [r6, #28]
 800fe46:	b928      	cbnz	r0, 800fe54 <__pow5mult+0x40>
 800fe48:	4b1d      	ldr	r3, [pc, #116]	; (800fec0 <__pow5mult+0xac>)
 800fe4a:	481e      	ldr	r0, [pc, #120]	; (800fec4 <__pow5mult+0xb0>)
 800fe4c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fe50:	f001 ff02 	bl	8011c58 <__assert_func>
 800fe54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fe58:	6004      	str	r4, [r0, #0]
 800fe5a:	60c4      	str	r4, [r0, #12]
 800fe5c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fe60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fe64:	b94c      	cbnz	r4, 800fe7a <__pow5mult+0x66>
 800fe66:	f240 2171 	movw	r1, #625	; 0x271
 800fe6a:	4630      	mov	r0, r6
 800fe6c:	f7ff ff12 	bl	800fc94 <__i2b>
 800fe70:	2300      	movs	r3, #0
 800fe72:	f8c8 0008 	str.w	r0, [r8, #8]
 800fe76:	4604      	mov	r4, r0
 800fe78:	6003      	str	r3, [r0, #0]
 800fe7a:	f04f 0900 	mov.w	r9, #0
 800fe7e:	07eb      	lsls	r3, r5, #31
 800fe80:	d50a      	bpl.n	800fe98 <__pow5mult+0x84>
 800fe82:	4639      	mov	r1, r7
 800fe84:	4622      	mov	r2, r4
 800fe86:	4630      	mov	r0, r6
 800fe88:	f7ff ff1a 	bl	800fcc0 <__multiply>
 800fe8c:	4639      	mov	r1, r7
 800fe8e:	4680      	mov	r8, r0
 800fe90:	4630      	mov	r0, r6
 800fe92:	f7ff fdff 	bl	800fa94 <_Bfree>
 800fe96:	4647      	mov	r7, r8
 800fe98:	106d      	asrs	r5, r5, #1
 800fe9a:	d00b      	beq.n	800feb4 <__pow5mult+0xa0>
 800fe9c:	6820      	ldr	r0, [r4, #0]
 800fe9e:	b938      	cbnz	r0, 800feb0 <__pow5mult+0x9c>
 800fea0:	4622      	mov	r2, r4
 800fea2:	4621      	mov	r1, r4
 800fea4:	4630      	mov	r0, r6
 800fea6:	f7ff ff0b 	bl	800fcc0 <__multiply>
 800feaa:	6020      	str	r0, [r4, #0]
 800feac:	f8c0 9000 	str.w	r9, [r0]
 800feb0:	4604      	mov	r4, r0
 800feb2:	e7e4      	b.n	800fe7e <__pow5mult+0x6a>
 800feb4:	4638      	mov	r0, r7
 800feb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800feba:	bf00      	nop
 800febc:	08014550 	.word	0x08014550
 800fec0:	08014380 	.word	0x08014380
 800fec4:	08014400 	.word	0x08014400

0800fec8 <__lshift>:
 800fec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fecc:	460c      	mov	r4, r1
 800fece:	6849      	ldr	r1, [r1, #4]
 800fed0:	6923      	ldr	r3, [r4, #16]
 800fed2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fed6:	68a3      	ldr	r3, [r4, #8]
 800fed8:	4607      	mov	r7, r0
 800feda:	4691      	mov	r9, r2
 800fedc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fee0:	f108 0601 	add.w	r6, r8, #1
 800fee4:	42b3      	cmp	r3, r6
 800fee6:	db0b      	blt.n	800ff00 <__lshift+0x38>
 800fee8:	4638      	mov	r0, r7
 800feea:	f7ff fd93 	bl	800fa14 <_Balloc>
 800feee:	4605      	mov	r5, r0
 800fef0:	b948      	cbnz	r0, 800ff06 <__lshift+0x3e>
 800fef2:	4602      	mov	r2, r0
 800fef4:	4b28      	ldr	r3, [pc, #160]	; (800ff98 <__lshift+0xd0>)
 800fef6:	4829      	ldr	r0, [pc, #164]	; (800ff9c <__lshift+0xd4>)
 800fef8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fefc:	f001 feac 	bl	8011c58 <__assert_func>
 800ff00:	3101      	adds	r1, #1
 800ff02:	005b      	lsls	r3, r3, #1
 800ff04:	e7ee      	b.n	800fee4 <__lshift+0x1c>
 800ff06:	2300      	movs	r3, #0
 800ff08:	f100 0114 	add.w	r1, r0, #20
 800ff0c:	f100 0210 	add.w	r2, r0, #16
 800ff10:	4618      	mov	r0, r3
 800ff12:	4553      	cmp	r3, sl
 800ff14:	db33      	blt.n	800ff7e <__lshift+0xb6>
 800ff16:	6920      	ldr	r0, [r4, #16]
 800ff18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff1c:	f104 0314 	add.w	r3, r4, #20
 800ff20:	f019 091f 	ands.w	r9, r9, #31
 800ff24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ff28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ff2c:	d02b      	beq.n	800ff86 <__lshift+0xbe>
 800ff2e:	f1c9 0e20 	rsb	lr, r9, #32
 800ff32:	468a      	mov	sl, r1
 800ff34:	2200      	movs	r2, #0
 800ff36:	6818      	ldr	r0, [r3, #0]
 800ff38:	fa00 f009 	lsl.w	r0, r0, r9
 800ff3c:	4310      	orrs	r0, r2
 800ff3e:	f84a 0b04 	str.w	r0, [sl], #4
 800ff42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff46:	459c      	cmp	ip, r3
 800ff48:	fa22 f20e 	lsr.w	r2, r2, lr
 800ff4c:	d8f3      	bhi.n	800ff36 <__lshift+0x6e>
 800ff4e:	ebac 0304 	sub.w	r3, ip, r4
 800ff52:	3b15      	subs	r3, #21
 800ff54:	f023 0303 	bic.w	r3, r3, #3
 800ff58:	3304      	adds	r3, #4
 800ff5a:	f104 0015 	add.w	r0, r4, #21
 800ff5e:	4584      	cmp	ip, r0
 800ff60:	bf38      	it	cc
 800ff62:	2304      	movcc	r3, #4
 800ff64:	50ca      	str	r2, [r1, r3]
 800ff66:	b10a      	cbz	r2, 800ff6c <__lshift+0xa4>
 800ff68:	f108 0602 	add.w	r6, r8, #2
 800ff6c:	3e01      	subs	r6, #1
 800ff6e:	4638      	mov	r0, r7
 800ff70:	612e      	str	r6, [r5, #16]
 800ff72:	4621      	mov	r1, r4
 800ff74:	f7ff fd8e 	bl	800fa94 <_Bfree>
 800ff78:	4628      	mov	r0, r5
 800ff7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ff82:	3301      	adds	r3, #1
 800ff84:	e7c5      	b.n	800ff12 <__lshift+0x4a>
 800ff86:	3904      	subs	r1, #4
 800ff88:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ff90:	459c      	cmp	ip, r3
 800ff92:	d8f9      	bhi.n	800ff88 <__lshift+0xc0>
 800ff94:	e7ea      	b.n	800ff6c <__lshift+0xa4>
 800ff96:	bf00      	nop
 800ff98:	080143ef 	.word	0x080143ef
 800ff9c:	08014400 	.word	0x08014400

0800ffa0 <__mcmp>:
 800ffa0:	b530      	push	{r4, r5, lr}
 800ffa2:	6902      	ldr	r2, [r0, #16]
 800ffa4:	690c      	ldr	r4, [r1, #16]
 800ffa6:	1b12      	subs	r2, r2, r4
 800ffa8:	d10e      	bne.n	800ffc8 <__mcmp+0x28>
 800ffaa:	f100 0314 	add.w	r3, r0, #20
 800ffae:	3114      	adds	r1, #20
 800ffb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ffb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ffb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ffbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ffc0:	42a5      	cmp	r5, r4
 800ffc2:	d003      	beq.n	800ffcc <__mcmp+0x2c>
 800ffc4:	d305      	bcc.n	800ffd2 <__mcmp+0x32>
 800ffc6:	2201      	movs	r2, #1
 800ffc8:	4610      	mov	r0, r2
 800ffca:	bd30      	pop	{r4, r5, pc}
 800ffcc:	4283      	cmp	r3, r0
 800ffce:	d3f3      	bcc.n	800ffb8 <__mcmp+0x18>
 800ffd0:	e7fa      	b.n	800ffc8 <__mcmp+0x28>
 800ffd2:	f04f 32ff 	mov.w	r2, #4294967295
 800ffd6:	e7f7      	b.n	800ffc8 <__mcmp+0x28>

0800ffd8 <__mdiff>:
 800ffd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffdc:	460c      	mov	r4, r1
 800ffde:	4606      	mov	r6, r0
 800ffe0:	4611      	mov	r1, r2
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	4690      	mov	r8, r2
 800ffe6:	f7ff ffdb 	bl	800ffa0 <__mcmp>
 800ffea:	1e05      	subs	r5, r0, #0
 800ffec:	d110      	bne.n	8010010 <__mdiff+0x38>
 800ffee:	4629      	mov	r1, r5
 800fff0:	4630      	mov	r0, r6
 800fff2:	f7ff fd0f 	bl	800fa14 <_Balloc>
 800fff6:	b930      	cbnz	r0, 8010006 <__mdiff+0x2e>
 800fff8:	4b3a      	ldr	r3, [pc, #232]	; (80100e4 <__mdiff+0x10c>)
 800fffa:	4602      	mov	r2, r0
 800fffc:	f240 2137 	movw	r1, #567	; 0x237
 8010000:	4839      	ldr	r0, [pc, #228]	; (80100e8 <__mdiff+0x110>)
 8010002:	f001 fe29 	bl	8011c58 <__assert_func>
 8010006:	2301      	movs	r3, #1
 8010008:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801000c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010010:	bfa4      	itt	ge
 8010012:	4643      	movge	r3, r8
 8010014:	46a0      	movge	r8, r4
 8010016:	4630      	mov	r0, r6
 8010018:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801001c:	bfa6      	itte	ge
 801001e:	461c      	movge	r4, r3
 8010020:	2500      	movge	r5, #0
 8010022:	2501      	movlt	r5, #1
 8010024:	f7ff fcf6 	bl	800fa14 <_Balloc>
 8010028:	b920      	cbnz	r0, 8010034 <__mdiff+0x5c>
 801002a:	4b2e      	ldr	r3, [pc, #184]	; (80100e4 <__mdiff+0x10c>)
 801002c:	4602      	mov	r2, r0
 801002e:	f240 2145 	movw	r1, #581	; 0x245
 8010032:	e7e5      	b.n	8010000 <__mdiff+0x28>
 8010034:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010038:	6926      	ldr	r6, [r4, #16]
 801003a:	60c5      	str	r5, [r0, #12]
 801003c:	f104 0914 	add.w	r9, r4, #20
 8010040:	f108 0514 	add.w	r5, r8, #20
 8010044:	f100 0e14 	add.w	lr, r0, #20
 8010048:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801004c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010050:	f108 0210 	add.w	r2, r8, #16
 8010054:	46f2      	mov	sl, lr
 8010056:	2100      	movs	r1, #0
 8010058:	f859 3b04 	ldr.w	r3, [r9], #4
 801005c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010060:	fa11 f88b 	uxtah	r8, r1, fp
 8010064:	b299      	uxth	r1, r3
 8010066:	0c1b      	lsrs	r3, r3, #16
 8010068:	eba8 0801 	sub.w	r8, r8, r1
 801006c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010070:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010074:	fa1f f888 	uxth.w	r8, r8
 8010078:	1419      	asrs	r1, r3, #16
 801007a:	454e      	cmp	r6, r9
 801007c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010080:	f84a 3b04 	str.w	r3, [sl], #4
 8010084:	d8e8      	bhi.n	8010058 <__mdiff+0x80>
 8010086:	1b33      	subs	r3, r6, r4
 8010088:	3b15      	subs	r3, #21
 801008a:	f023 0303 	bic.w	r3, r3, #3
 801008e:	3304      	adds	r3, #4
 8010090:	3415      	adds	r4, #21
 8010092:	42a6      	cmp	r6, r4
 8010094:	bf38      	it	cc
 8010096:	2304      	movcc	r3, #4
 8010098:	441d      	add	r5, r3
 801009a:	4473      	add	r3, lr
 801009c:	469e      	mov	lr, r3
 801009e:	462e      	mov	r6, r5
 80100a0:	4566      	cmp	r6, ip
 80100a2:	d30e      	bcc.n	80100c2 <__mdiff+0xea>
 80100a4:	f10c 0203 	add.w	r2, ip, #3
 80100a8:	1b52      	subs	r2, r2, r5
 80100aa:	f022 0203 	bic.w	r2, r2, #3
 80100ae:	3d03      	subs	r5, #3
 80100b0:	45ac      	cmp	ip, r5
 80100b2:	bf38      	it	cc
 80100b4:	2200      	movcc	r2, #0
 80100b6:	4413      	add	r3, r2
 80100b8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80100bc:	b17a      	cbz	r2, 80100de <__mdiff+0x106>
 80100be:	6107      	str	r7, [r0, #16]
 80100c0:	e7a4      	b.n	801000c <__mdiff+0x34>
 80100c2:	f856 8b04 	ldr.w	r8, [r6], #4
 80100c6:	fa11 f288 	uxtah	r2, r1, r8
 80100ca:	1414      	asrs	r4, r2, #16
 80100cc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80100d0:	b292      	uxth	r2, r2
 80100d2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80100d6:	f84e 2b04 	str.w	r2, [lr], #4
 80100da:	1421      	asrs	r1, r4, #16
 80100dc:	e7e0      	b.n	80100a0 <__mdiff+0xc8>
 80100de:	3f01      	subs	r7, #1
 80100e0:	e7ea      	b.n	80100b8 <__mdiff+0xe0>
 80100e2:	bf00      	nop
 80100e4:	080143ef 	.word	0x080143ef
 80100e8:	08014400 	.word	0x08014400

080100ec <__ulp>:
 80100ec:	b082      	sub	sp, #8
 80100ee:	ed8d 0b00 	vstr	d0, [sp]
 80100f2:	9a01      	ldr	r2, [sp, #4]
 80100f4:	4b0f      	ldr	r3, [pc, #60]	; (8010134 <__ulp+0x48>)
 80100f6:	4013      	ands	r3, r2
 80100f8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	dc08      	bgt.n	8010112 <__ulp+0x26>
 8010100:	425b      	negs	r3, r3
 8010102:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8010106:	ea4f 5223 	mov.w	r2, r3, asr #20
 801010a:	da04      	bge.n	8010116 <__ulp+0x2a>
 801010c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010110:	4113      	asrs	r3, r2
 8010112:	2200      	movs	r2, #0
 8010114:	e008      	b.n	8010128 <__ulp+0x3c>
 8010116:	f1a2 0314 	sub.w	r3, r2, #20
 801011a:	2b1e      	cmp	r3, #30
 801011c:	bfda      	itte	le
 801011e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010122:	40da      	lsrle	r2, r3
 8010124:	2201      	movgt	r2, #1
 8010126:	2300      	movs	r3, #0
 8010128:	4619      	mov	r1, r3
 801012a:	4610      	mov	r0, r2
 801012c:	ec41 0b10 	vmov	d0, r0, r1
 8010130:	b002      	add	sp, #8
 8010132:	4770      	bx	lr
 8010134:	7ff00000 	.word	0x7ff00000

08010138 <__b2d>:
 8010138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801013c:	6906      	ldr	r6, [r0, #16]
 801013e:	f100 0814 	add.w	r8, r0, #20
 8010142:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010146:	1f37      	subs	r7, r6, #4
 8010148:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801014c:	4610      	mov	r0, r2
 801014e:	f7ff fd53 	bl	800fbf8 <__hi0bits>
 8010152:	f1c0 0320 	rsb	r3, r0, #32
 8010156:	280a      	cmp	r0, #10
 8010158:	600b      	str	r3, [r1, #0]
 801015a:	491b      	ldr	r1, [pc, #108]	; (80101c8 <__b2d+0x90>)
 801015c:	dc15      	bgt.n	801018a <__b2d+0x52>
 801015e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010162:	fa22 f30c 	lsr.w	r3, r2, ip
 8010166:	45b8      	cmp	r8, r7
 8010168:	ea43 0501 	orr.w	r5, r3, r1
 801016c:	bf34      	ite	cc
 801016e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010172:	2300      	movcs	r3, #0
 8010174:	3015      	adds	r0, #21
 8010176:	fa02 f000 	lsl.w	r0, r2, r0
 801017a:	fa23 f30c 	lsr.w	r3, r3, ip
 801017e:	4303      	orrs	r3, r0
 8010180:	461c      	mov	r4, r3
 8010182:	ec45 4b10 	vmov	d0, r4, r5
 8010186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801018a:	45b8      	cmp	r8, r7
 801018c:	bf3a      	itte	cc
 801018e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010192:	f1a6 0708 	subcc.w	r7, r6, #8
 8010196:	2300      	movcs	r3, #0
 8010198:	380b      	subs	r0, #11
 801019a:	d012      	beq.n	80101c2 <__b2d+0x8a>
 801019c:	f1c0 0120 	rsb	r1, r0, #32
 80101a0:	fa23 f401 	lsr.w	r4, r3, r1
 80101a4:	4082      	lsls	r2, r0
 80101a6:	4322      	orrs	r2, r4
 80101a8:	4547      	cmp	r7, r8
 80101aa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80101ae:	bf8c      	ite	hi
 80101b0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80101b4:	2200      	movls	r2, #0
 80101b6:	4083      	lsls	r3, r0
 80101b8:	40ca      	lsrs	r2, r1
 80101ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80101be:	4313      	orrs	r3, r2
 80101c0:	e7de      	b.n	8010180 <__b2d+0x48>
 80101c2:	ea42 0501 	orr.w	r5, r2, r1
 80101c6:	e7db      	b.n	8010180 <__b2d+0x48>
 80101c8:	3ff00000 	.word	0x3ff00000

080101cc <__d2b>:
 80101cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80101d0:	460f      	mov	r7, r1
 80101d2:	2101      	movs	r1, #1
 80101d4:	ec59 8b10 	vmov	r8, r9, d0
 80101d8:	4616      	mov	r6, r2
 80101da:	f7ff fc1b 	bl	800fa14 <_Balloc>
 80101de:	4604      	mov	r4, r0
 80101e0:	b930      	cbnz	r0, 80101f0 <__d2b+0x24>
 80101e2:	4602      	mov	r2, r0
 80101e4:	4b24      	ldr	r3, [pc, #144]	; (8010278 <__d2b+0xac>)
 80101e6:	4825      	ldr	r0, [pc, #148]	; (801027c <__d2b+0xb0>)
 80101e8:	f240 310f 	movw	r1, #783	; 0x30f
 80101ec:	f001 fd34 	bl	8011c58 <__assert_func>
 80101f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80101f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80101f8:	bb2d      	cbnz	r5, 8010246 <__d2b+0x7a>
 80101fa:	9301      	str	r3, [sp, #4]
 80101fc:	f1b8 0300 	subs.w	r3, r8, #0
 8010200:	d026      	beq.n	8010250 <__d2b+0x84>
 8010202:	4668      	mov	r0, sp
 8010204:	9300      	str	r3, [sp, #0]
 8010206:	f7ff fd17 	bl	800fc38 <__lo0bits>
 801020a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801020e:	b1e8      	cbz	r0, 801024c <__d2b+0x80>
 8010210:	f1c0 0320 	rsb	r3, r0, #32
 8010214:	fa02 f303 	lsl.w	r3, r2, r3
 8010218:	430b      	orrs	r3, r1
 801021a:	40c2      	lsrs	r2, r0
 801021c:	6163      	str	r3, [r4, #20]
 801021e:	9201      	str	r2, [sp, #4]
 8010220:	9b01      	ldr	r3, [sp, #4]
 8010222:	61a3      	str	r3, [r4, #24]
 8010224:	2b00      	cmp	r3, #0
 8010226:	bf14      	ite	ne
 8010228:	2202      	movne	r2, #2
 801022a:	2201      	moveq	r2, #1
 801022c:	6122      	str	r2, [r4, #16]
 801022e:	b1bd      	cbz	r5, 8010260 <__d2b+0x94>
 8010230:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010234:	4405      	add	r5, r0
 8010236:	603d      	str	r5, [r7, #0]
 8010238:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801023c:	6030      	str	r0, [r6, #0]
 801023e:	4620      	mov	r0, r4
 8010240:	b003      	add	sp, #12
 8010242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801024a:	e7d6      	b.n	80101fa <__d2b+0x2e>
 801024c:	6161      	str	r1, [r4, #20]
 801024e:	e7e7      	b.n	8010220 <__d2b+0x54>
 8010250:	a801      	add	r0, sp, #4
 8010252:	f7ff fcf1 	bl	800fc38 <__lo0bits>
 8010256:	9b01      	ldr	r3, [sp, #4]
 8010258:	6163      	str	r3, [r4, #20]
 801025a:	3020      	adds	r0, #32
 801025c:	2201      	movs	r2, #1
 801025e:	e7e5      	b.n	801022c <__d2b+0x60>
 8010260:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010264:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010268:	6038      	str	r0, [r7, #0]
 801026a:	6918      	ldr	r0, [r3, #16]
 801026c:	f7ff fcc4 	bl	800fbf8 <__hi0bits>
 8010270:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010274:	e7e2      	b.n	801023c <__d2b+0x70>
 8010276:	bf00      	nop
 8010278:	080143ef 	.word	0x080143ef
 801027c:	08014400 	.word	0x08014400

08010280 <__ratio>:
 8010280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010284:	4688      	mov	r8, r1
 8010286:	4669      	mov	r1, sp
 8010288:	4681      	mov	r9, r0
 801028a:	f7ff ff55 	bl	8010138 <__b2d>
 801028e:	a901      	add	r1, sp, #4
 8010290:	4640      	mov	r0, r8
 8010292:	ec55 4b10 	vmov	r4, r5, d0
 8010296:	f7ff ff4f 	bl	8010138 <__b2d>
 801029a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801029e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80102a2:	eba3 0c02 	sub.w	ip, r3, r2
 80102a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80102aa:	1a9b      	subs	r3, r3, r2
 80102ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80102b0:	ec51 0b10 	vmov	r0, r1, d0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	bfd6      	itet	le
 80102b8:	460a      	movle	r2, r1
 80102ba:	462a      	movgt	r2, r5
 80102bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80102c0:	468b      	mov	fp, r1
 80102c2:	462f      	mov	r7, r5
 80102c4:	bfd4      	ite	le
 80102c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80102ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80102ce:	4620      	mov	r0, r4
 80102d0:	ee10 2a10 	vmov	r2, s0
 80102d4:	465b      	mov	r3, fp
 80102d6:	4639      	mov	r1, r7
 80102d8:	f7f0 fab8 	bl	800084c <__aeabi_ddiv>
 80102dc:	ec41 0b10 	vmov	d0, r0, r1
 80102e0:	b003      	add	sp, #12
 80102e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080102e6 <__copybits>:
 80102e6:	3901      	subs	r1, #1
 80102e8:	b570      	push	{r4, r5, r6, lr}
 80102ea:	1149      	asrs	r1, r1, #5
 80102ec:	6914      	ldr	r4, [r2, #16]
 80102ee:	3101      	adds	r1, #1
 80102f0:	f102 0314 	add.w	r3, r2, #20
 80102f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80102f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80102fc:	1f05      	subs	r5, r0, #4
 80102fe:	42a3      	cmp	r3, r4
 8010300:	d30c      	bcc.n	801031c <__copybits+0x36>
 8010302:	1aa3      	subs	r3, r4, r2
 8010304:	3b11      	subs	r3, #17
 8010306:	f023 0303 	bic.w	r3, r3, #3
 801030a:	3211      	adds	r2, #17
 801030c:	42a2      	cmp	r2, r4
 801030e:	bf88      	it	hi
 8010310:	2300      	movhi	r3, #0
 8010312:	4418      	add	r0, r3
 8010314:	2300      	movs	r3, #0
 8010316:	4288      	cmp	r0, r1
 8010318:	d305      	bcc.n	8010326 <__copybits+0x40>
 801031a:	bd70      	pop	{r4, r5, r6, pc}
 801031c:	f853 6b04 	ldr.w	r6, [r3], #4
 8010320:	f845 6f04 	str.w	r6, [r5, #4]!
 8010324:	e7eb      	b.n	80102fe <__copybits+0x18>
 8010326:	f840 3b04 	str.w	r3, [r0], #4
 801032a:	e7f4      	b.n	8010316 <__copybits+0x30>

0801032c <__any_on>:
 801032c:	f100 0214 	add.w	r2, r0, #20
 8010330:	6900      	ldr	r0, [r0, #16]
 8010332:	114b      	asrs	r3, r1, #5
 8010334:	4298      	cmp	r0, r3
 8010336:	b510      	push	{r4, lr}
 8010338:	db11      	blt.n	801035e <__any_on+0x32>
 801033a:	dd0a      	ble.n	8010352 <__any_on+0x26>
 801033c:	f011 011f 	ands.w	r1, r1, #31
 8010340:	d007      	beq.n	8010352 <__any_on+0x26>
 8010342:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010346:	fa24 f001 	lsr.w	r0, r4, r1
 801034a:	fa00 f101 	lsl.w	r1, r0, r1
 801034e:	428c      	cmp	r4, r1
 8010350:	d10b      	bne.n	801036a <__any_on+0x3e>
 8010352:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010356:	4293      	cmp	r3, r2
 8010358:	d803      	bhi.n	8010362 <__any_on+0x36>
 801035a:	2000      	movs	r0, #0
 801035c:	bd10      	pop	{r4, pc}
 801035e:	4603      	mov	r3, r0
 8010360:	e7f7      	b.n	8010352 <__any_on+0x26>
 8010362:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010366:	2900      	cmp	r1, #0
 8010368:	d0f5      	beq.n	8010356 <__any_on+0x2a>
 801036a:	2001      	movs	r0, #1
 801036c:	e7f6      	b.n	801035c <__any_on+0x30>

0801036e <sulp>:
 801036e:	b570      	push	{r4, r5, r6, lr}
 8010370:	4604      	mov	r4, r0
 8010372:	460d      	mov	r5, r1
 8010374:	ec45 4b10 	vmov	d0, r4, r5
 8010378:	4616      	mov	r6, r2
 801037a:	f7ff feb7 	bl	80100ec <__ulp>
 801037e:	ec51 0b10 	vmov	r0, r1, d0
 8010382:	b17e      	cbz	r6, 80103a4 <sulp+0x36>
 8010384:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010388:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801038c:	2b00      	cmp	r3, #0
 801038e:	dd09      	ble.n	80103a4 <sulp+0x36>
 8010390:	051b      	lsls	r3, r3, #20
 8010392:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010396:	2400      	movs	r4, #0
 8010398:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801039c:	4622      	mov	r2, r4
 801039e:	462b      	mov	r3, r5
 80103a0:	f7f0 f92a 	bl	80005f8 <__aeabi_dmul>
 80103a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080103a8 <_strtod_l>:
 80103a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ac:	ed2d 8b02 	vpush	{d8}
 80103b0:	b09b      	sub	sp, #108	; 0x6c
 80103b2:	4604      	mov	r4, r0
 80103b4:	9213      	str	r2, [sp, #76]	; 0x4c
 80103b6:	2200      	movs	r2, #0
 80103b8:	9216      	str	r2, [sp, #88]	; 0x58
 80103ba:	460d      	mov	r5, r1
 80103bc:	f04f 0800 	mov.w	r8, #0
 80103c0:	f04f 0900 	mov.w	r9, #0
 80103c4:	460a      	mov	r2, r1
 80103c6:	9215      	str	r2, [sp, #84]	; 0x54
 80103c8:	7811      	ldrb	r1, [r2, #0]
 80103ca:	292b      	cmp	r1, #43	; 0x2b
 80103cc:	d04c      	beq.n	8010468 <_strtod_l+0xc0>
 80103ce:	d83a      	bhi.n	8010446 <_strtod_l+0x9e>
 80103d0:	290d      	cmp	r1, #13
 80103d2:	d834      	bhi.n	801043e <_strtod_l+0x96>
 80103d4:	2908      	cmp	r1, #8
 80103d6:	d834      	bhi.n	8010442 <_strtod_l+0x9a>
 80103d8:	2900      	cmp	r1, #0
 80103da:	d03d      	beq.n	8010458 <_strtod_l+0xb0>
 80103dc:	2200      	movs	r2, #0
 80103de:	920a      	str	r2, [sp, #40]	; 0x28
 80103e0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80103e2:	7832      	ldrb	r2, [r6, #0]
 80103e4:	2a30      	cmp	r2, #48	; 0x30
 80103e6:	f040 80b4 	bne.w	8010552 <_strtod_l+0x1aa>
 80103ea:	7872      	ldrb	r2, [r6, #1]
 80103ec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80103f0:	2a58      	cmp	r2, #88	; 0x58
 80103f2:	d170      	bne.n	80104d6 <_strtod_l+0x12e>
 80103f4:	9302      	str	r3, [sp, #8]
 80103f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103f8:	9301      	str	r3, [sp, #4]
 80103fa:	ab16      	add	r3, sp, #88	; 0x58
 80103fc:	9300      	str	r3, [sp, #0]
 80103fe:	4a8e      	ldr	r2, [pc, #568]	; (8010638 <_strtod_l+0x290>)
 8010400:	ab17      	add	r3, sp, #92	; 0x5c
 8010402:	a915      	add	r1, sp, #84	; 0x54
 8010404:	4620      	mov	r0, r4
 8010406:	f001 fcc3 	bl	8011d90 <__gethex>
 801040a:	f010 070f 	ands.w	r7, r0, #15
 801040e:	4605      	mov	r5, r0
 8010410:	d005      	beq.n	801041e <_strtod_l+0x76>
 8010412:	2f06      	cmp	r7, #6
 8010414:	d12a      	bne.n	801046c <_strtod_l+0xc4>
 8010416:	3601      	adds	r6, #1
 8010418:	2300      	movs	r3, #0
 801041a:	9615      	str	r6, [sp, #84]	; 0x54
 801041c:	930a      	str	r3, [sp, #40]	; 0x28
 801041e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010420:	2b00      	cmp	r3, #0
 8010422:	f040 857f 	bne.w	8010f24 <_strtod_l+0xb7c>
 8010426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010428:	b1db      	cbz	r3, 8010462 <_strtod_l+0xba>
 801042a:	4642      	mov	r2, r8
 801042c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010430:	ec43 2b10 	vmov	d0, r2, r3
 8010434:	b01b      	add	sp, #108	; 0x6c
 8010436:	ecbd 8b02 	vpop	{d8}
 801043a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801043e:	2920      	cmp	r1, #32
 8010440:	d1cc      	bne.n	80103dc <_strtod_l+0x34>
 8010442:	3201      	adds	r2, #1
 8010444:	e7bf      	b.n	80103c6 <_strtod_l+0x1e>
 8010446:	292d      	cmp	r1, #45	; 0x2d
 8010448:	d1c8      	bne.n	80103dc <_strtod_l+0x34>
 801044a:	2101      	movs	r1, #1
 801044c:	910a      	str	r1, [sp, #40]	; 0x28
 801044e:	1c51      	adds	r1, r2, #1
 8010450:	9115      	str	r1, [sp, #84]	; 0x54
 8010452:	7852      	ldrb	r2, [r2, #1]
 8010454:	2a00      	cmp	r2, #0
 8010456:	d1c3      	bne.n	80103e0 <_strtod_l+0x38>
 8010458:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801045a:	9515      	str	r5, [sp, #84]	; 0x54
 801045c:	2b00      	cmp	r3, #0
 801045e:	f040 855f 	bne.w	8010f20 <_strtod_l+0xb78>
 8010462:	4642      	mov	r2, r8
 8010464:	464b      	mov	r3, r9
 8010466:	e7e3      	b.n	8010430 <_strtod_l+0x88>
 8010468:	2100      	movs	r1, #0
 801046a:	e7ef      	b.n	801044c <_strtod_l+0xa4>
 801046c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801046e:	b13a      	cbz	r2, 8010480 <_strtod_l+0xd8>
 8010470:	2135      	movs	r1, #53	; 0x35
 8010472:	a818      	add	r0, sp, #96	; 0x60
 8010474:	f7ff ff37 	bl	80102e6 <__copybits>
 8010478:	9916      	ldr	r1, [sp, #88]	; 0x58
 801047a:	4620      	mov	r0, r4
 801047c:	f7ff fb0a 	bl	800fa94 <_Bfree>
 8010480:	3f01      	subs	r7, #1
 8010482:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010484:	2f04      	cmp	r7, #4
 8010486:	d806      	bhi.n	8010496 <_strtod_l+0xee>
 8010488:	e8df f007 	tbb	[pc, r7]
 801048c:	201d0314 	.word	0x201d0314
 8010490:	14          	.byte	0x14
 8010491:	00          	.byte	0x00
 8010492:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8010496:	05e9      	lsls	r1, r5, #23
 8010498:	bf48      	it	mi
 801049a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801049e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80104a2:	0d1b      	lsrs	r3, r3, #20
 80104a4:	051b      	lsls	r3, r3, #20
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d1b9      	bne.n	801041e <_strtod_l+0x76>
 80104aa:	f7fe faef 	bl	800ea8c <__errno>
 80104ae:	2322      	movs	r3, #34	; 0x22
 80104b0:	6003      	str	r3, [r0, #0]
 80104b2:	e7b4      	b.n	801041e <_strtod_l+0x76>
 80104b4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80104b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80104bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80104c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80104c4:	e7e7      	b.n	8010496 <_strtod_l+0xee>
 80104c6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010640 <_strtod_l+0x298>
 80104ca:	e7e4      	b.n	8010496 <_strtod_l+0xee>
 80104cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80104d0:	f04f 38ff 	mov.w	r8, #4294967295
 80104d4:	e7df      	b.n	8010496 <_strtod_l+0xee>
 80104d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104d8:	1c5a      	adds	r2, r3, #1
 80104da:	9215      	str	r2, [sp, #84]	; 0x54
 80104dc:	785b      	ldrb	r3, [r3, #1]
 80104de:	2b30      	cmp	r3, #48	; 0x30
 80104e0:	d0f9      	beq.n	80104d6 <_strtod_l+0x12e>
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d09b      	beq.n	801041e <_strtod_l+0x76>
 80104e6:	2301      	movs	r3, #1
 80104e8:	f04f 0a00 	mov.w	sl, #0
 80104ec:	9304      	str	r3, [sp, #16]
 80104ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80104f2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80104f6:	46d3      	mov	fp, sl
 80104f8:	220a      	movs	r2, #10
 80104fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80104fc:	7806      	ldrb	r6, [r0, #0]
 80104fe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010502:	b2d9      	uxtb	r1, r3
 8010504:	2909      	cmp	r1, #9
 8010506:	d926      	bls.n	8010556 <_strtod_l+0x1ae>
 8010508:	494c      	ldr	r1, [pc, #304]	; (801063c <_strtod_l+0x294>)
 801050a:	2201      	movs	r2, #1
 801050c:	f001 fb79 	bl	8011c02 <strncmp>
 8010510:	2800      	cmp	r0, #0
 8010512:	d030      	beq.n	8010576 <_strtod_l+0x1ce>
 8010514:	2000      	movs	r0, #0
 8010516:	4632      	mov	r2, r6
 8010518:	9005      	str	r0, [sp, #20]
 801051a:	465e      	mov	r6, fp
 801051c:	4603      	mov	r3, r0
 801051e:	2a65      	cmp	r2, #101	; 0x65
 8010520:	d001      	beq.n	8010526 <_strtod_l+0x17e>
 8010522:	2a45      	cmp	r2, #69	; 0x45
 8010524:	d113      	bne.n	801054e <_strtod_l+0x1a6>
 8010526:	b91e      	cbnz	r6, 8010530 <_strtod_l+0x188>
 8010528:	9a04      	ldr	r2, [sp, #16]
 801052a:	4302      	orrs	r2, r0
 801052c:	d094      	beq.n	8010458 <_strtod_l+0xb0>
 801052e:	2600      	movs	r6, #0
 8010530:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8010532:	1c6a      	adds	r2, r5, #1
 8010534:	9215      	str	r2, [sp, #84]	; 0x54
 8010536:	786a      	ldrb	r2, [r5, #1]
 8010538:	2a2b      	cmp	r2, #43	; 0x2b
 801053a:	d074      	beq.n	8010626 <_strtod_l+0x27e>
 801053c:	2a2d      	cmp	r2, #45	; 0x2d
 801053e:	d078      	beq.n	8010632 <_strtod_l+0x28a>
 8010540:	f04f 0c00 	mov.w	ip, #0
 8010544:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010548:	2909      	cmp	r1, #9
 801054a:	d97f      	bls.n	801064c <_strtod_l+0x2a4>
 801054c:	9515      	str	r5, [sp, #84]	; 0x54
 801054e:	2700      	movs	r7, #0
 8010550:	e09e      	b.n	8010690 <_strtod_l+0x2e8>
 8010552:	2300      	movs	r3, #0
 8010554:	e7c8      	b.n	80104e8 <_strtod_l+0x140>
 8010556:	f1bb 0f08 	cmp.w	fp, #8
 801055a:	bfd8      	it	le
 801055c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801055e:	f100 0001 	add.w	r0, r0, #1
 8010562:	bfda      	itte	le
 8010564:	fb02 3301 	mlale	r3, r2, r1, r3
 8010568:	9309      	strle	r3, [sp, #36]	; 0x24
 801056a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801056e:	f10b 0b01 	add.w	fp, fp, #1
 8010572:	9015      	str	r0, [sp, #84]	; 0x54
 8010574:	e7c1      	b.n	80104fa <_strtod_l+0x152>
 8010576:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010578:	1c5a      	adds	r2, r3, #1
 801057a:	9215      	str	r2, [sp, #84]	; 0x54
 801057c:	785a      	ldrb	r2, [r3, #1]
 801057e:	f1bb 0f00 	cmp.w	fp, #0
 8010582:	d037      	beq.n	80105f4 <_strtod_l+0x24c>
 8010584:	9005      	str	r0, [sp, #20]
 8010586:	465e      	mov	r6, fp
 8010588:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801058c:	2b09      	cmp	r3, #9
 801058e:	d912      	bls.n	80105b6 <_strtod_l+0x20e>
 8010590:	2301      	movs	r3, #1
 8010592:	e7c4      	b.n	801051e <_strtod_l+0x176>
 8010594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010596:	1c5a      	adds	r2, r3, #1
 8010598:	9215      	str	r2, [sp, #84]	; 0x54
 801059a:	785a      	ldrb	r2, [r3, #1]
 801059c:	3001      	adds	r0, #1
 801059e:	2a30      	cmp	r2, #48	; 0x30
 80105a0:	d0f8      	beq.n	8010594 <_strtod_l+0x1ec>
 80105a2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80105a6:	2b08      	cmp	r3, #8
 80105a8:	f200 84c1 	bhi.w	8010f2e <_strtod_l+0xb86>
 80105ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80105ae:	9005      	str	r0, [sp, #20]
 80105b0:	2000      	movs	r0, #0
 80105b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80105b4:	4606      	mov	r6, r0
 80105b6:	3a30      	subs	r2, #48	; 0x30
 80105b8:	f100 0301 	add.w	r3, r0, #1
 80105bc:	d014      	beq.n	80105e8 <_strtod_l+0x240>
 80105be:	9905      	ldr	r1, [sp, #20]
 80105c0:	4419      	add	r1, r3
 80105c2:	9105      	str	r1, [sp, #20]
 80105c4:	4633      	mov	r3, r6
 80105c6:	eb00 0c06 	add.w	ip, r0, r6
 80105ca:	210a      	movs	r1, #10
 80105cc:	4563      	cmp	r3, ip
 80105ce:	d113      	bne.n	80105f8 <_strtod_l+0x250>
 80105d0:	1833      	adds	r3, r6, r0
 80105d2:	2b08      	cmp	r3, #8
 80105d4:	f106 0601 	add.w	r6, r6, #1
 80105d8:	4406      	add	r6, r0
 80105da:	dc1a      	bgt.n	8010612 <_strtod_l+0x26a>
 80105dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105de:	230a      	movs	r3, #10
 80105e0:	fb03 2301 	mla	r3, r3, r1, r2
 80105e4:	9309      	str	r3, [sp, #36]	; 0x24
 80105e6:	2300      	movs	r3, #0
 80105e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80105ea:	1c51      	adds	r1, r2, #1
 80105ec:	9115      	str	r1, [sp, #84]	; 0x54
 80105ee:	7852      	ldrb	r2, [r2, #1]
 80105f0:	4618      	mov	r0, r3
 80105f2:	e7c9      	b.n	8010588 <_strtod_l+0x1e0>
 80105f4:	4658      	mov	r0, fp
 80105f6:	e7d2      	b.n	801059e <_strtod_l+0x1f6>
 80105f8:	2b08      	cmp	r3, #8
 80105fa:	f103 0301 	add.w	r3, r3, #1
 80105fe:	dc03      	bgt.n	8010608 <_strtod_l+0x260>
 8010600:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010602:	434f      	muls	r7, r1
 8010604:	9709      	str	r7, [sp, #36]	; 0x24
 8010606:	e7e1      	b.n	80105cc <_strtod_l+0x224>
 8010608:	2b10      	cmp	r3, #16
 801060a:	bfd8      	it	le
 801060c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8010610:	e7dc      	b.n	80105cc <_strtod_l+0x224>
 8010612:	2e10      	cmp	r6, #16
 8010614:	bfdc      	itt	le
 8010616:	230a      	movle	r3, #10
 8010618:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801061c:	e7e3      	b.n	80105e6 <_strtod_l+0x23e>
 801061e:	2300      	movs	r3, #0
 8010620:	9305      	str	r3, [sp, #20]
 8010622:	2301      	movs	r3, #1
 8010624:	e780      	b.n	8010528 <_strtod_l+0x180>
 8010626:	f04f 0c00 	mov.w	ip, #0
 801062a:	1caa      	adds	r2, r5, #2
 801062c:	9215      	str	r2, [sp, #84]	; 0x54
 801062e:	78aa      	ldrb	r2, [r5, #2]
 8010630:	e788      	b.n	8010544 <_strtod_l+0x19c>
 8010632:	f04f 0c01 	mov.w	ip, #1
 8010636:	e7f8      	b.n	801062a <_strtod_l+0x282>
 8010638:	08014560 	.word	0x08014560
 801063c:	0801455c 	.word	0x0801455c
 8010640:	7ff00000 	.word	0x7ff00000
 8010644:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010646:	1c51      	adds	r1, r2, #1
 8010648:	9115      	str	r1, [sp, #84]	; 0x54
 801064a:	7852      	ldrb	r2, [r2, #1]
 801064c:	2a30      	cmp	r2, #48	; 0x30
 801064e:	d0f9      	beq.n	8010644 <_strtod_l+0x29c>
 8010650:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010654:	2908      	cmp	r1, #8
 8010656:	f63f af7a 	bhi.w	801054e <_strtod_l+0x1a6>
 801065a:	3a30      	subs	r2, #48	; 0x30
 801065c:	9208      	str	r2, [sp, #32]
 801065e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010660:	920c      	str	r2, [sp, #48]	; 0x30
 8010662:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010664:	1c57      	adds	r7, r2, #1
 8010666:	9715      	str	r7, [sp, #84]	; 0x54
 8010668:	7852      	ldrb	r2, [r2, #1]
 801066a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801066e:	f1be 0f09 	cmp.w	lr, #9
 8010672:	d938      	bls.n	80106e6 <_strtod_l+0x33e>
 8010674:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010676:	1a7f      	subs	r7, r7, r1
 8010678:	2f08      	cmp	r7, #8
 801067a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801067e:	dc03      	bgt.n	8010688 <_strtod_l+0x2e0>
 8010680:	9908      	ldr	r1, [sp, #32]
 8010682:	428f      	cmp	r7, r1
 8010684:	bfa8      	it	ge
 8010686:	460f      	movge	r7, r1
 8010688:	f1bc 0f00 	cmp.w	ip, #0
 801068c:	d000      	beq.n	8010690 <_strtod_l+0x2e8>
 801068e:	427f      	negs	r7, r7
 8010690:	2e00      	cmp	r6, #0
 8010692:	d14f      	bne.n	8010734 <_strtod_l+0x38c>
 8010694:	9904      	ldr	r1, [sp, #16]
 8010696:	4301      	orrs	r1, r0
 8010698:	f47f aec1 	bne.w	801041e <_strtod_l+0x76>
 801069c:	2b00      	cmp	r3, #0
 801069e:	f47f aedb 	bne.w	8010458 <_strtod_l+0xb0>
 80106a2:	2a69      	cmp	r2, #105	; 0x69
 80106a4:	d029      	beq.n	80106fa <_strtod_l+0x352>
 80106a6:	dc26      	bgt.n	80106f6 <_strtod_l+0x34e>
 80106a8:	2a49      	cmp	r2, #73	; 0x49
 80106aa:	d026      	beq.n	80106fa <_strtod_l+0x352>
 80106ac:	2a4e      	cmp	r2, #78	; 0x4e
 80106ae:	f47f aed3 	bne.w	8010458 <_strtod_l+0xb0>
 80106b2:	499b      	ldr	r1, [pc, #620]	; (8010920 <_strtod_l+0x578>)
 80106b4:	a815      	add	r0, sp, #84	; 0x54
 80106b6:	f001 fdab 	bl	8012210 <__match>
 80106ba:	2800      	cmp	r0, #0
 80106bc:	f43f aecc 	beq.w	8010458 <_strtod_l+0xb0>
 80106c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	2b28      	cmp	r3, #40	; 0x28
 80106c6:	d12f      	bne.n	8010728 <_strtod_l+0x380>
 80106c8:	4996      	ldr	r1, [pc, #600]	; (8010924 <_strtod_l+0x57c>)
 80106ca:	aa18      	add	r2, sp, #96	; 0x60
 80106cc:	a815      	add	r0, sp, #84	; 0x54
 80106ce:	f001 fdb3 	bl	8012238 <__hexnan>
 80106d2:	2805      	cmp	r0, #5
 80106d4:	d128      	bne.n	8010728 <_strtod_l+0x380>
 80106d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80106d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80106dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80106e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80106e4:	e69b      	b.n	801041e <_strtod_l+0x76>
 80106e6:	9f08      	ldr	r7, [sp, #32]
 80106e8:	210a      	movs	r1, #10
 80106ea:	fb01 2107 	mla	r1, r1, r7, r2
 80106ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80106f2:	9208      	str	r2, [sp, #32]
 80106f4:	e7b5      	b.n	8010662 <_strtod_l+0x2ba>
 80106f6:	2a6e      	cmp	r2, #110	; 0x6e
 80106f8:	e7d9      	b.n	80106ae <_strtod_l+0x306>
 80106fa:	498b      	ldr	r1, [pc, #556]	; (8010928 <_strtod_l+0x580>)
 80106fc:	a815      	add	r0, sp, #84	; 0x54
 80106fe:	f001 fd87 	bl	8012210 <__match>
 8010702:	2800      	cmp	r0, #0
 8010704:	f43f aea8 	beq.w	8010458 <_strtod_l+0xb0>
 8010708:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801070a:	4988      	ldr	r1, [pc, #544]	; (801092c <_strtod_l+0x584>)
 801070c:	3b01      	subs	r3, #1
 801070e:	a815      	add	r0, sp, #84	; 0x54
 8010710:	9315      	str	r3, [sp, #84]	; 0x54
 8010712:	f001 fd7d 	bl	8012210 <__match>
 8010716:	b910      	cbnz	r0, 801071e <_strtod_l+0x376>
 8010718:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801071a:	3301      	adds	r3, #1
 801071c:	9315      	str	r3, [sp, #84]	; 0x54
 801071e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801093c <_strtod_l+0x594>
 8010722:	f04f 0800 	mov.w	r8, #0
 8010726:	e67a      	b.n	801041e <_strtod_l+0x76>
 8010728:	4881      	ldr	r0, [pc, #516]	; (8010930 <_strtod_l+0x588>)
 801072a:	f001 fa8d 	bl	8011c48 <nan>
 801072e:	ec59 8b10 	vmov	r8, r9, d0
 8010732:	e674      	b.n	801041e <_strtod_l+0x76>
 8010734:	9b05      	ldr	r3, [sp, #20]
 8010736:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010738:	1afb      	subs	r3, r7, r3
 801073a:	f1bb 0f00 	cmp.w	fp, #0
 801073e:	bf08      	it	eq
 8010740:	46b3      	moveq	fp, r6
 8010742:	2e10      	cmp	r6, #16
 8010744:	9308      	str	r3, [sp, #32]
 8010746:	4635      	mov	r5, r6
 8010748:	bfa8      	it	ge
 801074a:	2510      	movge	r5, #16
 801074c:	f7ef feda 	bl	8000504 <__aeabi_ui2d>
 8010750:	2e09      	cmp	r6, #9
 8010752:	4680      	mov	r8, r0
 8010754:	4689      	mov	r9, r1
 8010756:	dd13      	ble.n	8010780 <_strtod_l+0x3d8>
 8010758:	4b76      	ldr	r3, [pc, #472]	; (8010934 <_strtod_l+0x58c>)
 801075a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801075e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010762:	f7ef ff49 	bl	80005f8 <__aeabi_dmul>
 8010766:	4680      	mov	r8, r0
 8010768:	4650      	mov	r0, sl
 801076a:	4689      	mov	r9, r1
 801076c:	f7ef feca 	bl	8000504 <__aeabi_ui2d>
 8010770:	4602      	mov	r2, r0
 8010772:	460b      	mov	r3, r1
 8010774:	4640      	mov	r0, r8
 8010776:	4649      	mov	r1, r9
 8010778:	f7ef fd88 	bl	800028c <__adddf3>
 801077c:	4680      	mov	r8, r0
 801077e:	4689      	mov	r9, r1
 8010780:	2e0f      	cmp	r6, #15
 8010782:	dc38      	bgt.n	80107f6 <_strtod_l+0x44e>
 8010784:	9b08      	ldr	r3, [sp, #32]
 8010786:	2b00      	cmp	r3, #0
 8010788:	f43f ae49 	beq.w	801041e <_strtod_l+0x76>
 801078c:	dd24      	ble.n	80107d8 <_strtod_l+0x430>
 801078e:	2b16      	cmp	r3, #22
 8010790:	dc0b      	bgt.n	80107aa <_strtod_l+0x402>
 8010792:	4968      	ldr	r1, [pc, #416]	; (8010934 <_strtod_l+0x58c>)
 8010794:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010798:	e9d1 0100 	ldrd	r0, r1, [r1]
 801079c:	4642      	mov	r2, r8
 801079e:	464b      	mov	r3, r9
 80107a0:	f7ef ff2a 	bl	80005f8 <__aeabi_dmul>
 80107a4:	4680      	mov	r8, r0
 80107a6:	4689      	mov	r9, r1
 80107a8:	e639      	b.n	801041e <_strtod_l+0x76>
 80107aa:	9a08      	ldr	r2, [sp, #32]
 80107ac:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80107b0:	4293      	cmp	r3, r2
 80107b2:	db20      	blt.n	80107f6 <_strtod_l+0x44e>
 80107b4:	4c5f      	ldr	r4, [pc, #380]	; (8010934 <_strtod_l+0x58c>)
 80107b6:	f1c6 060f 	rsb	r6, r6, #15
 80107ba:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80107be:	4642      	mov	r2, r8
 80107c0:	464b      	mov	r3, r9
 80107c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107c6:	f7ef ff17 	bl	80005f8 <__aeabi_dmul>
 80107ca:	9b08      	ldr	r3, [sp, #32]
 80107cc:	1b9e      	subs	r6, r3, r6
 80107ce:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80107d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80107d6:	e7e3      	b.n	80107a0 <_strtod_l+0x3f8>
 80107d8:	9b08      	ldr	r3, [sp, #32]
 80107da:	3316      	adds	r3, #22
 80107dc:	db0b      	blt.n	80107f6 <_strtod_l+0x44e>
 80107de:	9b05      	ldr	r3, [sp, #20]
 80107e0:	1bdf      	subs	r7, r3, r7
 80107e2:	4b54      	ldr	r3, [pc, #336]	; (8010934 <_strtod_l+0x58c>)
 80107e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80107e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80107ec:	4640      	mov	r0, r8
 80107ee:	4649      	mov	r1, r9
 80107f0:	f7f0 f82c 	bl	800084c <__aeabi_ddiv>
 80107f4:	e7d6      	b.n	80107a4 <_strtod_l+0x3fc>
 80107f6:	9b08      	ldr	r3, [sp, #32]
 80107f8:	1b75      	subs	r5, r6, r5
 80107fa:	441d      	add	r5, r3
 80107fc:	2d00      	cmp	r5, #0
 80107fe:	dd70      	ble.n	80108e2 <_strtod_l+0x53a>
 8010800:	f015 030f 	ands.w	r3, r5, #15
 8010804:	d00a      	beq.n	801081c <_strtod_l+0x474>
 8010806:	494b      	ldr	r1, [pc, #300]	; (8010934 <_strtod_l+0x58c>)
 8010808:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801080c:	4642      	mov	r2, r8
 801080e:	464b      	mov	r3, r9
 8010810:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010814:	f7ef fef0 	bl	80005f8 <__aeabi_dmul>
 8010818:	4680      	mov	r8, r0
 801081a:	4689      	mov	r9, r1
 801081c:	f035 050f 	bics.w	r5, r5, #15
 8010820:	d04d      	beq.n	80108be <_strtod_l+0x516>
 8010822:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8010826:	dd22      	ble.n	801086e <_strtod_l+0x4c6>
 8010828:	2500      	movs	r5, #0
 801082a:	46ab      	mov	fp, r5
 801082c:	9509      	str	r5, [sp, #36]	; 0x24
 801082e:	9505      	str	r5, [sp, #20]
 8010830:	2322      	movs	r3, #34	; 0x22
 8010832:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801093c <_strtod_l+0x594>
 8010836:	6023      	str	r3, [r4, #0]
 8010838:	f04f 0800 	mov.w	r8, #0
 801083c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801083e:	2b00      	cmp	r3, #0
 8010840:	f43f aded 	beq.w	801041e <_strtod_l+0x76>
 8010844:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010846:	4620      	mov	r0, r4
 8010848:	f7ff f924 	bl	800fa94 <_Bfree>
 801084c:	9905      	ldr	r1, [sp, #20]
 801084e:	4620      	mov	r0, r4
 8010850:	f7ff f920 	bl	800fa94 <_Bfree>
 8010854:	4659      	mov	r1, fp
 8010856:	4620      	mov	r0, r4
 8010858:	f7ff f91c 	bl	800fa94 <_Bfree>
 801085c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801085e:	4620      	mov	r0, r4
 8010860:	f7ff f918 	bl	800fa94 <_Bfree>
 8010864:	4629      	mov	r1, r5
 8010866:	4620      	mov	r0, r4
 8010868:	f7ff f914 	bl	800fa94 <_Bfree>
 801086c:	e5d7      	b.n	801041e <_strtod_l+0x76>
 801086e:	4b32      	ldr	r3, [pc, #200]	; (8010938 <_strtod_l+0x590>)
 8010870:	9304      	str	r3, [sp, #16]
 8010872:	2300      	movs	r3, #0
 8010874:	112d      	asrs	r5, r5, #4
 8010876:	4640      	mov	r0, r8
 8010878:	4649      	mov	r1, r9
 801087a:	469a      	mov	sl, r3
 801087c:	2d01      	cmp	r5, #1
 801087e:	dc21      	bgt.n	80108c4 <_strtod_l+0x51c>
 8010880:	b10b      	cbz	r3, 8010886 <_strtod_l+0x4de>
 8010882:	4680      	mov	r8, r0
 8010884:	4689      	mov	r9, r1
 8010886:	492c      	ldr	r1, [pc, #176]	; (8010938 <_strtod_l+0x590>)
 8010888:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801088c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010890:	4642      	mov	r2, r8
 8010892:	464b      	mov	r3, r9
 8010894:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010898:	f7ef feae 	bl	80005f8 <__aeabi_dmul>
 801089c:	4b27      	ldr	r3, [pc, #156]	; (801093c <_strtod_l+0x594>)
 801089e:	460a      	mov	r2, r1
 80108a0:	400b      	ands	r3, r1
 80108a2:	4927      	ldr	r1, [pc, #156]	; (8010940 <_strtod_l+0x598>)
 80108a4:	428b      	cmp	r3, r1
 80108a6:	4680      	mov	r8, r0
 80108a8:	d8be      	bhi.n	8010828 <_strtod_l+0x480>
 80108aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80108ae:	428b      	cmp	r3, r1
 80108b0:	bf86      	itte	hi
 80108b2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8010944 <_strtod_l+0x59c>
 80108b6:	f04f 38ff 	movhi.w	r8, #4294967295
 80108ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80108be:	2300      	movs	r3, #0
 80108c0:	9304      	str	r3, [sp, #16]
 80108c2:	e07b      	b.n	80109bc <_strtod_l+0x614>
 80108c4:	07ea      	lsls	r2, r5, #31
 80108c6:	d505      	bpl.n	80108d4 <_strtod_l+0x52c>
 80108c8:	9b04      	ldr	r3, [sp, #16]
 80108ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ce:	f7ef fe93 	bl	80005f8 <__aeabi_dmul>
 80108d2:	2301      	movs	r3, #1
 80108d4:	9a04      	ldr	r2, [sp, #16]
 80108d6:	3208      	adds	r2, #8
 80108d8:	f10a 0a01 	add.w	sl, sl, #1
 80108dc:	106d      	asrs	r5, r5, #1
 80108de:	9204      	str	r2, [sp, #16]
 80108e0:	e7cc      	b.n	801087c <_strtod_l+0x4d4>
 80108e2:	d0ec      	beq.n	80108be <_strtod_l+0x516>
 80108e4:	426d      	negs	r5, r5
 80108e6:	f015 020f 	ands.w	r2, r5, #15
 80108ea:	d00a      	beq.n	8010902 <_strtod_l+0x55a>
 80108ec:	4b11      	ldr	r3, [pc, #68]	; (8010934 <_strtod_l+0x58c>)
 80108ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108f2:	4640      	mov	r0, r8
 80108f4:	4649      	mov	r1, r9
 80108f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fa:	f7ef ffa7 	bl	800084c <__aeabi_ddiv>
 80108fe:	4680      	mov	r8, r0
 8010900:	4689      	mov	r9, r1
 8010902:	112d      	asrs	r5, r5, #4
 8010904:	d0db      	beq.n	80108be <_strtod_l+0x516>
 8010906:	2d1f      	cmp	r5, #31
 8010908:	dd1e      	ble.n	8010948 <_strtod_l+0x5a0>
 801090a:	2500      	movs	r5, #0
 801090c:	46ab      	mov	fp, r5
 801090e:	9509      	str	r5, [sp, #36]	; 0x24
 8010910:	9505      	str	r5, [sp, #20]
 8010912:	2322      	movs	r3, #34	; 0x22
 8010914:	f04f 0800 	mov.w	r8, #0
 8010918:	f04f 0900 	mov.w	r9, #0
 801091c:	6023      	str	r3, [r4, #0]
 801091e:	e78d      	b.n	801083c <_strtod_l+0x494>
 8010920:	08014349 	.word	0x08014349
 8010924:	08014574 	.word	0x08014574
 8010928:	08014341 	.word	0x08014341
 801092c:	08014376 	.word	0x08014376
 8010930:	08014720 	.word	0x08014720
 8010934:	08014488 	.word	0x08014488
 8010938:	08014460 	.word	0x08014460
 801093c:	7ff00000 	.word	0x7ff00000
 8010940:	7ca00000 	.word	0x7ca00000
 8010944:	7fefffff 	.word	0x7fefffff
 8010948:	f015 0310 	ands.w	r3, r5, #16
 801094c:	bf18      	it	ne
 801094e:	236a      	movne	r3, #106	; 0x6a
 8010950:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8010cf4 <_strtod_l+0x94c>
 8010954:	9304      	str	r3, [sp, #16]
 8010956:	4640      	mov	r0, r8
 8010958:	4649      	mov	r1, r9
 801095a:	2300      	movs	r3, #0
 801095c:	07ea      	lsls	r2, r5, #31
 801095e:	d504      	bpl.n	801096a <_strtod_l+0x5c2>
 8010960:	e9da 2300 	ldrd	r2, r3, [sl]
 8010964:	f7ef fe48 	bl	80005f8 <__aeabi_dmul>
 8010968:	2301      	movs	r3, #1
 801096a:	106d      	asrs	r5, r5, #1
 801096c:	f10a 0a08 	add.w	sl, sl, #8
 8010970:	d1f4      	bne.n	801095c <_strtod_l+0x5b4>
 8010972:	b10b      	cbz	r3, 8010978 <_strtod_l+0x5d0>
 8010974:	4680      	mov	r8, r0
 8010976:	4689      	mov	r9, r1
 8010978:	9b04      	ldr	r3, [sp, #16]
 801097a:	b1bb      	cbz	r3, 80109ac <_strtod_l+0x604>
 801097c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010980:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010984:	2b00      	cmp	r3, #0
 8010986:	4649      	mov	r1, r9
 8010988:	dd10      	ble.n	80109ac <_strtod_l+0x604>
 801098a:	2b1f      	cmp	r3, #31
 801098c:	f340 811e 	ble.w	8010bcc <_strtod_l+0x824>
 8010990:	2b34      	cmp	r3, #52	; 0x34
 8010992:	bfde      	ittt	le
 8010994:	f04f 33ff 	movle.w	r3, #4294967295
 8010998:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801099c:	4093      	lslle	r3, r2
 801099e:	f04f 0800 	mov.w	r8, #0
 80109a2:	bfcc      	ite	gt
 80109a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80109a8:	ea03 0901 	andle.w	r9, r3, r1
 80109ac:	2200      	movs	r2, #0
 80109ae:	2300      	movs	r3, #0
 80109b0:	4640      	mov	r0, r8
 80109b2:	4649      	mov	r1, r9
 80109b4:	f7f0 f888 	bl	8000ac8 <__aeabi_dcmpeq>
 80109b8:	2800      	cmp	r0, #0
 80109ba:	d1a6      	bne.n	801090a <_strtod_l+0x562>
 80109bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109be:	9300      	str	r3, [sp, #0]
 80109c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80109c2:	4633      	mov	r3, r6
 80109c4:	465a      	mov	r2, fp
 80109c6:	4620      	mov	r0, r4
 80109c8:	f7ff f8cc 	bl	800fb64 <__s2b>
 80109cc:	9009      	str	r0, [sp, #36]	; 0x24
 80109ce:	2800      	cmp	r0, #0
 80109d0:	f43f af2a 	beq.w	8010828 <_strtod_l+0x480>
 80109d4:	9a08      	ldr	r2, [sp, #32]
 80109d6:	9b05      	ldr	r3, [sp, #20]
 80109d8:	2a00      	cmp	r2, #0
 80109da:	eba3 0307 	sub.w	r3, r3, r7
 80109de:	bfa8      	it	ge
 80109e0:	2300      	movge	r3, #0
 80109e2:	930c      	str	r3, [sp, #48]	; 0x30
 80109e4:	2500      	movs	r5, #0
 80109e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80109ea:	9312      	str	r3, [sp, #72]	; 0x48
 80109ec:	46ab      	mov	fp, r5
 80109ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109f0:	4620      	mov	r0, r4
 80109f2:	6859      	ldr	r1, [r3, #4]
 80109f4:	f7ff f80e 	bl	800fa14 <_Balloc>
 80109f8:	9005      	str	r0, [sp, #20]
 80109fa:	2800      	cmp	r0, #0
 80109fc:	f43f af18 	beq.w	8010830 <_strtod_l+0x488>
 8010a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a02:	691a      	ldr	r2, [r3, #16]
 8010a04:	3202      	adds	r2, #2
 8010a06:	f103 010c 	add.w	r1, r3, #12
 8010a0a:	0092      	lsls	r2, r2, #2
 8010a0c:	300c      	adds	r0, #12
 8010a0e:	f7fe f872 	bl	800eaf6 <memcpy>
 8010a12:	ec49 8b10 	vmov	d0, r8, r9
 8010a16:	aa18      	add	r2, sp, #96	; 0x60
 8010a18:	a917      	add	r1, sp, #92	; 0x5c
 8010a1a:	4620      	mov	r0, r4
 8010a1c:	f7ff fbd6 	bl	80101cc <__d2b>
 8010a20:	ec49 8b18 	vmov	d8, r8, r9
 8010a24:	9016      	str	r0, [sp, #88]	; 0x58
 8010a26:	2800      	cmp	r0, #0
 8010a28:	f43f af02 	beq.w	8010830 <_strtod_l+0x488>
 8010a2c:	2101      	movs	r1, #1
 8010a2e:	4620      	mov	r0, r4
 8010a30:	f7ff f930 	bl	800fc94 <__i2b>
 8010a34:	4683      	mov	fp, r0
 8010a36:	2800      	cmp	r0, #0
 8010a38:	f43f aefa 	beq.w	8010830 <_strtod_l+0x488>
 8010a3c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010a3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010a40:	2e00      	cmp	r6, #0
 8010a42:	bfab      	itete	ge
 8010a44:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8010a46:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010a48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010a4a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8010a4e:	bfac      	ite	ge
 8010a50:	eb06 0a03 	addge.w	sl, r6, r3
 8010a54:	1b9f      	sublt	r7, r3, r6
 8010a56:	9b04      	ldr	r3, [sp, #16]
 8010a58:	1af6      	subs	r6, r6, r3
 8010a5a:	4416      	add	r6, r2
 8010a5c:	4ba0      	ldr	r3, [pc, #640]	; (8010ce0 <_strtod_l+0x938>)
 8010a5e:	3e01      	subs	r6, #1
 8010a60:	429e      	cmp	r6, r3
 8010a62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010a66:	f280 80c4 	bge.w	8010bf2 <_strtod_l+0x84a>
 8010a6a:	1b9b      	subs	r3, r3, r6
 8010a6c:	2b1f      	cmp	r3, #31
 8010a6e:	eba2 0203 	sub.w	r2, r2, r3
 8010a72:	f04f 0101 	mov.w	r1, #1
 8010a76:	f300 80b0 	bgt.w	8010bda <_strtod_l+0x832>
 8010a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8010a7e:	930e      	str	r3, [sp, #56]	; 0x38
 8010a80:	2300      	movs	r3, #0
 8010a82:	930d      	str	r3, [sp, #52]	; 0x34
 8010a84:	eb0a 0602 	add.w	r6, sl, r2
 8010a88:	9b04      	ldr	r3, [sp, #16]
 8010a8a:	45b2      	cmp	sl, r6
 8010a8c:	4417      	add	r7, r2
 8010a8e:	441f      	add	r7, r3
 8010a90:	4653      	mov	r3, sl
 8010a92:	bfa8      	it	ge
 8010a94:	4633      	movge	r3, r6
 8010a96:	42bb      	cmp	r3, r7
 8010a98:	bfa8      	it	ge
 8010a9a:	463b      	movge	r3, r7
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	bfc2      	ittt	gt
 8010aa0:	1af6      	subgt	r6, r6, r3
 8010aa2:	1aff      	subgt	r7, r7, r3
 8010aa4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	dd17      	ble.n	8010ade <_strtod_l+0x736>
 8010aae:	4659      	mov	r1, fp
 8010ab0:	461a      	mov	r2, r3
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f7ff f9ae 	bl	800fe14 <__pow5mult>
 8010ab8:	4683      	mov	fp, r0
 8010aba:	2800      	cmp	r0, #0
 8010abc:	f43f aeb8 	beq.w	8010830 <_strtod_l+0x488>
 8010ac0:	4601      	mov	r1, r0
 8010ac2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	f7ff f8fb 	bl	800fcc0 <__multiply>
 8010aca:	900b      	str	r0, [sp, #44]	; 0x2c
 8010acc:	2800      	cmp	r0, #0
 8010ace:	f43f aeaf 	beq.w	8010830 <_strtod_l+0x488>
 8010ad2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010ad4:	4620      	mov	r0, r4
 8010ad6:	f7fe ffdd 	bl	800fa94 <_Bfree>
 8010ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010adc:	9316      	str	r3, [sp, #88]	; 0x58
 8010ade:	2e00      	cmp	r6, #0
 8010ae0:	f300 808c 	bgt.w	8010bfc <_strtod_l+0x854>
 8010ae4:	9b08      	ldr	r3, [sp, #32]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	dd08      	ble.n	8010afc <_strtod_l+0x754>
 8010aea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010aec:	9905      	ldr	r1, [sp, #20]
 8010aee:	4620      	mov	r0, r4
 8010af0:	f7ff f990 	bl	800fe14 <__pow5mult>
 8010af4:	9005      	str	r0, [sp, #20]
 8010af6:	2800      	cmp	r0, #0
 8010af8:	f43f ae9a 	beq.w	8010830 <_strtod_l+0x488>
 8010afc:	2f00      	cmp	r7, #0
 8010afe:	dd08      	ble.n	8010b12 <_strtod_l+0x76a>
 8010b00:	9905      	ldr	r1, [sp, #20]
 8010b02:	463a      	mov	r2, r7
 8010b04:	4620      	mov	r0, r4
 8010b06:	f7ff f9df 	bl	800fec8 <__lshift>
 8010b0a:	9005      	str	r0, [sp, #20]
 8010b0c:	2800      	cmp	r0, #0
 8010b0e:	f43f ae8f 	beq.w	8010830 <_strtod_l+0x488>
 8010b12:	f1ba 0f00 	cmp.w	sl, #0
 8010b16:	dd08      	ble.n	8010b2a <_strtod_l+0x782>
 8010b18:	4659      	mov	r1, fp
 8010b1a:	4652      	mov	r2, sl
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	f7ff f9d3 	bl	800fec8 <__lshift>
 8010b22:	4683      	mov	fp, r0
 8010b24:	2800      	cmp	r0, #0
 8010b26:	f43f ae83 	beq.w	8010830 <_strtod_l+0x488>
 8010b2a:	9a05      	ldr	r2, [sp, #20]
 8010b2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f7ff fa52 	bl	800ffd8 <__mdiff>
 8010b34:	4605      	mov	r5, r0
 8010b36:	2800      	cmp	r0, #0
 8010b38:	f43f ae7a 	beq.w	8010830 <_strtod_l+0x488>
 8010b3c:	68c3      	ldr	r3, [r0, #12]
 8010b3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b40:	2300      	movs	r3, #0
 8010b42:	60c3      	str	r3, [r0, #12]
 8010b44:	4659      	mov	r1, fp
 8010b46:	f7ff fa2b 	bl	800ffa0 <__mcmp>
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	da60      	bge.n	8010c10 <_strtod_l+0x868>
 8010b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b50:	ea53 0308 	orrs.w	r3, r3, r8
 8010b54:	f040 8084 	bne.w	8010c60 <_strtod_l+0x8b8>
 8010b58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d17f      	bne.n	8010c60 <_strtod_l+0x8b8>
 8010b60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010b64:	0d1b      	lsrs	r3, r3, #20
 8010b66:	051b      	lsls	r3, r3, #20
 8010b68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010b6c:	d978      	bls.n	8010c60 <_strtod_l+0x8b8>
 8010b6e:	696b      	ldr	r3, [r5, #20]
 8010b70:	b913      	cbnz	r3, 8010b78 <_strtod_l+0x7d0>
 8010b72:	692b      	ldr	r3, [r5, #16]
 8010b74:	2b01      	cmp	r3, #1
 8010b76:	dd73      	ble.n	8010c60 <_strtod_l+0x8b8>
 8010b78:	4629      	mov	r1, r5
 8010b7a:	2201      	movs	r2, #1
 8010b7c:	4620      	mov	r0, r4
 8010b7e:	f7ff f9a3 	bl	800fec8 <__lshift>
 8010b82:	4659      	mov	r1, fp
 8010b84:	4605      	mov	r5, r0
 8010b86:	f7ff fa0b 	bl	800ffa0 <__mcmp>
 8010b8a:	2800      	cmp	r0, #0
 8010b8c:	dd68      	ble.n	8010c60 <_strtod_l+0x8b8>
 8010b8e:	9904      	ldr	r1, [sp, #16]
 8010b90:	4a54      	ldr	r2, [pc, #336]	; (8010ce4 <_strtod_l+0x93c>)
 8010b92:	464b      	mov	r3, r9
 8010b94:	2900      	cmp	r1, #0
 8010b96:	f000 8084 	beq.w	8010ca2 <_strtod_l+0x8fa>
 8010b9a:	ea02 0109 	and.w	r1, r2, r9
 8010b9e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010ba2:	dc7e      	bgt.n	8010ca2 <_strtod_l+0x8fa>
 8010ba4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010ba8:	f77f aeb3 	ble.w	8010912 <_strtod_l+0x56a>
 8010bac:	4b4e      	ldr	r3, [pc, #312]	; (8010ce8 <_strtod_l+0x940>)
 8010bae:	4640      	mov	r0, r8
 8010bb0:	4649      	mov	r1, r9
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f7ef fd20 	bl	80005f8 <__aeabi_dmul>
 8010bb8:	4b4a      	ldr	r3, [pc, #296]	; (8010ce4 <_strtod_l+0x93c>)
 8010bba:	400b      	ands	r3, r1
 8010bbc:	4680      	mov	r8, r0
 8010bbe:	4689      	mov	r9, r1
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	f47f ae3f 	bne.w	8010844 <_strtod_l+0x49c>
 8010bc6:	2322      	movs	r3, #34	; 0x22
 8010bc8:	6023      	str	r3, [r4, #0]
 8010bca:	e63b      	b.n	8010844 <_strtod_l+0x49c>
 8010bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8010bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8010bd4:	ea03 0808 	and.w	r8, r3, r8
 8010bd8:	e6e8      	b.n	80109ac <_strtod_l+0x604>
 8010bda:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010bde:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010be2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010be6:	36e2      	adds	r6, #226	; 0xe2
 8010be8:	fa01 f306 	lsl.w	r3, r1, r6
 8010bec:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010bf0:	e748      	b.n	8010a84 <_strtod_l+0x6dc>
 8010bf2:	2100      	movs	r1, #0
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8010bfa:	e743      	b.n	8010a84 <_strtod_l+0x6dc>
 8010bfc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010bfe:	4632      	mov	r2, r6
 8010c00:	4620      	mov	r0, r4
 8010c02:	f7ff f961 	bl	800fec8 <__lshift>
 8010c06:	9016      	str	r0, [sp, #88]	; 0x58
 8010c08:	2800      	cmp	r0, #0
 8010c0a:	f47f af6b 	bne.w	8010ae4 <_strtod_l+0x73c>
 8010c0e:	e60f      	b.n	8010830 <_strtod_l+0x488>
 8010c10:	46ca      	mov	sl, r9
 8010c12:	d171      	bne.n	8010cf8 <_strtod_l+0x950>
 8010c14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010c1a:	b352      	cbz	r2, 8010c72 <_strtod_l+0x8ca>
 8010c1c:	4a33      	ldr	r2, [pc, #204]	; (8010cec <_strtod_l+0x944>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d12a      	bne.n	8010c78 <_strtod_l+0x8d0>
 8010c22:	9b04      	ldr	r3, [sp, #16]
 8010c24:	4641      	mov	r1, r8
 8010c26:	b1fb      	cbz	r3, 8010c68 <_strtod_l+0x8c0>
 8010c28:	4b2e      	ldr	r3, [pc, #184]	; (8010ce4 <_strtod_l+0x93c>)
 8010c2a:	ea09 0303 	and.w	r3, r9, r3
 8010c2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010c32:	f04f 32ff 	mov.w	r2, #4294967295
 8010c36:	d81a      	bhi.n	8010c6e <_strtod_l+0x8c6>
 8010c38:	0d1b      	lsrs	r3, r3, #20
 8010c3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c42:	4299      	cmp	r1, r3
 8010c44:	d118      	bne.n	8010c78 <_strtod_l+0x8d0>
 8010c46:	4b2a      	ldr	r3, [pc, #168]	; (8010cf0 <_strtod_l+0x948>)
 8010c48:	459a      	cmp	sl, r3
 8010c4a:	d102      	bne.n	8010c52 <_strtod_l+0x8aa>
 8010c4c:	3101      	adds	r1, #1
 8010c4e:	f43f adef 	beq.w	8010830 <_strtod_l+0x488>
 8010c52:	4b24      	ldr	r3, [pc, #144]	; (8010ce4 <_strtod_l+0x93c>)
 8010c54:	ea0a 0303 	and.w	r3, sl, r3
 8010c58:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010c5c:	f04f 0800 	mov.w	r8, #0
 8010c60:	9b04      	ldr	r3, [sp, #16]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d1a2      	bne.n	8010bac <_strtod_l+0x804>
 8010c66:	e5ed      	b.n	8010844 <_strtod_l+0x49c>
 8010c68:	f04f 33ff 	mov.w	r3, #4294967295
 8010c6c:	e7e9      	b.n	8010c42 <_strtod_l+0x89a>
 8010c6e:	4613      	mov	r3, r2
 8010c70:	e7e7      	b.n	8010c42 <_strtod_l+0x89a>
 8010c72:	ea53 0308 	orrs.w	r3, r3, r8
 8010c76:	d08a      	beq.n	8010b8e <_strtod_l+0x7e6>
 8010c78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c7a:	b1e3      	cbz	r3, 8010cb6 <_strtod_l+0x90e>
 8010c7c:	ea13 0f0a 	tst.w	r3, sl
 8010c80:	d0ee      	beq.n	8010c60 <_strtod_l+0x8b8>
 8010c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c84:	9a04      	ldr	r2, [sp, #16]
 8010c86:	4640      	mov	r0, r8
 8010c88:	4649      	mov	r1, r9
 8010c8a:	b1c3      	cbz	r3, 8010cbe <_strtod_l+0x916>
 8010c8c:	f7ff fb6f 	bl	801036e <sulp>
 8010c90:	4602      	mov	r2, r0
 8010c92:	460b      	mov	r3, r1
 8010c94:	ec51 0b18 	vmov	r0, r1, d8
 8010c98:	f7ef faf8 	bl	800028c <__adddf3>
 8010c9c:	4680      	mov	r8, r0
 8010c9e:	4689      	mov	r9, r1
 8010ca0:	e7de      	b.n	8010c60 <_strtod_l+0x8b8>
 8010ca2:	4013      	ands	r3, r2
 8010ca4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010ca8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8010cac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010cb0:	f04f 38ff 	mov.w	r8, #4294967295
 8010cb4:	e7d4      	b.n	8010c60 <_strtod_l+0x8b8>
 8010cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cb8:	ea13 0f08 	tst.w	r3, r8
 8010cbc:	e7e0      	b.n	8010c80 <_strtod_l+0x8d8>
 8010cbe:	f7ff fb56 	bl	801036e <sulp>
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	ec51 0b18 	vmov	r0, r1, d8
 8010cca:	f7ef fadd 	bl	8000288 <__aeabi_dsub>
 8010cce:	2200      	movs	r2, #0
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	4680      	mov	r8, r0
 8010cd4:	4689      	mov	r9, r1
 8010cd6:	f7ef fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cda:	2800      	cmp	r0, #0
 8010cdc:	d0c0      	beq.n	8010c60 <_strtod_l+0x8b8>
 8010cde:	e618      	b.n	8010912 <_strtod_l+0x56a>
 8010ce0:	fffffc02 	.word	0xfffffc02
 8010ce4:	7ff00000 	.word	0x7ff00000
 8010ce8:	39500000 	.word	0x39500000
 8010cec:	000fffff 	.word	0x000fffff
 8010cf0:	7fefffff 	.word	0x7fefffff
 8010cf4:	08014588 	.word	0x08014588
 8010cf8:	4659      	mov	r1, fp
 8010cfa:	4628      	mov	r0, r5
 8010cfc:	f7ff fac0 	bl	8010280 <__ratio>
 8010d00:	ec57 6b10 	vmov	r6, r7, d0
 8010d04:	ee10 0a10 	vmov	r0, s0
 8010d08:	2200      	movs	r2, #0
 8010d0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010d0e:	4639      	mov	r1, r7
 8010d10:	f7ef feee 	bl	8000af0 <__aeabi_dcmple>
 8010d14:	2800      	cmp	r0, #0
 8010d16:	d071      	beq.n	8010dfc <_strtod_l+0xa54>
 8010d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d17c      	bne.n	8010e18 <_strtod_l+0xa70>
 8010d1e:	f1b8 0f00 	cmp.w	r8, #0
 8010d22:	d15a      	bne.n	8010dda <_strtod_l+0xa32>
 8010d24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d15d      	bne.n	8010de8 <_strtod_l+0xa40>
 8010d2c:	4b90      	ldr	r3, [pc, #576]	; (8010f70 <_strtod_l+0xbc8>)
 8010d2e:	2200      	movs	r2, #0
 8010d30:	4630      	mov	r0, r6
 8010d32:	4639      	mov	r1, r7
 8010d34:	f7ef fed2 	bl	8000adc <__aeabi_dcmplt>
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	d15c      	bne.n	8010df6 <_strtod_l+0xa4e>
 8010d3c:	4630      	mov	r0, r6
 8010d3e:	4639      	mov	r1, r7
 8010d40:	4b8c      	ldr	r3, [pc, #560]	; (8010f74 <_strtod_l+0xbcc>)
 8010d42:	2200      	movs	r2, #0
 8010d44:	f7ef fc58 	bl	80005f8 <__aeabi_dmul>
 8010d48:	4606      	mov	r6, r0
 8010d4a:	460f      	mov	r7, r1
 8010d4c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010d50:	9606      	str	r6, [sp, #24]
 8010d52:	9307      	str	r3, [sp, #28]
 8010d54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d58:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010d5c:	4b86      	ldr	r3, [pc, #536]	; (8010f78 <_strtod_l+0xbd0>)
 8010d5e:	ea0a 0303 	and.w	r3, sl, r3
 8010d62:	930d      	str	r3, [sp, #52]	; 0x34
 8010d64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d66:	4b85      	ldr	r3, [pc, #532]	; (8010f7c <_strtod_l+0xbd4>)
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	f040 8090 	bne.w	8010e8e <_strtod_l+0xae6>
 8010d6e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8010d72:	ec49 8b10 	vmov	d0, r8, r9
 8010d76:	f7ff f9b9 	bl	80100ec <__ulp>
 8010d7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d7e:	ec51 0b10 	vmov	r0, r1, d0
 8010d82:	f7ef fc39 	bl	80005f8 <__aeabi_dmul>
 8010d86:	4642      	mov	r2, r8
 8010d88:	464b      	mov	r3, r9
 8010d8a:	f7ef fa7f 	bl	800028c <__adddf3>
 8010d8e:	460b      	mov	r3, r1
 8010d90:	4979      	ldr	r1, [pc, #484]	; (8010f78 <_strtod_l+0xbd0>)
 8010d92:	4a7b      	ldr	r2, [pc, #492]	; (8010f80 <_strtod_l+0xbd8>)
 8010d94:	4019      	ands	r1, r3
 8010d96:	4291      	cmp	r1, r2
 8010d98:	4680      	mov	r8, r0
 8010d9a:	d944      	bls.n	8010e26 <_strtod_l+0xa7e>
 8010d9c:	ee18 2a90 	vmov	r2, s17
 8010da0:	4b78      	ldr	r3, [pc, #480]	; (8010f84 <_strtod_l+0xbdc>)
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d104      	bne.n	8010db0 <_strtod_l+0xa08>
 8010da6:	ee18 3a10 	vmov	r3, s16
 8010daa:	3301      	adds	r3, #1
 8010dac:	f43f ad40 	beq.w	8010830 <_strtod_l+0x488>
 8010db0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8010f84 <_strtod_l+0xbdc>
 8010db4:	f04f 38ff 	mov.w	r8, #4294967295
 8010db8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010dba:	4620      	mov	r0, r4
 8010dbc:	f7fe fe6a 	bl	800fa94 <_Bfree>
 8010dc0:	9905      	ldr	r1, [sp, #20]
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	f7fe fe66 	bl	800fa94 <_Bfree>
 8010dc8:	4659      	mov	r1, fp
 8010dca:	4620      	mov	r0, r4
 8010dcc:	f7fe fe62 	bl	800fa94 <_Bfree>
 8010dd0:	4629      	mov	r1, r5
 8010dd2:	4620      	mov	r0, r4
 8010dd4:	f7fe fe5e 	bl	800fa94 <_Bfree>
 8010dd8:	e609      	b.n	80109ee <_strtod_l+0x646>
 8010dda:	f1b8 0f01 	cmp.w	r8, #1
 8010dde:	d103      	bne.n	8010de8 <_strtod_l+0xa40>
 8010de0:	f1b9 0f00 	cmp.w	r9, #0
 8010de4:	f43f ad95 	beq.w	8010912 <_strtod_l+0x56a>
 8010de8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8010f40 <_strtod_l+0xb98>
 8010dec:	4f60      	ldr	r7, [pc, #384]	; (8010f70 <_strtod_l+0xbc8>)
 8010dee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010df2:	2600      	movs	r6, #0
 8010df4:	e7ae      	b.n	8010d54 <_strtod_l+0x9ac>
 8010df6:	4f5f      	ldr	r7, [pc, #380]	; (8010f74 <_strtod_l+0xbcc>)
 8010df8:	2600      	movs	r6, #0
 8010dfa:	e7a7      	b.n	8010d4c <_strtod_l+0x9a4>
 8010dfc:	4b5d      	ldr	r3, [pc, #372]	; (8010f74 <_strtod_l+0xbcc>)
 8010dfe:	4630      	mov	r0, r6
 8010e00:	4639      	mov	r1, r7
 8010e02:	2200      	movs	r2, #0
 8010e04:	f7ef fbf8 	bl	80005f8 <__aeabi_dmul>
 8010e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e0a:	4606      	mov	r6, r0
 8010e0c:	460f      	mov	r7, r1
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d09c      	beq.n	8010d4c <_strtod_l+0x9a4>
 8010e12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010e16:	e79d      	b.n	8010d54 <_strtod_l+0x9ac>
 8010e18:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010f48 <_strtod_l+0xba0>
 8010e1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010e20:	ec57 6b17 	vmov	r6, r7, d7
 8010e24:	e796      	b.n	8010d54 <_strtod_l+0x9ac>
 8010e26:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8010e2a:	9b04      	ldr	r3, [sp, #16]
 8010e2c:	46ca      	mov	sl, r9
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d1c2      	bne.n	8010db8 <_strtod_l+0xa10>
 8010e32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010e36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e38:	0d1b      	lsrs	r3, r3, #20
 8010e3a:	051b      	lsls	r3, r3, #20
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d1bb      	bne.n	8010db8 <_strtod_l+0xa10>
 8010e40:	4630      	mov	r0, r6
 8010e42:	4639      	mov	r1, r7
 8010e44:	f7ef ff38 	bl	8000cb8 <__aeabi_d2lz>
 8010e48:	f7ef fba8 	bl	800059c <__aeabi_l2d>
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	460b      	mov	r3, r1
 8010e50:	4630      	mov	r0, r6
 8010e52:	4639      	mov	r1, r7
 8010e54:	f7ef fa18 	bl	8000288 <__aeabi_dsub>
 8010e58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010e5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010e5e:	ea43 0308 	orr.w	r3, r3, r8
 8010e62:	4313      	orrs	r3, r2
 8010e64:	4606      	mov	r6, r0
 8010e66:	460f      	mov	r7, r1
 8010e68:	d054      	beq.n	8010f14 <_strtod_l+0xb6c>
 8010e6a:	a339      	add	r3, pc, #228	; (adr r3, 8010f50 <_strtod_l+0xba8>)
 8010e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e70:	f7ef fe34 	bl	8000adc <__aeabi_dcmplt>
 8010e74:	2800      	cmp	r0, #0
 8010e76:	f47f ace5 	bne.w	8010844 <_strtod_l+0x49c>
 8010e7a:	a337      	add	r3, pc, #220	; (adr r3, 8010f58 <_strtod_l+0xbb0>)
 8010e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e80:	4630      	mov	r0, r6
 8010e82:	4639      	mov	r1, r7
 8010e84:	f7ef fe48 	bl	8000b18 <__aeabi_dcmpgt>
 8010e88:	2800      	cmp	r0, #0
 8010e8a:	d095      	beq.n	8010db8 <_strtod_l+0xa10>
 8010e8c:	e4da      	b.n	8010844 <_strtod_l+0x49c>
 8010e8e:	9b04      	ldr	r3, [sp, #16]
 8010e90:	b333      	cbz	r3, 8010ee0 <_strtod_l+0xb38>
 8010e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010e98:	d822      	bhi.n	8010ee0 <_strtod_l+0xb38>
 8010e9a:	a331      	add	r3, pc, #196	; (adr r3, 8010f60 <_strtod_l+0xbb8>)
 8010e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea0:	4630      	mov	r0, r6
 8010ea2:	4639      	mov	r1, r7
 8010ea4:	f7ef fe24 	bl	8000af0 <__aeabi_dcmple>
 8010ea8:	b1a0      	cbz	r0, 8010ed4 <_strtod_l+0xb2c>
 8010eaa:	4639      	mov	r1, r7
 8010eac:	4630      	mov	r0, r6
 8010eae:	f7ef fe7b 	bl	8000ba8 <__aeabi_d2uiz>
 8010eb2:	2801      	cmp	r0, #1
 8010eb4:	bf38      	it	cc
 8010eb6:	2001      	movcc	r0, #1
 8010eb8:	f7ef fb24 	bl	8000504 <__aeabi_ui2d>
 8010ebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ebe:	4606      	mov	r6, r0
 8010ec0:	460f      	mov	r7, r1
 8010ec2:	bb23      	cbnz	r3, 8010f0e <_strtod_l+0xb66>
 8010ec4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ec8:	9010      	str	r0, [sp, #64]	; 0x40
 8010eca:	9311      	str	r3, [sp, #68]	; 0x44
 8010ecc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010ed0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ed6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ed8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010edc:	1a9b      	subs	r3, r3, r2
 8010ede:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ee0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010ee4:	eeb0 0a48 	vmov.f32	s0, s16
 8010ee8:	eef0 0a68 	vmov.f32	s1, s17
 8010eec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010ef0:	f7ff f8fc 	bl	80100ec <__ulp>
 8010ef4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010ef8:	ec53 2b10 	vmov	r2, r3, d0
 8010efc:	f7ef fb7c 	bl	80005f8 <__aeabi_dmul>
 8010f00:	ec53 2b18 	vmov	r2, r3, d8
 8010f04:	f7ef f9c2 	bl	800028c <__adddf3>
 8010f08:	4680      	mov	r8, r0
 8010f0a:	4689      	mov	r9, r1
 8010f0c:	e78d      	b.n	8010e2a <_strtod_l+0xa82>
 8010f0e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8010f12:	e7db      	b.n	8010ecc <_strtod_l+0xb24>
 8010f14:	a314      	add	r3, pc, #80	; (adr r3, 8010f68 <_strtod_l+0xbc0>)
 8010f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f1a:	f7ef fddf 	bl	8000adc <__aeabi_dcmplt>
 8010f1e:	e7b3      	b.n	8010e88 <_strtod_l+0xae0>
 8010f20:	2300      	movs	r3, #0
 8010f22:	930a      	str	r3, [sp, #40]	; 0x28
 8010f24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010f26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f28:	6013      	str	r3, [r2, #0]
 8010f2a:	f7ff ba7c 	b.w	8010426 <_strtod_l+0x7e>
 8010f2e:	2a65      	cmp	r2, #101	; 0x65
 8010f30:	f43f ab75 	beq.w	801061e <_strtod_l+0x276>
 8010f34:	2a45      	cmp	r2, #69	; 0x45
 8010f36:	f43f ab72 	beq.w	801061e <_strtod_l+0x276>
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	f7ff bbaa 	b.w	8010694 <_strtod_l+0x2ec>
 8010f40:	00000000 	.word	0x00000000
 8010f44:	bff00000 	.word	0xbff00000
 8010f48:	00000000 	.word	0x00000000
 8010f4c:	3ff00000 	.word	0x3ff00000
 8010f50:	94a03595 	.word	0x94a03595
 8010f54:	3fdfffff 	.word	0x3fdfffff
 8010f58:	35afe535 	.word	0x35afe535
 8010f5c:	3fe00000 	.word	0x3fe00000
 8010f60:	ffc00000 	.word	0xffc00000
 8010f64:	41dfffff 	.word	0x41dfffff
 8010f68:	94a03595 	.word	0x94a03595
 8010f6c:	3fcfffff 	.word	0x3fcfffff
 8010f70:	3ff00000 	.word	0x3ff00000
 8010f74:	3fe00000 	.word	0x3fe00000
 8010f78:	7ff00000 	.word	0x7ff00000
 8010f7c:	7fe00000 	.word	0x7fe00000
 8010f80:	7c9fffff 	.word	0x7c9fffff
 8010f84:	7fefffff 	.word	0x7fefffff

08010f88 <_strtod_r>:
 8010f88:	4b01      	ldr	r3, [pc, #4]	; (8010f90 <_strtod_r+0x8>)
 8010f8a:	f7ff ba0d 	b.w	80103a8 <_strtod_l>
 8010f8e:	bf00      	nop
 8010f90:	20000134 	.word	0x20000134

08010f94 <_strtol_l.constprop.0>:
 8010f94:	2b01      	cmp	r3, #1
 8010f96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f9a:	d001      	beq.n	8010fa0 <_strtol_l.constprop.0+0xc>
 8010f9c:	2b24      	cmp	r3, #36	; 0x24
 8010f9e:	d906      	bls.n	8010fae <_strtol_l.constprop.0+0x1a>
 8010fa0:	f7fd fd74 	bl	800ea8c <__errno>
 8010fa4:	2316      	movs	r3, #22
 8010fa6:	6003      	str	r3, [r0, #0]
 8010fa8:	2000      	movs	r0, #0
 8010faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011094 <_strtol_l.constprop.0+0x100>
 8010fb2:	460d      	mov	r5, r1
 8010fb4:	462e      	mov	r6, r5
 8010fb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010fba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010fbe:	f017 0708 	ands.w	r7, r7, #8
 8010fc2:	d1f7      	bne.n	8010fb4 <_strtol_l.constprop.0+0x20>
 8010fc4:	2c2d      	cmp	r4, #45	; 0x2d
 8010fc6:	d132      	bne.n	801102e <_strtol_l.constprop.0+0x9a>
 8010fc8:	782c      	ldrb	r4, [r5, #0]
 8010fca:	2701      	movs	r7, #1
 8010fcc:	1cb5      	adds	r5, r6, #2
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d05b      	beq.n	801108a <_strtol_l.constprop.0+0xf6>
 8010fd2:	2b10      	cmp	r3, #16
 8010fd4:	d109      	bne.n	8010fea <_strtol_l.constprop.0+0x56>
 8010fd6:	2c30      	cmp	r4, #48	; 0x30
 8010fd8:	d107      	bne.n	8010fea <_strtol_l.constprop.0+0x56>
 8010fda:	782c      	ldrb	r4, [r5, #0]
 8010fdc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010fe0:	2c58      	cmp	r4, #88	; 0x58
 8010fe2:	d14d      	bne.n	8011080 <_strtol_l.constprop.0+0xec>
 8010fe4:	786c      	ldrb	r4, [r5, #1]
 8010fe6:	2310      	movs	r3, #16
 8010fe8:	3502      	adds	r5, #2
 8010fea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010fee:	f108 38ff 	add.w	r8, r8, #4294967295
 8010ff2:	f04f 0e00 	mov.w	lr, #0
 8010ff6:	fbb8 f9f3 	udiv	r9, r8, r3
 8010ffa:	4676      	mov	r6, lr
 8010ffc:	fb03 8a19 	mls	sl, r3, r9, r8
 8011000:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011004:	f1bc 0f09 	cmp.w	ip, #9
 8011008:	d816      	bhi.n	8011038 <_strtol_l.constprop.0+0xa4>
 801100a:	4664      	mov	r4, ip
 801100c:	42a3      	cmp	r3, r4
 801100e:	dd24      	ble.n	801105a <_strtol_l.constprop.0+0xc6>
 8011010:	f1be 3fff 	cmp.w	lr, #4294967295
 8011014:	d008      	beq.n	8011028 <_strtol_l.constprop.0+0x94>
 8011016:	45b1      	cmp	r9, r6
 8011018:	d31c      	bcc.n	8011054 <_strtol_l.constprop.0+0xc0>
 801101a:	d101      	bne.n	8011020 <_strtol_l.constprop.0+0x8c>
 801101c:	45a2      	cmp	sl, r4
 801101e:	db19      	blt.n	8011054 <_strtol_l.constprop.0+0xc0>
 8011020:	fb06 4603 	mla	r6, r6, r3, r4
 8011024:	f04f 0e01 	mov.w	lr, #1
 8011028:	f815 4b01 	ldrb.w	r4, [r5], #1
 801102c:	e7e8      	b.n	8011000 <_strtol_l.constprop.0+0x6c>
 801102e:	2c2b      	cmp	r4, #43	; 0x2b
 8011030:	bf04      	itt	eq
 8011032:	782c      	ldrbeq	r4, [r5, #0]
 8011034:	1cb5      	addeq	r5, r6, #2
 8011036:	e7ca      	b.n	8010fce <_strtol_l.constprop.0+0x3a>
 8011038:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801103c:	f1bc 0f19 	cmp.w	ip, #25
 8011040:	d801      	bhi.n	8011046 <_strtol_l.constprop.0+0xb2>
 8011042:	3c37      	subs	r4, #55	; 0x37
 8011044:	e7e2      	b.n	801100c <_strtol_l.constprop.0+0x78>
 8011046:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801104a:	f1bc 0f19 	cmp.w	ip, #25
 801104e:	d804      	bhi.n	801105a <_strtol_l.constprop.0+0xc6>
 8011050:	3c57      	subs	r4, #87	; 0x57
 8011052:	e7db      	b.n	801100c <_strtol_l.constprop.0+0x78>
 8011054:	f04f 3eff 	mov.w	lr, #4294967295
 8011058:	e7e6      	b.n	8011028 <_strtol_l.constprop.0+0x94>
 801105a:	f1be 3fff 	cmp.w	lr, #4294967295
 801105e:	d105      	bne.n	801106c <_strtol_l.constprop.0+0xd8>
 8011060:	2322      	movs	r3, #34	; 0x22
 8011062:	6003      	str	r3, [r0, #0]
 8011064:	4646      	mov	r6, r8
 8011066:	b942      	cbnz	r2, 801107a <_strtol_l.constprop.0+0xe6>
 8011068:	4630      	mov	r0, r6
 801106a:	e79e      	b.n	8010faa <_strtol_l.constprop.0+0x16>
 801106c:	b107      	cbz	r7, 8011070 <_strtol_l.constprop.0+0xdc>
 801106e:	4276      	negs	r6, r6
 8011070:	2a00      	cmp	r2, #0
 8011072:	d0f9      	beq.n	8011068 <_strtol_l.constprop.0+0xd4>
 8011074:	f1be 0f00 	cmp.w	lr, #0
 8011078:	d000      	beq.n	801107c <_strtol_l.constprop.0+0xe8>
 801107a:	1e69      	subs	r1, r5, #1
 801107c:	6011      	str	r1, [r2, #0]
 801107e:	e7f3      	b.n	8011068 <_strtol_l.constprop.0+0xd4>
 8011080:	2430      	movs	r4, #48	; 0x30
 8011082:	2b00      	cmp	r3, #0
 8011084:	d1b1      	bne.n	8010fea <_strtol_l.constprop.0+0x56>
 8011086:	2308      	movs	r3, #8
 8011088:	e7af      	b.n	8010fea <_strtol_l.constprop.0+0x56>
 801108a:	2c30      	cmp	r4, #48	; 0x30
 801108c:	d0a5      	beq.n	8010fda <_strtol_l.constprop.0+0x46>
 801108e:	230a      	movs	r3, #10
 8011090:	e7ab      	b.n	8010fea <_strtol_l.constprop.0+0x56>
 8011092:	bf00      	nop
 8011094:	080145b1 	.word	0x080145b1

08011098 <_strtol_r>:
 8011098:	f7ff bf7c 	b.w	8010f94 <_strtol_l.constprop.0>

0801109c <__ssputs_r>:
 801109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110a0:	688e      	ldr	r6, [r1, #8]
 80110a2:	461f      	mov	r7, r3
 80110a4:	42be      	cmp	r6, r7
 80110a6:	680b      	ldr	r3, [r1, #0]
 80110a8:	4682      	mov	sl, r0
 80110aa:	460c      	mov	r4, r1
 80110ac:	4690      	mov	r8, r2
 80110ae:	d82c      	bhi.n	801110a <__ssputs_r+0x6e>
 80110b0:	898a      	ldrh	r2, [r1, #12]
 80110b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80110b6:	d026      	beq.n	8011106 <__ssputs_r+0x6a>
 80110b8:	6965      	ldr	r5, [r4, #20]
 80110ba:	6909      	ldr	r1, [r1, #16]
 80110bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80110c0:	eba3 0901 	sub.w	r9, r3, r1
 80110c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80110c8:	1c7b      	adds	r3, r7, #1
 80110ca:	444b      	add	r3, r9
 80110cc:	106d      	asrs	r5, r5, #1
 80110ce:	429d      	cmp	r5, r3
 80110d0:	bf38      	it	cc
 80110d2:	461d      	movcc	r5, r3
 80110d4:	0553      	lsls	r3, r2, #21
 80110d6:	d527      	bpl.n	8011128 <__ssputs_r+0x8c>
 80110d8:	4629      	mov	r1, r5
 80110da:	f7fe fc0f 	bl	800f8fc <_malloc_r>
 80110de:	4606      	mov	r6, r0
 80110e0:	b360      	cbz	r0, 801113c <__ssputs_r+0xa0>
 80110e2:	6921      	ldr	r1, [r4, #16]
 80110e4:	464a      	mov	r2, r9
 80110e6:	f7fd fd06 	bl	800eaf6 <memcpy>
 80110ea:	89a3      	ldrh	r3, [r4, #12]
 80110ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80110f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110f4:	81a3      	strh	r3, [r4, #12]
 80110f6:	6126      	str	r6, [r4, #16]
 80110f8:	6165      	str	r5, [r4, #20]
 80110fa:	444e      	add	r6, r9
 80110fc:	eba5 0509 	sub.w	r5, r5, r9
 8011100:	6026      	str	r6, [r4, #0]
 8011102:	60a5      	str	r5, [r4, #8]
 8011104:	463e      	mov	r6, r7
 8011106:	42be      	cmp	r6, r7
 8011108:	d900      	bls.n	801110c <__ssputs_r+0x70>
 801110a:	463e      	mov	r6, r7
 801110c:	6820      	ldr	r0, [r4, #0]
 801110e:	4632      	mov	r2, r6
 8011110:	4641      	mov	r1, r8
 8011112:	f000 fd5c 	bl	8011bce <memmove>
 8011116:	68a3      	ldr	r3, [r4, #8]
 8011118:	1b9b      	subs	r3, r3, r6
 801111a:	60a3      	str	r3, [r4, #8]
 801111c:	6823      	ldr	r3, [r4, #0]
 801111e:	4433      	add	r3, r6
 8011120:	6023      	str	r3, [r4, #0]
 8011122:	2000      	movs	r0, #0
 8011124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011128:	462a      	mov	r2, r5
 801112a:	f001 f932 	bl	8012392 <_realloc_r>
 801112e:	4606      	mov	r6, r0
 8011130:	2800      	cmp	r0, #0
 8011132:	d1e0      	bne.n	80110f6 <__ssputs_r+0x5a>
 8011134:	6921      	ldr	r1, [r4, #16]
 8011136:	4650      	mov	r0, sl
 8011138:	f7fe fb6c 	bl	800f814 <_free_r>
 801113c:	230c      	movs	r3, #12
 801113e:	f8ca 3000 	str.w	r3, [sl]
 8011142:	89a3      	ldrh	r3, [r4, #12]
 8011144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011148:	81a3      	strh	r3, [r4, #12]
 801114a:	f04f 30ff 	mov.w	r0, #4294967295
 801114e:	e7e9      	b.n	8011124 <__ssputs_r+0x88>

08011150 <_svfiprintf_r>:
 8011150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011154:	4698      	mov	r8, r3
 8011156:	898b      	ldrh	r3, [r1, #12]
 8011158:	061b      	lsls	r3, r3, #24
 801115a:	b09d      	sub	sp, #116	; 0x74
 801115c:	4607      	mov	r7, r0
 801115e:	460d      	mov	r5, r1
 8011160:	4614      	mov	r4, r2
 8011162:	d50e      	bpl.n	8011182 <_svfiprintf_r+0x32>
 8011164:	690b      	ldr	r3, [r1, #16]
 8011166:	b963      	cbnz	r3, 8011182 <_svfiprintf_r+0x32>
 8011168:	2140      	movs	r1, #64	; 0x40
 801116a:	f7fe fbc7 	bl	800f8fc <_malloc_r>
 801116e:	6028      	str	r0, [r5, #0]
 8011170:	6128      	str	r0, [r5, #16]
 8011172:	b920      	cbnz	r0, 801117e <_svfiprintf_r+0x2e>
 8011174:	230c      	movs	r3, #12
 8011176:	603b      	str	r3, [r7, #0]
 8011178:	f04f 30ff 	mov.w	r0, #4294967295
 801117c:	e0d0      	b.n	8011320 <_svfiprintf_r+0x1d0>
 801117e:	2340      	movs	r3, #64	; 0x40
 8011180:	616b      	str	r3, [r5, #20]
 8011182:	2300      	movs	r3, #0
 8011184:	9309      	str	r3, [sp, #36]	; 0x24
 8011186:	2320      	movs	r3, #32
 8011188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801118c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011190:	2330      	movs	r3, #48	; 0x30
 8011192:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011338 <_svfiprintf_r+0x1e8>
 8011196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801119a:	f04f 0901 	mov.w	r9, #1
 801119e:	4623      	mov	r3, r4
 80111a0:	469a      	mov	sl, r3
 80111a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111a6:	b10a      	cbz	r2, 80111ac <_svfiprintf_r+0x5c>
 80111a8:	2a25      	cmp	r2, #37	; 0x25
 80111aa:	d1f9      	bne.n	80111a0 <_svfiprintf_r+0x50>
 80111ac:	ebba 0b04 	subs.w	fp, sl, r4
 80111b0:	d00b      	beq.n	80111ca <_svfiprintf_r+0x7a>
 80111b2:	465b      	mov	r3, fp
 80111b4:	4622      	mov	r2, r4
 80111b6:	4629      	mov	r1, r5
 80111b8:	4638      	mov	r0, r7
 80111ba:	f7ff ff6f 	bl	801109c <__ssputs_r>
 80111be:	3001      	adds	r0, #1
 80111c0:	f000 80a9 	beq.w	8011316 <_svfiprintf_r+0x1c6>
 80111c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111c6:	445a      	add	r2, fp
 80111c8:	9209      	str	r2, [sp, #36]	; 0x24
 80111ca:	f89a 3000 	ldrb.w	r3, [sl]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	f000 80a1 	beq.w	8011316 <_svfiprintf_r+0x1c6>
 80111d4:	2300      	movs	r3, #0
 80111d6:	f04f 32ff 	mov.w	r2, #4294967295
 80111da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111de:	f10a 0a01 	add.w	sl, sl, #1
 80111e2:	9304      	str	r3, [sp, #16]
 80111e4:	9307      	str	r3, [sp, #28]
 80111e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80111ea:	931a      	str	r3, [sp, #104]	; 0x68
 80111ec:	4654      	mov	r4, sl
 80111ee:	2205      	movs	r2, #5
 80111f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111f4:	4850      	ldr	r0, [pc, #320]	; (8011338 <_svfiprintf_r+0x1e8>)
 80111f6:	f7ee ffeb 	bl	80001d0 <memchr>
 80111fa:	9a04      	ldr	r2, [sp, #16]
 80111fc:	b9d8      	cbnz	r0, 8011236 <_svfiprintf_r+0xe6>
 80111fe:	06d0      	lsls	r0, r2, #27
 8011200:	bf44      	itt	mi
 8011202:	2320      	movmi	r3, #32
 8011204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011208:	0711      	lsls	r1, r2, #28
 801120a:	bf44      	itt	mi
 801120c:	232b      	movmi	r3, #43	; 0x2b
 801120e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011212:	f89a 3000 	ldrb.w	r3, [sl]
 8011216:	2b2a      	cmp	r3, #42	; 0x2a
 8011218:	d015      	beq.n	8011246 <_svfiprintf_r+0xf6>
 801121a:	9a07      	ldr	r2, [sp, #28]
 801121c:	4654      	mov	r4, sl
 801121e:	2000      	movs	r0, #0
 8011220:	f04f 0c0a 	mov.w	ip, #10
 8011224:	4621      	mov	r1, r4
 8011226:	f811 3b01 	ldrb.w	r3, [r1], #1
 801122a:	3b30      	subs	r3, #48	; 0x30
 801122c:	2b09      	cmp	r3, #9
 801122e:	d94d      	bls.n	80112cc <_svfiprintf_r+0x17c>
 8011230:	b1b0      	cbz	r0, 8011260 <_svfiprintf_r+0x110>
 8011232:	9207      	str	r2, [sp, #28]
 8011234:	e014      	b.n	8011260 <_svfiprintf_r+0x110>
 8011236:	eba0 0308 	sub.w	r3, r0, r8
 801123a:	fa09 f303 	lsl.w	r3, r9, r3
 801123e:	4313      	orrs	r3, r2
 8011240:	9304      	str	r3, [sp, #16]
 8011242:	46a2      	mov	sl, r4
 8011244:	e7d2      	b.n	80111ec <_svfiprintf_r+0x9c>
 8011246:	9b03      	ldr	r3, [sp, #12]
 8011248:	1d19      	adds	r1, r3, #4
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	9103      	str	r1, [sp, #12]
 801124e:	2b00      	cmp	r3, #0
 8011250:	bfbb      	ittet	lt
 8011252:	425b      	neglt	r3, r3
 8011254:	f042 0202 	orrlt.w	r2, r2, #2
 8011258:	9307      	strge	r3, [sp, #28]
 801125a:	9307      	strlt	r3, [sp, #28]
 801125c:	bfb8      	it	lt
 801125e:	9204      	strlt	r2, [sp, #16]
 8011260:	7823      	ldrb	r3, [r4, #0]
 8011262:	2b2e      	cmp	r3, #46	; 0x2e
 8011264:	d10c      	bne.n	8011280 <_svfiprintf_r+0x130>
 8011266:	7863      	ldrb	r3, [r4, #1]
 8011268:	2b2a      	cmp	r3, #42	; 0x2a
 801126a:	d134      	bne.n	80112d6 <_svfiprintf_r+0x186>
 801126c:	9b03      	ldr	r3, [sp, #12]
 801126e:	1d1a      	adds	r2, r3, #4
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	9203      	str	r2, [sp, #12]
 8011274:	2b00      	cmp	r3, #0
 8011276:	bfb8      	it	lt
 8011278:	f04f 33ff 	movlt.w	r3, #4294967295
 801127c:	3402      	adds	r4, #2
 801127e:	9305      	str	r3, [sp, #20]
 8011280:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011348 <_svfiprintf_r+0x1f8>
 8011284:	7821      	ldrb	r1, [r4, #0]
 8011286:	2203      	movs	r2, #3
 8011288:	4650      	mov	r0, sl
 801128a:	f7ee ffa1 	bl	80001d0 <memchr>
 801128e:	b138      	cbz	r0, 80112a0 <_svfiprintf_r+0x150>
 8011290:	9b04      	ldr	r3, [sp, #16]
 8011292:	eba0 000a 	sub.w	r0, r0, sl
 8011296:	2240      	movs	r2, #64	; 0x40
 8011298:	4082      	lsls	r2, r0
 801129a:	4313      	orrs	r3, r2
 801129c:	3401      	adds	r4, #1
 801129e:	9304      	str	r3, [sp, #16]
 80112a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112a4:	4825      	ldr	r0, [pc, #148]	; (801133c <_svfiprintf_r+0x1ec>)
 80112a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112aa:	2206      	movs	r2, #6
 80112ac:	f7ee ff90 	bl	80001d0 <memchr>
 80112b0:	2800      	cmp	r0, #0
 80112b2:	d038      	beq.n	8011326 <_svfiprintf_r+0x1d6>
 80112b4:	4b22      	ldr	r3, [pc, #136]	; (8011340 <_svfiprintf_r+0x1f0>)
 80112b6:	bb1b      	cbnz	r3, 8011300 <_svfiprintf_r+0x1b0>
 80112b8:	9b03      	ldr	r3, [sp, #12]
 80112ba:	3307      	adds	r3, #7
 80112bc:	f023 0307 	bic.w	r3, r3, #7
 80112c0:	3308      	adds	r3, #8
 80112c2:	9303      	str	r3, [sp, #12]
 80112c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112c6:	4433      	add	r3, r6
 80112c8:	9309      	str	r3, [sp, #36]	; 0x24
 80112ca:	e768      	b.n	801119e <_svfiprintf_r+0x4e>
 80112cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80112d0:	460c      	mov	r4, r1
 80112d2:	2001      	movs	r0, #1
 80112d4:	e7a6      	b.n	8011224 <_svfiprintf_r+0xd4>
 80112d6:	2300      	movs	r3, #0
 80112d8:	3401      	adds	r4, #1
 80112da:	9305      	str	r3, [sp, #20]
 80112dc:	4619      	mov	r1, r3
 80112de:	f04f 0c0a 	mov.w	ip, #10
 80112e2:	4620      	mov	r0, r4
 80112e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112e8:	3a30      	subs	r2, #48	; 0x30
 80112ea:	2a09      	cmp	r2, #9
 80112ec:	d903      	bls.n	80112f6 <_svfiprintf_r+0x1a6>
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d0c6      	beq.n	8011280 <_svfiprintf_r+0x130>
 80112f2:	9105      	str	r1, [sp, #20]
 80112f4:	e7c4      	b.n	8011280 <_svfiprintf_r+0x130>
 80112f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80112fa:	4604      	mov	r4, r0
 80112fc:	2301      	movs	r3, #1
 80112fe:	e7f0      	b.n	80112e2 <_svfiprintf_r+0x192>
 8011300:	ab03      	add	r3, sp, #12
 8011302:	9300      	str	r3, [sp, #0]
 8011304:	462a      	mov	r2, r5
 8011306:	4b0f      	ldr	r3, [pc, #60]	; (8011344 <_svfiprintf_r+0x1f4>)
 8011308:	a904      	add	r1, sp, #16
 801130a:	4638      	mov	r0, r7
 801130c:	f7fc fbd6 	bl	800dabc <_printf_float>
 8011310:	1c42      	adds	r2, r0, #1
 8011312:	4606      	mov	r6, r0
 8011314:	d1d6      	bne.n	80112c4 <_svfiprintf_r+0x174>
 8011316:	89ab      	ldrh	r3, [r5, #12]
 8011318:	065b      	lsls	r3, r3, #25
 801131a:	f53f af2d 	bmi.w	8011178 <_svfiprintf_r+0x28>
 801131e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011320:	b01d      	add	sp, #116	; 0x74
 8011322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011326:	ab03      	add	r3, sp, #12
 8011328:	9300      	str	r3, [sp, #0]
 801132a:	462a      	mov	r2, r5
 801132c:	4b05      	ldr	r3, [pc, #20]	; (8011344 <_svfiprintf_r+0x1f4>)
 801132e:	a904      	add	r1, sp, #16
 8011330:	4638      	mov	r0, r7
 8011332:	f7fc fe67 	bl	800e004 <_printf_i>
 8011336:	e7eb      	b.n	8011310 <_svfiprintf_r+0x1c0>
 8011338:	080146b1 	.word	0x080146b1
 801133c:	080146bb 	.word	0x080146bb
 8011340:	0800dabd 	.word	0x0800dabd
 8011344:	0801109d 	.word	0x0801109d
 8011348:	080146b7 	.word	0x080146b7

0801134c <_sungetc_r>:
 801134c:	b538      	push	{r3, r4, r5, lr}
 801134e:	1c4b      	adds	r3, r1, #1
 8011350:	4614      	mov	r4, r2
 8011352:	d103      	bne.n	801135c <_sungetc_r+0x10>
 8011354:	f04f 35ff 	mov.w	r5, #4294967295
 8011358:	4628      	mov	r0, r5
 801135a:	bd38      	pop	{r3, r4, r5, pc}
 801135c:	8993      	ldrh	r3, [r2, #12]
 801135e:	f023 0320 	bic.w	r3, r3, #32
 8011362:	8193      	strh	r3, [r2, #12]
 8011364:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011366:	6852      	ldr	r2, [r2, #4]
 8011368:	b2cd      	uxtb	r5, r1
 801136a:	b18b      	cbz	r3, 8011390 <_sungetc_r+0x44>
 801136c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801136e:	4293      	cmp	r3, r2
 8011370:	dd08      	ble.n	8011384 <_sungetc_r+0x38>
 8011372:	6823      	ldr	r3, [r4, #0]
 8011374:	1e5a      	subs	r2, r3, #1
 8011376:	6022      	str	r2, [r4, #0]
 8011378:	f803 5c01 	strb.w	r5, [r3, #-1]
 801137c:	6863      	ldr	r3, [r4, #4]
 801137e:	3301      	adds	r3, #1
 8011380:	6063      	str	r3, [r4, #4]
 8011382:	e7e9      	b.n	8011358 <_sungetc_r+0xc>
 8011384:	4621      	mov	r1, r4
 8011386:	f000 fbe8 	bl	8011b5a <__submore>
 801138a:	2800      	cmp	r0, #0
 801138c:	d0f1      	beq.n	8011372 <_sungetc_r+0x26>
 801138e:	e7e1      	b.n	8011354 <_sungetc_r+0x8>
 8011390:	6921      	ldr	r1, [r4, #16]
 8011392:	6823      	ldr	r3, [r4, #0]
 8011394:	b151      	cbz	r1, 80113ac <_sungetc_r+0x60>
 8011396:	4299      	cmp	r1, r3
 8011398:	d208      	bcs.n	80113ac <_sungetc_r+0x60>
 801139a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801139e:	42a9      	cmp	r1, r5
 80113a0:	d104      	bne.n	80113ac <_sungetc_r+0x60>
 80113a2:	3b01      	subs	r3, #1
 80113a4:	3201      	adds	r2, #1
 80113a6:	6023      	str	r3, [r4, #0]
 80113a8:	6062      	str	r2, [r4, #4]
 80113aa:	e7d5      	b.n	8011358 <_sungetc_r+0xc>
 80113ac:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80113b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113b4:	6363      	str	r3, [r4, #52]	; 0x34
 80113b6:	2303      	movs	r3, #3
 80113b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80113ba:	4623      	mov	r3, r4
 80113bc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80113c0:	6023      	str	r3, [r4, #0]
 80113c2:	2301      	movs	r3, #1
 80113c4:	e7dc      	b.n	8011380 <_sungetc_r+0x34>

080113c6 <__ssrefill_r>:
 80113c6:	b510      	push	{r4, lr}
 80113c8:	460c      	mov	r4, r1
 80113ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80113cc:	b169      	cbz	r1, 80113ea <__ssrefill_r+0x24>
 80113ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113d2:	4299      	cmp	r1, r3
 80113d4:	d001      	beq.n	80113da <__ssrefill_r+0x14>
 80113d6:	f7fe fa1d 	bl	800f814 <_free_r>
 80113da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80113dc:	6063      	str	r3, [r4, #4]
 80113de:	2000      	movs	r0, #0
 80113e0:	6360      	str	r0, [r4, #52]	; 0x34
 80113e2:	b113      	cbz	r3, 80113ea <__ssrefill_r+0x24>
 80113e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80113e6:	6023      	str	r3, [r4, #0]
 80113e8:	bd10      	pop	{r4, pc}
 80113ea:	6923      	ldr	r3, [r4, #16]
 80113ec:	6023      	str	r3, [r4, #0]
 80113ee:	2300      	movs	r3, #0
 80113f0:	6063      	str	r3, [r4, #4]
 80113f2:	89a3      	ldrh	r3, [r4, #12]
 80113f4:	f043 0320 	orr.w	r3, r3, #32
 80113f8:	81a3      	strh	r3, [r4, #12]
 80113fa:	f04f 30ff 	mov.w	r0, #4294967295
 80113fe:	e7f3      	b.n	80113e8 <__ssrefill_r+0x22>

08011400 <__ssvfiscanf_r>:
 8011400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011404:	460c      	mov	r4, r1
 8011406:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801140a:	2100      	movs	r1, #0
 801140c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8011410:	49a6      	ldr	r1, [pc, #664]	; (80116ac <__ssvfiscanf_r+0x2ac>)
 8011412:	91a0      	str	r1, [sp, #640]	; 0x280
 8011414:	f10d 0804 	add.w	r8, sp, #4
 8011418:	49a5      	ldr	r1, [pc, #660]	; (80116b0 <__ssvfiscanf_r+0x2b0>)
 801141a:	4fa6      	ldr	r7, [pc, #664]	; (80116b4 <__ssvfiscanf_r+0x2b4>)
 801141c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80116b8 <__ssvfiscanf_r+0x2b8>
 8011420:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011424:	4606      	mov	r6, r0
 8011426:	91a1      	str	r1, [sp, #644]	; 0x284
 8011428:	9300      	str	r3, [sp, #0]
 801142a:	7813      	ldrb	r3, [r2, #0]
 801142c:	2b00      	cmp	r3, #0
 801142e:	f000 815a 	beq.w	80116e6 <__ssvfiscanf_r+0x2e6>
 8011432:	5cf9      	ldrb	r1, [r7, r3]
 8011434:	f011 0108 	ands.w	r1, r1, #8
 8011438:	f102 0501 	add.w	r5, r2, #1
 801143c:	d019      	beq.n	8011472 <__ssvfiscanf_r+0x72>
 801143e:	6863      	ldr	r3, [r4, #4]
 8011440:	2b00      	cmp	r3, #0
 8011442:	dd0f      	ble.n	8011464 <__ssvfiscanf_r+0x64>
 8011444:	6823      	ldr	r3, [r4, #0]
 8011446:	781a      	ldrb	r2, [r3, #0]
 8011448:	5cba      	ldrb	r2, [r7, r2]
 801144a:	0712      	lsls	r2, r2, #28
 801144c:	d401      	bmi.n	8011452 <__ssvfiscanf_r+0x52>
 801144e:	462a      	mov	r2, r5
 8011450:	e7eb      	b.n	801142a <__ssvfiscanf_r+0x2a>
 8011452:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011454:	3201      	adds	r2, #1
 8011456:	9245      	str	r2, [sp, #276]	; 0x114
 8011458:	6862      	ldr	r2, [r4, #4]
 801145a:	3301      	adds	r3, #1
 801145c:	3a01      	subs	r2, #1
 801145e:	6062      	str	r2, [r4, #4]
 8011460:	6023      	str	r3, [r4, #0]
 8011462:	e7ec      	b.n	801143e <__ssvfiscanf_r+0x3e>
 8011464:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011466:	4621      	mov	r1, r4
 8011468:	4630      	mov	r0, r6
 801146a:	4798      	blx	r3
 801146c:	2800      	cmp	r0, #0
 801146e:	d0e9      	beq.n	8011444 <__ssvfiscanf_r+0x44>
 8011470:	e7ed      	b.n	801144e <__ssvfiscanf_r+0x4e>
 8011472:	2b25      	cmp	r3, #37	; 0x25
 8011474:	d012      	beq.n	801149c <__ssvfiscanf_r+0x9c>
 8011476:	469a      	mov	sl, r3
 8011478:	6863      	ldr	r3, [r4, #4]
 801147a:	2b00      	cmp	r3, #0
 801147c:	f340 8091 	ble.w	80115a2 <__ssvfiscanf_r+0x1a2>
 8011480:	6822      	ldr	r2, [r4, #0]
 8011482:	7813      	ldrb	r3, [r2, #0]
 8011484:	4553      	cmp	r3, sl
 8011486:	f040 812e 	bne.w	80116e6 <__ssvfiscanf_r+0x2e6>
 801148a:	6863      	ldr	r3, [r4, #4]
 801148c:	3b01      	subs	r3, #1
 801148e:	6063      	str	r3, [r4, #4]
 8011490:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8011492:	3201      	adds	r2, #1
 8011494:	3301      	adds	r3, #1
 8011496:	6022      	str	r2, [r4, #0]
 8011498:	9345      	str	r3, [sp, #276]	; 0x114
 801149a:	e7d8      	b.n	801144e <__ssvfiscanf_r+0x4e>
 801149c:	9141      	str	r1, [sp, #260]	; 0x104
 801149e:	9143      	str	r1, [sp, #268]	; 0x10c
 80114a0:	7853      	ldrb	r3, [r2, #1]
 80114a2:	2b2a      	cmp	r3, #42	; 0x2a
 80114a4:	bf02      	ittt	eq
 80114a6:	2310      	moveq	r3, #16
 80114a8:	1c95      	addeq	r5, r2, #2
 80114aa:	9341      	streq	r3, [sp, #260]	; 0x104
 80114ac:	220a      	movs	r2, #10
 80114ae:	46aa      	mov	sl, r5
 80114b0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80114b4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80114b8:	2b09      	cmp	r3, #9
 80114ba:	d91c      	bls.n	80114f6 <__ssvfiscanf_r+0xf6>
 80114bc:	487e      	ldr	r0, [pc, #504]	; (80116b8 <__ssvfiscanf_r+0x2b8>)
 80114be:	2203      	movs	r2, #3
 80114c0:	f7ee fe86 	bl	80001d0 <memchr>
 80114c4:	b138      	cbz	r0, 80114d6 <__ssvfiscanf_r+0xd6>
 80114c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80114c8:	eba0 0009 	sub.w	r0, r0, r9
 80114cc:	2301      	movs	r3, #1
 80114ce:	4083      	lsls	r3, r0
 80114d0:	4313      	orrs	r3, r2
 80114d2:	9341      	str	r3, [sp, #260]	; 0x104
 80114d4:	4655      	mov	r5, sl
 80114d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80114da:	2b78      	cmp	r3, #120	; 0x78
 80114dc:	d806      	bhi.n	80114ec <__ssvfiscanf_r+0xec>
 80114de:	2b57      	cmp	r3, #87	; 0x57
 80114e0:	d810      	bhi.n	8011504 <__ssvfiscanf_r+0x104>
 80114e2:	2b25      	cmp	r3, #37	; 0x25
 80114e4:	d0c7      	beq.n	8011476 <__ssvfiscanf_r+0x76>
 80114e6:	d857      	bhi.n	8011598 <__ssvfiscanf_r+0x198>
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d065      	beq.n	80115b8 <__ssvfiscanf_r+0x1b8>
 80114ec:	2303      	movs	r3, #3
 80114ee:	9347      	str	r3, [sp, #284]	; 0x11c
 80114f0:	230a      	movs	r3, #10
 80114f2:	9342      	str	r3, [sp, #264]	; 0x108
 80114f4:	e076      	b.n	80115e4 <__ssvfiscanf_r+0x1e4>
 80114f6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80114f8:	fb02 1103 	mla	r1, r2, r3, r1
 80114fc:	3930      	subs	r1, #48	; 0x30
 80114fe:	9143      	str	r1, [sp, #268]	; 0x10c
 8011500:	4655      	mov	r5, sl
 8011502:	e7d4      	b.n	80114ae <__ssvfiscanf_r+0xae>
 8011504:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8011508:	2a20      	cmp	r2, #32
 801150a:	d8ef      	bhi.n	80114ec <__ssvfiscanf_r+0xec>
 801150c:	a101      	add	r1, pc, #4	; (adr r1, 8011514 <__ssvfiscanf_r+0x114>)
 801150e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011512:	bf00      	nop
 8011514:	080115c7 	.word	0x080115c7
 8011518:	080114ed 	.word	0x080114ed
 801151c:	080114ed 	.word	0x080114ed
 8011520:	08011625 	.word	0x08011625
 8011524:	080114ed 	.word	0x080114ed
 8011528:	080114ed 	.word	0x080114ed
 801152c:	080114ed 	.word	0x080114ed
 8011530:	080114ed 	.word	0x080114ed
 8011534:	080114ed 	.word	0x080114ed
 8011538:	080114ed 	.word	0x080114ed
 801153c:	080114ed 	.word	0x080114ed
 8011540:	0801163b 	.word	0x0801163b
 8011544:	08011621 	.word	0x08011621
 8011548:	0801159f 	.word	0x0801159f
 801154c:	0801159f 	.word	0x0801159f
 8011550:	0801159f 	.word	0x0801159f
 8011554:	080114ed 	.word	0x080114ed
 8011558:	080115dd 	.word	0x080115dd
 801155c:	080114ed 	.word	0x080114ed
 8011560:	080114ed 	.word	0x080114ed
 8011564:	080114ed 	.word	0x080114ed
 8011568:	080114ed 	.word	0x080114ed
 801156c:	0801164b 	.word	0x0801164b
 8011570:	08011619 	.word	0x08011619
 8011574:	080115bf 	.word	0x080115bf
 8011578:	080114ed 	.word	0x080114ed
 801157c:	080114ed 	.word	0x080114ed
 8011580:	08011647 	.word	0x08011647
 8011584:	080114ed 	.word	0x080114ed
 8011588:	08011621 	.word	0x08011621
 801158c:	080114ed 	.word	0x080114ed
 8011590:	080114ed 	.word	0x080114ed
 8011594:	080115c7 	.word	0x080115c7
 8011598:	3b45      	subs	r3, #69	; 0x45
 801159a:	2b02      	cmp	r3, #2
 801159c:	d8a6      	bhi.n	80114ec <__ssvfiscanf_r+0xec>
 801159e:	2305      	movs	r3, #5
 80115a0:	e01f      	b.n	80115e2 <__ssvfiscanf_r+0x1e2>
 80115a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80115a4:	4621      	mov	r1, r4
 80115a6:	4630      	mov	r0, r6
 80115a8:	4798      	blx	r3
 80115aa:	2800      	cmp	r0, #0
 80115ac:	f43f af68 	beq.w	8011480 <__ssvfiscanf_r+0x80>
 80115b0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80115b2:	2800      	cmp	r0, #0
 80115b4:	f040 808d 	bne.w	80116d2 <__ssvfiscanf_r+0x2d2>
 80115b8:	f04f 30ff 	mov.w	r0, #4294967295
 80115bc:	e08f      	b.n	80116de <__ssvfiscanf_r+0x2de>
 80115be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80115c0:	f042 0220 	orr.w	r2, r2, #32
 80115c4:	9241      	str	r2, [sp, #260]	; 0x104
 80115c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80115c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80115cc:	9241      	str	r2, [sp, #260]	; 0x104
 80115ce:	2210      	movs	r2, #16
 80115d0:	2b6f      	cmp	r3, #111	; 0x6f
 80115d2:	9242      	str	r2, [sp, #264]	; 0x108
 80115d4:	bf34      	ite	cc
 80115d6:	2303      	movcc	r3, #3
 80115d8:	2304      	movcs	r3, #4
 80115da:	e002      	b.n	80115e2 <__ssvfiscanf_r+0x1e2>
 80115dc:	2300      	movs	r3, #0
 80115de:	9342      	str	r3, [sp, #264]	; 0x108
 80115e0:	2303      	movs	r3, #3
 80115e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80115e4:	6863      	ldr	r3, [r4, #4]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	dd3d      	ble.n	8011666 <__ssvfiscanf_r+0x266>
 80115ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80115ec:	0659      	lsls	r1, r3, #25
 80115ee:	d404      	bmi.n	80115fa <__ssvfiscanf_r+0x1fa>
 80115f0:	6823      	ldr	r3, [r4, #0]
 80115f2:	781a      	ldrb	r2, [r3, #0]
 80115f4:	5cba      	ldrb	r2, [r7, r2]
 80115f6:	0712      	lsls	r2, r2, #28
 80115f8:	d43c      	bmi.n	8011674 <__ssvfiscanf_r+0x274>
 80115fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80115fc:	2b02      	cmp	r3, #2
 80115fe:	dc4b      	bgt.n	8011698 <__ssvfiscanf_r+0x298>
 8011600:	466b      	mov	r3, sp
 8011602:	4622      	mov	r2, r4
 8011604:	a941      	add	r1, sp, #260	; 0x104
 8011606:	4630      	mov	r0, r6
 8011608:	f000 f872 	bl	80116f0 <_scanf_chars>
 801160c:	2801      	cmp	r0, #1
 801160e:	d06a      	beq.n	80116e6 <__ssvfiscanf_r+0x2e6>
 8011610:	2802      	cmp	r0, #2
 8011612:	f47f af1c 	bne.w	801144e <__ssvfiscanf_r+0x4e>
 8011616:	e7cb      	b.n	80115b0 <__ssvfiscanf_r+0x1b0>
 8011618:	2308      	movs	r3, #8
 801161a:	9342      	str	r3, [sp, #264]	; 0x108
 801161c:	2304      	movs	r3, #4
 801161e:	e7e0      	b.n	80115e2 <__ssvfiscanf_r+0x1e2>
 8011620:	220a      	movs	r2, #10
 8011622:	e7d5      	b.n	80115d0 <__ssvfiscanf_r+0x1d0>
 8011624:	4629      	mov	r1, r5
 8011626:	4640      	mov	r0, r8
 8011628:	f000 fa5e 	bl	8011ae8 <__sccl>
 801162c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801162e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011632:	9341      	str	r3, [sp, #260]	; 0x104
 8011634:	4605      	mov	r5, r0
 8011636:	2301      	movs	r3, #1
 8011638:	e7d3      	b.n	80115e2 <__ssvfiscanf_r+0x1e2>
 801163a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801163c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011640:	9341      	str	r3, [sp, #260]	; 0x104
 8011642:	2300      	movs	r3, #0
 8011644:	e7cd      	b.n	80115e2 <__ssvfiscanf_r+0x1e2>
 8011646:	2302      	movs	r3, #2
 8011648:	e7cb      	b.n	80115e2 <__ssvfiscanf_r+0x1e2>
 801164a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801164c:	06c3      	lsls	r3, r0, #27
 801164e:	f53f aefe 	bmi.w	801144e <__ssvfiscanf_r+0x4e>
 8011652:	9b00      	ldr	r3, [sp, #0]
 8011654:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011656:	1d19      	adds	r1, r3, #4
 8011658:	9100      	str	r1, [sp, #0]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	07c0      	lsls	r0, r0, #31
 801165e:	bf4c      	ite	mi
 8011660:	801a      	strhmi	r2, [r3, #0]
 8011662:	601a      	strpl	r2, [r3, #0]
 8011664:	e6f3      	b.n	801144e <__ssvfiscanf_r+0x4e>
 8011666:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011668:	4621      	mov	r1, r4
 801166a:	4630      	mov	r0, r6
 801166c:	4798      	blx	r3
 801166e:	2800      	cmp	r0, #0
 8011670:	d0bb      	beq.n	80115ea <__ssvfiscanf_r+0x1ea>
 8011672:	e79d      	b.n	80115b0 <__ssvfiscanf_r+0x1b0>
 8011674:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011676:	3201      	adds	r2, #1
 8011678:	9245      	str	r2, [sp, #276]	; 0x114
 801167a:	6862      	ldr	r2, [r4, #4]
 801167c:	3a01      	subs	r2, #1
 801167e:	2a00      	cmp	r2, #0
 8011680:	6062      	str	r2, [r4, #4]
 8011682:	dd02      	ble.n	801168a <__ssvfiscanf_r+0x28a>
 8011684:	3301      	adds	r3, #1
 8011686:	6023      	str	r3, [r4, #0]
 8011688:	e7b2      	b.n	80115f0 <__ssvfiscanf_r+0x1f0>
 801168a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801168c:	4621      	mov	r1, r4
 801168e:	4630      	mov	r0, r6
 8011690:	4798      	blx	r3
 8011692:	2800      	cmp	r0, #0
 8011694:	d0ac      	beq.n	80115f0 <__ssvfiscanf_r+0x1f0>
 8011696:	e78b      	b.n	80115b0 <__ssvfiscanf_r+0x1b0>
 8011698:	2b04      	cmp	r3, #4
 801169a:	dc0f      	bgt.n	80116bc <__ssvfiscanf_r+0x2bc>
 801169c:	466b      	mov	r3, sp
 801169e:	4622      	mov	r2, r4
 80116a0:	a941      	add	r1, sp, #260	; 0x104
 80116a2:	4630      	mov	r0, r6
 80116a4:	f000 f87e 	bl	80117a4 <_scanf_i>
 80116a8:	e7b0      	b.n	801160c <__ssvfiscanf_r+0x20c>
 80116aa:	bf00      	nop
 80116ac:	0801134d 	.word	0x0801134d
 80116b0:	080113c7 	.word	0x080113c7
 80116b4:	080145b1 	.word	0x080145b1
 80116b8:	080146b7 	.word	0x080146b7
 80116bc:	4b0b      	ldr	r3, [pc, #44]	; (80116ec <__ssvfiscanf_r+0x2ec>)
 80116be:	2b00      	cmp	r3, #0
 80116c0:	f43f aec5 	beq.w	801144e <__ssvfiscanf_r+0x4e>
 80116c4:	466b      	mov	r3, sp
 80116c6:	4622      	mov	r2, r4
 80116c8:	a941      	add	r1, sp, #260	; 0x104
 80116ca:	4630      	mov	r0, r6
 80116cc:	f7fc fdbc 	bl	800e248 <_scanf_float>
 80116d0:	e79c      	b.n	801160c <__ssvfiscanf_r+0x20c>
 80116d2:	89a3      	ldrh	r3, [r4, #12]
 80116d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80116d8:	bf18      	it	ne
 80116da:	f04f 30ff 	movne.w	r0, #4294967295
 80116de:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80116e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116e6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80116e8:	e7f9      	b.n	80116de <__ssvfiscanf_r+0x2de>
 80116ea:	bf00      	nop
 80116ec:	0800e249 	.word	0x0800e249

080116f0 <_scanf_chars>:
 80116f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116f4:	4615      	mov	r5, r2
 80116f6:	688a      	ldr	r2, [r1, #8]
 80116f8:	4680      	mov	r8, r0
 80116fa:	460c      	mov	r4, r1
 80116fc:	b932      	cbnz	r2, 801170c <_scanf_chars+0x1c>
 80116fe:	698a      	ldr	r2, [r1, #24]
 8011700:	2a00      	cmp	r2, #0
 8011702:	bf0c      	ite	eq
 8011704:	2201      	moveq	r2, #1
 8011706:	f04f 32ff 	movne.w	r2, #4294967295
 801170a:	608a      	str	r2, [r1, #8]
 801170c:	6822      	ldr	r2, [r4, #0]
 801170e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80117a0 <_scanf_chars+0xb0>
 8011712:	06d1      	lsls	r1, r2, #27
 8011714:	bf5f      	itttt	pl
 8011716:	681a      	ldrpl	r2, [r3, #0]
 8011718:	1d11      	addpl	r1, r2, #4
 801171a:	6019      	strpl	r1, [r3, #0]
 801171c:	6816      	ldrpl	r6, [r2, #0]
 801171e:	2700      	movs	r7, #0
 8011720:	69a0      	ldr	r0, [r4, #24]
 8011722:	b188      	cbz	r0, 8011748 <_scanf_chars+0x58>
 8011724:	2801      	cmp	r0, #1
 8011726:	d107      	bne.n	8011738 <_scanf_chars+0x48>
 8011728:	682a      	ldr	r2, [r5, #0]
 801172a:	7811      	ldrb	r1, [r2, #0]
 801172c:	6962      	ldr	r2, [r4, #20]
 801172e:	5c52      	ldrb	r2, [r2, r1]
 8011730:	b952      	cbnz	r2, 8011748 <_scanf_chars+0x58>
 8011732:	2f00      	cmp	r7, #0
 8011734:	d031      	beq.n	801179a <_scanf_chars+0xaa>
 8011736:	e022      	b.n	801177e <_scanf_chars+0x8e>
 8011738:	2802      	cmp	r0, #2
 801173a:	d120      	bne.n	801177e <_scanf_chars+0x8e>
 801173c:	682b      	ldr	r3, [r5, #0]
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011744:	071b      	lsls	r3, r3, #28
 8011746:	d41a      	bmi.n	801177e <_scanf_chars+0x8e>
 8011748:	6823      	ldr	r3, [r4, #0]
 801174a:	06da      	lsls	r2, r3, #27
 801174c:	bf5e      	ittt	pl
 801174e:	682b      	ldrpl	r3, [r5, #0]
 8011750:	781b      	ldrbpl	r3, [r3, #0]
 8011752:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011756:	682a      	ldr	r2, [r5, #0]
 8011758:	686b      	ldr	r3, [r5, #4]
 801175a:	3201      	adds	r2, #1
 801175c:	602a      	str	r2, [r5, #0]
 801175e:	68a2      	ldr	r2, [r4, #8]
 8011760:	3b01      	subs	r3, #1
 8011762:	3a01      	subs	r2, #1
 8011764:	606b      	str	r3, [r5, #4]
 8011766:	3701      	adds	r7, #1
 8011768:	60a2      	str	r2, [r4, #8]
 801176a:	b142      	cbz	r2, 801177e <_scanf_chars+0x8e>
 801176c:	2b00      	cmp	r3, #0
 801176e:	dcd7      	bgt.n	8011720 <_scanf_chars+0x30>
 8011770:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011774:	4629      	mov	r1, r5
 8011776:	4640      	mov	r0, r8
 8011778:	4798      	blx	r3
 801177a:	2800      	cmp	r0, #0
 801177c:	d0d0      	beq.n	8011720 <_scanf_chars+0x30>
 801177e:	6823      	ldr	r3, [r4, #0]
 8011780:	f013 0310 	ands.w	r3, r3, #16
 8011784:	d105      	bne.n	8011792 <_scanf_chars+0xa2>
 8011786:	68e2      	ldr	r2, [r4, #12]
 8011788:	3201      	adds	r2, #1
 801178a:	60e2      	str	r2, [r4, #12]
 801178c:	69a2      	ldr	r2, [r4, #24]
 801178e:	b102      	cbz	r2, 8011792 <_scanf_chars+0xa2>
 8011790:	7033      	strb	r3, [r6, #0]
 8011792:	6923      	ldr	r3, [r4, #16]
 8011794:	443b      	add	r3, r7
 8011796:	6123      	str	r3, [r4, #16]
 8011798:	2000      	movs	r0, #0
 801179a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801179e:	bf00      	nop
 80117a0:	080145b1 	.word	0x080145b1

080117a4 <_scanf_i>:
 80117a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117a8:	4698      	mov	r8, r3
 80117aa:	4b74      	ldr	r3, [pc, #464]	; (801197c <_scanf_i+0x1d8>)
 80117ac:	460c      	mov	r4, r1
 80117ae:	4682      	mov	sl, r0
 80117b0:	4616      	mov	r6, r2
 80117b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80117b6:	b087      	sub	sp, #28
 80117b8:	ab03      	add	r3, sp, #12
 80117ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80117be:	4b70      	ldr	r3, [pc, #448]	; (8011980 <_scanf_i+0x1dc>)
 80117c0:	69a1      	ldr	r1, [r4, #24]
 80117c2:	4a70      	ldr	r2, [pc, #448]	; (8011984 <_scanf_i+0x1e0>)
 80117c4:	2903      	cmp	r1, #3
 80117c6:	bf18      	it	ne
 80117c8:	461a      	movne	r2, r3
 80117ca:	68a3      	ldr	r3, [r4, #8]
 80117cc:	9201      	str	r2, [sp, #4]
 80117ce:	1e5a      	subs	r2, r3, #1
 80117d0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80117d4:	bf88      	it	hi
 80117d6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80117da:	4627      	mov	r7, r4
 80117dc:	bf82      	ittt	hi
 80117de:	eb03 0905 	addhi.w	r9, r3, r5
 80117e2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80117e6:	60a3      	strhi	r3, [r4, #8]
 80117e8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80117ec:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80117f0:	bf98      	it	ls
 80117f2:	f04f 0900 	movls.w	r9, #0
 80117f6:	6023      	str	r3, [r4, #0]
 80117f8:	463d      	mov	r5, r7
 80117fa:	f04f 0b00 	mov.w	fp, #0
 80117fe:	6831      	ldr	r1, [r6, #0]
 8011800:	ab03      	add	r3, sp, #12
 8011802:	7809      	ldrb	r1, [r1, #0]
 8011804:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011808:	2202      	movs	r2, #2
 801180a:	f7ee fce1 	bl	80001d0 <memchr>
 801180e:	b328      	cbz	r0, 801185c <_scanf_i+0xb8>
 8011810:	f1bb 0f01 	cmp.w	fp, #1
 8011814:	d159      	bne.n	80118ca <_scanf_i+0x126>
 8011816:	6862      	ldr	r2, [r4, #4]
 8011818:	b92a      	cbnz	r2, 8011826 <_scanf_i+0x82>
 801181a:	6822      	ldr	r2, [r4, #0]
 801181c:	2308      	movs	r3, #8
 801181e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011822:	6063      	str	r3, [r4, #4]
 8011824:	6022      	str	r2, [r4, #0]
 8011826:	6822      	ldr	r2, [r4, #0]
 8011828:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801182c:	6022      	str	r2, [r4, #0]
 801182e:	68a2      	ldr	r2, [r4, #8]
 8011830:	1e51      	subs	r1, r2, #1
 8011832:	60a1      	str	r1, [r4, #8]
 8011834:	b192      	cbz	r2, 801185c <_scanf_i+0xb8>
 8011836:	6832      	ldr	r2, [r6, #0]
 8011838:	1c51      	adds	r1, r2, #1
 801183a:	6031      	str	r1, [r6, #0]
 801183c:	7812      	ldrb	r2, [r2, #0]
 801183e:	f805 2b01 	strb.w	r2, [r5], #1
 8011842:	6872      	ldr	r2, [r6, #4]
 8011844:	3a01      	subs	r2, #1
 8011846:	2a00      	cmp	r2, #0
 8011848:	6072      	str	r2, [r6, #4]
 801184a:	dc07      	bgt.n	801185c <_scanf_i+0xb8>
 801184c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011850:	4631      	mov	r1, r6
 8011852:	4650      	mov	r0, sl
 8011854:	4790      	blx	r2
 8011856:	2800      	cmp	r0, #0
 8011858:	f040 8085 	bne.w	8011966 <_scanf_i+0x1c2>
 801185c:	f10b 0b01 	add.w	fp, fp, #1
 8011860:	f1bb 0f03 	cmp.w	fp, #3
 8011864:	d1cb      	bne.n	80117fe <_scanf_i+0x5a>
 8011866:	6863      	ldr	r3, [r4, #4]
 8011868:	b90b      	cbnz	r3, 801186e <_scanf_i+0xca>
 801186a:	230a      	movs	r3, #10
 801186c:	6063      	str	r3, [r4, #4]
 801186e:	6863      	ldr	r3, [r4, #4]
 8011870:	4945      	ldr	r1, [pc, #276]	; (8011988 <_scanf_i+0x1e4>)
 8011872:	6960      	ldr	r0, [r4, #20]
 8011874:	1ac9      	subs	r1, r1, r3
 8011876:	f000 f937 	bl	8011ae8 <__sccl>
 801187a:	f04f 0b00 	mov.w	fp, #0
 801187e:	68a3      	ldr	r3, [r4, #8]
 8011880:	6822      	ldr	r2, [r4, #0]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d03d      	beq.n	8011902 <_scanf_i+0x15e>
 8011886:	6831      	ldr	r1, [r6, #0]
 8011888:	6960      	ldr	r0, [r4, #20]
 801188a:	f891 c000 	ldrb.w	ip, [r1]
 801188e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011892:	2800      	cmp	r0, #0
 8011894:	d035      	beq.n	8011902 <_scanf_i+0x15e>
 8011896:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801189a:	d124      	bne.n	80118e6 <_scanf_i+0x142>
 801189c:	0510      	lsls	r0, r2, #20
 801189e:	d522      	bpl.n	80118e6 <_scanf_i+0x142>
 80118a0:	f10b 0b01 	add.w	fp, fp, #1
 80118a4:	f1b9 0f00 	cmp.w	r9, #0
 80118a8:	d003      	beq.n	80118b2 <_scanf_i+0x10e>
 80118aa:	3301      	adds	r3, #1
 80118ac:	f109 39ff 	add.w	r9, r9, #4294967295
 80118b0:	60a3      	str	r3, [r4, #8]
 80118b2:	6873      	ldr	r3, [r6, #4]
 80118b4:	3b01      	subs	r3, #1
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	6073      	str	r3, [r6, #4]
 80118ba:	dd1b      	ble.n	80118f4 <_scanf_i+0x150>
 80118bc:	6833      	ldr	r3, [r6, #0]
 80118be:	3301      	adds	r3, #1
 80118c0:	6033      	str	r3, [r6, #0]
 80118c2:	68a3      	ldr	r3, [r4, #8]
 80118c4:	3b01      	subs	r3, #1
 80118c6:	60a3      	str	r3, [r4, #8]
 80118c8:	e7d9      	b.n	801187e <_scanf_i+0xda>
 80118ca:	f1bb 0f02 	cmp.w	fp, #2
 80118ce:	d1ae      	bne.n	801182e <_scanf_i+0x8a>
 80118d0:	6822      	ldr	r2, [r4, #0]
 80118d2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80118d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80118da:	d1bf      	bne.n	801185c <_scanf_i+0xb8>
 80118dc:	2310      	movs	r3, #16
 80118de:	6063      	str	r3, [r4, #4]
 80118e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80118e4:	e7a2      	b.n	801182c <_scanf_i+0x88>
 80118e6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80118ea:	6022      	str	r2, [r4, #0]
 80118ec:	780b      	ldrb	r3, [r1, #0]
 80118ee:	f805 3b01 	strb.w	r3, [r5], #1
 80118f2:	e7de      	b.n	80118b2 <_scanf_i+0x10e>
 80118f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80118f8:	4631      	mov	r1, r6
 80118fa:	4650      	mov	r0, sl
 80118fc:	4798      	blx	r3
 80118fe:	2800      	cmp	r0, #0
 8011900:	d0df      	beq.n	80118c2 <_scanf_i+0x11e>
 8011902:	6823      	ldr	r3, [r4, #0]
 8011904:	05d9      	lsls	r1, r3, #23
 8011906:	d50d      	bpl.n	8011924 <_scanf_i+0x180>
 8011908:	42bd      	cmp	r5, r7
 801190a:	d909      	bls.n	8011920 <_scanf_i+0x17c>
 801190c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011910:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011914:	4632      	mov	r2, r6
 8011916:	4650      	mov	r0, sl
 8011918:	4798      	blx	r3
 801191a:	f105 39ff 	add.w	r9, r5, #4294967295
 801191e:	464d      	mov	r5, r9
 8011920:	42bd      	cmp	r5, r7
 8011922:	d028      	beq.n	8011976 <_scanf_i+0x1d2>
 8011924:	6822      	ldr	r2, [r4, #0]
 8011926:	f012 0210 	ands.w	r2, r2, #16
 801192a:	d113      	bne.n	8011954 <_scanf_i+0x1b0>
 801192c:	702a      	strb	r2, [r5, #0]
 801192e:	6863      	ldr	r3, [r4, #4]
 8011930:	9e01      	ldr	r6, [sp, #4]
 8011932:	4639      	mov	r1, r7
 8011934:	4650      	mov	r0, sl
 8011936:	47b0      	blx	r6
 8011938:	f8d8 3000 	ldr.w	r3, [r8]
 801193c:	6821      	ldr	r1, [r4, #0]
 801193e:	1d1a      	adds	r2, r3, #4
 8011940:	f8c8 2000 	str.w	r2, [r8]
 8011944:	f011 0f20 	tst.w	r1, #32
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	d00f      	beq.n	801196c <_scanf_i+0x1c8>
 801194c:	6018      	str	r0, [r3, #0]
 801194e:	68e3      	ldr	r3, [r4, #12]
 8011950:	3301      	adds	r3, #1
 8011952:	60e3      	str	r3, [r4, #12]
 8011954:	6923      	ldr	r3, [r4, #16]
 8011956:	1bed      	subs	r5, r5, r7
 8011958:	445d      	add	r5, fp
 801195a:	442b      	add	r3, r5
 801195c:	6123      	str	r3, [r4, #16]
 801195e:	2000      	movs	r0, #0
 8011960:	b007      	add	sp, #28
 8011962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011966:	f04f 0b00 	mov.w	fp, #0
 801196a:	e7ca      	b.n	8011902 <_scanf_i+0x15e>
 801196c:	07ca      	lsls	r2, r1, #31
 801196e:	bf4c      	ite	mi
 8011970:	8018      	strhmi	r0, [r3, #0]
 8011972:	6018      	strpl	r0, [r3, #0]
 8011974:	e7eb      	b.n	801194e <_scanf_i+0x1aa>
 8011976:	2001      	movs	r0, #1
 8011978:	e7f2      	b.n	8011960 <_scanf_i+0x1bc>
 801197a:	bf00      	nop
 801197c:	080142e8 	.word	0x080142e8
 8011980:	080124d5 	.word	0x080124d5
 8011984:	08011099 	.word	0x08011099
 8011988:	080146d2 	.word	0x080146d2

0801198c <__sflush_r>:
 801198c:	898a      	ldrh	r2, [r1, #12]
 801198e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011992:	4605      	mov	r5, r0
 8011994:	0710      	lsls	r0, r2, #28
 8011996:	460c      	mov	r4, r1
 8011998:	d458      	bmi.n	8011a4c <__sflush_r+0xc0>
 801199a:	684b      	ldr	r3, [r1, #4]
 801199c:	2b00      	cmp	r3, #0
 801199e:	dc05      	bgt.n	80119ac <__sflush_r+0x20>
 80119a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	dc02      	bgt.n	80119ac <__sflush_r+0x20>
 80119a6:	2000      	movs	r0, #0
 80119a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119ae:	2e00      	cmp	r6, #0
 80119b0:	d0f9      	beq.n	80119a6 <__sflush_r+0x1a>
 80119b2:	2300      	movs	r3, #0
 80119b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80119b8:	682f      	ldr	r7, [r5, #0]
 80119ba:	6a21      	ldr	r1, [r4, #32]
 80119bc:	602b      	str	r3, [r5, #0]
 80119be:	d032      	beq.n	8011a26 <__sflush_r+0x9a>
 80119c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80119c2:	89a3      	ldrh	r3, [r4, #12]
 80119c4:	075a      	lsls	r2, r3, #29
 80119c6:	d505      	bpl.n	80119d4 <__sflush_r+0x48>
 80119c8:	6863      	ldr	r3, [r4, #4]
 80119ca:	1ac0      	subs	r0, r0, r3
 80119cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119ce:	b10b      	cbz	r3, 80119d4 <__sflush_r+0x48>
 80119d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80119d2:	1ac0      	subs	r0, r0, r3
 80119d4:	2300      	movs	r3, #0
 80119d6:	4602      	mov	r2, r0
 80119d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119da:	6a21      	ldr	r1, [r4, #32]
 80119dc:	4628      	mov	r0, r5
 80119de:	47b0      	blx	r6
 80119e0:	1c43      	adds	r3, r0, #1
 80119e2:	89a3      	ldrh	r3, [r4, #12]
 80119e4:	d106      	bne.n	80119f4 <__sflush_r+0x68>
 80119e6:	6829      	ldr	r1, [r5, #0]
 80119e8:	291d      	cmp	r1, #29
 80119ea:	d82b      	bhi.n	8011a44 <__sflush_r+0xb8>
 80119ec:	4a29      	ldr	r2, [pc, #164]	; (8011a94 <__sflush_r+0x108>)
 80119ee:	410a      	asrs	r2, r1
 80119f0:	07d6      	lsls	r6, r2, #31
 80119f2:	d427      	bmi.n	8011a44 <__sflush_r+0xb8>
 80119f4:	2200      	movs	r2, #0
 80119f6:	6062      	str	r2, [r4, #4]
 80119f8:	04d9      	lsls	r1, r3, #19
 80119fa:	6922      	ldr	r2, [r4, #16]
 80119fc:	6022      	str	r2, [r4, #0]
 80119fe:	d504      	bpl.n	8011a0a <__sflush_r+0x7e>
 8011a00:	1c42      	adds	r2, r0, #1
 8011a02:	d101      	bne.n	8011a08 <__sflush_r+0x7c>
 8011a04:	682b      	ldr	r3, [r5, #0]
 8011a06:	b903      	cbnz	r3, 8011a0a <__sflush_r+0x7e>
 8011a08:	6560      	str	r0, [r4, #84]	; 0x54
 8011a0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a0c:	602f      	str	r7, [r5, #0]
 8011a0e:	2900      	cmp	r1, #0
 8011a10:	d0c9      	beq.n	80119a6 <__sflush_r+0x1a>
 8011a12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a16:	4299      	cmp	r1, r3
 8011a18:	d002      	beq.n	8011a20 <__sflush_r+0x94>
 8011a1a:	4628      	mov	r0, r5
 8011a1c:	f7fd fefa 	bl	800f814 <_free_r>
 8011a20:	2000      	movs	r0, #0
 8011a22:	6360      	str	r0, [r4, #52]	; 0x34
 8011a24:	e7c0      	b.n	80119a8 <__sflush_r+0x1c>
 8011a26:	2301      	movs	r3, #1
 8011a28:	4628      	mov	r0, r5
 8011a2a:	47b0      	blx	r6
 8011a2c:	1c41      	adds	r1, r0, #1
 8011a2e:	d1c8      	bne.n	80119c2 <__sflush_r+0x36>
 8011a30:	682b      	ldr	r3, [r5, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d0c5      	beq.n	80119c2 <__sflush_r+0x36>
 8011a36:	2b1d      	cmp	r3, #29
 8011a38:	d001      	beq.n	8011a3e <__sflush_r+0xb2>
 8011a3a:	2b16      	cmp	r3, #22
 8011a3c:	d101      	bne.n	8011a42 <__sflush_r+0xb6>
 8011a3e:	602f      	str	r7, [r5, #0]
 8011a40:	e7b1      	b.n	80119a6 <__sflush_r+0x1a>
 8011a42:	89a3      	ldrh	r3, [r4, #12]
 8011a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a48:	81a3      	strh	r3, [r4, #12]
 8011a4a:	e7ad      	b.n	80119a8 <__sflush_r+0x1c>
 8011a4c:	690f      	ldr	r7, [r1, #16]
 8011a4e:	2f00      	cmp	r7, #0
 8011a50:	d0a9      	beq.n	80119a6 <__sflush_r+0x1a>
 8011a52:	0793      	lsls	r3, r2, #30
 8011a54:	680e      	ldr	r6, [r1, #0]
 8011a56:	bf08      	it	eq
 8011a58:	694b      	ldreq	r3, [r1, #20]
 8011a5a:	600f      	str	r7, [r1, #0]
 8011a5c:	bf18      	it	ne
 8011a5e:	2300      	movne	r3, #0
 8011a60:	eba6 0807 	sub.w	r8, r6, r7
 8011a64:	608b      	str	r3, [r1, #8]
 8011a66:	f1b8 0f00 	cmp.w	r8, #0
 8011a6a:	dd9c      	ble.n	80119a6 <__sflush_r+0x1a>
 8011a6c:	6a21      	ldr	r1, [r4, #32]
 8011a6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011a70:	4643      	mov	r3, r8
 8011a72:	463a      	mov	r2, r7
 8011a74:	4628      	mov	r0, r5
 8011a76:	47b0      	blx	r6
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	dc06      	bgt.n	8011a8a <__sflush_r+0xfe>
 8011a7c:	89a3      	ldrh	r3, [r4, #12]
 8011a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a82:	81a3      	strh	r3, [r4, #12]
 8011a84:	f04f 30ff 	mov.w	r0, #4294967295
 8011a88:	e78e      	b.n	80119a8 <__sflush_r+0x1c>
 8011a8a:	4407      	add	r7, r0
 8011a8c:	eba8 0800 	sub.w	r8, r8, r0
 8011a90:	e7e9      	b.n	8011a66 <__sflush_r+0xda>
 8011a92:	bf00      	nop
 8011a94:	dfbffffe 	.word	0xdfbffffe

08011a98 <_fflush_r>:
 8011a98:	b538      	push	{r3, r4, r5, lr}
 8011a9a:	690b      	ldr	r3, [r1, #16]
 8011a9c:	4605      	mov	r5, r0
 8011a9e:	460c      	mov	r4, r1
 8011aa0:	b913      	cbnz	r3, 8011aa8 <_fflush_r+0x10>
 8011aa2:	2500      	movs	r5, #0
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	bd38      	pop	{r3, r4, r5, pc}
 8011aa8:	b118      	cbz	r0, 8011ab2 <_fflush_r+0x1a>
 8011aaa:	6a03      	ldr	r3, [r0, #32]
 8011aac:	b90b      	cbnz	r3, 8011ab2 <_fflush_r+0x1a>
 8011aae:	f7fc fe67 	bl	800e780 <__sinit>
 8011ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d0f3      	beq.n	8011aa2 <_fflush_r+0xa>
 8011aba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011abc:	07d0      	lsls	r0, r2, #31
 8011abe:	d404      	bmi.n	8011aca <_fflush_r+0x32>
 8011ac0:	0599      	lsls	r1, r3, #22
 8011ac2:	d402      	bmi.n	8011aca <_fflush_r+0x32>
 8011ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ac6:	f7fd f80c 	bl	800eae2 <__retarget_lock_acquire_recursive>
 8011aca:	4628      	mov	r0, r5
 8011acc:	4621      	mov	r1, r4
 8011ace:	f7ff ff5d 	bl	801198c <__sflush_r>
 8011ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ad4:	07da      	lsls	r2, r3, #31
 8011ad6:	4605      	mov	r5, r0
 8011ad8:	d4e4      	bmi.n	8011aa4 <_fflush_r+0xc>
 8011ada:	89a3      	ldrh	r3, [r4, #12]
 8011adc:	059b      	lsls	r3, r3, #22
 8011ade:	d4e1      	bmi.n	8011aa4 <_fflush_r+0xc>
 8011ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ae2:	f7fc ffff 	bl	800eae4 <__retarget_lock_release_recursive>
 8011ae6:	e7dd      	b.n	8011aa4 <_fflush_r+0xc>

08011ae8 <__sccl>:
 8011ae8:	b570      	push	{r4, r5, r6, lr}
 8011aea:	780b      	ldrb	r3, [r1, #0]
 8011aec:	4604      	mov	r4, r0
 8011aee:	2b5e      	cmp	r3, #94	; 0x5e
 8011af0:	bf0b      	itete	eq
 8011af2:	784b      	ldrbeq	r3, [r1, #1]
 8011af4:	1c4a      	addne	r2, r1, #1
 8011af6:	1c8a      	addeq	r2, r1, #2
 8011af8:	2100      	movne	r1, #0
 8011afa:	bf08      	it	eq
 8011afc:	2101      	moveq	r1, #1
 8011afe:	3801      	subs	r0, #1
 8011b00:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011b04:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011b08:	42a8      	cmp	r0, r5
 8011b0a:	d1fb      	bne.n	8011b04 <__sccl+0x1c>
 8011b0c:	b90b      	cbnz	r3, 8011b12 <__sccl+0x2a>
 8011b0e:	1e50      	subs	r0, r2, #1
 8011b10:	bd70      	pop	{r4, r5, r6, pc}
 8011b12:	f081 0101 	eor.w	r1, r1, #1
 8011b16:	54e1      	strb	r1, [r4, r3]
 8011b18:	4610      	mov	r0, r2
 8011b1a:	4602      	mov	r2, r0
 8011b1c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011b20:	2d2d      	cmp	r5, #45	; 0x2d
 8011b22:	d005      	beq.n	8011b30 <__sccl+0x48>
 8011b24:	2d5d      	cmp	r5, #93	; 0x5d
 8011b26:	d016      	beq.n	8011b56 <__sccl+0x6e>
 8011b28:	2d00      	cmp	r5, #0
 8011b2a:	d0f1      	beq.n	8011b10 <__sccl+0x28>
 8011b2c:	462b      	mov	r3, r5
 8011b2e:	e7f2      	b.n	8011b16 <__sccl+0x2e>
 8011b30:	7846      	ldrb	r6, [r0, #1]
 8011b32:	2e5d      	cmp	r6, #93	; 0x5d
 8011b34:	d0fa      	beq.n	8011b2c <__sccl+0x44>
 8011b36:	42b3      	cmp	r3, r6
 8011b38:	dcf8      	bgt.n	8011b2c <__sccl+0x44>
 8011b3a:	3002      	adds	r0, #2
 8011b3c:	461a      	mov	r2, r3
 8011b3e:	3201      	adds	r2, #1
 8011b40:	4296      	cmp	r6, r2
 8011b42:	54a1      	strb	r1, [r4, r2]
 8011b44:	dcfb      	bgt.n	8011b3e <__sccl+0x56>
 8011b46:	1af2      	subs	r2, r6, r3
 8011b48:	3a01      	subs	r2, #1
 8011b4a:	1c5d      	adds	r5, r3, #1
 8011b4c:	42b3      	cmp	r3, r6
 8011b4e:	bfa8      	it	ge
 8011b50:	2200      	movge	r2, #0
 8011b52:	18ab      	adds	r3, r5, r2
 8011b54:	e7e1      	b.n	8011b1a <__sccl+0x32>
 8011b56:	4610      	mov	r0, r2
 8011b58:	e7da      	b.n	8011b10 <__sccl+0x28>

08011b5a <__submore>:
 8011b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b5e:	460c      	mov	r4, r1
 8011b60:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011b62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b66:	4299      	cmp	r1, r3
 8011b68:	d11d      	bne.n	8011ba6 <__submore+0x4c>
 8011b6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011b6e:	f7fd fec5 	bl	800f8fc <_malloc_r>
 8011b72:	b918      	cbnz	r0, 8011b7c <__submore+0x22>
 8011b74:	f04f 30ff 	mov.w	r0, #4294967295
 8011b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b80:	63a3      	str	r3, [r4, #56]	; 0x38
 8011b82:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011b86:	6360      	str	r0, [r4, #52]	; 0x34
 8011b88:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011b8c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011b90:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8011b94:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011b98:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8011b9c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011ba0:	6020      	str	r0, [r4, #0]
 8011ba2:	2000      	movs	r0, #0
 8011ba4:	e7e8      	b.n	8011b78 <__submore+0x1e>
 8011ba6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011ba8:	0077      	lsls	r7, r6, #1
 8011baa:	463a      	mov	r2, r7
 8011bac:	f000 fbf1 	bl	8012392 <_realloc_r>
 8011bb0:	4605      	mov	r5, r0
 8011bb2:	2800      	cmp	r0, #0
 8011bb4:	d0de      	beq.n	8011b74 <__submore+0x1a>
 8011bb6:	eb00 0806 	add.w	r8, r0, r6
 8011bba:	4601      	mov	r1, r0
 8011bbc:	4632      	mov	r2, r6
 8011bbe:	4640      	mov	r0, r8
 8011bc0:	f7fc ff99 	bl	800eaf6 <memcpy>
 8011bc4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011bc8:	f8c4 8000 	str.w	r8, [r4]
 8011bcc:	e7e9      	b.n	8011ba2 <__submore+0x48>

08011bce <memmove>:
 8011bce:	4288      	cmp	r0, r1
 8011bd0:	b510      	push	{r4, lr}
 8011bd2:	eb01 0402 	add.w	r4, r1, r2
 8011bd6:	d902      	bls.n	8011bde <memmove+0x10>
 8011bd8:	4284      	cmp	r4, r0
 8011bda:	4623      	mov	r3, r4
 8011bdc:	d807      	bhi.n	8011bee <memmove+0x20>
 8011bde:	1e43      	subs	r3, r0, #1
 8011be0:	42a1      	cmp	r1, r4
 8011be2:	d008      	beq.n	8011bf6 <memmove+0x28>
 8011be4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011be8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011bec:	e7f8      	b.n	8011be0 <memmove+0x12>
 8011bee:	4402      	add	r2, r0
 8011bf0:	4601      	mov	r1, r0
 8011bf2:	428a      	cmp	r2, r1
 8011bf4:	d100      	bne.n	8011bf8 <memmove+0x2a>
 8011bf6:	bd10      	pop	{r4, pc}
 8011bf8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011bfc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c00:	e7f7      	b.n	8011bf2 <memmove+0x24>

08011c02 <strncmp>:
 8011c02:	b510      	push	{r4, lr}
 8011c04:	b16a      	cbz	r2, 8011c22 <strncmp+0x20>
 8011c06:	3901      	subs	r1, #1
 8011c08:	1884      	adds	r4, r0, r2
 8011c0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d103      	bne.n	8011c1e <strncmp+0x1c>
 8011c16:	42a0      	cmp	r0, r4
 8011c18:	d001      	beq.n	8011c1e <strncmp+0x1c>
 8011c1a:	2a00      	cmp	r2, #0
 8011c1c:	d1f5      	bne.n	8011c0a <strncmp+0x8>
 8011c1e:	1ad0      	subs	r0, r2, r3
 8011c20:	bd10      	pop	{r4, pc}
 8011c22:	4610      	mov	r0, r2
 8011c24:	e7fc      	b.n	8011c20 <strncmp+0x1e>
	...

08011c28 <_sbrk_r>:
 8011c28:	b538      	push	{r3, r4, r5, lr}
 8011c2a:	4d06      	ldr	r5, [pc, #24]	; (8011c44 <_sbrk_r+0x1c>)
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	4604      	mov	r4, r0
 8011c30:	4608      	mov	r0, r1
 8011c32:	602b      	str	r3, [r5, #0]
 8011c34:	f7f2 f8d6 	bl	8003de4 <_sbrk>
 8011c38:	1c43      	adds	r3, r0, #1
 8011c3a:	d102      	bne.n	8011c42 <_sbrk_r+0x1a>
 8011c3c:	682b      	ldr	r3, [r5, #0]
 8011c3e:	b103      	cbz	r3, 8011c42 <_sbrk_r+0x1a>
 8011c40:	6023      	str	r3, [r4, #0]
 8011c42:	bd38      	pop	{r3, r4, r5, pc}
 8011c44:	20008c68 	.word	0x20008c68

08011c48 <nan>:
 8011c48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011c50 <nan+0x8>
 8011c4c:	4770      	bx	lr
 8011c4e:	bf00      	nop
 8011c50:	00000000 	.word	0x00000000
 8011c54:	7ff80000 	.word	0x7ff80000

08011c58 <__assert_func>:
 8011c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c5a:	4614      	mov	r4, r2
 8011c5c:	461a      	mov	r2, r3
 8011c5e:	4b09      	ldr	r3, [pc, #36]	; (8011c84 <__assert_func+0x2c>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	4605      	mov	r5, r0
 8011c64:	68d8      	ldr	r0, [r3, #12]
 8011c66:	b14c      	cbz	r4, 8011c7c <__assert_func+0x24>
 8011c68:	4b07      	ldr	r3, [pc, #28]	; (8011c88 <__assert_func+0x30>)
 8011c6a:	9100      	str	r1, [sp, #0]
 8011c6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011c70:	4906      	ldr	r1, [pc, #24]	; (8011c8c <__assert_func+0x34>)
 8011c72:	462b      	mov	r3, r5
 8011c74:	f000 fc3e 	bl	80124f4 <fiprintf>
 8011c78:	f000 fc4e 	bl	8012518 <abort>
 8011c7c:	4b04      	ldr	r3, [pc, #16]	; (8011c90 <__assert_func+0x38>)
 8011c7e:	461c      	mov	r4, r3
 8011c80:	e7f3      	b.n	8011c6a <__assert_func+0x12>
 8011c82:	bf00      	nop
 8011c84:	20000130 	.word	0x20000130
 8011c88:	080146e5 	.word	0x080146e5
 8011c8c:	080146f2 	.word	0x080146f2
 8011c90:	08014720 	.word	0x08014720

08011c94 <_calloc_r>:
 8011c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c96:	fba1 2402 	umull	r2, r4, r1, r2
 8011c9a:	b94c      	cbnz	r4, 8011cb0 <_calloc_r+0x1c>
 8011c9c:	4611      	mov	r1, r2
 8011c9e:	9201      	str	r2, [sp, #4]
 8011ca0:	f7fd fe2c 	bl	800f8fc <_malloc_r>
 8011ca4:	9a01      	ldr	r2, [sp, #4]
 8011ca6:	4605      	mov	r5, r0
 8011ca8:	b930      	cbnz	r0, 8011cb8 <_calloc_r+0x24>
 8011caa:	4628      	mov	r0, r5
 8011cac:	b003      	add	sp, #12
 8011cae:	bd30      	pop	{r4, r5, pc}
 8011cb0:	220c      	movs	r2, #12
 8011cb2:	6002      	str	r2, [r0, #0]
 8011cb4:	2500      	movs	r5, #0
 8011cb6:	e7f8      	b.n	8011caa <_calloc_r+0x16>
 8011cb8:	4621      	mov	r1, r4
 8011cba:	f7fc fe28 	bl	800e90e <memset>
 8011cbe:	e7f4      	b.n	8011caa <_calloc_r+0x16>

08011cc0 <rshift>:
 8011cc0:	6903      	ldr	r3, [r0, #16]
 8011cc2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011cc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cca:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011cce:	f100 0414 	add.w	r4, r0, #20
 8011cd2:	dd45      	ble.n	8011d60 <rshift+0xa0>
 8011cd4:	f011 011f 	ands.w	r1, r1, #31
 8011cd8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011cdc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011ce0:	d10c      	bne.n	8011cfc <rshift+0x3c>
 8011ce2:	f100 0710 	add.w	r7, r0, #16
 8011ce6:	4629      	mov	r1, r5
 8011ce8:	42b1      	cmp	r1, r6
 8011cea:	d334      	bcc.n	8011d56 <rshift+0x96>
 8011cec:	1a9b      	subs	r3, r3, r2
 8011cee:	009b      	lsls	r3, r3, #2
 8011cf0:	1eea      	subs	r2, r5, #3
 8011cf2:	4296      	cmp	r6, r2
 8011cf4:	bf38      	it	cc
 8011cf6:	2300      	movcc	r3, #0
 8011cf8:	4423      	add	r3, r4
 8011cfa:	e015      	b.n	8011d28 <rshift+0x68>
 8011cfc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011d00:	f1c1 0820 	rsb	r8, r1, #32
 8011d04:	40cf      	lsrs	r7, r1
 8011d06:	f105 0e04 	add.w	lr, r5, #4
 8011d0a:	46a1      	mov	r9, r4
 8011d0c:	4576      	cmp	r6, lr
 8011d0e:	46f4      	mov	ip, lr
 8011d10:	d815      	bhi.n	8011d3e <rshift+0x7e>
 8011d12:	1a9a      	subs	r2, r3, r2
 8011d14:	0092      	lsls	r2, r2, #2
 8011d16:	3a04      	subs	r2, #4
 8011d18:	3501      	adds	r5, #1
 8011d1a:	42ae      	cmp	r6, r5
 8011d1c:	bf38      	it	cc
 8011d1e:	2200      	movcc	r2, #0
 8011d20:	18a3      	adds	r3, r4, r2
 8011d22:	50a7      	str	r7, [r4, r2]
 8011d24:	b107      	cbz	r7, 8011d28 <rshift+0x68>
 8011d26:	3304      	adds	r3, #4
 8011d28:	1b1a      	subs	r2, r3, r4
 8011d2a:	42a3      	cmp	r3, r4
 8011d2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011d30:	bf08      	it	eq
 8011d32:	2300      	moveq	r3, #0
 8011d34:	6102      	str	r2, [r0, #16]
 8011d36:	bf08      	it	eq
 8011d38:	6143      	streq	r3, [r0, #20]
 8011d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d3e:	f8dc c000 	ldr.w	ip, [ip]
 8011d42:	fa0c fc08 	lsl.w	ip, ip, r8
 8011d46:	ea4c 0707 	orr.w	r7, ip, r7
 8011d4a:	f849 7b04 	str.w	r7, [r9], #4
 8011d4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011d52:	40cf      	lsrs	r7, r1
 8011d54:	e7da      	b.n	8011d0c <rshift+0x4c>
 8011d56:	f851 cb04 	ldr.w	ip, [r1], #4
 8011d5a:	f847 cf04 	str.w	ip, [r7, #4]!
 8011d5e:	e7c3      	b.n	8011ce8 <rshift+0x28>
 8011d60:	4623      	mov	r3, r4
 8011d62:	e7e1      	b.n	8011d28 <rshift+0x68>

08011d64 <__hexdig_fun>:
 8011d64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011d68:	2b09      	cmp	r3, #9
 8011d6a:	d802      	bhi.n	8011d72 <__hexdig_fun+0xe>
 8011d6c:	3820      	subs	r0, #32
 8011d6e:	b2c0      	uxtb	r0, r0
 8011d70:	4770      	bx	lr
 8011d72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011d76:	2b05      	cmp	r3, #5
 8011d78:	d801      	bhi.n	8011d7e <__hexdig_fun+0x1a>
 8011d7a:	3847      	subs	r0, #71	; 0x47
 8011d7c:	e7f7      	b.n	8011d6e <__hexdig_fun+0xa>
 8011d7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011d82:	2b05      	cmp	r3, #5
 8011d84:	d801      	bhi.n	8011d8a <__hexdig_fun+0x26>
 8011d86:	3827      	subs	r0, #39	; 0x27
 8011d88:	e7f1      	b.n	8011d6e <__hexdig_fun+0xa>
 8011d8a:	2000      	movs	r0, #0
 8011d8c:	4770      	bx	lr
	...

08011d90 <__gethex>:
 8011d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d94:	4617      	mov	r7, r2
 8011d96:	680a      	ldr	r2, [r1, #0]
 8011d98:	b085      	sub	sp, #20
 8011d9a:	f102 0b02 	add.w	fp, r2, #2
 8011d9e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011da2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011da6:	4681      	mov	r9, r0
 8011da8:	468a      	mov	sl, r1
 8011daa:	9302      	str	r3, [sp, #8]
 8011dac:	32fe      	adds	r2, #254	; 0xfe
 8011dae:	eb02 030b 	add.w	r3, r2, fp
 8011db2:	46d8      	mov	r8, fp
 8011db4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8011db8:	9301      	str	r3, [sp, #4]
 8011dba:	2830      	cmp	r0, #48	; 0x30
 8011dbc:	d0f7      	beq.n	8011dae <__gethex+0x1e>
 8011dbe:	f7ff ffd1 	bl	8011d64 <__hexdig_fun>
 8011dc2:	4604      	mov	r4, r0
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	d138      	bne.n	8011e3a <__gethex+0xaa>
 8011dc8:	49a7      	ldr	r1, [pc, #668]	; (8012068 <__gethex+0x2d8>)
 8011dca:	2201      	movs	r2, #1
 8011dcc:	4640      	mov	r0, r8
 8011dce:	f7ff ff18 	bl	8011c02 <strncmp>
 8011dd2:	4606      	mov	r6, r0
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d169      	bne.n	8011eac <__gethex+0x11c>
 8011dd8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8011ddc:	465d      	mov	r5, fp
 8011dde:	f7ff ffc1 	bl	8011d64 <__hexdig_fun>
 8011de2:	2800      	cmp	r0, #0
 8011de4:	d064      	beq.n	8011eb0 <__gethex+0x120>
 8011de6:	465a      	mov	r2, fp
 8011de8:	7810      	ldrb	r0, [r2, #0]
 8011dea:	2830      	cmp	r0, #48	; 0x30
 8011dec:	4690      	mov	r8, r2
 8011dee:	f102 0201 	add.w	r2, r2, #1
 8011df2:	d0f9      	beq.n	8011de8 <__gethex+0x58>
 8011df4:	f7ff ffb6 	bl	8011d64 <__hexdig_fun>
 8011df8:	2301      	movs	r3, #1
 8011dfa:	fab0 f480 	clz	r4, r0
 8011dfe:	0964      	lsrs	r4, r4, #5
 8011e00:	465e      	mov	r6, fp
 8011e02:	9301      	str	r3, [sp, #4]
 8011e04:	4642      	mov	r2, r8
 8011e06:	4615      	mov	r5, r2
 8011e08:	3201      	adds	r2, #1
 8011e0a:	7828      	ldrb	r0, [r5, #0]
 8011e0c:	f7ff ffaa 	bl	8011d64 <__hexdig_fun>
 8011e10:	2800      	cmp	r0, #0
 8011e12:	d1f8      	bne.n	8011e06 <__gethex+0x76>
 8011e14:	4994      	ldr	r1, [pc, #592]	; (8012068 <__gethex+0x2d8>)
 8011e16:	2201      	movs	r2, #1
 8011e18:	4628      	mov	r0, r5
 8011e1a:	f7ff fef2 	bl	8011c02 <strncmp>
 8011e1e:	b978      	cbnz	r0, 8011e40 <__gethex+0xb0>
 8011e20:	b946      	cbnz	r6, 8011e34 <__gethex+0xa4>
 8011e22:	1c6e      	adds	r6, r5, #1
 8011e24:	4632      	mov	r2, r6
 8011e26:	4615      	mov	r5, r2
 8011e28:	3201      	adds	r2, #1
 8011e2a:	7828      	ldrb	r0, [r5, #0]
 8011e2c:	f7ff ff9a 	bl	8011d64 <__hexdig_fun>
 8011e30:	2800      	cmp	r0, #0
 8011e32:	d1f8      	bne.n	8011e26 <__gethex+0x96>
 8011e34:	1b73      	subs	r3, r6, r5
 8011e36:	009e      	lsls	r6, r3, #2
 8011e38:	e004      	b.n	8011e44 <__gethex+0xb4>
 8011e3a:	2400      	movs	r4, #0
 8011e3c:	4626      	mov	r6, r4
 8011e3e:	e7e1      	b.n	8011e04 <__gethex+0x74>
 8011e40:	2e00      	cmp	r6, #0
 8011e42:	d1f7      	bne.n	8011e34 <__gethex+0xa4>
 8011e44:	782b      	ldrb	r3, [r5, #0]
 8011e46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011e4a:	2b50      	cmp	r3, #80	; 0x50
 8011e4c:	d13d      	bne.n	8011eca <__gethex+0x13a>
 8011e4e:	786b      	ldrb	r3, [r5, #1]
 8011e50:	2b2b      	cmp	r3, #43	; 0x2b
 8011e52:	d02f      	beq.n	8011eb4 <__gethex+0x124>
 8011e54:	2b2d      	cmp	r3, #45	; 0x2d
 8011e56:	d031      	beq.n	8011ebc <__gethex+0x12c>
 8011e58:	1c69      	adds	r1, r5, #1
 8011e5a:	f04f 0b00 	mov.w	fp, #0
 8011e5e:	7808      	ldrb	r0, [r1, #0]
 8011e60:	f7ff ff80 	bl	8011d64 <__hexdig_fun>
 8011e64:	1e42      	subs	r2, r0, #1
 8011e66:	b2d2      	uxtb	r2, r2
 8011e68:	2a18      	cmp	r2, #24
 8011e6a:	d82e      	bhi.n	8011eca <__gethex+0x13a>
 8011e6c:	f1a0 0210 	sub.w	r2, r0, #16
 8011e70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011e74:	f7ff ff76 	bl	8011d64 <__hexdig_fun>
 8011e78:	f100 3cff 	add.w	ip, r0, #4294967295
 8011e7c:	fa5f fc8c 	uxtb.w	ip, ip
 8011e80:	f1bc 0f18 	cmp.w	ip, #24
 8011e84:	d91d      	bls.n	8011ec2 <__gethex+0x132>
 8011e86:	f1bb 0f00 	cmp.w	fp, #0
 8011e8a:	d000      	beq.n	8011e8e <__gethex+0xfe>
 8011e8c:	4252      	negs	r2, r2
 8011e8e:	4416      	add	r6, r2
 8011e90:	f8ca 1000 	str.w	r1, [sl]
 8011e94:	b1dc      	cbz	r4, 8011ece <__gethex+0x13e>
 8011e96:	9b01      	ldr	r3, [sp, #4]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	bf14      	ite	ne
 8011e9c:	f04f 0800 	movne.w	r8, #0
 8011ea0:	f04f 0806 	moveq.w	r8, #6
 8011ea4:	4640      	mov	r0, r8
 8011ea6:	b005      	add	sp, #20
 8011ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eac:	4645      	mov	r5, r8
 8011eae:	4626      	mov	r6, r4
 8011eb0:	2401      	movs	r4, #1
 8011eb2:	e7c7      	b.n	8011e44 <__gethex+0xb4>
 8011eb4:	f04f 0b00 	mov.w	fp, #0
 8011eb8:	1ca9      	adds	r1, r5, #2
 8011eba:	e7d0      	b.n	8011e5e <__gethex+0xce>
 8011ebc:	f04f 0b01 	mov.w	fp, #1
 8011ec0:	e7fa      	b.n	8011eb8 <__gethex+0x128>
 8011ec2:	230a      	movs	r3, #10
 8011ec4:	fb03 0002 	mla	r0, r3, r2, r0
 8011ec8:	e7d0      	b.n	8011e6c <__gethex+0xdc>
 8011eca:	4629      	mov	r1, r5
 8011ecc:	e7e0      	b.n	8011e90 <__gethex+0x100>
 8011ece:	eba5 0308 	sub.w	r3, r5, r8
 8011ed2:	3b01      	subs	r3, #1
 8011ed4:	4621      	mov	r1, r4
 8011ed6:	2b07      	cmp	r3, #7
 8011ed8:	dc0a      	bgt.n	8011ef0 <__gethex+0x160>
 8011eda:	4648      	mov	r0, r9
 8011edc:	f7fd fd9a 	bl	800fa14 <_Balloc>
 8011ee0:	4604      	mov	r4, r0
 8011ee2:	b940      	cbnz	r0, 8011ef6 <__gethex+0x166>
 8011ee4:	4b61      	ldr	r3, [pc, #388]	; (801206c <__gethex+0x2dc>)
 8011ee6:	4602      	mov	r2, r0
 8011ee8:	21e4      	movs	r1, #228	; 0xe4
 8011eea:	4861      	ldr	r0, [pc, #388]	; (8012070 <__gethex+0x2e0>)
 8011eec:	f7ff feb4 	bl	8011c58 <__assert_func>
 8011ef0:	3101      	adds	r1, #1
 8011ef2:	105b      	asrs	r3, r3, #1
 8011ef4:	e7ef      	b.n	8011ed6 <__gethex+0x146>
 8011ef6:	f100 0a14 	add.w	sl, r0, #20
 8011efa:	2300      	movs	r3, #0
 8011efc:	495a      	ldr	r1, [pc, #360]	; (8012068 <__gethex+0x2d8>)
 8011efe:	f8cd a004 	str.w	sl, [sp, #4]
 8011f02:	469b      	mov	fp, r3
 8011f04:	45a8      	cmp	r8, r5
 8011f06:	d342      	bcc.n	8011f8e <__gethex+0x1fe>
 8011f08:	9801      	ldr	r0, [sp, #4]
 8011f0a:	f840 bb04 	str.w	fp, [r0], #4
 8011f0e:	eba0 000a 	sub.w	r0, r0, sl
 8011f12:	1080      	asrs	r0, r0, #2
 8011f14:	6120      	str	r0, [r4, #16]
 8011f16:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8011f1a:	4658      	mov	r0, fp
 8011f1c:	f7fd fe6c 	bl	800fbf8 <__hi0bits>
 8011f20:	683d      	ldr	r5, [r7, #0]
 8011f22:	eba8 0000 	sub.w	r0, r8, r0
 8011f26:	42a8      	cmp	r0, r5
 8011f28:	dd59      	ble.n	8011fde <__gethex+0x24e>
 8011f2a:	eba0 0805 	sub.w	r8, r0, r5
 8011f2e:	4641      	mov	r1, r8
 8011f30:	4620      	mov	r0, r4
 8011f32:	f7fe f9fb 	bl	801032c <__any_on>
 8011f36:	4683      	mov	fp, r0
 8011f38:	b1b8      	cbz	r0, 8011f6a <__gethex+0x1da>
 8011f3a:	f108 33ff 	add.w	r3, r8, #4294967295
 8011f3e:	1159      	asrs	r1, r3, #5
 8011f40:	f003 021f 	and.w	r2, r3, #31
 8011f44:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011f48:	f04f 0b01 	mov.w	fp, #1
 8011f4c:	fa0b f202 	lsl.w	r2, fp, r2
 8011f50:	420a      	tst	r2, r1
 8011f52:	d00a      	beq.n	8011f6a <__gethex+0x1da>
 8011f54:	455b      	cmp	r3, fp
 8011f56:	dd06      	ble.n	8011f66 <__gethex+0x1d6>
 8011f58:	f1a8 0102 	sub.w	r1, r8, #2
 8011f5c:	4620      	mov	r0, r4
 8011f5e:	f7fe f9e5 	bl	801032c <__any_on>
 8011f62:	2800      	cmp	r0, #0
 8011f64:	d138      	bne.n	8011fd8 <__gethex+0x248>
 8011f66:	f04f 0b02 	mov.w	fp, #2
 8011f6a:	4641      	mov	r1, r8
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	f7ff fea7 	bl	8011cc0 <rshift>
 8011f72:	4446      	add	r6, r8
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	42b3      	cmp	r3, r6
 8011f78:	da41      	bge.n	8011ffe <__gethex+0x26e>
 8011f7a:	4621      	mov	r1, r4
 8011f7c:	4648      	mov	r0, r9
 8011f7e:	f7fd fd89 	bl	800fa94 <_Bfree>
 8011f82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f84:	2300      	movs	r3, #0
 8011f86:	6013      	str	r3, [r2, #0]
 8011f88:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8011f8c:	e78a      	b.n	8011ea4 <__gethex+0x114>
 8011f8e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8011f92:	2a2e      	cmp	r2, #46	; 0x2e
 8011f94:	d014      	beq.n	8011fc0 <__gethex+0x230>
 8011f96:	2b20      	cmp	r3, #32
 8011f98:	d106      	bne.n	8011fa8 <__gethex+0x218>
 8011f9a:	9b01      	ldr	r3, [sp, #4]
 8011f9c:	f843 bb04 	str.w	fp, [r3], #4
 8011fa0:	f04f 0b00 	mov.w	fp, #0
 8011fa4:	9301      	str	r3, [sp, #4]
 8011fa6:	465b      	mov	r3, fp
 8011fa8:	7828      	ldrb	r0, [r5, #0]
 8011faa:	9303      	str	r3, [sp, #12]
 8011fac:	f7ff feda 	bl	8011d64 <__hexdig_fun>
 8011fb0:	9b03      	ldr	r3, [sp, #12]
 8011fb2:	f000 000f 	and.w	r0, r0, #15
 8011fb6:	4098      	lsls	r0, r3
 8011fb8:	ea4b 0b00 	orr.w	fp, fp, r0
 8011fbc:	3304      	adds	r3, #4
 8011fbe:	e7a1      	b.n	8011f04 <__gethex+0x174>
 8011fc0:	45a8      	cmp	r8, r5
 8011fc2:	d8e8      	bhi.n	8011f96 <__gethex+0x206>
 8011fc4:	2201      	movs	r2, #1
 8011fc6:	4628      	mov	r0, r5
 8011fc8:	9303      	str	r3, [sp, #12]
 8011fca:	f7ff fe1a 	bl	8011c02 <strncmp>
 8011fce:	4926      	ldr	r1, [pc, #152]	; (8012068 <__gethex+0x2d8>)
 8011fd0:	9b03      	ldr	r3, [sp, #12]
 8011fd2:	2800      	cmp	r0, #0
 8011fd4:	d1df      	bne.n	8011f96 <__gethex+0x206>
 8011fd6:	e795      	b.n	8011f04 <__gethex+0x174>
 8011fd8:	f04f 0b03 	mov.w	fp, #3
 8011fdc:	e7c5      	b.n	8011f6a <__gethex+0x1da>
 8011fde:	da0b      	bge.n	8011ff8 <__gethex+0x268>
 8011fe0:	eba5 0800 	sub.w	r8, r5, r0
 8011fe4:	4621      	mov	r1, r4
 8011fe6:	4642      	mov	r2, r8
 8011fe8:	4648      	mov	r0, r9
 8011fea:	f7fd ff6d 	bl	800fec8 <__lshift>
 8011fee:	eba6 0608 	sub.w	r6, r6, r8
 8011ff2:	4604      	mov	r4, r0
 8011ff4:	f100 0a14 	add.w	sl, r0, #20
 8011ff8:	f04f 0b00 	mov.w	fp, #0
 8011ffc:	e7ba      	b.n	8011f74 <__gethex+0x1e4>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	42b3      	cmp	r3, r6
 8012002:	dd73      	ble.n	80120ec <__gethex+0x35c>
 8012004:	1b9e      	subs	r6, r3, r6
 8012006:	42b5      	cmp	r5, r6
 8012008:	dc34      	bgt.n	8012074 <__gethex+0x2e4>
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	2b02      	cmp	r3, #2
 801200e:	d023      	beq.n	8012058 <__gethex+0x2c8>
 8012010:	2b03      	cmp	r3, #3
 8012012:	d025      	beq.n	8012060 <__gethex+0x2d0>
 8012014:	2b01      	cmp	r3, #1
 8012016:	d115      	bne.n	8012044 <__gethex+0x2b4>
 8012018:	42b5      	cmp	r5, r6
 801201a:	d113      	bne.n	8012044 <__gethex+0x2b4>
 801201c:	2d01      	cmp	r5, #1
 801201e:	d10b      	bne.n	8012038 <__gethex+0x2a8>
 8012020:	9a02      	ldr	r2, [sp, #8]
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6013      	str	r3, [r2, #0]
 8012026:	2301      	movs	r3, #1
 8012028:	6123      	str	r3, [r4, #16]
 801202a:	f8ca 3000 	str.w	r3, [sl]
 801202e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012030:	f04f 0862 	mov.w	r8, #98	; 0x62
 8012034:	601c      	str	r4, [r3, #0]
 8012036:	e735      	b.n	8011ea4 <__gethex+0x114>
 8012038:	1e69      	subs	r1, r5, #1
 801203a:	4620      	mov	r0, r4
 801203c:	f7fe f976 	bl	801032c <__any_on>
 8012040:	2800      	cmp	r0, #0
 8012042:	d1ed      	bne.n	8012020 <__gethex+0x290>
 8012044:	4621      	mov	r1, r4
 8012046:	4648      	mov	r0, r9
 8012048:	f7fd fd24 	bl	800fa94 <_Bfree>
 801204c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801204e:	2300      	movs	r3, #0
 8012050:	6013      	str	r3, [r2, #0]
 8012052:	f04f 0850 	mov.w	r8, #80	; 0x50
 8012056:	e725      	b.n	8011ea4 <__gethex+0x114>
 8012058:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801205a:	2b00      	cmp	r3, #0
 801205c:	d1f2      	bne.n	8012044 <__gethex+0x2b4>
 801205e:	e7df      	b.n	8012020 <__gethex+0x290>
 8012060:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012062:	2b00      	cmp	r3, #0
 8012064:	d1dc      	bne.n	8012020 <__gethex+0x290>
 8012066:	e7ed      	b.n	8012044 <__gethex+0x2b4>
 8012068:	0801455c 	.word	0x0801455c
 801206c:	080143ef 	.word	0x080143ef
 8012070:	08014721 	.word	0x08014721
 8012074:	f106 38ff 	add.w	r8, r6, #4294967295
 8012078:	f1bb 0f00 	cmp.w	fp, #0
 801207c:	d133      	bne.n	80120e6 <__gethex+0x356>
 801207e:	f1b8 0f00 	cmp.w	r8, #0
 8012082:	d004      	beq.n	801208e <__gethex+0x2fe>
 8012084:	4641      	mov	r1, r8
 8012086:	4620      	mov	r0, r4
 8012088:	f7fe f950 	bl	801032c <__any_on>
 801208c:	4683      	mov	fp, r0
 801208e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8012092:	2301      	movs	r3, #1
 8012094:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012098:	f008 081f 	and.w	r8, r8, #31
 801209c:	fa03 f308 	lsl.w	r3, r3, r8
 80120a0:	4213      	tst	r3, r2
 80120a2:	4631      	mov	r1, r6
 80120a4:	4620      	mov	r0, r4
 80120a6:	bf18      	it	ne
 80120a8:	f04b 0b02 	orrne.w	fp, fp, #2
 80120ac:	1bad      	subs	r5, r5, r6
 80120ae:	f7ff fe07 	bl	8011cc0 <rshift>
 80120b2:	687e      	ldr	r6, [r7, #4]
 80120b4:	f04f 0802 	mov.w	r8, #2
 80120b8:	f1bb 0f00 	cmp.w	fp, #0
 80120bc:	d04a      	beq.n	8012154 <__gethex+0x3c4>
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	2b02      	cmp	r3, #2
 80120c2:	d016      	beq.n	80120f2 <__gethex+0x362>
 80120c4:	2b03      	cmp	r3, #3
 80120c6:	d018      	beq.n	80120fa <__gethex+0x36a>
 80120c8:	2b01      	cmp	r3, #1
 80120ca:	d109      	bne.n	80120e0 <__gethex+0x350>
 80120cc:	f01b 0f02 	tst.w	fp, #2
 80120d0:	d006      	beq.n	80120e0 <__gethex+0x350>
 80120d2:	f8da 3000 	ldr.w	r3, [sl]
 80120d6:	ea4b 0b03 	orr.w	fp, fp, r3
 80120da:	f01b 0f01 	tst.w	fp, #1
 80120de:	d10f      	bne.n	8012100 <__gethex+0x370>
 80120e0:	f048 0810 	orr.w	r8, r8, #16
 80120e4:	e036      	b.n	8012154 <__gethex+0x3c4>
 80120e6:	f04f 0b01 	mov.w	fp, #1
 80120ea:	e7d0      	b.n	801208e <__gethex+0x2fe>
 80120ec:	f04f 0801 	mov.w	r8, #1
 80120f0:	e7e2      	b.n	80120b8 <__gethex+0x328>
 80120f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120f4:	f1c3 0301 	rsb	r3, r3, #1
 80120f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80120fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d0ef      	beq.n	80120e0 <__gethex+0x350>
 8012100:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012104:	f104 0214 	add.w	r2, r4, #20
 8012108:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801210c:	9301      	str	r3, [sp, #4]
 801210e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8012112:	2300      	movs	r3, #0
 8012114:	4694      	mov	ip, r2
 8012116:	f852 1b04 	ldr.w	r1, [r2], #4
 801211a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801211e:	d01e      	beq.n	801215e <__gethex+0x3ce>
 8012120:	3101      	adds	r1, #1
 8012122:	f8cc 1000 	str.w	r1, [ip]
 8012126:	f1b8 0f02 	cmp.w	r8, #2
 801212a:	f104 0214 	add.w	r2, r4, #20
 801212e:	d13d      	bne.n	80121ac <__gethex+0x41c>
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	3b01      	subs	r3, #1
 8012134:	42ab      	cmp	r3, r5
 8012136:	d10b      	bne.n	8012150 <__gethex+0x3c0>
 8012138:	1169      	asrs	r1, r5, #5
 801213a:	2301      	movs	r3, #1
 801213c:	f005 051f 	and.w	r5, r5, #31
 8012140:	fa03 f505 	lsl.w	r5, r3, r5
 8012144:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012148:	421d      	tst	r5, r3
 801214a:	bf18      	it	ne
 801214c:	f04f 0801 	movne.w	r8, #1
 8012150:	f048 0820 	orr.w	r8, r8, #32
 8012154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012156:	601c      	str	r4, [r3, #0]
 8012158:	9b02      	ldr	r3, [sp, #8]
 801215a:	601e      	str	r6, [r3, #0]
 801215c:	e6a2      	b.n	8011ea4 <__gethex+0x114>
 801215e:	4290      	cmp	r0, r2
 8012160:	f842 3c04 	str.w	r3, [r2, #-4]
 8012164:	d8d6      	bhi.n	8012114 <__gethex+0x384>
 8012166:	68a2      	ldr	r2, [r4, #8]
 8012168:	4593      	cmp	fp, r2
 801216a:	db17      	blt.n	801219c <__gethex+0x40c>
 801216c:	6861      	ldr	r1, [r4, #4]
 801216e:	4648      	mov	r0, r9
 8012170:	3101      	adds	r1, #1
 8012172:	f7fd fc4f 	bl	800fa14 <_Balloc>
 8012176:	4682      	mov	sl, r0
 8012178:	b918      	cbnz	r0, 8012182 <__gethex+0x3f2>
 801217a:	4b1b      	ldr	r3, [pc, #108]	; (80121e8 <__gethex+0x458>)
 801217c:	4602      	mov	r2, r0
 801217e:	2184      	movs	r1, #132	; 0x84
 8012180:	e6b3      	b.n	8011eea <__gethex+0x15a>
 8012182:	6922      	ldr	r2, [r4, #16]
 8012184:	3202      	adds	r2, #2
 8012186:	f104 010c 	add.w	r1, r4, #12
 801218a:	0092      	lsls	r2, r2, #2
 801218c:	300c      	adds	r0, #12
 801218e:	f7fc fcb2 	bl	800eaf6 <memcpy>
 8012192:	4621      	mov	r1, r4
 8012194:	4648      	mov	r0, r9
 8012196:	f7fd fc7d 	bl	800fa94 <_Bfree>
 801219a:	4654      	mov	r4, sl
 801219c:	6922      	ldr	r2, [r4, #16]
 801219e:	1c51      	adds	r1, r2, #1
 80121a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80121a4:	6121      	str	r1, [r4, #16]
 80121a6:	2101      	movs	r1, #1
 80121a8:	6151      	str	r1, [r2, #20]
 80121aa:	e7bc      	b.n	8012126 <__gethex+0x396>
 80121ac:	6921      	ldr	r1, [r4, #16]
 80121ae:	4559      	cmp	r1, fp
 80121b0:	dd0b      	ble.n	80121ca <__gethex+0x43a>
 80121b2:	2101      	movs	r1, #1
 80121b4:	4620      	mov	r0, r4
 80121b6:	f7ff fd83 	bl	8011cc0 <rshift>
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	3601      	adds	r6, #1
 80121be:	42b3      	cmp	r3, r6
 80121c0:	f6ff aedb 	blt.w	8011f7a <__gethex+0x1ea>
 80121c4:	f04f 0801 	mov.w	r8, #1
 80121c8:	e7c2      	b.n	8012150 <__gethex+0x3c0>
 80121ca:	f015 051f 	ands.w	r5, r5, #31
 80121ce:	d0f9      	beq.n	80121c4 <__gethex+0x434>
 80121d0:	9b01      	ldr	r3, [sp, #4]
 80121d2:	441a      	add	r2, r3
 80121d4:	f1c5 0520 	rsb	r5, r5, #32
 80121d8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80121dc:	f7fd fd0c 	bl	800fbf8 <__hi0bits>
 80121e0:	42a8      	cmp	r0, r5
 80121e2:	dbe6      	blt.n	80121b2 <__gethex+0x422>
 80121e4:	e7ee      	b.n	80121c4 <__gethex+0x434>
 80121e6:	bf00      	nop
 80121e8:	080143ef 	.word	0x080143ef

080121ec <L_shift>:
 80121ec:	f1c2 0208 	rsb	r2, r2, #8
 80121f0:	0092      	lsls	r2, r2, #2
 80121f2:	b570      	push	{r4, r5, r6, lr}
 80121f4:	f1c2 0620 	rsb	r6, r2, #32
 80121f8:	6843      	ldr	r3, [r0, #4]
 80121fa:	6804      	ldr	r4, [r0, #0]
 80121fc:	fa03 f506 	lsl.w	r5, r3, r6
 8012200:	432c      	orrs	r4, r5
 8012202:	40d3      	lsrs	r3, r2
 8012204:	6004      	str	r4, [r0, #0]
 8012206:	f840 3f04 	str.w	r3, [r0, #4]!
 801220a:	4288      	cmp	r0, r1
 801220c:	d3f4      	bcc.n	80121f8 <L_shift+0xc>
 801220e:	bd70      	pop	{r4, r5, r6, pc}

08012210 <__match>:
 8012210:	b530      	push	{r4, r5, lr}
 8012212:	6803      	ldr	r3, [r0, #0]
 8012214:	3301      	adds	r3, #1
 8012216:	f811 4b01 	ldrb.w	r4, [r1], #1
 801221a:	b914      	cbnz	r4, 8012222 <__match+0x12>
 801221c:	6003      	str	r3, [r0, #0]
 801221e:	2001      	movs	r0, #1
 8012220:	bd30      	pop	{r4, r5, pc}
 8012222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012226:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801222a:	2d19      	cmp	r5, #25
 801222c:	bf98      	it	ls
 801222e:	3220      	addls	r2, #32
 8012230:	42a2      	cmp	r2, r4
 8012232:	d0f0      	beq.n	8012216 <__match+0x6>
 8012234:	2000      	movs	r0, #0
 8012236:	e7f3      	b.n	8012220 <__match+0x10>

08012238 <__hexnan>:
 8012238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801223c:	680b      	ldr	r3, [r1, #0]
 801223e:	6801      	ldr	r1, [r0, #0]
 8012240:	115e      	asrs	r6, r3, #5
 8012242:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012246:	f013 031f 	ands.w	r3, r3, #31
 801224a:	b087      	sub	sp, #28
 801224c:	bf18      	it	ne
 801224e:	3604      	addne	r6, #4
 8012250:	2500      	movs	r5, #0
 8012252:	1f37      	subs	r7, r6, #4
 8012254:	4682      	mov	sl, r0
 8012256:	4690      	mov	r8, r2
 8012258:	9301      	str	r3, [sp, #4]
 801225a:	f846 5c04 	str.w	r5, [r6, #-4]
 801225e:	46b9      	mov	r9, r7
 8012260:	463c      	mov	r4, r7
 8012262:	9502      	str	r5, [sp, #8]
 8012264:	46ab      	mov	fp, r5
 8012266:	784a      	ldrb	r2, [r1, #1]
 8012268:	1c4b      	adds	r3, r1, #1
 801226a:	9303      	str	r3, [sp, #12]
 801226c:	b342      	cbz	r2, 80122c0 <__hexnan+0x88>
 801226e:	4610      	mov	r0, r2
 8012270:	9105      	str	r1, [sp, #20]
 8012272:	9204      	str	r2, [sp, #16]
 8012274:	f7ff fd76 	bl	8011d64 <__hexdig_fun>
 8012278:	2800      	cmp	r0, #0
 801227a:	d14f      	bne.n	801231c <__hexnan+0xe4>
 801227c:	9a04      	ldr	r2, [sp, #16]
 801227e:	9905      	ldr	r1, [sp, #20]
 8012280:	2a20      	cmp	r2, #32
 8012282:	d818      	bhi.n	80122b6 <__hexnan+0x7e>
 8012284:	9b02      	ldr	r3, [sp, #8]
 8012286:	459b      	cmp	fp, r3
 8012288:	dd13      	ble.n	80122b2 <__hexnan+0x7a>
 801228a:	454c      	cmp	r4, r9
 801228c:	d206      	bcs.n	801229c <__hexnan+0x64>
 801228e:	2d07      	cmp	r5, #7
 8012290:	dc04      	bgt.n	801229c <__hexnan+0x64>
 8012292:	462a      	mov	r2, r5
 8012294:	4649      	mov	r1, r9
 8012296:	4620      	mov	r0, r4
 8012298:	f7ff ffa8 	bl	80121ec <L_shift>
 801229c:	4544      	cmp	r4, r8
 801229e:	d950      	bls.n	8012342 <__hexnan+0x10a>
 80122a0:	2300      	movs	r3, #0
 80122a2:	f1a4 0904 	sub.w	r9, r4, #4
 80122a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80122aa:	f8cd b008 	str.w	fp, [sp, #8]
 80122ae:	464c      	mov	r4, r9
 80122b0:	461d      	mov	r5, r3
 80122b2:	9903      	ldr	r1, [sp, #12]
 80122b4:	e7d7      	b.n	8012266 <__hexnan+0x2e>
 80122b6:	2a29      	cmp	r2, #41	; 0x29
 80122b8:	d155      	bne.n	8012366 <__hexnan+0x12e>
 80122ba:	3102      	adds	r1, #2
 80122bc:	f8ca 1000 	str.w	r1, [sl]
 80122c0:	f1bb 0f00 	cmp.w	fp, #0
 80122c4:	d04f      	beq.n	8012366 <__hexnan+0x12e>
 80122c6:	454c      	cmp	r4, r9
 80122c8:	d206      	bcs.n	80122d8 <__hexnan+0xa0>
 80122ca:	2d07      	cmp	r5, #7
 80122cc:	dc04      	bgt.n	80122d8 <__hexnan+0xa0>
 80122ce:	462a      	mov	r2, r5
 80122d0:	4649      	mov	r1, r9
 80122d2:	4620      	mov	r0, r4
 80122d4:	f7ff ff8a 	bl	80121ec <L_shift>
 80122d8:	4544      	cmp	r4, r8
 80122da:	d934      	bls.n	8012346 <__hexnan+0x10e>
 80122dc:	f1a8 0204 	sub.w	r2, r8, #4
 80122e0:	4623      	mov	r3, r4
 80122e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80122e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80122ea:	429f      	cmp	r7, r3
 80122ec:	d2f9      	bcs.n	80122e2 <__hexnan+0xaa>
 80122ee:	1b3b      	subs	r3, r7, r4
 80122f0:	f023 0303 	bic.w	r3, r3, #3
 80122f4:	3304      	adds	r3, #4
 80122f6:	3e03      	subs	r6, #3
 80122f8:	3401      	adds	r4, #1
 80122fa:	42a6      	cmp	r6, r4
 80122fc:	bf38      	it	cc
 80122fe:	2304      	movcc	r3, #4
 8012300:	4443      	add	r3, r8
 8012302:	2200      	movs	r2, #0
 8012304:	f843 2b04 	str.w	r2, [r3], #4
 8012308:	429f      	cmp	r7, r3
 801230a:	d2fb      	bcs.n	8012304 <__hexnan+0xcc>
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	b91b      	cbnz	r3, 8012318 <__hexnan+0xe0>
 8012310:	4547      	cmp	r7, r8
 8012312:	d126      	bne.n	8012362 <__hexnan+0x12a>
 8012314:	2301      	movs	r3, #1
 8012316:	603b      	str	r3, [r7, #0]
 8012318:	2005      	movs	r0, #5
 801231a:	e025      	b.n	8012368 <__hexnan+0x130>
 801231c:	3501      	adds	r5, #1
 801231e:	2d08      	cmp	r5, #8
 8012320:	f10b 0b01 	add.w	fp, fp, #1
 8012324:	dd06      	ble.n	8012334 <__hexnan+0xfc>
 8012326:	4544      	cmp	r4, r8
 8012328:	d9c3      	bls.n	80122b2 <__hexnan+0x7a>
 801232a:	2300      	movs	r3, #0
 801232c:	f844 3c04 	str.w	r3, [r4, #-4]
 8012330:	2501      	movs	r5, #1
 8012332:	3c04      	subs	r4, #4
 8012334:	6822      	ldr	r2, [r4, #0]
 8012336:	f000 000f 	and.w	r0, r0, #15
 801233a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801233e:	6020      	str	r0, [r4, #0]
 8012340:	e7b7      	b.n	80122b2 <__hexnan+0x7a>
 8012342:	2508      	movs	r5, #8
 8012344:	e7b5      	b.n	80122b2 <__hexnan+0x7a>
 8012346:	9b01      	ldr	r3, [sp, #4]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d0df      	beq.n	801230c <__hexnan+0xd4>
 801234c:	f1c3 0320 	rsb	r3, r3, #32
 8012350:	f04f 32ff 	mov.w	r2, #4294967295
 8012354:	40da      	lsrs	r2, r3
 8012356:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801235a:	4013      	ands	r3, r2
 801235c:	f846 3c04 	str.w	r3, [r6, #-4]
 8012360:	e7d4      	b.n	801230c <__hexnan+0xd4>
 8012362:	3f04      	subs	r7, #4
 8012364:	e7d2      	b.n	801230c <__hexnan+0xd4>
 8012366:	2004      	movs	r0, #4
 8012368:	b007      	add	sp, #28
 801236a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801236e <__ascii_mbtowc>:
 801236e:	b082      	sub	sp, #8
 8012370:	b901      	cbnz	r1, 8012374 <__ascii_mbtowc+0x6>
 8012372:	a901      	add	r1, sp, #4
 8012374:	b142      	cbz	r2, 8012388 <__ascii_mbtowc+0x1a>
 8012376:	b14b      	cbz	r3, 801238c <__ascii_mbtowc+0x1e>
 8012378:	7813      	ldrb	r3, [r2, #0]
 801237a:	600b      	str	r3, [r1, #0]
 801237c:	7812      	ldrb	r2, [r2, #0]
 801237e:	1e10      	subs	r0, r2, #0
 8012380:	bf18      	it	ne
 8012382:	2001      	movne	r0, #1
 8012384:	b002      	add	sp, #8
 8012386:	4770      	bx	lr
 8012388:	4610      	mov	r0, r2
 801238a:	e7fb      	b.n	8012384 <__ascii_mbtowc+0x16>
 801238c:	f06f 0001 	mvn.w	r0, #1
 8012390:	e7f8      	b.n	8012384 <__ascii_mbtowc+0x16>

08012392 <_realloc_r>:
 8012392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012396:	4680      	mov	r8, r0
 8012398:	4614      	mov	r4, r2
 801239a:	460e      	mov	r6, r1
 801239c:	b921      	cbnz	r1, 80123a8 <_realloc_r+0x16>
 801239e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123a2:	4611      	mov	r1, r2
 80123a4:	f7fd baaa 	b.w	800f8fc <_malloc_r>
 80123a8:	b92a      	cbnz	r2, 80123b6 <_realloc_r+0x24>
 80123aa:	f7fd fa33 	bl	800f814 <_free_r>
 80123ae:	4625      	mov	r5, r4
 80123b0:	4628      	mov	r0, r5
 80123b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123b6:	f000 f8b6 	bl	8012526 <_malloc_usable_size_r>
 80123ba:	4284      	cmp	r4, r0
 80123bc:	4607      	mov	r7, r0
 80123be:	d802      	bhi.n	80123c6 <_realloc_r+0x34>
 80123c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80123c4:	d812      	bhi.n	80123ec <_realloc_r+0x5a>
 80123c6:	4621      	mov	r1, r4
 80123c8:	4640      	mov	r0, r8
 80123ca:	f7fd fa97 	bl	800f8fc <_malloc_r>
 80123ce:	4605      	mov	r5, r0
 80123d0:	2800      	cmp	r0, #0
 80123d2:	d0ed      	beq.n	80123b0 <_realloc_r+0x1e>
 80123d4:	42bc      	cmp	r4, r7
 80123d6:	4622      	mov	r2, r4
 80123d8:	4631      	mov	r1, r6
 80123da:	bf28      	it	cs
 80123dc:	463a      	movcs	r2, r7
 80123de:	f7fc fb8a 	bl	800eaf6 <memcpy>
 80123e2:	4631      	mov	r1, r6
 80123e4:	4640      	mov	r0, r8
 80123e6:	f7fd fa15 	bl	800f814 <_free_r>
 80123ea:	e7e1      	b.n	80123b0 <_realloc_r+0x1e>
 80123ec:	4635      	mov	r5, r6
 80123ee:	e7df      	b.n	80123b0 <_realloc_r+0x1e>

080123f0 <_strtoul_l.constprop.0>:
 80123f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80123f4:	4f36      	ldr	r7, [pc, #216]	; (80124d0 <_strtoul_l.constprop.0+0xe0>)
 80123f6:	4686      	mov	lr, r0
 80123f8:	460d      	mov	r5, r1
 80123fa:	4628      	mov	r0, r5
 80123fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012400:	5d3e      	ldrb	r6, [r7, r4]
 8012402:	f016 0608 	ands.w	r6, r6, #8
 8012406:	d1f8      	bne.n	80123fa <_strtoul_l.constprop.0+0xa>
 8012408:	2c2d      	cmp	r4, #45	; 0x2d
 801240a:	d130      	bne.n	801246e <_strtoul_l.constprop.0+0x7e>
 801240c:	782c      	ldrb	r4, [r5, #0]
 801240e:	2601      	movs	r6, #1
 8012410:	1c85      	adds	r5, r0, #2
 8012412:	2b00      	cmp	r3, #0
 8012414:	d057      	beq.n	80124c6 <_strtoul_l.constprop.0+0xd6>
 8012416:	2b10      	cmp	r3, #16
 8012418:	d109      	bne.n	801242e <_strtoul_l.constprop.0+0x3e>
 801241a:	2c30      	cmp	r4, #48	; 0x30
 801241c:	d107      	bne.n	801242e <_strtoul_l.constprop.0+0x3e>
 801241e:	7828      	ldrb	r0, [r5, #0]
 8012420:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012424:	2858      	cmp	r0, #88	; 0x58
 8012426:	d149      	bne.n	80124bc <_strtoul_l.constprop.0+0xcc>
 8012428:	786c      	ldrb	r4, [r5, #1]
 801242a:	2310      	movs	r3, #16
 801242c:	3502      	adds	r5, #2
 801242e:	f04f 38ff 	mov.w	r8, #4294967295
 8012432:	2700      	movs	r7, #0
 8012434:	fbb8 f8f3 	udiv	r8, r8, r3
 8012438:	fb03 f908 	mul.w	r9, r3, r8
 801243c:	ea6f 0909 	mvn.w	r9, r9
 8012440:	4638      	mov	r0, r7
 8012442:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012446:	f1bc 0f09 	cmp.w	ip, #9
 801244a:	d815      	bhi.n	8012478 <_strtoul_l.constprop.0+0x88>
 801244c:	4664      	mov	r4, ip
 801244e:	42a3      	cmp	r3, r4
 8012450:	dd23      	ble.n	801249a <_strtoul_l.constprop.0+0xaa>
 8012452:	f1b7 3fff 	cmp.w	r7, #4294967295
 8012456:	d007      	beq.n	8012468 <_strtoul_l.constprop.0+0x78>
 8012458:	4580      	cmp	r8, r0
 801245a:	d31b      	bcc.n	8012494 <_strtoul_l.constprop.0+0xa4>
 801245c:	d101      	bne.n	8012462 <_strtoul_l.constprop.0+0x72>
 801245e:	45a1      	cmp	r9, r4
 8012460:	db18      	blt.n	8012494 <_strtoul_l.constprop.0+0xa4>
 8012462:	fb00 4003 	mla	r0, r0, r3, r4
 8012466:	2701      	movs	r7, #1
 8012468:	f815 4b01 	ldrb.w	r4, [r5], #1
 801246c:	e7e9      	b.n	8012442 <_strtoul_l.constprop.0+0x52>
 801246e:	2c2b      	cmp	r4, #43	; 0x2b
 8012470:	bf04      	itt	eq
 8012472:	782c      	ldrbeq	r4, [r5, #0]
 8012474:	1c85      	addeq	r5, r0, #2
 8012476:	e7cc      	b.n	8012412 <_strtoul_l.constprop.0+0x22>
 8012478:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801247c:	f1bc 0f19 	cmp.w	ip, #25
 8012480:	d801      	bhi.n	8012486 <_strtoul_l.constprop.0+0x96>
 8012482:	3c37      	subs	r4, #55	; 0x37
 8012484:	e7e3      	b.n	801244e <_strtoul_l.constprop.0+0x5e>
 8012486:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801248a:	f1bc 0f19 	cmp.w	ip, #25
 801248e:	d804      	bhi.n	801249a <_strtoul_l.constprop.0+0xaa>
 8012490:	3c57      	subs	r4, #87	; 0x57
 8012492:	e7dc      	b.n	801244e <_strtoul_l.constprop.0+0x5e>
 8012494:	f04f 37ff 	mov.w	r7, #4294967295
 8012498:	e7e6      	b.n	8012468 <_strtoul_l.constprop.0+0x78>
 801249a:	1c7b      	adds	r3, r7, #1
 801249c:	d106      	bne.n	80124ac <_strtoul_l.constprop.0+0xbc>
 801249e:	2322      	movs	r3, #34	; 0x22
 80124a0:	f8ce 3000 	str.w	r3, [lr]
 80124a4:	4638      	mov	r0, r7
 80124a6:	b932      	cbnz	r2, 80124b6 <_strtoul_l.constprop.0+0xc6>
 80124a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124ac:	b106      	cbz	r6, 80124b0 <_strtoul_l.constprop.0+0xc0>
 80124ae:	4240      	negs	r0, r0
 80124b0:	2a00      	cmp	r2, #0
 80124b2:	d0f9      	beq.n	80124a8 <_strtoul_l.constprop.0+0xb8>
 80124b4:	b107      	cbz	r7, 80124b8 <_strtoul_l.constprop.0+0xc8>
 80124b6:	1e69      	subs	r1, r5, #1
 80124b8:	6011      	str	r1, [r2, #0]
 80124ba:	e7f5      	b.n	80124a8 <_strtoul_l.constprop.0+0xb8>
 80124bc:	2430      	movs	r4, #48	; 0x30
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d1b5      	bne.n	801242e <_strtoul_l.constprop.0+0x3e>
 80124c2:	2308      	movs	r3, #8
 80124c4:	e7b3      	b.n	801242e <_strtoul_l.constprop.0+0x3e>
 80124c6:	2c30      	cmp	r4, #48	; 0x30
 80124c8:	d0a9      	beq.n	801241e <_strtoul_l.constprop.0+0x2e>
 80124ca:	230a      	movs	r3, #10
 80124cc:	e7af      	b.n	801242e <_strtoul_l.constprop.0+0x3e>
 80124ce:	bf00      	nop
 80124d0:	080145b1 	.word	0x080145b1

080124d4 <_strtoul_r>:
 80124d4:	f7ff bf8c 	b.w	80123f0 <_strtoul_l.constprop.0>

080124d8 <__ascii_wctomb>:
 80124d8:	b149      	cbz	r1, 80124ee <__ascii_wctomb+0x16>
 80124da:	2aff      	cmp	r2, #255	; 0xff
 80124dc:	bf85      	ittet	hi
 80124de:	238a      	movhi	r3, #138	; 0x8a
 80124e0:	6003      	strhi	r3, [r0, #0]
 80124e2:	700a      	strbls	r2, [r1, #0]
 80124e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80124e8:	bf98      	it	ls
 80124ea:	2001      	movls	r0, #1
 80124ec:	4770      	bx	lr
 80124ee:	4608      	mov	r0, r1
 80124f0:	4770      	bx	lr
	...

080124f4 <fiprintf>:
 80124f4:	b40e      	push	{r1, r2, r3}
 80124f6:	b503      	push	{r0, r1, lr}
 80124f8:	4601      	mov	r1, r0
 80124fa:	ab03      	add	r3, sp, #12
 80124fc:	4805      	ldr	r0, [pc, #20]	; (8012514 <fiprintf+0x20>)
 80124fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8012502:	6800      	ldr	r0, [r0, #0]
 8012504:	9301      	str	r3, [sp, #4]
 8012506:	f000 f83f 	bl	8012588 <_vfiprintf_r>
 801250a:	b002      	add	sp, #8
 801250c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012510:	b003      	add	sp, #12
 8012512:	4770      	bx	lr
 8012514:	20000130 	.word	0x20000130

08012518 <abort>:
 8012518:	b508      	push	{r3, lr}
 801251a:	2006      	movs	r0, #6
 801251c:	f000 fa0c 	bl	8012938 <raise>
 8012520:	2001      	movs	r0, #1
 8012522:	f7f1 fbe7 	bl	8003cf4 <_exit>

08012526 <_malloc_usable_size_r>:
 8012526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801252a:	1f18      	subs	r0, r3, #4
 801252c:	2b00      	cmp	r3, #0
 801252e:	bfbc      	itt	lt
 8012530:	580b      	ldrlt	r3, [r1, r0]
 8012532:	18c0      	addlt	r0, r0, r3
 8012534:	4770      	bx	lr

08012536 <__sfputc_r>:
 8012536:	6893      	ldr	r3, [r2, #8]
 8012538:	3b01      	subs	r3, #1
 801253a:	2b00      	cmp	r3, #0
 801253c:	b410      	push	{r4}
 801253e:	6093      	str	r3, [r2, #8]
 8012540:	da08      	bge.n	8012554 <__sfputc_r+0x1e>
 8012542:	6994      	ldr	r4, [r2, #24]
 8012544:	42a3      	cmp	r3, r4
 8012546:	db01      	blt.n	801254c <__sfputc_r+0x16>
 8012548:	290a      	cmp	r1, #10
 801254a:	d103      	bne.n	8012554 <__sfputc_r+0x1e>
 801254c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012550:	f000 b934 	b.w	80127bc <__swbuf_r>
 8012554:	6813      	ldr	r3, [r2, #0]
 8012556:	1c58      	adds	r0, r3, #1
 8012558:	6010      	str	r0, [r2, #0]
 801255a:	7019      	strb	r1, [r3, #0]
 801255c:	4608      	mov	r0, r1
 801255e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012562:	4770      	bx	lr

08012564 <__sfputs_r>:
 8012564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012566:	4606      	mov	r6, r0
 8012568:	460f      	mov	r7, r1
 801256a:	4614      	mov	r4, r2
 801256c:	18d5      	adds	r5, r2, r3
 801256e:	42ac      	cmp	r4, r5
 8012570:	d101      	bne.n	8012576 <__sfputs_r+0x12>
 8012572:	2000      	movs	r0, #0
 8012574:	e007      	b.n	8012586 <__sfputs_r+0x22>
 8012576:	f814 1b01 	ldrb.w	r1, [r4], #1
 801257a:	463a      	mov	r2, r7
 801257c:	4630      	mov	r0, r6
 801257e:	f7ff ffda 	bl	8012536 <__sfputc_r>
 8012582:	1c43      	adds	r3, r0, #1
 8012584:	d1f3      	bne.n	801256e <__sfputs_r+0xa>
 8012586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012588 <_vfiprintf_r>:
 8012588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801258c:	460d      	mov	r5, r1
 801258e:	b09d      	sub	sp, #116	; 0x74
 8012590:	4614      	mov	r4, r2
 8012592:	4698      	mov	r8, r3
 8012594:	4606      	mov	r6, r0
 8012596:	b118      	cbz	r0, 80125a0 <_vfiprintf_r+0x18>
 8012598:	6a03      	ldr	r3, [r0, #32]
 801259a:	b90b      	cbnz	r3, 80125a0 <_vfiprintf_r+0x18>
 801259c:	f7fc f8f0 	bl	800e780 <__sinit>
 80125a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80125a2:	07d9      	lsls	r1, r3, #31
 80125a4:	d405      	bmi.n	80125b2 <_vfiprintf_r+0x2a>
 80125a6:	89ab      	ldrh	r3, [r5, #12]
 80125a8:	059a      	lsls	r2, r3, #22
 80125aa:	d402      	bmi.n	80125b2 <_vfiprintf_r+0x2a>
 80125ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125ae:	f7fc fa98 	bl	800eae2 <__retarget_lock_acquire_recursive>
 80125b2:	89ab      	ldrh	r3, [r5, #12]
 80125b4:	071b      	lsls	r3, r3, #28
 80125b6:	d501      	bpl.n	80125bc <_vfiprintf_r+0x34>
 80125b8:	692b      	ldr	r3, [r5, #16]
 80125ba:	b99b      	cbnz	r3, 80125e4 <_vfiprintf_r+0x5c>
 80125bc:	4629      	mov	r1, r5
 80125be:	4630      	mov	r0, r6
 80125c0:	f000 f93a 	bl	8012838 <__swsetup_r>
 80125c4:	b170      	cbz	r0, 80125e4 <_vfiprintf_r+0x5c>
 80125c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80125c8:	07dc      	lsls	r4, r3, #31
 80125ca:	d504      	bpl.n	80125d6 <_vfiprintf_r+0x4e>
 80125cc:	f04f 30ff 	mov.w	r0, #4294967295
 80125d0:	b01d      	add	sp, #116	; 0x74
 80125d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125d6:	89ab      	ldrh	r3, [r5, #12]
 80125d8:	0598      	lsls	r0, r3, #22
 80125da:	d4f7      	bmi.n	80125cc <_vfiprintf_r+0x44>
 80125dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125de:	f7fc fa81 	bl	800eae4 <__retarget_lock_release_recursive>
 80125e2:	e7f3      	b.n	80125cc <_vfiprintf_r+0x44>
 80125e4:	2300      	movs	r3, #0
 80125e6:	9309      	str	r3, [sp, #36]	; 0x24
 80125e8:	2320      	movs	r3, #32
 80125ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80125ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80125f2:	2330      	movs	r3, #48	; 0x30
 80125f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80127a8 <_vfiprintf_r+0x220>
 80125f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80125fc:	f04f 0901 	mov.w	r9, #1
 8012600:	4623      	mov	r3, r4
 8012602:	469a      	mov	sl, r3
 8012604:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012608:	b10a      	cbz	r2, 801260e <_vfiprintf_r+0x86>
 801260a:	2a25      	cmp	r2, #37	; 0x25
 801260c:	d1f9      	bne.n	8012602 <_vfiprintf_r+0x7a>
 801260e:	ebba 0b04 	subs.w	fp, sl, r4
 8012612:	d00b      	beq.n	801262c <_vfiprintf_r+0xa4>
 8012614:	465b      	mov	r3, fp
 8012616:	4622      	mov	r2, r4
 8012618:	4629      	mov	r1, r5
 801261a:	4630      	mov	r0, r6
 801261c:	f7ff ffa2 	bl	8012564 <__sfputs_r>
 8012620:	3001      	adds	r0, #1
 8012622:	f000 80a9 	beq.w	8012778 <_vfiprintf_r+0x1f0>
 8012626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012628:	445a      	add	r2, fp
 801262a:	9209      	str	r2, [sp, #36]	; 0x24
 801262c:	f89a 3000 	ldrb.w	r3, [sl]
 8012630:	2b00      	cmp	r3, #0
 8012632:	f000 80a1 	beq.w	8012778 <_vfiprintf_r+0x1f0>
 8012636:	2300      	movs	r3, #0
 8012638:	f04f 32ff 	mov.w	r2, #4294967295
 801263c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012640:	f10a 0a01 	add.w	sl, sl, #1
 8012644:	9304      	str	r3, [sp, #16]
 8012646:	9307      	str	r3, [sp, #28]
 8012648:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801264c:	931a      	str	r3, [sp, #104]	; 0x68
 801264e:	4654      	mov	r4, sl
 8012650:	2205      	movs	r2, #5
 8012652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012656:	4854      	ldr	r0, [pc, #336]	; (80127a8 <_vfiprintf_r+0x220>)
 8012658:	f7ed fdba 	bl	80001d0 <memchr>
 801265c:	9a04      	ldr	r2, [sp, #16]
 801265e:	b9d8      	cbnz	r0, 8012698 <_vfiprintf_r+0x110>
 8012660:	06d1      	lsls	r1, r2, #27
 8012662:	bf44      	itt	mi
 8012664:	2320      	movmi	r3, #32
 8012666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801266a:	0713      	lsls	r3, r2, #28
 801266c:	bf44      	itt	mi
 801266e:	232b      	movmi	r3, #43	; 0x2b
 8012670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012674:	f89a 3000 	ldrb.w	r3, [sl]
 8012678:	2b2a      	cmp	r3, #42	; 0x2a
 801267a:	d015      	beq.n	80126a8 <_vfiprintf_r+0x120>
 801267c:	9a07      	ldr	r2, [sp, #28]
 801267e:	4654      	mov	r4, sl
 8012680:	2000      	movs	r0, #0
 8012682:	f04f 0c0a 	mov.w	ip, #10
 8012686:	4621      	mov	r1, r4
 8012688:	f811 3b01 	ldrb.w	r3, [r1], #1
 801268c:	3b30      	subs	r3, #48	; 0x30
 801268e:	2b09      	cmp	r3, #9
 8012690:	d94d      	bls.n	801272e <_vfiprintf_r+0x1a6>
 8012692:	b1b0      	cbz	r0, 80126c2 <_vfiprintf_r+0x13a>
 8012694:	9207      	str	r2, [sp, #28]
 8012696:	e014      	b.n	80126c2 <_vfiprintf_r+0x13a>
 8012698:	eba0 0308 	sub.w	r3, r0, r8
 801269c:	fa09 f303 	lsl.w	r3, r9, r3
 80126a0:	4313      	orrs	r3, r2
 80126a2:	9304      	str	r3, [sp, #16]
 80126a4:	46a2      	mov	sl, r4
 80126a6:	e7d2      	b.n	801264e <_vfiprintf_r+0xc6>
 80126a8:	9b03      	ldr	r3, [sp, #12]
 80126aa:	1d19      	adds	r1, r3, #4
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	9103      	str	r1, [sp, #12]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	bfbb      	ittet	lt
 80126b4:	425b      	neglt	r3, r3
 80126b6:	f042 0202 	orrlt.w	r2, r2, #2
 80126ba:	9307      	strge	r3, [sp, #28]
 80126bc:	9307      	strlt	r3, [sp, #28]
 80126be:	bfb8      	it	lt
 80126c0:	9204      	strlt	r2, [sp, #16]
 80126c2:	7823      	ldrb	r3, [r4, #0]
 80126c4:	2b2e      	cmp	r3, #46	; 0x2e
 80126c6:	d10c      	bne.n	80126e2 <_vfiprintf_r+0x15a>
 80126c8:	7863      	ldrb	r3, [r4, #1]
 80126ca:	2b2a      	cmp	r3, #42	; 0x2a
 80126cc:	d134      	bne.n	8012738 <_vfiprintf_r+0x1b0>
 80126ce:	9b03      	ldr	r3, [sp, #12]
 80126d0:	1d1a      	adds	r2, r3, #4
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	9203      	str	r2, [sp, #12]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	bfb8      	it	lt
 80126da:	f04f 33ff 	movlt.w	r3, #4294967295
 80126de:	3402      	adds	r4, #2
 80126e0:	9305      	str	r3, [sp, #20]
 80126e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80127b8 <_vfiprintf_r+0x230>
 80126e6:	7821      	ldrb	r1, [r4, #0]
 80126e8:	2203      	movs	r2, #3
 80126ea:	4650      	mov	r0, sl
 80126ec:	f7ed fd70 	bl	80001d0 <memchr>
 80126f0:	b138      	cbz	r0, 8012702 <_vfiprintf_r+0x17a>
 80126f2:	9b04      	ldr	r3, [sp, #16]
 80126f4:	eba0 000a 	sub.w	r0, r0, sl
 80126f8:	2240      	movs	r2, #64	; 0x40
 80126fa:	4082      	lsls	r2, r0
 80126fc:	4313      	orrs	r3, r2
 80126fe:	3401      	adds	r4, #1
 8012700:	9304      	str	r3, [sp, #16]
 8012702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012706:	4829      	ldr	r0, [pc, #164]	; (80127ac <_vfiprintf_r+0x224>)
 8012708:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801270c:	2206      	movs	r2, #6
 801270e:	f7ed fd5f 	bl	80001d0 <memchr>
 8012712:	2800      	cmp	r0, #0
 8012714:	d03f      	beq.n	8012796 <_vfiprintf_r+0x20e>
 8012716:	4b26      	ldr	r3, [pc, #152]	; (80127b0 <_vfiprintf_r+0x228>)
 8012718:	bb1b      	cbnz	r3, 8012762 <_vfiprintf_r+0x1da>
 801271a:	9b03      	ldr	r3, [sp, #12]
 801271c:	3307      	adds	r3, #7
 801271e:	f023 0307 	bic.w	r3, r3, #7
 8012722:	3308      	adds	r3, #8
 8012724:	9303      	str	r3, [sp, #12]
 8012726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012728:	443b      	add	r3, r7
 801272a:	9309      	str	r3, [sp, #36]	; 0x24
 801272c:	e768      	b.n	8012600 <_vfiprintf_r+0x78>
 801272e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012732:	460c      	mov	r4, r1
 8012734:	2001      	movs	r0, #1
 8012736:	e7a6      	b.n	8012686 <_vfiprintf_r+0xfe>
 8012738:	2300      	movs	r3, #0
 801273a:	3401      	adds	r4, #1
 801273c:	9305      	str	r3, [sp, #20]
 801273e:	4619      	mov	r1, r3
 8012740:	f04f 0c0a 	mov.w	ip, #10
 8012744:	4620      	mov	r0, r4
 8012746:	f810 2b01 	ldrb.w	r2, [r0], #1
 801274a:	3a30      	subs	r2, #48	; 0x30
 801274c:	2a09      	cmp	r2, #9
 801274e:	d903      	bls.n	8012758 <_vfiprintf_r+0x1d0>
 8012750:	2b00      	cmp	r3, #0
 8012752:	d0c6      	beq.n	80126e2 <_vfiprintf_r+0x15a>
 8012754:	9105      	str	r1, [sp, #20]
 8012756:	e7c4      	b.n	80126e2 <_vfiprintf_r+0x15a>
 8012758:	fb0c 2101 	mla	r1, ip, r1, r2
 801275c:	4604      	mov	r4, r0
 801275e:	2301      	movs	r3, #1
 8012760:	e7f0      	b.n	8012744 <_vfiprintf_r+0x1bc>
 8012762:	ab03      	add	r3, sp, #12
 8012764:	9300      	str	r3, [sp, #0]
 8012766:	462a      	mov	r2, r5
 8012768:	4b12      	ldr	r3, [pc, #72]	; (80127b4 <_vfiprintf_r+0x22c>)
 801276a:	a904      	add	r1, sp, #16
 801276c:	4630      	mov	r0, r6
 801276e:	f7fb f9a5 	bl	800dabc <_printf_float>
 8012772:	4607      	mov	r7, r0
 8012774:	1c78      	adds	r0, r7, #1
 8012776:	d1d6      	bne.n	8012726 <_vfiprintf_r+0x19e>
 8012778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801277a:	07d9      	lsls	r1, r3, #31
 801277c:	d405      	bmi.n	801278a <_vfiprintf_r+0x202>
 801277e:	89ab      	ldrh	r3, [r5, #12]
 8012780:	059a      	lsls	r2, r3, #22
 8012782:	d402      	bmi.n	801278a <_vfiprintf_r+0x202>
 8012784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012786:	f7fc f9ad 	bl	800eae4 <__retarget_lock_release_recursive>
 801278a:	89ab      	ldrh	r3, [r5, #12]
 801278c:	065b      	lsls	r3, r3, #25
 801278e:	f53f af1d 	bmi.w	80125cc <_vfiprintf_r+0x44>
 8012792:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012794:	e71c      	b.n	80125d0 <_vfiprintf_r+0x48>
 8012796:	ab03      	add	r3, sp, #12
 8012798:	9300      	str	r3, [sp, #0]
 801279a:	462a      	mov	r2, r5
 801279c:	4b05      	ldr	r3, [pc, #20]	; (80127b4 <_vfiprintf_r+0x22c>)
 801279e:	a904      	add	r1, sp, #16
 80127a0:	4630      	mov	r0, r6
 80127a2:	f7fb fc2f 	bl	800e004 <_printf_i>
 80127a6:	e7e4      	b.n	8012772 <_vfiprintf_r+0x1ea>
 80127a8:	080146b1 	.word	0x080146b1
 80127ac:	080146bb 	.word	0x080146bb
 80127b0:	0800dabd 	.word	0x0800dabd
 80127b4:	08012565 	.word	0x08012565
 80127b8:	080146b7 	.word	0x080146b7

080127bc <__swbuf_r>:
 80127bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127be:	460e      	mov	r6, r1
 80127c0:	4614      	mov	r4, r2
 80127c2:	4605      	mov	r5, r0
 80127c4:	b118      	cbz	r0, 80127ce <__swbuf_r+0x12>
 80127c6:	6a03      	ldr	r3, [r0, #32]
 80127c8:	b90b      	cbnz	r3, 80127ce <__swbuf_r+0x12>
 80127ca:	f7fb ffd9 	bl	800e780 <__sinit>
 80127ce:	69a3      	ldr	r3, [r4, #24]
 80127d0:	60a3      	str	r3, [r4, #8]
 80127d2:	89a3      	ldrh	r3, [r4, #12]
 80127d4:	071a      	lsls	r2, r3, #28
 80127d6:	d525      	bpl.n	8012824 <__swbuf_r+0x68>
 80127d8:	6923      	ldr	r3, [r4, #16]
 80127da:	b31b      	cbz	r3, 8012824 <__swbuf_r+0x68>
 80127dc:	6823      	ldr	r3, [r4, #0]
 80127de:	6922      	ldr	r2, [r4, #16]
 80127e0:	1a98      	subs	r0, r3, r2
 80127e2:	6963      	ldr	r3, [r4, #20]
 80127e4:	b2f6      	uxtb	r6, r6
 80127e6:	4283      	cmp	r3, r0
 80127e8:	4637      	mov	r7, r6
 80127ea:	dc04      	bgt.n	80127f6 <__swbuf_r+0x3a>
 80127ec:	4621      	mov	r1, r4
 80127ee:	4628      	mov	r0, r5
 80127f0:	f7ff f952 	bl	8011a98 <_fflush_r>
 80127f4:	b9e0      	cbnz	r0, 8012830 <__swbuf_r+0x74>
 80127f6:	68a3      	ldr	r3, [r4, #8]
 80127f8:	3b01      	subs	r3, #1
 80127fa:	60a3      	str	r3, [r4, #8]
 80127fc:	6823      	ldr	r3, [r4, #0]
 80127fe:	1c5a      	adds	r2, r3, #1
 8012800:	6022      	str	r2, [r4, #0]
 8012802:	701e      	strb	r6, [r3, #0]
 8012804:	6962      	ldr	r2, [r4, #20]
 8012806:	1c43      	adds	r3, r0, #1
 8012808:	429a      	cmp	r2, r3
 801280a:	d004      	beq.n	8012816 <__swbuf_r+0x5a>
 801280c:	89a3      	ldrh	r3, [r4, #12]
 801280e:	07db      	lsls	r3, r3, #31
 8012810:	d506      	bpl.n	8012820 <__swbuf_r+0x64>
 8012812:	2e0a      	cmp	r6, #10
 8012814:	d104      	bne.n	8012820 <__swbuf_r+0x64>
 8012816:	4621      	mov	r1, r4
 8012818:	4628      	mov	r0, r5
 801281a:	f7ff f93d 	bl	8011a98 <_fflush_r>
 801281e:	b938      	cbnz	r0, 8012830 <__swbuf_r+0x74>
 8012820:	4638      	mov	r0, r7
 8012822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012824:	4621      	mov	r1, r4
 8012826:	4628      	mov	r0, r5
 8012828:	f000 f806 	bl	8012838 <__swsetup_r>
 801282c:	2800      	cmp	r0, #0
 801282e:	d0d5      	beq.n	80127dc <__swbuf_r+0x20>
 8012830:	f04f 37ff 	mov.w	r7, #4294967295
 8012834:	e7f4      	b.n	8012820 <__swbuf_r+0x64>
	...

08012838 <__swsetup_r>:
 8012838:	b538      	push	{r3, r4, r5, lr}
 801283a:	4b2a      	ldr	r3, [pc, #168]	; (80128e4 <__swsetup_r+0xac>)
 801283c:	4605      	mov	r5, r0
 801283e:	6818      	ldr	r0, [r3, #0]
 8012840:	460c      	mov	r4, r1
 8012842:	b118      	cbz	r0, 801284c <__swsetup_r+0x14>
 8012844:	6a03      	ldr	r3, [r0, #32]
 8012846:	b90b      	cbnz	r3, 801284c <__swsetup_r+0x14>
 8012848:	f7fb ff9a 	bl	800e780 <__sinit>
 801284c:	89a3      	ldrh	r3, [r4, #12]
 801284e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012852:	0718      	lsls	r0, r3, #28
 8012854:	d422      	bmi.n	801289c <__swsetup_r+0x64>
 8012856:	06d9      	lsls	r1, r3, #27
 8012858:	d407      	bmi.n	801286a <__swsetup_r+0x32>
 801285a:	2309      	movs	r3, #9
 801285c:	602b      	str	r3, [r5, #0]
 801285e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012862:	81a3      	strh	r3, [r4, #12]
 8012864:	f04f 30ff 	mov.w	r0, #4294967295
 8012868:	e034      	b.n	80128d4 <__swsetup_r+0x9c>
 801286a:	0758      	lsls	r0, r3, #29
 801286c:	d512      	bpl.n	8012894 <__swsetup_r+0x5c>
 801286e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012870:	b141      	cbz	r1, 8012884 <__swsetup_r+0x4c>
 8012872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012876:	4299      	cmp	r1, r3
 8012878:	d002      	beq.n	8012880 <__swsetup_r+0x48>
 801287a:	4628      	mov	r0, r5
 801287c:	f7fc ffca 	bl	800f814 <_free_r>
 8012880:	2300      	movs	r3, #0
 8012882:	6363      	str	r3, [r4, #52]	; 0x34
 8012884:	89a3      	ldrh	r3, [r4, #12]
 8012886:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801288a:	81a3      	strh	r3, [r4, #12]
 801288c:	2300      	movs	r3, #0
 801288e:	6063      	str	r3, [r4, #4]
 8012890:	6923      	ldr	r3, [r4, #16]
 8012892:	6023      	str	r3, [r4, #0]
 8012894:	89a3      	ldrh	r3, [r4, #12]
 8012896:	f043 0308 	orr.w	r3, r3, #8
 801289a:	81a3      	strh	r3, [r4, #12]
 801289c:	6923      	ldr	r3, [r4, #16]
 801289e:	b94b      	cbnz	r3, 80128b4 <__swsetup_r+0x7c>
 80128a0:	89a3      	ldrh	r3, [r4, #12]
 80128a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80128a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128aa:	d003      	beq.n	80128b4 <__swsetup_r+0x7c>
 80128ac:	4621      	mov	r1, r4
 80128ae:	4628      	mov	r0, r5
 80128b0:	f000 f884 	bl	80129bc <__smakebuf_r>
 80128b4:	89a0      	ldrh	r0, [r4, #12]
 80128b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80128ba:	f010 0301 	ands.w	r3, r0, #1
 80128be:	d00a      	beq.n	80128d6 <__swsetup_r+0x9e>
 80128c0:	2300      	movs	r3, #0
 80128c2:	60a3      	str	r3, [r4, #8]
 80128c4:	6963      	ldr	r3, [r4, #20]
 80128c6:	425b      	negs	r3, r3
 80128c8:	61a3      	str	r3, [r4, #24]
 80128ca:	6923      	ldr	r3, [r4, #16]
 80128cc:	b943      	cbnz	r3, 80128e0 <__swsetup_r+0xa8>
 80128ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80128d2:	d1c4      	bne.n	801285e <__swsetup_r+0x26>
 80128d4:	bd38      	pop	{r3, r4, r5, pc}
 80128d6:	0781      	lsls	r1, r0, #30
 80128d8:	bf58      	it	pl
 80128da:	6963      	ldrpl	r3, [r4, #20]
 80128dc:	60a3      	str	r3, [r4, #8]
 80128de:	e7f4      	b.n	80128ca <__swsetup_r+0x92>
 80128e0:	2000      	movs	r0, #0
 80128e2:	e7f7      	b.n	80128d4 <__swsetup_r+0x9c>
 80128e4:	20000130 	.word	0x20000130

080128e8 <_raise_r>:
 80128e8:	291f      	cmp	r1, #31
 80128ea:	b538      	push	{r3, r4, r5, lr}
 80128ec:	4604      	mov	r4, r0
 80128ee:	460d      	mov	r5, r1
 80128f0:	d904      	bls.n	80128fc <_raise_r+0x14>
 80128f2:	2316      	movs	r3, #22
 80128f4:	6003      	str	r3, [r0, #0]
 80128f6:	f04f 30ff 	mov.w	r0, #4294967295
 80128fa:	bd38      	pop	{r3, r4, r5, pc}
 80128fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80128fe:	b112      	cbz	r2, 8012906 <_raise_r+0x1e>
 8012900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012904:	b94b      	cbnz	r3, 801291a <_raise_r+0x32>
 8012906:	4620      	mov	r0, r4
 8012908:	f000 f830 	bl	801296c <_getpid_r>
 801290c:	462a      	mov	r2, r5
 801290e:	4601      	mov	r1, r0
 8012910:	4620      	mov	r0, r4
 8012912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012916:	f000 b817 	b.w	8012948 <_kill_r>
 801291a:	2b01      	cmp	r3, #1
 801291c:	d00a      	beq.n	8012934 <_raise_r+0x4c>
 801291e:	1c59      	adds	r1, r3, #1
 8012920:	d103      	bne.n	801292a <_raise_r+0x42>
 8012922:	2316      	movs	r3, #22
 8012924:	6003      	str	r3, [r0, #0]
 8012926:	2001      	movs	r0, #1
 8012928:	e7e7      	b.n	80128fa <_raise_r+0x12>
 801292a:	2400      	movs	r4, #0
 801292c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012930:	4628      	mov	r0, r5
 8012932:	4798      	blx	r3
 8012934:	2000      	movs	r0, #0
 8012936:	e7e0      	b.n	80128fa <_raise_r+0x12>

08012938 <raise>:
 8012938:	4b02      	ldr	r3, [pc, #8]	; (8012944 <raise+0xc>)
 801293a:	4601      	mov	r1, r0
 801293c:	6818      	ldr	r0, [r3, #0]
 801293e:	f7ff bfd3 	b.w	80128e8 <_raise_r>
 8012942:	bf00      	nop
 8012944:	20000130 	.word	0x20000130

08012948 <_kill_r>:
 8012948:	b538      	push	{r3, r4, r5, lr}
 801294a:	4d07      	ldr	r5, [pc, #28]	; (8012968 <_kill_r+0x20>)
 801294c:	2300      	movs	r3, #0
 801294e:	4604      	mov	r4, r0
 8012950:	4608      	mov	r0, r1
 8012952:	4611      	mov	r1, r2
 8012954:	602b      	str	r3, [r5, #0]
 8012956:	f7f1 f9bd 	bl	8003cd4 <_kill>
 801295a:	1c43      	adds	r3, r0, #1
 801295c:	d102      	bne.n	8012964 <_kill_r+0x1c>
 801295e:	682b      	ldr	r3, [r5, #0]
 8012960:	b103      	cbz	r3, 8012964 <_kill_r+0x1c>
 8012962:	6023      	str	r3, [r4, #0]
 8012964:	bd38      	pop	{r3, r4, r5, pc}
 8012966:	bf00      	nop
 8012968:	20008c68 	.word	0x20008c68

0801296c <_getpid_r>:
 801296c:	f7f1 b9aa 	b.w	8003cc4 <_getpid>

08012970 <__swhatbuf_r>:
 8012970:	b570      	push	{r4, r5, r6, lr}
 8012972:	460c      	mov	r4, r1
 8012974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012978:	2900      	cmp	r1, #0
 801297a:	b096      	sub	sp, #88	; 0x58
 801297c:	4615      	mov	r5, r2
 801297e:	461e      	mov	r6, r3
 8012980:	da0d      	bge.n	801299e <__swhatbuf_r+0x2e>
 8012982:	89a3      	ldrh	r3, [r4, #12]
 8012984:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012988:	f04f 0100 	mov.w	r1, #0
 801298c:	bf0c      	ite	eq
 801298e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012992:	2340      	movne	r3, #64	; 0x40
 8012994:	2000      	movs	r0, #0
 8012996:	6031      	str	r1, [r6, #0]
 8012998:	602b      	str	r3, [r5, #0]
 801299a:	b016      	add	sp, #88	; 0x58
 801299c:	bd70      	pop	{r4, r5, r6, pc}
 801299e:	466a      	mov	r2, sp
 80129a0:	f000 f848 	bl	8012a34 <_fstat_r>
 80129a4:	2800      	cmp	r0, #0
 80129a6:	dbec      	blt.n	8012982 <__swhatbuf_r+0x12>
 80129a8:	9901      	ldr	r1, [sp, #4]
 80129aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80129ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80129b2:	4259      	negs	r1, r3
 80129b4:	4159      	adcs	r1, r3
 80129b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80129ba:	e7eb      	b.n	8012994 <__swhatbuf_r+0x24>

080129bc <__smakebuf_r>:
 80129bc:	898b      	ldrh	r3, [r1, #12]
 80129be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80129c0:	079d      	lsls	r5, r3, #30
 80129c2:	4606      	mov	r6, r0
 80129c4:	460c      	mov	r4, r1
 80129c6:	d507      	bpl.n	80129d8 <__smakebuf_r+0x1c>
 80129c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80129cc:	6023      	str	r3, [r4, #0]
 80129ce:	6123      	str	r3, [r4, #16]
 80129d0:	2301      	movs	r3, #1
 80129d2:	6163      	str	r3, [r4, #20]
 80129d4:	b002      	add	sp, #8
 80129d6:	bd70      	pop	{r4, r5, r6, pc}
 80129d8:	ab01      	add	r3, sp, #4
 80129da:	466a      	mov	r2, sp
 80129dc:	f7ff ffc8 	bl	8012970 <__swhatbuf_r>
 80129e0:	9900      	ldr	r1, [sp, #0]
 80129e2:	4605      	mov	r5, r0
 80129e4:	4630      	mov	r0, r6
 80129e6:	f7fc ff89 	bl	800f8fc <_malloc_r>
 80129ea:	b948      	cbnz	r0, 8012a00 <__smakebuf_r+0x44>
 80129ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129f0:	059a      	lsls	r2, r3, #22
 80129f2:	d4ef      	bmi.n	80129d4 <__smakebuf_r+0x18>
 80129f4:	f023 0303 	bic.w	r3, r3, #3
 80129f8:	f043 0302 	orr.w	r3, r3, #2
 80129fc:	81a3      	strh	r3, [r4, #12]
 80129fe:	e7e3      	b.n	80129c8 <__smakebuf_r+0xc>
 8012a00:	89a3      	ldrh	r3, [r4, #12]
 8012a02:	6020      	str	r0, [r4, #0]
 8012a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a08:	81a3      	strh	r3, [r4, #12]
 8012a0a:	9b00      	ldr	r3, [sp, #0]
 8012a0c:	6163      	str	r3, [r4, #20]
 8012a0e:	9b01      	ldr	r3, [sp, #4]
 8012a10:	6120      	str	r0, [r4, #16]
 8012a12:	b15b      	cbz	r3, 8012a2c <__smakebuf_r+0x70>
 8012a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a18:	4630      	mov	r0, r6
 8012a1a:	f000 f81d 	bl	8012a58 <_isatty_r>
 8012a1e:	b128      	cbz	r0, 8012a2c <__smakebuf_r+0x70>
 8012a20:	89a3      	ldrh	r3, [r4, #12]
 8012a22:	f023 0303 	bic.w	r3, r3, #3
 8012a26:	f043 0301 	orr.w	r3, r3, #1
 8012a2a:	81a3      	strh	r3, [r4, #12]
 8012a2c:	89a3      	ldrh	r3, [r4, #12]
 8012a2e:	431d      	orrs	r5, r3
 8012a30:	81a5      	strh	r5, [r4, #12]
 8012a32:	e7cf      	b.n	80129d4 <__smakebuf_r+0x18>

08012a34 <_fstat_r>:
 8012a34:	b538      	push	{r3, r4, r5, lr}
 8012a36:	4d07      	ldr	r5, [pc, #28]	; (8012a54 <_fstat_r+0x20>)
 8012a38:	2300      	movs	r3, #0
 8012a3a:	4604      	mov	r4, r0
 8012a3c:	4608      	mov	r0, r1
 8012a3e:	4611      	mov	r1, r2
 8012a40:	602b      	str	r3, [r5, #0]
 8012a42:	f7f1 f9a6 	bl	8003d92 <_fstat>
 8012a46:	1c43      	adds	r3, r0, #1
 8012a48:	d102      	bne.n	8012a50 <_fstat_r+0x1c>
 8012a4a:	682b      	ldr	r3, [r5, #0]
 8012a4c:	b103      	cbz	r3, 8012a50 <_fstat_r+0x1c>
 8012a4e:	6023      	str	r3, [r4, #0]
 8012a50:	bd38      	pop	{r3, r4, r5, pc}
 8012a52:	bf00      	nop
 8012a54:	20008c68 	.word	0x20008c68

08012a58 <_isatty_r>:
 8012a58:	b538      	push	{r3, r4, r5, lr}
 8012a5a:	4d06      	ldr	r5, [pc, #24]	; (8012a74 <_isatty_r+0x1c>)
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	4604      	mov	r4, r0
 8012a60:	4608      	mov	r0, r1
 8012a62:	602b      	str	r3, [r5, #0]
 8012a64:	f7f1 f9a5 	bl	8003db2 <_isatty>
 8012a68:	1c43      	adds	r3, r0, #1
 8012a6a:	d102      	bne.n	8012a72 <_isatty_r+0x1a>
 8012a6c:	682b      	ldr	r3, [r5, #0]
 8012a6e:	b103      	cbz	r3, 8012a72 <_isatty_r+0x1a>
 8012a70:	6023      	str	r3, [r4, #0]
 8012a72:	bd38      	pop	{r3, r4, r5, pc}
 8012a74:	20008c68 	.word	0x20008c68

08012a78 <atan2>:
 8012a78:	f000 bb6e 	b.w	8013158 <__ieee754_atan2>
 8012a7c:	0000      	movs	r0, r0
	...

08012a80 <log>:
 8012a80:	b538      	push	{r3, r4, r5, lr}
 8012a82:	ed2d 8b02 	vpush	{d8}
 8012a86:	ec55 4b10 	vmov	r4, r5, d0
 8012a8a:	f000 fc2d 	bl	80132e8 <__ieee754_log>
 8012a8e:	4622      	mov	r2, r4
 8012a90:	462b      	mov	r3, r5
 8012a92:	4620      	mov	r0, r4
 8012a94:	4629      	mov	r1, r5
 8012a96:	eeb0 8a40 	vmov.f32	s16, s0
 8012a9a:	eef0 8a60 	vmov.f32	s17, s1
 8012a9e:	f7ee f845 	bl	8000b2c <__aeabi_dcmpun>
 8012aa2:	b998      	cbnz	r0, 8012acc <log+0x4c>
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	4629      	mov	r1, r5
 8012aac:	f7ee f834 	bl	8000b18 <__aeabi_dcmpgt>
 8012ab0:	b960      	cbnz	r0, 8012acc <log+0x4c>
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	4629      	mov	r1, r5
 8012aba:	f7ee f805 	bl	8000ac8 <__aeabi_dcmpeq>
 8012abe:	b160      	cbz	r0, 8012ada <log+0x5a>
 8012ac0:	f7fb ffe4 	bl	800ea8c <__errno>
 8012ac4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8012af0 <log+0x70>
 8012ac8:	2322      	movs	r3, #34	; 0x22
 8012aca:	6003      	str	r3, [r0, #0]
 8012acc:	eeb0 0a48 	vmov.f32	s0, s16
 8012ad0:	eef0 0a68 	vmov.f32	s1, s17
 8012ad4:	ecbd 8b02 	vpop	{d8}
 8012ad8:	bd38      	pop	{r3, r4, r5, pc}
 8012ada:	f7fb ffd7 	bl	800ea8c <__errno>
 8012ade:	ecbd 8b02 	vpop	{d8}
 8012ae2:	2321      	movs	r3, #33	; 0x21
 8012ae4:	6003      	str	r3, [r0, #0]
 8012ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012aea:	4803      	ldr	r0, [pc, #12]	; (8012af8 <log+0x78>)
 8012aec:	f7ff b8ac 	b.w	8011c48 <nan>
 8012af0:	00000000 	.word	0x00000000
 8012af4:	fff00000 	.word	0xfff00000
 8012af8:	08014720 	.word	0x08014720

08012afc <pow>:
 8012afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012afe:	ed2d 8b02 	vpush	{d8}
 8012b02:	eeb0 8a40 	vmov.f32	s16, s0
 8012b06:	eef0 8a60 	vmov.f32	s17, s1
 8012b0a:	ec55 4b11 	vmov	r4, r5, d1
 8012b0e:	f000 fda7 	bl	8013660 <__ieee754_pow>
 8012b12:	4622      	mov	r2, r4
 8012b14:	462b      	mov	r3, r5
 8012b16:	4620      	mov	r0, r4
 8012b18:	4629      	mov	r1, r5
 8012b1a:	ec57 6b10 	vmov	r6, r7, d0
 8012b1e:	f7ee f805 	bl	8000b2c <__aeabi_dcmpun>
 8012b22:	2800      	cmp	r0, #0
 8012b24:	d13b      	bne.n	8012b9e <pow+0xa2>
 8012b26:	ec51 0b18 	vmov	r0, r1, d8
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	f7ed ffcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b32:	b1b8      	cbz	r0, 8012b64 <pow+0x68>
 8012b34:	2200      	movs	r2, #0
 8012b36:	2300      	movs	r3, #0
 8012b38:	4620      	mov	r0, r4
 8012b3a:	4629      	mov	r1, r5
 8012b3c:	f7ed ffc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b40:	2800      	cmp	r0, #0
 8012b42:	d146      	bne.n	8012bd2 <pow+0xd6>
 8012b44:	ec45 4b10 	vmov	d0, r4, r5
 8012b48:	f000 fa1f 	bl	8012f8a <finite>
 8012b4c:	b338      	cbz	r0, 8012b9e <pow+0xa2>
 8012b4e:	2200      	movs	r2, #0
 8012b50:	2300      	movs	r3, #0
 8012b52:	4620      	mov	r0, r4
 8012b54:	4629      	mov	r1, r5
 8012b56:	f7ed ffc1 	bl	8000adc <__aeabi_dcmplt>
 8012b5a:	b300      	cbz	r0, 8012b9e <pow+0xa2>
 8012b5c:	f7fb ff96 	bl	800ea8c <__errno>
 8012b60:	2322      	movs	r3, #34	; 0x22
 8012b62:	e01b      	b.n	8012b9c <pow+0xa0>
 8012b64:	ec47 6b10 	vmov	d0, r6, r7
 8012b68:	f000 fa0f 	bl	8012f8a <finite>
 8012b6c:	b9e0      	cbnz	r0, 8012ba8 <pow+0xac>
 8012b6e:	eeb0 0a48 	vmov.f32	s0, s16
 8012b72:	eef0 0a68 	vmov.f32	s1, s17
 8012b76:	f000 fa08 	bl	8012f8a <finite>
 8012b7a:	b1a8      	cbz	r0, 8012ba8 <pow+0xac>
 8012b7c:	ec45 4b10 	vmov	d0, r4, r5
 8012b80:	f000 fa03 	bl	8012f8a <finite>
 8012b84:	b180      	cbz	r0, 8012ba8 <pow+0xac>
 8012b86:	4632      	mov	r2, r6
 8012b88:	463b      	mov	r3, r7
 8012b8a:	4630      	mov	r0, r6
 8012b8c:	4639      	mov	r1, r7
 8012b8e:	f7ed ffcd 	bl	8000b2c <__aeabi_dcmpun>
 8012b92:	2800      	cmp	r0, #0
 8012b94:	d0e2      	beq.n	8012b5c <pow+0x60>
 8012b96:	f7fb ff79 	bl	800ea8c <__errno>
 8012b9a:	2321      	movs	r3, #33	; 0x21
 8012b9c:	6003      	str	r3, [r0, #0]
 8012b9e:	ecbd 8b02 	vpop	{d8}
 8012ba2:	ec47 6b10 	vmov	d0, r6, r7
 8012ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ba8:	2200      	movs	r2, #0
 8012baa:	2300      	movs	r3, #0
 8012bac:	4630      	mov	r0, r6
 8012bae:	4639      	mov	r1, r7
 8012bb0:	f7ed ff8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8012bb4:	2800      	cmp	r0, #0
 8012bb6:	d0f2      	beq.n	8012b9e <pow+0xa2>
 8012bb8:	eeb0 0a48 	vmov.f32	s0, s16
 8012bbc:	eef0 0a68 	vmov.f32	s1, s17
 8012bc0:	f000 f9e3 	bl	8012f8a <finite>
 8012bc4:	2800      	cmp	r0, #0
 8012bc6:	d0ea      	beq.n	8012b9e <pow+0xa2>
 8012bc8:	ec45 4b10 	vmov	d0, r4, r5
 8012bcc:	f000 f9dd 	bl	8012f8a <finite>
 8012bd0:	e7c3      	b.n	8012b5a <pow+0x5e>
 8012bd2:	4f01      	ldr	r7, [pc, #4]	; (8012bd8 <pow+0xdc>)
 8012bd4:	2600      	movs	r6, #0
 8012bd6:	e7e2      	b.n	8012b9e <pow+0xa2>
 8012bd8:	3ff00000 	.word	0x3ff00000

08012bdc <sqrt>:
 8012bdc:	b538      	push	{r3, r4, r5, lr}
 8012bde:	ed2d 8b02 	vpush	{d8}
 8012be2:	ec55 4b10 	vmov	r4, r5, d0
 8012be6:	f000 f9db 	bl	8012fa0 <__ieee754_sqrt>
 8012bea:	4622      	mov	r2, r4
 8012bec:	462b      	mov	r3, r5
 8012bee:	4620      	mov	r0, r4
 8012bf0:	4629      	mov	r1, r5
 8012bf2:	eeb0 8a40 	vmov.f32	s16, s0
 8012bf6:	eef0 8a60 	vmov.f32	s17, s1
 8012bfa:	f7ed ff97 	bl	8000b2c <__aeabi_dcmpun>
 8012bfe:	b990      	cbnz	r0, 8012c26 <sqrt+0x4a>
 8012c00:	2200      	movs	r2, #0
 8012c02:	2300      	movs	r3, #0
 8012c04:	4620      	mov	r0, r4
 8012c06:	4629      	mov	r1, r5
 8012c08:	f7ed ff68 	bl	8000adc <__aeabi_dcmplt>
 8012c0c:	b158      	cbz	r0, 8012c26 <sqrt+0x4a>
 8012c0e:	f7fb ff3d 	bl	800ea8c <__errno>
 8012c12:	2321      	movs	r3, #33	; 0x21
 8012c14:	6003      	str	r3, [r0, #0]
 8012c16:	2200      	movs	r2, #0
 8012c18:	2300      	movs	r3, #0
 8012c1a:	4610      	mov	r0, r2
 8012c1c:	4619      	mov	r1, r3
 8012c1e:	f7ed fe15 	bl	800084c <__aeabi_ddiv>
 8012c22:	ec41 0b18 	vmov	d8, r0, r1
 8012c26:	eeb0 0a48 	vmov.f32	s0, s16
 8012c2a:	eef0 0a68 	vmov.f32	s1, s17
 8012c2e:	ecbd 8b02 	vpop	{d8}
 8012c32:	bd38      	pop	{r3, r4, r5, pc}
 8012c34:	0000      	movs	r0, r0
	...

08012c38 <atan>:
 8012c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c3c:	ec55 4b10 	vmov	r4, r5, d0
 8012c40:	4bc3      	ldr	r3, [pc, #780]	; (8012f50 <atan+0x318>)
 8012c42:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012c46:	429e      	cmp	r6, r3
 8012c48:	46ab      	mov	fp, r5
 8012c4a:	dd18      	ble.n	8012c7e <atan+0x46>
 8012c4c:	4bc1      	ldr	r3, [pc, #772]	; (8012f54 <atan+0x31c>)
 8012c4e:	429e      	cmp	r6, r3
 8012c50:	dc01      	bgt.n	8012c56 <atan+0x1e>
 8012c52:	d109      	bne.n	8012c68 <atan+0x30>
 8012c54:	b144      	cbz	r4, 8012c68 <atan+0x30>
 8012c56:	4622      	mov	r2, r4
 8012c58:	462b      	mov	r3, r5
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	4629      	mov	r1, r5
 8012c5e:	f7ed fb15 	bl	800028c <__adddf3>
 8012c62:	4604      	mov	r4, r0
 8012c64:	460d      	mov	r5, r1
 8012c66:	e006      	b.n	8012c76 <atan+0x3e>
 8012c68:	f1bb 0f00 	cmp.w	fp, #0
 8012c6c:	f300 8131 	bgt.w	8012ed2 <atan+0x29a>
 8012c70:	a59b      	add	r5, pc, #620	; (adr r5, 8012ee0 <atan+0x2a8>)
 8012c72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012c76:	ec45 4b10 	vmov	d0, r4, r5
 8012c7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c7e:	4bb6      	ldr	r3, [pc, #728]	; (8012f58 <atan+0x320>)
 8012c80:	429e      	cmp	r6, r3
 8012c82:	dc14      	bgt.n	8012cae <atan+0x76>
 8012c84:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012c88:	429e      	cmp	r6, r3
 8012c8a:	dc0d      	bgt.n	8012ca8 <atan+0x70>
 8012c8c:	a396      	add	r3, pc, #600	; (adr r3, 8012ee8 <atan+0x2b0>)
 8012c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c92:	ee10 0a10 	vmov	r0, s0
 8012c96:	4629      	mov	r1, r5
 8012c98:	f7ed faf8 	bl	800028c <__adddf3>
 8012c9c:	4baf      	ldr	r3, [pc, #700]	; (8012f5c <atan+0x324>)
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	f7ed ff3a 	bl	8000b18 <__aeabi_dcmpgt>
 8012ca4:	2800      	cmp	r0, #0
 8012ca6:	d1e6      	bne.n	8012c76 <atan+0x3e>
 8012ca8:	f04f 3aff 	mov.w	sl, #4294967295
 8012cac:	e02b      	b.n	8012d06 <atan+0xce>
 8012cae:	f000 f963 	bl	8012f78 <fabs>
 8012cb2:	4bab      	ldr	r3, [pc, #684]	; (8012f60 <atan+0x328>)
 8012cb4:	429e      	cmp	r6, r3
 8012cb6:	ec55 4b10 	vmov	r4, r5, d0
 8012cba:	f300 80bf 	bgt.w	8012e3c <atan+0x204>
 8012cbe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012cc2:	429e      	cmp	r6, r3
 8012cc4:	f300 80a0 	bgt.w	8012e08 <atan+0x1d0>
 8012cc8:	ee10 2a10 	vmov	r2, s0
 8012ccc:	ee10 0a10 	vmov	r0, s0
 8012cd0:	462b      	mov	r3, r5
 8012cd2:	4629      	mov	r1, r5
 8012cd4:	f7ed fada 	bl	800028c <__adddf3>
 8012cd8:	4ba0      	ldr	r3, [pc, #640]	; (8012f5c <atan+0x324>)
 8012cda:	2200      	movs	r2, #0
 8012cdc:	f7ed fad4 	bl	8000288 <__aeabi_dsub>
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	4606      	mov	r6, r0
 8012ce4:	460f      	mov	r7, r1
 8012ce6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012cea:	4620      	mov	r0, r4
 8012cec:	4629      	mov	r1, r5
 8012cee:	f7ed facd 	bl	800028c <__adddf3>
 8012cf2:	4602      	mov	r2, r0
 8012cf4:	460b      	mov	r3, r1
 8012cf6:	4630      	mov	r0, r6
 8012cf8:	4639      	mov	r1, r7
 8012cfa:	f7ed fda7 	bl	800084c <__aeabi_ddiv>
 8012cfe:	f04f 0a00 	mov.w	sl, #0
 8012d02:	4604      	mov	r4, r0
 8012d04:	460d      	mov	r5, r1
 8012d06:	4622      	mov	r2, r4
 8012d08:	462b      	mov	r3, r5
 8012d0a:	4620      	mov	r0, r4
 8012d0c:	4629      	mov	r1, r5
 8012d0e:	f7ed fc73 	bl	80005f8 <__aeabi_dmul>
 8012d12:	4602      	mov	r2, r0
 8012d14:	460b      	mov	r3, r1
 8012d16:	4680      	mov	r8, r0
 8012d18:	4689      	mov	r9, r1
 8012d1a:	f7ed fc6d 	bl	80005f8 <__aeabi_dmul>
 8012d1e:	a374      	add	r3, pc, #464	; (adr r3, 8012ef0 <atan+0x2b8>)
 8012d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d24:	4606      	mov	r6, r0
 8012d26:	460f      	mov	r7, r1
 8012d28:	f7ed fc66 	bl	80005f8 <__aeabi_dmul>
 8012d2c:	a372      	add	r3, pc, #456	; (adr r3, 8012ef8 <atan+0x2c0>)
 8012d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d32:	f7ed faab 	bl	800028c <__adddf3>
 8012d36:	4632      	mov	r2, r6
 8012d38:	463b      	mov	r3, r7
 8012d3a:	f7ed fc5d 	bl	80005f8 <__aeabi_dmul>
 8012d3e:	a370      	add	r3, pc, #448	; (adr r3, 8012f00 <atan+0x2c8>)
 8012d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d44:	f7ed faa2 	bl	800028c <__adddf3>
 8012d48:	4632      	mov	r2, r6
 8012d4a:	463b      	mov	r3, r7
 8012d4c:	f7ed fc54 	bl	80005f8 <__aeabi_dmul>
 8012d50:	a36d      	add	r3, pc, #436	; (adr r3, 8012f08 <atan+0x2d0>)
 8012d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d56:	f7ed fa99 	bl	800028c <__adddf3>
 8012d5a:	4632      	mov	r2, r6
 8012d5c:	463b      	mov	r3, r7
 8012d5e:	f7ed fc4b 	bl	80005f8 <__aeabi_dmul>
 8012d62:	a36b      	add	r3, pc, #428	; (adr r3, 8012f10 <atan+0x2d8>)
 8012d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d68:	f7ed fa90 	bl	800028c <__adddf3>
 8012d6c:	4632      	mov	r2, r6
 8012d6e:	463b      	mov	r3, r7
 8012d70:	f7ed fc42 	bl	80005f8 <__aeabi_dmul>
 8012d74:	a368      	add	r3, pc, #416	; (adr r3, 8012f18 <atan+0x2e0>)
 8012d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d7a:	f7ed fa87 	bl	800028c <__adddf3>
 8012d7e:	4642      	mov	r2, r8
 8012d80:	464b      	mov	r3, r9
 8012d82:	f7ed fc39 	bl	80005f8 <__aeabi_dmul>
 8012d86:	a366      	add	r3, pc, #408	; (adr r3, 8012f20 <atan+0x2e8>)
 8012d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d8c:	4680      	mov	r8, r0
 8012d8e:	4689      	mov	r9, r1
 8012d90:	4630      	mov	r0, r6
 8012d92:	4639      	mov	r1, r7
 8012d94:	f7ed fc30 	bl	80005f8 <__aeabi_dmul>
 8012d98:	a363      	add	r3, pc, #396	; (adr r3, 8012f28 <atan+0x2f0>)
 8012d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d9e:	f7ed fa73 	bl	8000288 <__aeabi_dsub>
 8012da2:	4632      	mov	r2, r6
 8012da4:	463b      	mov	r3, r7
 8012da6:	f7ed fc27 	bl	80005f8 <__aeabi_dmul>
 8012daa:	a361      	add	r3, pc, #388	; (adr r3, 8012f30 <atan+0x2f8>)
 8012dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012db0:	f7ed fa6a 	bl	8000288 <__aeabi_dsub>
 8012db4:	4632      	mov	r2, r6
 8012db6:	463b      	mov	r3, r7
 8012db8:	f7ed fc1e 	bl	80005f8 <__aeabi_dmul>
 8012dbc:	a35e      	add	r3, pc, #376	; (adr r3, 8012f38 <atan+0x300>)
 8012dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc2:	f7ed fa61 	bl	8000288 <__aeabi_dsub>
 8012dc6:	4632      	mov	r2, r6
 8012dc8:	463b      	mov	r3, r7
 8012dca:	f7ed fc15 	bl	80005f8 <__aeabi_dmul>
 8012dce:	a35c      	add	r3, pc, #368	; (adr r3, 8012f40 <atan+0x308>)
 8012dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd4:	f7ed fa58 	bl	8000288 <__aeabi_dsub>
 8012dd8:	4632      	mov	r2, r6
 8012dda:	463b      	mov	r3, r7
 8012ddc:	f7ed fc0c 	bl	80005f8 <__aeabi_dmul>
 8012de0:	4602      	mov	r2, r0
 8012de2:	460b      	mov	r3, r1
 8012de4:	4640      	mov	r0, r8
 8012de6:	4649      	mov	r1, r9
 8012de8:	f7ed fa50 	bl	800028c <__adddf3>
 8012dec:	4622      	mov	r2, r4
 8012dee:	462b      	mov	r3, r5
 8012df0:	f7ed fc02 	bl	80005f8 <__aeabi_dmul>
 8012df4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012df8:	4602      	mov	r2, r0
 8012dfa:	460b      	mov	r3, r1
 8012dfc:	d14b      	bne.n	8012e96 <atan+0x25e>
 8012dfe:	4620      	mov	r0, r4
 8012e00:	4629      	mov	r1, r5
 8012e02:	f7ed fa41 	bl	8000288 <__aeabi_dsub>
 8012e06:	e72c      	b.n	8012c62 <atan+0x2a>
 8012e08:	ee10 0a10 	vmov	r0, s0
 8012e0c:	4b53      	ldr	r3, [pc, #332]	; (8012f5c <atan+0x324>)
 8012e0e:	2200      	movs	r2, #0
 8012e10:	4629      	mov	r1, r5
 8012e12:	f7ed fa39 	bl	8000288 <__aeabi_dsub>
 8012e16:	4b51      	ldr	r3, [pc, #324]	; (8012f5c <atan+0x324>)
 8012e18:	4606      	mov	r6, r0
 8012e1a:	460f      	mov	r7, r1
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	4620      	mov	r0, r4
 8012e20:	4629      	mov	r1, r5
 8012e22:	f7ed fa33 	bl	800028c <__adddf3>
 8012e26:	4602      	mov	r2, r0
 8012e28:	460b      	mov	r3, r1
 8012e2a:	4630      	mov	r0, r6
 8012e2c:	4639      	mov	r1, r7
 8012e2e:	f7ed fd0d 	bl	800084c <__aeabi_ddiv>
 8012e32:	f04f 0a01 	mov.w	sl, #1
 8012e36:	4604      	mov	r4, r0
 8012e38:	460d      	mov	r5, r1
 8012e3a:	e764      	b.n	8012d06 <atan+0xce>
 8012e3c:	4b49      	ldr	r3, [pc, #292]	; (8012f64 <atan+0x32c>)
 8012e3e:	429e      	cmp	r6, r3
 8012e40:	da1d      	bge.n	8012e7e <atan+0x246>
 8012e42:	ee10 0a10 	vmov	r0, s0
 8012e46:	4b48      	ldr	r3, [pc, #288]	; (8012f68 <atan+0x330>)
 8012e48:	2200      	movs	r2, #0
 8012e4a:	4629      	mov	r1, r5
 8012e4c:	f7ed fa1c 	bl	8000288 <__aeabi_dsub>
 8012e50:	4b45      	ldr	r3, [pc, #276]	; (8012f68 <atan+0x330>)
 8012e52:	4606      	mov	r6, r0
 8012e54:	460f      	mov	r7, r1
 8012e56:	2200      	movs	r2, #0
 8012e58:	4620      	mov	r0, r4
 8012e5a:	4629      	mov	r1, r5
 8012e5c:	f7ed fbcc 	bl	80005f8 <__aeabi_dmul>
 8012e60:	4b3e      	ldr	r3, [pc, #248]	; (8012f5c <atan+0x324>)
 8012e62:	2200      	movs	r2, #0
 8012e64:	f7ed fa12 	bl	800028c <__adddf3>
 8012e68:	4602      	mov	r2, r0
 8012e6a:	460b      	mov	r3, r1
 8012e6c:	4630      	mov	r0, r6
 8012e6e:	4639      	mov	r1, r7
 8012e70:	f7ed fcec 	bl	800084c <__aeabi_ddiv>
 8012e74:	f04f 0a02 	mov.w	sl, #2
 8012e78:	4604      	mov	r4, r0
 8012e7a:	460d      	mov	r5, r1
 8012e7c:	e743      	b.n	8012d06 <atan+0xce>
 8012e7e:	462b      	mov	r3, r5
 8012e80:	ee10 2a10 	vmov	r2, s0
 8012e84:	4939      	ldr	r1, [pc, #228]	; (8012f6c <atan+0x334>)
 8012e86:	2000      	movs	r0, #0
 8012e88:	f7ed fce0 	bl	800084c <__aeabi_ddiv>
 8012e8c:	f04f 0a03 	mov.w	sl, #3
 8012e90:	4604      	mov	r4, r0
 8012e92:	460d      	mov	r5, r1
 8012e94:	e737      	b.n	8012d06 <atan+0xce>
 8012e96:	4b36      	ldr	r3, [pc, #216]	; (8012f70 <atan+0x338>)
 8012e98:	4e36      	ldr	r6, [pc, #216]	; (8012f74 <atan+0x33c>)
 8012e9a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea2:	f7ed f9f1 	bl	8000288 <__aeabi_dsub>
 8012ea6:	4622      	mov	r2, r4
 8012ea8:	462b      	mov	r3, r5
 8012eaa:	f7ed f9ed 	bl	8000288 <__aeabi_dsub>
 8012eae:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012eb2:	4602      	mov	r2, r0
 8012eb4:	460b      	mov	r3, r1
 8012eb6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012eba:	f7ed f9e5 	bl	8000288 <__aeabi_dsub>
 8012ebe:	f1bb 0f00 	cmp.w	fp, #0
 8012ec2:	4604      	mov	r4, r0
 8012ec4:	460d      	mov	r5, r1
 8012ec6:	f6bf aed6 	bge.w	8012c76 <atan+0x3e>
 8012eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ece:	461d      	mov	r5, r3
 8012ed0:	e6d1      	b.n	8012c76 <atan+0x3e>
 8012ed2:	a51d      	add	r5, pc, #116	; (adr r5, 8012f48 <atan+0x310>)
 8012ed4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012ed8:	e6cd      	b.n	8012c76 <atan+0x3e>
 8012eda:	bf00      	nop
 8012edc:	f3af 8000 	nop.w
 8012ee0:	54442d18 	.word	0x54442d18
 8012ee4:	bff921fb 	.word	0xbff921fb
 8012ee8:	8800759c 	.word	0x8800759c
 8012eec:	7e37e43c 	.word	0x7e37e43c
 8012ef0:	e322da11 	.word	0xe322da11
 8012ef4:	3f90ad3a 	.word	0x3f90ad3a
 8012ef8:	24760deb 	.word	0x24760deb
 8012efc:	3fa97b4b 	.word	0x3fa97b4b
 8012f00:	a0d03d51 	.word	0xa0d03d51
 8012f04:	3fb10d66 	.word	0x3fb10d66
 8012f08:	c54c206e 	.word	0xc54c206e
 8012f0c:	3fb745cd 	.word	0x3fb745cd
 8012f10:	920083ff 	.word	0x920083ff
 8012f14:	3fc24924 	.word	0x3fc24924
 8012f18:	5555550d 	.word	0x5555550d
 8012f1c:	3fd55555 	.word	0x3fd55555
 8012f20:	2c6a6c2f 	.word	0x2c6a6c2f
 8012f24:	bfa2b444 	.word	0xbfa2b444
 8012f28:	52defd9a 	.word	0x52defd9a
 8012f2c:	3fadde2d 	.word	0x3fadde2d
 8012f30:	af749a6d 	.word	0xaf749a6d
 8012f34:	3fb3b0f2 	.word	0x3fb3b0f2
 8012f38:	fe231671 	.word	0xfe231671
 8012f3c:	3fbc71c6 	.word	0x3fbc71c6
 8012f40:	9998ebc4 	.word	0x9998ebc4
 8012f44:	3fc99999 	.word	0x3fc99999
 8012f48:	54442d18 	.word	0x54442d18
 8012f4c:	3ff921fb 	.word	0x3ff921fb
 8012f50:	440fffff 	.word	0x440fffff
 8012f54:	7ff00000 	.word	0x7ff00000
 8012f58:	3fdbffff 	.word	0x3fdbffff
 8012f5c:	3ff00000 	.word	0x3ff00000
 8012f60:	3ff2ffff 	.word	0x3ff2ffff
 8012f64:	40038000 	.word	0x40038000
 8012f68:	3ff80000 	.word	0x3ff80000
 8012f6c:	bff00000 	.word	0xbff00000
 8012f70:	080147a8 	.word	0x080147a8
 8012f74:	08014788 	.word	0x08014788

08012f78 <fabs>:
 8012f78:	ec51 0b10 	vmov	r0, r1, d0
 8012f7c:	ee10 2a10 	vmov	r2, s0
 8012f80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012f84:	ec43 2b10 	vmov	d0, r2, r3
 8012f88:	4770      	bx	lr

08012f8a <finite>:
 8012f8a:	b082      	sub	sp, #8
 8012f8c:	ed8d 0b00 	vstr	d0, [sp]
 8012f90:	9801      	ldr	r0, [sp, #4]
 8012f92:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012f96:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012f9a:	0fc0      	lsrs	r0, r0, #31
 8012f9c:	b002      	add	sp, #8
 8012f9e:	4770      	bx	lr

08012fa0 <__ieee754_sqrt>:
 8012fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa4:	ec55 4b10 	vmov	r4, r5, d0
 8012fa8:	4e67      	ldr	r6, [pc, #412]	; (8013148 <__ieee754_sqrt+0x1a8>)
 8012faa:	43ae      	bics	r6, r5
 8012fac:	ee10 0a10 	vmov	r0, s0
 8012fb0:	ee10 2a10 	vmov	r2, s0
 8012fb4:	4629      	mov	r1, r5
 8012fb6:	462b      	mov	r3, r5
 8012fb8:	d10d      	bne.n	8012fd6 <__ieee754_sqrt+0x36>
 8012fba:	f7ed fb1d 	bl	80005f8 <__aeabi_dmul>
 8012fbe:	4602      	mov	r2, r0
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	4629      	mov	r1, r5
 8012fc6:	f7ed f961 	bl	800028c <__adddf3>
 8012fca:	4604      	mov	r4, r0
 8012fcc:	460d      	mov	r5, r1
 8012fce:	ec45 4b10 	vmov	d0, r4, r5
 8012fd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fd6:	2d00      	cmp	r5, #0
 8012fd8:	dc0b      	bgt.n	8012ff2 <__ieee754_sqrt+0x52>
 8012fda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012fde:	4326      	orrs	r6, r4
 8012fe0:	d0f5      	beq.n	8012fce <__ieee754_sqrt+0x2e>
 8012fe2:	b135      	cbz	r5, 8012ff2 <__ieee754_sqrt+0x52>
 8012fe4:	f7ed f950 	bl	8000288 <__aeabi_dsub>
 8012fe8:	4602      	mov	r2, r0
 8012fea:	460b      	mov	r3, r1
 8012fec:	f7ed fc2e 	bl	800084c <__aeabi_ddiv>
 8012ff0:	e7eb      	b.n	8012fca <__ieee754_sqrt+0x2a>
 8012ff2:	1509      	asrs	r1, r1, #20
 8012ff4:	f000 808d 	beq.w	8013112 <__ieee754_sqrt+0x172>
 8012ff8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ffc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8013000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013004:	07c9      	lsls	r1, r1, #31
 8013006:	bf5c      	itt	pl
 8013008:	005b      	lslpl	r3, r3, #1
 801300a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801300e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013012:	bf58      	it	pl
 8013014:	0052      	lslpl	r2, r2, #1
 8013016:	2500      	movs	r5, #0
 8013018:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801301c:	1076      	asrs	r6, r6, #1
 801301e:	0052      	lsls	r2, r2, #1
 8013020:	f04f 0e16 	mov.w	lr, #22
 8013024:	46ac      	mov	ip, r5
 8013026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801302a:	eb0c 0001 	add.w	r0, ip, r1
 801302e:	4298      	cmp	r0, r3
 8013030:	bfde      	ittt	le
 8013032:	1a1b      	suble	r3, r3, r0
 8013034:	eb00 0c01 	addle.w	ip, r0, r1
 8013038:	186d      	addle	r5, r5, r1
 801303a:	005b      	lsls	r3, r3, #1
 801303c:	f1be 0e01 	subs.w	lr, lr, #1
 8013040:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013044:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013048:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801304c:	d1ed      	bne.n	801302a <__ieee754_sqrt+0x8a>
 801304e:	4674      	mov	r4, lr
 8013050:	2720      	movs	r7, #32
 8013052:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8013056:	4563      	cmp	r3, ip
 8013058:	eb01 000e 	add.w	r0, r1, lr
 801305c:	dc02      	bgt.n	8013064 <__ieee754_sqrt+0xc4>
 801305e:	d113      	bne.n	8013088 <__ieee754_sqrt+0xe8>
 8013060:	4290      	cmp	r0, r2
 8013062:	d811      	bhi.n	8013088 <__ieee754_sqrt+0xe8>
 8013064:	2800      	cmp	r0, #0
 8013066:	eb00 0e01 	add.w	lr, r0, r1
 801306a:	da57      	bge.n	801311c <__ieee754_sqrt+0x17c>
 801306c:	f1be 0f00 	cmp.w	lr, #0
 8013070:	db54      	blt.n	801311c <__ieee754_sqrt+0x17c>
 8013072:	f10c 0801 	add.w	r8, ip, #1
 8013076:	eba3 030c 	sub.w	r3, r3, ip
 801307a:	4290      	cmp	r0, r2
 801307c:	bf88      	it	hi
 801307e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013082:	1a12      	subs	r2, r2, r0
 8013084:	440c      	add	r4, r1
 8013086:	46c4      	mov	ip, r8
 8013088:	005b      	lsls	r3, r3, #1
 801308a:	3f01      	subs	r7, #1
 801308c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013090:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013094:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8013098:	d1dd      	bne.n	8013056 <__ieee754_sqrt+0xb6>
 801309a:	4313      	orrs	r3, r2
 801309c:	d01b      	beq.n	80130d6 <__ieee754_sqrt+0x136>
 801309e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801314c <__ieee754_sqrt+0x1ac>
 80130a2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8013150 <__ieee754_sqrt+0x1b0>
 80130a6:	e9da 0100 	ldrd	r0, r1, [sl]
 80130aa:	e9db 2300 	ldrd	r2, r3, [fp]
 80130ae:	f7ed f8eb 	bl	8000288 <__aeabi_dsub>
 80130b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80130b6:	4602      	mov	r2, r0
 80130b8:	460b      	mov	r3, r1
 80130ba:	4640      	mov	r0, r8
 80130bc:	4649      	mov	r1, r9
 80130be:	f7ed fd17 	bl	8000af0 <__aeabi_dcmple>
 80130c2:	b140      	cbz	r0, 80130d6 <__ieee754_sqrt+0x136>
 80130c4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80130c8:	e9da 0100 	ldrd	r0, r1, [sl]
 80130cc:	e9db 2300 	ldrd	r2, r3, [fp]
 80130d0:	d126      	bne.n	8013120 <__ieee754_sqrt+0x180>
 80130d2:	3501      	adds	r5, #1
 80130d4:	463c      	mov	r4, r7
 80130d6:	106a      	asrs	r2, r5, #1
 80130d8:	0863      	lsrs	r3, r4, #1
 80130da:	07e9      	lsls	r1, r5, #31
 80130dc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80130e0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80130e4:	bf48      	it	mi
 80130e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80130ea:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80130ee:	461c      	mov	r4, r3
 80130f0:	e76d      	b.n	8012fce <__ieee754_sqrt+0x2e>
 80130f2:	0ad3      	lsrs	r3, r2, #11
 80130f4:	3815      	subs	r0, #21
 80130f6:	0552      	lsls	r2, r2, #21
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d0fa      	beq.n	80130f2 <__ieee754_sqrt+0x152>
 80130fc:	02dc      	lsls	r4, r3, #11
 80130fe:	d50a      	bpl.n	8013116 <__ieee754_sqrt+0x176>
 8013100:	f1c1 0420 	rsb	r4, r1, #32
 8013104:	fa22 f404 	lsr.w	r4, r2, r4
 8013108:	1e4d      	subs	r5, r1, #1
 801310a:	408a      	lsls	r2, r1
 801310c:	4323      	orrs	r3, r4
 801310e:	1b41      	subs	r1, r0, r5
 8013110:	e772      	b.n	8012ff8 <__ieee754_sqrt+0x58>
 8013112:	4608      	mov	r0, r1
 8013114:	e7f0      	b.n	80130f8 <__ieee754_sqrt+0x158>
 8013116:	005b      	lsls	r3, r3, #1
 8013118:	3101      	adds	r1, #1
 801311a:	e7ef      	b.n	80130fc <__ieee754_sqrt+0x15c>
 801311c:	46e0      	mov	r8, ip
 801311e:	e7aa      	b.n	8013076 <__ieee754_sqrt+0xd6>
 8013120:	f7ed f8b4 	bl	800028c <__adddf3>
 8013124:	e9da 8900 	ldrd	r8, r9, [sl]
 8013128:	4602      	mov	r2, r0
 801312a:	460b      	mov	r3, r1
 801312c:	4640      	mov	r0, r8
 801312e:	4649      	mov	r1, r9
 8013130:	f7ed fcd4 	bl	8000adc <__aeabi_dcmplt>
 8013134:	b120      	cbz	r0, 8013140 <__ieee754_sqrt+0x1a0>
 8013136:	1ca0      	adds	r0, r4, #2
 8013138:	bf08      	it	eq
 801313a:	3501      	addeq	r5, #1
 801313c:	3402      	adds	r4, #2
 801313e:	e7ca      	b.n	80130d6 <__ieee754_sqrt+0x136>
 8013140:	3401      	adds	r4, #1
 8013142:	f024 0401 	bic.w	r4, r4, #1
 8013146:	e7c6      	b.n	80130d6 <__ieee754_sqrt+0x136>
 8013148:	7ff00000 	.word	0x7ff00000
 801314c:	200002a0 	.word	0x200002a0
 8013150:	200002a8 	.word	0x200002a8
 8013154:	00000000 	.word	0x00000000

08013158 <__ieee754_atan2>:
 8013158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801315c:	ec57 6b11 	vmov	r6, r7, d1
 8013160:	4273      	negs	r3, r6
 8013162:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80132e0 <__ieee754_atan2+0x188>
 8013166:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801316a:	4333      	orrs	r3, r6
 801316c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013170:	4543      	cmp	r3, r8
 8013172:	ec51 0b10 	vmov	r0, r1, d0
 8013176:	ee11 5a10 	vmov	r5, s2
 801317a:	d80a      	bhi.n	8013192 <__ieee754_atan2+0x3a>
 801317c:	4244      	negs	r4, r0
 801317e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013182:	4304      	orrs	r4, r0
 8013184:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013188:	4544      	cmp	r4, r8
 801318a:	ee10 9a10 	vmov	r9, s0
 801318e:	468e      	mov	lr, r1
 8013190:	d907      	bls.n	80131a2 <__ieee754_atan2+0x4a>
 8013192:	4632      	mov	r2, r6
 8013194:	463b      	mov	r3, r7
 8013196:	f7ed f879 	bl	800028c <__adddf3>
 801319a:	ec41 0b10 	vmov	d0, r0, r1
 801319e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131a2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80131a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80131aa:	4334      	orrs	r4, r6
 80131ac:	d103      	bne.n	80131b6 <__ieee754_atan2+0x5e>
 80131ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131b2:	f7ff bd41 	b.w	8012c38 <atan>
 80131b6:	17bc      	asrs	r4, r7, #30
 80131b8:	f004 0402 	and.w	r4, r4, #2
 80131bc:	ea53 0909 	orrs.w	r9, r3, r9
 80131c0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80131c4:	d107      	bne.n	80131d6 <__ieee754_atan2+0x7e>
 80131c6:	2c02      	cmp	r4, #2
 80131c8:	d05f      	beq.n	801328a <__ieee754_atan2+0x132>
 80131ca:	2c03      	cmp	r4, #3
 80131cc:	d1e5      	bne.n	801319a <__ieee754_atan2+0x42>
 80131ce:	a140      	add	r1, pc, #256	; (adr r1, 80132d0 <__ieee754_atan2+0x178>)
 80131d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131d4:	e7e1      	b.n	801319a <__ieee754_atan2+0x42>
 80131d6:	4315      	orrs	r5, r2
 80131d8:	d106      	bne.n	80131e8 <__ieee754_atan2+0x90>
 80131da:	f1be 0f00 	cmp.w	lr, #0
 80131de:	da5f      	bge.n	80132a0 <__ieee754_atan2+0x148>
 80131e0:	a13d      	add	r1, pc, #244	; (adr r1, 80132d8 <__ieee754_atan2+0x180>)
 80131e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131e6:	e7d8      	b.n	801319a <__ieee754_atan2+0x42>
 80131e8:	4542      	cmp	r2, r8
 80131ea:	d10f      	bne.n	801320c <__ieee754_atan2+0xb4>
 80131ec:	4293      	cmp	r3, r2
 80131ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80131f2:	d107      	bne.n	8013204 <__ieee754_atan2+0xac>
 80131f4:	2c02      	cmp	r4, #2
 80131f6:	d84c      	bhi.n	8013292 <__ieee754_atan2+0x13a>
 80131f8:	4b33      	ldr	r3, [pc, #204]	; (80132c8 <__ieee754_atan2+0x170>)
 80131fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80131fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013202:	e7ca      	b.n	801319a <__ieee754_atan2+0x42>
 8013204:	2c02      	cmp	r4, #2
 8013206:	d848      	bhi.n	801329a <__ieee754_atan2+0x142>
 8013208:	4b30      	ldr	r3, [pc, #192]	; (80132cc <__ieee754_atan2+0x174>)
 801320a:	e7f6      	b.n	80131fa <__ieee754_atan2+0xa2>
 801320c:	4543      	cmp	r3, r8
 801320e:	d0e4      	beq.n	80131da <__ieee754_atan2+0x82>
 8013210:	1a9b      	subs	r3, r3, r2
 8013212:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8013216:	ea4f 5223 	mov.w	r2, r3, asr #20
 801321a:	da1e      	bge.n	801325a <__ieee754_atan2+0x102>
 801321c:	2f00      	cmp	r7, #0
 801321e:	da01      	bge.n	8013224 <__ieee754_atan2+0xcc>
 8013220:	323c      	adds	r2, #60	; 0x3c
 8013222:	db1e      	blt.n	8013262 <__ieee754_atan2+0x10a>
 8013224:	4632      	mov	r2, r6
 8013226:	463b      	mov	r3, r7
 8013228:	f7ed fb10 	bl	800084c <__aeabi_ddiv>
 801322c:	ec41 0b10 	vmov	d0, r0, r1
 8013230:	f7ff fea2 	bl	8012f78 <fabs>
 8013234:	f7ff fd00 	bl	8012c38 <atan>
 8013238:	ec51 0b10 	vmov	r0, r1, d0
 801323c:	2c01      	cmp	r4, #1
 801323e:	d013      	beq.n	8013268 <__ieee754_atan2+0x110>
 8013240:	2c02      	cmp	r4, #2
 8013242:	d015      	beq.n	8013270 <__ieee754_atan2+0x118>
 8013244:	2c00      	cmp	r4, #0
 8013246:	d0a8      	beq.n	801319a <__ieee754_atan2+0x42>
 8013248:	a317      	add	r3, pc, #92	; (adr r3, 80132a8 <__ieee754_atan2+0x150>)
 801324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801324e:	f7ed f81b 	bl	8000288 <__aeabi_dsub>
 8013252:	a317      	add	r3, pc, #92	; (adr r3, 80132b0 <__ieee754_atan2+0x158>)
 8013254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013258:	e014      	b.n	8013284 <__ieee754_atan2+0x12c>
 801325a:	a117      	add	r1, pc, #92	; (adr r1, 80132b8 <__ieee754_atan2+0x160>)
 801325c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013260:	e7ec      	b.n	801323c <__ieee754_atan2+0xe4>
 8013262:	2000      	movs	r0, #0
 8013264:	2100      	movs	r1, #0
 8013266:	e7e9      	b.n	801323c <__ieee754_atan2+0xe4>
 8013268:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801326c:	4619      	mov	r1, r3
 801326e:	e794      	b.n	801319a <__ieee754_atan2+0x42>
 8013270:	a30d      	add	r3, pc, #52	; (adr r3, 80132a8 <__ieee754_atan2+0x150>)
 8013272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013276:	f7ed f807 	bl	8000288 <__aeabi_dsub>
 801327a:	4602      	mov	r2, r0
 801327c:	460b      	mov	r3, r1
 801327e:	a10c      	add	r1, pc, #48	; (adr r1, 80132b0 <__ieee754_atan2+0x158>)
 8013280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013284:	f7ed f800 	bl	8000288 <__aeabi_dsub>
 8013288:	e787      	b.n	801319a <__ieee754_atan2+0x42>
 801328a:	a109      	add	r1, pc, #36	; (adr r1, 80132b0 <__ieee754_atan2+0x158>)
 801328c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013290:	e783      	b.n	801319a <__ieee754_atan2+0x42>
 8013292:	a10b      	add	r1, pc, #44	; (adr r1, 80132c0 <__ieee754_atan2+0x168>)
 8013294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013298:	e77f      	b.n	801319a <__ieee754_atan2+0x42>
 801329a:	2000      	movs	r0, #0
 801329c:	2100      	movs	r1, #0
 801329e:	e77c      	b.n	801319a <__ieee754_atan2+0x42>
 80132a0:	a105      	add	r1, pc, #20	; (adr r1, 80132b8 <__ieee754_atan2+0x160>)
 80132a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132a6:	e778      	b.n	801319a <__ieee754_atan2+0x42>
 80132a8:	33145c07 	.word	0x33145c07
 80132ac:	3ca1a626 	.word	0x3ca1a626
 80132b0:	54442d18 	.word	0x54442d18
 80132b4:	400921fb 	.word	0x400921fb
 80132b8:	54442d18 	.word	0x54442d18
 80132bc:	3ff921fb 	.word	0x3ff921fb
 80132c0:	54442d18 	.word	0x54442d18
 80132c4:	3fe921fb 	.word	0x3fe921fb
 80132c8:	080147c8 	.word	0x080147c8
 80132cc:	080147e0 	.word	0x080147e0
 80132d0:	54442d18 	.word	0x54442d18
 80132d4:	c00921fb 	.word	0xc00921fb
 80132d8:	54442d18 	.word	0x54442d18
 80132dc:	bff921fb 	.word	0xbff921fb
 80132e0:	7ff00000 	.word	0x7ff00000
 80132e4:	00000000 	.word	0x00000000

080132e8 <__ieee754_log>:
 80132e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132ec:	ec51 0b10 	vmov	r0, r1, d0
 80132f0:	ed2d 8b04 	vpush	{d8-d9}
 80132f4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80132f8:	b083      	sub	sp, #12
 80132fa:	460d      	mov	r5, r1
 80132fc:	da29      	bge.n	8013352 <__ieee754_log+0x6a>
 80132fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013302:	4303      	orrs	r3, r0
 8013304:	ee10 2a10 	vmov	r2, s0
 8013308:	d10c      	bne.n	8013324 <__ieee754_log+0x3c>
 801330a:	49cf      	ldr	r1, [pc, #828]	; (8013648 <__ieee754_log+0x360>)
 801330c:	2200      	movs	r2, #0
 801330e:	2300      	movs	r3, #0
 8013310:	2000      	movs	r0, #0
 8013312:	f7ed fa9b 	bl	800084c <__aeabi_ddiv>
 8013316:	ec41 0b10 	vmov	d0, r0, r1
 801331a:	b003      	add	sp, #12
 801331c:	ecbd 8b04 	vpop	{d8-d9}
 8013320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013324:	2900      	cmp	r1, #0
 8013326:	da05      	bge.n	8013334 <__ieee754_log+0x4c>
 8013328:	460b      	mov	r3, r1
 801332a:	f7ec ffad 	bl	8000288 <__aeabi_dsub>
 801332e:	2200      	movs	r2, #0
 8013330:	2300      	movs	r3, #0
 8013332:	e7ee      	b.n	8013312 <__ieee754_log+0x2a>
 8013334:	4bc5      	ldr	r3, [pc, #788]	; (801364c <__ieee754_log+0x364>)
 8013336:	2200      	movs	r2, #0
 8013338:	f7ed f95e 	bl	80005f8 <__aeabi_dmul>
 801333c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8013340:	460d      	mov	r5, r1
 8013342:	4ac3      	ldr	r2, [pc, #780]	; (8013650 <__ieee754_log+0x368>)
 8013344:	4295      	cmp	r5, r2
 8013346:	dd06      	ble.n	8013356 <__ieee754_log+0x6e>
 8013348:	4602      	mov	r2, r0
 801334a:	460b      	mov	r3, r1
 801334c:	f7ec ff9e 	bl	800028c <__adddf3>
 8013350:	e7e1      	b.n	8013316 <__ieee754_log+0x2e>
 8013352:	2300      	movs	r3, #0
 8013354:	e7f5      	b.n	8013342 <__ieee754_log+0x5a>
 8013356:	152c      	asrs	r4, r5, #20
 8013358:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801335c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013360:	441c      	add	r4, r3
 8013362:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8013366:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801336a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801336e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8013372:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8013376:	ea42 0105 	orr.w	r1, r2, r5
 801337a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801337e:	2200      	movs	r2, #0
 8013380:	4bb4      	ldr	r3, [pc, #720]	; (8013654 <__ieee754_log+0x36c>)
 8013382:	f7ec ff81 	bl	8000288 <__aeabi_dsub>
 8013386:	1cab      	adds	r3, r5, #2
 8013388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801338c:	2b02      	cmp	r3, #2
 801338e:	4682      	mov	sl, r0
 8013390:	468b      	mov	fp, r1
 8013392:	f04f 0200 	mov.w	r2, #0
 8013396:	dc53      	bgt.n	8013440 <__ieee754_log+0x158>
 8013398:	2300      	movs	r3, #0
 801339a:	f7ed fb95 	bl	8000ac8 <__aeabi_dcmpeq>
 801339e:	b1d0      	cbz	r0, 80133d6 <__ieee754_log+0xee>
 80133a0:	2c00      	cmp	r4, #0
 80133a2:	f000 8122 	beq.w	80135ea <__ieee754_log+0x302>
 80133a6:	4620      	mov	r0, r4
 80133a8:	f7ed f8bc 	bl	8000524 <__aeabi_i2d>
 80133ac:	a390      	add	r3, pc, #576	; (adr r3, 80135f0 <__ieee754_log+0x308>)
 80133ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b2:	4606      	mov	r6, r0
 80133b4:	460f      	mov	r7, r1
 80133b6:	f7ed f91f 	bl	80005f8 <__aeabi_dmul>
 80133ba:	a38f      	add	r3, pc, #572	; (adr r3, 80135f8 <__ieee754_log+0x310>)
 80133bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c0:	4604      	mov	r4, r0
 80133c2:	460d      	mov	r5, r1
 80133c4:	4630      	mov	r0, r6
 80133c6:	4639      	mov	r1, r7
 80133c8:	f7ed f916 	bl	80005f8 <__aeabi_dmul>
 80133cc:	4602      	mov	r2, r0
 80133ce:	460b      	mov	r3, r1
 80133d0:	4620      	mov	r0, r4
 80133d2:	4629      	mov	r1, r5
 80133d4:	e7ba      	b.n	801334c <__ieee754_log+0x64>
 80133d6:	a38a      	add	r3, pc, #552	; (adr r3, 8013600 <__ieee754_log+0x318>)
 80133d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133dc:	4650      	mov	r0, sl
 80133de:	4659      	mov	r1, fp
 80133e0:	f7ed f90a 	bl	80005f8 <__aeabi_dmul>
 80133e4:	4602      	mov	r2, r0
 80133e6:	460b      	mov	r3, r1
 80133e8:	2000      	movs	r0, #0
 80133ea:	499b      	ldr	r1, [pc, #620]	; (8013658 <__ieee754_log+0x370>)
 80133ec:	f7ec ff4c 	bl	8000288 <__aeabi_dsub>
 80133f0:	4652      	mov	r2, sl
 80133f2:	4606      	mov	r6, r0
 80133f4:	460f      	mov	r7, r1
 80133f6:	465b      	mov	r3, fp
 80133f8:	4650      	mov	r0, sl
 80133fa:	4659      	mov	r1, fp
 80133fc:	f7ed f8fc 	bl	80005f8 <__aeabi_dmul>
 8013400:	4602      	mov	r2, r0
 8013402:	460b      	mov	r3, r1
 8013404:	4630      	mov	r0, r6
 8013406:	4639      	mov	r1, r7
 8013408:	f7ed f8f6 	bl	80005f8 <__aeabi_dmul>
 801340c:	4606      	mov	r6, r0
 801340e:	460f      	mov	r7, r1
 8013410:	b914      	cbnz	r4, 8013418 <__ieee754_log+0x130>
 8013412:	4632      	mov	r2, r6
 8013414:	463b      	mov	r3, r7
 8013416:	e0a2      	b.n	801355e <__ieee754_log+0x276>
 8013418:	4620      	mov	r0, r4
 801341a:	f7ed f883 	bl	8000524 <__aeabi_i2d>
 801341e:	a374      	add	r3, pc, #464	; (adr r3, 80135f0 <__ieee754_log+0x308>)
 8013420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013424:	4680      	mov	r8, r0
 8013426:	4689      	mov	r9, r1
 8013428:	f7ed f8e6 	bl	80005f8 <__aeabi_dmul>
 801342c:	a372      	add	r3, pc, #456	; (adr r3, 80135f8 <__ieee754_log+0x310>)
 801342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013432:	4604      	mov	r4, r0
 8013434:	460d      	mov	r5, r1
 8013436:	4640      	mov	r0, r8
 8013438:	4649      	mov	r1, r9
 801343a:	f7ed f8dd 	bl	80005f8 <__aeabi_dmul>
 801343e:	e0a7      	b.n	8013590 <__ieee754_log+0x2a8>
 8013440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013444:	f7ec ff22 	bl	800028c <__adddf3>
 8013448:	4602      	mov	r2, r0
 801344a:	460b      	mov	r3, r1
 801344c:	4650      	mov	r0, sl
 801344e:	4659      	mov	r1, fp
 8013450:	f7ed f9fc 	bl	800084c <__aeabi_ddiv>
 8013454:	ec41 0b18 	vmov	d8, r0, r1
 8013458:	4620      	mov	r0, r4
 801345a:	f7ed f863 	bl	8000524 <__aeabi_i2d>
 801345e:	ec53 2b18 	vmov	r2, r3, d8
 8013462:	ec41 0b19 	vmov	d9, r0, r1
 8013466:	ec51 0b18 	vmov	r0, r1, d8
 801346a:	f7ed f8c5 	bl	80005f8 <__aeabi_dmul>
 801346e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8013472:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8013476:	9301      	str	r3, [sp, #4]
 8013478:	4602      	mov	r2, r0
 801347a:	460b      	mov	r3, r1
 801347c:	4680      	mov	r8, r0
 801347e:	4689      	mov	r9, r1
 8013480:	f7ed f8ba 	bl	80005f8 <__aeabi_dmul>
 8013484:	a360      	add	r3, pc, #384	; (adr r3, 8013608 <__ieee754_log+0x320>)
 8013486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801348a:	4606      	mov	r6, r0
 801348c:	460f      	mov	r7, r1
 801348e:	f7ed f8b3 	bl	80005f8 <__aeabi_dmul>
 8013492:	a35f      	add	r3, pc, #380	; (adr r3, 8013610 <__ieee754_log+0x328>)
 8013494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013498:	f7ec fef8 	bl	800028c <__adddf3>
 801349c:	4632      	mov	r2, r6
 801349e:	463b      	mov	r3, r7
 80134a0:	f7ed f8aa 	bl	80005f8 <__aeabi_dmul>
 80134a4:	a35c      	add	r3, pc, #368	; (adr r3, 8013618 <__ieee754_log+0x330>)
 80134a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134aa:	f7ec feef 	bl	800028c <__adddf3>
 80134ae:	4632      	mov	r2, r6
 80134b0:	463b      	mov	r3, r7
 80134b2:	f7ed f8a1 	bl	80005f8 <__aeabi_dmul>
 80134b6:	a35a      	add	r3, pc, #360	; (adr r3, 8013620 <__ieee754_log+0x338>)
 80134b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134bc:	f7ec fee6 	bl	800028c <__adddf3>
 80134c0:	4642      	mov	r2, r8
 80134c2:	464b      	mov	r3, r9
 80134c4:	f7ed f898 	bl	80005f8 <__aeabi_dmul>
 80134c8:	a357      	add	r3, pc, #348	; (adr r3, 8013628 <__ieee754_log+0x340>)
 80134ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ce:	4680      	mov	r8, r0
 80134d0:	4689      	mov	r9, r1
 80134d2:	4630      	mov	r0, r6
 80134d4:	4639      	mov	r1, r7
 80134d6:	f7ed f88f 	bl	80005f8 <__aeabi_dmul>
 80134da:	a355      	add	r3, pc, #340	; (adr r3, 8013630 <__ieee754_log+0x348>)
 80134dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e0:	f7ec fed4 	bl	800028c <__adddf3>
 80134e4:	4632      	mov	r2, r6
 80134e6:	463b      	mov	r3, r7
 80134e8:	f7ed f886 	bl	80005f8 <__aeabi_dmul>
 80134ec:	a352      	add	r3, pc, #328	; (adr r3, 8013638 <__ieee754_log+0x350>)
 80134ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f2:	f7ec fecb 	bl	800028c <__adddf3>
 80134f6:	4632      	mov	r2, r6
 80134f8:	463b      	mov	r3, r7
 80134fa:	f7ed f87d 	bl	80005f8 <__aeabi_dmul>
 80134fe:	460b      	mov	r3, r1
 8013500:	4602      	mov	r2, r0
 8013502:	4649      	mov	r1, r9
 8013504:	4640      	mov	r0, r8
 8013506:	f7ec fec1 	bl	800028c <__adddf3>
 801350a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801350e:	9b01      	ldr	r3, [sp, #4]
 8013510:	3551      	adds	r5, #81	; 0x51
 8013512:	431d      	orrs	r5, r3
 8013514:	2d00      	cmp	r5, #0
 8013516:	4680      	mov	r8, r0
 8013518:	4689      	mov	r9, r1
 801351a:	dd48      	ble.n	80135ae <__ieee754_log+0x2c6>
 801351c:	4b4e      	ldr	r3, [pc, #312]	; (8013658 <__ieee754_log+0x370>)
 801351e:	2200      	movs	r2, #0
 8013520:	4650      	mov	r0, sl
 8013522:	4659      	mov	r1, fp
 8013524:	f7ed f868 	bl	80005f8 <__aeabi_dmul>
 8013528:	4652      	mov	r2, sl
 801352a:	465b      	mov	r3, fp
 801352c:	f7ed f864 	bl	80005f8 <__aeabi_dmul>
 8013530:	4602      	mov	r2, r0
 8013532:	460b      	mov	r3, r1
 8013534:	4606      	mov	r6, r0
 8013536:	460f      	mov	r7, r1
 8013538:	4640      	mov	r0, r8
 801353a:	4649      	mov	r1, r9
 801353c:	f7ec fea6 	bl	800028c <__adddf3>
 8013540:	ec53 2b18 	vmov	r2, r3, d8
 8013544:	f7ed f858 	bl	80005f8 <__aeabi_dmul>
 8013548:	4680      	mov	r8, r0
 801354a:	4689      	mov	r9, r1
 801354c:	b964      	cbnz	r4, 8013568 <__ieee754_log+0x280>
 801354e:	4602      	mov	r2, r0
 8013550:	460b      	mov	r3, r1
 8013552:	4630      	mov	r0, r6
 8013554:	4639      	mov	r1, r7
 8013556:	f7ec fe97 	bl	8000288 <__aeabi_dsub>
 801355a:	4602      	mov	r2, r0
 801355c:	460b      	mov	r3, r1
 801355e:	4650      	mov	r0, sl
 8013560:	4659      	mov	r1, fp
 8013562:	f7ec fe91 	bl	8000288 <__aeabi_dsub>
 8013566:	e6d6      	b.n	8013316 <__ieee754_log+0x2e>
 8013568:	a321      	add	r3, pc, #132	; (adr r3, 80135f0 <__ieee754_log+0x308>)
 801356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801356e:	ec51 0b19 	vmov	r0, r1, d9
 8013572:	f7ed f841 	bl	80005f8 <__aeabi_dmul>
 8013576:	a320      	add	r3, pc, #128	; (adr r3, 80135f8 <__ieee754_log+0x310>)
 8013578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801357c:	4604      	mov	r4, r0
 801357e:	460d      	mov	r5, r1
 8013580:	ec51 0b19 	vmov	r0, r1, d9
 8013584:	f7ed f838 	bl	80005f8 <__aeabi_dmul>
 8013588:	4642      	mov	r2, r8
 801358a:	464b      	mov	r3, r9
 801358c:	f7ec fe7e 	bl	800028c <__adddf3>
 8013590:	4602      	mov	r2, r0
 8013592:	460b      	mov	r3, r1
 8013594:	4630      	mov	r0, r6
 8013596:	4639      	mov	r1, r7
 8013598:	f7ec fe76 	bl	8000288 <__aeabi_dsub>
 801359c:	4652      	mov	r2, sl
 801359e:	465b      	mov	r3, fp
 80135a0:	f7ec fe72 	bl	8000288 <__aeabi_dsub>
 80135a4:	4602      	mov	r2, r0
 80135a6:	460b      	mov	r3, r1
 80135a8:	4620      	mov	r0, r4
 80135aa:	4629      	mov	r1, r5
 80135ac:	e7d9      	b.n	8013562 <__ieee754_log+0x27a>
 80135ae:	4602      	mov	r2, r0
 80135b0:	460b      	mov	r3, r1
 80135b2:	4650      	mov	r0, sl
 80135b4:	4659      	mov	r1, fp
 80135b6:	f7ec fe67 	bl	8000288 <__aeabi_dsub>
 80135ba:	ec53 2b18 	vmov	r2, r3, d8
 80135be:	f7ed f81b 	bl	80005f8 <__aeabi_dmul>
 80135c2:	4606      	mov	r6, r0
 80135c4:	460f      	mov	r7, r1
 80135c6:	2c00      	cmp	r4, #0
 80135c8:	f43f af23 	beq.w	8013412 <__ieee754_log+0x12a>
 80135cc:	a308      	add	r3, pc, #32	; (adr r3, 80135f0 <__ieee754_log+0x308>)
 80135ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d2:	ec51 0b19 	vmov	r0, r1, d9
 80135d6:	f7ed f80f 	bl	80005f8 <__aeabi_dmul>
 80135da:	a307      	add	r3, pc, #28	; (adr r3, 80135f8 <__ieee754_log+0x310>)
 80135dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e0:	4604      	mov	r4, r0
 80135e2:	460d      	mov	r5, r1
 80135e4:	ec51 0b19 	vmov	r0, r1, d9
 80135e8:	e727      	b.n	801343a <__ieee754_log+0x152>
 80135ea:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8013640 <__ieee754_log+0x358>
 80135ee:	e694      	b.n	801331a <__ieee754_log+0x32>
 80135f0:	fee00000 	.word	0xfee00000
 80135f4:	3fe62e42 	.word	0x3fe62e42
 80135f8:	35793c76 	.word	0x35793c76
 80135fc:	3dea39ef 	.word	0x3dea39ef
 8013600:	55555555 	.word	0x55555555
 8013604:	3fd55555 	.word	0x3fd55555
 8013608:	df3e5244 	.word	0xdf3e5244
 801360c:	3fc2f112 	.word	0x3fc2f112
 8013610:	96cb03de 	.word	0x96cb03de
 8013614:	3fc74664 	.word	0x3fc74664
 8013618:	94229359 	.word	0x94229359
 801361c:	3fd24924 	.word	0x3fd24924
 8013620:	55555593 	.word	0x55555593
 8013624:	3fe55555 	.word	0x3fe55555
 8013628:	d078c69f 	.word	0xd078c69f
 801362c:	3fc39a09 	.word	0x3fc39a09
 8013630:	1d8e78af 	.word	0x1d8e78af
 8013634:	3fcc71c5 	.word	0x3fcc71c5
 8013638:	9997fa04 	.word	0x9997fa04
 801363c:	3fd99999 	.word	0x3fd99999
	...
 8013648:	c3500000 	.word	0xc3500000
 801364c:	43500000 	.word	0x43500000
 8013650:	7fefffff 	.word	0x7fefffff
 8013654:	3ff00000 	.word	0x3ff00000
 8013658:	3fe00000 	.word	0x3fe00000
 801365c:	00000000 	.word	0x00000000

08013660 <__ieee754_pow>:
 8013660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013664:	ed2d 8b06 	vpush	{d8-d10}
 8013668:	b089      	sub	sp, #36	; 0x24
 801366a:	ed8d 1b00 	vstr	d1, [sp]
 801366e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013672:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013676:	ea58 0102 	orrs.w	r1, r8, r2
 801367a:	ec57 6b10 	vmov	r6, r7, d0
 801367e:	d115      	bne.n	80136ac <__ieee754_pow+0x4c>
 8013680:	19b3      	adds	r3, r6, r6
 8013682:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8013686:	4152      	adcs	r2, r2
 8013688:	4299      	cmp	r1, r3
 801368a:	4b89      	ldr	r3, [pc, #548]	; (80138b0 <__ieee754_pow+0x250>)
 801368c:	4193      	sbcs	r3, r2
 801368e:	f080 84d1 	bcs.w	8014034 <__ieee754_pow+0x9d4>
 8013692:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013696:	4630      	mov	r0, r6
 8013698:	4639      	mov	r1, r7
 801369a:	f7ec fdf7 	bl	800028c <__adddf3>
 801369e:	ec41 0b10 	vmov	d0, r0, r1
 80136a2:	b009      	add	sp, #36	; 0x24
 80136a4:	ecbd 8b06 	vpop	{d8-d10}
 80136a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ac:	4b81      	ldr	r3, [pc, #516]	; (80138b4 <__ieee754_pow+0x254>)
 80136ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80136b2:	429c      	cmp	r4, r3
 80136b4:	ee10 aa10 	vmov	sl, s0
 80136b8:	463d      	mov	r5, r7
 80136ba:	dc06      	bgt.n	80136ca <__ieee754_pow+0x6a>
 80136bc:	d101      	bne.n	80136c2 <__ieee754_pow+0x62>
 80136be:	2e00      	cmp	r6, #0
 80136c0:	d1e7      	bne.n	8013692 <__ieee754_pow+0x32>
 80136c2:	4598      	cmp	r8, r3
 80136c4:	dc01      	bgt.n	80136ca <__ieee754_pow+0x6a>
 80136c6:	d10f      	bne.n	80136e8 <__ieee754_pow+0x88>
 80136c8:	b172      	cbz	r2, 80136e8 <__ieee754_pow+0x88>
 80136ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80136ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80136d2:	ea55 050a 	orrs.w	r5, r5, sl
 80136d6:	d1dc      	bne.n	8013692 <__ieee754_pow+0x32>
 80136d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80136dc:	18db      	adds	r3, r3, r3
 80136de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80136e2:	4152      	adcs	r2, r2
 80136e4:	429d      	cmp	r5, r3
 80136e6:	e7d0      	b.n	801368a <__ieee754_pow+0x2a>
 80136e8:	2d00      	cmp	r5, #0
 80136ea:	da3b      	bge.n	8013764 <__ieee754_pow+0x104>
 80136ec:	4b72      	ldr	r3, [pc, #456]	; (80138b8 <__ieee754_pow+0x258>)
 80136ee:	4598      	cmp	r8, r3
 80136f0:	dc51      	bgt.n	8013796 <__ieee754_pow+0x136>
 80136f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80136f6:	4598      	cmp	r8, r3
 80136f8:	f340 84ab 	ble.w	8014052 <__ieee754_pow+0x9f2>
 80136fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013700:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013704:	2b14      	cmp	r3, #20
 8013706:	dd0f      	ble.n	8013728 <__ieee754_pow+0xc8>
 8013708:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801370c:	fa22 f103 	lsr.w	r1, r2, r3
 8013710:	fa01 f303 	lsl.w	r3, r1, r3
 8013714:	4293      	cmp	r3, r2
 8013716:	f040 849c 	bne.w	8014052 <__ieee754_pow+0x9f2>
 801371a:	f001 0101 	and.w	r1, r1, #1
 801371e:	f1c1 0302 	rsb	r3, r1, #2
 8013722:	9304      	str	r3, [sp, #16]
 8013724:	b182      	cbz	r2, 8013748 <__ieee754_pow+0xe8>
 8013726:	e05f      	b.n	80137e8 <__ieee754_pow+0x188>
 8013728:	2a00      	cmp	r2, #0
 801372a:	d15b      	bne.n	80137e4 <__ieee754_pow+0x184>
 801372c:	f1c3 0314 	rsb	r3, r3, #20
 8013730:	fa48 f103 	asr.w	r1, r8, r3
 8013734:	fa01 f303 	lsl.w	r3, r1, r3
 8013738:	4543      	cmp	r3, r8
 801373a:	f040 8487 	bne.w	801404c <__ieee754_pow+0x9ec>
 801373e:	f001 0101 	and.w	r1, r1, #1
 8013742:	f1c1 0302 	rsb	r3, r1, #2
 8013746:	9304      	str	r3, [sp, #16]
 8013748:	4b5c      	ldr	r3, [pc, #368]	; (80138bc <__ieee754_pow+0x25c>)
 801374a:	4598      	cmp	r8, r3
 801374c:	d132      	bne.n	80137b4 <__ieee754_pow+0x154>
 801374e:	f1b9 0f00 	cmp.w	r9, #0
 8013752:	f280 8477 	bge.w	8014044 <__ieee754_pow+0x9e4>
 8013756:	4959      	ldr	r1, [pc, #356]	; (80138bc <__ieee754_pow+0x25c>)
 8013758:	4632      	mov	r2, r6
 801375a:	463b      	mov	r3, r7
 801375c:	2000      	movs	r0, #0
 801375e:	f7ed f875 	bl	800084c <__aeabi_ddiv>
 8013762:	e79c      	b.n	801369e <__ieee754_pow+0x3e>
 8013764:	2300      	movs	r3, #0
 8013766:	9304      	str	r3, [sp, #16]
 8013768:	2a00      	cmp	r2, #0
 801376a:	d13d      	bne.n	80137e8 <__ieee754_pow+0x188>
 801376c:	4b51      	ldr	r3, [pc, #324]	; (80138b4 <__ieee754_pow+0x254>)
 801376e:	4598      	cmp	r8, r3
 8013770:	d1ea      	bne.n	8013748 <__ieee754_pow+0xe8>
 8013772:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013776:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801377a:	ea53 030a 	orrs.w	r3, r3, sl
 801377e:	f000 8459 	beq.w	8014034 <__ieee754_pow+0x9d4>
 8013782:	4b4f      	ldr	r3, [pc, #316]	; (80138c0 <__ieee754_pow+0x260>)
 8013784:	429c      	cmp	r4, r3
 8013786:	dd08      	ble.n	801379a <__ieee754_pow+0x13a>
 8013788:	f1b9 0f00 	cmp.w	r9, #0
 801378c:	f2c0 8456 	blt.w	801403c <__ieee754_pow+0x9dc>
 8013790:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013794:	e783      	b.n	801369e <__ieee754_pow+0x3e>
 8013796:	2302      	movs	r3, #2
 8013798:	e7e5      	b.n	8013766 <__ieee754_pow+0x106>
 801379a:	f1b9 0f00 	cmp.w	r9, #0
 801379e:	f04f 0000 	mov.w	r0, #0
 80137a2:	f04f 0100 	mov.w	r1, #0
 80137a6:	f6bf af7a 	bge.w	801369e <__ieee754_pow+0x3e>
 80137aa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80137ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80137b2:	e774      	b.n	801369e <__ieee754_pow+0x3e>
 80137b4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80137b8:	d106      	bne.n	80137c8 <__ieee754_pow+0x168>
 80137ba:	4632      	mov	r2, r6
 80137bc:	463b      	mov	r3, r7
 80137be:	4630      	mov	r0, r6
 80137c0:	4639      	mov	r1, r7
 80137c2:	f7ec ff19 	bl	80005f8 <__aeabi_dmul>
 80137c6:	e76a      	b.n	801369e <__ieee754_pow+0x3e>
 80137c8:	4b3e      	ldr	r3, [pc, #248]	; (80138c4 <__ieee754_pow+0x264>)
 80137ca:	4599      	cmp	r9, r3
 80137cc:	d10c      	bne.n	80137e8 <__ieee754_pow+0x188>
 80137ce:	2d00      	cmp	r5, #0
 80137d0:	db0a      	blt.n	80137e8 <__ieee754_pow+0x188>
 80137d2:	ec47 6b10 	vmov	d0, r6, r7
 80137d6:	b009      	add	sp, #36	; 0x24
 80137d8:	ecbd 8b06 	vpop	{d8-d10}
 80137dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137e0:	f7ff bbde 	b.w	8012fa0 <__ieee754_sqrt>
 80137e4:	2300      	movs	r3, #0
 80137e6:	9304      	str	r3, [sp, #16]
 80137e8:	ec47 6b10 	vmov	d0, r6, r7
 80137ec:	f7ff fbc4 	bl	8012f78 <fabs>
 80137f0:	ec51 0b10 	vmov	r0, r1, d0
 80137f4:	f1ba 0f00 	cmp.w	sl, #0
 80137f8:	d129      	bne.n	801384e <__ieee754_pow+0x1ee>
 80137fa:	b124      	cbz	r4, 8013806 <__ieee754_pow+0x1a6>
 80137fc:	4b2f      	ldr	r3, [pc, #188]	; (80138bc <__ieee754_pow+0x25c>)
 80137fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013802:	429a      	cmp	r2, r3
 8013804:	d123      	bne.n	801384e <__ieee754_pow+0x1ee>
 8013806:	f1b9 0f00 	cmp.w	r9, #0
 801380a:	da05      	bge.n	8013818 <__ieee754_pow+0x1b8>
 801380c:	4602      	mov	r2, r0
 801380e:	460b      	mov	r3, r1
 8013810:	2000      	movs	r0, #0
 8013812:	492a      	ldr	r1, [pc, #168]	; (80138bc <__ieee754_pow+0x25c>)
 8013814:	f7ed f81a 	bl	800084c <__aeabi_ddiv>
 8013818:	2d00      	cmp	r5, #0
 801381a:	f6bf af40 	bge.w	801369e <__ieee754_pow+0x3e>
 801381e:	9b04      	ldr	r3, [sp, #16]
 8013820:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013824:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013828:	431c      	orrs	r4, r3
 801382a:	d108      	bne.n	801383e <__ieee754_pow+0x1de>
 801382c:	4602      	mov	r2, r0
 801382e:	460b      	mov	r3, r1
 8013830:	4610      	mov	r0, r2
 8013832:	4619      	mov	r1, r3
 8013834:	f7ec fd28 	bl	8000288 <__aeabi_dsub>
 8013838:	4602      	mov	r2, r0
 801383a:	460b      	mov	r3, r1
 801383c:	e78f      	b.n	801375e <__ieee754_pow+0xfe>
 801383e:	9b04      	ldr	r3, [sp, #16]
 8013840:	2b01      	cmp	r3, #1
 8013842:	f47f af2c 	bne.w	801369e <__ieee754_pow+0x3e>
 8013846:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801384a:	4619      	mov	r1, r3
 801384c:	e727      	b.n	801369e <__ieee754_pow+0x3e>
 801384e:	0feb      	lsrs	r3, r5, #31
 8013850:	3b01      	subs	r3, #1
 8013852:	9306      	str	r3, [sp, #24]
 8013854:	9a06      	ldr	r2, [sp, #24]
 8013856:	9b04      	ldr	r3, [sp, #16]
 8013858:	4313      	orrs	r3, r2
 801385a:	d102      	bne.n	8013862 <__ieee754_pow+0x202>
 801385c:	4632      	mov	r2, r6
 801385e:	463b      	mov	r3, r7
 8013860:	e7e6      	b.n	8013830 <__ieee754_pow+0x1d0>
 8013862:	4b19      	ldr	r3, [pc, #100]	; (80138c8 <__ieee754_pow+0x268>)
 8013864:	4598      	cmp	r8, r3
 8013866:	f340 80fb 	ble.w	8013a60 <__ieee754_pow+0x400>
 801386a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801386e:	4598      	cmp	r8, r3
 8013870:	4b13      	ldr	r3, [pc, #76]	; (80138c0 <__ieee754_pow+0x260>)
 8013872:	dd0c      	ble.n	801388e <__ieee754_pow+0x22e>
 8013874:	429c      	cmp	r4, r3
 8013876:	dc0f      	bgt.n	8013898 <__ieee754_pow+0x238>
 8013878:	f1b9 0f00 	cmp.w	r9, #0
 801387c:	da0f      	bge.n	801389e <__ieee754_pow+0x23e>
 801387e:	2000      	movs	r0, #0
 8013880:	b009      	add	sp, #36	; 0x24
 8013882:	ecbd 8b06 	vpop	{d8-d10}
 8013886:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801388a:	f000 bcba 	b.w	8014202 <__math_oflow>
 801388e:	429c      	cmp	r4, r3
 8013890:	dbf2      	blt.n	8013878 <__ieee754_pow+0x218>
 8013892:	4b0a      	ldr	r3, [pc, #40]	; (80138bc <__ieee754_pow+0x25c>)
 8013894:	429c      	cmp	r4, r3
 8013896:	dd19      	ble.n	80138cc <__ieee754_pow+0x26c>
 8013898:	f1b9 0f00 	cmp.w	r9, #0
 801389c:	dcef      	bgt.n	801387e <__ieee754_pow+0x21e>
 801389e:	2000      	movs	r0, #0
 80138a0:	b009      	add	sp, #36	; 0x24
 80138a2:	ecbd 8b06 	vpop	{d8-d10}
 80138a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138aa:	f000 bca1 	b.w	80141f0 <__math_uflow>
 80138ae:	bf00      	nop
 80138b0:	fff00000 	.word	0xfff00000
 80138b4:	7ff00000 	.word	0x7ff00000
 80138b8:	433fffff 	.word	0x433fffff
 80138bc:	3ff00000 	.word	0x3ff00000
 80138c0:	3fefffff 	.word	0x3fefffff
 80138c4:	3fe00000 	.word	0x3fe00000
 80138c8:	41e00000 	.word	0x41e00000
 80138cc:	4b60      	ldr	r3, [pc, #384]	; (8013a50 <__ieee754_pow+0x3f0>)
 80138ce:	2200      	movs	r2, #0
 80138d0:	f7ec fcda 	bl	8000288 <__aeabi_dsub>
 80138d4:	a354      	add	r3, pc, #336	; (adr r3, 8013a28 <__ieee754_pow+0x3c8>)
 80138d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138da:	4604      	mov	r4, r0
 80138dc:	460d      	mov	r5, r1
 80138de:	f7ec fe8b 	bl	80005f8 <__aeabi_dmul>
 80138e2:	a353      	add	r3, pc, #332	; (adr r3, 8013a30 <__ieee754_pow+0x3d0>)
 80138e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e8:	4606      	mov	r6, r0
 80138ea:	460f      	mov	r7, r1
 80138ec:	4620      	mov	r0, r4
 80138ee:	4629      	mov	r1, r5
 80138f0:	f7ec fe82 	bl	80005f8 <__aeabi_dmul>
 80138f4:	4b57      	ldr	r3, [pc, #348]	; (8013a54 <__ieee754_pow+0x3f4>)
 80138f6:	4682      	mov	sl, r0
 80138f8:	468b      	mov	fp, r1
 80138fa:	2200      	movs	r2, #0
 80138fc:	4620      	mov	r0, r4
 80138fe:	4629      	mov	r1, r5
 8013900:	f7ec fe7a 	bl	80005f8 <__aeabi_dmul>
 8013904:	4602      	mov	r2, r0
 8013906:	460b      	mov	r3, r1
 8013908:	a14b      	add	r1, pc, #300	; (adr r1, 8013a38 <__ieee754_pow+0x3d8>)
 801390a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801390e:	f7ec fcbb 	bl	8000288 <__aeabi_dsub>
 8013912:	4622      	mov	r2, r4
 8013914:	462b      	mov	r3, r5
 8013916:	f7ec fe6f 	bl	80005f8 <__aeabi_dmul>
 801391a:	4602      	mov	r2, r0
 801391c:	460b      	mov	r3, r1
 801391e:	2000      	movs	r0, #0
 8013920:	494d      	ldr	r1, [pc, #308]	; (8013a58 <__ieee754_pow+0x3f8>)
 8013922:	f7ec fcb1 	bl	8000288 <__aeabi_dsub>
 8013926:	4622      	mov	r2, r4
 8013928:	4680      	mov	r8, r0
 801392a:	4689      	mov	r9, r1
 801392c:	462b      	mov	r3, r5
 801392e:	4620      	mov	r0, r4
 8013930:	4629      	mov	r1, r5
 8013932:	f7ec fe61 	bl	80005f8 <__aeabi_dmul>
 8013936:	4602      	mov	r2, r0
 8013938:	460b      	mov	r3, r1
 801393a:	4640      	mov	r0, r8
 801393c:	4649      	mov	r1, r9
 801393e:	f7ec fe5b 	bl	80005f8 <__aeabi_dmul>
 8013942:	a33f      	add	r3, pc, #252	; (adr r3, 8013a40 <__ieee754_pow+0x3e0>)
 8013944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013948:	f7ec fe56 	bl	80005f8 <__aeabi_dmul>
 801394c:	4602      	mov	r2, r0
 801394e:	460b      	mov	r3, r1
 8013950:	4650      	mov	r0, sl
 8013952:	4659      	mov	r1, fp
 8013954:	f7ec fc98 	bl	8000288 <__aeabi_dsub>
 8013958:	4602      	mov	r2, r0
 801395a:	460b      	mov	r3, r1
 801395c:	4680      	mov	r8, r0
 801395e:	4689      	mov	r9, r1
 8013960:	4630      	mov	r0, r6
 8013962:	4639      	mov	r1, r7
 8013964:	f7ec fc92 	bl	800028c <__adddf3>
 8013968:	2000      	movs	r0, #0
 801396a:	4632      	mov	r2, r6
 801396c:	463b      	mov	r3, r7
 801396e:	4604      	mov	r4, r0
 8013970:	460d      	mov	r5, r1
 8013972:	f7ec fc89 	bl	8000288 <__aeabi_dsub>
 8013976:	4602      	mov	r2, r0
 8013978:	460b      	mov	r3, r1
 801397a:	4640      	mov	r0, r8
 801397c:	4649      	mov	r1, r9
 801397e:	f7ec fc83 	bl	8000288 <__aeabi_dsub>
 8013982:	9b04      	ldr	r3, [sp, #16]
 8013984:	9a06      	ldr	r2, [sp, #24]
 8013986:	3b01      	subs	r3, #1
 8013988:	4313      	orrs	r3, r2
 801398a:	4682      	mov	sl, r0
 801398c:	468b      	mov	fp, r1
 801398e:	f040 81e7 	bne.w	8013d60 <__ieee754_pow+0x700>
 8013992:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013a48 <__ieee754_pow+0x3e8>
 8013996:	eeb0 8a47 	vmov.f32	s16, s14
 801399a:	eef0 8a67 	vmov.f32	s17, s15
 801399e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80139a2:	2600      	movs	r6, #0
 80139a4:	4632      	mov	r2, r6
 80139a6:	463b      	mov	r3, r7
 80139a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80139ac:	f7ec fc6c 	bl	8000288 <__aeabi_dsub>
 80139b0:	4622      	mov	r2, r4
 80139b2:	462b      	mov	r3, r5
 80139b4:	f7ec fe20 	bl	80005f8 <__aeabi_dmul>
 80139b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80139bc:	4680      	mov	r8, r0
 80139be:	4689      	mov	r9, r1
 80139c0:	4650      	mov	r0, sl
 80139c2:	4659      	mov	r1, fp
 80139c4:	f7ec fe18 	bl	80005f8 <__aeabi_dmul>
 80139c8:	4602      	mov	r2, r0
 80139ca:	460b      	mov	r3, r1
 80139cc:	4640      	mov	r0, r8
 80139ce:	4649      	mov	r1, r9
 80139d0:	f7ec fc5c 	bl	800028c <__adddf3>
 80139d4:	4632      	mov	r2, r6
 80139d6:	463b      	mov	r3, r7
 80139d8:	4680      	mov	r8, r0
 80139da:	4689      	mov	r9, r1
 80139dc:	4620      	mov	r0, r4
 80139de:	4629      	mov	r1, r5
 80139e0:	f7ec fe0a 	bl	80005f8 <__aeabi_dmul>
 80139e4:	460b      	mov	r3, r1
 80139e6:	4604      	mov	r4, r0
 80139e8:	460d      	mov	r5, r1
 80139ea:	4602      	mov	r2, r0
 80139ec:	4649      	mov	r1, r9
 80139ee:	4640      	mov	r0, r8
 80139f0:	f7ec fc4c 	bl	800028c <__adddf3>
 80139f4:	4b19      	ldr	r3, [pc, #100]	; (8013a5c <__ieee754_pow+0x3fc>)
 80139f6:	4299      	cmp	r1, r3
 80139f8:	ec45 4b19 	vmov	d9, r4, r5
 80139fc:	4606      	mov	r6, r0
 80139fe:	460f      	mov	r7, r1
 8013a00:	468b      	mov	fp, r1
 8013a02:	f340 82f0 	ble.w	8013fe6 <__ieee754_pow+0x986>
 8013a06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013a0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013a0e:	4303      	orrs	r3, r0
 8013a10:	f000 81e4 	beq.w	8013ddc <__ieee754_pow+0x77c>
 8013a14:	ec51 0b18 	vmov	r0, r1, d8
 8013a18:	2200      	movs	r2, #0
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	f7ed f85e 	bl	8000adc <__aeabi_dcmplt>
 8013a20:	3800      	subs	r0, #0
 8013a22:	bf18      	it	ne
 8013a24:	2001      	movne	r0, #1
 8013a26:	e72b      	b.n	8013880 <__ieee754_pow+0x220>
 8013a28:	60000000 	.word	0x60000000
 8013a2c:	3ff71547 	.word	0x3ff71547
 8013a30:	f85ddf44 	.word	0xf85ddf44
 8013a34:	3e54ae0b 	.word	0x3e54ae0b
 8013a38:	55555555 	.word	0x55555555
 8013a3c:	3fd55555 	.word	0x3fd55555
 8013a40:	652b82fe 	.word	0x652b82fe
 8013a44:	3ff71547 	.word	0x3ff71547
 8013a48:	00000000 	.word	0x00000000
 8013a4c:	bff00000 	.word	0xbff00000
 8013a50:	3ff00000 	.word	0x3ff00000
 8013a54:	3fd00000 	.word	0x3fd00000
 8013a58:	3fe00000 	.word	0x3fe00000
 8013a5c:	408fffff 	.word	0x408fffff
 8013a60:	4bd5      	ldr	r3, [pc, #852]	; (8013db8 <__ieee754_pow+0x758>)
 8013a62:	402b      	ands	r3, r5
 8013a64:	2200      	movs	r2, #0
 8013a66:	b92b      	cbnz	r3, 8013a74 <__ieee754_pow+0x414>
 8013a68:	4bd4      	ldr	r3, [pc, #848]	; (8013dbc <__ieee754_pow+0x75c>)
 8013a6a:	f7ec fdc5 	bl	80005f8 <__aeabi_dmul>
 8013a6e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013a72:	460c      	mov	r4, r1
 8013a74:	1523      	asrs	r3, r4, #20
 8013a76:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013a7a:	4413      	add	r3, r2
 8013a7c:	9305      	str	r3, [sp, #20]
 8013a7e:	4bd0      	ldr	r3, [pc, #832]	; (8013dc0 <__ieee754_pow+0x760>)
 8013a80:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013a84:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013a88:	429c      	cmp	r4, r3
 8013a8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013a8e:	dd08      	ble.n	8013aa2 <__ieee754_pow+0x442>
 8013a90:	4bcc      	ldr	r3, [pc, #816]	; (8013dc4 <__ieee754_pow+0x764>)
 8013a92:	429c      	cmp	r4, r3
 8013a94:	f340 8162 	ble.w	8013d5c <__ieee754_pow+0x6fc>
 8013a98:	9b05      	ldr	r3, [sp, #20]
 8013a9a:	3301      	adds	r3, #1
 8013a9c:	9305      	str	r3, [sp, #20]
 8013a9e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013aa2:	2400      	movs	r4, #0
 8013aa4:	00e3      	lsls	r3, r4, #3
 8013aa6:	9307      	str	r3, [sp, #28]
 8013aa8:	4bc7      	ldr	r3, [pc, #796]	; (8013dc8 <__ieee754_pow+0x768>)
 8013aaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013aae:	ed93 7b00 	vldr	d7, [r3]
 8013ab2:	4629      	mov	r1, r5
 8013ab4:	ec53 2b17 	vmov	r2, r3, d7
 8013ab8:	eeb0 9a47 	vmov.f32	s18, s14
 8013abc:	eef0 9a67 	vmov.f32	s19, s15
 8013ac0:	4682      	mov	sl, r0
 8013ac2:	f7ec fbe1 	bl	8000288 <__aeabi_dsub>
 8013ac6:	4652      	mov	r2, sl
 8013ac8:	4606      	mov	r6, r0
 8013aca:	460f      	mov	r7, r1
 8013acc:	462b      	mov	r3, r5
 8013ace:	ec51 0b19 	vmov	r0, r1, d9
 8013ad2:	f7ec fbdb 	bl	800028c <__adddf3>
 8013ad6:	4602      	mov	r2, r0
 8013ad8:	460b      	mov	r3, r1
 8013ada:	2000      	movs	r0, #0
 8013adc:	49bb      	ldr	r1, [pc, #748]	; (8013dcc <__ieee754_pow+0x76c>)
 8013ade:	f7ec feb5 	bl	800084c <__aeabi_ddiv>
 8013ae2:	ec41 0b1a 	vmov	d10, r0, r1
 8013ae6:	4602      	mov	r2, r0
 8013ae8:	460b      	mov	r3, r1
 8013aea:	4630      	mov	r0, r6
 8013aec:	4639      	mov	r1, r7
 8013aee:	f7ec fd83 	bl	80005f8 <__aeabi_dmul>
 8013af2:	2300      	movs	r3, #0
 8013af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013af8:	9302      	str	r3, [sp, #8]
 8013afa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013afe:	46ab      	mov	fp, r5
 8013b00:	106d      	asrs	r5, r5, #1
 8013b02:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013b06:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013b0a:	ec41 0b18 	vmov	d8, r0, r1
 8013b0e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8013b12:	2200      	movs	r2, #0
 8013b14:	4640      	mov	r0, r8
 8013b16:	4649      	mov	r1, r9
 8013b18:	4614      	mov	r4, r2
 8013b1a:	461d      	mov	r5, r3
 8013b1c:	f7ec fd6c 	bl	80005f8 <__aeabi_dmul>
 8013b20:	4602      	mov	r2, r0
 8013b22:	460b      	mov	r3, r1
 8013b24:	4630      	mov	r0, r6
 8013b26:	4639      	mov	r1, r7
 8013b28:	f7ec fbae 	bl	8000288 <__aeabi_dsub>
 8013b2c:	ec53 2b19 	vmov	r2, r3, d9
 8013b30:	4606      	mov	r6, r0
 8013b32:	460f      	mov	r7, r1
 8013b34:	4620      	mov	r0, r4
 8013b36:	4629      	mov	r1, r5
 8013b38:	f7ec fba6 	bl	8000288 <__aeabi_dsub>
 8013b3c:	4602      	mov	r2, r0
 8013b3e:	460b      	mov	r3, r1
 8013b40:	4650      	mov	r0, sl
 8013b42:	4659      	mov	r1, fp
 8013b44:	f7ec fba0 	bl	8000288 <__aeabi_dsub>
 8013b48:	4642      	mov	r2, r8
 8013b4a:	464b      	mov	r3, r9
 8013b4c:	f7ec fd54 	bl	80005f8 <__aeabi_dmul>
 8013b50:	4602      	mov	r2, r0
 8013b52:	460b      	mov	r3, r1
 8013b54:	4630      	mov	r0, r6
 8013b56:	4639      	mov	r1, r7
 8013b58:	f7ec fb96 	bl	8000288 <__aeabi_dsub>
 8013b5c:	ec53 2b1a 	vmov	r2, r3, d10
 8013b60:	f7ec fd4a 	bl	80005f8 <__aeabi_dmul>
 8013b64:	ec53 2b18 	vmov	r2, r3, d8
 8013b68:	ec41 0b19 	vmov	d9, r0, r1
 8013b6c:	ec51 0b18 	vmov	r0, r1, d8
 8013b70:	f7ec fd42 	bl	80005f8 <__aeabi_dmul>
 8013b74:	a37c      	add	r3, pc, #496	; (adr r3, 8013d68 <__ieee754_pow+0x708>)
 8013b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b7a:	4604      	mov	r4, r0
 8013b7c:	460d      	mov	r5, r1
 8013b7e:	f7ec fd3b 	bl	80005f8 <__aeabi_dmul>
 8013b82:	a37b      	add	r3, pc, #492	; (adr r3, 8013d70 <__ieee754_pow+0x710>)
 8013b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b88:	f7ec fb80 	bl	800028c <__adddf3>
 8013b8c:	4622      	mov	r2, r4
 8013b8e:	462b      	mov	r3, r5
 8013b90:	f7ec fd32 	bl	80005f8 <__aeabi_dmul>
 8013b94:	a378      	add	r3, pc, #480	; (adr r3, 8013d78 <__ieee754_pow+0x718>)
 8013b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b9a:	f7ec fb77 	bl	800028c <__adddf3>
 8013b9e:	4622      	mov	r2, r4
 8013ba0:	462b      	mov	r3, r5
 8013ba2:	f7ec fd29 	bl	80005f8 <__aeabi_dmul>
 8013ba6:	a376      	add	r3, pc, #472	; (adr r3, 8013d80 <__ieee754_pow+0x720>)
 8013ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bac:	f7ec fb6e 	bl	800028c <__adddf3>
 8013bb0:	4622      	mov	r2, r4
 8013bb2:	462b      	mov	r3, r5
 8013bb4:	f7ec fd20 	bl	80005f8 <__aeabi_dmul>
 8013bb8:	a373      	add	r3, pc, #460	; (adr r3, 8013d88 <__ieee754_pow+0x728>)
 8013bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bbe:	f7ec fb65 	bl	800028c <__adddf3>
 8013bc2:	4622      	mov	r2, r4
 8013bc4:	462b      	mov	r3, r5
 8013bc6:	f7ec fd17 	bl	80005f8 <__aeabi_dmul>
 8013bca:	a371      	add	r3, pc, #452	; (adr r3, 8013d90 <__ieee754_pow+0x730>)
 8013bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd0:	f7ec fb5c 	bl	800028c <__adddf3>
 8013bd4:	4622      	mov	r2, r4
 8013bd6:	4606      	mov	r6, r0
 8013bd8:	460f      	mov	r7, r1
 8013bda:	462b      	mov	r3, r5
 8013bdc:	4620      	mov	r0, r4
 8013bde:	4629      	mov	r1, r5
 8013be0:	f7ec fd0a 	bl	80005f8 <__aeabi_dmul>
 8013be4:	4602      	mov	r2, r0
 8013be6:	460b      	mov	r3, r1
 8013be8:	4630      	mov	r0, r6
 8013bea:	4639      	mov	r1, r7
 8013bec:	f7ec fd04 	bl	80005f8 <__aeabi_dmul>
 8013bf0:	4642      	mov	r2, r8
 8013bf2:	4604      	mov	r4, r0
 8013bf4:	460d      	mov	r5, r1
 8013bf6:	464b      	mov	r3, r9
 8013bf8:	ec51 0b18 	vmov	r0, r1, d8
 8013bfc:	f7ec fb46 	bl	800028c <__adddf3>
 8013c00:	ec53 2b19 	vmov	r2, r3, d9
 8013c04:	f7ec fcf8 	bl	80005f8 <__aeabi_dmul>
 8013c08:	4622      	mov	r2, r4
 8013c0a:	462b      	mov	r3, r5
 8013c0c:	f7ec fb3e 	bl	800028c <__adddf3>
 8013c10:	4642      	mov	r2, r8
 8013c12:	4682      	mov	sl, r0
 8013c14:	468b      	mov	fp, r1
 8013c16:	464b      	mov	r3, r9
 8013c18:	4640      	mov	r0, r8
 8013c1a:	4649      	mov	r1, r9
 8013c1c:	f7ec fcec 	bl	80005f8 <__aeabi_dmul>
 8013c20:	4b6b      	ldr	r3, [pc, #428]	; (8013dd0 <__ieee754_pow+0x770>)
 8013c22:	2200      	movs	r2, #0
 8013c24:	4606      	mov	r6, r0
 8013c26:	460f      	mov	r7, r1
 8013c28:	f7ec fb30 	bl	800028c <__adddf3>
 8013c2c:	4652      	mov	r2, sl
 8013c2e:	465b      	mov	r3, fp
 8013c30:	f7ec fb2c 	bl	800028c <__adddf3>
 8013c34:	2000      	movs	r0, #0
 8013c36:	4604      	mov	r4, r0
 8013c38:	460d      	mov	r5, r1
 8013c3a:	4602      	mov	r2, r0
 8013c3c:	460b      	mov	r3, r1
 8013c3e:	4640      	mov	r0, r8
 8013c40:	4649      	mov	r1, r9
 8013c42:	f7ec fcd9 	bl	80005f8 <__aeabi_dmul>
 8013c46:	4b62      	ldr	r3, [pc, #392]	; (8013dd0 <__ieee754_pow+0x770>)
 8013c48:	4680      	mov	r8, r0
 8013c4a:	4689      	mov	r9, r1
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	4620      	mov	r0, r4
 8013c50:	4629      	mov	r1, r5
 8013c52:	f7ec fb19 	bl	8000288 <__aeabi_dsub>
 8013c56:	4632      	mov	r2, r6
 8013c58:	463b      	mov	r3, r7
 8013c5a:	f7ec fb15 	bl	8000288 <__aeabi_dsub>
 8013c5e:	4602      	mov	r2, r0
 8013c60:	460b      	mov	r3, r1
 8013c62:	4650      	mov	r0, sl
 8013c64:	4659      	mov	r1, fp
 8013c66:	f7ec fb0f 	bl	8000288 <__aeabi_dsub>
 8013c6a:	ec53 2b18 	vmov	r2, r3, d8
 8013c6e:	f7ec fcc3 	bl	80005f8 <__aeabi_dmul>
 8013c72:	4622      	mov	r2, r4
 8013c74:	4606      	mov	r6, r0
 8013c76:	460f      	mov	r7, r1
 8013c78:	462b      	mov	r3, r5
 8013c7a:	ec51 0b19 	vmov	r0, r1, d9
 8013c7e:	f7ec fcbb 	bl	80005f8 <__aeabi_dmul>
 8013c82:	4602      	mov	r2, r0
 8013c84:	460b      	mov	r3, r1
 8013c86:	4630      	mov	r0, r6
 8013c88:	4639      	mov	r1, r7
 8013c8a:	f7ec faff 	bl	800028c <__adddf3>
 8013c8e:	4606      	mov	r6, r0
 8013c90:	460f      	mov	r7, r1
 8013c92:	4602      	mov	r2, r0
 8013c94:	460b      	mov	r3, r1
 8013c96:	4640      	mov	r0, r8
 8013c98:	4649      	mov	r1, r9
 8013c9a:	f7ec faf7 	bl	800028c <__adddf3>
 8013c9e:	a33e      	add	r3, pc, #248	; (adr r3, 8013d98 <__ieee754_pow+0x738>)
 8013ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca4:	2000      	movs	r0, #0
 8013ca6:	4604      	mov	r4, r0
 8013ca8:	460d      	mov	r5, r1
 8013caa:	f7ec fca5 	bl	80005f8 <__aeabi_dmul>
 8013cae:	4642      	mov	r2, r8
 8013cb0:	ec41 0b18 	vmov	d8, r0, r1
 8013cb4:	464b      	mov	r3, r9
 8013cb6:	4620      	mov	r0, r4
 8013cb8:	4629      	mov	r1, r5
 8013cba:	f7ec fae5 	bl	8000288 <__aeabi_dsub>
 8013cbe:	4602      	mov	r2, r0
 8013cc0:	460b      	mov	r3, r1
 8013cc2:	4630      	mov	r0, r6
 8013cc4:	4639      	mov	r1, r7
 8013cc6:	f7ec fadf 	bl	8000288 <__aeabi_dsub>
 8013cca:	a335      	add	r3, pc, #212	; (adr r3, 8013da0 <__ieee754_pow+0x740>)
 8013ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cd0:	f7ec fc92 	bl	80005f8 <__aeabi_dmul>
 8013cd4:	a334      	add	r3, pc, #208	; (adr r3, 8013da8 <__ieee754_pow+0x748>)
 8013cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cda:	4606      	mov	r6, r0
 8013cdc:	460f      	mov	r7, r1
 8013cde:	4620      	mov	r0, r4
 8013ce0:	4629      	mov	r1, r5
 8013ce2:	f7ec fc89 	bl	80005f8 <__aeabi_dmul>
 8013ce6:	4602      	mov	r2, r0
 8013ce8:	460b      	mov	r3, r1
 8013cea:	4630      	mov	r0, r6
 8013cec:	4639      	mov	r1, r7
 8013cee:	f7ec facd 	bl	800028c <__adddf3>
 8013cf2:	9a07      	ldr	r2, [sp, #28]
 8013cf4:	4b37      	ldr	r3, [pc, #220]	; (8013dd4 <__ieee754_pow+0x774>)
 8013cf6:	4413      	add	r3, r2
 8013cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cfc:	f7ec fac6 	bl	800028c <__adddf3>
 8013d00:	4682      	mov	sl, r0
 8013d02:	9805      	ldr	r0, [sp, #20]
 8013d04:	468b      	mov	fp, r1
 8013d06:	f7ec fc0d 	bl	8000524 <__aeabi_i2d>
 8013d0a:	9a07      	ldr	r2, [sp, #28]
 8013d0c:	4b32      	ldr	r3, [pc, #200]	; (8013dd8 <__ieee754_pow+0x778>)
 8013d0e:	4413      	add	r3, r2
 8013d10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013d14:	4606      	mov	r6, r0
 8013d16:	460f      	mov	r7, r1
 8013d18:	4652      	mov	r2, sl
 8013d1a:	465b      	mov	r3, fp
 8013d1c:	ec51 0b18 	vmov	r0, r1, d8
 8013d20:	f7ec fab4 	bl	800028c <__adddf3>
 8013d24:	4642      	mov	r2, r8
 8013d26:	464b      	mov	r3, r9
 8013d28:	f7ec fab0 	bl	800028c <__adddf3>
 8013d2c:	4632      	mov	r2, r6
 8013d2e:	463b      	mov	r3, r7
 8013d30:	f7ec faac 	bl	800028c <__adddf3>
 8013d34:	2000      	movs	r0, #0
 8013d36:	4632      	mov	r2, r6
 8013d38:	463b      	mov	r3, r7
 8013d3a:	4604      	mov	r4, r0
 8013d3c:	460d      	mov	r5, r1
 8013d3e:	f7ec faa3 	bl	8000288 <__aeabi_dsub>
 8013d42:	4642      	mov	r2, r8
 8013d44:	464b      	mov	r3, r9
 8013d46:	f7ec fa9f 	bl	8000288 <__aeabi_dsub>
 8013d4a:	ec53 2b18 	vmov	r2, r3, d8
 8013d4e:	f7ec fa9b 	bl	8000288 <__aeabi_dsub>
 8013d52:	4602      	mov	r2, r0
 8013d54:	460b      	mov	r3, r1
 8013d56:	4650      	mov	r0, sl
 8013d58:	4659      	mov	r1, fp
 8013d5a:	e610      	b.n	801397e <__ieee754_pow+0x31e>
 8013d5c:	2401      	movs	r4, #1
 8013d5e:	e6a1      	b.n	8013aa4 <__ieee754_pow+0x444>
 8013d60:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013db0 <__ieee754_pow+0x750>
 8013d64:	e617      	b.n	8013996 <__ieee754_pow+0x336>
 8013d66:	bf00      	nop
 8013d68:	4a454eef 	.word	0x4a454eef
 8013d6c:	3fca7e28 	.word	0x3fca7e28
 8013d70:	93c9db65 	.word	0x93c9db65
 8013d74:	3fcd864a 	.word	0x3fcd864a
 8013d78:	a91d4101 	.word	0xa91d4101
 8013d7c:	3fd17460 	.word	0x3fd17460
 8013d80:	518f264d 	.word	0x518f264d
 8013d84:	3fd55555 	.word	0x3fd55555
 8013d88:	db6fabff 	.word	0xdb6fabff
 8013d8c:	3fdb6db6 	.word	0x3fdb6db6
 8013d90:	33333303 	.word	0x33333303
 8013d94:	3fe33333 	.word	0x3fe33333
 8013d98:	e0000000 	.word	0xe0000000
 8013d9c:	3feec709 	.word	0x3feec709
 8013da0:	dc3a03fd 	.word	0xdc3a03fd
 8013da4:	3feec709 	.word	0x3feec709
 8013da8:	145b01f5 	.word	0x145b01f5
 8013dac:	be3e2fe0 	.word	0xbe3e2fe0
 8013db0:	00000000 	.word	0x00000000
 8013db4:	3ff00000 	.word	0x3ff00000
 8013db8:	7ff00000 	.word	0x7ff00000
 8013dbc:	43400000 	.word	0x43400000
 8013dc0:	0003988e 	.word	0x0003988e
 8013dc4:	000bb679 	.word	0x000bb679
 8013dc8:	080147f8 	.word	0x080147f8
 8013dcc:	3ff00000 	.word	0x3ff00000
 8013dd0:	40080000 	.word	0x40080000
 8013dd4:	08014818 	.word	0x08014818
 8013dd8:	08014808 	.word	0x08014808
 8013ddc:	a3b3      	add	r3, pc, #716	; (adr r3, 80140ac <__ieee754_pow+0xa4c>)
 8013dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de2:	4640      	mov	r0, r8
 8013de4:	4649      	mov	r1, r9
 8013de6:	f7ec fa51 	bl	800028c <__adddf3>
 8013dea:	4622      	mov	r2, r4
 8013dec:	ec41 0b1a 	vmov	d10, r0, r1
 8013df0:	462b      	mov	r3, r5
 8013df2:	4630      	mov	r0, r6
 8013df4:	4639      	mov	r1, r7
 8013df6:	f7ec fa47 	bl	8000288 <__aeabi_dsub>
 8013dfa:	4602      	mov	r2, r0
 8013dfc:	460b      	mov	r3, r1
 8013dfe:	ec51 0b1a 	vmov	r0, r1, d10
 8013e02:	f7ec fe89 	bl	8000b18 <__aeabi_dcmpgt>
 8013e06:	2800      	cmp	r0, #0
 8013e08:	f47f ae04 	bne.w	8013a14 <__ieee754_pow+0x3b4>
 8013e0c:	4aa2      	ldr	r2, [pc, #648]	; (8014098 <__ieee754_pow+0xa38>)
 8013e0e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013e12:	4293      	cmp	r3, r2
 8013e14:	f340 8107 	ble.w	8014026 <__ieee754_pow+0x9c6>
 8013e18:	151b      	asrs	r3, r3, #20
 8013e1a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013e1e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013e22:	fa4a fa03 	asr.w	sl, sl, r3
 8013e26:	44da      	add	sl, fp
 8013e28:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013e2c:	489b      	ldr	r0, [pc, #620]	; (801409c <__ieee754_pow+0xa3c>)
 8013e2e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013e32:	4108      	asrs	r0, r1
 8013e34:	ea00 030a 	and.w	r3, r0, sl
 8013e38:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013e3c:	f1c1 0114 	rsb	r1, r1, #20
 8013e40:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013e44:	fa4a fa01 	asr.w	sl, sl, r1
 8013e48:	f1bb 0f00 	cmp.w	fp, #0
 8013e4c:	f04f 0200 	mov.w	r2, #0
 8013e50:	4620      	mov	r0, r4
 8013e52:	4629      	mov	r1, r5
 8013e54:	bfb8      	it	lt
 8013e56:	f1ca 0a00 	rsblt	sl, sl, #0
 8013e5a:	f7ec fa15 	bl	8000288 <__aeabi_dsub>
 8013e5e:	ec41 0b19 	vmov	d9, r0, r1
 8013e62:	4642      	mov	r2, r8
 8013e64:	464b      	mov	r3, r9
 8013e66:	ec51 0b19 	vmov	r0, r1, d9
 8013e6a:	f7ec fa0f 	bl	800028c <__adddf3>
 8013e6e:	a37a      	add	r3, pc, #488	; (adr r3, 8014058 <__ieee754_pow+0x9f8>)
 8013e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e74:	2000      	movs	r0, #0
 8013e76:	4604      	mov	r4, r0
 8013e78:	460d      	mov	r5, r1
 8013e7a:	f7ec fbbd 	bl	80005f8 <__aeabi_dmul>
 8013e7e:	ec53 2b19 	vmov	r2, r3, d9
 8013e82:	4606      	mov	r6, r0
 8013e84:	460f      	mov	r7, r1
 8013e86:	4620      	mov	r0, r4
 8013e88:	4629      	mov	r1, r5
 8013e8a:	f7ec f9fd 	bl	8000288 <__aeabi_dsub>
 8013e8e:	4602      	mov	r2, r0
 8013e90:	460b      	mov	r3, r1
 8013e92:	4640      	mov	r0, r8
 8013e94:	4649      	mov	r1, r9
 8013e96:	f7ec f9f7 	bl	8000288 <__aeabi_dsub>
 8013e9a:	a371      	add	r3, pc, #452	; (adr r3, 8014060 <__ieee754_pow+0xa00>)
 8013e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ea0:	f7ec fbaa 	bl	80005f8 <__aeabi_dmul>
 8013ea4:	a370      	add	r3, pc, #448	; (adr r3, 8014068 <__ieee754_pow+0xa08>)
 8013ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eaa:	4680      	mov	r8, r0
 8013eac:	4689      	mov	r9, r1
 8013eae:	4620      	mov	r0, r4
 8013eb0:	4629      	mov	r1, r5
 8013eb2:	f7ec fba1 	bl	80005f8 <__aeabi_dmul>
 8013eb6:	4602      	mov	r2, r0
 8013eb8:	460b      	mov	r3, r1
 8013eba:	4640      	mov	r0, r8
 8013ebc:	4649      	mov	r1, r9
 8013ebe:	f7ec f9e5 	bl	800028c <__adddf3>
 8013ec2:	4604      	mov	r4, r0
 8013ec4:	460d      	mov	r5, r1
 8013ec6:	4602      	mov	r2, r0
 8013ec8:	460b      	mov	r3, r1
 8013eca:	4630      	mov	r0, r6
 8013ecc:	4639      	mov	r1, r7
 8013ece:	f7ec f9dd 	bl	800028c <__adddf3>
 8013ed2:	4632      	mov	r2, r6
 8013ed4:	463b      	mov	r3, r7
 8013ed6:	4680      	mov	r8, r0
 8013ed8:	4689      	mov	r9, r1
 8013eda:	f7ec f9d5 	bl	8000288 <__aeabi_dsub>
 8013ede:	4602      	mov	r2, r0
 8013ee0:	460b      	mov	r3, r1
 8013ee2:	4620      	mov	r0, r4
 8013ee4:	4629      	mov	r1, r5
 8013ee6:	f7ec f9cf 	bl	8000288 <__aeabi_dsub>
 8013eea:	4642      	mov	r2, r8
 8013eec:	4606      	mov	r6, r0
 8013eee:	460f      	mov	r7, r1
 8013ef0:	464b      	mov	r3, r9
 8013ef2:	4640      	mov	r0, r8
 8013ef4:	4649      	mov	r1, r9
 8013ef6:	f7ec fb7f 	bl	80005f8 <__aeabi_dmul>
 8013efa:	a35d      	add	r3, pc, #372	; (adr r3, 8014070 <__ieee754_pow+0xa10>)
 8013efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f00:	4604      	mov	r4, r0
 8013f02:	460d      	mov	r5, r1
 8013f04:	f7ec fb78 	bl	80005f8 <__aeabi_dmul>
 8013f08:	a35b      	add	r3, pc, #364	; (adr r3, 8014078 <__ieee754_pow+0xa18>)
 8013f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f0e:	f7ec f9bb 	bl	8000288 <__aeabi_dsub>
 8013f12:	4622      	mov	r2, r4
 8013f14:	462b      	mov	r3, r5
 8013f16:	f7ec fb6f 	bl	80005f8 <__aeabi_dmul>
 8013f1a:	a359      	add	r3, pc, #356	; (adr r3, 8014080 <__ieee754_pow+0xa20>)
 8013f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f20:	f7ec f9b4 	bl	800028c <__adddf3>
 8013f24:	4622      	mov	r2, r4
 8013f26:	462b      	mov	r3, r5
 8013f28:	f7ec fb66 	bl	80005f8 <__aeabi_dmul>
 8013f2c:	a356      	add	r3, pc, #344	; (adr r3, 8014088 <__ieee754_pow+0xa28>)
 8013f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f32:	f7ec f9a9 	bl	8000288 <__aeabi_dsub>
 8013f36:	4622      	mov	r2, r4
 8013f38:	462b      	mov	r3, r5
 8013f3a:	f7ec fb5d 	bl	80005f8 <__aeabi_dmul>
 8013f3e:	a354      	add	r3, pc, #336	; (adr r3, 8014090 <__ieee754_pow+0xa30>)
 8013f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f44:	f7ec f9a2 	bl	800028c <__adddf3>
 8013f48:	4622      	mov	r2, r4
 8013f4a:	462b      	mov	r3, r5
 8013f4c:	f7ec fb54 	bl	80005f8 <__aeabi_dmul>
 8013f50:	4602      	mov	r2, r0
 8013f52:	460b      	mov	r3, r1
 8013f54:	4640      	mov	r0, r8
 8013f56:	4649      	mov	r1, r9
 8013f58:	f7ec f996 	bl	8000288 <__aeabi_dsub>
 8013f5c:	4604      	mov	r4, r0
 8013f5e:	460d      	mov	r5, r1
 8013f60:	4602      	mov	r2, r0
 8013f62:	460b      	mov	r3, r1
 8013f64:	4640      	mov	r0, r8
 8013f66:	4649      	mov	r1, r9
 8013f68:	f7ec fb46 	bl	80005f8 <__aeabi_dmul>
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	ec41 0b19 	vmov	d9, r0, r1
 8013f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013f76:	4620      	mov	r0, r4
 8013f78:	4629      	mov	r1, r5
 8013f7a:	f7ec f985 	bl	8000288 <__aeabi_dsub>
 8013f7e:	4602      	mov	r2, r0
 8013f80:	460b      	mov	r3, r1
 8013f82:	ec51 0b19 	vmov	r0, r1, d9
 8013f86:	f7ec fc61 	bl	800084c <__aeabi_ddiv>
 8013f8a:	4632      	mov	r2, r6
 8013f8c:	4604      	mov	r4, r0
 8013f8e:	460d      	mov	r5, r1
 8013f90:	463b      	mov	r3, r7
 8013f92:	4640      	mov	r0, r8
 8013f94:	4649      	mov	r1, r9
 8013f96:	f7ec fb2f 	bl	80005f8 <__aeabi_dmul>
 8013f9a:	4632      	mov	r2, r6
 8013f9c:	463b      	mov	r3, r7
 8013f9e:	f7ec f975 	bl	800028c <__adddf3>
 8013fa2:	4602      	mov	r2, r0
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	4620      	mov	r0, r4
 8013fa8:	4629      	mov	r1, r5
 8013faa:	f7ec f96d 	bl	8000288 <__aeabi_dsub>
 8013fae:	4642      	mov	r2, r8
 8013fb0:	464b      	mov	r3, r9
 8013fb2:	f7ec f969 	bl	8000288 <__aeabi_dsub>
 8013fb6:	460b      	mov	r3, r1
 8013fb8:	4602      	mov	r2, r0
 8013fba:	4939      	ldr	r1, [pc, #228]	; (80140a0 <__ieee754_pow+0xa40>)
 8013fbc:	2000      	movs	r0, #0
 8013fbe:	f7ec f963 	bl	8000288 <__aeabi_dsub>
 8013fc2:	ec41 0b10 	vmov	d0, r0, r1
 8013fc6:	ee10 3a90 	vmov	r3, s1
 8013fca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013fd2:	da2b      	bge.n	801402c <__ieee754_pow+0x9cc>
 8013fd4:	4650      	mov	r0, sl
 8013fd6:	f000 f86f 	bl	80140b8 <scalbn>
 8013fda:	ec51 0b10 	vmov	r0, r1, d0
 8013fde:	ec53 2b18 	vmov	r2, r3, d8
 8013fe2:	f7ff bbee 	b.w	80137c2 <__ieee754_pow+0x162>
 8013fe6:	4b2f      	ldr	r3, [pc, #188]	; (80140a4 <__ieee754_pow+0xa44>)
 8013fe8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013fec:	429e      	cmp	r6, r3
 8013fee:	f77f af0d 	ble.w	8013e0c <__ieee754_pow+0x7ac>
 8013ff2:	4b2d      	ldr	r3, [pc, #180]	; (80140a8 <__ieee754_pow+0xa48>)
 8013ff4:	440b      	add	r3, r1
 8013ff6:	4303      	orrs	r3, r0
 8013ff8:	d009      	beq.n	801400e <__ieee754_pow+0x9ae>
 8013ffa:	ec51 0b18 	vmov	r0, r1, d8
 8013ffe:	2200      	movs	r2, #0
 8014000:	2300      	movs	r3, #0
 8014002:	f7ec fd6b 	bl	8000adc <__aeabi_dcmplt>
 8014006:	3800      	subs	r0, #0
 8014008:	bf18      	it	ne
 801400a:	2001      	movne	r0, #1
 801400c:	e448      	b.n	80138a0 <__ieee754_pow+0x240>
 801400e:	4622      	mov	r2, r4
 8014010:	462b      	mov	r3, r5
 8014012:	f7ec f939 	bl	8000288 <__aeabi_dsub>
 8014016:	4642      	mov	r2, r8
 8014018:	464b      	mov	r3, r9
 801401a:	f7ec fd73 	bl	8000b04 <__aeabi_dcmpge>
 801401e:	2800      	cmp	r0, #0
 8014020:	f43f aef4 	beq.w	8013e0c <__ieee754_pow+0x7ac>
 8014024:	e7e9      	b.n	8013ffa <__ieee754_pow+0x99a>
 8014026:	f04f 0a00 	mov.w	sl, #0
 801402a:	e71a      	b.n	8013e62 <__ieee754_pow+0x802>
 801402c:	ec51 0b10 	vmov	r0, r1, d0
 8014030:	4619      	mov	r1, r3
 8014032:	e7d4      	b.n	8013fde <__ieee754_pow+0x97e>
 8014034:	491a      	ldr	r1, [pc, #104]	; (80140a0 <__ieee754_pow+0xa40>)
 8014036:	2000      	movs	r0, #0
 8014038:	f7ff bb31 	b.w	801369e <__ieee754_pow+0x3e>
 801403c:	2000      	movs	r0, #0
 801403e:	2100      	movs	r1, #0
 8014040:	f7ff bb2d 	b.w	801369e <__ieee754_pow+0x3e>
 8014044:	4630      	mov	r0, r6
 8014046:	4639      	mov	r1, r7
 8014048:	f7ff bb29 	b.w	801369e <__ieee754_pow+0x3e>
 801404c:	9204      	str	r2, [sp, #16]
 801404e:	f7ff bb7b 	b.w	8013748 <__ieee754_pow+0xe8>
 8014052:	2300      	movs	r3, #0
 8014054:	f7ff bb65 	b.w	8013722 <__ieee754_pow+0xc2>
 8014058:	00000000 	.word	0x00000000
 801405c:	3fe62e43 	.word	0x3fe62e43
 8014060:	fefa39ef 	.word	0xfefa39ef
 8014064:	3fe62e42 	.word	0x3fe62e42
 8014068:	0ca86c39 	.word	0x0ca86c39
 801406c:	be205c61 	.word	0xbe205c61
 8014070:	72bea4d0 	.word	0x72bea4d0
 8014074:	3e663769 	.word	0x3e663769
 8014078:	c5d26bf1 	.word	0xc5d26bf1
 801407c:	3ebbbd41 	.word	0x3ebbbd41
 8014080:	af25de2c 	.word	0xaf25de2c
 8014084:	3f11566a 	.word	0x3f11566a
 8014088:	16bebd93 	.word	0x16bebd93
 801408c:	3f66c16c 	.word	0x3f66c16c
 8014090:	5555553e 	.word	0x5555553e
 8014094:	3fc55555 	.word	0x3fc55555
 8014098:	3fe00000 	.word	0x3fe00000
 801409c:	fff00000 	.word	0xfff00000
 80140a0:	3ff00000 	.word	0x3ff00000
 80140a4:	4090cbff 	.word	0x4090cbff
 80140a8:	3f6f3400 	.word	0x3f6f3400
 80140ac:	652b82fe 	.word	0x652b82fe
 80140b0:	3c971547 	.word	0x3c971547
 80140b4:	00000000 	.word	0x00000000

080140b8 <scalbn>:
 80140b8:	b570      	push	{r4, r5, r6, lr}
 80140ba:	ec55 4b10 	vmov	r4, r5, d0
 80140be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80140c2:	4606      	mov	r6, r0
 80140c4:	462b      	mov	r3, r5
 80140c6:	b999      	cbnz	r1, 80140f0 <scalbn+0x38>
 80140c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80140cc:	4323      	orrs	r3, r4
 80140ce:	d03f      	beq.n	8014150 <scalbn+0x98>
 80140d0:	4b35      	ldr	r3, [pc, #212]	; (80141a8 <scalbn+0xf0>)
 80140d2:	4629      	mov	r1, r5
 80140d4:	ee10 0a10 	vmov	r0, s0
 80140d8:	2200      	movs	r2, #0
 80140da:	f7ec fa8d 	bl	80005f8 <__aeabi_dmul>
 80140de:	4b33      	ldr	r3, [pc, #204]	; (80141ac <scalbn+0xf4>)
 80140e0:	429e      	cmp	r6, r3
 80140e2:	4604      	mov	r4, r0
 80140e4:	460d      	mov	r5, r1
 80140e6:	da10      	bge.n	801410a <scalbn+0x52>
 80140e8:	a327      	add	r3, pc, #156	; (adr r3, 8014188 <scalbn+0xd0>)
 80140ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ee:	e01f      	b.n	8014130 <scalbn+0x78>
 80140f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80140f4:	4291      	cmp	r1, r2
 80140f6:	d10c      	bne.n	8014112 <scalbn+0x5a>
 80140f8:	ee10 2a10 	vmov	r2, s0
 80140fc:	4620      	mov	r0, r4
 80140fe:	4629      	mov	r1, r5
 8014100:	f7ec f8c4 	bl	800028c <__adddf3>
 8014104:	4604      	mov	r4, r0
 8014106:	460d      	mov	r5, r1
 8014108:	e022      	b.n	8014150 <scalbn+0x98>
 801410a:	460b      	mov	r3, r1
 801410c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014110:	3936      	subs	r1, #54	; 0x36
 8014112:	f24c 3250 	movw	r2, #50000	; 0xc350
 8014116:	4296      	cmp	r6, r2
 8014118:	dd0d      	ble.n	8014136 <scalbn+0x7e>
 801411a:	2d00      	cmp	r5, #0
 801411c:	a11c      	add	r1, pc, #112	; (adr r1, 8014190 <scalbn+0xd8>)
 801411e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014122:	da02      	bge.n	801412a <scalbn+0x72>
 8014124:	a11c      	add	r1, pc, #112	; (adr r1, 8014198 <scalbn+0xe0>)
 8014126:	e9d1 0100 	ldrd	r0, r1, [r1]
 801412a:	a319      	add	r3, pc, #100	; (adr r3, 8014190 <scalbn+0xd8>)
 801412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014130:	f7ec fa62 	bl	80005f8 <__aeabi_dmul>
 8014134:	e7e6      	b.n	8014104 <scalbn+0x4c>
 8014136:	1872      	adds	r2, r6, r1
 8014138:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801413c:	428a      	cmp	r2, r1
 801413e:	dcec      	bgt.n	801411a <scalbn+0x62>
 8014140:	2a00      	cmp	r2, #0
 8014142:	dd08      	ble.n	8014156 <scalbn+0x9e>
 8014144:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014148:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801414c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014150:	ec45 4b10 	vmov	d0, r4, r5
 8014154:	bd70      	pop	{r4, r5, r6, pc}
 8014156:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801415a:	da08      	bge.n	801416e <scalbn+0xb6>
 801415c:	2d00      	cmp	r5, #0
 801415e:	a10a      	add	r1, pc, #40	; (adr r1, 8014188 <scalbn+0xd0>)
 8014160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014164:	dac0      	bge.n	80140e8 <scalbn+0x30>
 8014166:	a10e      	add	r1, pc, #56	; (adr r1, 80141a0 <scalbn+0xe8>)
 8014168:	e9d1 0100 	ldrd	r0, r1, [r1]
 801416c:	e7bc      	b.n	80140e8 <scalbn+0x30>
 801416e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014172:	3236      	adds	r2, #54	; 0x36
 8014174:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014178:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801417c:	4620      	mov	r0, r4
 801417e:	4b0c      	ldr	r3, [pc, #48]	; (80141b0 <scalbn+0xf8>)
 8014180:	2200      	movs	r2, #0
 8014182:	e7d5      	b.n	8014130 <scalbn+0x78>
 8014184:	f3af 8000 	nop.w
 8014188:	c2f8f359 	.word	0xc2f8f359
 801418c:	01a56e1f 	.word	0x01a56e1f
 8014190:	8800759c 	.word	0x8800759c
 8014194:	7e37e43c 	.word	0x7e37e43c
 8014198:	8800759c 	.word	0x8800759c
 801419c:	fe37e43c 	.word	0xfe37e43c
 80141a0:	c2f8f359 	.word	0xc2f8f359
 80141a4:	81a56e1f 	.word	0x81a56e1f
 80141a8:	43500000 	.word	0x43500000
 80141ac:	ffff3cb0 	.word	0xffff3cb0
 80141b0:	3c900000 	.word	0x3c900000

080141b4 <with_errno>:
 80141b4:	b570      	push	{r4, r5, r6, lr}
 80141b6:	4604      	mov	r4, r0
 80141b8:	460d      	mov	r5, r1
 80141ba:	4616      	mov	r6, r2
 80141bc:	f7fa fc66 	bl	800ea8c <__errno>
 80141c0:	4629      	mov	r1, r5
 80141c2:	6006      	str	r6, [r0, #0]
 80141c4:	4620      	mov	r0, r4
 80141c6:	bd70      	pop	{r4, r5, r6, pc}

080141c8 <xflow>:
 80141c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80141ca:	4614      	mov	r4, r2
 80141cc:	461d      	mov	r5, r3
 80141ce:	b108      	cbz	r0, 80141d4 <xflow+0xc>
 80141d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80141d4:	e9cd 2300 	strd	r2, r3, [sp]
 80141d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80141dc:	4620      	mov	r0, r4
 80141de:	4629      	mov	r1, r5
 80141e0:	f7ec fa0a 	bl	80005f8 <__aeabi_dmul>
 80141e4:	2222      	movs	r2, #34	; 0x22
 80141e6:	b003      	add	sp, #12
 80141e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80141ec:	f7ff bfe2 	b.w	80141b4 <with_errno>

080141f0 <__math_uflow>:
 80141f0:	b508      	push	{r3, lr}
 80141f2:	2200      	movs	r2, #0
 80141f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80141f8:	f7ff ffe6 	bl	80141c8 <xflow>
 80141fc:	ec41 0b10 	vmov	d0, r0, r1
 8014200:	bd08      	pop	{r3, pc}

08014202 <__math_oflow>:
 8014202:	b508      	push	{r3, lr}
 8014204:	2200      	movs	r2, #0
 8014206:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801420a:	f7ff ffdd 	bl	80141c8 <xflow>
 801420e:	ec41 0b10 	vmov	d0, r0, r1
 8014212:	bd08      	pop	{r3, pc}

08014214 <_init>:
 8014214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014216:	bf00      	nop
 8014218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801421a:	bc08      	pop	{r3}
 801421c:	469e      	mov	lr, r3
 801421e:	4770      	bx	lr

08014220 <_fini>:
 8014220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014222:	bf00      	nop
 8014224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014226:	bc08      	pop	{r3}
 8014228:	469e      	mov	lr, r3
 801422a:	4770      	bx	lr
